
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 39 02 c0       	mov    eax,0xc0023984
c0000025:	3d 84 39 02 c0       	cmp    eax,0xc0023984
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 39 02 c0       	push   0xc0023984
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 39 02 c0       	mov    eax,0xc0023984
c0000051:	2d 84 39 02 c0       	sub    eax,0xc0023984
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 39 02 c0       	push   0xc0023984
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c 00 02 c0       	mov    ebx,0xc002004c
c0000097:	81 eb 48 00 02 c0    	sub    ebx,0xc0020048
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 00 02 c0       	mov    esi,0xc0020048
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 39 02 c0       	push   0xc0023984
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 84 39 02 c0       	push   0xc0023984
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 4b 52 01 00       	call   c00154f8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 29 52 01 00       	call   c00154f8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 36 57 01 00       	call   c0015a24 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 d1 5d 01 00       	call   c00160c8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 2d 0f 01 00       	jmp    c00112ac <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 00 02 c0 02 	test   BYTE PTR [edx-0x3ffdffa0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 00 02 c0 01 	test   BYTE PTR [edx-0x3ffdffa0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 00 02 c0 08 	test   BYTE PTR [edx-0x3ffdffa0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 00 02 c0 08 	test   BYTE PTR [edx-0x3ffdffa0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 00 02 c0 04 	test   BYTE PTR [ecx-0x3ffdffa0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 00 02 c0 01 	test   BYTE PTR [edx-0x3ffdffa0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 64 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfe9c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 ba 78 01 00       	jmp    c0019694 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 e4 78 01 00       	jmp    c00196d4 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 05 79 01 00       	jmp    c0019714 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 c0 02 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfd40]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 c0 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfd40]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba a4 29 02 c0       	mov    edx,0xc00229a4
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 7c 01 02 c0       	mov    edx,0xc002017c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 82 01 02 c0       	mov    eax,0xc0020182
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 40 02 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfdc0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 8b 01 02 c0       	mov    eax,0xc002018b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 c0 02 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfd40]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 10 02 02 c0       	mov    eax,0xc0020210
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 00 02 02 c0       	mov    ebx,0xc0020200
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 e0 01 02 c0       	mov    eax,0xc00201e0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 f0 01 02 c0       	mov    eax,0xc00201f0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 92 01 02 c0       	mov    edx,0xc0020192
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 9e 01 02 c0       	mov    edx,0xc002019e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba b2 01 02 c0       	mov    edx,0xc00201b2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c e0 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc00205e0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 e0 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc00205e0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 e0 03 02 c0       	mov    eax,0xc00203e0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 20 03 02 c0       	mov    eax,0xc0020320
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 e0 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfd20]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 e0 06 02 c0       	push   0xc00206e0
c0006147:	e8 ec 3e 01 00       	call   c001a038 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ee 06 02 c0       	push   0xc00206ee
c000617f:	e8 b4 3e 01 00       	call   c001a038 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 1d 3e 01 00       	call   c0019fdc <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 fd 06 02 c0       	push   0xc00206fd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 00 07 02 c0       	push   0xc0020700
c000682f:	e8 04 38 01 00       	call   c001a038 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 12 38 01 00       	call   c001a054 <iso_kprintfd>
c0006842:	c7 04 24 05 07 02 c0 	mov    DWORD PTR [esp],0xc0020705
c0006849:	e8 ea 37 01 00       	call   c001a038 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 fa 37 01 00       	call   c001a054 <iso_kprintfd>
c000685a:	c7 04 24 0b 07 02 c0 	mov    DWORD PTR [esp],0xc002070b
c0006861:	e8 d2 37 01 00       	call   c001a038 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 e2 37 01 00       	call   c001a054 <iso_kprintfd>
c0006872:	c7 04 24 11 07 02 c0 	mov    DWORD PTR [esp],0xc0020711
c0006879:	e8 ba 37 01 00       	call   c001a038 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 ca 37 01 00       	call   c001a054 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 fd 06 02 c0       	push   0xc00206fd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 1a 07 02 c0       	push   0xc002071a
c0006a52:	e8 e1 35 01 00       	call   c001a038 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 25 07 02 c0       	push   0xc0020725
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 2c 07 02 c0       	push   0xc002072c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 33 07 02 c0       	push   0xc0020733
c0006b69:	e8 ca 34 01 00       	call   c001a038 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 3e 07 02 c0       	push   0xc002073e
c0006b84:	e8 af 34 01 00       	call   c001a038 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 7a 9e 00 00       	call   c0010b0e <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 9f 5b 00 00       	call   c000c842 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 4f 07 02 c0       	push   0xc002074f
c0006cd4:	e8 14 9f 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 68 07 02 c0       	push   0xc0020768
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 4f eb 00 00       	call   c0015850 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 5e ed 00 00       	call   c0015a74 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 38 65 01 c0       	push   0xc0016538
c0006d25:	52                   	push   edx
c0006d26:	e8 49 ed 00 00       	call   c0015a74 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 64 08 02 c0       	push   0xc0020864
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 b0 9e 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 2f a7 00 00       	call   c0011478 <KeInitRand()>
c0006d49:	e8 0d fc 00 00       	call   c001695b <Vm::initialise8086()>
c0006d4e:	e8 2d 48 00 00       	call   c000b580 <Fs::initVFS()>
c0006d53:	c7 04 24 75 07 02 c0 	mov    DWORD PTR [esp],0xc0020775
c0006d5a:	e8 8e 9e 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 64 08 02 c0       	push   0xc0020864
c0006d7e:	e8 6a 9e 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0006d83:	e8 d6 44 00 00       	call   c000b25e <KeInitialiseSymlinks()>
c0006d88:	e8 97 a3 00 00       	call   c0011124 <KeLoadSystemEnv()>
c0006d8d:	e8 f4 a5 00 00       	call   c0011386 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 8f 07 02 c0       	push   0xc002078f
c0006d9c:	68 98 07 02 c0       	push   0xc0020798
c0006da1:	e8 ac cc 00 00       	call   c0013a52 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 ee 53 00 00       	call   c000c19c <User::loadClockSettings(int)>
c0006dae:	c7 04 24 88 08 02 c0 	mov    DWORD PTR [esp],0xc0020888
c0006db5:	e8 33 9e 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 74 5a 00 00       	call   c000c840 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 a0 07 02 c0 	mov    DWORD PTR [esp],0xc00207a0
c0006dd3:	e8 15 9e 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 b1 07 02 c0       	push   0xc00207b1
c0006de7:	e8 69 e4 00 00       	call   c0015255 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 a0 e6 00 00       	call   c0015495 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 be f0 00 00       	call   c0015ec0 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 cd 07 02 c0       	push   0xc00207cd
c0006e17:	50                   	push   eax
c0006e18:	e8 9f 5a 00 00       	call   c000c8bc <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba d4 08 02 c0       	mov    edx,0xc00208d4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 2f 81 01 00       	call   c001f046 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 d1 90 00 00       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 aa 90 00 00       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 88 90 00 00       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 66 90 00 00       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 73 8f 00 00       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 4e 8f 00 00       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 8e 7f 01 00       	call   c001f000 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 dc 7b 01 00       	call   c001ec70 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 64 8f 00 00       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 d6 07 02 c0       	push   0xc00207d6
c0007104:	e8 b8 a1 00 00       	call   c00112c1 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 dc 07 02 c0       	push   0xc00207dc
c0007140:	e8 7c a1 00 00       	call   c00112c1 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 6b 89 00 00       	jmp    c000faf8 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 e2 07 02 c0       	push   0xc00207e2
c00071e3:	0f 94 05 e0 31 02 c0 	sete   BYTE PTR ds:0xc00231e0
c00071ea:	e8 fe 99 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 67 84 00 00       	call   c000f66c <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 10 55 00 00       	call   c000c724 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 fa 07 02 c0 	mov    DWORD PTR [esp],0xc00207fa
c000722d:	e8 bb 99 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 96 8e 00 00       	call   c00100de <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 cd 54 00 00       	call   c000c724 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 a8 08 02 c0       	push   0xc00208a8
c0007274:	e8 74 99 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0007279:	e8 24 09 01 00       	call   c0017ba2 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 14 08 02 c0 	mov    DWORD PTR [esp],0xc0020814
c0007285:	e8 63 99 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 06 e9 00 00       	call   c0015b9c <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 2f 08 02 c0       	push   0xc002082f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 40 08 02 c0       	push   0xc0020840
c000730d:	e8 af 9f 00 00       	call   c00112c1 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 4d 08 02 c0       	push   0xc002084d
c0007322:	e8 9a 9f 00 00       	call   c00112c1 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 57 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020857
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 80 9f 00 00       	jmp    c00112c1 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 3b 03 01 00       	call   c001786e <HalSystemIdle()>
c0007533:	e8 ca 80 01 00       	call   c001f602 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 00 ed 01 c0       	push   0xc001ed00
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 10 ed 01 c0       	push   0xc001ed10
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 1a ed 01 c0       	push   0xc001ed1a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 24 ed 01 c0       	push   0xc001ed24
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 2e ed 01 c0       	push   0xc001ed2e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 38 ed 01 c0       	push   0xc001ed38
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 42 ed 01 c0       	push   0xc001ed42
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 4c ed 01 c0       	push   0xc001ed4c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 56 ed 01 c0       	push   0xc001ed56
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 5e ed 01 c0       	push   0xc001ed5e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 68 ed 01 c0       	push   0xc001ed68
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 70 ed 01 c0       	push   0xc001ed70
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 78 ed 01 c0       	push   0xc001ed78
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 80 ed 01 c0       	push   0xc001ed80
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 9a ed 01 c0       	push   0xc001ed9a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 a2 ed 01 c0       	push   0xc001eda2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 ac ed 01 c0       	push   0xc001edac
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 b6 ed 01 c0       	push   0xc001edb6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 c0 ed 01 c0       	push   0xc001edc0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 5a ee 01 c0       	push   0xc001ee5a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 61 ee 01 c0       	push   0xc001ee61
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 4c ee 01 c0       	push   0xc001ee4c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 53 ee 01 c0       	push   0xc001ee53
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 ca ed 01 c0       	push   0xc001edca
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 d4 ed 01 c0       	push   0xc001edd4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 de ed 01 c0       	push   0xc001edde
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 e8 ed 01 c0       	push   0xc001ede8
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 f2 ed 01 c0       	push   0xc001edf2
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 fc ed 01 c0       	push   0xc001edfc
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 06 ee 01 c0       	push   0xc001ee06
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 10 ee 01 c0       	push   0xc001ee10
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 1a ee 01 c0       	push   0xc001ee1a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 24 ee 01 c0       	push   0xc001ee24
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 2e ee 01 c0       	push   0xc001ee2e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 38 ee 01 c0       	push   0xc001ee38
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 42 ee 01 c0       	push   0xc001ee42
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 9c ef 01 c0       	push   0xc001ef9c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 a6 ef 01 c0       	push   0xc001efa6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 b0 ef 01 c0       	push   0xc001efb0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 ba ef 01 c0       	push   0xc001efba
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 c4 ef 01 c0       	push   0xc001efc4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 ce ef 01 c0       	push   0xc001efce
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 d8 ef 01 c0       	push   0xc001efd8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 e2 ef 01 c0       	push   0xc001efe2
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 56 ed 01 c0       	push   0xc001ed56
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 d4 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231d4
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d d4 31 02 c0    	mov    edi,DWORD PTR ds:0xc00231d4
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 d4 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00231d4,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 d4 31 02 c0       	mov    eax,ds:0xc00231d4
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 f8 08 02 c0       	push   0xc00208f8
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 28 09 02 c0       	push   0xc0020928
c0007a44:	e8 78 98 00 00       	call   c00112c1 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 2d 09 02 c0       	push   0xc002092d
c0007a5a:	e8 62 98 00 00       	call   c00112c1 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 34 09 02 c0       	push   0xc0020934
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 eb 8f 00 00       	call   c0010b71 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 14 8f 00 00       	call   c0010abb <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 dd 79 01 00       	call   c001f59a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 4c 09 02 c0       	push   0xc002094c
c0007c4b:	e8 71 96 00 00       	call   c00112c1 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 4c 09 02 c0       	push   0xc002094c
c0007cc5:	e8 f7 95 00 00       	call   c00112c1 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 d8 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231d8
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d d8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231d8
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 d8 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231d8
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 f1 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209f1
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 f1 94 00 00       	jmp    c00112c1 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 74 09 02 c0       	push   0xc0020974
c0007e54:	e8 68 94 00 00       	call   c00112c1 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 07 0a 02 c0       	push   0xc0020a07
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 a4 09 02 c0       	push   0xc00209a4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 1f 0a 02 c0       	push   0xc0020a1f
c000810a:	e8 b2 91 00 00       	call   c00112c1 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 c8 09 02 c0       	push   0xc00209c8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 2d 0a 02 c0       	push   0xc0020a2d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 8c 0a 02 c0       	mov    edx,0xc0020a8c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 49 0a 02 c0       	push   0xc0020a49
c0008331:	e8 8b 8f 00 00       	call   c00112c1 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 41 d9 00 00       	call   c0015cc0 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 73 70 01 00       	call   c001f480 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 66 0a 02 c0       	push   0xc0020a66
c0008422:	e8 9a 8e 00 00       	call   c00112c1 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 8c 0a 02 c0       	mov    edx,0xc0020a8c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba d4 0a 02 c0       	mov    edx,0xc0020ad4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 fa 50 00 00       	call   c000d606 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 2e 05 01 00       	call   c0018a60 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 00 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce00]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 00 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce00]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 b8 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf48]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 90 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf70]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 60 02 01 00       	call   c00188f4 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 bd 02 01 00       	jmp    c00189fc <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 a0 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020aa0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 35 8b 00 00       	jmp    c00112c1 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 5a 38 00 00       	jmp    c000c143 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ae 0a 02 c0       	mov    esi,0xc0020aae
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 d4 fd 00 00       	call   c00189fc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba d4 0a 02 c0       	mov    edx,0xc0020ad4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 bf 0a 02 c0       	push   0xc0020abf
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 c5 0a 02 c0       	push   0xc0020ac5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 9c 0b 02 c0       	mov    edx,0xc0020b9c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 40 32 02 c0       	mov    eax,ds:0xc0023240
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 40 32 02 c0    	mov    DWORD PTR ds:0xc0023240,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 7f 64 01 00       	call   c001f668 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba b8 0b 02 c0       	mov    edx,0xc0020bb8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 9c 0b 02 c0       	mov    edx,0xc0020b9c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 7f 63 01 00       	call   c001f73c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 73 63 01 00       	call   c001f744 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 79 62 01 00       	call   c001f668 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 74 0b 02 c0       	push   0xc0020b74
c0009414:	e8 a8 7e 00 00       	call   c00112c1 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba b8 0b 02 c0       	mov    edx,0xc0020bb8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 7e 62 01 00       	call   c001f73c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 0b 63 01 00       	call   c001f7e6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 c9 60 01 00       	call   c001f626 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 d0 31 02 c0       	push   0xc00231d0
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 24 f6 01 c0       	push   0xc001f624
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 48 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023248
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 48 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023248
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 44 32 02 c0    	mov    ebp,DWORD PTR ds:0xc0023244
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 44 32 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023244,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 44 32 02 c0    	mov    DWORD PTR ds:0xc0023244,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 cc 0b 02 c0       	push   0xc0020bcc
c0009674:	e8 48 7c 00 00       	call   c00112c1 <KePanic(char const*)>
c0009679:	8b 2d 44 32 02 c0    	mov    ebp,DWORD PTR ds:0xc0023244
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 44 32 02 c0    	mov    DWORD PTR ds:0xc0023244,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 44 32 02 c0       	mov    eax,ds:0xc0023244
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 44 32 02 c0    	mov    DWORD PTR ds:0xc0023244,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 44 32 02 c0       	mov    ds:0xc0023244,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 4c 32 02 c0    	mov    edx,DWORD PTR ds:0xc002324c
c000973e:	8b 0d 54 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023254
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 50 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023250
c0009759:	8b 0d 4c 32 02 c0    	mov    ecx,DWORD PTR ds:0xc002324c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 60 0e 02 c0       	push   0xc0020e60
c000979e:	e8 1e 7b 00 00       	call   c00112c1 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 77 0e 02 c0       	push   0xc0020e77
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 50 32 02 c0    	mov    DWORD PTR ds:0xc0023250,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 58 32 02 c0 43 	mov    BYTE PTR ds:0xc0023258,0x43
c000984f:	c7 05 4c 32 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002324c,0x8
c0009859:	a3 54 32 02 c0       	mov    ds:0xc0023254,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 50 32 02 c0       	mov    eax,ds:0xc0023250
c0009874:	f7 35 4c 32 02 c0    	div    DWORD PTR ds:0xc002324c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 ec 0b 02 c0       	push   0xc0020bec
c00098af:	e8 0d 7a 00 00       	call   c00112c1 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 8e 0e 02 c0       	push   0xc0020e8e
c0009981:	e8 3b 79 00 00       	call   c00112c1 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 10 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020c10
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 d8 78 00 00       	jmp    c00112c1 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 aa 0e 02 c0       	push   0xc0020eaa
c00099f6:	e8 c6 78 00 00       	call   c00112c1 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 c6 0e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ec6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 7c 78 00 00       	jmp    c00112c1 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 34 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c34
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 58 0c 02 c0       	push   0xc0020c58
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 c0 0c 02 c0       	push   0xc0020cc0
c0009d87:	e8 35 75 00 00       	call   c00112c1 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 e4 0c 02 c0       	push   0xc0020ce4
c0009e7b:	e8 41 74 00 00       	call   c00112c1 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 10 0d 02 c0       	push   0xc0020d10
c0009fd9:	e8 e3 72 00 00       	call   c00112c1 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 aa 27 00 00       	call   c000c9b8 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 e0 0e 02 c0       	push   0xc0020ee0
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 4c 32 02 c0       	mov    eax,ds:0xc002324c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 58 32 02 c0 	movsx  eax,BYTE PTR ds:0xc0023258
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 86 38 00 00       	call   c000db7a <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 4c 32 02 c0    	cmp    DWORD PTR ds:0xc002324c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 34 0d 02 c0       	push   0xc0020d34
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 ee 0e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020eee
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 11 0f 02 c0       	push   0xc0020f11
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 ff 0e 02 c0       	push   0xc0020eff
c000a413:	e8 a9 6e 00 00       	call   c00112c1 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 64 0d 02 c0       	push   0xc0020d64
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 4c 32 02 c0       	mov    eax,ds:0xc002324c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 58 32 02 c0 	movsx  eax,BYTE PTR ds:0xc0023258
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 42 36 00 00       	call   c000db0e <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 4c 32 02 c0    	cmp    DWORD PTR ds:0xc002324c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 24 0f 02 c0       	push   0xc0020f24
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 84 0d 02 c0       	push   0xc0020d84
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 e4 0d 02 c0 	mov    DWORD PTR [esp],0xc0020de4
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 39 0f 02 c0       	push   0xc0020f39
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 4d 0f 02 c0       	push   0xc0020f4d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 60 0f 02 c0       	push   0xc0020f60
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 6d 0f 02 c0       	push   0xc0020f6d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 86 0f 02 c0       	push   0xc0020f86
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 86 0f 02 c0       	push   0xc0020f86
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 8e 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f8e
c000a7ec:	e8 d0 6a 00 00       	call   c00112c1 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 a6 0f 02 c0       	push   0xc0020fa6
c000a7fe:	e8 be 6a 00 00       	call   c00112c1 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 bc 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf044]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 0c 11 02 c0       	push   0xc002110c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 20 11 02 c0       	push   0xc0021120
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 2a 11 02 c0       	push   0xc002112a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 34 11 02 c0       	push   0xc0021134
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 78 12 02 c0       	push   0xc0021278
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 3e 11 02 c0       	push   0xc002113e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 98 12 02 c0       	push   0xc0021298
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 53 11 02 c0       	push   0xc0021153
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 6d 11 02 c0       	push   0xc002116d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 60 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcda0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 c0 12 02 c0       	push   0xc00212c0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 78 12 02 c0       	push   0xc0021278
c000ab78:	e8 44 67 00 00       	call   c00112c1 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 08 13 02 c0       	push   0xc0021308
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 08 13 02 c0       	push   0xc0021308
c000aba7:	e8 15 67 00 00       	call   c00112c1 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 78 11 02 c0       	push   0xc0021178
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 78 11 02 c0       	push   0xc0021178
c000abd3:	e8 e9 66 00 00       	call   c00112c1 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 95 11 02 c0       	push   0xc0021195
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 95 11 02 c0       	push   0xc0021195
c000abff:	e8 bd 66 00 00       	call   c00112c1 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 28 13 02 c0       	push   0xc0021328
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 28 13 02 c0       	push   0xc0021328
c000ac2b:	e8 91 66 00 00       	call   c00112c1 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 4c 13 02 c0       	push   0xc002134c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 4c 13 02 c0       	push   0xc002134c
c000ac57:	e8 65 66 00 00       	call   c00112c1 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 b1 11 02 c0       	push   0xc00211b1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 b1 11 02 c0       	push   0xc00211b1
c000ac83:	e8 39 66 00 00       	call   c00112c1 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 cd 11 02 c0       	push   0xc00211cd
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 cd 11 02 c0       	push   0xc00211cd
c000acaf:	e8 0d 66 00 00       	call   c00112c1 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 6c 13 02 c0       	push   0xc002136c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 6c 13 02 c0       	push   0xc002136c
c000acdb:	e8 e1 65 00 00       	call   c00112c1 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 90 13 02 c0       	push   0xc0021390
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 90 13 02 c0       	push   0xc0021390
c000ad07:	e8 b5 65 00 00       	call   c00112c1 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 ed 66 00 00       	call   c001140f <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 af 13 02 c0       	push   0xc00213af
c000ad57:	e8 65 65 00 00       	call   c00112c1 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 b8 13 02 c0       	push   0xc00213b8
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 02 0b 00 00       	call   c000b8a6 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 d6 13 02 c0       	push   0xc00213d6
c000adb3:	e8 09 65 00 00       	call   c00112c1 <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 ff 0a 00 00       	call   c000b8c4 <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 f0 13 02 c0       	push   0xc00213f0
c000add4:	e8 e8 64 00 00       	call   c00112c1 <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 0a 14 02 c0       	push   0xc002140a
c000ae1b:	e8 a1 64 00 00       	call   c00112c1 <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 e9 0a 00 00       	call   c000b922 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 44             	sub    esp,0x44
c000af14:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af18:	56                   	push   esi
c000af19:	68 24 14 02 c0       	push   0xc0021424
c000af1e:	e8 e7 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af23:	89 34 24             	mov    DWORD PTR [esp],esi
c000af26:	e8 9b ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	89 c7                	mov    edi,eax
c000af30:	89 d0                	mov    eax,edx
c000af32:	09 f8                	or     eax,edi
c000af34:	0f 84 de 01 00 00    	je     c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af3a:	53                   	push   ebx
c000af3b:	89 d5                	mov    ebp,edx
c000af3d:	53                   	push   ebx
c000af3e:	57                   	push   edi
c000af3f:	68 3e 14 02 c0       	push   0xc002143e
c000af44:	e8 c1 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af49:	58                   	pop    eax
c000af4a:	5a                   	pop    edx
c000af4b:	55                   	push   ebp
c000af4c:	68 4c 14 02 c0       	push   0xc002144c
c000af51:	e8 b4 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af5d:	e8 71 cb ff ff       	call   c0007ad3 <malloc>
c000af62:	83 c4 0c             	add    esp,0xc
c000af65:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af6b:	56                   	push   esi
c000af6c:	50                   	push   eax
c000af6d:	89 c3                	mov    ebx,eax
c000af6f:	e8 32 09 00 00       	call   c000b8a6 <File::File(char const*, Process*)>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	85 db                	test   ebx,ebx
c000af79:	0f 84 68 01 00 00    	je     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000af7f:	83 ec 0c             	sub    esp,0xc
c000af82:	68 40 20 02 c0       	push   0xc0022040
c000af87:	e8 7e f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af8c:	5a                   	pop    edx
c000af8d:	59                   	pop    ecx
c000af8e:	6a 01                	push   0x1
c000af90:	53                   	push   ebx
c000af91:	e8 2e 09 00 00       	call   c000b8c4 <File::open(FileOpenMode)>
c000af96:	83 c4 10             	add    esp,0x10
c000af99:	85 c0                	test   eax,eax
c000af9b:	74 0b                	je     c000afa8 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000af9d:	83 ec 0c             	sub    esp,0xc
c000afa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa2:	53                   	push   ebx
c000afa3:	e9 39 01 00 00       	jmp    c000b0e1 <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afa8:	83 ec 0c             	sub    esp,0xc
c000afab:	68 46 0a 02 c0       	push   0xc0020a46
c000afb0:	e8 55 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afb5:	58                   	pop    eax
c000afb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afb8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afbc:	56                   	push   esi
c000afbd:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afc1:	52                   	push   edx
c000afc2:	6a 00                	push   0x0
c000afc4:	6a 08                	push   0x8
c000afc6:	53                   	push   ebx
c000afc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afca:	83 c4 20             	add    esp,0x20
c000afcd:	85 c0                	test   eax,eax
c000afcf:	0f 85 fe 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afd5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afda:	0f 85 f3 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	68 72 20 02 c0       	push   0xc0022072
c000afe8:	e8 1d f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afed:	8d 54 24 20          	lea    edx,[esp+0x20]
c000aff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff3:	89 34 24             	mov    DWORD PTR [esp],esi
c000aff6:	52                   	push   edx
c000aff7:	6a 00                	push   0x0
c000aff9:	6a 08                	push   0x8
c000affb:	53                   	push   ebx
c000affc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afff:	83 c4 20             	add    esp,0x20
c000b002:	85 c0                	test   eax,eax
c000b004:	0f 85 c9 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b00a:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b00f:	0f 85 be 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b015:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b019:	0f 85 f9 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b01f:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b023:	0f 85 ef 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	68 5a 14 02 c0       	push   0xc002145a
c000b031:	e8 d4 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b036:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b03e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b046:	83 c4 0c             	add    esp,0xc
c000b049:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b04d:	50                   	push   eax
c000b04e:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b052:	50                   	push   eax
c000b053:	53                   	push   ebx
c000b054:	e8 6d 0b 00 00       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b061:	75 70                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b063:	b8 0f 00 00 00       	mov    eax,0xf
c000b068:	31 ff                	xor    edi,edi
c000b06a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b06e:	89 f8                	mov    eax,edi
c000b070:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b074:	73 5d                	jae    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	68 5a 14 02 c0       	push   0xc002145a
c000b07e:	e8 87 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b083:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b087:	b9 ff 00 00 00       	mov    ecx,0xff
c000b08c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b090:	83 c0 f0             	add    eax,0xfffffff0
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	83 d2 ff             	adc    edx,0xffffffff
c000b09a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	39 c1                	cmp    ecx,eax
c000b0a3:	19 d7                	sbb    edi,edx
c000b0a5:	72 40                	jb     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0a7:	83 ec 0c             	sub    esp,0xc
c000b0aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ac:	56                   	push   esi
c000b0ad:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0b1:	52                   	push   edx
c000b0b2:	50                   	push   eax
c000b0b3:	53                   	push   ebx
c000b0b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0b7:	83 c4 20             	add    esp,0x20
c000b0ba:	85 c0                	test   eax,eax
c000b0bc:	75 15                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c2:	89 c7                	mov    edi,eax
c000b0c4:	c1 ff 1f             	sar    edi,0x1f
c000b0c7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b0cb:	75 06                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0cd:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0d1:	74 19                	je     c000b0ec <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	53                   	push   ebx
c000b0d7:	e8 46 08 00 00       	call   c000b922 <File::close()>
c000b0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	83 c8 ff             	or     eax,0xffffffff
c000b0ea:	eb 2e                	jmp    c000b11a <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	68 52 2b 02 c0       	push   0xc0022b52
c000b0f4:	e8 11 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0fc:	e8 21 08 00 00       	call   c000b922 <File::close()>
c000b101:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b106:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b109:	c7 04 24 5d 14 02 c0 	mov    DWORD PTR [esp],0xc002145d
c000b110:	e8 f5 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b115:	83 c4 10             	add    esp,0x10
c000b118:	31 c0                	xor    eax,eax
c000b11a:	83 c4 3c             	add    esp,0x3c
c000b11d:	5b                   	pop    ebx
c000b11e:	5e                   	pop    esi
c000b11f:	5f                   	pop    edi
c000b120:	5d                   	pop    ebp
c000b121:	c3                   	ret    

c000b122 <KeCreateSymlink(char const*, char const*)>:
c000b122:	55                   	push   ebp
c000b123:	57                   	push   edi
c000b124:	56                   	push   esi
c000b125:	53                   	push   ebx
c000b126:	83 ec 38             	sub    esp,0x38
c000b129:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b12d:	68 14 01 00 00       	push   0x114
c000b132:	e8 9c c9 ff ff       	call   c0007ad3 <malloc>
c000b137:	6a 00                	push   0x0
c000b139:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b13f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b143:	89 c3                	mov    ebx,eax
c000b145:	50                   	push   eax
c000b146:	e8 7d 06 00 00       	call   c000b7c8 <File::File(char const*, Process*, bool)>
c000b14b:	83 c4 20             	add    esp,0x20
c000b14e:	85 db                	test   ebx,ebx
c000b150:	b8 01 00 00 00       	mov    eax,0x1
c000b155:	0f 84 fb 00 00 00    	je     c000b256 <KeCreateSymlink(char const*, char const*)+0x134>
c000b15b:	52                   	push   edx
c000b15c:	52                   	push   edx
c000b15d:	6a 12                	push   0x12
c000b15f:	53                   	push   ebx
c000b160:	e8 5f 07 00 00       	call   c000b8c4 <File::open(FileOpenMode)>
c000b165:	83 c4 10             	add    esp,0x10
c000b168:	85 c0                	test   eax,eax
c000b16a:	74 0b                	je     c000b177 <KeCreateSymlink(char const*, char const*)+0x55>
c000b16c:	83 ec 0c             	sub    esp,0xc
c000b16f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b171:	53                   	push   ebx
c000b172:	e9 d4 00 00 00       	jmp    c000b24b <KeCreateSymlink(char const*, char const*)+0x129>
c000b177:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b17b:	be 60 14 02 c0       	mov    esi,0xc0021460
c000b180:	b9 09 00 00 00       	mov    ecx,0x9
c000b185:	fc                   	cld    
c000b186:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b188:	83 ec 0c             	sub    esp,0xc
c000b18b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b18f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b191:	56                   	push   esi
c000b192:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b196:	52                   	push   edx
c000b197:	6a 00                	push   0x0
c000b199:	6a 08                	push   0x8
c000b19b:	53                   	push   ebx
c000b19c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b19f:	83 c4 20             	add    esp,0x20
c000b1a2:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1a7:	0f 85 90 00 00 00    	jne    c000b23d <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1ad:	85 c0                	test   eax,eax
c000b1af:	0f 85 88 00 00 00    	jne    c000b23d <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1b5:	e8 5a fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c7:	56                   	push   esi
c000b1c8:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1cc:	52                   	push   edx
c000b1cd:	6a 00                	push   0x0
c000b1cf:	6a 08                	push   0x8
c000b1d1:	53                   	push   ebx
c000b1d2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1d5:	83 c4 20             	add    esp,0x20
c000b1d8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1dd:	75 5e                	jne    c000b23d <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1df:	85 c0                	test   eax,eax
c000b1e1:	75 5a                	jne    c000b23d <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e5:	83 ec 0c             	sub    esp,0xc
c000b1e8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1eb:	55                   	push   ebp
c000b1ec:	e8 8f 53 ff ff       	call   c0000580 <strlen>
c000b1f1:	31 d2                	xor    edx,edx
c000b1f3:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1f6:	55                   	push   ebp
c000b1f7:	52                   	push   edx
c000b1f8:	50                   	push   eax
c000b1f9:	53                   	push   ebx
c000b1fa:	ff d7                	call   edi
c000b1fc:	83 c4 14             	add    esp,0x14
c000b1ff:	55                   	push   ebp
c000b200:	89 c6                	mov    esi,eax
c000b202:	e8 79 53 ff ff       	call   c0000580 <strlen>
c000b207:	83 c4 10             	add    esp,0x10
c000b20a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b20e:	75 2d                	jne    c000b23d <KeCreateSymlink(char const*, char const*)+0x11b>
c000b210:	85 f6                	test   esi,esi
c000b212:	75 29                	jne    c000b23d <KeCreateSymlink(char const*, char const*)+0x11b>
c000b214:	50                   	push   eax
c000b215:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b219:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b221:	e8 31 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b229:	e8 f4 06 00 00       	call   c000b922 <File::close()>
c000b22e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b230:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b233:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b236:	83 c4 10             	add    esp,0x10
c000b239:	31 c0                	xor    eax,eax
c000b23b:	eb 19                	jmp    c000b256 <KeCreateSymlink(char const*, char const*)+0x134>
c000b23d:	83 ec 0c             	sub    esp,0xc
c000b240:	53                   	push   ebx
c000b241:	e8 dc 06 00 00       	call   c000b922 <File::close()>
c000b246:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b248:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b24b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b24e:	83 c4 10             	add    esp,0x10
c000b251:	b8 01 00 00 00       	mov    eax,0x1
c000b256:	83 c4 2c             	add    esp,0x2c
c000b259:	5b                   	pop    ebx
c000b25a:	5e                   	pop    esi
c000b25b:	5f                   	pop    edi
c000b25c:	5d                   	pop    ebp
c000b25d:	c3                   	ret    

c000b25e <KeInitialiseSymlinks()>:
c000b25e:	53                   	push   ebx
c000b25f:	83 ec 10             	sub    esp,0x10
c000b262:	6a 00                	push   0x0
c000b264:	68 52 ae 00 c0       	push   0xc000ae52
c000b269:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b273:	e8 62 58 00 00       	call   c0010ada <KeRegisterAtexit(void (*)(void*), void*)>
c000b278:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b27f:	e8 4f c8 ff ff       	call   c0007ad3 <malloc>
c000b284:	83 c4 0c             	add    esp,0xc
c000b287:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b28d:	68 b8 13 02 c0       	push   0xc00213b8
c000b292:	50                   	push   eax
c000b293:	89 c3                	mov    ebx,eax
c000b295:	e8 0c 06 00 00       	call   c000b8a6 <File::File(char const*, Process*)>
c000b29a:	83 c4 10             	add    esp,0x10
c000b29d:	85 db                	test   ebx,ebx
c000b29f:	75 10                	jne    c000b2b1 <KeInitialiseSymlinks()+0x53>
c000b2a1:	83 ec 0c             	sub    esp,0xc
c000b2a4:	68 69 14 02 c0       	push   0xc0021469
c000b2a9:	e8 13 60 00 00       	call   c00112c1 <KePanic(char const*)>
c000b2ae:	83 c4 10             	add    esp,0x10
c000b2b1:	83 ec 0c             	sub    esp,0xc
c000b2b4:	53                   	push   ebx
c000b2b5:	e8 ce 08 00 00       	call   c000bb88 <File::exists()>
c000b2ba:	83 c4 10             	add    esp,0x10
c000b2bd:	84 c0                	test   al,al
c000b2bf:	75 2d                	jne    c000b2ee <KeInitialiseSymlinks()+0x90>
c000b2c1:	52                   	push   edx
c000b2c2:	52                   	push   edx
c000b2c3:	6a 12                	push   0x12
c000b2c5:	53                   	push   ebx
c000b2c6:	e8 f9 05 00 00       	call   c000b8c4 <File::open(FileOpenMode)>
c000b2cb:	83 c4 10             	add    esp,0x10
c000b2ce:	85 c0                	test   eax,eax
c000b2d0:	74 10                	je     c000b2e2 <KeInitialiseSymlinks()+0x84>
c000b2d2:	83 ec 0c             	sub    esp,0xc
c000b2d5:	68 86 14 02 c0       	push   0xc0021486
c000b2da:	e8 e2 5f 00 00       	call   c00112c1 <KePanic(char const*)>
c000b2df:	83 c4 10             	add    esp,0x10
c000b2e2:	83 ec 0c             	sub    esp,0xc
c000b2e5:	53                   	push   ebx
c000b2e6:	e8 37 06 00 00       	call   c000b922 <File::close()>
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	85 db                	test   ebx,ebx
c000b2f0:	74 0c                	je     c000b2fe <KeInitialiseSymlinks()+0xa0>
c000b2f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f4:	83 ec 0c             	sub    esp,0xc
c000b2f7:	53                   	push   ebx
c000b2f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2fb:	83 c4 10             	add    esp,0x10
c000b2fe:	50                   	push   eax
c000b2ff:	50                   	push   eax
c000b300:	68 a3 14 02 c0       	push   0xc00214a3
c000b305:	68 b1 14 02 c0       	push   0xc00214b1
c000b30a:	e8 13 fe ff ff       	call   c000b122 <KeCreateSymlink(char const*, char const*)>
c000b30f:	83 c4 18             	add    esp,0x18
c000b312:	5b                   	pop    ebx
c000b313:	c3                   	ret    

c000b314 <File::read(unsigned long long, void*, int*)>:
c000b314:	53                   	push   ebx
c000b315:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b319:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b31d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b324:	83 f8 19             	cmp    eax,0x19
c000b327:	77 35                	ja     c000b35e <File::read(unsigned long long, void*, int*)+0x4a>
c000b329:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b330:	85 c0                	test   eax,eax
c000b332:	74 2a                	je     c000b35e <File::read(unsigned long long, void*, int*)+0x4a>
c000b334:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b33a:	85 c0                	test   eax,eax
c000b33c:	74 20                	je     c000b35e <File::read(unsigned long long, void*, int*)+0x4a>
c000b33e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b342:	74 21                	je     c000b365 <File::read(unsigned long long, void*, int*)+0x51>
c000b344:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b346:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b34a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b350:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b354:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b358:	5b                   	pop    ebx
c000b359:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b35c:	ff e0                	jmp    eax
c000b35e:	b8 0b 00 00 00       	mov    eax,0xb
c000b363:	eb 05                	jmp    c000b36a <File::read(unsigned long long, void*, int*)+0x56>
c000b365:	b8 05 00 00 00       	mov    eax,0x5
c000b36a:	5b                   	pop    ebx
c000b36b:	c3                   	ret    

c000b36c <File::write(unsigned long long, void*, int*)>:
c000b36c:	53                   	push   ebx
c000b36d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b371:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b375:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b37c:	83 f8 19             	cmp    eax,0x19
c000b37f:	77 35                	ja     c000b3b6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b381:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b388:	85 c0                	test   eax,eax
c000b38a:	74 2a                	je     c000b3b6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b38c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b392:	85 c0                	test   eax,eax
c000b394:	74 20                	je     c000b3b6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b396:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b39a:	74 21                	je     c000b3bd <File::write(unsigned long long, void*, int*)+0x51>
c000b39c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b39e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3a2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3b0:	5b                   	pop    ebx
c000b3b1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3b4:	ff e0                	jmp    eax
c000b3b6:	b8 0b 00 00 00       	mov    eax,0xb
c000b3bb:	eb 05                	jmp    c000b3c2 <File::write(unsigned long long, void*, int*)+0x56>
c000b3bd:	b8 05 00 00 00       	mov    eax,0x5
c000b3c2:	5b                   	pop    ebx
c000b3c3:	c3                   	ret    

c000b3c4 <Directory::read(unsigned long long, void*, int*)>:
c000b3c4:	53                   	push   ebx
c000b3c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3cd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3d4:	83 f8 19             	cmp    eax,0x19
c000b3d7:	77 35                	ja     c000b40e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3d9:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3e0:	85 c0                	test   eax,eax
c000b3e2:	74 2a                	je     c000b40e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3e4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3ea:	85 c0                	test   eax,eax
c000b3ec:	74 20                	je     c000b40e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3f2:	74 21                	je     c000b415 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3f6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3fa:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b400:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b404:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b408:	5b                   	pop    ebx
c000b409:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b40c:	ff e0                	jmp    eax
c000b40e:	b8 0b 00 00 00       	mov    eax,0xb
c000b413:	eb 05                	jmp    c000b41a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b415:	b8 05 00 00 00       	mov    eax,0x5
c000b41a:	5b                   	pop    ebx
c000b41b:	c3                   	ret    

c000b41c <Directory::write(unsigned long long, void*, int*)>:
c000b41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b420:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b427:	b8 0b 00 00 00       	mov    eax,0xb
c000b42c:	83 fa 19             	cmp    edx,0x19
c000b42f:	77 18                	ja     c000b449 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b431:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b438:	85 d2                	test   edx,edx
c000b43a:	74 0d                	je     c000b449 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b43c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b443:	19 c0                	sbb    eax,eax
c000b445:	83 e0 0a             	and    eax,0xa
c000b448:	40                   	inc    eax
c000b449:	c3                   	ret    

c000b44a <File::isAtty()>:
c000b44a:	31 c0                	xor    eax,eax
c000b44c:	c3                   	ret    
c000b44d:	90                   	nop

c000b44e <Directory::isAtty()>:
c000b44e:	31 c0                	xor    eax,eax
c000b450:	c3                   	ret    
c000b451:	90                   	nop

c000b452 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b452:	b8 0a 00 00 00       	mov    eax,0xa
c000b457:	c3                   	ret    

c000b458 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b458:	b8 0a 00 00 00       	mov    eax,0xa
c000b45d:	c3                   	ret    

c000b45e <Filesystem::allocateSwapfile(char const*, int)>:
c000b45e:	31 c0                	xor    eax,eax
c000b460:	31 d2                	xor    edx,edx
c000b462:	c3                   	ret    
c000b463:	90                   	nop

c000b464 <File::~File()>:
c000b464:	83 ec 0c             	sub    esp,0xc
c000b467:	ba 6c 15 02 c0       	mov    edx,0xc002156c
c000b46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b470:	89 10                	mov    DWORD PTR [eax],edx
c000b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b476:	83 ec 0c             	sub    esp,0xc
c000b479:	50                   	push   eax
c000b47a:	e8 0d df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b47f:	83 c4 10             	add    esp,0x10
c000b482:	90                   	nop
c000b483:	83 c4 0c             	add    esp,0xc
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <File::~File()>:
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	83 ec 0c             	sub    esp,0xc
c000b48e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b492:	e8 cd ff ff ff       	call   c000b464 <File::~File()>
c000b497:	83 c4 10             	add    esp,0x10
c000b49a:	83 ec 08             	sub    esp,0x8
c000b49d:	68 14 01 00 00       	push   0x114
c000b4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a6:	e8 61 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	83 c4 0c             	add    esp,0xc
c000b4b1:	c3                   	ret    

c000b4b2 <Directory::~Directory()>:
c000b4b2:	83 ec 0c             	sub    esp,0xc
c000b4b5:	ba 88 15 02 c0       	mov    edx,0xc0021588
c000b4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4be:	89 10                	mov    DWORD PTR [eax],edx
c000b4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c4:	83 ec 0c             	sub    esp,0xc
c000b4c7:	50                   	push   eax
c000b4c8:	e8 bf de ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b4cd:	83 c4 10             	add    esp,0x10
c000b4d0:	90                   	nop
c000b4d1:	83 c4 0c             	add    esp,0xc
c000b4d4:	c3                   	ret    
c000b4d5:	90                   	nop

c000b4d6 <Directory::~Directory()>:
c000b4d6:	83 ec 0c             	sub    esp,0xc
c000b4d9:	83 ec 0c             	sub    esp,0xc
c000b4dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e0:	e8 cd ff ff ff       	call   c000b4b2 <Directory::~Directory()>
c000b4e5:	83 c4 10             	add    esp,0x10
c000b4e8:	83 ec 08             	sub    esp,0x8
c000b4eb:	68 14 01 00 00       	push   0x114
c000b4f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f4:	e8 13 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4f9:	83 c4 10             	add    esp,0x10
c000b4fc:	83 c4 0c             	add    esp,0xc
c000b4ff:	c3                   	ret    

c000b500 <Filesystem::Filesystem()>:
c000b500:	ba 00 15 02 c0       	mov    edx,0xc0021500
c000b505:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b509:	89 10                	mov    DWORD PTR [eax],edx
c000b50b:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b511:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b515:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51c:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b521:	90                   	nop
c000b522:	c3                   	ret    
c000b523:	90                   	nop

c000b524 <Filesystem::~Filesystem()>:
c000b524:	ba 00 15 02 c0       	mov    edx,0xc0021500
c000b529:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52d:	89 10                	mov    DWORD PTR [eax],edx
c000b52f:	90                   	nop
c000b530:	c3                   	ret    
c000b531:	90                   	nop

c000b532 <Filesystem::~Filesystem()>:
c000b532:	83 ec 0c             	sub    esp,0xc
c000b535:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b539:	e8 e6 ff ff ff       	call   c000b524 <Filesystem::~Filesystem()>
c000b53e:	83 c4 04             	add    esp,0x4
c000b541:	83 ec 08             	sub    esp,0x8
c000b544:	6a 08                	push   0x8
c000b546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54a:	e8 bd f2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b54f:	83 c4 10             	add    esp,0x10
c000b552:	83 c4 0c             	add    esp,0xc
c000b555:	c3                   	ret    

c000b556 <Fs::getcwd(Process*, char*, int)>:
c000b556:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b55a:	31 c0                	xor    eax,eax
c000b55c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b560:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b563:	7d 15                	jge    c000b57a <Fs::getcwd(Process*, char*, int)+0x24>
c000b565:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b569:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b570:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b573:	84 c9                	test   cl,cl
c000b575:	74 06                	je     c000b57d <Fs::getcwd(Process*, char*, int)+0x27>
c000b577:	40                   	inc    eax
c000b578:	eb e2                	jmp    c000b55c <Fs::getcwd(Process*, char*, int)+0x6>
c000b57a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b57d:	31 c0                	xor    eax,eax
c000b57f:	c3                   	ret    

c000b580 <Fs::initVFS()>:
c000b580:	83 ec 18             	sub    esp,0x18
c000b583:	6a 08                	push   0x8
c000b585:	e8 49 c5 ff ff       	call   c0007ad3 <malloc>
c000b58a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b58d:	e8 a2 e2 00 00       	call   c0019834 <FAT::FAT()>
c000b592:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b599:	e8 35 c5 ff ff       	call   c0007ad3 <malloc>
c000b59e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5a1:	e8 bc f1 00 00       	call   c001a762 <ISO9660::ISO9660()>
c000b5a6:	83 c4 1c             	add    esp,0x1c
c000b5a9:	c3                   	ret    

c000b5aa <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5aa:	55                   	push   ebp
c000b5ab:	57                   	push   edi
c000b5ac:	56                   	push   esi
c000b5ad:	53                   	push   ebx
c000b5ae:	81 ec 20 04 00 00    	sub    esp,0x420
c000b5b4:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b5bb:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b5c2:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b5c9:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b5d0:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b5d4:	68 00 04 00 00       	push   0x400
c000b5d9:	6a 00                	push   0x0
c000b5db:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b5df:	57                   	push   edi
c000b5e0:	e8 0b 4f ff ff       	call   c00004f0 <memset>
c000b5e5:	83 c4 10             	add    esp,0x10
c000b5e8:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b5ec:	75 0b                	jne    c000b5f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b5ee:	50                   	push   eax
c000b5ef:	50                   	push   eax
c000b5f0:	56                   	push   esi
c000b5f1:	57                   	push   edi
c000b5f2:	e8 59 50 ff ff       	call   c0000650 <strcpy>
c000b5f7:	eb 45                	jmp    c000b63e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b5f9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b5fc:	83 f8 2f             	cmp    eax,0x2f
c000b5ff:	74 05                	je     c000b606 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b601:	83 f8 5c             	cmp    eax,0x5c
c000b604:	75 19                	jne    c000b61f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b606:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b609:	3c 60                	cmp    al,0x60
c000b60b:	7e 03                	jle    c000b610 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b60d:	83 e8 20             	sub    eax,0x20
c000b610:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b614:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b61b:	50                   	push   eax
c000b61c:	50                   	push   eax
c000b61d:	eb 18                	jmp    c000b637 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b61f:	50                   	push   eax
c000b620:	50                   	push   eax
c000b621:	55                   	push   ebp
c000b622:	57                   	push   edi
c000b623:	e8 28 50 ff ff       	call   c0000650 <strcpy>
c000b628:	58                   	pop    eax
c000b629:	5a                   	pop    edx
c000b62a:	68 c3 24 02 c0       	push   0xc00224c3
c000b62f:	57                   	push   edi
c000b630:	e8 3b 52 ff ff       	call   c0000870 <strcat>
c000b635:	59                   	pop    ecx
c000b636:	5d                   	pop    ebp
c000b637:	56                   	push   esi
c000b638:	57                   	push   edi
c000b639:	e8 32 52 ff ff       	call   c0000870 <strcat>
c000b63e:	83 c4 10             	add    esp,0x10
c000b641:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b645:	3c 60                	cmp    al,0x60
c000b647:	7e 03                	jle    c000b64c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b649:	83 e8 20             	sub    eax,0x20
c000b64c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b650:	be 03 00 00 00       	mov    esi,0x3
c000b655:	88 03                	mov    BYTE PTR [ebx],al
c000b657:	b8 03 00 00 00       	mov    eax,0x3
c000b65c:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b663:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b669:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b66d:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b672:	89 fa                	mov    edx,edi
c000b674:	0f be ea             	movsx  ebp,dl
c000b677:	85 ed                	test   ebp,ebp
c000b679:	0f 84 a1 00 00 00    	je     c000b720 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b67f:	8d 56 01             	lea    edx,[esi+0x1]
c000b682:	83 fd 2f             	cmp    ebp,0x2f
c000b685:	74 05                	je     c000b68c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b687:	83 fd 5c             	cmp    ebp,0x5c
c000b68a:	75 12                	jne    c000b69e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b68c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b691:	89 c5                	mov    ebp,eax
c000b693:	74 09                	je     c000b69e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b695:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b699:	40                   	inc    eax
c000b69a:	89 d6                	mov    esi,edx
c000b69c:	eb cf                	jmp    c000b66d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b69e:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b6a3:	89 f9                	mov    ecx,edi
c000b6a5:	0f be e9             	movsx  ebp,cl
c000b6a8:	75 61                	jne    c000b70b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6aa:	83 fd 2e             	cmp    ebp,0x2e
c000b6ad:	75 5c                	jne    c000b70b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6af:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b6b4:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b6b9:	74 19                	je     c000b6d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b6bb:	83 fd 2e             	cmp    ebp,0x2e
c000b6be:	74 55                	je     c000b715 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6c0:	89 f2                	mov    edx,esi
c000b6c2:	42                   	inc    edx
c000b6c3:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6c8:	83 f9 2f             	cmp    ecx,0x2f
c000b6cb:	74 f5                	je     c000b6c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6cd:	83 f9 5c             	cmp    ecx,0x5c
c000b6d0:	74 f0                	je     c000b6c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6d2:	eb c6                	jmp    c000b69a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d4:	83 fd 2e             	cmp    ebp,0x2e
c000b6d7:	74 3c                	je     c000b715 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6d9:	83 f8 03             	cmp    eax,0x3
c000b6dc:	74 bc                	je     c000b69a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6de:	42                   	inc    edx
c000b6df:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6e4:	83 f9 2f             	cmp    ecx,0x2f
c000b6e7:	74 f5                	je     c000b6de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6e9:	83 f9 5c             	cmp    ecx,0x5c
c000b6ec:	74 f0                	je     c000b6de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6ee:	48                   	dec    eax
c000b6ef:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6f3:	75 06                	jne    c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b6f5:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6f9:	eb f3                	jmp    c000b6ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b6fb:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6ff:	74 07                	je     c000b708 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b701:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b705:	48                   	dec    eax
c000b706:	eb f3                	jmp    c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b708:	40                   	inc    eax
c000b709:	eb 8f                	jmp    c000b69a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b70b:	83 fd 2f             	cmp    ebp,0x2f
c000b70e:	74 8a                	je     c000b69a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b710:	83 fd 5c             	cmp    ebp,0x5c
c000b713:	74 85                	je     c000b69a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b715:	89 f9                	mov    ecx,edi
c000b717:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b71a:	40                   	inc    eax
c000b71b:	e9 7a ff ff ff       	jmp    c000b69a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b720:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b724:	83 ec 0c             	sub    esp,0xc
c000b727:	53                   	push   ebx
c000b728:	e8 53 4e ff ff       	call   c0000580 <strlen>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b735:	74 1c                	je     c000b753 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b737:	83 ec 0c             	sub    esp,0xc
c000b73a:	53                   	push   ebx
c000b73b:	e8 40 4e ff ff       	call   c0000580 <strlen>
c000b740:	83 c4 10             	add    esp,0x10
c000b743:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b748:	74 09                	je     c000b753 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b74a:	31 ff                	xor    edi,edi
c000b74c:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b751:	eb 4c                	jmp    c000b79f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b753:	83 ec 0c             	sub    esp,0xc
c000b756:	53                   	push   ebx
c000b757:	e8 24 4e ff ff       	call   c0000580 <strlen>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b764:	74 e4                	je     c000b74a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b766:	83 ec 0c             	sub    esp,0xc
c000b769:	53                   	push   ebx
c000b76a:	e8 11 4e ff ff       	call   c0000580 <strlen>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b777:	eb ab                	jmp    c000b724 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b779:	50                   	push   eax
c000b77a:	50                   	push   eax
c000b77b:	53                   	push   ebx
c000b77c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b780:	55                   	push   ebp
c000b781:	e8 ca 4e ff ff       	call   c0000650 <strcpy>
c000b786:	5a                   	pop    edx
c000b787:	59                   	pop    ecx
c000b788:	53                   	push   ebx
c000b789:	55                   	push   ebp
c000b78a:	e8 7e f7 ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c000b78f:	83 c4 10             	add    esp,0x10
c000b792:	48                   	dec    eax
c000b793:	75 27                	jne    c000b7bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b795:	8d 47 01             	lea    eax,[edi+0x1]
c000b798:	83 ff 14             	cmp    edi,0x14
c000b79b:	74 08                	je     c000b7a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1fb>
c000b79d:	89 c7                	mov    edi,eax
c000b79f:	85 f6                	test   esi,esi
c000b7a1:	75 d6                	jne    c000b779 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000b7a3:	eb 17                	jmp    c000b7bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b7a5:	83 ec 0c             	sub    esp,0xc
c000b7a8:	bf 15 00 00 00       	mov    edi,0x15
c000b7ad:	68 cf 14 02 c0       	push   0xc00214cf
c000b7b2:	e8 0a 5b 00 00       	call   c00112c1 <KePanic(char const*)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	eb e3                	jmp    c000b79f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b7bc:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b7c2:	5b                   	pop    ebx
c000b7c3:	5e                   	pop    esi
c000b7c4:	5f                   	pop    edi
c000b7c5:	5d                   	pop    ebp
c000b7c6:	c3                   	ret    
c000b7c7:	90                   	nop

c000b7c8 <File::File(char const*, Process*, bool)>:
c000b7c8:	83 ec 1c             	sub    esp,0x1c
c000b7cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b7cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7d7:	83 ec 08             	sub    esp,0x8
c000b7da:	6a 00                	push   0x0
c000b7dc:	50                   	push   eax
c000b7dd:	e8 c4 d9 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b7e2:	83 c4 10             	add    esp,0x10
c000b7e5:	ba 6c 15 02 c0       	mov    edx,0xc002156c
c000b7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7ee:	89 10                	mov    DWORD PTR [eax],edx
c000b7f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b7f5:	85 c0                	test   eax,eax
c000b7f7:	74 0f                	je     c000b808 <File::File(char const*, Process*, bool)+0x40>
c000b7f9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b7fe:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000b802:	74 04                	je     c000b808 <File::File(char const*, Process*, bool)+0x40>
c000b804:	b0 01                	mov    al,0x1
c000b806:	eb 02                	jmp    c000b80a <File::File(char const*, Process*, bool)+0x42>
c000b808:	b0 00                	mov    al,0x0
c000b80a:	0f b6 c0             	movzx  eax,al
c000b80d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b811:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b817:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b81b:	83 c2 0d             	add    edx,0xd
c000b81e:	50                   	push   eax
c000b81f:	51                   	push   ecx
c000b820:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b824:	52                   	push   edx
c000b825:	e8 80 fd ff ff       	call   c000b5aa <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b82a:	83 c4 10             	add    esp,0x10
c000b82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b831:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b834:	83 e8 41             	sub    eax,0x41
c000b837:	88 c2                	mov    dl,al
c000b839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b83d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b847:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b84b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b84f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b855:	0f b6 c0             	movzx  eax,al
c000b858:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b85f:	85 c0                	test   eax,eax
c000b861:	74 3e                	je     c000b8a1 <File::File(char const*, Process*, bool)+0xd9>
c000b863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b867:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b86d:	0f b6 c0             	movzx  eax,al
c000b870:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b877:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b87d:	85 c0                	test   eax,eax
c000b87f:	75 20                	jne    c000b8a1 <File::File(char const*, Process*, bool)+0xd9>
c000b881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b885:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b88b:	0f b6 c0             	movzx  eax,al
c000b88e:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	50                   	push   eax
c000b899:	e8 ae 21 00 00       	call   c000da4c <LogicalDisk::mount()>
c000b89e:	83 c4 10             	add    esp,0x10
c000b8a1:	90                   	nop
c000b8a2:	83 c4 1c             	add    esp,0x1c
c000b8a5:	c3                   	ret    

c000b8a6 <File::File(char const*, Process*)>:
c000b8a6:	83 ec 0c             	sub    esp,0xc
c000b8a9:	6a 01                	push   0x1
c000b8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b7:	e8 0c ff ff ff       	call   c000b7c8 <File::File(char const*, Process*, bool)>
c000b8bc:	83 c4 10             	add    esp,0x10
c000b8bf:	90                   	nop
c000b8c0:	83 c4 0c             	add    esp,0xc
c000b8c3:	c3                   	ret    

c000b8c4 <File::open(FileOpenMode)>:
c000b8c4:	53                   	push   ebx
c000b8c5:	b8 0b 00 00 00       	mov    eax,0xb
c000b8ca:	83 ec 08             	sub    esp,0x8
c000b8cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8d1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b8d8:	83 fa 19             	cmp    edx,0x19
c000b8db:	77 40                	ja     c000b91d <File::open(FileOpenMode)+0x59>
c000b8dd:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8e4:	85 d2                	test   edx,edx
c000b8e6:	74 35                	je     c000b91d <File::open(FileOpenMode)+0x59>
c000b8e8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8ee:	85 d2                	test   edx,edx
c000b8f0:	74 2b                	je     c000b91d <File::open(FileOpenMode)+0x59>
c000b8f2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b8f6:	b8 06 00 00 00       	mov    eax,0x6
c000b8fb:	75 20                	jne    c000b91d <File::open(FileOpenMode)+0x59>
c000b8fd:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8ff:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b905:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b909:	51                   	push   ecx
c000b90a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b90d:	51                   	push   ecx
c000b90e:	52                   	push   edx
c000b90f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b912:	83 c4 10             	add    esp,0x10
c000b915:	85 c0                	test   eax,eax
c000b917:	75 04                	jne    c000b91d <File::open(FileOpenMode)+0x59>
c000b919:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b91d:	83 c4 08             	add    esp,0x8
c000b920:	5b                   	pop    ebx
c000b921:	c3                   	ret    

c000b922 <File::close()>:
c000b922:	53                   	push   ebx
c000b923:	b8 0b 00 00 00       	mov    eax,0xb
c000b928:	83 ec 08             	sub    esp,0x8
c000b92b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b92f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b936:	83 f9 19             	cmp    ecx,0x19
c000b939:	77 41                	ja     c000b97c <File::close()+0x5a>
c000b93b:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b942:	85 db                	test   ebx,ebx
c000b944:	74 36                	je     c000b97c <File::close()+0x5a>
c000b946:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b94d:	74 2d                	je     c000b97c <File::close()+0x5a>
c000b94f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b953:	b8 05 00 00 00       	mov    eax,0x5
c000b958:	74 22                	je     c000b97c <File::close()+0x5a>
c000b95a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b95e:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b965:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b96b:	53                   	push   ebx
c000b96c:	53                   	push   ebx
c000b96d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b96f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b975:	50                   	push   eax
c000b976:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b979:	83 c4 10             	add    esp,0x10
c000b97c:	83 c4 08             	add    esp,0x8
c000b97f:	5b                   	pop    ebx
c000b980:	c3                   	ret    
c000b981:	90                   	nop

c000b982 <File::seek(unsigned long long)>:
c000b982:	56                   	push   esi
c000b983:	b8 0b 00 00 00       	mov    eax,0xb
c000b988:	53                   	push   ebx
c000b989:	51                   	push   ecx
c000b98a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b98e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b992:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b996:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b99d:	83 fa 19             	cmp    edx,0x19
c000b9a0:	77 31                	ja     c000b9d3 <File::seek(unsigned long long)+0x51>
c000b9a2:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9a9:	85 d2                	test   edx,edx
c000b9ab:	74 26                	je     c000b9d3 <File::seek(unsigned long long)+0x51>
c000b9ad:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9b3:	85 d2                	test   edx,edx
c000b9b5:	74 1c                	je     c000b9d3 <File::seek(unsigned long long)+0x51>
c000b9b7:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9bb:	b8 05 00 00 00       	mov    eax,0x5
c000b9c0:	74 11                	je     c000b9d3 <File::seek(unsigned long long)+0x51>
c000b9c2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9c4:	53                   	push   ebx
c000b9c5:	51                   	push   ecx
c000b9c6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9cc:	52                   	push   edx
c000b9cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9d0:	83 c4 10             	add    esp,0x10
c000b9d3:	5a                   	pop    edx
c000b9d4:	5b                   	pop    ebx
c000b9d5:	5e                   	pop    esi
c000b9d6:	c3                   	ret    
c000b9d7:	90                   	nop

c000b9d8 <File::truncate(unsigned long long)>:
c000b9d8:	56                   	push   esi
c000b9d9:	b8 0b 00 00 00       	mov    eax,0xb
c000b9de:	53                   	push   ebx
c000b9df:	51                   	push   ecx
c000b9e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9ec:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9f3:	83 fa 19             	cmp    edx,0x19
c000b9f6:	77 31                	ja     c000ba29 <File::truncate(unsigned long long)+0x51>
c000b9f8:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9ff:	85 d2                	test   edx,edx
c000ba01:	74 26                	je     c000ba29 <File::truncate(unsigned long long)+0x51>
c000ba03:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba09:	85 d2                	test   edx,edx
c000ba0b:	74 1c                	je     c000ba29 <File::truncate(unsigned long long)+0x51>
c000ba0d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba11:	b8 05 00 00 00       	mov    eax,0x5
c000ba16:	74 11                	je     c000ba29 <File::truncate(unsigned long long)+0x51>
c000ba18:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba1a:	53                   	push   ebx
c000ba1b:	51                   	push   ecx
c000ba1c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba22:	52                   	push   edx
c000ba23:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	5a                   	pop    edx
c000ba2a:	5b                   	pop    ebx
c000ba2b:	5e                   	pop    esi
c000ba2c:	c3                   	ret    
c000ba2d:	90                   	nop

c000ba2e <File::tell(unsigned long long*)>:
c000ba2e:	83 ec 0c             	sub    esp,0xc
c000ba31:	b8 0b 00 00 00       	mov    eax,0xb
c000ba36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba3a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba41:	83 fa 19             	cmp    edx,0x19
c000ba44:	77 34                	ja     c000ba7a <File::tell(unsigned long long*)+0x4c>
c000ba46:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba4d:	85 d2                	test   edx,edx
c000ba4f:	74 29                	je     c000ba7a <File::tell(unsigned long long*)+0x4c>
c000ba51:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba57:	85 d2                	test   edx,edx
c000ba59:	74 1f                	je     c000ba7a <File::tell(unsigned long long*)+0x4c>
c000ba5b:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba5f:	b8 05 00 00 00       	mov    eax,0x5
c000ba64:	74 14                	je     c000ba7a <File::tell(unsigned long long*)+0x4c>
c000ba66:	50                   	push   eax
c000ba67:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba6d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba73:	52                   	push   edx
c000ba74:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba77:	83 c4 10             	add    esp,0x10
c000ba7a:	83 c4 0c             	add    esp,0xc
c000ba7d:	c3                   	ret    

c000ba7e <File::rewind()>:
c000ba7e:	83 ec 10             	sub    esp,0x10
c000ba81:	6a 00                	push   0x0
c000ba83:	6a 00                	push   0x0
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	e8 f4 fe ff ff       	call   c000b982 <File::seek(unsigned long long)>
c000ba8e:	83 c4 1c             	add    esp,0x1c
c000ba91:	c3                   	ret    

c000ba92 <File::unlink()>:
c000ba92:	83 ec 0c             	sub    esp,0xc
c000ba95:	b8 0b 00 00 00       	mov    eax,0xb
c000ba9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba9e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baa5:	83 f9 19             	cmp    ecx,0x19
c000baa8:	77 2f                	ja     c000bad9 <File::unlink()+0x47>
c000baaa:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bab1:	85 c9                	test   ecx,ecx
c000bab3:	74 24                	je     c000bad9 <File::unlink()+0x47>
c000bab5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000babb:	85 c9                	test   ecx,ecx
c000babd:	74 1a                	je     c000bad9 <File::unlink()+0x47>
c000babf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bac3:	b8 06 00 00 00       	mov    eax,0x6
c000bac8:	75 0f                	jne    c000bad9 <File::unlink()+0x47>
c000baca:	50                   	push   eax
c000bacb:	83 c2 0d             	add    edx,0xd
c000bace:	50                   	push   eax
c000bacf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bad1:	52                   	push   edx
c000bad2:	51                   	push   ecx
c000bad3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bad6:	83 c4 10             	add    esp,0x10
c000bad9:	83 c4 0c             	add    esp,0xc
c000badc:	c3                   	ret    
c000badd:	90                   	nop

c000bade <File::rename(char const*)>:
c000bade:	83 ec 0c             	sub    esp,0xc
c000bae1:	b8 0b 00 00 00       	mov    eax,0xb
c000bae6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baf1:	83 f9 19             	cmp    ecx,0x19
c000baf4:	77 32                	ja     c000bb28 <File::rename(char const*)+0x4a>
c000baf6:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bafd:	85 c9                	test   ecx,ecx
c000baff:	74 27                	je     c000bb28 <File::rename(char const*)+0x4a>
c000bb01:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb07:	85 c9                	test   ecx,ecx
c000bb09:	74 1d                	je     c000bb28 <File::rename(char const*)+0x4a>
c000bb0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb0f:	b8 06 00 00 00       	mov    eax,0x6
c000bb14:	75 12                	jne    c000bb28 <File::rename(char const*)+0x4a>
c000bb16:	50                   	push   eax
c000bb17:	83 c2 0d             	add    edx,0xd
c000bb1a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb20:	52                   	push   edx
c000bb21:	51                   	push   ecx
c000bb22:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb25:	83 c4 10             	add    esp,0x10
c000bb28:	83 c4 0c             	add    esp,0xc
c000bb2b:	c3                   	ret    

c000bb2c <File::chfatattr(unsigned char, unsigned char)>:
c000bb2c:	57                   	push   edi
c000bb2d:	b8 0b 00 00 00       	mov    eax,0xb
c000bb32:	56                   	push   esi
c000bb33:	53                   	push   ebx
c000bb34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb47:	83 f9 19             	cmp    ecx,0x19
c000bb4a:	77 37                	ja     c000bb83 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb4c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb53:	85 c9                	test   ecx,ecx
c000bb55:	74 2c                	je     c000bb83 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb57:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb5d:	85 c9                	test   ecx,ecx
c000bb5f:	74 22                	je     c000bb83 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb61:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb65:	b8 06 00 00 00       	mov    eax,0x6
c000bb6a:	75 17                	jne    c000bb83 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb6c:	89 f0                	mov    eax,esi
c000bb6e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb70:	0f b6 db             	movzx  ebx,bl
c000bb73:	0f b6 f0             	movzx  esi,al
c000bb76:	83 c2 0d             	add    edx,0xd
c000bb79:	56                   	push   esi
c000bb7a:	53                   	push   ebx
c000bb7b:	52                   	push   edx
c000bb7c:	51                   	push   ecx
c000bb7d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	5b                   	pop    ebx
c000bb84:	5e                   	pop    esi
c000bb85:	5f                   	pop    edi
c000bb86:	c3                   	ret    
c000bb87:	90                   	nop

c000bb88 <File::exists()>:
c000bb88:	83 ec 0c             	sub    esp,0xc
c000bb8b:	31 c0                	xor    eax,eax
c000bb8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb91:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb98:	83 f9 19             	cmp    ecx,0x19
c000bb9b:	77 24                	ja     c000bbc1 <File::exists()+0x39>
c000bb9d:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bba4:	85 c9                	test   ecx,ecx
c000bba6:	74 19                	je     c000bbc1 <File::exists()+0x39>
c000bba8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbae:	85 c9                	test   ecx,ecx
c000bbb0:	74 0f                	je     c000bbc1 <File::exists()+0x39>
c000bbb2:	50                   	push   eax
c000bbb3:	83 c2 0d             	add    edx,0xd
c000bbb6:	50                   	push   eax
c000bbb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbb9:	52                   	push   edx
c000bbba:	51                   	push   ecx
c000bbbb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bbbe:	83 c4 10             	add    esp,0x10
c000bbc1:	83 c4 0c             	add    esp,0xc
c000bbc4:	c3                   	ret    
c000bbc5:	90                   	nop

c000bbc6 <File::stat(unsigned long long*, bool*)>:
c000bbc6:	56                   	push   esi
c000bbc7:	53                   	push   ebx
c000bbc8:	50                   	push   eax
c000bbc9:	b8 0b 00 00 00       	mov    eax,0xb
c000bbce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbd2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbd6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe1:	83 f9 19             	cmp    ecx,0x19
c000bbe4:	77 3d                	ja     c000bc23 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbe6:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbed:	85 c9                	test   ecx,ecx
c000bbef:	74 32                	je     c000bc23 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbf1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbf7:	85 c9                	test   ecx,ecx
c000bbf9:	74 28                	je     c000bc23 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbfb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc01:	74 13                	je     c000bc16 <File::stat(unsigned long long*, bool*)+0x50>
c000bc03:	83 ec 04             	sub    esp,0x4
c000bc06:	56                   	push   esi
c000bc07:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc0d:	51                   	push   ecx
c000bc0e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc11:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc14:	eb 0a                	jmp    c000bc20 <File::stat(unsigned long long*, bool*)+0x5a>
c000bc16:	53                   	push   ebx
c000bc17:	83 c2 0d             	add    edx,0xd
c000bc1a:	56                   	push   esi
c000bc1b:	52                   	push   edx
c000bc1c:	51                   	push   ecx
c000bc1d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc20:	83 c4 10             	add    esp,0x10
c000bc23:	5a                   	pop    edx
c000bc24:	5b                   	pop    ebx
c000bc25:	5e                   	pop    esi
c000bc26:	c3                   	ret    

c000bc27 <Fs::setcwd(Process*, char*)>:
c000bc27:	55                   	push   ebp
c000bc28:	57                   	push   edi
c000bc29:	56                   	push   esi
c000bc2a:	53                   	push   ebx
c000bc2b:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc31:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc38:	6a 00                	push   0x0
c000bc3a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc40:	57                   	push   edi
c000bc41:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc48:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc4c:	56                   	push   esi
c000bc4d:	e8 58 f9 ff ff       	call   c000b5aa <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc52:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc55:	e8 26 49 ff ff       	call   c0000580 <strlen>
c000bc5a:	83 c4 10             	add    esp,0x10
c000bc5d:	83 f8 02             	cmp    eax,0x2
c000bc60:	77 15                	ja     c000bc77 <Fs::setcwd(Process*, char*)+0x50>
c000bc62:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc67:	83 eb 41             	sub    ebx,0x41
c000bc6a:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc71:	85 c0                	test   eax,eax
c000bc73:	75 1c                	jne    c000bc91 <Fs::setcwd(Process*, char*)+0x6a>
c000bc75:	eb 2f                	jmp    c000bca6 <Fs::setcwd(Process*, char*)+0x7f>
c000bc77:	83 ec 0c             	sub    esp,0xc
c000bc7a:	56                   	push   esi
c000bc7b:	e8 00 49 ff ff       	call   c0000580 <strlen>
c000bc80:	83 c4 10             	add    esp,0x10
c000bc83:	83 f8 03             	cmp    eax,0x3
c000bc86:	75 57                	jne    c000bcdf <Fs::setcwd(Process*, char*)+0xb8>
c000bc88:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bc8d:	75 50                	jne    c000bcdf <Fs::setcwd(Process*, char*)+0xb8>
c000bc8f:	eb d1                	jmp    c000bc62 <Fs::setcwd(Process*, char*)+0x3b>
c000bc91:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bc98:	75 0c                	jne    c000bca6 <Fs::setcwd(Process*, char*)+0x7f>
c000bc9a:	83 ec 0c             	sub    esp,0xc
c000bc9d:	50                   	push   eax
c000bc9e:	e8 a9 1d 00 00       	call   c000da4c <LogicalDisk::mount()>
c000bca3:	83 c4 10             	add    esp,0x10
c000bca6:	83 fb 19             	cmp    ebx,0x19
c000bca9:	b8 03 00 00 00       	mov    eax,0x3
c000bcae:	0f 87 c6 00 00 00    	ja     c000bd7a <Fs::setcwd(Process*, char*)+0x153>
c000bcb4:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bcbb:	b8 05 00 00 00       	mov    eax,0x5
c000bcc0:	85 d2                	test   edx,edx
c000bcc2:	0f 84 b2 00 00 00    	je     c000bd7a <Fs::setcwd(Process*, char*)+0x153>
c000bcc8:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bccf:	b8 06 00 00 00       	mov    eax,0x6
c000bcd4:	0f 85 92 00 00 00    	jne    c000bd6c <Fs::setcwd(Process*, char*)+0x145>
c000bcda:	e9 9b 00 00 00       	jmp    c000bd7a <Fs::setcwd(Process*, char*)+0x153>
c000bcdf:	83 ec 0c             	sub    esp,0xc
c000bce2:	68 14 01 00 00       	push   0x114
c000bce7:	e8 e7 bd ff ff       	call   c0007ad3 <malloc>
c000bcec:	83 c4 0c             	add    esp,0xc
c000bcef:	55                   	push   ebp
c000bcf0:	56                   	push   esi
c000bcf1:	50                   	push   eax
c000bcf2:	89 c3                	mov    ebx,eax
c000bcf4:	e8 ad fb ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c000bcf9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bcfe:	83 c4 0c             	add    esp,0xc
c000bd01:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd05:	50                   	push   eax
c000bd06:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd0a:	50                   	push   eax
c000bd0b:	53                   	push   ebx
c000bd0c:	e8 b5 fe ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c000bd11:	83 c4 10             	add    esp,0x10
c000bd14:	83 f8 02             	cmp    eax,0x2
c000bd17:	74 27                	je     c000bd40 <Fs::setcwd(Process*, char*)+0x119>
c000bd19:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd1e:	75 1c                	jne    c000bd3c <Fs::setcwd(Process*, char*)+0x115>
c000bd20:	85 db                	test   ebx,ebx
c000bd22:	b8 02 00 00 00       	mov    eax,0x2
c000bd27:	74 51                	je     c000bd7a <Fs::setcwd(Process*, char*)+0x153>
c000bd29:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd2b:	83 ec 0c             	sub    esp,0xc
c000bd2e:	53                   	push   ebx
c000bd2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd32:	83 c4 10             	add    esp,0x10
c000bd35:	b8 02 00 00 00       	mov    eax,0x2
c000bd3a:	eb 3e                	jmp    c000bd7a <Fs::setcwd(Process*, char*)+0x153>
c000bd3c:	85 c0                	test   eax,eax
c000bd3e:	74 1c                	je     c000bd5c <Fs::setcwd(Process*, char*)+0x135>
c000bd40:	85 db                	test   ebx,ebx
c000bd42:	b8 01 00 00 00       	mov    eax,0x1
c000bd47:	74 31                	je     c000bd7a <Fs::setcwd(Process*, char*)+0x153>
c000bd49:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd4b:	83 ec 0c             	sub    esp,0xc
c000bd4e:	53                   	push   ebx
c000bd4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd52:	83 c4 10             	add    esp,0x10
c000bd55:	b8 01 00 00 00       	mov    eax,0x1
c000bd5a:	eb 1e                	jmp    c000bd7a <Fs::setcwd(Process*, char*)+0x153>
c000bd5c:	85 db                	test   ebx,ebx
c000bd5e:	74 0c                	je     c000bd6c <Fs::setcwd(Process*, char*)+0x145>
c000bd60:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd62:	83 ec 0c             	sub    esp,0xc
c000bd65:	53                   	push   ebx
c000bd66:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd69:	83 c4 10             	add    esp,0x10
c000bd6c:	50                   	push   eax
c000bd6d:	50                   	push   eax
c000bd6e:	56                   	push   esi
c000bd6f:	57                   	push   edi
c000bd70:	e8 db 48 ff ff       	call   c0000650 <strcpy>
c000bd75:	83 c4 10             	add    esp,0x10
c000bd78:	31 c0                	xor    eax,eax
c000bd7a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bd80:	5b                   	pop    ebx
c000bd81:	5e                   	pop    esi
c000bd82:	5f                   	pop    edi
c000bd83:	5d                   	pop    ebp
c000bd84:	c3                   	ret    
c000bd85:	90                   	nop

c000bd86 <Directory::Directory(char const*, Process*)>:
c000bd86:	83 ec 0c             	sub    esp,0xc
c000bd89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd8d:	83 ec 08             	sub    esp,0x8
c000bd90:	6a 00                	push   0x0
c000bd92:	50                   	push   eax
c000bd93:	e8 0e d4 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bd98:	83 c4 10             	add    esp,0x10
c000bd9b:	ba 88 15 02 c0       	mov    edx,0xc0021588
c000bda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda4:	89 10                	mov    DWORD PTR [eax],edx
c000bda6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bdab:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bdaf:	0f 95 c0             	setne  al
c000bdb2:	0f b6 c0             	movzx  eax,al
c000bdb5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdb9:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bdbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdc3:	83 c2 0d             	add    edx,0xd
c000bdc6:	50                   	push   eax
c000bdc7:	51                   	push   ecx
c000bdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdcc:	52                   	push   edx
c000bdcd:	e8 d8 f7 ff ff       	call   c000b5aa <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bdd2:	83 c4 10             	add    esp,0x10
c000bdd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd9:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bddc:	83 e8 41             	sub    eax,0x41
c000bddf:	88 c2                	mov    dl,al
c000bde1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde5:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdef:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bdf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bdfd:	0f b6 c0             	movzx  eax,al
c000be00:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be07:	85 c0                	test   eax,eax
c000be09:	74 3e                	je     c000be49 <Directory::Directory(char const*, Process*)+0xc3>
c000be0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be15:	0f b6 c0             	movzx  eax,al
c000be18:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be1f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be25:	85 c0                	test   eax,eax
c000be27:	75 20                	jne    c000be49 <Directory::Directory(char const*, Process*)+0xc3>
c000be29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be33:	0f b6 c0             	movzx  eax,al
c000be36:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be3d:	83 ec 0c             	sub    esp,0xc
c000be40:	50                   	push   eax
c000be41:	e8 06 1c 00 00       	call   c000da4c <LogicalDisk::mount()>
c000be46:	83 c4 10             	add    esp,0x10
c000be49:	90                   	nop
c000be4a:	83 c4 0c             	add    esp,0xc
c000be4d:	c3                   	ret    

c000be4e <Directory::open()>:
c000be4e:	53                   	push   ebx
c000be4f:	b8 0b 00 00 00       	mov    eax,0xb
c000be54:	83 ec 08             	sub    esp,0x8
c000be57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be5b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be62:	83 fa 19             	cmp    edx,0x19
c000be65:	77 3d                	ja     c000bea4 <Directory::open()+0x56>
c000be67:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be6e:	85 d2                	test   edx,edx
c000be70:	74 32                	je     c000bea4 <Directory::open()+0x56>
c000be72:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be78:	85 d2                	test   edx,edx
c000be7a:	74 28                	je     c000bea4 <Directory::open()+0x56>
c000be7c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000be80:	b8 06 00 00 00       	mov    eax,0x6
c000be85:	75 1d                	jne    c000bea4 <Directory::open()+0x56>
c000be87:	50                   	push   eax
c000be88:	8b 02                	mov    eax,DWORD PTR [edx]
c000be8a:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000be90:	51                   	push   ecx
c000be91:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000be94:	51                   	push   ecx
c000be95:	52                   	push   edx
c000be96:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000be99:	83 c4 10             	add    esp,0x10
c000be9c:	85 c0                	test   eax,eax
c000be9e:	75 04                	jne    c000bea4 <Directory::open()+0x56>
c000bea0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bea4:	83 c4 08             	add    esp,0x8
c000bea7:	5b                   	pop    ebx
c000bea8:	c3                   	ret    
c000bea9:	90                   	nop

c000beaa <Directory::close()>:
c000beaa:	53                   	push   ebx
c000beab:	b8 0b 00 00 00       	mov    eax,0xb
c000beb0:	83 ec 08             	sub    esp,0x8
c000beb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beb7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bebe:	83 f9 19             	cmp    ecx,0x19
c000bec1:	77 41                	ja     c000bf04 <Directory::close()+0x5a>
c000bec3:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000beca:	85 db                	test   ebx,ebx
c000becc:	74 36                	je     c000bf04 <Directory::close()+0x5a>
c000bece:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bed5:	74 2d                	je     c000bf04 <Directory::close()+0x5a>
c000bed7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bedb:	b8 05 00 00 00       	mov    eax,0x5
c000bee0:	74 22                	je     c000bf04 <Directory::close()+0x5a>
c000bee2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bee6:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000beed:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bef3:	53                   	push   ebx
c000bef4:	53                   	push   ebx
c000bef5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bef7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000befd:	50                   	push   eax
c000befe:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	83 c4 08             	add    esp,0x8
c000bf07:	5b                   	pop    ebx
c000bf08:	c3                   	ret    
c000bf09:	90                   	nop

c000bf0a <Directory::unlink()>:
c000bf0a:	83 ec 0c             	sub    esp,0xc
c000bf0d:	b8 0b 00 00 00       	mov    eax,0xb
c000bf12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf16:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf1d:	83 f9 19             	cmp    ecx,0x19
c000bf20:	77 2f                	ja     c000bf51 <Directory::unlink()+0x47>
c000bf22:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf29:	85 c9                	test   ecx,ecx
c000bf2b:	74 24                	je     c000bf51 <Directory::unlink()+0x47>
c000bf2d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf33:	85 c9                	test   ecx,ecx
c000bf35:	74 1a                	je     c000bf51 <Directory::unlink()+0x47>
c000bf37:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf3b:	b8 06 00 00 00       	mov    eax,0x6
c000bf40:	75 0f                	jne    c000bf51 <Directory::unlink()+0x47>
c000bf42:	50                   	push   eax
c000bf43:	83 c2 0d             	add    edx,0xd
c000bf46:	50                   	push   eax
c000bf47:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf49:	52                   	push   edx
c000bf4a:	51                   	push   ecx
c000bf4b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf4e:	83 c4 10             	add    esp,0x10
c000bf51:	83 c4 0c             	add    esp,0xc
c000bf54:	c3                   	ret    
c000bf55:	90                   	nop

c000bf56 <Directory::rename(char const*)>:
c000bf56:	83 ec 0c             	sub    esp,0xc
c000bf59:	b8 0b 00 00 00       	mov    eax,0xb
c000bf5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf69:	83 f9 19             	cmp    ecx,0x19
c000bf6c:	77 32                	ja     c000bfa0 <Directory::rename(char const*)+0x4a>
c000bf6e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf75:	85 c9                	test   ecx,ecx
c000bf77:	74 27                	je     c000bfa0 <Directory::rename(char const*)+0x4a>
c000bf79:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf7f:	85 c9                	test   ecx,ecx
c000bf81:	74 1d                	je     c000bfa0 <Directory::rename(char const*)+0x4a>
c000bf83:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf87:	b8 06 00 00 00       	mov    eax,0x6
c000bf8c:	75 12                	jne    c000bfa0 <Directory::rename(char const*)+0x4a>
c000bf8e:	50                   	push   eax
c000bf8f:	83 c2 0d             	add    edx,0xd
c000bf92:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf98:	52                   	push   edx
c000bf99:	51                   	push   ecx
c000bf9a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bf9d:	83 c4 10             	add    esp,0x10
c000bfa0:	83 c4 0c             	add    esp,0xc
c000bfa3:	c3                   	ret    

c000bfa4 <Directory::exists()>:
c000bfa4:	83 ec 0c             	sub    esp,0xc
c000bfa7:	31 c0                	xor    eax,eax
c000bfa9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfad:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfb4:	83 f9 19             	cmp    ecx,0x19
c000bfb7:	77 24                	ja     c000bfdd <Directory::exists()+0x39>
c000bfb9:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfc0:	85 c9                	test   ecx,ecx
c000bfc2:	74 19                	je     c000bfdd <Directory::exists()+0x39>
c000bfc4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfca:	85 c9                	test   ecx,ecx
c000bfcc:	74 0f                	je     c000bfdd <Directory::exists()+0x39>
c000bfce:	50                   	push   eax
c000bfcf:	83 c2 0d             	add    edx,0xd
c000bfd2:	50                   	push   eax
c000bfd3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfd5:	52                   	push   edx
c000bfd6:	51                   	push   ecx
c000bfd7:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bfda:	83 c4 10             	add    esp,0x10
c000bfdd:	83 c4 0c             	add    esp,0xc
c000bfe0:	c3                   	ret    
c000bfe1:	90                   	nop

c000bfe2 <Directory::read(dirent*)>:
c000bfe2:	83 ec 1c             	sub    esp,0x1c
c000bfe5:	b8 0b 00 00 00       	mov    eax,0xb
c000bfea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bff5:	83 f9 19             	cmp    ecx,0x19
c000bff8:	77 30                	ja     c000c02a <Directory::read(dirent*)+0x48>
c000bffa:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c001:	85 c9                	test   ecx,ecx
c000c003:	74 25                	je     c000c02a <Directory::read(dirent*)+0x48>
c000c005:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c00c:	74 1c                	je     c000c02a <Directory::read(dirent*)+0x48>
c000c00e:	83 ec 0c             	sub    esp,0xc
c000c011:	8b 02                	mov    eax,DWORD PTR [edx]
c000c013:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c017:	51                   	push   ecx
c000c018:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c01c:	6a 00                	push   0x0
c000c01e:	68 10 01 00 00       	push   0x110
c000c023:	52                   	push   edx
c000c024:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c027:	83 c4 20             	add    esp,0x20
c000c02a:	83 c4 1c             	add    esp,0x1c
c000c02d:	c3                   	ret    

c000c02e <Directory::create()>:
c000c02e:	83 ec 0c             	sub    esp,0xc
c000c031:	b8 0b 00 00 00       	mov    eax,0xb
c000c036:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c03a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c041:	83 f9 19             	cmp    ecx,0x19
c000c044:	77 2f                	ja     c000c075 <Directory::create()+0x47>
c000c046:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c04d:	85 c9                	test   ecx,ecx
c000c04f:	74 24                	je     c000c075 <Directory::create()+0x47>
c000c051:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c057:	85 c9                	test   ecx,ecx
c000c059:	74 1a                	je     c000c075 <Directory::create()+0x47>
c000c05b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c05f:	b8 06 00 00 00       	mov    eax,0x6
c000c064:	75 0f                	jne    c000c075 <Directory::create()+0x47>
c000c066:	50                   	push   eax
c000c067:	83 c2 0d             	add    edx,0xd
c000c06a:	50                   	push   eax
c000c06b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c06d:	52                   	push   edx
c000c06e:	51                   	push   ecx
c000c06f:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c072:	83 c4 10             	add    esp,0x10
c000c075:	83 c4 0c             	add    esp,0xc
c000c078:	c3                   	ret    
c000c079:	90                   	nop

c000c07a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c07a:	b8 0a 00 00 00       	mov    eax,0xa
c000c07f:	c3                   	ret    

c000c080 <Bus::Bus(char const*)>:
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c087:	83 ec 08             	sub    esp,0x8
c000c08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08e:	50                   	push   eax
c000c08f:	e8 28 08 00 00       	call   c000c8bc <Device::Device(char const*)>
c000c094:	83 c4 10             	add    esp,0x10
c000c097:	ba a4 15 02 c0       	mov    edx,0xc00215a4
c000c09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a0:	89 10                	mov    DWORD PTR [eax],edx
c000c0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0b0:	90                   	nop
c000c0b1:	83 c4 0c             	add    esp,0xc
c000c0b4:	c3                   	ret    
c000c0b5:	90                   	nop
c000c0b6:	66 90                	xchg   ax,ax

c000c0b8 <Bus::~Bus()>:
c000c0b8:	83 ec 0c             	sub    esp,0xc
c000c0bb:	ba a4 15 02 c0       	mov    edx,0xc00215a4
c000c0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c4:	89 10                	mov    DWORD PTR [eax],edx
c000c0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ca:	83 ec 0c             	sub    esp,0xc
c000c0cd:	50                   	push   eax
c000c0ce:	e8 53 05 00 00       	call   c000c626 <Device::~Device()>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	90                   	nop
c000c0d7:	83 c4 0c             	add    esp,0xc
c000c0da:	c3                   	ret    
c000c0db:	90                   	nop

c000c0dc <Bus::~Bus()>:
c000c0dc:	83 ec 0c             	sub    esp,0xc
c000c0df:	83 ec 0c             	sub    esp,0xc
c000c0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e6:	e8 cd ff ff ff       	call   c000c0b8 <Bus::~Bus()>
c000c0eb:	83 c4 10             	add    esp,0x10
c000c0ee:	83 ec 08             	sub    esp,0x8
c000c0f1:	68 58 01 00 00       	push   0x158
c000c0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fa:	e8 0d e7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c0ff:	83 c4 10             	add    esp,0x10
c000c102:	83 c4 0c             	add    esp,0xc
c000c105:	c3                   	ret    

c000c106 <beepThread(void*)>:
c000c106:	83 ec 0c             	sub    esp,0xc
c000c109:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c10e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c112:	48                   	dec    eax
c000c113:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c118:	75 01                	jne    c000c11b <beepThread(void*)+0x15>
c000c11a:	fb                   	sti    
c000c11b:	6b c2 0a             	imul   eax,edx,0xa
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	50                   	push   eax
c000c122:	e8 b5 9e 00 00       	call   c0015fdc <milliTenthSleep(unsigned int)>
c000c127:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c12e:	e8 02 be 00 00       	call   c0017f35 <HalMakeBeep(int)>
c000c133:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c13b:	83 c4 1c             	add    esp,0x1c
c000c13e:	e9 7d 9d 00 00       	jmp    c0015ec0 <blockTask(TaskState)>

c000c143 <Krnl::beep(int, int, bool)>:
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 10             	sub    esp,0x10
c000c148:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c14c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c154:	e8 dc bd 00 00       	call   c0017f35 <HalMakeBeep(int)>
c000c159:	89 f0                	mov    eax,esi
c000c15b:	83 c4 10             	add    esp,0x10
c000c15e:	84 c0                	test   al,al
c000c160:	74 1e                	je     c000c180 <Krnl::beep(int, int, bool)+0x3d>
c000c162:	6b db 0a             	imul   ebx,ebx,0xa
c000c165:	83 ec 0c             	sub    esp,0xc
c000c168:	53                   	push   ebx
c000c169:	e8 6e 9e 00 00       	call   c0015fdc <milliTenthSleep(unsigned int)>
c000c16e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c176:	83 c4 14             	add    esp,0x14
c000c179:	5b                   	pop    ebx
c000c17a:	5e                   	pop    esi
c000c17b:	e9 b5 bd 00 00       	jmp    c0017f35 <HalMakeBeep(int)>
c000c180:	68 e6 00 00 00       	push   0xe6
c000c185:	53                   	push   ebx
c000c186:	68 06 c1 00 c0       	push   0xc000c106
c000c18b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c191:	e8 de 98 00 00       	call   c0015a74 <Process::createThread(void (*)(void*), void*, int)>
c000c196:	83 c4 14             	add    esp,0x14
c000c199:	5b                   	pop    ebx
c000c19a:	5e                   	pop    esi
c000c19b:	c3                   	ret    

c000c19c <User::loadClockSettings(int)>:
c000c19c:	53                   	push   ebx
c000c19d:	83 ec 14             	sub    esp,0x14
c000c1a0:	68 14 01 00 00       	push   0x114
c000c1a5:	e8 29 b9 ff ff       	call   c0007ad3 <malloc>
c000c1aa:	83 c4 0c             	add    esp,0xc
c000c1ad:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1b3:	68 c8 15 02 c0       	push   0xc00215c8
c000c1b8:	50                   	push   eax
c000c1b9:	89 c3                	mov    ebx,eax
c000c1bb:	e8 e6 f6 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c000c1c0:	58                   	pop    eax
c000c1c1:	5a                   	pop    edx
c000c1c2:	6a 01                	push   0x1
c000c1c4:	53                   	push   ebx
c000c1c5:	e8 fa f6 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c000c1ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1cd:	e8 50 f7 ff ff       	call   c000b922 <File::close()>
c000c1d2:	83 c4 10             	add    esp,0x10
c000c1d5:	85 db                	test   ebx,ebx
c000c1d7:	74 0f                	je     c000c1e8 <User::loadClockSettings(int)+0x4c>
c000c1d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c1df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1e2:	83 c4 08             	add    esp,0x8
c000c1e5:	5b                   	pop    ebx
c000c1e6:	ff e0                	jmp    eax
c000c1e8:	83 c4 08             	add    esp,0x8
c000c1eb:	5b                   	pop    ebx
c000c1ec:	c3                   	ret    
c000c1ed:	90                   	nop

c000c1ee <Clock::Clock(char const*)>:
c000c1ee:	83 ec 0c             	sub    esp,0xc
c000c1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f5:	83 ec 08             	sub    esp,0x8
c000c1f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1fc:	50                   	push   eax
c000c1fd:	e8 ba 06 00 00       	call   c000c8bc <Device::Device(char const*)>
c000c202:	83 c4 10             	add    esp,0x10
c000c205:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c000c20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20e:	89 10                	mov    DWORD PTR [eax],edx
c000c210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c214:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c21e:	90                   	nop
c000c21f:	83 c4 0c             	add    esp,0xc
c000c222:	c3                   	ret    
c000c223:	90                   	nop

c000c224 <Clock::~Clock()>:
c000c224:	83 ec 0c             	sub    esp,0xc
c000c227:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c000c22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c230:	89 10                	mov    DWORD PTR [eax],edx
c000c232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c236:	83 ec 0c             	sub    esp,0xc
c000c239:	50                   	push   eax
c000c23a:	e8 e7 03 00 00       	call   c000c626 <Device::~Device()>
c000c23f:	83 c4 10             	add    esp,0x10
c000c242:	90                   	nop
c000c243:	83 c4 0c             	add    esp,0xc
c000c246:	c3                   	ret    
c000c247:	90                   	nop

c000c248 <Clock::~Clock()>:
c000c248:	83 ec 0c             	sub    esp,0xc
c000c24b:	83 ec 0c             	sub    esp,0xc
c000c24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c252:	e8 cd ff ff ff       	call   c000c224 <Clock::~Clock()>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	83 ec 08             	sub    esp,0x8
c000c25d:	68 58 01 00 00       	push   0x158
c000c262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c266:	e8 a1 e5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c26b:	83 c4 10             	add    esp,0x10
c000c26e:	83 c4 0c             	add    esp,0xc
c000c271:	c3                   	ret    

c000c272 <Clock::timeInSecondsLocal()>:
c000c272:	53                   	push   ebx
c000c273:	83 ec 14             	sub    esp,0x14
c000c276:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c27a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c27c:	50                   	push   eax
c000c27d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c280:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c287:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c28d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c293:	89 cb                	mov    ebx,ecx
c000c295:	c1 fb 1f             	sar    ebx,0x1f
c000c298:	01 c8                	add    eax,ecx
c000c29a:	11 da                	adc    edx,ebx
c000c29c:	83 c4 10             	add    esp,0x10
c000c29f:	31 c9                	xor    ecx,ecx
c000c2a1:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2a8:	74 05                	je     c000c2af <Clock::timeInSecondsLocal()+0x3d>
c000c2aa:	b9 08 07 00 00       	mov    ecx,0x708
c000c2af:	31 db                	xor    ebx,ebx
c000c2b1:	01 c8                	add    eax,ecx
c000c2b3:	11 da                	adc    edx,ebx
c000c2b5:	83 c4 08             	add    esp,0x8
c000c2b8:	5b                   	pop    ebx
c000c2b9:	c3                   	ret    

c000c2ba <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c2ba:	57                   	push   edi
c000c2bb:	56                   	push   esi
c000c2bc:	53                   	push   ebx
c000c2bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2c5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2cb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c2ce:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c2d5:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c2db:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c2e1:	99                   	cdq    
c000c2e2:	29 c6                	sub    esi,eax
c000c2e4:	19 d7                	sbb    edi,edx
c000c2e6:	89 f0                	mov    eax,esi
c000c2e8:	31 f6                	xor    esi,esi
c000c2ea:	89 fa                	mov    edx,edi
c000c2ec:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2f3:	74 05                	je     c000c2fa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c2f5:	be 08 07 00 00       	mov    esi,0x708
c000c2fa:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c2fe:	31 ff                	xor    edi,edi
c000c300:	29 f0                	sub    eax,esi
c000c302:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c306:	19 fa                	sbb    edx,edi
c000c308:	89 d8                	mov    eax,ebx
c000c30a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c30e:	5b                   	pop    ebx
c000c30f:	5e                   	pop    esi
c000c310:	5f                   	pop    edi
c000c311:	ff e0                	jmp    eax

c000c313 <datetimeToSeconds(datetime_t)>:
c000c313:	55                   	push   ebp
c000c314:	57                   	push   edi
c000c315:	56                   	push   esi
c000c316:	53                   	push   ebx
c000c317:	83 ec 0c             	sub    esp,0xc
c000c31a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c31e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c322:	89 f7                	mov    edi,esi
c000c324:	89 f0                	mov    eax,esi
c000c326:	0f b6 cf             	movzx  ecx,bh
c000c329:	0f b6 c4             	movzx  eax,ah
c000c32c:	c1 ef 10             	shr    edi,0x10
c000c32f:	89 da                	mov    edx,ebx
c000c331:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c334:	89 f9                	mov    ecx,edi
c000c336:	0f b6 f9             	movzx  edi,cl
c000c339:	89 f1                	mov    ecx,esi
c000c33b:	6b c0 3c             	imul   eax,eax,0x3c
c000c33e:	0f b6 f1             	movzx  esi,cl
c000c341:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c347:	0f b6 db             	movzx  ebx,bl
c000c34a:	c1 ea 10             	shr    edx,0x10
c000c34d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c353:	01 f8                	add    eax,edi
c000c355:	01 f0                	add    eax,esi
c000c357:	89 04 24             	mov    DWORD PTR [esp],eax
c000c35a:	c1 f8 1f             	sar    eax,0x1f
c000c35d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c361:	89 e8                	mov    eax,ebp
c000c363:	0f b6 c0             	movzx  eax,al
c000c366:	8b 0c 85 40 16 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde9c0]
c000c36d:	83 f8 01             	cmp    eax,0x1
c000c370:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c374:	0f b7 da             	movzx  ebx,dx
c000c377:	76 27                	jbe    c000c3a0 <datetimeToSeconds(datetime_t)+0x8d>
c000c379:	80 e2 03             	and    dl,0x3
c000c37c:	75 22                	jne    c000c3a0 <datetimeToSeconds(datetime_t)+0x8d>
c000c37e:	31 d2                	xor    edx,edx
c000c380:	be 64 00 00 00       	mov    esi,0x64
c000c385:	89 d8                	mov    eax,ebx
c000c387:	f7 f6                	div    esi
c000c389:	85 d2                	test   edx,edx
c000c38b:	75 12                	jne    c000c39f <datetimeToSeconds(datetime_t)+0x8c>
c000c38d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c393:	be 90 01 00 00       	mov    esi,0x190
c000c398:	99                   	cdq    
c000c399:	f7 fe                	idiv   esi
c000c39b:	85 d2                	test   edx,edx
c000c39d:	75 01                	jne    c000c3a0 <datetimeToSeconds(datetime_t)+0x8d>
c000c39f:	41                   	inc    ecx
c000c3a0:	83 fb 46             	cmp    ebx,0x46
c000c3a3:	76 48                	jbe    c000c3ed <datetimeToSeconds(datetime_t)+0xda>
c000c3a5:	be 46 00 00 00       	mov    esi,0x46
c000c3aa:	bf 64 00 00 00       	mov    edi,0x64
c000c3af:	bd 90 01 00 00       	mov    ebp,0x190
c000c3b4:	f7 c6 03 00 00 00    	test   esi,0x3
c000c3ba:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3bf:	75 23                	jne    c000c3e4 <datetimeToSeconds(datetime_t)+0xd1>
c000c3c1:	89 f0                	mov    eax,esi
c000c3c3:	99                   	cdq    
c000c3c4:	f7 ff                	idiv   edi
c000c3c6:	b8 6e 01 00 00       	mov    eax,0x16e
c000c3cb:	85 d2                	test   edx,edx
c000c3cd:	75 15                	jne    c000c3e4 <datetimeToSeconds(datetime_t)+0xd1>
c000c3cf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3d5:	99                   	cdq    
c000c3d6:	f7 fd                	idiv   ebp
c000c3d8:	83 fa 01             	cmp    edx,0x1
c000c3db:	19 c0                	sbb    eax,eax
c000c3dd:	f7 d0                	not    eax
c000c3df:	05 6e 01 00 00       	add    eax,0x16e
c000c3e4:	46                   	inc    esi
c000c3e5:	01 c1                	add    ecx,eax
c000c3e7:	39 de                	cmp    esi,ebx
c000c3e9:	7c c9                	jl     c000c3b4 <datetimeToSeconds(datetime_t)+0xa1>
c000c3eb:	eb 34                	jmp    c000c421 <datetimeToSeconds(datetime_t)+0x10e>
c000c3ed:	74 32                	je     c000c421 <datetimeToSeconds(datetime_t)+0x10e>
c000c3ef:	b8 45 00 00 00       	mov    eax,0x45
c000c3f4:	89 c2                	mov    edx,eax
c000c3f6:	83 e2 03             	and    edx,0x3
c000c3f9:	39 d8                	cmp    eax,ebx
c000c3fb:	7e 0f                	jle    c000c40c <datetimeToSeconds(datetime_t)+0xf9>
c000c3fd:	83 fa 01             	cmp    edx,0x1
c000c400:	19 d2                	sbb    edx,edx
c000c402:	48                   	dec    eax
c000c403:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c40a:	eb e8                	jmp    c000c3f4 <datetimeToSeconds(datetime_t)+0xe1>
c000c40c:	85 d2                	test   edx,edx
c000c40e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c413:	75 0a                	jne    c000c41f <datetimeToSeconds(datetime_t)+0x10c>
c000c415:	83 fb 01             	cmp    ebx,0x1
c000c418:	19 c0                	sbb    eax,eax
c000c41a:	05 6e 01 00 00       	add    eax,0x16e
c000c41f:	29 c1                	sub    ecx,eax
c000c421:	b8 80 51 01 00       	mov    eax,0x15180
c000c426:	f7 e9                	imul   ecx
c000c428:	03 04 24             	add    eax,DWORD PTR [esp]
c000c42b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c42f:	83 c4 0c             	add    esp,0xc
c000c432:	5b                   	pop    ebx
c000c433:	5e                   	pop    esi
c000c434:	5f                   	pop    edi
c000c435:	5d                   	pop    ebp
c000c436:	c3                   	ret    
c000c437:	90                   	nop

c000c438 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c438:	57                   	push   edi
c000c439:	56                   	push   esi
c000c43a:	53                   	push   ebx
c000c43b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c43f:	8b 06                	mov    eax,DWORD PTR [esi]
c000c441:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c448:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c44c:	e8 c2 fe ff ff       	call   c000c313 <datetimeToSeconds(datetime_t)>
c000c451:	59                   	pop    ecx
c000c452:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c459:	5b                   	pop    ebx
c000c45a:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c460:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c466:	89 cb                	mov    ebx,ecx
c000c468:	c1 fb 1f             	sar    ebx,0x1f
c000c46b:	29 c8                	sub    eax,ecx
c000c46d:	19 da                	sbb    edx,ebx
c000c46f:	31 c9                	xor    ecx,ecx
c000c471:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c478:	74 05                	je     c000c47f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c47a:	b9 08 07 00 00       	mov    ecx,0x708
c000c47f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c483:	31 db                	xor    ebx,ebx
c000c485:	29 c8                	sub    eax,ecx
c000c487:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c48b:	19 da                	sbb    edx,ebx
c000c48d:	89 f8                	mov    eax,edi
c000c48f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c493:	5b                   	pop    ebx
c000c494:	5e                   	pop    esi
c000c495:	5f                   	pop    edi
c000c496:	ff e0                	jmp    eax

c000c498 <secondsToDatetime(unsigned long long)>:
c000c498:	55                   	push   ebp
c000c499:	57                   	push   edi
c000c49a:	56                   	push   esi
c000c49b:	53                   	push   ebx
c000c49c:	83 ec 1c             	sub    esp,0x1c
c000c49f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4a3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4ab:	6a 00                	push   0x0
c000c4ad:	68 80 51 01 00       	push   0x15180
c000c4b2:	55                   	push   ebp
c000c4b3:	57                   	push   edi
c000c4b4:	e8 c7 2e 01 00       	call   c001f380 <__udivdi3>
c000c4b9:	83 c4 10             	add    esp,0x10
c000c4bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4c0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c4c6:	6a 00                	push   0x0
c000c4c8:	68 80 51 01 00       	push   0x15180
c000c4cd:	55                   	push   ebp
c000c4ce:	57                   	push   edi
c000c4cf:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4d4:	e8 a7 2f 01 00       	call   c001f480 <__umoddi3>
c000c4d9:	83 c4 10             	add    esp,0x10
c000c4dc:	99                   	cdq    
c000c4dd:	f7 ff                	idiv   edi
c000c4df:	bf 3c 00 00 00       	mov    edi,0x3c
c000c4e4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c4e7:	89 d0                	mov    eax,edx
c000c4e9:	99                   	cdq    
c000c4ea:	f7 ff                	idiv   edi
c000c4ec:	85 db                	test   ebx,ebx
c000c4ee:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c4f1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c4f4:	79 11                	jns    c000c507 <secondsToDatetime(unsigned long long)+0x6f>
c000c4f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4fa:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c500:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c505:	eb 07                	jmp    c000c50e <secondsToDatetime(unsigned long long)+0x76>
c000c507:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c50c:	89 d8                	mov    eax,ebx
c000c50e:	99                   	cdq    
c000c50f:	bf b4 05 00 00       	mov    edi,0x5b4
c000c514:	f7 f9                	idiv   ecx
c000c516:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c51b:	31 d2                	xor    edx,edx
c000c51d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c522:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c526:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c52e:	01 c3                	add    ebx,eax
c000c530:	89 d8                	mov    eax,ebx
c000c532:	f7 f1                	div    ecx
c000c534:	31 d2                	xor    edx,edx
c000c536:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c539:	89 d8                	mov    eax,ebx
c000c53b:	f7 f7                	div    edi
c000c53d:	31 d2                	xor    edx,edx
c000c53f:	29 c1                	sub    ecx,eax
c000c541:	89 d8                	mov    eax,ebx
c000c543:	f7 f5                	div    ebp
c000c545:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c54a:	31 d2                	xor    edx,edx
c000c54c:	29 c1                	sub    ecx,eax
c000c54e:	89 c8                	mov    eax,ecx
c000c550:	f7 f5                	div    ebp
c000c552:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c557:	31 d2                	xor    edx,edx
c000c559:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c55d:	89 c8                	mov    eax,ecx
c000c55f:	f7 f5                	div    ebp
c000c561:	31 d2                	xor    edx,edx
c000c563:	01 c3                	add    ebx,eax
c000c565:	89 c8                	mov    eax,ecx
c000c567:	f7 f7                	div    edi
c000c569:	bf 99 00 00 00       	mov    edi,0x99
c000c56e:	31 d2                	xor    edx,edx
c000c570:	29 c3                	sub    ebx,eax
c000c572:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c57a:	29 c3                	sub    ebx,eax
c000c57c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c57f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c582:	83 c1 02             	add    ecx,0x2
c000c585:	89 c8                	mov    eax,ecx
c000c587:	bb 05 00 00 00       	mov    ebx,0x5
c000c58c:	f7 f7                	div    edi
c000c58e:	31 d2                	xor    edx,edx
c000c590:	89 c7                	mov    edi,eax
c000c592:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c598:	83 c0 02             	add    eax,0x2
c000c59b:	f7 f3                	div    ebx
c000c59d:	89 eb                	mov    ebx,ebp
c000c59f:	29 c3                	sub    ebx,eax
c000c5a1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5a7:	88 1e                	mov    BYTE PTR [esi],bl
c000c5a9:	19 c0                	sbb    eax,eax
c000c5ab:	31 d2                	xor    edx,edx
c000c5ad:	83 e0 0c             	and    eax,0xc
c000c5b0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5b4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c5bc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c5c0:	83 f9 01             	cmp    ecx,0x1
c000c5c3:	0f 96 c2             	setbe  dl
c000c5c6:	41                   	inc    ecx
c000c5c7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c5ca:	01 d0                	add    eax,edx
c000c5cc:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5d0:	83 c4 1c             	add    esp,0x1c
c000c5d3:	89 f0                	mov    eax,esi
c000c5d5:	5b                   	pop    ebx
c000c5d6:	5e                   	pop    esi
c000c5d7:	5f                   	pop    edi
c000c5d8:	5d                   	pop    ebp
c000c5d9:	c2 04 00             	ret    0x4

c000c5dc <Clock::timeInDatetimeLocal()>:
c000c5dc:	53                   	push   ebx
c000c5dd:	83 ec 14             	sub    esp,0x14
c000c5e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c5e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5e8:	e8 85 fc ff ff       	call   c000c272 <Clock::timeInSecondsLocal()>
c000c5ed:	83 c4 0c             	add    esp,0xc
c000c5f0:	52                   	push   edx
c000c5f1:	50                   	push   eax
c000c5f2:	53                   	push   ebx
c000c5f3:	e8 a0 fe ff ff       	call   c000c498 <secondsToDatetime(unsigned long long)>
c000c5f8:	89 d8                	mov    eax,ebx
c000c5fa:	83 c4 14             	add    esp,0x14
c000c5fd:	5b                   	pop    ebx
c000c5fe:	c2 04 00             	ret    0x4
c000c601:	90                   	nop

c000c602 <Device::hibernate()>:
c000c602:	c3                   	ret    
c000c603:	90                   	nop

c000c604 <Device::wake()>:
c000c604:	c3                   	ret    
c000c605:	90                   	nop

c000c606 <Device::detect()>:
c000c606:	c3                   	ret    
c000c607:	90                   	nop

c000c608 <Device::disableLegacy()>:
c000c608:	c3                   	ret    
c000c609:	90                   	nop

c000c60a <Device::powerSaving(PowerSavingLevel)>:
c000c60a:	c3                   	ret    
c000c60b:	90                   	nop

c000c60c <DriverlessDevice::close(int, int, void*)>:
c000c60c:	31 c0                	xor    eax,eax
c000c60e:	c3                   	ret    
c000c60f:	90                   	nop

c000c610 <DriverlessDevice::detect()>:
c000c610:	c3                   	ret    
c000c611:	90                   	nop

c000c612 <DriverlessDevice::open(int, int, void*)>:
c000c612:	83 ec 18             	sub    esp,0x18
c000c615:	68 70 16 02 c0       	push   0xc0021670
c000c61a:	e8 a2 4c 00 00       	call   c00112c1 <KePanic(char const*)>
c000c61f:	83 c8 ff             	or     eax,0xffffffff
c000c622:	83 c4 1c             	add    esp,0x1c
c000c625:	c3                   	ret    

c000c626 <Device::~Device()>:
c000c626:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c000c62b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c62f:	89 10                	mov    DWORD PTR [eax],edx
c000c631:	90                   	nop
c000c632:	c3                   	ret    
c000c633:	90                   	nop

c000c634 <Device::~Device()>:
c000c634:	83 ec 0c             	sub    esp,0xc
c000c637:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c63b:	e8 e6 ff ff ff       	call   c000c626 <Device::~Device()>
c000c640:	83 c4 04             	add    esp,0x4
c000c643:	83 ec 08             	sub    esp,0x8
c000c646:	68 58 01 00 00       	push   0x158
c000c64b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c64f:	e8 b8 e1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c654:	83 c4 10             	add    esp,0x10
c000c657:	83 c4 0c             	add    esp,0xc
c000c65a:	c3                   	ret    
c000c65b:	90                   	nop

c000c65c <Device::findAndLoadDriver()>:
c000c65c:	c7 44 24 04 8e 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002168e
c000c664:	e9 a1 e2 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c669:	90                   	nop

c000c66a <Device::preOpenPCI(PCIDeviceInfo)>:
c000c66a:	57                   	push   edi
c000c66b:	b9 09 00 00 00       	mov    ecx,0x9
c000c670:	56                   	push   esi
c000c671:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c675:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c679:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c683:	81 c7 18 01 00 00    	add    edi,0x118
c000c689:	fc                   	cld    
c000c68a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c68c:	5e                   	pop    esi
c000c68d:	5f                   	pop    edi
c000c68e:	c3                   	ret    
c000c68f:	90                   	nop

c000c690 <Device::preOpenACPI(void*, char*, char*)>:
c000c690:	57                   	push   edi
c000c691:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c696:	56                   	push   esi
c000c697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c69b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c69f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6a3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6ad:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6b3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6bb:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c6c1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c6c5:	b9 0e 00 00 00       	mov    ecx,0xe
c000c6ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6cc:	5e                   	pop    esi
c000c6cd:	5f                   	pop    edi
c000c6ce:	c3                   	ret    
c000c6cf:	90                   	nop

c000c6d0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6d0:	53                   	push   ebx
c000c6d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c6dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c6e1:	0f b6 c0             	movzx  eax,al
c000c6e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6ec:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c6f0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6f4:	5b                   	pop    ebx
c000c6f5:	e9 aa 05 00 00       	jmp    c000cca4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c6fa <Device::getParent()>:
c000c6fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6fe:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c704:	c3                   	ret    
c000c705:	90                   	nop

c000c706 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c706:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c70a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c70e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c713:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c717:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c71b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c71f:	e9 f7 06 00 00       	jmp    c000ce1b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c724 <Device::addChild(Device*)>:
c000c724:	53                   	push   ebx
c000c725:	83 ec 08             	sub    esp,0x8
c000c728:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c72c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c730:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c736:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c73c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c73e:	85 d2                	test   edx,edx
c000c740:	74 04                	je     c000c746 <Device::addChild(Device*)+0x22>
c000c742:	89 d3                	mov    ebx,edx
c000c744:	eb f6                	jmp    c000c73c <Device::addChild(Device*)+0x18>
c000c746:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c749:	83 ec 0c             	sub    esp,0xc
c000c74c:	6a 08                	push   0x8
c000c74e:	e8 80 b3 ff ff       	call   c0007ad3 <malloc>
c000c753:	89 03                	mov    DWORD PTR [ebx],eax
c000c755:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c75b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c762:	83 c4 18             	add    esp,0x18
c000c765:	5b                   	pop    ebx
c000c766:	c3                   	ret    
c000c767:	90                   	nop

c000c768 <Device::removeAllChildren()>:
c000c768:	56                   	push   esi
c000c769:	53                   	push   ebx
c000c76a:	52                   	push   edx
c000c76b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c76f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c775:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c778:	74 17                	je     c000c791 <Device::removeAllChildren()+0x29>
c000c77a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c77d:	85 c0                	test   eax,eax
c000c77f:	74 0c                	je     c000c78d <Device::removeAllChildren()+0x25>
c000c781:	8b 10                	mov    edx,DWORD PTR [eax]
c000c783:	83 ec 0c             	sub    esp,0xc
c000c786:	50                   	push   eax
c000c787:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c78f:	eb e4                	jmp    c000c775 <Device::removeAllChildren()+0xd>
c000c791:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c797:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c79d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7aa:	58                   	pop    eax
c000c7ab:	5b                   	pop    ebx
c000c7ac:	5e                   	pop    esi
c000c7ad:	c3                   	ret    

c000c7ae <Device::hibernateAll()>:
c000c7ae:	53                   	push   ebx
c000c7af:	83 ec 14             	sub    esp,0x14
c000c7b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7b8:	53                   	push   ebx
c000c7b9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c7bc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7c2:	83 c4 10             	add    esp,0x10
c000c7c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7c8:	74 0f                	je     c000c7d9 <Device::hibernateAll()+0x2b>
c000c7ca:	83 ec 0c             	sub    esp,0xc
c000c7cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7d0:	e8 d9 ff ff ff       	call   c000c7ae <Device::hibernateAll()>
c000c7d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7d7:	eb e9                	jmp    c000c7c2 <Device::hibernateAll()+0x14>
c000c7d9:	83 c4 08             	add    esp,0x8
c000c7dc:	5b                   	pop    ebx
c000c7dd:	c3                   	ret    

c000c7de <Device::wakeAll()>:
c000c7de:	53                   	push   ebx
c000c7df:	83 ec 14             	sub    esp,0x14
c000c7e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7e8:	53                   	push   ebx
c000c7e9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c7ec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7f2:	83 c4 10             	add    esp,0x10
c000c7f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7f8:	74 0f                	je     c000c809 <Device::wakeAll()+0x2b>
c000c7fa:	83 ec 0c             	sub    esp,0xc
c000c7fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c800:	e8 d9 ff ff ff       	call   c000c7de <Device::wakeAll()>
c000c805:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c807:	eb e9                	jmp    c000c7f2 <Device::wakeAll()+0x14>
c000c809:	83 c4 08             	add    esp,0x8
c000c80c:	5b                   	pop    ebx
c000c80d:	c3                   	ret    

c000c80e <Device::detectAll()>:
c000c80e:	53                   	push   ebx
c000c80f:	83 ec 14             	sub    esp,0x14
c000c812:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c816:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c818:	53                   	push   ebx
c000c819:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c81c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c822:	83 c4 10             	add    esp,0x10
c000c825:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c828:	74 0f                	je     c000c839 <Device::detectAll()+0x2b>
c000c82a:	83 ec 0c             	sub    esp,0xc
c000c82d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c830:	e8 d9 ff ff ff       	call   c000c80e <Device::detectAll()>
c000c835:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c837:	eb e9                	jmp    c000c822 <Device::detectAll()+0x14>
c000c839:	83 c4 08             	add    esp,0x8
c000c83c:	5b                   	pop    ebx
c000c83d:	c3                   	ret    

c000c83e <Device::disableLegacyAll()>:
c000c83e:	c3                   	ret    
c000c83f:	90                   	nop

c000c840 <Device::loadDriversForAll()>:
c000c840:	c3                   	ret    
c000c841:	90                   	nop

c000c842 <Device::closeAll()>:
c000c842:	53                   	push   ebx
c000c843:	83 ec 08             	sub    esp,0x8
c000c846:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c84a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c84c:	6a 00                	push   0x0
c000c84e:	6a 00                	push   0x0
c000c850:	6a 00                	push   0x0
c000c852:	53                   	push   ebx
c000c853:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c856:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c85c:	83 c4 10             	add    esp,0x10
c000c85f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c862:	74 0f                	je     c000c873 <Device::closeAll()+0x31>
c000c864:	83 ec 0c             	sub    esp,0xc
c000c867:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c86a:	e8 d3 ff ff ff       	call   c000c842 <Device::closeAll()>
c000c86f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c871:	eb e9                	jmp    c000c85c <Device::closeAll()+0x1a>
c000c873:	83 c4 08             	add    esp,0x8
c000c876:	5b                   	pop    ebx
c000c877:	c3                   	ret    

c000c878 <Device::powerSavingAll(PowerSavingLevel)>:
c000c878:	56                   	push   esi
c000c879:	53                   	push   ebx
c000c87a:	83 ec 0c             	sub    esp,0xc
c000c87d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c881:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c885:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c887:	56                   	push   esi
c000c888:	53                   	push   ebx
c000c889:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c88c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c898:	74 0f                	je     c000c8a9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c89a:	52                   	push   edx
c000c89b:	52                   	push   edx
c000c89c:	56                   	push   esi
c000c89d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8a0:	e8 d3 ff ff ff       	call   c000c878 <Device::powerSavingAll(PowerSavingLevel)>
c000c8a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8a7:	eb e9                	jmp    c000c892 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8a9:	58                   	pop    eax
c000c8aa:	5b                   	pop    ebx
c000c8ab:	5e                   	pop    esi
c000c8ac:	c3                   	ret    
c000c8ad:	90                   	nop

c000c8ae <Device::setName(char const*)>:
c000c8ae:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8b6:	e9 95 3d ff ff       	jmp    c0000650 <strcpy>
c000c8bb:	90                   	nop

c000c8bc <Device::Device(char const*)>:
c000c8bc:	83 ec 1c             	sub    esp,0x1c
c000c8bf:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c000c8c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8c8:	89 10                	mov    DWORD PTR [eax],edx
c000c8ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ce:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c8d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8dc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ea:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c902:	83 ec 08             	sub    esp,0x8
c000c905:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c909:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c90d:	e8 9c ff ff ff       	call   c000c8ae <Device::setName(char const*)>
c000c912:	83 c4 10             	add    esp,0x10
c000c915:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c91d:	83 ec 0c             	sub    esp,0xc
c000c920:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c924:	e8 aa b1 ff ff       	call   c0007ad3 <malloc>
c000c929:	83 c4 10             	add    esp,0x10
c000c92c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c932:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c939:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c93d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c947:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c94d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c957:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c95d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c968:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c973:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a8:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9b2:	90                   	nop
c000c9b3:	83 c4 1c             	add    esp,0x1c
c000c9b6:	c3                   	ret    
c000c9b7:	90                   	nop

c000c9b8 <Device::getName()>:
c000c9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9bc:	05 d0 00 00 00       	add    eax,0xd0
c000c9c1:	c3                   	ret    

c000c9c2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c9c2:	83 ec 0c             	sub    esp,0xc
c000c9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c9:	83 ec 08             	sub    esp,0x8
c000c9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d0:	50                   	push   eax
c000c9d1:	e8 e6 fe ff ff       	call   c000c8bc <Device::Device(char const*)>
c000c9d6:	83 c4 10             	add    esp,0x10
c000c9d9:	ba fc 16 02 c0       	mov    edx,0xc00216fc
c000c9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e2:	89 10                	mov    DWORD PTR [eax],edx
c000c9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c9f2:	90                   	nop
c000c9f3:	83 c4 0c             	add    esp,0xc
c000c9f6:	c3                   	ret    
c000c9f7:	90                   	nop

c000c9f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c9f8:	57                   	push   edi
c000c9f9:	56                   	push   esi
c000c9fa:	53                   	push   ebx
c000c9fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c9ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca07:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca0d:	75 0c                	jne    c000ca1b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca0f:	52                   	push   edx
c000ca10:	52                   	push   edx
c000ca11:	53                   	push   ebx
c000ca12:	56                   	push   esi
c000ca13:	e8 1a 2e 01 00       	call   c001f832 <LinkedList<Device>::addElement(Device*)>
c000ca18:	83 c4 10             	add    esp,0x10
c000ca1b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca24:	74 12                	je     c000ca38 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca26:	50                   	push   eax
c000ca27:	57                   	push   edi
c000ca28:	56                   	push   esi
c000ca29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca2c:	e8 c7 ff ff ff       	call   c000c9f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca33:	83 c4 10             	add    esp,0x10
c000ca36:	eb e9                	jmp    c000ca21 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca38:	5b                   	pop    ebx
c000ca39:	5e                   	pop    esi
c000ca3a:	5f                   	pop    edi
c000ca3b:	c3                   	ret    

c000ca3c <getDevicesOfType(DeviceType)>:
c000ca3c:	53                   	push   ebx
c000ca3d:	83 ec 14             	sub    esp,0x14
c000ca40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca44:	53                   	push   ebx
c000ca45:	e8 c4 2e 01 00       	call   c001f90e <LinkedList<Device>::LinkedList()>
c000ca4a:	83 c4 0c             	add    esp,0xc
c000ca4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca51:	53                   	push   ebx
c000ca52:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca58:	e8 9b ff ff ff       	call   c000c9f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca5d:	83 c4 18             	add    esp,0x18
c000ca60:	89 d8                	mov    eax,ebx
c000ca62:	5b                   	pop    ebx
c000ca63:	c2 04 00             	ret    0x4
c000ca66:	66 90                	xchg   ax,ax

c000ca68 <HardDiskController::HardDiskController(char const*)>:
c000ca68:	83 ec 0c             	sub    esp,0xc
c000ca6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6f:	83 ec 08             	sub    esp,0x8
c000ca72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca76:	50                   	push   eax
c000ca77:	e8 40 fe ff ff       	call   c000c8bc <Device::Device(char const*)>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	ba 28 17 02 c0       	mov    edx,0xc0021728
c000ca84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca88:	89 10                	mov    DWORD PTR [eax],edx
c000ca8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca8e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ca98:	90                   	nop
c000ca99:	83 c4 0c             	add    esp,0xc
c000ca9c:	c3                   	ret    
c000ca9d:	90                   	nop
c000ca9e:	66 90                	xchg   ax,ax

c000caa0 <HardDiskController::~HardDiskController()>:
c000caa0:	83 ec 0c             	sub    esp,0xc
c000caa3:	ba 28 17 02 c0       	mov    edx,0xc0021728
c000caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caac:	89 10                	mov    DWORD PTR [eax],edx
c000caae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab2:	83 ec 0c             	sub    esp,0xc
c000cab5:	50                   	push   eax
c000cab6:	e8 6b fb ff ff       	call   c000c626 <Device::~Device()>
c000cabb:	83 c4 10             	add    esp,0x10
c000cabe:	90                   	nop
c000cabf:	83 c4 0c             	add    esp,0xc
c000cac2:	c3                   	ret    
c000cac3:	90                   	nop

c000cac4 <HardDiskController::~HardDiskController()>:
c000cac4:	83 ec 0c             	sub    esp,0xc
c000cac7:	83 ec 0c             	sub    esp,0xc
c000caca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cace:	e8 cd ff ff ff       	call   c000caa0 <HardDiskController::~HardDiskController()>
c000cad3:	83 c4 10             	add    esp,0x10
c000cad6:	83 ec 08             	sub    esp,0x8
c000cad9:	68 58 01 00 00       	push   0x158
c000cade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cae2:	e8 25 dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cae7:	83 c4 10             	add    esp,0x10
c000caea:	83 c4 0c             	add    esp,0xc
c000caed:	c3                   	ret    

c000caee <PhysicalDisk::eject()>:
c000caee:	83 c8 ff             	or     eax,0xffffffff
c000caf1:	c3                   	ret    

c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf9:	83 ec 08             	sub    esp,0x8
c000cafc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb00:	50                   	push   eax
c000cb01:	e8 b6 fd ff ff       	call   c000c8bc <Device::Device(char const*)>
c000cb06:	83 c4 10             	add    esp,0x10
c000cb09:	ba 54 17 02 c0       	mov    edx,0xc0021754
c000cb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb12:	89 10                	mov    DWORD PTR [eax],edx
c000cb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb18:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb40:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb54:	90                   	nop
c000cb55:	83 c4 0c             	add    esp,0xc
c000cb58:	c3                   	ret    
c000cb59:	90                   	nop

c000cb5a <PhysicalDisk::startCache()>:
c000cb5a:	56                   	push   esi
c000cb5b:	53                   	push   ebx
c000cb5c:	83 ec 10             	sub    esp,0x10
c000cb5f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb63:	6a 44                	push   0x44
c000cb65:	e8 69 af ff ff       	call   c0007ad3 <malloc>
c000cb6a:	89 c6                	mov    esi,eax
c000cb6c:	58                   	pop    eax
c000cb6d:	5a                   	pop    edx
c000cb6e:	53                   	push   ebx
c000cb6f:	56                   	push   esi
c000cb70:	e8 83 17 00 00       	call   c000e2f8 <VCache::VCache(PhysicalDisk*)>
c000cb75:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb7b:	83 c4 14             	add    esp,0x14
c000cb7e:	5b                   	pop    ebx
c000cb7f:	5e                   	pop    esi
c000cb80:	c3                   	ret    
c000cb81:	90                   	nop

c000cb82 <PhysicalDisk::~PhysicalDisk()>:
c000cb82:	83 ec 0c             	sub    esp,0xc
c000cb85:	ba 54 17 02 c0       	mov    edx,0xc0021754
c000cb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb8e:	89 10                	mov    DWORD PTR [eax],edx
c000cb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb94:	83 ec 0c             	sub    esp,0xc
c000cb97:	50                   	push   eax
c000cb98:	e8 89 fa ff ff       	call   c000c626 <Device::~Device()>
c000cb9d:	83 c4 10             	add    esp,0x10
c000cba0:	90                   	nop
c000cba1:	83 c4 0c             	add    esp,0xc
c000cba4:	c3                   	ret    
c000cba5:	90                   	nop

c000cba6 <PhysicalDisk::~PhysicalDisk()>:
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	83 ec 0c             	sub    esp,0xc
c000cbac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb0:	e8 cd ff ff ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	83 ec 08             	sub    esp,0x8
c000cbbb:	68 6c 01 00 00       	push   0x16c
c000cbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc4:	e8 43 dc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	83 c4 0c             	add    esp,0xc
c000cbcf:	c3                   	ret    

c000cbd0 <int_handler>:
c000cbd0:	55                   	push   ebp
c000cbd1:	57                   	push   edi
c000cbd2:	56                   	push   esi
c000cbd3:	53                   	push   ebx
c000cbd4:	83 ec 0c             	sub    esp,0xc
c000cbd7:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbde:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cbe2:	74 0b                	je     c000cbef <int_handler+0x1f>
c000cbe4:	fa                   	cli    
c000cbe5:	f4                   	hlt    
c000cbe6:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbed:	75 f5                	jne    c000cbe4 <int_handler+0x14>
c000cbef:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cbf2:	8d 46 e0             	lea    eax,[esi-0x20]
c000cbf5:	83 f8 17             	cmp    eax,0x17
c000cbf8:	76 40                	jbe    c000cc3a <int_handler+0x6a>
c000cbfa:	c1 e6 04             	shl    esi,0x4
c000cbfd:	31 db                	xor    ebx,ebx
c000cbff:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc05:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc0b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc0f:	85 c0                	test   eax,eax
c000cc11:	74 13                	je     c000cc26 <int_handler+0x56>
c000cc13:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc17:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc1a:	74 2c                	je     c000cc48 <int_handler+0x78>
c000cc1c:	83 ec 08             	sub    esp,0x8
c000cc1f:	52                   	push   edx
c000cc20:	57                   	push   edi
c000cc21:	ff d0                	call   eax
c000cc23:	83 c4 10             	add    esp,0x10
c000cc26:	83 c3 01             	add    ebx,0x1
c000cc29:	83 fb 04             	cmp    ebx,0x4
c000cc2c:	75 dd                	jne    c000cc0b <int_handler+0x3b>
c000cc2e:	83 c4 0c             	add    esp,0xc
c000cc31:	31 c0                	xor    eax,eax
c000cc33:	5b                   	pop    ebx
c000cc34:	31 d2                	xor    edx,edx
c000cc36:	5e                   	pop    esi
c000cc37:	5f                   	pop    edi
c000cc38:	5d                   	pop    ebp
c000cc39:	c3                   	ret    
c000cc3a:	83 ec 0c             	sub    esp,0xc
c000cc3d:	50                   	push   eax
c000cc3e:	e8 2f b3 00 00       	call   c0017f72 <HalEndOfInterrupt(int)>
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	eb b2                	jmp    c000cbfa <int_handler+0x2a>
c000cc48:	83 ec 08             	sub    esp,0x8
c000cc4b:	52                   	push   edx
c000cc4c:	57                   	push   edi
c000cc4d:	ff d0                	call   eax
c000cc4f:	83 c4 10             	add    esp,0x10
c000cc52:	83 c4 0c             	add    esp,0xc
c000cc55:	5b                   	pop    ebx
c000cc56:	5e                   	pop    esi
c000cc57:	5f                   	pop    edi
c000cc58:	5d                   	pop    ebp
c000cc59:	c3                   	ret    

c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc5a:	56                   	push   esi
c000cc5b:	31 c0                	xor    eax,eax
c000cc5d:	53                   	push   ebx
c000cc5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc6a:	89 ca                	mov    edx,ecx
c000cc6c:	c1 e2 04             	shl    edx,0x4
c000cc6f:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc77:	74 17                	je     c000cc90 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc79:	83 c0 01             	add    eax,0x1
c000cc7c:	83 f8 04             	cmp    eax,0x4
c000cc7f:	75 ee                	jne    c000cc6f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cc81:	c7 44 24 0c 84 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021784
c000cc89:	5b                   	pop    ebx
c000cc8a:	5e                   	pop    esi
c000cc8b:	e9 31 46 00 00       	jmp    c00112c1 <KePanic(char const*)>
c000cc90:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cc93:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cc9a:	5b                   	pop    ebx
c000cc9b:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cca2:	5e                   	pop    esi
c000cca3:	c3                   	ret    

c000cca4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cca4:	55                   	push   ebp
c000cca5:	57                   	push   edi
c000cca6:	56                   	push   esi
c000cca7:	53                   	push   ebx
c000cca8:	83 ec 0c             	sub    esp,0xc
c000ccab:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ccb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ccb9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ccc0:	8d 6e 20             	lea    ebp,[esi+0x20]
c000ccc3:	74 57                	je     c000cd1c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000ccc5:	84 c0                	test   al,al
c000ccc7:	89 c7                	mov    edi,eax
c000ccc9:	74 1d                	je     c000cce8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cccb:	83 fe 0f             	cmp    esi,0xf
c000ccce:	0f 8f d9 00 00 00    	jg     c000cdad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000ccd4:	0f b6 b6 88 32 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcd78]
c000ccdb:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cce3:	d1 ef                	shr    edi,1
c000cce5:	83 e7 01             	and    edi,0x1
c000cce8:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cced:	83 ec 08             	sub    esp,0x8
c000ccf0:	31 db                	xor    ebx,ebx
c000ccf2:	50                   	push   eax
c000ccf3:	68 91 17 02 c0       	push   0xc0021791
c000ccf8:	e8 0d dc ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ccfd:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd02:	83 c4 10             	add    esp,0x10
c000cd05:	85 c0                	test   eax,eax
c000cd07:	7f 59                	jg     c000cd62 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cd09:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd0c:	83 ec 0c             	sub    esp,0xc
c000cd0f:	68 a8 17 02 c0       	push   0xc00217a8
c000cd14:	e8 a8 45 00 00       	call   c00112c1 <KePanic(char const*)>
c000cd19:	83 c4 10             	add    esp,0x10
c000cd1c:	89 e8                	mov    eax,ebp
c000cd1e:	31 d2                	xor    edx,edx
c000cd20:	c1 e0 04             	shl    eax,0x4
c000cd23:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd2a:	85 c9                	test   ecx,ecx
c000cd2c:	0f 84 92 00 00 00    	je     c000cdc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cd32:	83 c2 01             	add    edx,0x1
c000cd35:	83 fa 04             	cmp    edx,0x4
c000cd38:	75 e9                	jne    c000cd23 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cd3a:	83 ec 0c             	sub    esp,0xc
c000cd3d:	68 fc 17 02 c0       	push   0xc00217fc
c000cd42:	e8 7a 45 00 00       	call   c00112c1 <KePanic(char const*)>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd4f:	83 c4 0c             	add    esp,0xc
c000cd52:	5b                   	pop    ebx
c000cd53:	5e                   	pop    esi
c000cd54:	5f                   	pop    edi
c000cd55:	5d                   	pop    ebp
c000cd56:	c3                   	ret    
c000cd57:	83 c3 01             	add    ebx,0x1
c000cd5a:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd60:	7e a7                	jle    c000cd09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cd62:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd69:	83 ec 08             	sub    esp,0x8
c000cd6c:	56                   	push   esi
c000cd6d:	55                   	push   ebp
c000cd6e:	e8 e9 19 01 00       	call   c001e75c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd73:	83 c4 10             	add    esp,0x10
c000cd76:	84 c0                	test   al,al
c000cd78:	74 dd                	je     c000cd57 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd7a:	89 f8                	mov    eax,edi
c000cd7c:	83 ec 04             	sub    esp,0x4
c000cd7f:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd86:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd89:	0f b6 f8             	movzx  edi,al
c000cd8c:	57                   	push   edi
c000cd8d:	89 e8                	mov    eax,ebp
c000cd8f:	6a 00                	push   0x0
c000cd91:	0f b6 c0             	movzx  eax,al
c000cd94:	50                   	push   eax
c000cd95:	89 f0                	mov    eax,esi
c000cd97:	6a 00                	push   0x0
c000cd99:	0f b6 c0             	movzx  eax,al
c000cd9c:	6a 00                	push   0x0
c000cd9e:	50                   	push   eax
c000cd9f:	53                   	push   ebx
c000cda0:	e8 23 1b 01 00       	call   c001e8c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cda5:	83 c4 20             	add    esp,0x20
c000cda8:	e9 6f ff ff ff       	jmp    c000cd1c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cdad:	83 ec 0c             	sub    esp,0xc
c000cdb0:	31 ff                	xor    edi,edi
c000cdb2:	68 c4 17 02 c0       	push   0xc00217c4
c000cdb7:	e8 05 45 00 00       	call   c00112c1 <KePanic(char const*)>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	e9 24 ff ff ff       	jmp    c000cce8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cdc4:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cdc7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cdcb:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cdd2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cdd6:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cddd:	83 c4 0c             	add    esp,0xc
c000cde0:	89 f0                	mov    eax,esi
c000cde2:	5b                   	pop    ebx
c000cde3:	5e                   	pop    esi
c000cde4:	5f                   	pop    edi
c000cde5:	5d                   	pop    ebp
c000cde6:	c3                   	ret    

c000cde7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cde7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdeb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cdef:	c1 e0 04             	shl    eax,0x4
c000cdf2:	8d 50 10             	lea    edx,[eax+0x10]
c000cdf5:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cdfb:	74 08                	je     c000ce05 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cdfd:	83 c0 04             	add    eax,0x4
c000ce00:	39 d0                	cmp    eax,edx
c000ce02:	75 f1                	jne    c000cdf5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce04:	c3                   	ret    
c000ce05:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce0f:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce19:	eb e2                	jmp    c000cdfd <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce1b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce1b:	56                   	push   esi
c000ce1c:	53                   	push   ebx
c000ce1d:	83 ec 04             	sub    esp,0x4
c000ce20:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce2d:	74 0e                	je     c000ce3d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce2f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce34:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce3b:	75 34                	jne    c000ce71 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000ce3d:	8d 43 20             	lea    eax,[ebx+0x20]
c000ce40:	c1 e0 04             	shl    eax,0x4
c000ce43:	8d 50 10             	lea    edx,[eax+0x10]
c000ce46:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000ce4c:	74 0d                	je     c000ce5b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000ce4e:	83 c0 04             	add    eax,0x4
c000ce51:	39 d0                	cmp    eax,edx
c000ce53:	75 f1                	jne    c000ce46 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ce55:	83 c4 04             	add    esp,0x4
c000ce58:	5b                   	pop    ebx
c000ce59:	5e                   	pop    esi
c000ce5a:	c3                   	ret    
c000ce5b:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce65:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce6f:	eb dd                	jmp    c000ce4e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000ce71:	83 fb 0f             	cmp    ebx,0xf
c000ce74:	7f 09                	jg     c000ce7f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000ce76:	0f b6 9b 88 32 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdcd78]
c000ce7d:	eb be                	jmp    c000ce3d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce7f:	83 ec 0c             	sub    esp,0xc
c000ce82:	68 b5 17 02 c0       	push   0xc00217b5
c000ce87:	e8 35 44 00 00       	call   c00112c1 <KePanic(char const*)>
c000ce8c:	83 c4 10             	add    esp,0x10
c000ce8f:	eb ac                	jmp    c000ce3d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000ce91 <setupINTS()>:
c000ce91:	31 c0                	xor    eax,eax
c000ce93:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce9d:	83 c0 10             	add    eax,0x10
c000cea0:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000ceaa:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000ceb4:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000cebe:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000cec8:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000ced2:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000cedc:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000cee6:	3d 00 10 00 00       	cmp    eax,0x1000
c000ceeb:	75 a6                	jne    c000ce93 <setupINTS()+0x2>
c000ceed:	c3                   	ret    

c000ceee <convertLegacyIRQNumber(int)>:
c000ceee:	83 ec 0c             	sub    esp,0xc
c000cef1:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cefb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf02:	74 0c                	je     c000cf10 <convertLegacyIRQNumber(int)+0x22>
c000cf04:	83 f8 0f             	cmp    eax,0xf
c000cf07:	7f 0b                	jg     c000cf14 <convertLegacyIRQNumber(int)+0x26>
c000cf09:	0f b6 80 88 32 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcd78]
c000cf10:	83 c4 0c             	add    esp,0xc
c000cf13:	c3                   	ret    
c000cf14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf18:	83 ec 0c             	sub    esp,0xc
c000cf1b:	68 c4 17 02 c0       	push   0xc00217c4
c000cf20:	e8 9c 43 00 00       	call   c00112c1 <KePanic(char const*)>
c000cf25:	83 c4 10             	add    esp,0x10
c000cf28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf2c:	83 c4 0c             	add    esp,0xc
c000cf2f:	c3                   	ret    

c000cf30 <startGUI(void*)>:
c000cf30:	55                   	push   ebp
c000cf31:	89 e5                	mov    ebp,esp
c000cf33:	53                   	push   ebx
c000cf34:	83 ec 04             	sub    esp,0x4
c000cf37:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf3c:	83 e8 01             	sub    eax,0x1
c000cf3f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf44:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf49:	85 c0                	test   eax,eax
c000cf4b:	75 01                	jne    c000cf4e <startGUI(void*)+0x1e>
c000cf4d:	fb                   	sti    
c000cf4e:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf54:	83 ec 08             	sub    esp,0x8
c000cf57:	6a 01                	push   0x1
c000cf59:	68 21 18 02 c0       	push   0xc0021821
c000cf5e:	e8 f2 82 00 00       	call   c0015255 <Thr::loadDLL(char const*, bool)>
c000cf63:	83 c4 10             	add    esp,0x10
c000cf66:	83 ec 08             	sub    esp,0x8
c000cf69:	53                   	push   ebx
c000cf6a:	50                   	push   eax
c000cf6b:	e8 25 85 00 00       	call   c0015495 <Thr::executeDLL(unsigned long, void*)>
c000cf70:	83 c4 10             	add    esp,0x10
c000cf73:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf79:	83 ec 08             	sub    esp,0x8
c000cf7c:	6a 01                	push   0x1
c000cf7e:	68 3b 18 02 c0       	push   0xc002183b
c000cf83:	e8 cd 82 00 00       	call   c0015255 <Thr::loadDLL(char const*, bool)>
c000cf88:	83 c4 10             	add    esp,0x10
c000cf8b:	83 ec 08             	sub    esp,0x8
c000cf8e:	53                   	push   ebx
c000cf8f:	50                   	push   eax
c000cf90:	e8 00 85 00 00       	call   c0015495 <Thr::executeDLL(unsigned long, void*)>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	90                   	nop
c000cf99:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf9c:	c9                   	leave  
c000cf9d:	c3                   	ret    

c000cf9e <startGUIVESA(void*)>:
c000cf9e:	55                   	push   ebp
c000cf9f:	89 e5                	mov    ebp,esp
c000cfa1:	53                   	push   ebx
c000cfa2:	83 ec 04             	sub    esp,0x4
c000cfa5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfaa:	83 e8 01             	sub    eax,0x1
c000cfad:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfb2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfb7:	85 c0                	test   eax,eax
c000cfb9:	75 01                	jne    c000cfbc <startGUIVESA(void*)+0x1e>
c000cfbb:	fb                   	sti    
c000cfbc:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfc2:	83 ec 08             	sub    esp,0x8
c000cfc5:	6a 01                	push   0x1
c000cfc7:	68 59 18 02 c0       	push   0xc0021859
c000cfcc:	e8 84 82 00 00       	call   c0015255 <Thr::loadDLL(char const*, bool)>
c000cfd1:	83 c4 10             	add    esp,0x10
c000cfd4:	83 ec 08             	sub    esp,0x8
c000cfd7:	53                   	push   ebx
c000cfd8:	50                   	push   eax
c000cfd9:	e8 b7 84 00 00       	call   c0015495 <Thr::executeDLL(unsigned long, void*)>
c000cfde:	83 c4 10             	add    esp,0x10
c000cfe1:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfe7:	83 ec 08             	sub    esp,0x8
c000cfea:	6a 01                	push   0x1
c000cfec:	68 3b 18 02 c0       	push   0xc002183b
c000cff1:	e8 5f 82 00 00       	call   c0015255 <Thr::loadDLL(char const*, bool)>
c000cff6:	83 c4 10             	add    esp,0x10
c000cff9:	83 ec 08             	sub    esp,0x8
c000cffc:	53                   	push   ebx
c000cffd:	50                   	push   eax
c000cffe:	e8 92 84 00 00       	call   c0015495 <Thr::executeDLL(unsigned long, void*)>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	90                   	nop
c000d007:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d00a:	c9                   	leave  
c000d00b:	c3                   	ret    

c000d00c <sendKeyToTerminal(unsigned char)>:
c000d00c:	55                   	push   ebp
c000d00d:	89 e5                	mov    ebp,esp
c000d00f:	83 ec 28             	sub    esp,0x28
c000d012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d015:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d018:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d01d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d021:	83 ec 08             	sub    esp,0x8
c000d024:	52                   	push   edx
c000d025:	50                   	push   eax
c000d026:	e8 91 bd ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d02b:	83 c4 10             	add    esp,0x10
c000d02e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d032:	83 f8 0a             	cmp    eax,0xa
c000d035:	74 16                	je     c000d04d <sendKeyToTerminal(unsigned char)+0x41>
c000d037:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d03b:	83 f8 03             	cmp    eax,0x3
c000d03e:	74 0d                	je     c000d04d <sendKeyToTerminal(unsigned char)+0x41>
c000d040:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d044:	83 f8 1c             	cmp    eax,0x1c
c000d047:	0f 85 97 00 00 00    	jne    c000d0e4 <sendKeyToTerminal(unsigned char)+0xd8>
c000d04d:	fa                   	cli    
c000d04e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d053:	83 c0 01             	add    eax,0x1
c000d056:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d05b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d060:	83 c0 01             	add    eax,0x1
c000d063:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d068:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d06d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d070:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d07a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d07e:	74 1f                	je     c000d09f <sendKeyToTerminal(unsigned char)+0x93>
c000d080:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d083:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d086:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d089:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d08c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d08f:	83 ec 0c             	sub    esp,0xc
c000d092:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d095:	e8 1e 91 00 00       	call   c00161b8 <unblockTask(ThreadControlBlock*)>
c000d09a:	83 c4 10             	add    esp,0x10
c000d09d:	eb db                	jmp    c000d07a <sendKeyToTerminal(unsigned char)+0x6e>
c000d09f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0a4:	83 e8 01             	sub    eax,0x1
c000d0a7:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0ac:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0b1:	85 c0                	test   eax,eax
c000d0b3:	75 18                	jne    c000d0cd <sendKeyToTerminal(unsigned char)+0xc1>
c000d0b5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d0ba:	85 c0                	test   eax,eax
c000d0bc:	74 0f                	je     c000d0cd <sendKeyToTerminal(unsigned char)+0xc1>
c000d0be:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d0c8:	e8 f3 8b 00 00       	call   c0015cc0 <schedule()>
c000d0cd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0d2:	83 e8 01             	sub    eax,0x1
c000d0d5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0da:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0df:	85 c0                	test   eax,eax
c000d0e1:	75 01                	jne    c000d0e4 <sendKeyToTerminal(unsigned char)+0xd8>
c000d0e3:	fb                   	sti    
c000d0e4:	90                   	nop
c000d0e5:	c9                   	leave  
c000d0e6:	c3                   	ret    

c000d0e7 <sendKeyboardToken(KeyboardToken)>:
c000d0e7:	55                   	push   ebp
c000d0e8:	89 e5                	mov    ebp,esp
c000d0ea:	83 ec 18             	sub    esp,0x18
c000d0ed:	e8 1f 42 00 00       	call   c0011311 <KeUserIOReceived()>
c000d0f2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d0f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0f8:	0f b7 c0             	movzx  eax,ax
c000d0fb:	83 f2 01             	xor    edx,0x1
c000d0fe:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d104:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d109:	85 c0                	test   eax,eax
c000d10b:	74 24                	je     c000d131 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d10d:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d113:	83 ec 04             	sub    esp,0x4
c000d116:	68 40 84 02 c0       	push   0xc0028440
c000d11b:	83 ec 08             	sub    esp,0x8
c000d11e:	89 e0                	mov    eax,esp
c000d120:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d123:	89 08                	mov    DWORD PTR [eax],ecx
c000d125:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d128:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d12c:	ff d2                	call   edx
c000d12e:	83 c4 10             	add    esp,0x10
c000d131:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d135:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d138:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d13d:	0f b6 d2             	movzx  edx,dl
c000d140:	0f b6 c0             	movzx  eax,al
c000d143:	39 c2                	cmp    edx,eax
c000d145:	74 1c                	je     c000d163 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d147:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d14a:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d14f:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d154:	0f b6 c0             	movzx  eax,al
c000d157:	83 ec 0c             	sub    esp,0xc
c000d15a:	50                   	push   eax
c000d15b:	e8 b8 b3 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d160:	83 c4 10             	add    esp,0x10
c000d163:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d166:	0f b6 c0             	movzx  eax,al
c000d169:	85 c0                	test   eax,eax
c000d16b:	0f 84 da 00 00 00    	je     c000d24b <sendKeyboardToken(KeyboardToken)+0x164>
c000d171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d174:	0f b7 c0             	movzx  eax,ax
c000d177:	3d 18 03 00 00       	cmp    eax,0x318
c000d17c:	75 06                	jne    c000d184 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d17e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d187:	0f b7 c0             	movzx  eax,ax
c000d18a:	3d 19 03 00 00       	cmp    eax,0x319
c000d18f:	75 06                	jne    c000d197 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d191:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d19a:	0f b7 c0             	movzx  eax,ax
c000d19d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1a2:	75 06                	jne    c000d1aa <sendKeyboardToken(KeyboardToken)+0xc3>
c000d1a4:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ad:	0f b7 c0             	movzx  eax,ax
c000d1b0:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1b5:	75 06                	jne    c000d1bd <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1b7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d1bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c0:	0f b7 c0             	movzx  eax,ax
c000d1c3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1c8:	75 06                	jne    c000d1d0 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d1ca:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d3:	0f b7 c0             	movzx  eax,ax
c000d1d6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1db:	75 06                	jne    c000d1e3 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d1dd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e6:	0f b7 c0             	movzx  eax,ax
c000d1e9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1ee:	75 06                	jne    c000d1f6 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d1f0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d1f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f9:	0f b7 c0             	movzx  eax,ax
c000d1fc:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d201:	75 06                	jne    c000d209 <sendKeyboardToken(KeyboardToken)+0x122>
c000d203:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d20c:	0f b7 c0             	movzx  eax,ax
c000d20f:	3d 20 03 00 00       	cmp    eax,0x320
c000d214:	75 06                	jne    c000d21c <sendKeyboardToken(KeyboardToken)+0x135>
c000d216:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d21c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21f:	0f b7 c0             	movzx  eax,ax
c000d222:	3d 21 03 00 00       	cmp    eax,0x321
c000d227:	75 06                	jne    c000d22f <sendKeyboardToken(KeyboardToken)+0x148>
c000d229:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d232:	0f b7 c0             	movzx  eax,ax
c000d235:	3d 22 03 00 00       	cmp    eax,0x322
c000d23a:	0f 85 f1 00 00 00    	jne    c000d331 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d240:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d246:	e9 e6 00 00 00       	jmp    c000d331 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d24b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d24e:	0f b7 c0             	movzx  eax,ax
c000d251:	3d 18 03 00 00       	cmp    eax,0x318
c000d256:	75 0a                	jne    c000d262 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d258:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d25e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	0f b7 c0             	movzx  eax,ax
c000d268:	3d 19 03 00 00       	cmp    eax,0x319
c000d26d:	75 0a                	jne    c000d279 <sendKeyboardToken(KeyboardToken)+0x192>
c000d26f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d275:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d27c:	0f b7 c0             	movzx  eax,ax
c000d27f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d284:	75 0a                	jne    c000d290 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d286:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d28c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d293:	0f b7 c0             	movzx  eax,ax
c000d296:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d29b:	75 0a                	jne    c000d2a7 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d29d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d2a3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2aa:	0f b7 c0             	movzx  eax,ax
c000d2ad:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2b2:	75 0a                	jne    c000d2be <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2b4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d2ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c1:	0f b7 c0             	movzx  eax,ax
c000d2c4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2c9:	75 0a                	jne    c000d2d5 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d2cb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d8:	0f b7 c0             	movzx  eax,ax
c000d2db:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d2e0:	75 0a                	jne    c000d2ec <sendKeyboardToken(KeyboardToken)+0x205>
c000d2e2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d2e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ef:	0f b7 c0             	movzx  eax,ax
c000d2f2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d2f7:	75 0a                	jne    c000d303 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d2f9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d2ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d306:	0f b7 c0             	movzx  eax,ax
c000d309:	3d 20 03 00 00       	cmp    eax,0x320
c000d30e:	75 0a                	jne    c000d31a <sendKeyboardToken(KeyboardToken)+0x233>
c000d310:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d316:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d31a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d31d:	0f b7 c0             	movzx  eax,ax
c000d320:	3d 21 03 00 00       	cmp    eax,0x321
c000d325:	75 0a                	jne    c000d331 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d327:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d32d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d334:	0f b7 c0             	movzx  eax,ax
c000d337:	3d 00 02 00 00       	cmp    eax,0x200
c000d33c:	75 2f                	jne    c000d36d <sendKeyboardToken(KeyboardToken)+0x286>
c000d33e:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d343:	83 f0 01             	xor    eax,0x1
c000d346:	0f b6 c0             	movzx  eax,al
c000d349:	85 c0                	test   eax,eax
c000d34b:	74 20                	je     c000d36d <sendKeyboardToken(KeyboardToken)+0x286>
c000d34d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d352:	6a 01                	push   0x1
c000d354:	6a 00                	push   0x0
c000d356:	68 30 cf 00 c0       	push   0xc000cf30
c000d35b:	50                   	push   eax
c000d35c:	e8 13 87 00 00       	call   c0015a74 <Process::createThread(void (*)(void*), void*, int)>
c000d361:	83 c4 10             	add    esp,0x10
c000d364:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d36b:	eb 3a                	jmp    c000d3a7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d36d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d370:	0f b7 c0             	movzx  eax,ax
c000d373:	3d 01 02 00 00       	cmp    eax,0x201
c000d378:	75 2d                	jne    c000d3a7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d37a:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d37f:	83 f0 01             	xor    eax,0x1
c000d382:	0f b6 c0             	movzx  eax,al
c000d385:	85 c0                	test   eax,eax
c000d387:	74 1e                	je     c000d3a7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d389:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d38e:	6a 01                	push   0x1
c000d390:	6a 00                	push   0x0
c000d392:	68 9e cf 00 c0       	push   0xc000cf9e
c000d397:	50                   	push   eax
c000d398:	e8 d7 86 00 00       	call   c0015a74 <Process::createThread(void (*)(void*), void*, int)>
c000d39d:	83 c4 10             	add    esp,0x10
c000d3a0:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3aa:	0f b7 c0             	movzx  eax,ax
c000d3ad:	3d 25 03 00 00       	cmp    eax,0x325
c000d3b2:	75 06                	jne    c000d3ba <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3b4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d3ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3bd:	0f b7 c0             	movzx  eax,ax
c000d3c0:	3d 24 03 00 00       	cmp    eax,0x324
c000d3c5:	75 06                	jne    c000d3cd <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d3c7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d0:	0f b7 c0             	movzx  eax,ax
c000d3d3:	3d 23 03 00 00       	cmp    eax,0x323
c000d3d8:	75 06                	jne    c000d3e0 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d3da:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d3e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e3:	0f b7 c0             	movzx  eax,ax
c000d3e6:	3d 26 03 00 00       	cmp    eax,0x326
c000d3eb:	75 06                	jne    c000d3f3 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d3ed:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d3f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f6:	0f b7 c0             	movzx  eax,ax
c000d3f9:	3d 27 03 00 00       	cmp    eax,0x327
c000d3fe:	75 06                	jne    c000d406 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d400:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d409:	0f b7 c0             	movzx  eax,ax
c000d40c:	3d 22 03 00 00       	cmp    eax,0x322
c000d411:	75 06                	jne    c000d419 <sendKeyboardToken(KeyboardToken)+0x332>
c000d413:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d419:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d41d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d420:	83 f0 01             	xor    eax,0x1
c000d423:	0f b6 c0             	movzx  eax,al
c000d426:	85 c0                	test   eax,eax
c000d428:	74 7c                	je     c000d4a6 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d42a:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d42f:	0f b6 c0             	movzx  eax,al
c000d432:	85 c0                	test   eax,eax
c000d434:	74 43                	je     c000d479 <sendKeyboardToken(KeyboardToken)+0x392>
c000d436:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d43a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d43e:	85 c0                	test   eax,eax
c000d440:	74 2b                	je     c000d46d <sendKeyboardToken(KeyboardToken)+0x386>
c000d442:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d448:	89 d0                	mov    eax,edx
c000d44a:	c1 e0 02             	shl    eax,0x2
c000d44d:	01 d0                	add    eax,edx
c000d44f:	d1 e0                	shl    eax,1
c000d451:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d459:	0f b7 c0             	movzx  eax,ax
c000d45c:	8d 50 d0             	lea    edx,[eax-0x30]
c000d45f:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d464:	01 d0                	add    eax,edx
c000d466:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d46b:	eb 71                	jmp    c000d4de <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d46d:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d477:	eb 65                	jmp    c000d4de <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d479:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d47e:	85 c0                	test   eax,eax
c000d480:	74 18                	je     c000d49a <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d482:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d487:	0f b6 c0             	movzx  eax,al
c000d48a:	83 ec 0c             	sub    esp,0xc
c000d48d:	50                   	push   eax
c000d48e:	e8 79 fb ff ff       	call   c000d00c <sendKeyToTerminal(unsigned char)>
c000d493:	83 c4 10             	add    esp,0x10
c000d496:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d49a:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4a4:	eb 38                	jmp    c000d4de <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a9:	0f b7 c0             	movzx  eax,ax
c000d4ac:	3d 01 01 00 00       	cmp    eax,0x101
c000d4b1:	75 2b                	jne    c000d4de <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4b3:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4b8:	85 c0                	test   eax,eax
c000d4ba:	74 18                	je     c000d4d4 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d4bc:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4c1:	0f b6 c0             	movzx  eax,al
c000d4c4:	83 ec 0c             	sub    esp,0xc
c000d4c7:	50                   	push   eax
c000d4c8:	e8 3f fb ff ff       	call   c000d00c <sendKeyToTerminal(unsigned char)>
c000d4cd:	83 c4 10             	add    esp,0x10
c000d4d0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4d4:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4de:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d4e1:	83 f0 01             	xor    eax,0x1
c000d4e4:	0f b6 c0             	movzx  eax,al
c000d4e7:	85 c0                	test   eax,eax
c000d4e9:	74 5a                	je     c000d545 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4eb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4ee:	83 f0 01             	xor    eax,0x1
c000d4f1:	0f b6 c0             	movzx  eax,al
c000d4f4:	85 c0                	test   eax,eax
c000d4f6:	74 4d                	je     c000d545 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4f8:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d4fd:	83 f0 01             	xor    eax,0x1
c000d500:	0f b6 c0             	movzx  eax,al
c000d503:	85 c0                	test   eax,eax
c000d505:	74 3e                	je     c000d545 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50a:	0f b7 c0             	movzx  eax,ax
c000d50d:	83 f8 1f             	cmp    eax,0x1f
c000d510:	76 0b                	jbe    c000d51d <sendKeyboardToken(KeyboardToken)+0x436>
c000d512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d515:	0f b7 c0             	movzx  eax,ax
c000d518:	83 f8 7e             	cmp    eax,0x7e
c000d51b:	76 16                	jbe    c000d533 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d51d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d520:	0f b7 c0             	movzx  eax,ax
c000d523:	83 f8 0a             	cmp    eax,0xa
c000d526:	74 0b                	je     c000d533 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52b:	0f b7 c0             	movzx  eax,ax
c000d52e:	83 f8 08             	cmp    eax,0x8
c000d531:	75 12                	jne    c000d545 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d536:	0f b6 c0             	movzx  eax,al
c000d539:	83 ec 0c             	sub    esp,0xc
c000d53c:	50                   	push   eax
c000d53d:	e8 ca fa ff ff       	call   c000d00c <sendKeyToTerminal(unsigned char)>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d548:	83 f0 01             	xor    eax,0x1
c000d54b:	0f b6 c0             	movzx  eax,al
c000d54e:	85 c0                	test   eax,eax
c000d550:	74 5d                	je     c000d5af <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d552:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d555:	83 f0 01             	xor    eax,0x1
c000d558:	0f b6 c0             	movzx  eax,al
c000d55b:	85 c0                	test   eax,eax
c000d55d:	74 50                	je     c000d5af <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d55f:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d564:	0f b6 c0             	movzx  eax,al
c000d567:	85 c0                	test   eax,eax
c000d569:	74 44                	je     c000d5af <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d56b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56e:	0f b7 c0             	movzx  eax,ax
c000d571:	83 f8 3f             	cmp    eax,0x3f
c000d574:	76 39                	jbe    c000d5af <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d579:	0f b7 c0             	movzx  eax,ax
c000d57c:	83 f8 7f             	cmp    eax,0x7f
c000d57f:	77 2e                	ja     c000d5af <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d584:	88 c2                	mov    dl,al
c000d586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d589:	0f b7 c0             	movzx  eax,ax
c000d58c:	83 f8 5f             	cmp    eax,0x5f
c000d58f:	76 04                	jbe    c000d595 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d591:	b0 20                	mov    al,0x20
c000d593:	eb 02                	jmp    c000d597 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d595:	b0 00                	mov    al,0x0
c000d597:	89 d1                	mov    ecx,edx
c000d599:	29 c1                	sub    ecx,eax
c000d59b:	89 c8                	mov    eax,ecx
c000d59d:	83 e8 40             	sub    eax,0x40
c000d5a0:	0f b6 c0             	movzx  eax,al
c000d5a3:	83 ec 0c             	sub    esp,0xc
c000d5a6:	50                   	push   eax
c000d5a7:	e8 60 fa ff ff       	call   c000d00c <sendKeyToTerminal(unsigned char)>
c000d5ac:	83 c4 10             	add    esp,0x10
c000d5af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b2:	0f b7 c0             	movzx  eax,ax
c000d5b5:	3d 00 03 00 00       	cmp    eax,0x300
c000d5ba:	75 12                	jne    c000d5ce <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5bf:	83 f0 01             	xor    eax,0x1
c000d5c2:	0f b6 c0             	movzx  eax,al
c000d5c5:	85 c0                	test   eax,eax
c000d5c7:	74 05                	je     c000d5ce <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5c9:	e8 4b af ff ff       	call   c0008519 <doTerminalCycle()>
c000d5ce:	90                   	nop
c000d5cf:	c9                   	leave  
c000d5d0:	c3                   	ret    

c000d5d1 <clearInternalKeybuffer(VgaText*)>:
c000d5d1:	55                   	push   ebp
c000d5d2:	89 e5                	mov    ebp,esp
c000d5d4:	83 ec 08             	sub    esp,0x8
c000d5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5da:	05 02 01 00 00       	add    eax,0x102
c000d5df:	83 ec 0c             	sub    esp,0xc
c000d5e2:	50                   	push   eax
c000d5e3:	e8 98 2f ff ff       	call   c0000580 <strlen>
c000d5e8:	83 c4 10             	add    esp,0x10
c000d5eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5ee:	81 c2 02 01 00 00    	add    edx,0x102
c000d5f4:	83 ec 04             	sub    esp,0x4
c000d5f7:	50                   	push   eax
c000d5f8:	6a 00                	push   0x0
c000d5fa:	52                   	push   edx
c000d5fb:	e8 f0 2e ff ff       	call   c00004f0 <memset>
c000d600:	83 c4 10             	add    esp,0x10
c000d603:	90                   	nop
c000d604:	c9                   	leave  
c000d605:	c3                   	ret    

c000d606 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d606:	55                   	push   ebp
c000d607:	89 e5                	mov    ebp,esp
c000d609:	83 ec 18             	sub    esp,0x18
c000d60c:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d611:	85 c0                	test   eax,eax
c000d613:	74 2a                	je     c000d63f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d615:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d61b:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d621:	83 ec 04             	sub    esp,0x4
c000d624:	68 40 84 02 c0       	push   0xc0028440
c000d629:	83 ec 08             	sub    esp,0x8
c000d62c:	89 e0                	mov    eax,esp
c000d62e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d631:	89 08                	mov    DWORD PTR [eax],ecx
c000d633:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d636:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d63a:	ff d2                	call   edx
c000d63c:	83 c4 10             	add    esp,0x10
c000d63f:	fb                   	sti    
c000d640:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d647:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d64b:	0f 84 0d 01 00 00    	je     c000d75e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d654:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d65a:	0f be c0             	movsx  eax,al
c000d65d:	85 c0                	test   eax,eax
c000d65f:	75 2c                	jne    c000d68d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d661:	fa                   	cli    
c000d662:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d667:	83 c0 01             	add    eax,0x1
c000d66a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d66f:	e8 4c 86 00 00       	call   c0015cc0 <schedule()>
c000d674:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d679:	83 e8 01             	sub    eax,0x1
c000d67c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d681:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d686:	85 c0                	test   eax,eax
c000d688:	75 c7                	jne    c000d651 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d68a:	fb                   	sti    
c000d68b:	eb c4                	jmp    c000d651 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d68d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d690:	8d 50 01             	lea    edx,[eax+0x1]
c000d693:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d696:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d699:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d69f:	88 10                	mov    BYTE PTR [eax],dl
c000d6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6aa:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6ad:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6b1:	83 f8 03             	cmp    eax,0x3
c000d6b4:	75 1e                	jne    c000d6d4 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6b6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6c0:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6c6:	83 ec 08             	sub    esp,0x8
c000d6c9:	6a 02                	push   0x2
c000d6cb:	50                   	push   eax
c000d6cc:	e8 8e 40 00 00       	call   c001175f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6d1:	83 c4 10             	add    esp,0x10
c000d6d4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6d8:	83 f8 1c             	cmp    eax,0x1c
c000d6db:	75 1e                	jne    c000d6fb <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d6dd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6e7:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6ed:	83 ec 08             	sub    esp,0x8
c000d6f0:	6a 09                	push   0x9
c000d6f2:	50                   	push   eax
c000d6f3:	e8 67 40 00 00       	call   c001175f <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6f8:	83 c4 10             	add    esp,0x10
c000d6fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fe:	05 02 01 00 00       	add    eax,0x102
c000d703:	83 ec 0c             	sub    esp,0xc
c000d706:	50                   	push   eax
c000d707:	e8 74 2e ff ff       	call   c0000580 <strlen>
c000d70c:	83 c4 10             	add    esp,0x10
c000d70f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d712:	81 c2 02 01 00 00    	add    edx,0x102
c000d718:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d71b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d71e:	81 c2 02 01 00 00    	add    edx,0x102
c000d724:	83 ec 04             	sub    esp,0x4
c000d727:	50                   	push   eax
c000d728:	51                   	push   ecx
c000d729:	52                   	push   edx
c000d72a:	e8 a1 2c ff ff       	call   c00003d0 <memmove>
c000d72f:	83 c4 10             	add    esp,0x10
c000d732:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d736:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d73a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d73e:	83 f8 0a             	cmp    eax,0xa
c000d741:	74 16                	je     c000d759 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d743:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d747:	83 f8 03             	cmp    eax,0x3
c000d74a:	74 0d                	je     c000d759 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d74c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d750:	83 f8 1c             	cmp    eax,0x1c
c000d753:	0f 85 ee fe ff ff    	jne    c000d647 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d759:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d75c:	eb 03                	jmp    c000d761 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d75e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d761:	c9                   	leave  
c000d762:	c3                   	ret    
c000d763:	90                   	nop

c000d764 <Keyboard::Keyboard(char const*)>:
c000d764:	83 ec 0c             	sub    esp,0xc
c000d767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76b:	83 ec 08             	sub    esp,0x8
c000d76e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d772:	50                   	push   eax
c000d773:	e8 44 f1 ff ff       	call   c000c8bc <Device::Device(char const*)>
c000d778:	83 c4 10             	add    esp,0x10
c000d77b:	ba 7c 18 02 c0       	mov    edx,0xc002187c
c000d780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d784:	89 10                	mov    DWORD PTR [eax],edx
c000d786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d794:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d79b:	90                   	nop
c000d79c:	83 c4 0c             	add    esp,0xc
c000d79f:	c3                   	ret    

c000d7a0 <Keyboard::~Keyboard()>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	ba 7c 18 02 c0       	mov    edx,0xc002187c
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	83 ec 0c             	sub    esp,0xc
c000d7b5:	50                   	push   eax
c000d7b6:	e8 6b ee ff ff       	call   c000c626 <Device::~Device()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	90                   	nop
c000d7bf:	83 c4 0c             	add    esp,0xc
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <Keyboard::~Keyboard()>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	83 ec 0c             	sub    esp,0xc
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	e8 cd ff ff ff       	call   c000d7a0 <Keyboard::~Keyboard()>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	83 ec 08             	sub    esp,0x8
c000d7d9:	68 5c 01 00 00       	push   0x15c
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	e8 25 d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d7e7:	83 c4 10             	add    esp,0x10
c000d7ea:	83 c4 0c             	add    esp,0xc
c000d7ed:	c3                   	ret    

c000d7ee <LogicalDisk::close(int, int, void*)>:
c000d7ee:	83 c8 ff             	or     eax,0xffffffff
c000d7f1:	c3                   	ret    

c000d7f2 <LogicalDisk::~LogicalDisk()>:
c000d7f2:	83 ec 0c             	sub    esp,0xc
c000d7f5:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	89 10                	mov    DWORD PTR [eax],edx
c000d800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d804:	83 ec 0c             	sub    esp,0xc
c000d807:	50                   	push   eax
c000d808:	e8 19 ee ff ff       	call   c000c626 <Device::~Device()>
c000d80d:	83 c4 10             	add    esp,0x10
c000d810:	90                   	nop
c000d811:	83 c4 0c             	add    esp,0xc
c000d814:	c3                   	ret    
c000d815:	90                   	nop

c000d816 <LogicalDisk::~LogicalDisk()>:
c000d816:	83 ec 0c             	sub    esp,0xc
c000d819:	83 ec 0c             	sub    esp,0xc
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 cd ff ff ff       	call   c000d7f2 <LogicalDisk::~LogicalDisk()>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	83 ec 08             	sub    esp,0x8
c000d82b:	68 78 01 00 00       	push   0x178
c000d830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d834:	e8 d3 cf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d839:	83 c4 10             	add    esp,0x10
c000d83c:	83 c4 0c             	add    esp,0xc
c000d83f:	c3                   	ret    

c000d840 <LogicalDisk::open(int, int, void*)>:
c000d840:	83 ec 18             	sub    esp,0x18
c000d843:	68 a8 18 02 c0       	push   0xc00218a8
c000d848:	e8 74 3a 00 00       	call   c00112c1 <KePanic(char const*)>
c000d84d:	83 c8 ff             	or     eax,0xffffffff
c000d850:	83 c4 1c             	add    esp,0x1c
c000d853:	c3                   	ret    

c000d854 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d854:	53                   	push   ebx
c000d855:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d859:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d85d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d861:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d867:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d86d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d873:	77 10                	ja     c000d885 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d875:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d87b:	89 d3                	mov    ebx,edx
c000d87d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d883:	72 05                	jb     c000d88a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d885:	83 c8 ff             	or     eax,0xffffffff
c000d888:	89 c2                	mov    edx,eax
c000d88a:	5b                   	pop    ebx
c000d88b:	c3                   	ret    

c000d88c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d88c:	56                   	push   esi
c000d88d:	83 c8 ff             	or     eax,0xffffffff
c000d890:	53                   	push   ebx
c000d891:	89 c2                	mov    edx,eax
c000d893:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d897:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d89b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d89f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8a5:	77 27                	ja     c000d8ce <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8a7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8ad:	89 d8                	mov    eax,ebx
c000d8af:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8ba:	89 c2                	mov    edx,eax
c000d8bc:	73 10                	jae    c000d8ce <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8be:	89 c8                	mov    eax,ecx
c000d8c0:	89 da                	mov    edx,ebx
c000d8c2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d8c8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d8ce:	5b                   	pop    ebx
c000d8cf:	5e                   	pop    esi
c000d8d0:	c3                   	ret    
c000d8d1:	90                   	nop

c000d8d2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8d2:	83 ec 1c             	sub    esp,0x1c
c000d8d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8e9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d8f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f8:	83 ec 08             	sub    esp,0x8
c000d8fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d8ff:	50                   	push   eax
c000d900:	e8 b7 ef ff ff       	call   c000c8bc <Device::Device(char const*)>
c000d905:	83 c4 10             	add    esp,0x10
c000d908:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c000d90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d911:	89 10                	mov    DWORD PTR [eax],edx
c000d913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d917:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d922:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d929:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d938:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d942:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d94a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d94e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d954:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d95a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d95e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d961:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d965:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d96b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d975:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d979:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d983:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d98d:	90                   	nop
c000d98e:	83 c4 1c             	add    esp,0x1c
c000d991:	c3                   	ret    

c000d992 <LogicalDisk::assignDriveLetter()>:
c000d992:	55                   	push   ebp
c000d993:	57                   	push   edi
c000d994:	56                   	push   esi
c000d995:	53                   	push   ebx
c000d996:	83 ec 14             	sub    esp,0x14
c000d999:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d99d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d9a3:	b0 41                	mov    al,0x41
c000d9a5:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9ab:	84 d2                	test   dl,dl
c000d9ad:	75 02                	jne    c000d9b1 <LogicalDisk::assignDriveLetter()+0x1f>
c000d9af:	b0 43                	mov    al,0x43
c000d9b1:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9b7:	0f b6 ca             	movzx  ecx,dl
c000d9ba:	0f be e8             	movsx  ebp,al
c000d9bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d9c1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9c5:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d9cb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9cf:	3c 43                	cmp    al,0x43
c000d9d1:	75 10                	jne    c000d9e3 <LogicalDisk::assignDriveLetter()+0x51>
c000d9d3:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d9da:	75 5a                	jne    c000da36 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d9e1:	75 53                	jne    c000da36 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9e3:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d9e6:	ba 01 00 00 00       	mov    edx,0x1
c000d9eb:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9ee:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d9f1:	d3 e2                	shl    edx,cl
c000d9f3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d9f7:	89 d7                	mov    edi,edx
c000d9f9:	89 d6                	mov    esi,edx
c000d9fb:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d9ff:	c1 ff 1f             	sar    edi,0x1f
c000da02:	21 f9                	and    ecx,edi
c000da04:	09 d1                	or     ecx,edx
c000da06:	75 2e                	jne    c000da36 <LogicalDisk::assignDriveLetter()+0xa4>
c000da08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da0c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da10:	09 f2                	or     edx,esi
c000da12:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da15:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da1f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da25:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da2c:	09 fa                	or     edx,edi
c000da2e:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da34:	eb 0d                	jmp    c000da43 <LogicalDisk::assignDriveLetter()+0xb1>
c000da36:	8d 50 01             	lea    edx,[eax+0x1]
c000da39:	45                   	inc    ebp
c000da3a:	80 fa 5b             	cmp    dl,0x5b
c000da3d:	88 d0                	mov    al,dl
c000da3f:	75 8e                	jne    c000d9cf <LogicalDisk::assignDriveLetter()+0x3d>
c000da41:	31 c0                	xor    eax,eax
c000da43:	83 c4 14             	add    esp,0x14
c000da46:	5b                   	pop    ebx
c000da47:	5e                   	pop    esi
c000da48:	5f                   	pop    edi
c000da49:	5d                   	pop    ebp
c000da4a:	c3                   	ret    
c000da4b:	90                   	nop

c000da4c <LogicalDisk::mount()>:
c000da4c:	56                   	push   esi
c000da4d:	53                   	push   ebx
c000da4e:	53                   	push   ebx
c000da4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da53:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da59:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da63:	85 db                	test   ebx,ebx
c000da65:	74 27                	je     c000da8e <LogicalDisk::mount()+0x42>
c000da67:	51                   	push   ecx
c000da68:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da6f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da71:	83 e8 41             	sub    eax,0x41
c000da74:	50                   	push   eax
c000da75:	56                   	push   esi
c000da76:	53                   	push   ebx
c000da77:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da7a:	83 c4 10             	add    esp,0x10
c000da7d:	84 c0                	test   al,al
c000da7f:	74 08                	je     c000da89 <LogicalDisk::mount()+0x3d>
c000da81:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000da87:	eb 07                	jmp    c000da90 <LogicalDisk::mount()+0x44>
c000da89:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000da8c:	eb d5                	jmp    c000da63 <LogicalDisk::mount()+0x17>
c000da8e:	31 c0                	xor    eax,eax
c000da90:	5a                   	pop    edx
c000da91:	5b                   	pop    ebx
c000da92:	5e                   	pop    esi
c000da93:	c3                   	ret    

c000da94 <LogicalDisk::unmount()>:
c000da94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da98:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000daa2:	c3                   	ret    
c000daa3:	90                   	nop

c000daa4 <LogicalDisk::eject()>:
c000daa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daa8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000daae:	8b 10                	mov    edx,DWORD PTR [eax]
c000dab0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dab4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dab7:	90                   	nop

c000dab8 <LogicalDisk::unassignDriveLetter()>:
c000dab8:	57                   	push   edi
c000dab9:	56                   	push   esi
c000daba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dabe:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dac5:	85 c9                	test   ecx,ecx
c000dac7:	75 0f                	jne    c000dad8 <LogicalDisk::unassignDriveLetter()+0x20>
c000dac9:	c7 44 24 0c cc 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc00218cc
c000dad1:	5e                   	pop    esi
c000dad2:	5f                   	pop    edi
c000dad3:	e9 e9 37 00 00       	jmp    c00112c1 <KePanic(char const*)>
c000dad8:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dadf:	83 e9 41             	sub    ecx,0x41
c000dae2:	b8 01 00 00 00       	mov    eax,0x1
c000dae7:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000daf2:	d3 e0                	shl    eax,cl
c000daf4:	89 c7                	mov    edi,eax
c000daf6:	f7 d0                	not    eax
c000daf8:	c1 ff 1f             	sar    edi,0x1f
c000dafb:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db01:	89 fe                	mov    esi,edi
c000db03:	f7 d6                	not    esi
c000db05:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db0b:	5e                   	pop    esi
c000db0c:	5f                   	pop    edi
c000db0d:	c3                   	ret    

c000db0e <LogicalDisk::read(unsigned long long, int, void*)>:
c000db0e:	57                   	push   edi
c000db0f:	56                   	push   esi
c000db10:	53                   	push   ebx
c000db11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db19:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db21:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db27:	77 41                	ja     c000db6a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db29:	99                   	cdq    
c000db2a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db30:	01 c8                	add    eax,ecx
c000db32:	11 da                	adc    edx,ebx
c000db34:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db3a:	19 d7                	sbb    edi,edx
c000db3c:	72 33                	jb     c000db71 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db3e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db44:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db4a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db4e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db52:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db58:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db62:	5b                   	pop    ebx
c000db63:	5e                   	pop    esi
c000db64:	5f                   	pop    edi
c000db65:	e9 d4 0a 00 00       	jmp    c000e63e <VCache::read(unsigned long long, int, void*)>
c000db6a:	b8 05 00 00 00       	mov    eax,0x5
c000db6f:	eb 05                	jmp    c000db76 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db71:	b8 07 00 00 00       	mov    eax,0x7
c000db76:	5b                   	pop    ebx
c000db77:	5e                   	pop    esi
c000db78:	5f                   	pop    edi
c000db79:	c3                   	ret    

c000db7a <LogicalDisk::write(unsigned long long, int, void*)>:
c000db7a:	57                   	push   edi
c000db7b:	56                   	push   esi
c000db7c:	53                   	push   ebx
c000db7d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db85:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db8d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db93:	77 41                	ja     c000dbd6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000db95:	99                   	cdq    
c000db96:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db9c:	01 c8                	add    eax,ecx
c000db9e:	11 da                	adc    edx,ebx
c000dba0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dba6:	19 d7                	sbb    edi,edx
c000dba8:	72 33                	jb     c000dbdd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dbaa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbb0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbb6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbba:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbbe:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dbc4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbce:	5b                   	pop    ebx
c000dbcf:	5e                   	pop    esi
c000dbd0:	5f                   	pop    edi
c000dbd1:	e9 6e 09 00 00       	jmp    c000e544 <VCache::write(unsigned long long, int, void*)>
c000dbd6:	b8 05 00 00 00       	mov    eax,0x5
c000dbdb:	eb 05                	jmp    c000dbe2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dbdd:	b8 07 00 00 00       	mov    eax,0x7
c000dbe2:	5b                   	pop    ebx
c000dbe3:	5e                   	pop    esi
c000dbe4:	5f                   	pop    edi
c000dbe5:	c3                   	ret    
c000dbe6:	66 90                	xchg   ax,ax

c000dbe8 <Mouse::Mouse(char const*)>:
c000dbe8:	83 ec 0c             	sub    esp,0xc
c000dbeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbef:	83 ec 08             	sub    esp,0x8
c000dbf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf6:	50                   	push   eax
c000dbf7:	e8 c0 ec ff ff       	call   c000c8bc <Device::Device(char const*)>
c000dbfc:	83 c4 10             	add    esp,0x10
c000dbff:	ba 20 19 02 c0       	mov    edx,0xc0021920
c000dc04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc08:	89 10                	mov    DWORD PTR [eax],edx
c000dc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc18:	90                   	nop
c000dc19:	83 c4 0c             	add    esp,0xc
c000dc1c:	c3                   	ret    
c000dc1d:	90                   	nop
c000dc1e:	66 90                	xchg   ax,ax

c000dc20 <Mouse::~Mouse()>:
c000dc20:	83 ec 0c             	sub    esp,0xc
c000dc23:	ba 20 19 02 c0       	mov    edx,0xc0021920
c000dc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2c:	89 10                	mov    DWORD PTR [eax],edx
c000dc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc32:	83 ec 0c             	sub    esp,0xc
c000dc35:	50                   	push   eax
c000dc36:	e8 eb e9 ff ff       	call   c000c626 <Device::~Device()>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	90                   	nop
c000dc3f:	83 c4 0c             	add    esp,0xc
c000dc42:	c3                   	ret    
c000dc43:	90                   	nop

c000dc44 <Mouse::~Mouse()>:
c000dc44:	83 ec 0c             	sub    esp,0xc
c000dc47:	83 ec 0c             	sub    esp,0xc
c000dc4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4e:	e8 cd ff ff ff       	call   c000dc20 <Mouse::~Mouse()>
c000dc53:	83 c4 10             	add    esp,0x10
c000dc56:	83 ec 08             	sub    esp,0x8
c000dc59:	68 58 01 00 00       	push   0x158
c000dc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc62:	e8 a5 cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dc67:	83 c4 10             	add    esp,0x10
c000dc6a:	83 c4 0c             	add    esp,0xc
c000dc6d:	c3                   	ret    

c000dc6e <NIC::getMAC()>:
c000dc6e:	31 c0                	xor    eax,eax
c000dc70:	31 d2                	xor    edx,edx
c000dc72:	c3                   	ret    
c000dc73:	90                   	nop

c000dc74 <NIC::write(int, unsigned char*, int*)>:
c000dc74:	b8 01 00 00 00       	mov    eax,0x1
c000dc79:	c3                   	ret    

c000dc7a <NIC::NIC(char const*)>:
c000dc7a:	83 ec 0c             	sub    esp,0xc
c000dc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc81:	83 ec 08             	sub    esp,0x8
c000dc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc88:	50                   	push   eax
c000dc89:	e8 2e ec ff ff       	call   c000c8bc <Device::Device(char const*)>
c000dc8e:	83 c4 10             	add    esp,0x10
c000dc91:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000dc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc9a:	89 10                	mov    DWORD PTR [eax],edx
c000dc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dca0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dcaa:	90                   	nop
c000dcab:	83 c4 0c             	add    esp,0xc
c000dcae:	c3                   	ret    
c000dcaf:	90                   	nop

c000dcb0 <NIC::~NIC()>:
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000dcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcbc:	89 10                	mov    DWORD PTR [eax],edx
c000dcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc2:	83 ec 0c             	sub    esp,0xc
c000dcc5:	50                   	push   eax
c000dcc6:	e8 5b e9 ff ff       	call   c000c626 <Device::~Device()>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	90                   	nop
c000dccf:	83 c4 0c             	add    esp,0xc
c000dcd2:	c3                   	ret    
c000dcd3:	90                   	nop

c000dcd4 <NIC::~NIC()>:
c000dcd4:	83 ec 0c             	sub    esp,0xc
c000dcd7:	83 ec 0c             	sub    esp,0xc
c000dcda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcde:	e8 cd ff ff ff       	call   c000dcb0 <NIC::~NIC()>
c000dce3:	83 c4 10             	add    esp,0x10
c000dce6:	83 ec 08             	sub    esp,0x8
c000dce9:	68 58 01 00 00       	push   0x158
c000dcee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcf2:	e8 15 cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dcf7:	83 c4 10             	add    esp,0x10
c000dcfa:	83 c4 0c             	add    esp,0xc
c000dcfd:	c3                   	ret    

c000dcfe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dcfe:	55                   	push   ebp
c000dcff:	57                   	push   edi
c000dd00:	56                   	push   esi
c000dd01:	53                   	push   ebx
c000dd02:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd08:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dd0f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dd16:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dd1d:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dd24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd28:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd2c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd33:	e8 80 ec ff ff       	call   c000c9b8 <Device::getName()>
c000dd38:	5a                   	pop    edx
c000dd39:	59                   	pop    ecx
c000dd3a:	50                   	push   eax
c000dd3b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd3f:	55                   	push   ebp
c000dd40:	e8 0b 29 ff ff       	call   c0000650 <strcpy>
c000dd45:	5b                   	pop    ebx
c000dd46:	58                   	pop    eax
c000dd47:	68 78 19 02 c0       	push   0xc0021978
c000dd4c:	55                   	push   ebp
c000dd4d:	e8 1e 2b ff ff       	call   c0000870 <strcat>
c000dd52:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd59:	e8 75 9d ff ff       	call   c0007ad3 <malloc>
c000dd5e:	83 c4 0c             	add    esp,0xc
c000dd61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd69:	89 c3                	mov    ebx,eax
c000dd6b:	57                   	push   edi
c000dd6c:	56                   	push   esi
c000dd6d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd74:	55                   	push   ebp
c000dd75:	50                   	push   eax
c000dd76:	e8 57 fb ff ff       	call   c000d8d2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd7b:	83 c4 14             	add    esp,0x14
c000dd7e:	53                   	push   ebx
c000dd7f:	e8 0e fc ff ff       	call   c000d992 <LogicalDisk::assignDriveLetter()>
c000dd84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd87:	e8 c0 fc ff ff       	call   c000da4c <LogicalDisk::mount()>
c000dd8c:	58                   	pop    eax
c000dd8d:	5a                   	pop    edx
c000dd8e:	53                   	push   ebx
c000dd8f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd96:	e8 89 e9 ff ff       	call   c000c724 <Device::addChild(Device*)>
c000dd9b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dda1:	5b                   	pop    ebx
c000dda2:	5e                   	pop    esi
c000dda3:	5f                   	pop    edi
c000dda4:	5d                   	pop    ebp
c000dda5:	c3                   	ret    

c000dda6 <createPartitionsForDisk(PhysicalDisk*)>:
c000dda6:	55                   	push   ebp
c000dda7:	57                   	push   edi
c000dda8:	56                   	push   esi
c000dda9:	53                   	push   ebx
c000ddaa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ddb0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ddb7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ddbd:	3d 00 02 00 00       	cmp    eax,0x200
c000ddc2:	74 27                	je     c000ddeb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ddc4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ddca:	83 ec 10             	sub    esp,0x10
c000ddcd:	99                   	cdq    
c000ddce:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ddd4:	52                   	push   edx
c000ddd5:	50                   	push   eax
c000ddd6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ddda:	c1 e6 0a             	shl    esi,0xa
c000dddd:	89 fd                	mov    ebp,edi
c000dddf:	55                   	push   ebp
c000dde0:	56                   	push   esi
c000dde1:	e8 9a 15 01 00       	call   c001f380 <__udivdi3>
c000dde6:	e9 b9 00 00 00       	jmp    c000dea4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ddeb:	83 ec 0c             	sub    esp,0xc
c000ddee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ddf0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ddf4:	56                   	push   esi
c000ddf5:	6a 01                	push   0x1
c000ddf7:	6a 00                	push   0x0
c000ddf9:	6a 00                	push   0x0
c000ddfb:	53                   	push   ebx
c000ddfc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ddff:	83 c4 20             	add    esp,0x20
c000de02:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de0a:	75 0a                	jne    c000de16 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de0c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de14:	74 2c                	je     c000de42 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de16:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de1c:	83 ec 10             	sub    esp,0x10
c000de1f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de25:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de2b:	89 f7                	mov    edi,esi
c000de2d:	c1 ff 1f             	sar    edi,0x1f
c000de30:	57                   	push   edi
c000de31:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de35:	56                   	push   esi
c000de36:	c1 e0 0a             	shl    eax,0xa
c000de39:	52                   	push   edx
c000de3a:	50                   	push   eax
c000de3b:	e8 40 15 01 00       	call   c001f380 <__udivdi3>
c000de40:	eb 62                	jmp    c000dea4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de42:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de49:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de50:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de57:	89 cf                	mov    edi,ecx
c000de59:	83 e2 7f             	and    edx,0x7f
c000de5c:	83 e7 7f             	and    edi,0x7f
c000de5f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de62:	83 e0 7f             	and    eax,0x7f
c000de65:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de68:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de6f:	83 e0 7f             	and    eax,0x7f
c000de72:	01 d0                	add    eax,edx
c000de74:	84 c0                	test   al,al
c000de76:	89 c5                	mov    ebp,eax
c000de78:	74 41                	je     c000debb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de7a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de80:	83 ec 10             	sub    esp,0x10
c000de83:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de89:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de8f:	89 f7                	mov    edi,esi
c000de91:	c1 ff 1f             	sar    edi,0x1f
c000de94:	57                   	push   edi
c000de95:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de99:	56                   	push   esi
c000de9a:	c1 e0 0a             	shl    eax,0xa
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	e8 dc 14 01 00       	call   c001f380 <__udivdi3>
c000dea4:	83 c4 14             	add    esp,0x14
c000dea7:	52                   	push   edx
c000dea8:	50                   	push   eax
c000dea9:	6a 00                	push   0x0
c000deab:	6a 00                	push   0x0
c000dead:	53                   	push   ebx
c000deae:	e8 4b fe ff ff       	call   c000dcfe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000deb3:	83 c4 20             	add    esp,0x20
c000deb6:	e9 73 01 00 00       	jmp    c000e02e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000debb:	89 f0                	mov    eax,esi
c000debd:	31 c9                	xor    ecx,ecx
c000debf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dec6:	75 02                	jne    c000deca <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dec8:	89 cd                	mov    ebp,ecx
c000deca:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ded2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ded9:	83 c0 10             	add    eax,0x10
c000dedc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000dee4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000deeb:	c1 e2 08             	shl    edx,0x8
c000deee:	c1 e6 10             	shl    esi,0x10
c000def1:	09 f2                	or     edx,esi
c000def3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000defa:	09 f2                	or     edx,esi
c000defc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df03:	c1 e6 18             	shl    esi,0x18
c000df06:	09 f2                	or     edx,esi
c000df08:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df0f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df13:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df1a:	c1 e6 10             	shl    esi,0x10
c000df1d:	c1 e2 08             	shl    edx,0x8
c000df20:	09 f2                	or     edx,esi
c000df22:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df29:	09 f2                	or     edx,esi
c000df2b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df32:	c1 e6 18             	shl    esi,0x18
c000df35:	09 f2                	or     edx,esi
c000df37:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df3b:	41                   	inc    ecx
c000df3c:	83 f9 04             	cmp    ecx,0x4
c000df3f:	0f 85 7a ff ff ff    	jne    c000debf <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df49:	83 f0 01             	xor    eax,0x1
c000df4c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df50:	75 4f                	jne    c000dfa1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df56:	83 f0 01             	xor    eax,0x1
c000df59:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df5d:	75 42                	jne    c000dfa1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df5f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df65:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df6d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df7b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df81:	89 f7                	mov    edi,esi
c000df83:	c1 ff 1f             	sar    edi,0x1f
c000df86:	57                   	push   edi
c000df87:	56                   	push   esi
c000df88:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df8c:	52                   	push   edx
c000df8d:	c1 e0 0a             	shl    eax,0xa
c000df90:	50                   	push   eax
c000df91:	e8 ea 13 01 00       	call   c001f380 <__udivdi3>
c000df96:	83 c4 10             	add    esp,0x10
c000df99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df9d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfa1:	89 e8                	mov    eax,ebp
c000dfa3:	0f b6 e8             	movzx  ebp,al
c000dfa6:	85 ed                	test   ebp,ebp
c000dfa8:	74 50                	je     c000dffa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dfaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dfb2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfb6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfbe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dfda:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dfde:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dfe2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dfe6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dfea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dfee:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dff2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000dff6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000dffa:	31 ed                	xor    ebp,ebp
c000dffc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e000:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e004:	89 f8                	mov    eax,edi
c000e006:	09 f0                	or     eax,esi
c000e008:	74 1e                	je     c000e028 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e00a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e00e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e012:	89 d1                	mov    ecx,edx
c000e014:	09 c1                	or     ecx,eax
c000e016:	74 10                	je     c000e028 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	57                   	push   edi
c000e01c:	56                   	push   esi
c000e01d:	52                   	push   edx
c000e01e:	50                   	push   eax
c000e01f:	53                   	push   ebx
c000e020:	e8 d9 fc ff ff       	call   c000dcfe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e025:	83 c4 20             	add    esp,0x20
c000e028:	45                   	inc    ebp
c000e029:	83 fd 04             	cmp    ebp,0x4
c000e02c:	75 ce                	jne    c000dffc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e02e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e034:	5b                   	pop    ebx
c000e035:	5e                   	pop    esi
c000e036:	5f                   	pop    edi
c000e037:	5d                   	pop    ebp
c000e038:	c3                   	ret    
c000e039:	66 90                	xchg   ax,ax
c000e03b:	90                   	nop

c000e03c <Serial::Serial(char const*)>:
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e043:	83 ec 08             	sub    esp,0x8
c000e046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04a:	50                   	push   eax
c000e04b:	e8 6c e8 ff ff       	call   c000c8bc <Device::Device(char const*)>
c000e050:	83 c4 10             	add    esp,0x10
c000e053:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000e058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05c:	89 10                	mov    DWORD PTR [eax],edx
c000e05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e062:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e06c:	90                   	nop
c000e06d:	83 c4 0c             	add    esp,0xc
c000e070:	c3                   	ret    
c000e071:	90                   	nop
c000e072:	66 90                	xchg   ax,ax

c000e074 <Serial::~Serial()>:
c000e074:	83 ec 0c             	sub    esp,0xc
c000e077:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000e07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e080:	89 10                	mov    DWORD PTR [eax],edx
c000e082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 97 e5 ff ff       	call   c000c626 <Device::~Device()>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	90                   	nop
c000e093:	83 c4 0c             	add    esp,0xc
c000e096:	c3                   	ret    
c000e097:	90                   	nop

c000e098 <Serial::~Serial()>:
c000e098:	83 ec 0c             	sub    esp,0xc
c000e09b:	83 ec 0c             	sub    esp,0xc
c000e09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a2:	e8 cd ff ff ff       	call   c000e074 <Serial::~Serial()>
c000e0a7:	83 c4 10             	add    esp,0x10
c000e0aa:	83 ec 08             	sub    esp,0x8
c000e0ad:	68 58 01 00 00       	push   0x158
c000e0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b6:	e8 51 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e0bb:	83 c4 10             	add    esp,0x10
c000e0be:	83 c4 0c             	add    esp,0xc
c000e0c1:	c3                   	ret    
c000e0c2:	66 90                	xchg   ax,ax

c000e0c4 <Timer::Timer(char const*)>:
c000e0c4:	83 ec 0c             	sub    esp,0xc
c000e0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0cb:	83 ec 08             	sub    esp,0x8
c000e0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0d2:	50                   	push   eax
c000e0d3:	e8 e4 e7 ff ff       	call   c000c8bc <Device::Device(char const*)>
c000e0d8:	83 c4 10             	add    esp,0x10
c000e0db:	ba d0 19 02 c0       	mov    edx,0xc00219d0
c000e0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e4:	89 10                	mov    DWORD PTR [eax],edx
c000e0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ea:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e0f4:	90                   	nop
c000e0f5:	83 c4 0c             	add    esp,0xc
c000e0f8:	c3                   	ret    
c000e0f9:	90                   	nop
c000e0fa:	66 90                	xchg   ax,ax

c000e0fc <Timer::~Timer()>:
c000e0fc:	83 ec 0c             	sub    esp,0xc
c000e0ff:	ba d0 19 02 c0       	mov    edx,0xc00219d0
c000e104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e108:	89 10                	mov    DWORD PTR [eax],edx
c000e10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e10e:	83 ec 0c             	sub    esp,0xc
c000e111:	50                   	push   eax
c000e112:	e8 0f e5 ff ff       	call   c000c626 <Device::~Device()>
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	90                   	nop
c000e11b:	83 c4 0c             	add    esp,0xc
c000e11e:	c3                   	ret    
c000e11f:	90                   	nop

c000e120 <Timer::~Timer()>:
c000e120:	83 ec 0c             	sub    esp,0xc
c000e123:	83 ec 0c             	sub    esp,0xc
c000e126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e12a:	e8 cd ff ff ff       	call   c000e0fc <Timer::~Timer()>
c000e12f:	83 c4 10             	add    esp,0x10
c000e132:	83 ec 08             	sub    esp,0x8
c000e135:	68 5c 01 00 00       	push   0x15c
c000e13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e13e:	e8 c9 c6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e143:	83 c4 10             	add    esp,0x10
c000e146:	83 c4 0c             	add    esp,0xc
c000e149:	c3                   	ret    

c000e14a <Timer::read()>:
c000e14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e14e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e154:	c3                   	ret    

c000e155 <setupTimer(int)>:
c000e155:	53                   	push   ebx
c000e156:	83 ec 14             	sub    esp,0x14
c000e159:	68 5c 01 00 00       	push   0x15c
c000e15e:	e8 70 99 ff ff       	call   c0007ad3 <malloc>
c000e163:	89 04 24             	mov    DWORD PTR [esp],eax
c000e166:	89 c3                	mov    ebx,eax
c000e168:	e8 77 0a 01 00       	call   c001ebe4 <PIT::PIT()>
c000e16d:	58                   	pop    eax
c000e16e:	5a                   	pop    edx
c000e16f:	53                   	push   ebx
c000e170:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e176:	e8 a9 e5 ff ff       	call   c000c724 <Device::addChild(Device*)>
c000e17b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e17d:	6a 00                	push   0x0
c000e17f:	6a 00                	push   0x0
c000e181:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e185:	53                   	push   ebx
c000e186:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e189:	83 c4 28             	add    esp,0x28
c000e18c:	89 d8                	mov    eax,ebx
c000e18e:	5b                   	pop    ebx
c000e18f:	c3                   	ret    

c000e190 <timerHandler(unsigned int)>:
c000e190:	56                   	push   esi
c000e191:	53                   	push   ebx
c000e192:	51                   	push   ecx
c000e193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e197:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e19d:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e1a4:	0f 84 4a 01 00 00    	je     c000e2f4 <timerHandler(unsigned int)+0x164>
c000e1aa:	fa                   	cli    
c000e1ab:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1b1:	83 ec 0c             	sub    esp,0xc
c000e1b4:	68 d8 96 02 c0       	push   0xc00296d8
c000e1b9:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1bf:	e8 8c 17 01 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1c4:	83 c4 10             	add    esp,0x10
c000e1c7:	84 c0                	test   al,al
c000e1c9:	0f 85 a1 00 00 00    	jne    c000e270 <timerHandler(unsigned int)+0xe0>
c000e1cf:	83 ec 0c             	sub    esp,0xc
c000e1d2:	68 d8 96 02 c0       	push   0xc00296d8
c000e1d7:	e8 90 17 01 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1dc:	83 c4 10             	add    esp,0x10
c000e1df:	89 c6                	mov    esi,eax
c000e1e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1e4:	83 ec 0c             	sub    esp,0xc
c000e1e7:	68 d8 96 02 c0       	push   0xc00296d8
c000e1ec:	e8 7b 17 01 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1f1:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e1f8:	89 c3                	mov    ebx,eax
c000e1fa:	e8 75 17 01 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e1ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e202:	83 c4 10             	add    esp,0x10
c000e205:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e20b:	77 23                	ja     c000e230 <timerHandler(unsigned int)+0xa0>
c000e20d:	83 ec 0c             	sub    esp,0xc
c000e210:	53                   	push   ebx
c000e211:	e8 a2 7f 00 00       	call   c00161b8 <unblockTask(ThreadControlBlock*)>
c000e216:	83 c4 10             	add    esp,0x10
c000e219:	39 de                	cmp    esi,ebx
c000e21b:	75 27                	jne    c000e244 <timerHandler(unsigned int)+0xb4>
c000e21d:	83 ec 0c             	sub    esp,0xc
c000e220:	68 d8 96 02 c0       	push   0xc00296d8
c000e225:	e8 42 17 01 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e22a:	89 c6                	mov    esi,eax
c000e22c:	eb 12                	jmp    c000e240 <timerHandler(unsigned int)+0xb0>
c000e22e:	66 90                	xchg   ax,ax
c000e230:	52                   	push   edx
c000e231:	52                   	push   edx
c000e232:	53                   	push   ebx
c000e233:	68 d8 96 02 c0       	push   0xc00296d8
c000e238:	e8 f3 17 01 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e23d:	8d 76 00             	lea    esi,[esi+0x0]
c000e240:	83 c4 10             	add    esp,0x10
c000e243:	90                   	nop
c000e244:	83 ec 0c             	sub    esp,0xc
c000e247:	68 d8 96 02 c0       	push   0xc00296d8
c000e24c:	e8 ff 16 01 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e251:	83 c4 10             	add    esp,0x10
c000e254:	84 c0                	test   al,al
c000e256:	75 18                	jne    c000e270 <timerHandler(unsigned int)+0xe0>
c000e258:	83 ec 0c             	sub    esp,0xc
c000e25b:	68 d8 96 02 c0       	push   0xc00296d8
c000e260:	e8 07 17 01 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	39 f0                	cmp    eax,esi
c000e26a:	0f 85 74 ff ff ff    	jne    c000e1e4 <timerHandler(unsigned int)+0x54>
c000e270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e275:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e279:	74 41                	je     c000e2bc <timerHandler(unsigned int)+0x12c>
c000e27b:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e282:	74 38                	je     c000e2bc <timerHandler(unsigned int)+0x12c>
c000e284:	fa                   	cli    
c000e285:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e28b:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e290:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e296:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e299:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e29f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e2a2:	72 08                	jb     c000e2ac <timerHandler(unsigned int)+0x11c>
c000e2a4:	e8 17 7a 00 00       	call   c0015cc0 <schedule()>
c000e2a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2ac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2b1:	48                   	dec    eax
c000e2b2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2b7:	75 03                	jne    c000e2bc <timerHandler(unsigned int)+0x12c>
c000e2b9:	fb                   	sti    
c000e2ba:	66 90                	xchg   ax,ax
c000e2bc:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2c1:	48                   	dec    eax
c000e2c2:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e2c7:	75 1b                	jne    c000e2e4 <timerHandler(unsigned int)+0x154>
c000e2c9:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2d0:	74 12                	je     c000e2e4 <timerHandler(unsigned int)+0x154>
c000e2d2:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e2dc:	e8 df 79 00 00       	call   c0015cc0 <schedule()>
c000e2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2e4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2e9:	48                   	dec    eax
c000e2ea:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2ef:	75 03                	jne    c000e2f4 <timerHandler(unsigned int)+0x164>
c000e2f1:	fb                   	sti    
c000e2f2:	66 90                	xchg   ax,ax
c000e2f4:	58                   	pop    eax
c000e2f5:	5b                   	pop    ebx
c000e2f6:	5e                   	pop    esi
c000e2f7:	c3                   	ret    

c000e2f8 <VCache::VCache(PhysicalDisk*)>:
c000e2f8:	53                   	push   ebx
c000e2f9:	83 ec 18             	sub    esp,0x18
c000e2fc:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000e301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e305:	89 10                	mov    DWORD PTR [eax],edx
c000e307:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e30b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e316:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e31d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e321:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e328:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e32f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e333:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e33a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e345:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e350:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e358:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e35f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e36e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e372:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e37a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e37e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e382:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e389:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e391:	83 ec 0c             	sub    esp,0xc
c000e394:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e398:	e8 36 97 ff ff       	call   c0007ad3 <malloc>
c000e39d:	83 c4 10             	add    esp,0x10
c000e3a0:	89 c3                	mov    ebx,eax
c000e3a2:	83 ec 0c             	sub    esp,0xc
c000e3a5:	53                   	push   ebx
c000e3a6:	e8 b5 76 00 00       	call   c0015a60 <Mutex::Mutex()>
c000e3ab:	83 c4 10             	add    esp,0x10
c000e3ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3bd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e3cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3cf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3e0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e3e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e3ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e3f0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e3f3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e3f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3fa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e3fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e402:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e408:	05 00 02 00 00       	add    eax,0x200
c000e40d:	c1 e0 03             	shl    eax,0x3
c000e410:	83 ec 0c             	sub    esp,0xc
c000e413:	50                   	push   eax
c000e414:	e8 ba 96 ff ff       	call   c0007ad3 <malloc>
c000e419:	83 c4 10             	add    esp,0x10
c000e41c:	89 c2                	mov    edx,eax
c000e41e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e422:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e429:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e434:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e438:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e43c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e442:	89 d0                	mov    eax,edx
c000e444:	c1 e0 02             	shl    eax,0x2
c000e447:	01 d0                	add    eax,edx
c000e449:	c1 e0 04             	shl    eax,0x4
c000e44c:	83 ec 0c             	sub    esp,0xc
c000e44f:	50                   	push   eax
c000e450:	e8 7e 96 ff ff       	call   c0007ad3 <malloc>
c000e455:	83 c4 10             	add    esp,0x10
c000e458:	89 c2                	mov    edx,eax
c000e45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e45e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e461:	90                   	nop
c000e462:	83 c4 18             	add    esp,0x18
c000e465:	5b                   	pop    ebx
c000e466:	c3                   	ret    
c000e467:	90                   	nop

c000e468 <VCache::invalidateReadBuffer()>:
c000e468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e46c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e472:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e476:	c3                   	ret    
c000e477:	90                   	nop

c000e478 <VCache::writeWriteBuffer()>:
c000e478:	53                   	push   ebx
c000e479:	83 ec 08             	sub    esp,0x8
c000e47c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e480:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e484:	74 1e                	je     c000e4a4 <VCache::writeWriteBuffer()+0x2c>
c000e486:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e489:	83 ec 0c             	sub    esp,0xc
c000e48c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e48e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e491:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e494:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e497:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e49a:	50                   	push   eax
c000e49b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e49e:	83 c4 20             	add    esp,0x20
c000e4a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4a4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4ab:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4b2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4b6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e4bd:	83 c4 08             	add    esp,0x8
c000e4c0:	5b                   	pop    ebx
c000e4c1:	c3                   	ret    
c000e4c2:	66 90                	xchg   ax,ax

c000e4c4 <VCache::~VCache()>:
c000e4c4:	83 ec 0c             	sub    esp,0xc
c000e4c7:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000e4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d0:	89 10                	mov    DWORD PTR [eax],edx
c000e4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e4d9:	0f b6 c0             	movzx  eax,al
c000e4dc:	85 c0                	test   eax,eax
c000e4de:	74 10                	je     c000e4f0 <VCache::~VCache()+0x2c>
c000e4e0:	83 ec 0c             	sub    esp,0xc
c000e4e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e7:	e8 8c ff ff ff       	call   c000e478 <VCache::writeWriteBuffer()>
c000e4ec:	83 c4 10             	add    esp,0x10
c000e4ef:	90                   	nop
c000e4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e4f7:	83 ec 0c             	sub    esp,0xc
c000e4fa:	50                   	push   eax
c000e4fb:	e8 e3 95 ff ff       	call   c0007ae3 <free>
c000e500:	83 c4 10             	add    esp,0x10
c000e503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e507:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e50a:	83 ec 0c             	sub    esp,0xc
c000e50d:	50                   	push   eax
c000e50e:	e8 d0 95 ff ff       	call   c0007ae3 <free>
c000e513:	83 c4 10             	add    esp,0x10
c000e516:	90                   	nop
c000e517:	83 c4 0c             	add    esp,0xc
c000e51a:	c3                   	ret    
c000e51b:	90                   	nop

c000e51c <VCache::~VCache()>:
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	83 ec 0c             	sub    esp,0xc
c000e522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e526:	e8 99 ff ff ff       	call   c000e4c4 <VCache::~VCache()>
c000e52b:	83 c4 10             	add    esp,0x10
c000e52e:	83 ec 08             	sub    esp,0x8
c000e531:	6a 44                	push   0x44
c000e533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e537:	e8 d0 c2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e53c:	83 c4 10             	add    esp,0x10
c000e53f:	83 c4 0c             	add    esp,0xc
c000e542:	c3                   	ret    
c000e543:	90                   	nop

c000e544 <VCache::write(unsigned long long, int, void*)>:
c000e544:	55                   	push   ebp
c000e545:	57                   	push   edi
c000e546:	56                   	push   esi
c000e547:	53                   	push   ebx
c000e548:	83 ec 1c             	sub    esp,0x1c
c000e54b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e54f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e553:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e557:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e55b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e55f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e563:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e567:	74 0f                	je     c000e578 <VCache::write(unsigned long long, int, void*)+0x34>
c000e569:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e56d:	53                   	push   ebx
c000e56e:	e8 f5 fe ff ff       	call   c000e468 <VCache::invalidateReadBuffer()>
c000e573:	58                   	pop    eax
c000e574:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e578:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e57c:	74 66                	je     c000e5e4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e57e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e581:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e585:	99                   	cdq    
c000e586:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e589:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e58c:	89 c6                	mov    esi,eax
c000e58e:	31 ce                	xor    esi,ecx
c000e590:	89 d0                	mov    eax,edx
c000e592:	31 e8                	xor    eax,ebp
c000e594:	09 c6                	or     esi,eax
c000e596:	75 38                	jne    c000e5d0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e598:	83 ff 01             	cmp    edi,0x1
c000e59b:	75 33                	jne    c000e5d0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e59d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5a0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e5a4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5a8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5ae:	0f af f9             	imul   edi,ecx
c000e5b1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e5b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5b9:	40                   	inc    eax
c000e5ba:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5bd:	83 f8 50             	cmp    eax,0x50
c000e5c0:	75 72                	jne    c000e634 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5c2:	83 ec 0c             	sub    esp,0xc
c000e5c5:	53                   	push   ebx
c000e5c6:	e8 ad fe ff ff       	call   c000e478 <VCache::writeWriteBuffer()>
c000e5cb:	83 c4 10             	add    esp,0x10
c000e5ce:	eb 64                	jmp    c000e634 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e5d4:	83 ec 0c             	sub    esp,0xc
c000e5d7:	53                   	push   ebx
c000e5d8:	e8 9b fe ff ff       	call   c000e478 <VCache::writeWriteBuffer()>
c000e5dd:	83 c4 10             	add    esp,0x10
c000e5e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5e4:	83 ff 4f             	cmp    edi,0x4f
c000e5e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5ea:	7f 20                	jg     c000e60c <VCache::write(unsigned long long, int, void*)+0xc8>
c000e5ec:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e5ef:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5f3:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e5f6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5f9:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e5fc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e600:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e606:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e608:	eb 2a                	jmp    c000e634 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e60a:	66 90                	xchg   ax,ax
c000e60c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e610:	8b 10                	mov    edx,DWORD PTR [eax]
c000e612:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e616:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e61a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e61e:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e622:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e626:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e629:	83 c4 1c             	add    esp,0x1c
c000e62c:	5b                   	pop    ebx
c000e62d:	5e                   	pop    esi
c000e62e:	5f                   	pop    edi
c000e62f:	5d                   	pop    ebp
c000e630:	ff e0                	jmp    eax
c000e632:	66 90                	xchg   ax,ax
c000e634:	83 c4 1c             	add    esp,0x1c
c000e637:	31 c0                	xor    eax,eax
c000e639:	5b                   	pop    ebx
c000e63a:	5e                   	pop    esi
c000e63b:	5f                   	pop    edi
c000e63c:	5d                   	pop    ebp
c000e63d:	c3                   	ret    

c000e63e <VCache::read(unsigned long long, int, void*)>:
c000e63e:	55                   	push   ebp
c000e63f:	57                   	push   edi
c000e640:	56                   	push   esi
c000e641:	53                   	push   ebx
c000e642:	83 ec 1c             	sub    esp,0x1c
c000e645:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e649:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e64d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e651:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e655:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e659:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e65d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e661:	74 0d                	je     c000e670 <VCache::read(unsigned long long, int, void*)+0x32>
c000e663:	83 ec 0c             	sub    esp,0xc
c000e666:	57                   	push   edi
c000e667:	e8 0c fe ff ff       	call   c000e478 <VCache::writeWriteBuffer()>
c000e66c:	83 c4 10             	add    esp,0x10
c000e66f:	90                   	nop
c000e670:	83 fd 01             	cmp    ebp,0x1
c000e673:	0f 85 93 00 00 00    	jne    c000e70c <VCache::read(unsigned long long, int, void*)+0xce>
c000e679:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e67c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e683:	89 04 24             	mov    DWORD PTR [esp],eax
c000e686:	0f 85 80 00 00 00    	jne    c000e70c <VCache::read(unsigned long long, int, void*)+0xce>
c000e68c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e68f:	89 cd                	mov    ebp,ecx
c000e691:	f7 dd                	neg    ebp
c000e693:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e697:	89 e8                	mov    eax,ebp
c000e699:	21 dd                	and    ebp,ebx
c000e69b:	c1 f8 1f             	sar    eax,0x1f
c000e69e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6a2:	89 e8                	mov    eax,ebp
c000e6a4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e6a8:	21 f5                	and    ebp,esi
c000e6aa:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e6ae:	89 ea                	mov    edx,ebp
c000e6b0:	74 2e                	je     c000e6e0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6b2:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e6b5:	75 29                	jne    c000e6e0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6b7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e6ba:	75 24                	jne    c000e6e0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6bc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6bf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6c5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6c8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6cb:	21 f3                	and    ebx,esi
c000e6cd:	0f af d9             	imul   ebx,ecx
c000e6d0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6d3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6d7:	89 de                	mov    esi,ebx
c000e6d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6db:	31 c0                	xor    eax,eax
c000e6dd:	eb 61                	jmp    c000e740 <VCache::read(unsigned long long, int, void*)+0x102>
c000e6df:	90                   	nop
c000e6e0:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e6e4:	83 ec 0c             	sub    esp,0xc
c000e6e7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e6ea:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e6ee:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e6f1:	8b 36                	mov    esi,DWORD PTR [esi]
c000e6f3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e6f6:	51                   	push   ecx
c000e6f7:	52                   	push   edx
c000e6f8:	50                   	push   eax
c000e6f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6fd:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e700:	83 c4 20             	add    esp,0x20
c000e703:	85 c0                	test   eax,eax
c000e705:	75 39                	jne    c000e740 <VCache::read(unsigned long long, int, void*)+0x102>
c000e707:	eb b3                	jmp    c000e6bc <VCache::read(unsigned long long, int, void*)+0x7e>
c000e709:	8d 76 00             	lea    esi,[esi+0x0]
c000e70c:	83 ec 0c             	sub    esp,0xc
c000e70f:	57                   	push   edi
c000e710:	e8 53 fd ff ff       	call   c000e468 <VCache::invalidateReadBuffer()>
c000e715:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e718:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e71c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e71e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e722:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e726:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e72a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e72e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e732:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e735:	83 c4 2c             	add    esp,0x2c
c000e738:	5b                   	pop    ebx
c000e739:	5e                   	pop    esi
c000e73a:	5f                   	pop    edi
c000e73b:	5d                   	pop    ebp
c000e73c:	ff e0                	jmp    eax
c000e73e:	66 90                	xchg   ax,ax
c000e740:	83 c4 1c             	add    esp,0x1c
c000e743:	5b                   	pop    ebx
c000e744:	5e                   	pop    esi
c000e745:	5f                   	pop    edi
c000e746:	5d                   	pop    ebp
c000e747:	c3                   	ret    

c000e748 <Video::putrect(int, int, int, int, unsigned int)>:
c000e748:	55                   	push   ebp
c000e749:	57                   	push   edi
c000e74a:	56                   	push   esi
c000e74b:	53                   	push   ebx
c000e74c:	83 ec 1c             	sub    esp,0x1c
c000e74f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e753:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e757:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e75b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e75f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e763:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e767:	01 df                	add    edi,ebx
c000e769:	39 fb                	cmp    ebx,edi
c000e76b:	7d 1f                	jge    c000e78c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e76d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e771:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e775:	7d 12                	jge    c000e789 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e777:	8b 16                	mov    edx,DWORD PTR [esi]
c000e779:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e77d:	53                   	push   ebx
c000e77e:	55                   	push   ebp
c000e77f:	45                   	inc    ebp
c000e780:	56                   	push   esi
c000e781:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e784:	83 c4 10             	add    esp,0x10
c000e787:	eb e8                	jmp    c000e771 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e789:	43                   	inc    ebx
c000e78a:	eb dd                	jmp    c000e769 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e78c:	83 c4 1c             	add    esp,0x1c
c000e78f:	5b                   	pop    ebx
c000e790:	5e                   	pop    esi
c000e791:	5f                   	pop    edi
c000e792:	5d                   	pop    ebp
c000e793:	c3                   	ret    

c000e794 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e794:	55                   	push   ebp
c000e795:	57                   	push   edi
c000e796:	31 ff                	xor    edi,edi
c000e798:	56                   	push   esi
c000e799:	53                   	push   ebx
c000e79a:	83 ec 1c             	sub    esp,0x1c
c000e79d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7a1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7a5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e7ac:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e7b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e7b9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e7bd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7c0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7c4:	01 f9                	add    ecx,edi
c000e7c6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7ca:	7d 2f                	jge    c000e7fb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7cc:	31 f6                	xor    esi,esi
c000e7ce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7d2:	01 f2                	add    edx,esi
c000e7d4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e7d8:	7d 1a                	jge    c000e7f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e7da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7dd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e7e0:	46                   	inc    esi
c000e7e1:	51                   	push   ecx
c000e7e2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e7e6:	52                   	push   edx
c000e7e7:	55                   	push   ebp
c000e7e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7f2:	eb da                	jmp    c000e7ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e7f4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e7f8:	47                   	inc    edi
c000e7f9:	eb c5                	jmp    c000e7c0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e7fb:	83 c4 1c             	add    esp,0x1c
c000e7fe:	5b                   	pop    ebx
c000e7ff:	5e                   	pop    esi
c000e800:	5f                   	pop    edi
c000e801:	5d                   	pop    ebp
c000e802:	c3                   	ret    
c000e803:	90                   	nop

c000e804 <Video::blit(unsigned int*, int, int, int, int)>:
c000e804:	55                   	push   ebp
c000e805:	ba 00 00 00 00       	mov    edx,0x0
c000e80a:	57                   	push   edi
c000e80b:	56                   	push   esi
c000e80c:	53                   	push   ebx
c000e80d:	83 ec 1c             	sub    esp,0x1c
c000e810:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e814:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e818:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e81c:	85 c0                	test   eax,eax
c000e81e:	0f 49 d0             	cmovns edx,eax
c000e821:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e828:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e82c:	89 eb                	mov    ebx,ebp
c000e82e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e832:	01 ea                	add    edx,ebp
c000e834:	39 da                	cmp    edx,ebx
c000e836:	7e 54                	jle    c000e88c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e838:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e83e:	7c 4c                	jl     c000e88c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e840:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e848:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e84c:	01 c1                	add    ecx,eax
c000e84e:	39 f9                	cmp    ecx,edi
c000e850:	7e 2f                	jle    c000e881 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e852:	83 c2 04             	add    edx,0x4
c000e855:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e85b:	7c 21                	jl     c000e87e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e85d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e861:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e863:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e866:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e86a:	55                   	push   ebp
c000e86b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e86f:	56                   	push   esi
c000e870:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e873:	83 c4 10             	add    esp,0x10
c000e876:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e87a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e87e:	47                   	inc    edi
c000e87f:	eb c7                	jmp    c000e848 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e881:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e885:	43                   	inc    ebx
c000e886:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e88a:	eb a2                	jmp    c000e82e <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e88c:	83 c4 1c             	add    esp,0x1c
c000e88f:	5b                   	pop    ebx
c000e890:	5e                   	pop    esi
c000e891:	5f                   	pop    edi
c000e892:	5d                   	pop    ebp
c000e893:	c3                   	ret    

c000e894 <Video::clearScreen(unsigned int)>:
c000e894:	57                   	push   edi
c000e895:	56                   	push   esi
c000e896:	53                   	push   ebx
c000e897:	31 db                	xor    ebx,ebx
c000e899:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e89d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8a3:	7e 1f                	jle    c000e8c4 <Video::clearScreen(unsigned int)+0x30>
c000e8a5:	31 ff                	xor    edi,edi
c000e8a7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8ad:	7e 12                	jle    c000e8c1 <Video::clearScreen(unsigned int)+0x2d>
c000e8af:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b5:	53                   	push   ebx
c000e8b6:	57                   	push   edi
c000e8b7:	47                   	inc    edi
c000e8b8:	56                   	push   esi
c000e8b9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8bc:	83 c4 10             	add    esp,0x10
c000e8bf:	eb e6                	jmp    c000e8a7 <Video::clearScreen(unsigned int)+0x13>
c000e8c1:	43                   	inc    ebx
c000e8c2:	eb d9                	jmp    c000e89d <Video::clearScreen(unsigned int)+0x9>
c000e8c4:	5b                   	pop    ebx
c000e8c5:	5e                   	pop    esi
c000e8c6:	5f                   	pop    edi
c000e8c7:	c3                   	ret    

c000e8c8 <Video::putpixel(int, int, unsigned int)>:
c000e8c8:	c7 44 24 04 08 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a08
c000e8d0:	e9 ec 29 00 00       	jmp    c00112c1 <KePanic(char const*)>
c000e8d5:	90                   	nop

c000e8d6 <Video::readPixelApprox(int, int)>:
c000e8d6:	83 ec 18             	sub    esp,0x18
c000e8d9:	68 29 1a 02 c0       	push   0xc0021a29
c000e8de:	e8 de 29 00 00       	call   c00112c1 <KePanic(char const*)>
c000e8e3:	31 c0                	xor    eax,eax
c000e8e5:	83 c4 1c             	add    esp,0x1c
c000e8e8:	c3                   	ret    
c000e8e9:	90                   	nop

c000e8ea <Video::Video(char const*)>:
c000e8ea:	83 ec 0c             	sub    esp,0xc
c000e8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f1:	83 ec 08             	sub    esp,0x8
c000e8f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8f8:	50                   	push   eax
c000e8f9:	e8 be df ff ff       	call   c000c8bc <Device::Device(char const*)>
c000e8fe:	83 c4 10             	add    esp,0x10
c000e901:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000e906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90a:	89 10                	mov    DWORD PTR [eax],edx
c000e90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e910:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e91a:	90                   	nop
c000e91b:	83 c4 0c             	add    esp,0xc
c000e91e:	c3                   	ret    
c000e91f:	90                   	nop

c000e920 <Video::~Video()>:
c000e920:	83 ec 0c             	sub    esp,0xc
c000e923:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000e928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e92c:	89 10                	mov    DWORD PTR [eax],edx
c000e92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e932:	83 ec 0c             	sub    esp,0xc
c000e935:	50                   	push   eax
c000e936:	e8 eb dc ff ff       	call   c000c626 <Device::~Device()>
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	90                   	nop
c000e93f:	83 c4 0c             	add    esp,0xc
c000e942:	c3                   	ret    
c000e943:	90                   	nop

c000e944 <Video::~Video()>:
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	83 ec 0c             	sub    esp,0xc
c000e94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e94e:	e8 cd ff ff ff       	call   c000e920 <Video::~Video()>
c000e953:	83 c4 10             	add    esp,0x10
c000e956:	83 ec 08             	sub    esp,0x8
c000e959:	68 64 01 00 00       	push   0x164
c000e95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e962:	e8 a5 be ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e967:	83 c4 10             	add    esp,0x10
c000e96a:	83 c4 0c             	add    esp,0xc
c000e96d:	c3                   	ret    

c000e96e <Video::isMonochrome()>:
c000e96e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e972:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e978:	c3                   	ret    
c000e979:	90                   	nop

c000e97a <Video::getWidth()>:
c000e97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e984:	c3                   	ret    
c000e985:	90                   	nop

c000e986 <Video::getHeight()>:
c000e986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e98a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e990:	c3                   	ret    
c000e991:	90                   	nop

c000e992 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e992:	55                   	push   ebp
c000e993:	57                   	push   edi
c000e994:	56                   	push   esi
c000e995:	53                   	push   ebx
c000e996:	83 ec 2c             	sub    esp,0x2c
c000e999:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e99d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9a1:	83 f8 01             	cmp    eax,0x1
c000e9a4:	19 c9                	sbb    ecx,ecx
c000e9a6:	31 db                	xor    ebx,ebx
c000e9a8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9ac:	89 ce                	mov    esi,ecx
c000e9ae:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9b6:	f7 d6                	not    esi
c000e9b8:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e9be:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e9c2:	01 d8                	add    eax,ebx
c000e9c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9c8:	57                   	push   edi
c000e9c9:	e8 b8 ff ff ff       	call   c000e986 <Video::getHeight()>
c000e9ce:	59                   	pop    ecx
c000e9cf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9d3:	7e 70                	jle    c000ea45 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9d9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e9dd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e9e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9e8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e9ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9f3:	89 e8                	mov    eax,ebp
c000e9f5:	83 c0 20             	add    eax,0x20
c000e9f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9fc:	57                   	push   edi
c000e9fd:	e8 78 ff ff ff       	call   c000e97a <Video::getWidth()>
c000ea02:	5a                   	pop    edx
c000ea03:	39 c5                	cmp    ebp,eax
c000ea05:	7d 34                	jge    c000ea3b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea07:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea0c:	74 05                	je     c000ea13 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea0e:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea10:	56                   	push   esi
c000ea11:	eb 0d                	jmp    c000ea20 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea13:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea18:	74 12                	je     c000ea2c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea1a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea20:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea24:	55                   	push   ebp
c000ea25:	57                   	push   edi
c000ea26:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea29:	83 c4 10             	add    esp,0x10
c000ea2c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea30:	45                   	inc    ebp
c000ea31:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea35:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ea39:	75 c1                	jne    c000e9fc <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea3b:	43                   	inc    ebx
c000ea3c:	83 fb 20             	cmp    ebx,0x20
c000ea3f:	0f 85 79 ff ff ff    	jne    c000e9be <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea45:	83 c4 2c             	add    esp,0x2c
c000ea48:	5b                   	pop    ebx
c000ea49:	5e                   	pop    esi
c000ea4a:	5f                   	pop    edi
c000ea4b:	5d                   	pop    ebp
c000ea4c:	c3                   	ret    
c000ea4d:	90                   	nop

c000ea4e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea4e:	55                   	push   ebp
c000ea4f:	57                   	push   edi
c000ea50:	56                   	push   esi
c000ea51:	53                   	push   ebx
c000ea52:	83 ec 28             	sub    esp,0x28
c000ea55:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea59:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ea5d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea61:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ea65:	c1 e7 08             	shl    edi,0x8
c000ea68:	01 c7                	add    edi,eax
c000ea6a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ea6e:	c1 e6 08             	shl    esi,0x8
c000ea71:	01 f0                	add    eax,esi
c000ea73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea7b:	0f af c7             	imul   eax,edi
c000ea7e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ea85:	50                   	push   eax
c000ea86:	e8 48 90 ff ff       	call   c0007ad3 <malloc>
c000ea8b:	83 c4 10             	add    esp,0x10
c000ea8e:	85 c0                	test   eax,eax
c000ea90:	89 c5                	mov    ebp,eax
c000ea92:	75 10                	jne    c000eaa4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea94:	83 ec 0c             	sub    esp,0xc
c000ea97:	68 54 1a 02 c0       	push   0xc0021a54
c000ea9c:	e8 20 28 00 00       	call   c00112c1 <KePanic(char const*)>
c000eaa1:	83 c4 10             	add    esp,0x10
c000eaa4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eaa8:	ba 12 00 00 00       	mov    edx,0x12
c000eaad:	85 c0                	test   eax,eax
c000eaaf:	74 11                	je     c000eac2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eab1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eab5:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eab9:	c1 fa 03             	sar    edx,0x3
c000eabc:	0f af d1             	imul   edx,ecx
c000eabf:	83 c2 12             	add    edx,0x12
c000eac2:	85 ff                	test   edi,edi
c000eac4:	74 06                	je     c000eacc <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eac6:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eaca:	75 12                	jne    c000eade <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eacc:	83 ec 0c             	sub    esp,0xc
c000eacf:	68 64 1a 02 c0       	push   0xc0021a64
c000ead4:	e8 31 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ead9:	e9 b8 00 00 00       	jmp    c000eb96 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eade:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eae2:	83 f9 02             	cmp    ecx,0x2
c000eae5:	0f 85 96 00 00 00    	jne    c000eb81 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eaeb:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eaf0:	75 0e                	jne    c000eb00 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eaf2:	85 c0                	test   eax,eax
c000eaf4:	75 0a                	jne    c000eb00 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eaf6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eaf9:	83 e8 18             	sub    eax,0x18
c000eafc:	a8 f7                	test   al,0xf7
c000eafe:	74 0a                	je     c000eb0a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	68 79 1a 02 c0       	push   0xc0021a79
c000eb08:	eb 7f                	jmp    c000eb89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb12:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb1a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000eb1e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb22:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb2a:	75 0c                	jne    c000eb38 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb2c:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000eb31:	c1 e1 18             	shl    ecx,0x18
c000eb34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000eb38:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb3d:	46                   	inc    esi
c000eb3e:	89 c8                	mov    eax,ecx
c000eb40:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb45:	c1 e0 10             	shl    eax,0x10
c000eb48:	c1 e1 08             	shl    ecx,0x8
c000eb4b:	09 c1                	or     ecx,eax
c000eb4d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb51:	09 c1                	or     ecx,eax
c000eb53:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb57:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000eb5b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb5f:	c1 f8 03             	sar    eax,0x3
c000eb62:	01 c2                	add    edx,eax
c000eb64:	89 f0                	mov    eax,esi
c000eb66:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb6a:	39 c7                	cmp    edi,eax
c000eb6c:	7f b0                	jg     c000eb1e <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb6e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb76:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb79:	7e 22                	jle    c000eb9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb7b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000eb7f:	eb 99                	jmp    c000eb1a <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb81:	50                   	push   eax
c000eb82:	50                   	push   eax
c000eb83:	51                   	push   ecx
c000eb84:	68 87 1a 02 c0       	push   0xc0021a87
c000eb89:	e8 7c bd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eb8e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eb91:	e8 4d 8f ff ff       	call   c0007ae3 <free>
c000eb96:	83 c4 10             	add    esp,0x10
c000eb99:	31 ed                	xor    ebp,ebp
c000eb9b:	eb 0f                	jmp    c000ebac <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eb9d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eba1:	89 38                	mov    DWORD PTR [eax],edi
c000eba3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eba7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ebaa:	89 38                	mov    DWORD PTR [eax],edi
c000ebac:	83 c4 1c             	add    esp,0x1c
c000ebaf:	89 e8                	mov    eax,ebp
c000ebb1:	5b                   	pop    ebx
c000ebb2:	5e                   	pop    esi
c000ebb3:	5f                   	pop    edi
c000ebb4:	5d                   	pop    ebp
c000ebb5:	c3                   	ret    

c000ebb6 <Video::putTGA(int, int, unsigned char*, int)>:
c000ebb6:	55                   	push   ebp
c000ebb7:	57                   	push   edi
c000ebb8:	56                   	push   esi
c000ebb9:	53                   	push   ebx
c000ebba:	83 ec 28             	sub    esp,0x28
c000ebbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebc1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ebc5:	50                   	push   eax
c000ebc6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebca:	50                   	push   eax
c000ebcb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebcf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebd3:	57                   	push   edi
c000ebd4:	e8 75 fe ff ff       	call   c000ea4e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebe0:	85 c0                	test   eax,eax
c000ebe2:	74 35                	je     c000ec19 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebe4:	89 c6                	mov    esi,eax
c000ebe6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebea:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ebee:	39 d8                	cmp    eax,ebx
c000ebf0:	7e 27                	jle    c000ec19 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebf2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ebf6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ebfa:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ebfe:	39 e9                	cmp    ecx,ebp
c000ec00:	7e 14                	jle    c000ec16 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec02:	83 c6 04             	add    esi,0x4
c000ec05:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ec07:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ec0a:	53                   	push   ebx
c000ec0b:	55                   	push   ebp
c000ec0c:	45                   	inc    ebp
c000ec0d:	57                   	push   edi
c000ec0e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ec11:	83 c4 10             	add    esp,0x10
c000ec14:	eb e0                	jmp    c000ebf6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec16:	43                   	inc    ebx
c000ec17:	eb cd                	jmp    c000ebe6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec19:	83 c4 1c             	add    esp,0x1c
c000ec1c:	5b                   	pop    ebx
c000ec1d:	5e                   	pop    esi
c000ec1e:	5f                   	pop    edi
c000ec1f:	5d                   	pop    ebp
c000ec20:	c3                   	ret    
c000ec21:	66 90                	xchg   ax,ax
c000ec23:	90                   	nop

c000ec24 <ACPI::close(int, int, void*)>:
c000ec24:	83 ec 1c             	sub    esp,0x1c
c000ec27:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec2f:	74 0b                	je     c000ec3c <ACPI::close(int, int, void*)+0x18>
c000ec31:	b8 00 00 00 00       	mov    eax,0x0
c000ec36:	e9 99 00 00 00       	jmp    c000ecd4 <ACPI::close(int, int, void*)+0xb0>
c000ec3b:	90                   	nop
c000ec3c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec41:	75 29                	jne    c000ec6c <ACPI::close(int, int, void*)+0x48>
c000ec43:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec48:	85 c0                	test   eax,eax
c000ec4a:	74 08                	je     c000ec54 <ACPI::close(int, int, void*)+0x30>
c000ec4c:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec51:	ff d0                	call   eax
c000ec53:	90                   	nop
c000ec54:	83 ec 0c             	sub    esp,0xc
c000ec57:	68 e8 1a 02 c0       	push   0xc0021ae8
c000ec5c:	e8 60 26 00 00       	call   c00112c1 <KePanic(char const*)>
c000ec61:	83 c4 10             	add    esp,0x10
c000ec64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec69:	eb 69                	jmp    c000ecd4 <ACPI::close(int, int, void*)+0xb0>
c000ec6b:	90                   	nop
c000ec6c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec71:	75 59                	jne    c000eccc <ACPI::close(int, int, void*)+0xa8>
c000ec73:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec78:	85 c0                	test   eax,eax
c000ec7a:	74 08                	je     c000ec84 <ACPI::close(int, int, void*)+0x60>
c000ec7c:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec81:	ff d0                	call   eax
c000ec83:	90                   	nop
c000ec84:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ec89:	8d 76 00             	lea    esi,[esi+0x0]
c000ec8c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec91:	83 e0 02             	and    eax,0x2
c000ec94:	74 1e                	je     c000ecb4 <ACPI::close(int, int, void*)+0x90>
c000ec96:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ec9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eca1:	89 c2                	mov    edx,eax
c000eca3:	ec                   	in     al,dx
c000eca4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eca8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ecac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecb0:	eb da                	jmp    c000ec8c <ACPI::close(int, int, void*)+0x68>
c000ecb2:	66 90                	xchg   ax,ax
c000ecb4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ecbb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ecc0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ecc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecc8:	ee                   	out    dx,al
c000ecc9:	8d 76 00             	lea    esi,[esi+0x0]
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd4:	83 c4 1c             	add    esp,0x1c
c000ecd7:	c3                   	ret    

c000ecd8 <findRSDP()>:
c000ecd8:	83 ec 1c             	sub    esp,0x1c
c000ecdb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ece0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ece6:	83 e0 04             	and    eax,0x4
c000ece9:	0f b6 c0             	movzx  eax,al
c000ecec:	85 c0                	test   eax,eax
c000ecee:	75 08                	jne    c000ecf8 <findRSDP()+0x20>
c000ecf0:	b8 00 00 00 00       	mov    eax,0x0
c000ecf5:	eb 75                	jmp    c000ed6c <findRSDP()+0x94>
c000ecf7:	90                   	nop
c000ecf8:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ecfd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ed02:	7f 1c                	jg     c000ed20 <findRSDP()+0x48>
c000ed04:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed09:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed0f:	83 e2 fb             	and    edx,0xfffffffb
c000ed12:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed18:	b8 00 00 00 00       	mov    eax,0x0
c000ed1d:	eb 4d                	jmp    c000ed6c <findRSDP()+0x94>
c000ed1f:	90                   	nop
c000ed20:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed28:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed30:	77 32                	ja     c000ed64 <findRSDP()+0x8c>
c000ed32:	83 ec 04             	sub    esp,0x4
c000ed35:	6a 08                	push   0x8
c000ed37:	68 83 1b 02 c0       	push   0xc0021b83
c000ed3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed40:	e8 3b 16 ff ff       	call   c0000380 <memcmp>
c000ed45:	83 c4 10             	add    esp,0x10
c000ed48:	85 c0                	test   eax,eax
c000ed4a:	0f 94 c0             	sete   al
c000ed4d:	0f b6 c0             	movzx  eax,al
c000ed50:	85 c0                	test   eax,eax
c000ed52:	74 08                	je     c000ed5c <findRSDP()+0x84>
c000ed54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed58:	eb 12                	jmp    c000ed6c <findRSDP()+0x94>
c000ed5a:	66 90                	xchg   ax,ax
c000ed5c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed61:	eb c5                	jmp    c000ed28 <findRSDP()+0x50>
c000ed63:	90                   	nop
c000ed64:	b8 00 00 00 00       	mov    eax,0x0
c000ed69:	8d 76 00             	lea    esi,[esi+0x0]
c000ed6c:	83 c4 1c             	add    esp,0x1c
c000ed6f:	c3                   	ret    

c000ed70 <loadACPITables(unsigned char*)>:
c000ed70:	57                   	push   edi
c000ed71:	56                   	push   esi
c000ed72:	53                   	push   ebx
c000ed73:	83 ec 60             	sub    esp,0x60
c000ed76:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed7b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed81:	83 e0 04             	and    eax,0x4
c000ed84:	0f b6 c0             	movzx  eax,al
c000ed87:	85 c0                	test   eax,eax
c000ed89:	0f 84 41 02 00 00    	je     c000efd0 <loadACPITables(unsigned char*)+0x260>
c000ed8f:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed94:	0f b6 c0             	movzx  eax,al
c000ed97:	85 c0                	test   eax,eax
c000ed99:	74 79                	je     c000ee14 <loadACPITables(unsigned char*)+0xa4>
c000ed9b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed9f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000eda3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eda7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edaa:	83 e8 24             	sub    eax,0x24
c000edad:	c1 e8 03             	shr    eax,0x3
c000edb0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edb4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000edbc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000edc0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000edc4:	0f 8d ba 00 00 00    	jge    c000ee84 <loadACPITables(unsigned char*)+0x114>
c000edca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edce:	83 c0 24             	add    eax,0x24
c000edd1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000edd5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000edd9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eddd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ede1:	c1 e0 03             	shl    eax,0x3
c000ede4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ede8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edef:	8b 00                	mov    eax,DWORD PTR [eax]
c000edf1:	89 c1                	mov    ecx,eax
c000edf3:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000edf8:	8d 50 01             	lea    edx,[eax+0x1]
c000edfb:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee01:	89 ca                	mov    edx,ecx
c000ee03:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee0a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee0f:	eb ab                	jmp    c000edbc <loadACPITables(unsigned char*)+0x4c>
c000ee11:	8d 76 00             	lea    esi,[esi+0x0]
c000ee14:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee18:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee23:	83 e8 24             	sub    eax,0x24
c000ee26:	c1 e8 02             	shr    eax,0x2
c000ee29:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee2d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee35:	8d 76 00             	lea    esi,[esi+0x0]
c000ee38:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee3c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee40:	7d 42                	jge    c000ee84 <loadACPITables(unsigned char*)+0x114>
c000ee42:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee46:	83 c0 24             	add    eax,0x24
c000ee49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee51:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee55:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee59:	c1 e0 02             	shl    eax,0x2
c000ee5c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee64:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee66:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee6b:	8d 50 01             	lea    edx,[eax+0x1]
c000ee6e:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee74:	89 ca                	mov    edx,ecx
c000ee76:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee7d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee82:	eb b4                	jmp    c000ee38 <loadACPITables(unsigned char*)+0xc8>
c000ee84:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee8c:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee91:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee95:	0f 8d 39 01 00 00    	jge    c000efd4 <loadACPITables(unsigned char*)+0x264>
c000ee9b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee9f:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eea6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eeaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eeb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeb6:	25 ff 0f 00 00       	and    eax,0xfff
c000eebb:	89 c6                	mov    esi,eax
c000eebd:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eec3:	83 ec 0c             	sub    esp,0xc
c000eec6:	6a 01                	push   0x1
c000eec8:	e8 28 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000eecd:	83 c4 10             	add    esp,0x10
c000eed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eed4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eeda:	83 ec 0c             	sub    esp,0xc
c000eedd:	6a 01                	push   0x1
c000eedf:	6a 01                	push   0x1
c000eee1:	50                   	push   eax
c000eee2:	52                   	push   edx
c000eee3:	53                   	push   ebx
c000eee4:	e8 1f b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eee9:	83 c4 20             	add    esp,0x20
c000eeec:	09 f0                	or     eax,esi
c000eeee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eef2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eef6:	c1 e0 03             	shl    eax,0x3
c000eef9:	05 20 89 02 c0       	add    eax,0xc0028920
c000eefe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef0a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef26:	89 c6                	mov    esi,eax
c000ef28:	89 d7                	mov    edi,edx
c000ef2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef2c:	89 c8                	mov    eax,ecx
c000ef2e:	89 fa                	mov    edx,edi
c000ef30:	89 f3                	mov    ebx,esi
c000ef32:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef36:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef4d:	05 00 10 00 00       	add    eax,0x1000
c000ef52:	c1 e8 0c             	shr    eax,0xc
c000ef55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef65:	25 ff 0f 00 00       	and    eax,0xfff
c000ef6a:	89 c6                	mov    esi,eax
c000ef6c:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef72:	83 ec 0c             	sub    esp,0xc
c000ef75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef79:	e8 77 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef7e:	83 c4 10             	add    esp,0x10
c000ef81:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef85:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef8b:	83 ec 0c             	sub    esp,0xc
c000ef8e:	6a 01                	push   0x1
c000ef90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef94:	50                   	push   eax
c000ef95:	52                   	push   edx
c000ef96:	53                   	push   ebx
c000ef97:	e8 6c af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef9c:	83 c4 20             	add    esp,0x20
c000ef9f:	09 f0                	or     eax,esi
c000efa1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efa9:	83 ec 0c             	sub    esp,0xc
c000efac:	50                   	push   eax
c000efad:	e8 57 a9 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000efb2:	83 c4 10             	add    esp,0x10
c000efb5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efb9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000efbd:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000efc4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000efc9:	e9 be fe ff ff       	jmp    c000ee8c <loadACPITables(unsigned char*)+0x11c>
c000efce:	66 90                	xchg   ax,ax
c000efd0:	90                   	nop
c000efd1:	8d 76 00             	lea    esi,[esi+0x0]
c000efd4:	83 c4 60             	add    esp,0x60
c000efd7:	5b                   	pop    ebx
c000efd8:	5e                   	pop    esi
c000efd9:	5f                   	pop    edi
c000efda:	c3                   	ret    
c000efdb:	90                   	nop

c000efdc <findRSDT(unsigned char*)>:
c000efdc:	57                   	push   edi
c000efdd:	56                   	push   esi
c000efde:	53                   	push   ebx
c000efdf:	83 ec 50             	sub    esp,0x50
c000efe2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efe7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efed:	83 e0 04             	and    eax,0x4
c000eff0:	0f b6 c0             	movzx  eax,al
c000eff3:	85 c0                	test   eax,eax
c000eff5:	75 0d                	jne    c000f004 <findRSDT(unsigned char*)+0x28>
c000eff7:	b8 00 00 00 00       	mov    eax,0x0
c000effc:	e9 2b 01 00 00       	jmp    c000f12c <findRSDT(unsigned char*)+0x150>
c000f001:	8d 76 00             	lea    esi,[esi+0x0]
c000f004:	89 e0                	mov    eax,esp
c000f006:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f00a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f00e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f012:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f01a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f01e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f022:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f026:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f02a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f02e:	89 c6                	mov    esi,eax
c000f030:	89 d7                	mov    edi,edx
c000f032:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f034:	89 c8                	mov    eax,ecx
c000f036:	89 fa                	mov    edx,edi
c000f038:	89 f3                	mov    ebx,esi
c000f03a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f03e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f042:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f046:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f04a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f04e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f05a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f05e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f066:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f06a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f06e:	25 ff 0f 00 00       	and    eax,0xfff
c000f073:	89 c6                	mov    esi,eax
c000f075:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f07b:	83 ec 0c             	sub    esp,0xc
c000f07e:	6a 02                	push   0x2
c000f080:	e8 70 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f08c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f092:	83 ec 0c             	sub    esp,0xc
c000f095:	6a 01                	push   0x1
c000f097:	6a 02                	push   0x2
c000f099:	50                   	push   eax
c000f09a:	52                   	push   edx
c000f09b:	53                   	push   ebx
c000f09c:	e8 67 ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0a1:	83 c4 20             	add    esp,0x20
c000f0a4:	09 f0                	or     eax,esi
c000f0a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0ae:	25 ff 0f 00 00       	and    eax,0xfff
c000f0b3:	89 c6                	mov    esi,eax
c000f0b5:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0bb:	83 ec 0c             	sub    esp,0xc
c000f0be:	6a 02                	push   0x2
c000f0c0:	e8 30 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0c5:	83 c4 10             	add    esp,0x10
c000f0c8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0cc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0d2:	83 ec 0c             	sub    esp,0xc
c000f0d5:	6a 01                	push   0x1
c000f0d7:	6a 02                	push   0x2
c000f0d9:	50                   	push   eax
c000f0da:	52                   	push   edx
c000f0db:	53                   	push   ebx
c000f0dc:	e8 27 ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0e1:	83 c4 20             	add    esp,0x20
c000f0e4:	09 f0                	or     eax,esi
c000f0e6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0ea:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0ef:	85 c0                	test   eax,eax
c000f0f1:	75 11                	jne    c000f104 <findRSDT(unsigned char*)+0x128>
c000f0f3:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f0fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0fe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f102:	eb 24                	jmp    c000f128 <findRSDT(unsigned char*)+0x14c>
c000f104:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f109:	83 f8 02             	cmp    eax,0x2
c000f10c:	75 12                	jne    c000f120 <findRSDT(unsigned char*)+0x144>
c000f10e:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f115:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f119:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f11d:	eb 09                	jmp    c000f128 <findRSDT(unsigned char*)+0x14c>
c000f11f:	90                   	nop
c000f120:	b8 00 00 00 00       	mov    eax,0x0
c000f125:	eb 05                	jmp    c000f12c <findRSDT(unsigned char*)+0x150>
c000f127:	90                   	nop
c000f128:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f12c:	83 c4 50             	add    esp,0x50
c000f12f:	5b                   	pop    ebx
c000f130:	5e                   	pop    esi
c000f131:	5f                   	pop    edi
c000f132:	c3                   	ret    
c000f133:	90                   	nop

c000f134 <findDataTable(unsigned char*, char*)>:
c000f134:	83 ec 1c             	sub    esp,0x1c
c000f137:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f13c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f142:	83 e0 04             	and    eax,0x4
c000f145:	0f b6 c0             	movzx  eax,al
c000f148:	85 c0                	test   eax,eax
c000f14a:	75 08                	jne    c000f154 <findDataTable(unsigned char*, char*)+0x20>
c000f14c:	b8 00 00 00 00       	mov    eax,0x0
c000f151:	eb 5d                	jmp    c000f1b0 <findDataTable(unsigned char*, char*)+0x7c>
c000f153:	90                   	nop
c000f154:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f15c:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f161:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f165:	7d 41                	jge    c000f1a8 <findDataTable(unsigned char*, char*)+0x74>
c000f167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f16b:	c1 e0 03             	shl    eax,0x3
c000f16e:	05 20 89 02 c0       	add    eax,0xc0028920
c000f173:	83 ec 04             	sub    esp,0x4
c000f176:	6a 04                	push   0x4
c000f178:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f17c:	50                   	push   eax
c000f17d:	e8 fe 11 ff ff       	call   c0000380 <memcmp>
c000f182:	83 c4 10             	add    esp,0x10
c000f185:	85 c0                	test   eax,eax
c000f187:	0f 94 c0             	sete   al
c000f18a:	0f b6 c0             	movzx  eax,al
c000f18d:	85 c0                	test   eax,eax
c000f18f:	74 0f                	je     c000f1a0 <findDataTable(unsigned char*, char*)+0x6c>
c000f191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f195:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f19c:	eb 12                	jmp    c000f1b0 <findDataTable(unsigned char*, char*)+0x7c>
c000f19e:	66 90                	xchg   ax,ax
c000f1a0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1a5:	eb b5                	jmp    c000f15c <findDataTable(unsigned char*, char*)+0x28>
c000f1a7:	90                   	nop
c000f1a8:	b8 00 00 00 00       	mov    eax,0x0
c000f1ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f1b0:	83 c4 1c             	add    esp,0x1c
c000f1b3:	c3                   	ret    

c000f1b4 <scanMADT()>:
c000f1b4:	53                   	push   ebx
c000f1b5:	83 ec 38             	sub    esp,0x38
c000f1b8:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f1bd:	25 00 04 00 00       	and    eax,0x400
c000f1c2:	74 14                	je     c000f1d8 <scanMADT()+0x24>
c000f1c4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1cf:	83 e2 fb             	and    edx,0xfffffffb
c000f1d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1d8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1dd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1e3:	83 e0 04             	and    eax,0x4
c000f1e6:	0f b6 c0             	movzx  eax,al
c000f1e9:	85 c0                	test   eax,eax
c000f1eb:	0f 84 6b 04 00 00    	je     c000f65c <scanMADT()+0x4a8>
c000f1f1:	e8 e2 fa ff ff       	call   c000ecd8 <findRSDP()>
c000f1f6:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f1fb:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f200:	85 c0                	test   eax,eax
c000f202:	75 1c                	jne    c000f220 <scanMADT()+0x6c>
c000f204:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f209:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f20f:	83 e2 fb             	and    edx,0xfffffffb
c000f212:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f218:	e9 47 04 00 00       	jmp    c000f664 <scanMADT()+0x4b0>
c000f21d:	8d 76 00             	lea    esi,[esi+0x0]
c000f220:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f225:	83 ec 0c             	sub    esp,0xc
c000f228:	50                   	push   eax
c000f229:	e8 ae fd ff ff       	call   c000efdc <findRSDT(unsigned char*)>
c000f22e:	83 c4 10             	add    esp,0x10
c000f231:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f236:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f23b:	85 c0                	test   eax,eax
c000f23d:	75 19                	jne    c000f258 <scanMADT()+0xa4>
c000f23f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f244:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f24a:	83 e2 fb             	and    edx,0xfffffffb
c000f24d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f253:	e9 0c 04 00 00       	jmp    c000f664 <scanMADT()+0x4b0>
c000f258:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f25d:	83 ec 0c             	sub    esp,0xc
c000f260:	50                   	push   eax
c000f261:	e8 0a fb ff ff       	call   c000ed70 <loadACPITables(unsigned char*)>
c000f266:	83 c4 10             	add    esp,0x10
c000f269:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f26e:	83 ec 08             	sub    esp,0x8
c000f271:	68 8c 1b 02 c0       	push   0xc0021b8c
c000f276:	50                   	push   eax
c000f277:	e8 b8 fe ff ff       	call   c000f134 <findDataTable(unsigned char*, char*)>
c000f27c:	83 c4 10             	add    esp,0x10
c000f27f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f283:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f288:	75 1a                	jne    c000f2a4 <scanMADT()+0xf0>
c000f28a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f28f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f295:	83 e2 fe             	and    edx,0xfffffffe
c000f298:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f29e:	e9 c1 03 00 00       	jmp    c000f664 <scanMADT()+0x4b0>
c000f2a3:	90                   	nop
c000f2a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2b3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2b7:	0f 87 a7 03 00 00    	ja     c000f664 <scanMADT()+0x4b0>
c000f2bd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f2c5:	0f 87 99 03 00 00    	ja     c000f664 <scanMADT()+0x4b0>
c000f2cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d7:	8d 50 01             	lea    edx,[eax+0x1]
c000f2da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2e6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f2ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ee:	8d 50 01             	lea    edx,[eax+0x1]
c000f2f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2fd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f301:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f306:	83 f8 02             	cmp    eax,0x2
c000f309:	0f 86 51 03 00 00    	jbe    c000f660 <scanMADT()+0x4ac>
c000f30f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f314:	85 c0                	test   eax,eax
c000f316:	75 58                	jne    c000f370 <scanMADT()+0x1bc>
c000f318:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f31c:	8d 50 01             	lea    edx,[eax+0x1]
c000f31f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f323:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f329:	0f b6 d2             	movzx  edx,dl
c000f32c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f330:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f334:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f33a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f33e:	8d 50 01             	lea    edx,[eax+0x1]
c000f341:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f345:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f34b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f34e:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f354:	0f b6 d2             	movzx  edx,dl
c000f357:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f35b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f35f:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f365:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f36a:	e9 d9 02 00 00       	jmp    c000f648 <scanMADT()+0x494>
c000f36f:	90                   	nop
c000f370:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f375:	83 f8 01             	cmp    eax,0x1
c000f378:	0f 85 1a 01 00 00    	jne    c000f498 <scanMADT()+0x2e4>
c000f37e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f382:	8d 50 01             	lea    edx,[eax+0x1]
c000f385:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f389:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f38f:	0f b6 d2             	movzx  edx,dl
c000f392:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f396:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f39a:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f3a0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ad:	01 d0                	add    eax,edx
c000f3af:	83 c0 2c             	add    eax,0x2c
c000f3b2:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b4:	0f b6 d0             	movzx  edx,al
c000f3b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3bb:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3c2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3c6:	0f b6 c0             	movzx  eax,al
c000f3c9:	c1 e0 08             	shl    eax,0x8
c000f3cc:	89 d1                	mov    ecx,edx
c000f3ce:	09 c1                	or     ecx,eax
c000f3d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d4:	8d 50 02             	lea    edx,[eax+0x2]
c000f3d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3db:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3df:	0f b6 c0             	movzx  eax,al
c000f3e2:	c1 e0 10             	shl    eax,0x10
c000f3e5:	09 c1                	or     ecx,eax
c000f3e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3eb:	8d 50 03             	lea    edx,[eax+0x3]
c000f3ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3f6:	0f b6 c0             	movzx  eax,al
c000f3f9:	c1 e0 18             	shl    eax,0x18
c000f3fc:	09 c1                	or     ecx,eax
c000f3fe:	89 ca                	mov    edx,ecx
c000f400:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f405:	0f b6 c0             	movzx  eax,al
c000f408:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f40f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f414:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f418:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f41c:	01 d0                	add    eax,edx
c000f41e:	83 c0 2c             	add    eax,0x2c
c000f421:	8a 00                	mov    al,BYTE PTR [eax]
c000f423:	0f b6 d0             	movzx  edx,al
c000f426:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f42a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f42d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f431:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f435:	0f b6 c0             	movzx  eax,al
c000f438:	c1 e0 08             	shl    eax,0x8
c000f43b:	89 d1                	mov    ecx,edx
c000f43d:	09 c1                	or     ecx,eax
c000f43f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f443:	8d 50 02             	lea    edx,[eax+0x2]
c000f446:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f44a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f44e:	0f b6 c0             	movzx  eax,al
c000f451:	c1 e0 10             	shl    eax,0x10
c000f454:	09 c1                	or     ecx,eax
c000f456:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f45a:	8d 50 03             	lea    edx,[eax+0x3]
c000f45d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f461:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f465:	0f b6 c0             	movzx  eax,al
c000f468:	c1 e0 18             	shl    eax,0x18
c000f46b:	09 c1                	or     ecx,eax
c000f46d:	89 ca                	mov    edx,ecx
c000f46f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f474:	0f b6 c0             	movzx  eax,al
c000f477:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f47e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f483:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f488:	83 c0 01             	add    eax,0x1
c000f48b:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f490:	e9 b3 01 00 00       	jmp    c000f648 <scanMADT()+0x494>
c000f495:	8d 76 00             	lea    esi,[esi+0x0]
c000f498:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f49d:	83 f8 02             	cmp    eax,0x2
c000f4a0:	0f 85 ea 00 00 00    	jne    c000f590 <scanMADT()+0x3dc>
c000f4a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4aa:	8d 50 01             	lea    edx,[eax+0x1]
c000f4ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4b9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f4bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4c1:	8d 50 01             	lea    edx,[eax+0x1]
c000f4c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4cc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4d0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4dc:	01 d0                	add    eax,edx
c000f4de:	83 c0 2c             	add    eax,0x2c
c000f4e1:	8a 00                	mov    al,BYTE PTR [eax]
c000f4e3:	0f b6 d0             	movzx  edx,al
c000f4e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4f5:	0f b6 c0             	movzx  eax,al
c000f4f8:	c1 e0 08             	shl    eax,0x8
c000f4fb:	89 d1                	mov    ecx,edx
c000f4fd:	09 c1                	or     ecx,eax
c000f4ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f503:	8d 50 02             	lea    edx,[eax+0x2]
c000f506:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f50a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f50e:	0f b6 c0             	movzx  eax,al
c000f511:	c1 e0 10             	shl    eax,0x10
c000f514:	09 c1                	or     ecx,eax
c000f516:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f51a:	8d 50 03             	lea    edx,[eax+0x3]
c000f51d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f521:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f525:	0f b6 c0             	movzx  eax,al
c000f528:	c1 e0 18             	shl    eax,0x18
c000f52b:	09 c8                	or     eax,ecx
c000f52d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f531:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f536:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f53a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f53e:	01 d0                	add    eax,edx
c000f540:	83 c0 2c             	add    eax,0x2c
c000f543:	8a 00                	mov    al,BYTE PTR [eax]
c000f545:	0f b6 d0             	movzx  edx,al
c000f548:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f54c:	8d 48 01             	lea    ecx,[eax+0x1]
c000f54f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f553:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f557:	0f b6 c0             	movzx  eax,al
c000f55a:	c1 e0 08             	shl    eax,0x8
c000f55d:	09 d0                	or     eax,edx
c000f55f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f564:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f569:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f56e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f572:	88 90 88 32 02 c0    	mov    BYTE PTR [eax-0x3ffdcd78],dl
c000f578:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f57d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f582:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f58a:	e9 b9 00 00 00       	jmp    c000f648 <scanMADT()+0x494>
c000f58f:	90                   	nop
c000f590:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f595:	83 f8 04             	cmp    eax,0x4
c000f598:	0f 85 9a 00 00 00    	jne    c000f638 <scanMADT()+0x484>
c000f59e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f5a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5ad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5b1:	0f b6 c0             	movzx  eax,al
c000f5b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c0:	01 d0                	add    eax,edx
c000f5c2:	83 c0 2c             	add    eax,0x2c
c000f5c5:	8a 00                	mov    al,BYTE PTR [eax]
c000f5c7:	0f b6 d0             	movzx  edx,al
c000f5ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ce:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5d5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5d9:	0f b6 c0             	movzx  eax,al
c000f5dc:	c1 e0 08             	shl    eax,0x8
c000f5df:	09 d0                	or     eax,edx
c000f5e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5e5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ee:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5fd:	0f b6 c0             	movzx  eax,al
c000f600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f608:	c1 e0 08             	shl    eax,0x8
c000f60b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f60f:	89 c1                	mov    ecx,eax
c000f611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f615:	c1 e0 18             	shl    eax,0x18
c000f618:	89 c3                	mov    ebx,eax
c000f61a:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f61f:	8d 50 01             	lea    edx,[eax+0x1]
c000f622:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f628:	09 d9                	or     ecx,ebx
c000f62a:	89 ca                	mov    edx,ecx
c000f62c:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f633:	eb 13                	jmp    c000f648 <scanMADT()+0x494>
c000f635:	8d 76 00             	lea    esi,[esi+0x0]
c000f638:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f63d:	83 f8 05             	cmp    eax,0x5
c000f640:	75 06                	jne    c000f648 <scanMADT()+0x494>
c000f642:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f647:	90                   	nop
c000f648:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f64d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f651:	01 d0                	add    eax,edx
c000f653:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f657:	e9 50 fc ff ff       	jmp    c000f2ac <scanMADT()+0xf8>
c000f65c:	90                   	nop
c000f65d:	eb 05                	jmp    c000f664 <scanMADT()+0x4b0>
c000f65f:	90                   	nop
c000f660:	90                   	nop
c000f661:	8d 76 00             	lea    esi,[esi+0x0]
c000f664:	83 c4 38             	add    esp,0x38
c000f667:	5b                   	pop    ebx
c000f668:	c3                   	ret    
c000f669:	90                   	nop
c000f66a:	66 90                	xchg   ax,ax

c000f66c <ACPI::ACPI()>:
c000f66c:	83 ec 0c             	sub    esp,0xc
c000f66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f673:	83 ec 08             	sub    esp,0x8
c000f676:	68 91 1b 02 c0       	push   0xc0021b91
c000f67b:	50                   	push   eax
c000f67c:	e8 3b d2 ff ff       	call   c000c8bc <Device::Device(char const*)>
c000f681:	83 c4 10             	add    esp,0x10
c000f684:	ba e4 1c 02 c0       	mov    edx,0xc0021ce4
c000f689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f68d:	89 10                	mov    DWORD PTR [eax],edx
c000f68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f693:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f69e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ac:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6b6:	e8 f9 fa ff ff       	call   c000f1b4 <scanMADT()>
c000f6bb:	90                   	nop
c000f6bc:	83 c4 0c             	add    esp,0xc
c000f6bf:	c3                   	ret    

c000f6c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f6c0:	83 ec 2c             	sub    esp,0x2c
c000f6c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f6c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f6cf:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f6d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6d8:	88 c8                	mov    al,cl
c000f6da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f6e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f6eb:	90                   	nop
c000f6ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f6fa:	0f 8d b0 00 00 00    	jge    c000f7b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f700:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f704:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f708:	83 c2 2a             	add    edx,0x2a
c000f70b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f70f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f714:	0f b7 c0             	movzx  eax,ax
c000f717:	39 c2                	cmp    edx,eax
c000f719:	0f 85 85 00 00 00    	jne    c000f7a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f71f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f723:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f727:	83 c2 2a             	add    edx,0x2a
c000f72a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f72e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f733:	0f b6 c0             	movzx  eax,al
c000f736:	39 c2                	cmp    edx,eax
c000f738:	75 6a                	jne    c000f7a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f73a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f73f:	85 c0                	test   eax,eax
c000f741:	74 3d                	je     c000f780 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f743:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f747:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f74b:	83 c2 2a             	add    edx,0x2a
c000f74e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f752:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f759:	39 c2                	cmp    edx,eax
c000f75b:	74 13                	je     c000f770 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f75d:	83 ec 0c             	sub    esp,0xc
c000f760:	68 0c 1b 02 c0       	push   0xc0021b0c
c000f765:	e8 57 1b 00 00       	call   c00112c1 <KePanic(char const*)>
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	8d 76 00             	lea    esi,[esi+0x0]
c000f770:	83 ec 0c             	sub    esp,0xc
c000f773:	68 96 1b 02 c0       	push   0xc0021b96
c000f778:	e8 44 1b 00 00       	call   c00112c1 <KePanic(char const*)>
c000f77d:	83 c4 10             	add    esp,0x10
c000f780:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f784:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f788:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f78c:	83 c2 2a             	add    edx,0x2a
c000f78f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f793:	8b 02                	mov    eax,DWORD PTR [edx]
c000f795:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f798:	89 01                	mov    DWORD PTR [ecx],eax
c000f79a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f79d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7a2:	66 90                	xchg   ax,ax
c000f7a4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7a9:	e9 3e ff ff ff       	jmp    c000f6ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7ae:	66 90                	xchg   ax,ax
c000f7b0:	90                   	nop
c000f7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7b5:	83 c4 2c             	add    esp,0x2c
c000f7b8:	c2 04 00             	ret    0x4
c000f7bb:	90                   	nop

c000f7bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f7bc:	83 ec 1c             	sub    esp,0x1c
c000f7bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f7c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7d0:	88 c8                	mov    al,cl
c000f7d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7d6:	88 d0                	mov    al,dl
c000f7d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7ea:	83 c2 2a             	add    edx,0x2a
c000f7ed:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f7f1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7f9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f803:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f806:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f80a:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f813:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f819:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f81d:	83 c0 01             	add    eax,0x1
c000f820:	88 c1                	mov    cl,al
c000f822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f826:	83 c2 2a             	add    edx,0x2a
c000f829:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f831:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f83b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f83e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f842:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f84a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f850:	8d 50 01             	lea    edx,[eax+0x1]
c000f853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f857:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f861:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f867:	3d 00 02 00 00       	cmp    eax,0x200
c000f86c:	75 12                	jne    c000f880 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f86e:	83 ec 0c             	sub    esp,0xc
c000f871:	68 a5 1b 02 c0       	push   0xc0021ba5
c000f876:	e8 46 1a 00 00       	call   c00112c1 <KePanic(char const*)>
c000f87b:	83 c4 10             	add    esp,0x10
c000f87e:	66 90                	xchg   ax,ax
c000f880:	90                   	nop
c000f881:	83 c4 1c             	add    esp,0x1c
c000f884:	c3                   	ret    
c000f885:	90                   	nop
c000f886:	66 90                	xchg   ax,ax

c000f888 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f888:	b8 00 00 00 00       	mov    eax,0x0
c000f88d:	c3                   	ret    
c000f88e:	66 90                	xchg   ax,ax

c000f890 <ACPI::detectPCI()>:
c000f890:	53                   	push   ebx
c000f891:	83 ec 28             	sub    esp,0x28
c000f894:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f899:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f89e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f8a3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8a9:	83 e0 04             	and    eax,0x4
c000f8ac:	0f b6 c0             	movzx  eax,al
c000f8af:	85 c0                	test   eax,eax
c000f8b1:	74 2d                	je     c000f8e0 <ACPI::detectPCI()+0x50>
c000f8b3:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f8b8:	83 ec 08             	sub    esp,0x8
c000f8bb:	68 c2 1b 02 c0       	push   0xc0021bc2
c000f8c0:	50                   	push   eax
c000f8c1:	e8 6e f8 ff ff       	call   c000f134 <findDataTable(unsigned char*, char*)>
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8cd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8d2:	74 0c                	je     c000f8e0 <ACPI::detectPCI()+0x50>
c000f8d4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8d9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8de:	66 90                	xchg   ax,ax
c000f8e0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f8e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8ec:	8a 00                	mov    al,BYTE PTR [eax]
c000f8ee:	0f b6 c0             	movzx  eax,al
c000f8f1:	83 f8 01             	cmp    eax,0x1
c000f8f4:	75 0e                	jne    c000f904 <ACPI::detectPCI()+0x74>
c000f8f6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8fb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f900:	eb 2e                	jmp    c000f930 <ACPI::detectPCI()+0xa0>
c000f902:	66 90                	xchg   ax,ax
c000f904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f908:	8a 00                	mov    al,BYTE PTR [eax]
c000f90a:	0f b6 c0             	movzx  eax,al
c000f90d:	83 f8 02             	cmp    eax,0x2
c000f910:	75 1e                	jne    c000f930 <ACPI::detectPCI()+0xa0>
c000f912:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f917:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f91c:	85 c0                	test   eax,eax
c000f91e:	74 10                	je     c000f930 <ACPI::detectPCI()+0xa0>
c000f920:	83 ec 0c             	sub    esp,0xc
c000f923:	68 3c 1b 02 c0       	push   0xc0021b3c
c000f928:	e8 94 19 00 00       	call   c00112c1 <KePanic(char const*)>
c000f92d:	83 c4 10             	add    esp,0x10
c000f930:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f934:	83 f0 01             	xor    eax,0x1
c000f937:	0f b6 c0             	movzx  eax,al
c000f93a:	85 c0                	test   eax,eax
c000f93c:	74 46                	je     c000f984 <ACPI::detectPCI()+0xf4>
c000f93e:	e8 ed 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f943:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f947:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f94c:	75 0e                	jne    c000f95c <ACPI::detectPCI()+0xcc>
c000f94e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f953:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f958:	eb 2a                	jmp    c000f984 <ACPI::detectPCI()+0xf4>
c000f95a:	66 90                	xchg   ax,ax
c000f95c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f961:	75 21                	jne    c000f984 <ACPI::detectPCI()+0xf4>
c000f963:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f968:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f96d:	85 c0                	test   eax,eax
c000f96f:	74 13                	je     c000f984 <ACPI::detectPCI()+0xf4>
c000f971:	83 ec 0c             	sub    esp,0xc
c000f974:	68 3c 1b 02 c0       	push   0xc0021b3c
c000f979:	e8 43 19 00 00       	call   c00112c1 <KePanic(char const*)>
c000f97e:	83 c4 10             	add    esp,0x10
c000f981:	8d 76 00             	lea    esi,[esi+0x0]
c000f984:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f989:	85 c0                	test   eax,eax
c000f98b:	0f 84 87 00 00 00    	je     c000fa18 <ACPI::detectPCI()+0x188>
c000f991:	83 ec 0c             	sub    esp,0xc
c000f994:	68 c7 1b 02 c0       	push   0xc0021bc7
c000f999:	e8 4f 12 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c000f99e:	83 c4 10             	add    esp,0x10
c000f9a1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9a9:	83 ec 0c             	sub    esp,0xc
c000f9ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9b0:	e8 1e 81 ff ff       	call   c0007ad3 <malloc>
c000f9b5:	83 c4 10             	add    esp,0x10
c000f9b8:	89 c3                	mov    ebx,eax
c000f9ba:	83 ec 0c             	sub    esp,0xc
c000f9bd:	53                   	push   ebx
c000f9be:	e8 eb b3 00 00       	call   c001adae <PCI::PCI()>
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ce:	83 ec 08             	sub    esp,0x8
c000f9d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9d5:	50                   	push   eax
c000f9d6:	e8 49 cd ff ff       	call   c000c724 <Device::addChild(Device*)>
c000f9db:	83 c4 10             	add    esp,0x10
c000f9de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e4:	83 c0 08             	add    eax,0x8
c000f9e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f9ee:	85 d2                	test   edx,edx
c000f9f0:	74 0a                	je     c000f9fc <ACPI::detectPCI()+0x16c>
c000f9f2:	ba 01 00 00 00       	mov    edx,0x1
c000f9f7:	eb 0b                	jmp    c000fa04 <ACPI::detectPCI()+0x174>
c000f9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9fc:	ba 02 00 00 00       	mov    edx,0x2
c000fa01:	8d 76 00             	lea    esi,[esi+0x0]
c000fa04:	6a 00                	push   0x0
c000fa06:	6a 00                	push   0x0
c000fa08:	52                   	push   edx
c000fa09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa0d:	ff d0                	call   eax
c000fa0f:	83 c4 10             	add    esp,0x10
c000fa12:	e9 91 00 00 00       	jmp    c000faa8 <ACPI::detectPCI()+0x218>
c000fa17:	90                   	nop
c000fa18:	83 ec 0c             	sub    esp,0xc
c000fa1b:	68 df 1b 02 c0       	push   0xc0021bdf
c000fa20:	e8 c8 11 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c000fa25:	83 c4 10             	add    esp,0x10
c000fa28:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa2f:	83 ec 0c             	sub    esp,0xc
c000fa32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa36:	e8 98 80 ff ff       	call   c0007ad3 <malloc>
c000fa3b:	83 c4 10             	add    esp,0x10
c000fa3e:	89 c3                	mov    ebx,eax
c000fa40:	83 ec 0c             	sub    esp,0xc
c000fa43:	53                   	push   ebx
c000fa44:	e8 0d bf 00 00       	call   c001b956 <IDE::IDE()>
c000fa49:	83 c4 10             	add    esp,0x10
c000fa4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa54:	83 ec 08             	sub    esp,0x8
c000fa57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa5b:	50                   	push   eax
c000fa5c:	e8 c3 cc ff ff       	call   c000c724 <Device::addChild(Device*)>
c000fa61:	83 c4 10             	add    esp,0x10
c000fa64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa68:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa76:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa83:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa92:	83 c0 08             	add    eax,0x8
c000fa95:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa97:	6a 00                	push   0x0
c000fa99:	6a 00                	push   0x0
c000fa9b:	6a 00                	push   0x0
c000fa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faa1:	ff d0                	call   eax
c000faa3:	83 c4 10             	add    esp,0x10
c000faa6:	66 90                	xchg   ax,ax
c000faa8:	90                   	nop
c000faa9:	83 c4 28             	add    esp,0x28
c000faac:	5b                   	pop    ebx
c000faad:	c3                   	ret    
c000faae:	66 90                	xchg   ax,ax

c000fab0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fab0:	83 ec 1c             	sub    esp,0x1c
c000fab3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fab7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000faba:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fabe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fac3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fac8:	83 ec 08             	sub    esp,0x8
c000facb:	52                   	push   edx
c000facc:	50                   	push   eax
c000facd:	e8 c8 76 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fad9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fade:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fae3:	83 ec 04             	sub    esp,0x4
c000fae6:	6a 01                	push   0x1
c000fae8:	52                   	push   edx
c000fae9:	50                   	push   eax
c000faea:	e8 c3 77 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000faef:	83 c4 10             	add    esp,0x10
c000faf2:	90                   	nop
c000faf3:	83 c4 1c             	add    esp,0x1c
c000faf6:	c3                   	ret    
c000faf7:	90                   	nop

c000faf8 <ACPI::sleep()>:
c000faf8:	83 ec 0c             	sub    esp,0xc
c000fafb:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb00:	85 c0                	test   eax,eax
c000fb02:	74 08                	je     c000fb0c <ACPI::sleep()+0x14>
c000fb04:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb09:	ff d0                	call   eax
c000fb0b:	90                   	nop
c000fb0c:	90                   	nop
c000fb0d:	83 c4 0c             	add    esp,0xc
c000fb10:	c3                   	ret    
c000fb11:	90                   	nop
c000fb12:	66 90                	xchg   ax,ax

c000fb14 <ACPI::open(int, int, void*)>:
c000fb14:	55                   	push   ebp
c000fb15:	89 e5                	mov    ebp,esp
c000fb17:	53                   	push   ebx
c000fb18:	81 ec 74 01 00 00    	sub    esp,0x174
c000fb1e:	83 ec 0c             	sub    esp,0xc
c000fb21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb24:	e8 67 fd ff ff       	call   c000f890 <ACPI::detectPCI()>
c000fb29:	83 c4 10             	add    esp,0x10
c000fb2c:	83 ec 0c             	sub    esp,0xc
c000fb2f:	68 64 1b 02 c0       	push   0xc0021b64
c000fb34:	e8 b4 10 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c000fb39:	83 c4 10             	add    esp,0x10
c000fb3c:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb41:	8a 00                	mov    al,BYTE PTR [eax]
c000fb43:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fb46:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb4a:	83 f8 01             	cmp    eax,0x1
c000fb4d:	75 15                	jne    c000fb64 <ACPI::open(int, int, void*)+0x50>
c000fb4f:	83 ec 0c             	sub    esp,0xc
c000fb52:	68 b1 14 02 c0       	push   0xc00214b1
c000fb57:	e8 77 4c 00 00       	call   c00147d3 <Thr::loadKernelSymbolTable(char const*)>
c000fb5c:	83 c4 10             	add    esp,0x10
c000fb5f:	eb 33                	jmp    c000fb94 <ACPI::open(int, int, void*)+0x80>
c000fb61:	8d 76 00             	lea    esi,[esi+0x0]
c000fb64:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb68:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb6d:	75 15                	jne    c000fb84 <ACPI::open(int, int, void*)+0x70>
c000fb6f:	83 ec 0c             	sub    esp,0xc
c000fb72:	68 f4 1b 02 c0       	push   0xc0021bf4
c000fb77:	e8 57 4c 00 00       	call   c00147d3 <Thr::loadKernelSymbolTable(char const*)>
c000fb7c:	83 c4 10             	add    esp,0x10
c000fb7f:	eb 13                	jmp    c000fb94 <ACPI::open(int, int, void*)+0x80>
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	83 ec 0c             	sub    esp,0xc
c000fb87:	68 12 1c 02 c0       	push   0xc0021c12
c000fb8c:	e8 30 17 00 00       	call   c00112c1 <KePanic(char const*)>
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fb98:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fb9f:	83 ec 0c             	sub    esp,0xc
c000fba2:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fba5:	e8 29 7f ff ff       	call   c0007ad3 <malloc>
c000fbaa:	83 c4 10             	add    esp,0x10
c000fbad:	89 c3                	mov    ebx,eax
c000fbaf:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fbb4:	83 ec 04             	sub    esp,0x4
c000fbb7:	50                   	push   eax
c000fbb8:	68 2c 1c 02 c0       	push   0xc0021c2c
c000fbbd:	53                   	push   ebx
c000fbbe:	e8 e3 bc ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c000fbc3:	83 c4 10             	add    esp,0x10
c000fbc6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fbc9:	83 ec 08             	sub    esp,0x8
c000fbcc:	6a 01                	push   0x1
c000fbce:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbd1:	e8 ee bc ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c000fbd6:	83 c4 10             	add    esp,0x10
c000fbd9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fbdc:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fbe0:	75 12                	jne    c000fbf4 <ACPI::open(int, int, void*)+0xe0>
c000fbe2:	83 ec 0c             	sub    esp,0xc
c000fbe5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbe8:	e8 35 bd ff ff       	call   c000b922 <File::close()>
c000fbed:	83 c4 10             	add    esp,0x10
c000fbf0:	eb 06                	jmp    c000fbf8 <ACPI::open(int, int, void*)+0xe4>
c000fbf2:	66 90                	xchg   ax,ax
c000fbf4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fbf8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fbfc:	74 16                	je     c000fc14 <ACPI::open(int, int, void*)+0x100>
c000fbfe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc03:	83 c0 08             	add    eax,0x8
c000fc06:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc08:	83 ec 0c             	sub    esp,0xc
c000fc0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc0e:	ff d0                	call   eax
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	90                   	nop
c000fc14:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fc17:	83 f0 01             	xor    eax,0x1
c000fc1a:	0f b6 c0             	movzx  eax,al
c000fc1d:	85 c0                	test   eax,eax
c000fc1f:	74 3b                	je     c000fc5c <ACPI::open(int, int, void*)+0x148>
c000fc21:	83 ec 0c             	sub    esp,0xc
c000fc24:	68 4a 1c 02 c0       	push   0xc0021c4a
c000fc29:	e8 bf 0f 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c000fc2e:	83 c4 10             	add    esp,0x10
c000fc31:	83 ec 04             	sub    esp,0x4
c000fc34:	6a 0c                	push   0xc
c000fc36:	68 65 1c 02 c0       	push   0xc0021c65
c000fc3b:	68 76 1c 02 c0       	push   0xc0021c76
c000fc40:	e8 0d 3e 00 00       	call   c0013a52 <Reg::readIntWithDefault(char*, char*, int)>
c000fc45:	83 c4 10             	add    esp,0x10
c000fc48:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fc4b:	83 ec 0c             	sub    esp,0xc
c000fc4e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fc51:	e8 c4 9b ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fc56:	83 c4 10             	add    esp,0x10
c000fc59:	8d 76 00             	lea    esi,[esi+0x0]
c000fc5c:	83 ec 0c             	sub    esp,0xc
c000fc5f:	68 75 07 02 c0       	push   0xc0020775
c000fc64:	e8 84 0f 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c000fc69:	83 c4 10             	add    esp,0x10
c000fc6c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc6f:	83 ec 08             	sub    esp,0x8
c000fc72:	6a 13                	push   0x13
c000fc74:	50                   	push   eax
c000fc75:	e8 c2 cd ff ff       	call   c000ca3c <getDevicesOfType(DeviceType)>
c000fc7a:	83 c4 0c             	add    esp,0xc
c000fc7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc80:	83 ec 0c             	sub    esp,0xc
c000fc83:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc86:	50                   	push   eax
c000fc87:	e8 d4 fe 00 00       	call   c001fb60 <LinkedList<Device>::isEmpty()>
c000fc8c:	83 c4 10             	add    esp,0x10
c000fc8f:	83 f0 01             	xor    eax,0x1
c000fc92:	0f b6 c0             	movzx  eax,al
c000fc95:	85 c0                	test   eax,eax
c000fc97:	0f 84 1f 01 00 00    	je     c000fdbc <ACPI::open(int, int, void*)+0x2a8>
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fca3:	50                   	push   eax
c000fca4:	e8 d3 fe 00 00       	call   c001fb7c <LinkedList<Device>::getFirstElement()>
c000fca9:	83 c4 10             	add    esp,0x10
c000fcac:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fcaf:	83 ec 0c             	sub    esp,0xc
c000fcb2:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcb5:	50                   	push   eax
c000fcb6:	e8 c9 fe 00 00       	call   c001fb84 <LinkedList<Device>::removeFirst()>
c000fcbb:	83 c4 10             	add    esp,0x10
c000fcbe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fcc1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fcc4:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fcc7:	b8 24 00 00 00       	mov    eax,0x24
c000fccc:	83 e0 fc             	and    eax,0xfffffffc
c000fccf:	89 c3                	mov    ebx,eax
c000fcd1:	b8 00 00 00 00       	mov    eax,0x0
c000fcd6:	66 90                	xchg   ax,ax
c000fcd8:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fcdf:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fce6:	83 c0 04             	add    eax,0x4
c000fce9:	39 d8                	cmp    eax,ebx
c000fceb:	72 eb                	jb     c000fcd8 <ACPI::open(int, int, void*)+0x1c4>
c000fced:	83 ec 08             	sub    esp,0x8
c000fcf0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fcf6:	50                   	push   eax
c000fcf7:	83 ec 24             	sub    esp,0x24
c000fcfa:	89 e1                	mov    ecx,esp
c000fcfc:	b8 24 00 00 00       	mov    eax,0x24
c000fd01:	83 e0 fc             	and    eax,0xfffffffc
c000fd04:	89 c3                	mov    ebx,eax
c000fd06:	b8 00 00 00 00       	mov    eax,0x0
c000fd0b:	90                   	nop
c000fd0c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fd13:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fd16:	83 c0 04             	add    eax,0x4
c000fd19:	39 d8                	cmp    eax,ebx
c000fd1b:	72 ef                	jb     c000fd0c <ACPI::open(int, int, void*)+0x1f8>
c000fd1d:	e8 74 b5 00 00       	call   c001b296 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd22:	83 c4 30             	add    esp,0x30
c000fd25:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fd28:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fd2c:	0f 84 4e ff ff ff    	je     c000fc80 <ACPI::open(int, int, void*)+0x16c>
c000fd32:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fd39:	83 ec 0c             	sub    esp,0xc
c000fd3c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fd3f:	e8 8f 7d ff ff       	call   c0007ad3 <malloc>
c000fd44:	83 c4 10             	add    esp,0x10
c000fd47:	89 c3                	mov    ebx,eax
c000fd49:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd4e:	83 ec 04             	sub    esp,0x4
c000fd51:	50                   	push   eax
c000fd52:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd55:	53                   	push   ebx
c000fd56:	e8 4b bb ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c000fd5b:	83 c4 10             	add    esp,0x10
c000fd5e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fd61:	83 ec 0c             	sub    esp,0xc
c000fd64:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fd67:	e8 1c be ff ff       	call   c000bb88 <File::exists()>
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	0f b6 c0             	movzx  eax,al
c000fd72:	85 c0                	test   eax,eax
c000fd74:	74 22                	je     c000fd98 <ACPI::open(int, int, void*)+0x284>
c000fd76:	83 ec 08             	sub    esp,0x8
c000fd79:	6a 01                	push   0x1
c000fd7b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd7e:	e8 d2 54 00 00       	call   c0015255 <Thr::loadDLL(char const*, bool)>
c000fd83:	83 c4 10             	add    esp,0x10
c000fd86:	83 ec 08             	sub    esp,0x8
c000fd89:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fd8c:	50                   	push   eax
c000fd8d:	e8 03 57 00 00       	call   c0015495 <Thr::executeDLL(unsigned long, void*)>
c000fd92:	83 c4 10             	add    esp,0x10
c000fd95:	8d 76 00             	lea    esi,[esi+0x0]
c000fd98:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fd9c:	0f 84 de fe ff ff    	je     c000fc80 <ACPI::open(int, int, void*)+0x16c>
c000fda2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fda5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fda7:	83 c0 08             	add    eax,0x8
c000fdaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdac:	83 ec 0c             	sub    esp,0xc
c000fdaf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fdb2:	ff d0                	call   eax
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	e9 c4 fe ff ff       	jmp    c000fc80 <ACPI::open(int, int, void*)+0x16c>
c000fdbc:	83 ec 0c             	sub    esp,0xc
c000fdbf:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fdc2:	50                   	push   eax
c000fdc3:	e8 94 fd 00 00       	call   c001fb5c <LinkedList<Device>::~LinkedList()>
c000fdc8:	83 c4 10             	add    esp,0x10
c000fdcb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fdd1:	83 ec 08             	sub    esp,0x8
c000fdd4:	6a 01                	push   0x1
c000fdd6:	68 7d 1c 02 c0       	push   0xc0021c7d
c000fddb:	e8 75 54 00 00       	call   c0015255 <Thr::loadDLL(char const*, bool)>
c000fde0:	83 c4 10             	add    esp,0x10
c000fde3:	83 ec 08             	sub    esp,0x8
c000fde6:	53                   	push   ebx
c000fde7:	50                   	push   eax
c000fde8:	e8 a8 56 00 00       	call   c0015495 <Thr::executeDLL(unsigned long, void*)>
c000fded:	83 c4 10             	add    esp,0x10
c000fdf0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fdf5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fdfb:	83 e0 04             	and    eax,0x4
c000fdfe:	0f b6 c0             	movzx  eax,al
c000fe01:	85 c0                	test   eax,eax
c000fe03:	0f 84 e3 00 00 00    	je     c000feec <ACPI::open(int, int, void*)+0x3d8>
c000fe09:	83 ec 0c             	sub    esp,0xc
c000fe0c:	68 9a 1c 02 c0       	push   0xc0021c9a
c000fe11:	e8 d7 0d 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c000fe16:	83 c4 10             	add    esp,0x10
c000fe19:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fe20:	83 ec 0c             	sub    esp,0xc
c000fe23:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fe26:	e8 a8 7c ff ff       	call   c0007ad3 <malloc>
c000fe2b:	83 c4 10             	add    esp,0x10
c000fe2e:	89 c3                	mov    ebx,eax
c000fe30:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe35:	83 ec 04             	sub    esp,0x4
c000fe38:	50                   	push   eax
c000fe39:	68 b7 1c 02 c0       	push   0xc0021cb7
c000fe3e:	53                   	push   ebx
c000fe3f:	e8 62 ba ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c000fe44:	83 c4 10             	add    esp,0x10
c000fe47:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fe4a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe4e:	74 1c                	je     c000fe6c <ACPI::open(int, int, void*)+0x358>
c000fe50:	83 ec 0c             	sub    esp,0xc
c000fe53:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe56:	e8 2d bd ff ff       	call   c000bb88 <File::exists()>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	0f b6 c0             	movzx  eax,al
c000fe61:	85 c0                	test   eax,eax
c000fe63:	74 07                	je     c000fe6c <ACPI::open(int, int, void*)+0x358>
c000fe65:	b0 01                	mov    al,0x1
c000fe67:	eb 07                	jmp    c000fe70 <ACPI::open(int, int, void*)+0x35c>
c000fe69:	8d 76 00             	lea    esi,[esi+0x0]
c000fe6c:	b0 00                	mov    al,0x0
c000fe6e:	66 90                	xchg   ax,ax
c000fe70:	0f b6 c0             	movzx  eax,al
c000fe73:	85 c0                	test   eax,eax
c000fe75:	74 21                	je     c000fe98 <ACPI::open(int, int, void*)+0x384>
c000fe77:	83 ec 08             	sub    esp,0x8
c000fe7a:	6a 01                	push   0x1
c000fe7c:	68 b7 1c 02 c0       	push   0xc0021cb7
c000fe81:	e8 cf 53 00 00       	call   c0015255 <Thr::loadDLL(char const*, bool)>
c000fe86:	83 c4 10             	add    esp,0x10
c000fe89:	83 ec 08             	sub    esp,0x8
c000fe8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe8f:	50                   	push   eax
c000fe90:	e8 00 56 00 00       	call   c0015495 <Thr::executeDLL(unsigned long, void*)>
c000fe95:	83 c4 10             	add    esp,0x10
c000fe98:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe9c:	74 1e                	je     c000febc <ACPI::open(int, int, void*)+0x3a8>
c000fe9e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fea2:	74 18                	je     c000febc <ACPI::open(int, int, void*)+0x3a8>
c000fea4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fea7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fea9:	83 c0 08             	add    eax,0x8
c000feac:	8b 00                	mov    eax,DWORD PTR [eax]
c000feae:	83 ec 0c             	sub    esp,0xc
c000feb1:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000feb4:	ff d0                	call   eax
c000feb6:	83 c4 10             	add    esp,0x10
c000feb9:	8d 76 00             	lea    esi,[esi+0x0]
c000febc:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fec1:	83 ec 08             	sub    esp,0x8
c000fec4:	68 d4 1c 02 c0       	push   0xc0021cd4
c000fec9:	50                   	push   eax
c000feca:	e8 65 f2 ff ff       	call   c000f134 <findDataTable(unsigned char*, char*)>
c000fecf:	83 c4 10             	add    esp,0x10
c000fed2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fed5:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fed9:	74 11                	je     c000feec <ACPI::open(int, int, void*)+0x3d8>
c000fedb:	83 ec 08             	sub    esp,0x8
c000fede:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000fee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fee4:	e8 c7 fb ff ff       	call   c000fab0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fee9:	83 c4 10             	add    esp,0x10
c000feec:	b8 00 00 00 00       	mov    eax,0x0
c000fef1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fef4:	c9                   	leave  
c000fef5:	c3                   	ret    

c000fef6 <CPU::close(int, int, void*)>:
c000fef6:	31 c0                	xor    eax,eax
c000fef8:	c3                   	ret    
c000fef9:	90                   	nop

c000fefa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fefa:	60                   	pusha  
c000fefb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000feff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff07:	9c                   	pushf  
c000ff08:	fa                   	cli    
c000ff09:	0f 09                	wbinvd 
c000ff0b:	0f 30                	wrmsr  
c000ff0d:	9d                   	popf   
c000ff0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff12:	89 02                	mov    DWORD PTR [edx],eax
c000ff14:	61                   	popa   
c000ff15:	c3                   	ret    

c000ff16 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ff16:	60                   	pusha  
c000ff17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff1b:	9c                   	pushf  
c000ff1c:	fa                   	cli    
c000ff1d:	0f 09                	wbinvd 
c000ff1f:	31 c0                	xor    eax,eax
c000ff21:	31 d2                	xor    edx,edx
c000ff23:	0f 32                	rdmsr  
c000ff25:	9d                   	popf   
c000ff26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff2a:	89 02                	mov    DWORD PTR [edx],eax
c000ff2c:	61                   	popa   
c000ff2d:	c3                   	ret    

c000ff2e <CPU::AMD_K6_writeback(int, int, int)>:
c000ff2e:	56                   	push   esi
c000ff2f:	53                   	push   ebx
c000ff30:	83 ec 10             	sub    esp,0x10
c000ff33:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ff38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff3c:	75 5d                	jne    c000ff9b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff3e:	83 f8 08             	cmp    eax,0x8
c000ff41:	75 09                	jne    c000ff4c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ff43:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ff48:	7e 13                	jle    c000ff5d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff4a:	eb 30                	jmp    c000ff7c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff4c:	83 f8 06             	cmp    eax,0x6
c000ff4f:	7c 4a                	jl     c000ff9b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff51:	83 f8 07             	cmp    eax,0x7
c000ff54:	7e 07                	jle    c000ff5d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff56:	83 f8 09             	cmp    eax,0x9
c000ff59:	74 21                	je     c000ff7c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff5b:	eb 3e                	jmp    c000ff9b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff5d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ff63:	89 e6                	mov    esi,esp
c000ff65:	56                   	push   esi
c000ff66:	68 82 00 00 c0       	push   0xc0000082
c000ff6b:	e8 a6 ff ff ff       	call   c000ff16 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff70:	c1 eb 15             	shr    ebx,0x15
c000ff73:	56                   	push   esi
c000ff74:	83 e3 7e             	and    ebx,0x7e
c000ff77:	6a 00                	push   0x0
c000ff79:	53                   	push   ebx
c000ff7a:	eb 12                	jmp    c000ff8e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ff7c:	89 e3                	mov    ebx,esp
c000ff7e:	53                   	push   ebx
c000ff7f:	68 82 00 00 c0       	push   0xc0000082
c000ff84:	e8 8d ff ff ff       	call   c000ff16 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff89:	53                   	push   ebx
c000ff8a:	6a 00                	push   0x0
c000ff8c:	6a 00                	push   0x0
c000ff8e:	68 82 00 00 c0       	push   0xc0000082
c000ff93:	e8 62 ff ff ff       	call   c000fefa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ff98:	83 c4 18             	add    esp,0x18
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	5b                   	pop    ebx
c000ff9f:	5e                   	pop    esi
c000ffa0:	c3                   	ret    
c000ffa1:	90                   	nop

c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ffa2:	55                   	push   ebp
c000ffa3:	57                   	push   edi
c000ffa4:	56                   	push   esi
c000ffa5:	53                   	push   ebx
c000ffa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaa:	39 05 98 32 02 c0    	cmp    DWORD PTR ds:0xc0023298,eax
c000ffb0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ffb4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ffb8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ffbc:	75 23                	jne    c000ffe1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ffbe:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ffc3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ffc7:	89 06                	mov    DWORD PTR [esi],eax
c000ffc9:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000ffce:	89 07                	mov    DWORD PTR [edi],eax
c000ffd0:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000ffd5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ffd8:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000ffdd:	89 02                	mov    DWORD PTR [edx],eax
c000ffdf:	eb 3f                	jmp    c0010020 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ffe1:	31 c9                	xor    ecx,ecx
c000ffe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffe7:	0f a2                	cpuid  
c000ffe9:	89 06                	mov    DWORD PTR [esi],eax
c000ffeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffef:	89 1f                	mov    DWORD PTR [edi],ebx
c000fff1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000fff4:	89 10                	mov    DWORD PTR [eax],edx
c000fff6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fffa:	a3 98 32 02 c0       	mov    ds:0xc0023298,eax
c000ffff:	8b 06                	mov    eax,DWORD PTR [esi]
c0010001:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c0010006:	8b 07                	mov    eax,DWORD PTR [edi]
c0010008:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c001000d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010010:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c0010015:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010019:	8b 00                	mov    eax,DWORD PTR [eax]
c001001b:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c0010020:	5b                   	pop    ebx
c0010021:	5e                   	pop    esi
c0010022:	5f                   	pop    edi
c0010023:	5d                   	pop    ebp
c0010024:	c3                   	ret    
c0010025:	90                   	nop

c0010026 <CPU::cpuidCheckEDX(unsigned int)>:
c0010026:	83 ec 10             	sub    esp,0x10
c0010029:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001002d:	50                   	push   eax
c001002e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010032:	50                   	push   eax
c0010033:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010037:	50                   	push   eax
c0010038:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001003c:	50                   	push   eax
c001003d:	6a 01                	push   0x1
c001003f:	e8 5e ff ff ff       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010044:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010048:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001004c:	0f 95 c0             	setne  al
c001004f:	83 c4 24             	add    esp,0x24
c0010052:	c3                   	ret    
c0010053:	90                   	nop

c0010054 <CPU::cpuidCheckECX(unsigned int)>:
c0010054:	83 ec 10             	sub    esp,0x10
c0010057:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001005b:	50                   	push   eax
c001005c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010060:	50                   	push   eax
c0010061:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010065:	50                   	push   eax
c0010066:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001006a:	50                   	push   eax
c001006b:	6a 01                	push   0x1
c001006d:	e8 30 ff ff ff       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010072:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010076:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001007a:	0f 95 c0             	setne  al
c001007d:	83 c4 24             	add    esp,0x24
c0010080:	c3                   	ret    
c0010081:	90                   	nop

c0010082 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010082:	83 ec 10             	sub    esp,0x10
c0010085:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010089:	50                   	push   eax
c001008a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001008e:	50                   	push   eax
c001008f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010093:	50                   	push   eax
c0010094:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010098:	50                   	push   eax
c0010099:	6a 07                	push   0x7
c001009b:	e8 02 ff ff ff       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100a4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00100a8:	0f 95 c0             	setne  al
c00100ab:	83 c4 24             	add    esp,0x24
c00100ae:	c3                   	ret    
c00100af:	90                   	nop

c00100b0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00100b0:	83 ec 10             	sub    esp,0x10
c00100b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b7:	50                   	push   eax
c00100b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100bc:	50                   	push   eax
c00100bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100c1:	50                   	push   eax
c00100c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100c6:	50                   	push   eax
c00100c7:	6a 07                	push   0x7
c00100c9:	e8 d4 fe ff ff       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100d2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100d6:	0f 95 c0             	setne  al
c00100d9:	83 c4 24             	add    esp,0x24
c00100dc:	c3                   	ret    
c00100dd:	90                   	nop

c00100de <CPU::CPU()>:
c00100de:	83 ec 0c             	sub    esp,0xc
c00100e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e5:	83 ec 08             	sub    esp,0x8
c00100e8:	68 f9 1d 02 c0       	push   0xc0021df9
c00100ed:	50                   	push   eax
c00100ee:	e8 c9 c7 ff ff       	call   c000c8bc <Device::Device(char const*)>
c00100f3:	83 c4 10             	add    esp,0x10
c00100f6:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c00100fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ff:	89 10                	mov    DWORD PTR [eax],edx
c0010101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010105:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001010f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010113:	05 78 01 00 00       	add    eax,0x178
c0010118:	83 ec 0c             	sub    esp,0xc
c001011b:	50                   	push   eax
c001011c:	e8 5b 72 ff ff       	call   c000737c <GDT::GDT()>
c0010121:	83 c4 10             	add    esp,0x10
c0010124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010128:	05 7c 09 00 00       	add    eax,0x97c
c001012d:	83 ec 0c             	sub    esp,0xc
c0010130:	50                   	push   eax
c0010131:	e8 96 74 ff ff       	call   c00075cc <IDT::IDT()>
c0010136:	83 c4 10             	add    esp,0x10
c0010139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013d:	05 7c 11 00 00       	add    eax,0x117c
c0010142:	83 ec 0c             	sub    esp,0xc
c0010145:	50                   	push   eax
c0010146:	e8 e1 8d ff ff       	call   c0008f2c <TSS::TSS()>
c001014b:	83 c4 10             	add    esp,0x10
c001014e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010152:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010167:	90                   	nop
c0010168:	83 c4 0c             	add    esp,0xc
c001016b:	c3                   	ret    

c001016c <CPU::displayFeatures()>:
c001016c:	c3                   	ret    
c001016d:	90                   	nop

c001016e <CPU::detectFeatures()>:
c001016e:	55                   	push   ebp
c001016f:	57                   	push   edi
c0010170:	56                   	push   esi
c0010171:	53                   	push   ebx
c0010172:	83 ec 30             	sub    esp,0x30
c0010175:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010179:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010183:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010189:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010190:	6a 0d                	push   0xd
c0010192:	6a 00                	push   0x0
c0010194:	55                   	push   ebp
c0010195:	e8 56 03 ff ff       	call   c00004f0 <memset>
c001019a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001019f:	83 c4 10             	add    esp,0x10
c00101a2:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00101a9:	0f 84 db 05 00 00    	je     c001078a <CPU::detectFeatures()+0x61c>
c00101af:	83 ec 0c             	sub    esp,0xc
c00101b2:	89 ef                	mov    edi,ebp
c00101b4:	6a 10                	push   0x10
c00101b6:	e8 6b fe ff ff       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c00101bb:	83 e0 01             	and    eax,0x1
c00101be:	8d 14 00             	lea    edx,[eax+eax*1]
c00101c1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101c7:	83 e0 fd             	and    eax,0xfffffffd
c00101ca:	09 d0                	or     eax,edx
c00101cc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101d2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00101d9:	e8 48 fe ff ff       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c00101de:	83 e0 01             	and    eax,0x1
c00101e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101e8:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101ee:	83 e0 fb             	and    eax,0xfffffffb
c00101f1:	09 d0                	or     eax,edx
c00101f3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010200:	e8 21 fe ff ff       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c0010205:	83 e0 01             	and    eax,0x1
c0010208:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001020f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010215:	83 e0 f7             	and    eax,0xfffffff7
c0010218:	09 d0                	or     eax,edx
c001021a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010220:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010227:	e8 fa fd ff ff       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c001022c:	83 e0 01             	and    eax,0x1
c001022f:	c1 e0 04             	shl    eax,0x4
c0010232:	89 c2                	mov    edx,eax
c0010234:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001023a:	83 e0 ef             	and    eax,0xffffffef
c001023d:	09 d0                	or     eax,edx
c001023f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010245:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001024c:	e8 d5 fd ff ff       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c0010251:	83 e0 01             	and    eax,0x1
c0010254:	c1 e0 05             	shl    eax,0x5
c0010257:	89 c2                	mov    edx,eax
c0010259:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001025f:	83 e0 df             	and    eax,0xffffffdf
c0010262:	09 d0                	or     eax,edx
c0010264:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001026a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010271:	e8 b0 fd ff ff       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c0010276:	83 e0 01             	and    eax,0x1
c0010279:	8d 14 00             	lea    edx,[eax+eax*1]
c001027c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010282:	83 e0 fd             	and    eax,0xfffffffd
c0010285:	09 d0                	or     eax,edx
c0010287:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001028d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010294:	e8 8d fd ff ff       	call   c0010026 <CPU::cpuidCheckEDX(unsigned int)>
c0010299:	83 e0 01             	and    eax,0x1
c001029c:	c1 e0 06             	shl    eax,0x6
c001029f:	89 c2                	mov    edx,eax
c00102a1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00102a7:	83 e0 bf             	and    eax,0xffffffbf
c00102aa:	09 d0                	or     eax,edx
c00102ac:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00102b2:	58                   	pop    eax
c00102b3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102b7:	50                   	push   eax
c00102b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102bc:	50                   	push   eax
c00102bd:	8d 74 24 28          	lea    esi,[esp+0x28]
c00102c1:	56                   	push   esi
c00102c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102c6:	50                   	push   eax
c00102c7:	6a 00                	push   0x0
c00102c9:	e8 d4 fc ff ff       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102ce:	b8 04 00 00 00       	mov    eax,0x4
c00102d3:	89 c1                	mov    ecx,eax
c00102d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102d7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00102dd:	89 c1                	mov    ecx,eax
c00102df:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00102e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102e5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00102eb:	89 c1                	mov    ecx,eax
c00102ed:	8d 74 24 38          	lea    esi,[esp+0x38]
c00102f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102f3:	83 c4 18             	add    esp,0x18
c00102f6:	68 08 1d 02 c0       	push   0xc0021d08
c00102fb:	55                   	push   ebp
c00102fc:	e8 7f 04 ff ff       	call   c0000780 <strcmp>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	85 c0                	test   eax,eax
c0010306:	75 0f                	jne    c0010317 <CPU::detectFeatures()+0x1a9>
c0010308:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010312:	e9 22 02 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c0010317:	50                   	push   eax
c0010318:	50                   	push   eax
c0010319:	68 15 1d 02 c0       	push   0xc0021d15
c001031e:	55                   	push   ebp
c001031f:	e8 5c 04 ff ff       	call   c0000780 <strcmp>
c0010324:	83 c4 10             	add    esp,0x10
c0010327:	85 c0                	test   eax,eax
c0010329:	74 dd                	je     c0010308 <CPU::detectFeatures()+0x19a>
c001032b:	50                   	push   eax
c001032c:	50                   	push   eax
c001032d:	68 22 1d 02 c0       	push   0xc0021d22
c0010332:	55                   	push   ebp
c0010333:	e8 48 04 ff ff       	call   c0000780 <strcmp>
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	85 c0                	test   eax,eax
c001033d:	74 2a                	je     c0010369 <CPU::detectFeatures()+0x1fb>
c001033f:	50                   	push   eax
c0010340:	50                   	push   eax
c0010341:	68 2f 1d 02 c0       	push   0xc0021d2f
c0010346:	55                   	push   ebp
c0010347:	e8 34 04 ff ff       	call   c0000780 <strcmp>
c001034c:	83 c4 10             	add    esp,0x10
c001034f:	85 c0                	test   eax,eax
c0010351:	74 16                	je     c0010369 <CPU::detectFeatures()+0x1fb>
c0010353:	50                   	push   eax
c0010354:	50                   	push   eax
c0010355:	68 3c 1d 02 c0       	push   0xc0021d3c
c001035a:	55                   	push   ebp
c001035b:	e8 20 04 ff ff       	call   c0000780 <strcmp>
c0010360:	83 c4 10             	add    esp,0x10
c0010363:	85 c0                	test   eax,eax
c0010365:	74 48                	je     c00103af <CPU::detectFeatures()+0x241>
c0010367:	eb 0f                	jmp    c0010378 <CPU::detectFeatures()+0x20a>
c0010369:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010373:	e9 c1 01 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c0010378:	50                   	push   eax
c0010379:	50                   	push   eax
c001037a:	68 49 1d 02 c0       	push   0xc0021d49
c001037f:	55                   	push   ebp
c0010380:	e8 fb 03 ff ff       	call   c0000780 <strcmp>
c0010385:	83 c4 10             	add    esp,0x10
c0010388:	85 c0                	test   eax,eax
c001038a:	74 23                	je     c00103af <CPU::detectFeatures()+0x241>
c001038c:	57                   	push   edi
c001038d:	57                   	push   edi
c001038e:	68 56 1d 02 c0       	push   0xc0021d56
c0010393:	55                   	push   ebp
c0010394:	e8 e7 03 ff ff       	call   c0000780 <strcmp>
c0010399:	83 c4 10             	add    esp,0x10
c001039c:	85 c0                	test   eax,eax
c001039e:	75 1e                	jne    c00103be <CPU::detectFeatures()+0x250>
c00103a0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00103aa:	e9 8a 01 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c00103af:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00103b9:	e9 7b 01 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c00103be:	56                   	push   esi
c00103bf:	56                   	push   esi
c00103c0:	68 63 1d 02 c0       	push   0xc0021d63
c00103c5:	55                   	push   ebp
c00103c6:	e8 b5 03 ff ff       	call   c0000780 <strcmp>
c00103cb:	83 c4 10             	add    esp,0x10
c00103ce:	85 c0                	test   eax,eax
c00103d0:	75 0f                	jne    c00103e1 <CPU::detectFeatures()+0x273>
c00103d2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00103dc:	e9 58 01 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c00103e1:	51                   	push   ecx
c00103e2:	51                   	push   ecx
c00103e3:	68 22 1d 02 c0       	push   0xc0021d22
c00103e8:	55                   	push   ebp
c00103e9:	e8 92 03 ff ff       	call   c0000780 <strcmp>
c00103ee:	83 c4 10             	add    esp,0x10
c00103f1:	85 c0                	test   eax,eax
c00103f3:	75 0f                	jne    c0010404 <CPU::detectFeatures()+0x296>
c00103f5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00103ff:	e9 35 01 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c0010404:	52                   	push   edx
c0010405:	52                   	push   edx
c0010406:	68 70 1d 02 c0       	push   0xc0021d70
c001040b:	55                   	push   ebp
c001040c:	e8 6f 03 ff ff       	call   c0000780 <strcmp>
c0010411:	83 c4 10             	add    esp,0x10
c0010414:	85 c0                	test   eax,eax
c0010416:	75 0f                	jne    c0010427 <CPU::detectFeatures()+0x2b9>
c0010418:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010422:	e9 12 01 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c0010427:	50                   	push   eax
c0010428:	50                   	push   eax
c0010429:	68 7d 1d 02 c0       	push   0xc0021d7d
c001042e:	55                   	push   ebp
c001042f:	e8 4c 03 ff ff       	call   c0000780 <strcmp>
c0010434:	83 c4 10             	add    esp,0x10
c0010437:	85 c0                	test   eax,eax
c0010439:	75 0f                	jne    c001044a <CPU::detectFeatures()+0x2dc>
c001043b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010445:	e9 ef 00 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c001044a:	50                   	push   eax
c001044b:	50                   	push   eax
c001044c:	68 8a 1d 02 c0       	push   0xc0021d8a
c0010451:	55                   	push   ebp
c0010452:	e8 29 03 ff ff       	call   c0000780 <strcmp>
c0010457:	83 c4 10             	add    esp,0x10
c001045a:	85 c0                	test   eax,eax
c001045c:	75 0f                	jne    c001046d <CPU::detectFeatures()+0x2ff>
c001045e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010468:	e9 cc 00 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c001046d:	50                   	push   eax
c001046e:	50                   	push   eax
c001046f:	68 97 1d 02 c0       	push   0xc0021d97
c0010474:	55                   	push   ebp
c0010475:	e8 06 03 ff ff       	call   c0000780 <strcmp>
c001047a:	83 c4 10             	add    esp,0x10
c001047d:	85 c0                	test   eax,eax
c001047f:	75 0f                	jne    c0010490 <CPU::detectFeatures()+0x322>
c0010481:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001048b:	e9 a9 00 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c0010490:	50                   	push   eax
c0010491:	50                   	push   eax
c0010492:	68 a4 1d 02 c0       	push   0xc0021da4
c0010497:	55                   	push   ebp
c0010498:	e8 e3 02 ff ff       	call   c0000780 <strcmp>
c001049d:	83 c4 10             	add    esp,0x10
c00104a0:	85 c0                	test   eax,eax
c00104a2:	75 0f                	jne    c00104b3 <CPU::detectFeatures()+0x345>
c00104a4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00104ae:	e9 86 00 00 00       	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c00104b3:	50                   	push   eax
c00104b4:	50                   	push   eax
c00104b5:	68 b1 1d 02 c0       	push   0xc0021db1
c00104ba:	55                   	push   ebp
c00104bb:	e8 c0 02 ff ff       	call   c0000780 <strcmp>
c00104c0:	83 c4 10             	add    esp,0x10
c00104c3:	85 c0                	test   eax,eax
c00104c5:	75 0c                	jne    c00104d3 <CPU::detectFeatures()+0x365>
c00104c7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00104d1:	eb 66                	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c00104d3:	50                   	push   eax
c00104d4:	50                   	push   eax
c00104d5:	68 be 1d 02 c0       	push   0xc0021dbe
c00104da:	55                   	push   ebp
c00104db:	e8 a0 02 ff ff       	call   c0000780 <strcmp>
c00104e0:	83 c4 10             	add    esp,0x10
c00104e3:	85 c0                	test   eax,eax
c00104e5:	75 0c                	jne    c00104f3 <CPU::detectFeatures()+0x385>
c00104e7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00104f1:	eb 46                	jmp    c0010539 <CPU::detectFeatures()+0x3cb>
c00104f3:	57                   	push   edi
c00104f4:	57                   	push   edi
c00104f5:	68 cb 1d 02 c0       	push   0xc0021dcb
c00104fa:	55                   	push   ebp
c00104fb:	e8 80 02 ff ff       	call   c0000780 <strcmp>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	85 c0                	test   eax,eax
c0010505:	74 e0                	je     c00104e7 <CPU::detectFeatures()+0x379>
c0010507:	56                   	push   esi
c0010508:	56                   	push   esi
c0010509:	68 d8 1d 02 c0       	push   0xc0021dd8
c001050e:	55                   	push   ebp
c001050f:	e8 6c 02 ff ff       	call   c0000780 <strcmp>
c0010514:	83 c4 10             	add    esp,0x10
c0010517:	85 c0                	test   eax,eax
c0010519:	74 cc                	je     c00104e7 <CPU::detectFeatures()+0x379>
c001051b:	51                   	push   ecx
c001051c:	51                   	push   ecx
c001051d:	68 e5 1d 02 c0       	push   0xc0021de5
c0010522:	55                   	push   ebp
c0010523:	e8 58 02 ff ff       	call   c0000780 <strcmp>
c0010528:	83 c4 10             	add    esp,0x10
c001052b:	85 c0                	test   eax,eax
c001052d:	74 b8                	je     c00104e7 <CPU::detectFeatures()+0x379>
c001052f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010539:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001053e:	0f 86 be 00 00 00    	jbe    c0010602 <CPU::detectFeatures()+0x494>
c0010544:	83 ec 0c             	sub    esp,0xc
c0010547:	68 80 00 00 00       	push   0x80
c001054c:	e8 31 fb ff ff       	call   c0010082 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010551:	83 e0 01             	and    eax,0x1
c0010554:	c1 e0 06             	shl    eax,0x6
c0010557:	89 c2                	mov    edx,eax
c0010559:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001055f:	83 e0 bf             	and    eax,0xffffffbf
c0010562:	09 d0                	or     eax,edx
c0010564:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001056a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010571:	e8 0c fb ff ff       	call   c0010082 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010576:	83 e0 01             	and    eax,0x1
c0010579:	c1 e0 04             	shl    eax,0x4
c001057c:	89 c2                	mov    edx,eax
c001057e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010584:	83 e0 ef             	and    eax,0xffffffef
c0010587:	09 d0                	or     eax,edx
c0010589:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001058f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010596:	e8 e7 fa ff ff       	call   c0010082 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001059b:	89 c2                	mov    edx,eax
c001059d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105a3:	c1 e2 07             	shl    edx,0x7
c00105a6:	83 e0 7f             	and    eax,0x7f
c00105a9:	09 d0                	or     eax,edx
c00105ab:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105b1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00105b8:	e8 f3 fa ff ff       	call   c00100b0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00105bd:	83 e0 01             	and    eax,0x1
c00105c0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105c7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105cd:	83 e0 f7             	and    eax,0xfffffff7
c00105d0:	09 d0                	or     eax,edx
c00105d2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105d8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00105df:	e8 cc fa ff ff       	call   c00100b0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00105e4:	83 c4 10             	add    esp,0x10
c00105e7:	83 e0 01             	and    eax,0x1
c00105ea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105f1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105f7:	83 e0 fb             	and    eax,0xfffffffb
c00105fa:	09 d0                	or     eax,edx
c00105fc:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010602:	83 ec 0c             	sub    esp,0xc
c0010605:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010609:	50                   	push   eax
c001060a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001060e:	50                   	push   eax
c001060f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010613:	57                   	push   edi
c0010614:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010618:	56                   	push   esi
c0010619:	6a 01                	push   0x1
c001061b:	e8 82 f9 ff ff       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010620:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010624:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001062a:	89 c1                	mov    ecx,eax
c001062c:	83 e1 0f             	and    ecx,0xf
c001062f:	83 e2 f0             	and    edx,0xfffffff0
c0010632:	09 ca                	or     edx,ecx
c0010634:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001063a:	89 c2                	mov    edx,eax
c001063c:	c1 ea 04             	shr    edx,0x4
c001063f:	83 e2 0f             	and    edx,0xf
c0010642:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010646:	89 d1                	mov    ecx,edx
c0010648:	83 c4 20             	add    esp,0x20
c001064b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010651:	c1 e1 06             	shl    ecx,0x6
c0010654:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001065a:	09 ca                	or     edx,ecx
c001065c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010663:	89 c2                	mov    edx,eax
c0010665:	c1 ea 08             	shr    edx,0x8
c0010668:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001066e:	83 e2 0f             	and    edx,0xf
c0010671:	89 d5                	mov    ebp,edx
c0010673:	83 e5 03             	and    ebp,0x3
c0010676:	c1 e5 06             	shl    ebp,0x6
c0010679:	83 e1 3f             	and    ecx,0x3f
c001067c:	09 e9                	or     ecx,ebp
c001067e:	89 d5                	mov    ebp,edx
c0010680:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010686:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001068c:	c1 ed 02             	shr    ebp,0x2
c001068f:	83 e1 c0             	and    ecx,0xffffffc0
c0010692:	09 e9                	or     ecx,ebp
c0010694:	89 c5                	mov    ebp,eax
c0010696:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001069c:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00106a2:	c1 ed 08             	shr    ebp,0x8
c00106a5:	83 e5 30             	and    ebp,0x30
c00106a8:	83 e1 cf             	and    ecx,0xffffffcf
c00106ab:	09 e9                	or     ecx,ebp
c00106ad:	83 fa 06             	cmp    edx,0x6
c00106b0:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00106b6:	74 05                	je     c00106bd <CPU::detectFeatures()+0x54f>
c00106b8:	83 fa 0f             	cmp    edx,0xf
c00106bb:	75 64                	jne    c0010721 <CPU::detectFeatures()+0x5b3>
c00106bd:	89 c1                	mov    ecx,eax
c00106bf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00106c5:	c1 e9 10             	shr    ecx,0x10
c00106c8:	c1 e1 04             	shl    ecx,0x4
c00106cb:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00106cf:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00106d5:	0f b6 c9             	movzx  ecx,cl
c00106d8:	c1 e1 06             	shl    ecx,0x6
c00106db:	09 e9                	or     ecx,ebp
c00106dd:	83 fa 0f             	cmp    edx,0xf
c00106e0:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00106e7:	75 38                	jne    c0010721 <CPU::detectFeatures()+0x5b3>
c00106e9:	c1 e8 14             	shr    eax,0x14
c00106ec:	83 c0 0f             	add    eax,0xf
c00106ef:	0f b6 c0             	movzx  eax,al
c00106f2:	89 c2                	mov    edx,eax
c00106f4:	c1 e8 02             	shr    eax,0x2
c00106f7:	83 e2 03             	and    edx,0x3
c00106fa:	89 d1                	mov    ecx,edx
c00106fc:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010702:	c1 e1 06             	shl    ecx,0x6
c0010705:	83 e2 3f             	and    edx,0x3f
c0010708:	09 ca                	or     edx,ecx
c001070a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010710:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010716:	83 e2 c0             	and    edx,0xffffffc0
c0010719:	09 d0                	or     eax,edx
c001071b:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010721:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010727:	83 ec 0c             	sub    esp,0xc
c001072a:	83 c8 07             	or     eax,0x7
c001072d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010733:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010737:	50                   	push   eax
c0010738:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001073c:	55                   	push   ebp
c001073d:	57                   	push   edi
c001073e:	56                   	push   esi
c001073f:	68 00 00 00 80       	push   0x80000000
c0010744:	e8 59 f8 ff ff       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010749:	83 c4 20             	add    esp,0x20
c001074c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010754:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010758:	76 1e                	jbe    c0010778 <CPU::detectFeatures()+0x60a>
c001075a:	83 ec 0c             	sub    esp,0xc
c001075d:	50                   	push   eax
c001075e:	55                   	push   ebp
c001075f:	57                   	push   edi
c0010760:	56                   	push   esi
c0010761:	68 01 00 00 80       	push   0x80000001
c0010766:	e8 37 f8 ff ff       	call   c000ffa2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001076b:	83 c4 20             	add    esp,0x20
c001076e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010778:	52                   	push   edx
c0010779:	52                   	push   edx
c001077a:	68 f1 1d 02 c0       	push   0xc0021df1
c001077f:	53                   	push   ebx
c0010780:	e8 29 c1 ff ff       	call   c000c8ae <Device::setName(char const*)>
c0010785:	83 c4 10             	add    esp,0x10
c0010788:	eb 69                	jmp    c00107f3 <CPU::detectFeatures()+0x685>
c001078a:	50                   	push   eax
c001078b:	50                   	push   eax
c001078c:	68 56 1d 02 c0       	push   0xc0021d56
c0010791:	55                   	push   ebp
c0010792:	e8 b9 fe fe ff       	call   c0000650 <strcpy>
c0010797:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00107a1:	e8 1d fa fe ff       	call   c00001c3 <is486>
c00107a6:	83 c4 10             	add    esp,0x10
c00107a9:	85 c0                	test   eax,eax
c00107ab:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107b1:	74 1f                	je     c00107d2 <CPU::detectFeatures()+0x664>
c00107b3:	83 c8 07             	or     eax,0x7
c00107b6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107bc:	0f 20 c0             	mov    eax,cr0
c00107bf:	83 e0 14             	and    eax,0x14
c00107c2:	83 f8 04             	cmp    eax,0x4
c00107c5:	75 10                	jne    c00107d7 <CPU::detectFeatures()+0x669>
c00107c7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107cd:	83 e0 fd             	and    eax,0xfffffffd
c00107d0:	eb 1b                	jmp    c00107ed <CPU::detectFeatures()+0x67f>
c00107d2:	83 e0 f8             	and    eax,0xfffffff8
c00107d5:	eb df                	jmp    c00107b6 <CPU::detectFeatures()+0x648>
c00107d7:	e8 c2 f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107dc:	83 e0 01             	and    eax,0x1
c00107df:	8d 14 00             	lea    edx,[eax+eax*1]
c00107e2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107e8:	83 e0 fd             	and    eax,0xfffffffd
c00107eb:	09 d0                	or     eax,edx
c00107ed:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107f3:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00107fa:	74 17                	je     c0010813 <CPU::detectFeatures()+0x6a5>
c00107fc:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010802:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010808:	83 c8 10             	or     eax,0x10
c001080b:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010811:	eb 20                	jmp    c0010833 <CPU::detectFeatures()+0x6c5>
c0010813:	e8 86 f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010818:	83 e0 01             	and    eax,0x1
c001081b:	8d 14 00             	lea    edx,[eax+eax*1]
c001081e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010824:	83 e0 fd             	and    eax,0xfffffffd
c0010827:	09 d0                	or     eax,edx
c0010829:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001082f:	a8 02                	test   al,0x2
c0010831:	75 c9                	jne    c00107fc <CPU::detectFeatures()+0x68e>
c0010833:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001083a:	83 c4 2c             	add    esp,0x2c
c001083d:	5b                   	pop    ebx
c001083e:	5e                   	pop    esi
c001083f:	5f                   	pop    edi
c0010840:	5d                   	pop    ebp
c0010841:	c3                   	ret    

c0010842 <CPU::setupSMEP()>:
c0010842:	0f 20 e0             	mov    eax,cr4
c0010845:	0d 00 00 10 00       	or     eax,0x100000
c001084a:	0f 22 e0             	mov    cr4,eax
c001084d:	c3                   	ret    

c001084e <CPU::setupUMIP()>:
c001084e:	0f 20 e0             	mov    eax,cr4
c0010851:	80 cc 08             	or     ah,0x8
c0010854:	0f 22 e0             	mov    cr4,eax
c0010857:	c3                   	ret    

c0010858 <CPU::setupTSC()>:
c0010858:	0f 20 e0             	mov    eax,cr4
c001085b:	83 c8 04             	or     eax,0x4
c001085e:	0f 22 e0             	mov    cr4,eax
c0010861:	c3                   	ret    

c0010862 <CPU::setupLargePages()>:
c0010862:	0f 20 e0             	mov    eax,cr4
c0010865:	83 c8 10             	or     eax,0x10
c0010868:	0f 22 e0             	mov    cr4,eax
c001086b:	c3                   	ret    

c001086c <CPU::setupPAT()>:
c001086c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010871:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010878:	74 2c                	je     c00108a6 <CPU::setupPAT()+0x3a>
c001087a:	53                   	push   ebx
c001087b:	83 ec 10             	sub    esp,0x10
c001087e:	68 77 02 00 00       	push   0x277
c0010883:	50                   	push   eax
c0010884:	e8 59 68 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010889:	83 e2 f8             	and    edx,0xfffffff8
c001088c:	83 ca 01             	or     edx,0x1
c001088f:	52                   	push   edx
c0010890:	50                   	push   eax
c0010891:	68 77 02 00 00       	push   0x277
c0010896:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001089c:	e8 6d 68 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00108a1:	83 c4 28             	add    esp,0x28
c00108a4:	5b                   	pop    ebx
c00108a5:	c3                   	ret    
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <CPU::setupMTRR()>:
c00108a8:	c3                   	ret    
c00108a9:	90                   	nop

c00108aa <CPU::setupGlobalPages()>:
c00108aa:	0f 20 e0             	mov    eax,cr4
c00108ad:	0c 80                	or     al,0x80
c00108af:	0f 22 e0             	mov    cr4,eax
c00108b2:	c3                   	ret    
c00108b3:	90                   	nop

c00108b4 <CPU::allowUsermodeDataAccess()>:
c00108b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108bf:	74 03                	je     c00108c4 <CPU::allowUsermodeDataAccess()+0x10>
c00108c1:	0f 01 cb             	stac   
c00108c4:	c3                   	ret    
c00108c5:	90                   	nop

c00108c6 <CPU::prohibitUsermodeDataAccess()>:
c00108c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ca:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108d1:	74 03                	je     c00108d6 <CPU::prohibitUsermodeDataAccess()+0x10>
c00108d3:	0f 01 ca             	clac   
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <CPU::setupSMAP()>:
c00108d8:	0f 20 e0             	mov    eax,cr4
c00108db:	0d 00 00 20 00       	or     eax,0x200000
c00108e0:	0f 22 e0             	mov    cr4,eax
c00108e3:	eb e1                	jmp    c00108c6 <CPU::prohibitUsermodeDataAccess()>
c00108e5:	90                   	nop

c00108e6 <CPU::setupFeatures()>:
c00108e6:	53                   	push   ebx
c00108e7:	83 ec 08             	sub    esp,0x8
c00108ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108ee:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00108f5:	74 18                	je     c001090f <CPU::setupFeatures()+0x29>
c00108f7:	83 ec 0c             	sub    esp,0xc
c00108fa:	68 fd 1d 02 c0       	push   0xc0021dfd
c00108ff:	e8 06 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010904:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010907:	e8 42 ff ff ff       	call   c001084e <CPU::setupUMIP()>
c001090c:	83 c4 10             	add    esp,0x10
c001090f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010916:	74 18                	je     c0010930 <CPU::setupFeatures()+0x4a>
c0010918:	83 ec 0c             	sub    esp,0xc
c001091b:	68 07 1e 02 c0       	push   0xc0021e07
c0010920:	e8 e5 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010925:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010928:	e8 2b ff ff ff       	call   c0010858 <CPU::setupTSC()>
c001092d:	83 c4 10             	add    esp,0x10
c0010930:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010937:	74 18                	je     c0010951 <CPU::setupFeatures()+0x6b>
c0010939:	83 ec 0c             	sub    esp,0xc
c001093c:	68 10 1e 02 c0       	push   0xc0021e10
c0010941:	e8 c4 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010946:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010949:	e8 14 ff ff ff       	call   c0010862 <CPU::setupLargePages()>
c001094e:	83 c4 10             	add    esp,0x10
c0010951:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010958:	74 18                	je     c0010972 <CPU::setupFeatures()+0x8c>
c001095a:	83 ec 0c             	sub    esp,0xc
c001095d:	68 19 1e 02 c0       	push   0xc0021e19
c0010962:	e8 a3 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010967:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001096a:	e8 3b ff ff ff       	call   c00108aa <CPU::setupGlobalPages()>
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010979:	74 18                	je     c0010993 <CPU::setupFeatures()+0xad>
c001097b:	83 ec 0c             	sub    esp,0xc
c001097e:	68 2b 1e 02 c0       	push   0xc0021e2b
c0010983:	e8 82 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010988:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001098b:	e8 dc fe ff ff       	call   c001086c <CPU::setupPAT()>
c0010990:	83 c4 10             	add    esp,0x10
c0010993:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001099a:	74 11                	je     c00109ad <CPU::setupFeatures()+0xc7>
c001099c:	c7 44 24 10 34 1e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021e34
c00109a4:	83 c4 08             	add    esp,0x8
c00109a7:	5b                   	pop    ebx
c00109a8:	e9 5d 9f ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c00109ad:	83 c4 08             	add    esp,0x8
c00109b0:	5b                   	pop    ebx
c00109b1:	c3                   	ret    

c00109b2 <CPU::open(int, int, void*)>:
c00109b2:	55                   	push   ebp
c00109b3:	57                   	push   edi
c00109b4:	56                   	push   esi
c00109b5:	53                   	push   ebx
c00109b6:	83 ec 18             	sub    esp,0x18
c00109b9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00109c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00109c5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00109cb:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00109d1:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00109d7:	50                   	push   eax
c00109d8:	e8 01 6a ff ff       	call   c00073de <GDT::setup()>
c00109dd:	83 c4 0c             	add    esp,0xc
c00109e0:	6a 00                	push   0x0
c00109e2:	68 ef be ad de       	push   0xdeadbeef
c00109e7:	55                   	push   ebp
c00109e8:	e8 83 85 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c00109ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00109f0:	e8 5b 85 ff ff       	call   c0008f50 <TSS::flush()>
c00109f5:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00109fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00109fe:	e8 3f 6c ff ff       	call   c0007642 <IDT::setup()>
c0010a03:	b8 00 04 00 00       	mov    eax,0x400
c0010a08:	0f 23 f8             	mov    db7,eax
c0010a0b:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010a15:	e8 c8 73 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010a1a:	83 c4 10             	add    esp,0x10
c0010a1d:	85 f6                	test   esi,esi
c0010a1f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010a25:	89 38                	mov    DWORD PTR [eax],edi
c0010a27:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010a2d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a30:	74 10                	je     c0010a42 <CPU::open(int, int, void*)+0x90>
c0010a32:	50                   	push   eax
c0010a33:	50                   	push   eax
c0010a34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010a3a:	56                   	push   esi
c0010a3b:	e8 4c 8e ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010a40:	eb 0d                	jmp    c0010a4f <CPU::open(int, int, void*)+0x9d>
c0010a42:	83 ec 0c             	sub    esp,0xc
c0010a45:	68 3e 1e 02 c0       	push   0xc0021e3e
c0010a4a:	e8 72 08 00 00       	call   c00112c1 <KePanic(char const*)>
c0010a4f:	83 c4 10             	add    esp,0x10
c0010a52:	83 ec 0c             	sub    esp,0xc
c0010a55:	68 4c 1e 02 c0       	push   0xc0021e4c
c0010a5a:	e8 8e 01 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0010a5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a62:	e8 07 f7 ff ff       	call   c001016e <CPU::detectFeatures()>
c0010a67:	c7 04 24 6f 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e6f
c0010a6e:	e8 7a 01 00 00       	call   c0010bed <KeSetBootMessage(char const*)>
c0010a73:	e8 07 73 00 00       	call   c0017d7f <HalInitialise()>
c0010a78:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010a7d:	83 e0 10             	and    eax,0x10
c0010a80:	83 f8 01             	cmp    eax,0x1
c0010a83:	19 c0                	sbb    eax,eax
c0010a85:	83 e0 46             	and    eax,0x46
c0010a88:	83 c0 1e             	add    eax,0x1e
c0010a8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a8e:	e8 c2 d6 ff ff       	call   c000e155 <setupTimer(int)>
c0010a93:	83 c4 10             	add    esp,0x10
c0010a96:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010a9d:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010aa3:	74 0c                	je     c0010ab1 <CPU::open(int, int, void*)+0xff>
c0010aa5:	83 ec 0c             	sub    esp,0xc
c0010aa8:	53                   	push   ebx
c0010aa9:	e8 38 fe ff ff       	call   c00108e6 <CPU::setupFeatures()>
c0010aae:	83 c4 10             	add    esp,0x10
c0010ab1:	83 c4 0c             	add    esp,0xc
c0010ab4:	31 c0                	xor    eax,eax
c0010ab6:	5b                   	pop    ebx
c0010ab7:	5e                   	pop    esi
c0010ab8:	5f                   	pop    edi
c0010ab9:	5d                   	pop    ebp
c0010aba:	c3                   	ret    

c0010abb <KeInitialiseAtexit()>:
c0010abb:	83 ec 10             	sub    esp,0x10
c0010abe:	6a 60                	push   0x60
c0010ac0:	6a 00                	push   0x0
c0010ac2:	68 20 8e 02 c0       	push   0xc0028e20
c0010ac7:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010ad1:	e8 1a fa fe ff       	call   c00004f0 <memset>
c0010ad6:	83 c4 1c             	add    esp,0x1c
c0010ad9:	c3                   	ret    

c0010ada <KeRegisterAtexit(void (*)(void*), void*)>:
c0010ada:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010adf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010ae3:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010aea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aee:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010af5:	40                   	inc    eax
c0010af6:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010afb:	83 f8 17             	cmp    eax,0x17
c0010afe:	7e 0d                	jle    c0010b0d <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010b00:	c7 44 24 04 b0 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021eb0
c0010b08:	e9 b4 07 00 00       	jmp    c00112c1 <KePanic(char const*)>
c0010b0d:	c3                   	ret    

c0010b0e <KeExecuteAtexit()>:
c0010b0e:	53                   	push   ebx
c0010b0f:	31 db                	xor    ebx,ebx
c0010b11:	83 ec 08             	sub    esp,0x8
c0010b14:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010b1a:	7e 50                	jle    c0010b6c <KeExecuteAtexit()+0x5e>
c0010b1c:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010b23:	85 c0                	test   eax,eax
c0010b25:	74 42                	je     c0010b69 <KeExecuteAtexit()+0x5b>
c0010b27:	51                   	push   ecx
c0010b28:	50                   	push   eax
c0010b29:	53                   	push   ebx
c0010b2a:	68 c9 1e 02 c0       	push   0xc0021ec9
c0010b2f:	e8 d6 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b34:	58                   	pop    eax
c0010b35:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010b3c:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010b43:	c7 04 24 eb 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eeb
c0010b4a:	e8 bb 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b4f:	c7 04 24 4b 30 02 c0 	mov    DWORD PTR [esp],0xc002304b
c0010b56:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010b61:	e8 a4 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b66:	83 c4 10             	add    esp,0x10
c0010b69:	43                   	inc    ebx
c0010b6a:	eb a8                	jmp    c0010b14 <KeExecuteAtexit()+0x6>
c0010b6c:	83 c4 08             	add    esp,0x8
c0010b6f:	5b                   	pop    ebx
c0010b70:	c3                   	ret    

c0010b71 <KeDisplaySplashScreen()>:
c0010b71:	55                   	push   ebp
c0010b72:	bd 05 00 00 00       	mov    ebp,0x5
c0010b77:	57                   	push   edi
c0010b78:	bf 0a 00 00 00       	mov    edi,0xa
c0010b7d:	56                   	push   esi
c0010b7e:	31 f6                	xor    esi,esi
c0010b80:	53                   	push   ebx
c0010b81:	31 db                	xor    ebx,ebx
c0010b83:	83 ec 0c             	sub    esp,0xc
c0010b86:	0f b6 96 a0 32 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcd60]
c0010b8d:	85 d2                	test   edx,edx
c0010b8f:	89 d0                	mov    eax,edx
c0010b91:	74 52                	je     c0010be5 <KeDisplaySplashScreen()+0x74>
c0010b93:	80 bb d6 32 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcd2a],0xdb
c0010b9a:	75 13                	jne    c0010baf <KeDisplaySplashScreen()+0x3e>
c0010b9c:	0f b6 8b d5 32 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcd2b]
c0010ba3:	83 e1 fe             	and    ecx,0xfffffffe
c0010ba6:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010bac:	75 01                	jne    c0010baf <KeDisplaySplashScreen()+0x3e>
c0010bae:	47                   	inc    edi
c0010baf:	83 fa 0d             	cmp    edx,0xd
c0010bb2:	74 28                	je     c0010bdc <KeDisplaySplashScreen()+0x6b>
c0010bb4:	83 fa 0a             	cmp    edx,0xa
c0010bb7:	75 0a                	jne    c0010bc3 <KeDisplaySplashScreen()+0x52>
c0010bb9:	45                   	inc    ebp
c0010bba:	bf 0a 00 00 00       	mov    edi,0xa
c0010bbf:	31 db                	xor    ebx,ebx
c0010bc1:	eb 19                	jmp    c0010bdc <KeDisplaySplashScreen()+0x6b>
c0010bc3:	83 ec 0c             	sub    esp,0xc
c0010bc6:	0f be c0             	movsx  eax,al
c0010bc9:	55                   	push   ebp
c0010bca:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010bcd:	43                   	inc    ebx
c0010bce:	52                   	push   edx
c0010bcf:	6a 00                	push   0x0
c0010bd1:	6a 0e                	push   0xe
c0010bd3:	50                   	push   eax
c0010bd4:	e8 23 7e 00 00       	call   c00189fc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010bd9:	83 c4 20             	add    esp,0x20
c0010bdc:	46                   	inc    esi
c0010bdd:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010be3:	75 a1                	jne    c0010b86 <KeDisplaySplashScreen()+0x15>
c0010be5:	83 c4 0c             	add    esp,0xc
c0010be8:	5b                   	pop    ebx
c0010be9:	5e                   	pop    esi
c0010bea:	5f                   	pop    edi
c0010beb:	5d                   	pop    ebp
c0010bec:	c3                   	ret    

c0010bed <KeSetBootMessage(char const*)>:
c0010bed:	57                   	push   edi
c0010bee:	56                   	push   esi
c0010bef:	53                   	push   ebx
c0010bf0:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010bf6:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010bfd:	68 9e 00 00 00       	push   0x9e
c0010c02:	6a 00                	push   0x0
c0010c04:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010c08:	56                   	push   esi
c0010c09:	e8 e2 f8 fe ff       	call   c00004f0 <memset>
c0010c0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c11:	e8 6a f9 fe ff       	call   c0000580 <strlen>
c0010c16:	ba 50 00 00 00       	mov    edx,0x50
c0010c1b:	83 c4 10             	add    esp,0x10
c0010c1e:	31 c9                	xor    ecx,ecx
c0010c20:	29 c2                	sub    edx,eax
c0010c22:	83 e2 fe             	and    edx,0xfffffffe
c0010c25:	01 f2                	add    edx,esi
c0010c27:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010c2c:	84 c0                	test   al,al
c0010c2e:	74 0a                	je     c0010c3a <KeSetBootMessage(char const*)+0x4d>
c0010c30:	80 cc 0f             	or     ah,0xf
c0010c33:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010c37:	41                   	inc    ecx
c0010c38:	eb ed                	jmp    c0010c27 <KeSetBootMessage(char const*)+0x3a>
c0010c3a:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010c3f:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010c44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c46:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010c4c:	5b                   	pop    ebx
c0010c4d:	5e                   	pop    esi
c0010c4e:	5f                   	pop    edi
c0010c4f:	c3                   	ret    

c0010c50 <Krnl::handlePowerButton()>:
c0010c50:	83 ec 0c             	sub    esp,0xc
c0010c53:	e8 c4 06 00 00       	call   c001131c <KeHandlePowerButton()>
c0010c58:	90                   	nop
c0010c59:	83 c4 0c             	add    esp,0xc
c0010c5c:	c3                   	ret    
c0010c5d:	8d 76 00             	lea    esi,[esi+0x0]

c0010c60 <Krnl::handleSleepButton()>:
c0010c60:	83 ec 0c             	sub    esp,0xc
c0010c63:	e8 e9 06 00 00       	call   c0011351 <KeHandleSleepButton()>
c0010c68:	90                   	nop
c0010c69:	83 c4 0c             	add    esp,0xc
c0010c6c:	c3                   	ret    
c0010c6d:	90                   	nop

c0010c6e <EnvVarContainer::getEnv(char const*)>:
c0010c6e:	57                   	push   edi
c0010c6f:	56                   	push   esi
c0010c70:	53                   	push   ebx
c0010c71:	31 db                	xor    ebx,ebx
c0010c73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c77:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010c79:	7e 2b                	jle    c0010ca6 <EnvVarContainer::getEnv(char const*)+0x38>
c0010c7b:	50                   	push   eax
c0010c7c:	50                   	push   eax
c0010c7d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c80:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010c87:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010c8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010c8e:	e8 ed fa fe ff       	call   c0000780 <strcmp>
c0010c93:	83 c4 10             	add    esp,0x10
c0010c96:	85 c0                	test   eax,eax
c0010c98:	75 09                	jne    c0010ca3 <EnvVarContainer::getEnv(char const*)+0x35>
c0010c9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c9d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010ca1:	eb 05                	jmp    c0010ca8 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010ca3:	43                   	inc    ebx
c0010ca4:	eb d1                	jmp    c0010c77 <EnvVarContainer::getEnv(char const*)+0x9>
c0010ca6:	31 c0                	xor    eax,eax
c0010ca8:	5b                   	pop    ebx
c0010ca9:	5e                   	pop    esi
c0010caa:	5f                   	pop    edi
c0010cab:	c3                   	ret    

c0010cac <EnvVarContainer::setEnv(char const*, char const*)>:
c0010cac:	55                   	push   ebp
c0010cad:	57                   	push   edi
c0010cae:	56                   	push   esi
c0010caf:	53                   	push   ebx
c0010cb0:	83 ec 28             	sub    esp,0x28
c0010cb3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010cb7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010cbb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010cbf:	56                   	push   esi
c0010cc0:	e8 bb f8 fe ff       	call   c0000580 <strlen>
c0010cc5:	40                   	inc    eax
c0010cc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cc9:	e8 05 6e ff ff       	call   c0007ad3 <malloc>
c0010cce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010cd5:	e8 a6 f8 fe ff       	call   c0000580 <strlen>
c0010cda:	40                   	inc    eax
c0010cdb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cde:	e8 f0 6d ff ff       	call   c0007ad3 <malloc>
c0010ce3:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ce6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010cea:	e8 91 f8 fe ff       	call   c0000580 <strlen>
c0010cef:	83 c4 0c             	add    esp,0xc
c0010cf2:	40                   	inc    eax
c0010cf3:	50                   	push   eax
c0010cf4:	6a 00                	push   0x0
c0010cf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010cfa:	e8 f1 f7 fe ff       	call   c00004f0 <memset>
c0010cff:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d02:	e8 79 f8 fe ff       	call   c0000580 <strlen>
c0010d07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d0b:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d13:	89 de                	mov    esi,ebx
c0010d15:	e8 66 f8 fe ff       	call   c0000580 <strlen>
c0010d1a:	83 c4 0c             	add    esp,0xc
c0010d1d:	40                   	inc    eax
c0010d1e:	50                   	push   eax
c0010d1f:	6a 00                	push   0x0
c0010d21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d25:	e8 c6 f7 fe ff       	call   c00004f0 <memset>
c0010d2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d2d:	e8 4e f8 fe ff       	call   c0000580 <strlen>
c0010d32:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010d36:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d3b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d3e:	40                   	inc    eax
c0010d3f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d42:	c1 e0 03             	shl    eax,0x3
c0010d45:	5a                   	pop    edx
c0010d46:	59                   	pop    ecx
c0010d47:	50                   	push   eax
c0010d48:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010d4b:	e8 6f 6d ff ff       	call   c0007abf <realloc>
c0010d50:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d53:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010d57:	b9 08 00 00 00       	mov    ecx,0x8
c0010d5c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d5f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010d63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d65:	83 c4 2c             	add    esp,0x2c
c0010d68:	5b                   	pop    ebx
c0010d69:	5e                   	pop    esi
c0010d6a:	5f                   	pop    edi
c0010d6b:	5d                   	pop    ebp
c0010d6c:	c3                   	ret    
c0010d6d:	90                   	nop

c0010d6e <EnvVarContainer::deleteEnv(char const*)>:
c0010d6e:	c3                   	ret    
c0010d6f:	90                   	nop

c0010d70 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010d70:	55                   	push   ebp
c0010d71:	57                   	push   edi
c0010d72:	56                   	push   esi
c0010d73:	53                   	push   ebx
c0010d74:	81 ec 38 01 00 00    	sub    esp,0x138
c0010d7a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010d81:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010d88:	68 14 01 00 00       	push   0x114
c0010d8d:	e8 41 6d ff ff       	call   c0007ad3 <malloc>
c0010d92:	83 c4 0c             	add    esp,0xc
c0010d95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010d98:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010d9f:	89 c3                	mov    ebx,eax
c0010da1:	50                   	push   eax
c0010da2:	e8 ff aa ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0010da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010daa:	e8 d9 ad ff ff       	call   c000bb88 <File::exists()>
c0010daf:	83 c4 10             	add    esp,0x10
c0010db2:	84 c0                	test   al,al
c0010db4:	75 31                	jne    c0010de7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010db6:	50                   	push   eax
c0010db7:	50                   	push   eax
c0010db8:	6a 12                	push   0x12
c0010dba:	53                   	push   ebx
c0010dbb:	e8 04 ab ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c0010dc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dc2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010dc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dc8:	e8 b3 f7 fe ff       	call   c0000580 <strlen>
c0010dcd:	5a                   	pop    edx
c0010dce:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010dd2:	52                   	push   edx
c0010dd3:	31 d2                	xor    edx,edx
c0010dd5:	56                   	push   esi
c0010dd6:	52                   	push   edx
c0010dd7:	50                   	push   eax
c0010dd8:	53                   	push   ebx
c0010dd9:	ff d7                	call   edi
c0010ddb:	83 c4 14             	add    esp,0x14
c0010dde:	53                   	push   ebx
c0010ddf:	e8 3e ab ff ff       	call   c000b922 <File::close()>
c0010de4:	83 c4 10             	add    esp,0x10
c0010de7:	56                   	push   esi
c0010de8:	31 f6                	xor    esi,esi
c0010dea:	68 00 01 00 00       	push   0x100
c0010def:	6a 00                	push   0x0
c0010df1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010df5:	50                   	push   eax
c0010df6:	e8 f5 f6 fe ff       	call   c00004f0 <memset>
c0010dfb:	5f                   	pop    edi
c0010dfc:	58                   	pop    eax
c0010dfd:	6a 01                	push   0x1
c0010dff:	53                   	push   ebx
c0010e00:	e8 bf aa ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c0010e05:	83 c4 10             	add    esp,0x10
c0010e08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e10:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e18:	83 ec 0c             	sub    esp,0xc
c0010e1b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010e1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e21:	52                   	push   edx
c0010e22:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010e26:	51                   	push   ecx
c0010e27:	6a 00                	push   0x0
c0010e29:	6a 01                	push   0x1
c0010e2b:	53                   	push   ebx
c0010e2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010e2f:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010e34:	83 c4 20             	add    esp,0x20
c0010e37:	85 c0                	test   eax,eax
c0010e39:	89 c1                	mov    ecx,eax
c0010e3b:	0f 84 36 01 00 00    	je     c0010f77 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010e41:	83 f8 0d             	cmp    eax,0xd
c0010e44:	0f 84 22 01 00 00    	je     c0010f6c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e4f:	0f 84 f0 00 00 00    	je     c0010f45 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010e55:	83 f8 0a             	cmp    eax,0xa
c0010e58:	74 13                	je     c0010e6d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e5f:	74 0c                	je     c0010e6d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e61:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e67:	0f 8e f6 00 00 00    	jle    c0010f63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010e6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	8d 78 01             	lea    edi,[eax+0x1]
c0010e77:	57                   	push   edi
c0010e78:	e8 56 6c ff ff       	call   c0007ad3 <malloc>
c0010e7d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010e81:	8d 56 04             	lea    edx,[esi+0x4]
c0010e84:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010e8b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010e8f:	e8 3f 6c ff ff       	call   c0007ad3 <malloc>
c0010e94:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010e98:	83 c4 0c             	add    esp,0xc
c0010e9b:	57                   	push   edi
c0010e9c:	6a 00                	push   0x0
c0010e9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ea2:	e8 49 f6 fe ff       	call   c00004f0 <memset>
c0010ea7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010eab:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010eaf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010eb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010eb5:	83 c4 0c             	add    esp,0xc
c0010eb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010ebc:	52                   	push   edx
c0010ebd:	6a 00                	push   0x0
c0010ebf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ec3:	e8 28 f6 fe ff       	call   c00004f0 <memset>
c0010ec8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010ecc:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010ed0:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ed3:	e8 a8 f6 fe ff       	call   c0000580 <strlen>
c0010ed8:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010edc:	89 c1                	mov    ecx,eax
c0010ede:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ee0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010ee9:	40                   	inc    eax
c0010eea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010eed:	85 d2                	test   edx,edx
c0010eef:	75 0c                	jne    c0010efd <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010ef1:	83 ec 0c             	sub    esp,0xc
c0010ef4:	6a 08                	push   0x8
c0010ef6:	e8 d8 6b ff ff       	call   c0007ad3 <malloc>
c0010efb:	eb 0c                	jmp    c0010f09 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010efd:	51                   	push   ecx
c0010efe:	51                   	push   ecx
c0010eff:	c1 e0 03             	shl    eax,0x3
c0010f02:	50                   	push   eax
c0010f03:	52                   	push   edx
c0010f04:	e8 b6 6b ff ff       	call   c0007abf <realloc>
c0010f09:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010f0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010f15:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010f19:	b9 08 00 00 00       	mov    ecx,0x8
c0010f1e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010f22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f24:	50                   	push   eax
c0010f25:	31 f6                	xor    esi,esi
c0010f27:	68 00 01 00 00       	push   0x100
c0010f2c:	6a 00                	push   0x0
c0010f2e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010f32:	50                   	push   eax
c0010f33:	e8 b8 f5 fe ff       	call   c00004f0 <memset>
c0010f38:	83 c4 10             	add    esp,0x10
c0010f3b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f43:	eb 27                	jmp    c0010f6c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f45:	83 f8 3d             	cmp    eax,0x3d
c0010f48:	74 1e                	je     c0010f68 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010f4a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f50:	7f 07                	jg     c0010f59 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010f52:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010f56:	46                   	inc    esi
c0010f57:	eb 13                	jmp    c0010f6c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f59:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010f61:	eb 09                	jmp    c0010f6c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f63:	83 f8 3d             	cmp    eax,0x3d
c0010f66:	75 ea                	jne    c0010f52 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010f68:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010f6c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f71:	0f 85 99 fe ff ff    	jne    c0010e10 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f77:	83 ec 0c             	sub    esp,0xc
c0010f7a:	53                   	push   ebx
c0010f7b:	e8 a2 a9 ff ff       	call   c000b922 <File::close()>
c0010f80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f88:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010f8e:	5b                   	pop    ebx
c0010f8f:	5e                   	pop    esi
c0010f90:	5f                   	pop    edi
c0010f91:	5d                   	pop    ebp
c0010f92:	c3                   	ret    
c0010f93:	90                   	nop

c0010f94 <EnvVarContainer::__loadSystem()>:
c0010f94:	83 ec 10             	sub    esp,0x10
c0010f97:	68 00 34 02 c0       	push   0xc0023400
c0010f9c:	68 f0 1e 02 c0       	push   0xc0021ef0
c0010fa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fa5:	e8 c6 fd ff ff       	call   c0010d70 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010faa:	83 c4 1c             	add    esp,0x1c
c0010fad:	c3                   	ret    

c0010fae <EnvVarContainer::__loadUser()>:
c0010fae:	c3                   	ret    
c0010faf:	90                   	nop

c0010fb0 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010fb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010fba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010fc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fd0:	90                   	nop
c0010fd1:	c3                   	ret    

c0010fd2 <EnvVarContainer::~EnvVarContainer()>:
c0010fd2:	83 ec 0c             	sub    esp,0xc
c0010fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fdc:	85 c0                	test   eax,eax
c0010fde:	74 1d                	je     c0010ffd <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fe6:	85 c0                	test   eax,eax
c0010fe8:	74 13                	je     c0010ffd <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff1:	83 ec 0c             	sub    esp,0xc
c0010ff4:	50                   	push   eax
c0010ff5:	e8 e9 6a ff ff       	call   c0007ae3 <free>
c0010ffa:	83 c4 10             	add    esp,0x10
c0010ffd:	90                   	nop
c0010ffe:	83 c4 0c             	add    esp,0xc
c0011001:	c3                   	ret    

c0011002 <KeGetEnv(Process*, char const*)>:
c0011002:	53                   	push   ebx
c0011003:	83 ec 08             	sub    esp,0x8
c0011006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100a:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0011010:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011014:	74 04                	je     c001101a <KeGetEnv(Process*, char const*)+0x18>
c0011016:	85 c0                	test   eax,eax
c0011018:	75 0b                	jne    c0011025 <KeGetEnv(Process*, char const*)+0x23>
c001101a:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001101f:	85 c0                	test   eax,eax
c0011021:	75 19                	jne    c001103c <KeGetEnv(Process*, char const*)+0x3a>
c0011023:	eb 27                	jmp    c001104c <KeGetEnv(Process*, char const*)+0x4a>
c0011025:	52                   	push   edx
c0011026:	52                   	push   edx
c0011027:	53                   	push   ebx
c0011028:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001102e:	e8 3b fc ff ff       	call   c0010c6e <EnvVarContainer::getEnv(char const*)>
c0011033:	83 c4 10             	add    esp,0x10
c0011036:	85 c0                	test   eax,eax
c0011038:	75 28                	jne    c0011062 <KeGetEnv(Process*, char const*)+0x60>
c001103a:	eb de                	jmp    c001101a <KeGetEnv(Process*, char const*)+0x18>
c001103c:	52                   	push   edx
c001103d:	52                   	push   edx
c001103e:	53                   	push   ebx
c001103f:	50                   	push   eax
c0011040:	e8 29 fc ff ff       	call   c0010c6e <EnvVarContainer::getEnv(char const*)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	85 c0                	test   eax,eax
c001104a:	75 16                	jne    c0011062 <KeGetEnv(Process*, char const*)+0x60>
c001104c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011050:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011055:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011059:	83 c4 08             	add    esp,0x8
c001105c:	5b                   	pop    ebx
c001105d:	e9 0c fc ff ff       	jmp    c0010c6e <EnvVarContainer::getEnv(char const*)>
c0011062:	83 c4 08             	add    esp,0x8
c0011065:	5b                   	pop    ebx
c0011066:	c3                   	ret    

c0011067 <KeSetEnvSystem(char const*, char const*)>:
c0011067:	83 ec 10             	sub    esp,0x10
c001106a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001106e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011072:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011078:	e8 2f fc ff ff       	call   c0010cac <EnvVarContainer::setEnv(char const*, char const*)>
c001107d:	83 c4 1c             	add    esp,0x1c
c0011080:	c3                   	ret    

c0011081 <KeSetEnvUser(char const*, char const*)>:
c0011081:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011086:	85 c0                	test   eax,eax
c0011088:	74 15                	je     c001109f <KeSetEnvUser(char const*, char const*)+0x1e>
c001108a:	83 ec 10             	sub    esp,0x10
c001108d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011091:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011095:	50                   	push   eax
c0011096:	e8 11 fc ff ff       	call   c0010cac <EnvVarContainer::setEnv(char const*, char const*)>
c001109b:	83 c4 1c             	add    esp,0x1c
c001109e:	c3                   	ret    
c001109f:	c3                   	ret    

c00110a0 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00110a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110a4:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00110aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110ae:	e9 f9 fb ff ff       	jmp    c0010cac <EnvVarContainer::setEnv(char const*, char const*)>

c00110b3 <KeDeleteEnvSystem(char const*)>:
c00110b3:	c3                   	ret    

c00110b4 <KeDeleteEnvUser(char const*)>:
c00110b4:	c3                   	ret    

c00110b5 <KeDeleteEnvProcess(Process*, char const*)>:
c00110b5:	c3                   	ret    

c00110b6 <KeNewProcessEnv(Process*)>:
c00110b6:	83 ec 28             	sub    esp,0x28
c00110b9:	6a 0c                	push   0xc
c00110bb:	e8 13 6a ff ff       	call   c0007ad3 <malloc>
c00110c0:	5a                   	pop    edx
c00110c1:	59                   	pop    ecx
c00110c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110c6:	50                   	push   eax
c00110c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110cb:	e8 e0 fe ff ff       	call   c0010fb0 <EnvVarContainer::EnvVarContainer(Process*)>
c00110d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110d4:	83 c4 2c             	add    esp,0x2c
c00110d7:	c3                   	ret    

c00110d8 <KeCopyProcessEnv(Process*, Process*)>:
c00110d8:	57                   	push   edi
c00110d9:	56                   	push   esi
c00110da:	53                   	push   ebx
c00110db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00110e8:	6a 0c                	push   0xc
c00110ea:	e8 e4 69 ff ff       	call   c0007ad3 <malloc>
c00110ef:	89 c3                	mov    ebx,eax
c00110f1:	58                   	pop    eax
c00110f2:	5a                   	pop    edx
c00110f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110f7:	53                   	push   ebx
c00110f8:	e8 b3 fe ff ff       	call   c0010fb0 <EnvVarContainer::EnvVarContainer(Process*)>
c00110fd:	8b 07                	mov    eax,DWORD PTR [edi]
c00110ff:	89 03                	mov    DWORD PTR [ebx],eax
c0011101:	c1 e0 03             	shl    eax,0x3
c0011104:	89 04 24             	mov    DWORD PTR [esp],eax
c0011107:	e8 c7 69 ff ff       	call   c0007ad3 <malloc>
c001110c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001110f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011111:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011114:	89 c7                	mov    edi,eax
c0011116:	c1 e1 03             	shl    ecx,0x3
c0011119:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001111b:	83 c4 10             	add    esp,0x10
c001111e:	89 d8                	mov    eax,ebx
c0011120:	5b                   	pop    ebx
c0011121:	5e                   	pop    esi
c0011122:	5f                   	pop    edi
c0011123:	c3                   	ret    

c0011124 <KeLoadSystemEnv()>:
c0011124:	53                   	push   ebx
c0011125:	83 ec 14             	sub    esp,0x14
c0011128:	6a 0c                	push   0xc
c001112a:	e8 a4 69 ff ff       	call   c0007ad3 <malloc>
c001112f:	89 c3                	mov    ebx,eax
c0011131:	58                   	pop    eax
c0011132:	5a                   	pop    edx
c0011133:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011139:	53                   	push   ebx
c001113a:	e8 71 fe ff ff       	call   c0010fb0 <EnvVarContainer::EnvVarContainer(Process*)>
c001113f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011142:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011148:	e8 47 fe ff ff       	call   c0010f94 <EnvVarContainer::__loadSystem()>
c001114d:	83 c4 18             	add    esp,0x18
c0011150:	5b                   	pop    ebx
c0011151:	c3                   	ret    

c0011152 <KeLoadUserEnv()>:
c0011152:	53                   	push   ebx
c0011153:	83 ec 14             	sub    esp,0x14
c0011156:	6a 0c                	push   0xc
c0011158:	e8 76 69 ff ff       	call   c0007ad3 <malloc>
c001115d:	89 c3                	mov    ebx,eax
c001115f:	58                   	pop    eax
c0011160:	5a                   	pop    edx
c0011161:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011167:	53                   	push   ebx
c0011168:	e8 43 fe ff ff       	call   c0010fb0 <EnvVarContainer::EnvVarContainer(Process*)>
c001116d:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c0011173:	83 c4 18             	add    esp,0x18
c0011176:	5b                   	pop    ebx
c0011177:	c3                   	ret    

c0011178 <KeFlushEnv()>:
c0011178:	c3                   	ret    

c0011179 <KeGetProcessTotalEnvCount(Process*)>:
c0011179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001117d:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c0011183:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011189:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001118e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011190:	03 01                	add    eax,DWORD PTR [ecx]
c0011192:	85 d2                	test   edx,edx
c0011194:	74 02                	je     c0011198 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011196:	03 02                	add    eax,DWORD PTR [edx]
c0011198:	c3                   	ret    

c0011199 <KeGetProcessEnvPair(Process*, int)>:
c0011199:	57                   	push   edi
c001119a:	56                   	push   esi
c001119b:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c00111a1:	53                   	push   ebx
c00111a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111aa:	85 f6                	test   esi,esi
c00111ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00111b0:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00111b8:	75 16                	jne    c00111d0 <KeGetProcessEnvPair(Process*, int)+0x37>
c00111ba:	39 c2                	cmp    edx,eax
c00111bc:	7c 16                	jl     c00111d4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111be:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00111c4:	8b 31                	mov    esi,DWORD PTR [ecx]
c00111c6:	01 c6                	add    esi,eax
c00111c8:	39 d6                	cmp    esi,edx
c00111ca:	7e 3c                	jle    c0011208 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111cc:	29 c2                	sub    edx,eax
c00111ce:	eb 04                	jmp    c00111d4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111d0:	39 c2                	cmp    edx,eax
c00111d2:	7d 05                	jge    c00111d9 <KeGetProcessEnvPair(Process*, int)+0x40>
c00111d4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00111d7:	eb 20                	jmp    c00111f9 <KeGetProcessEnvPair(Process*, int)+0x60>
c00111d9:	8b 3e                	mov    edi,DWORD PTR [esi]
c00111db:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00111de:	39 d1                	cmp    ecx,edx
c00111e0:	7e 04                	jle    c00111e6 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00111e2:	29 c2                	sub    edx,eax
c00111e4:	eb 10                	jmp    c00111f6 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00111e6:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00111ec:	03 0e                	add    ecx,DWORD PTR [esi]
c00111ee:	39 d1                	cmp    ecx,edx
c00111f0:	7e 16                	jle    c0011208 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111f2:	29 c2                	sub    edx,eax
c00111f4:	29 fa                	sub    edx,edi
c00111f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00111f9:	8d 14 d0             	lea    edx,[eax+edx*8]
c00111fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00111fe:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011201:	89 03                	mov    DWORD PTR [ebx],eax
c0011203:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011206:	eb 1d                	jmp    c0011225 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011208:	83 ec 0c             	sub    esp,0xc
c001120b:	68 12 1f 02 c0       	push   0xc0021f12
c0011210:	e8 ac 00 00 00       	call   c00112c1 <KePanic(char const*)>
c0011215:	83 c4 10             	add    esp,0x10
c0011218:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001121e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011225:	89 d8                	mov    eax,ebx
c0011227:	5b                   	pop    ebx
c0011228:	5e                   	pop    esi
c0011229:	5f                   	pop    edi
c001122a:	c2 04 00             	ret    0x4

c001122d <CPU::current()>:
c001122d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011232:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011238:	c3                   	ret    

c0011239 <operator new(unsigned long)>:
c0011239:	e9 95 68 ff ff       	jmp    c0007ad3 <malloc>

c001123e <operator delete(void*)>:
c001123e:	e9 b0 68 ff ff       	jmp    c0007af3 <rfree>

c0011243 <disableIRQs()>:
c0011243:	fa                   	cli    
c0011244:	c3                   	ret    

c0011245 <enableIRQs()>:
c0011245:	fb                   	sti    
c0011246:	c3                   	ret    

c0011247 <lockScheduler()>:
c0011247:	fa                   	cli    
c0011248:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001124e:	c3                   	ret    

c001124f <unlockScheduler()>:
c001124f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011254:	48                   	dec    eax
c0011255:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001125a:	75 01                	jne    c001125d <unlockScheduler()+0xe>
c001125c:	fb                   	sti    
c001125d:	c3                   	ret    

c001125e <lockStuff()>:
c001125e:	fa                   	cli    
c001125f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011265:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c001126b:	c3                   	ret    

c001126c <unlockStuff()>:
c001126c:	83 ec 0c             	sub    esp,0xc
c001126f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011274:	48                   	dec    eax
c0011275:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001127a:	75 18                	jne    c0011294 <unlockStuff()+0x28>
c001127c:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0011283:	74 0f                	je     c0011294 <unlockStuff()+0x28>
c0011285:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001128f:	e8 2c 4a 00 00       	call   c0015cc0 <schedule()>
c0011294:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011299:	48                   	dec    eax
c001129a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001129f:	75 01                	jne    c00112a2 <unlockStuff()+0x36>
c00112a1:	fb                   	sti    
c00112a2:	83 c4 0c             	add    esp,0xc
c00112a5:	c3                   	ret    

c00112a6 <Virt::getAKernelVAS()>:
c00112a6:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00112ab:	c3                   	ret    

c00112ac <__not_memcpy>:
c00112ac:	57                   	push   edi
c00112ad:	56                   	push   esi
c00112ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00112ba:	89 c7                	mov    edi,eax
c00112bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112be:	5e                   	pop    esi
c00112bf:	5f                   	pop    edi
c00112c0:	c3                   	ret    

c00112c1 <KePanic(char const*)>:
c00112c1:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00112c8:	e9 83 69 00 00       	jmp    c0017c50 <HalPanic(char const*)>

c00112cd <KePowerThread(void*)>:
c00112cd:	83 ec 0c             	sub    esp,0xc
c00112d0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112d5:	48                   	dec    eax
c00112d6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112db:	75 01                	jne    c00112de <KePowerThread(void*)+0x11>
c00112dd:	fb                   	sti    
c00112de:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00112e5:	83 ec 0c             	sub    esp,0xc
c00112e8:	6a 0a                	push   0xa
c00112ea:	e8 01 4d 00 00       	call   c0015ff0 <sleep(unsigned int)>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00112f9:	eb e3                	jmp    c00112de <KePowerThread(void*)+0x11>

c00112fb <KeChangePowerSettings(PowerSettings)>:
c00112fb:	57                   	push   edi
c00112fc:	b9 09 00 00 00       	mov    ecx,0x9
c0011301:	56                   	push   esi
c0011302:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c0011307:	fc                   	cld    
c0011308:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001130c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001130e:	5e                   	pop    esi
c001130f:	5f                   	pop    edi
c0011310:	c3                   	ret    

c0011311 <KeUserIOReceived()>:
c0011311:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001131b:	c3                   	ret    

c001131c <KeHandlePowerButton()>:
c001131c:	83 ec 0c             	sub    esp,0xc
c001131f:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0011324:	83 f8 02             	cmp    eax,0x2
c0011327:	75 10                	jne    c0011339 <KeHandlePowerButton()+0x1d>
c0011329:	83 ec 0c             	sub    esp,0xc
c001132c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011332:	e8 13 5e ff ff       	call   c000714a <Computer::shutdown()>
c0011337:	eb 11                	jmp    c001134a <KeHandlePowerButton()+0x2e>
c0011339:	48                   	dec    eax
c001133a:	75 11                	jne    c001134d <KeHandlePowerButton()+0x31>
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011345:	e8 30 5e ff ff       	call   c000717a <Computer::sleep()>
c001134a:	83 c4 10             	add    esp,0x10
c001134d:	83 c4 0c             	add    esp,0xc
c0011350:	c3                   	ret    

c0011351 <KeHandleSleepButton()>:
c0011351:	83 ec 0c             	sub    esp,0xc
c0011354:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011359:	83 f8 02             	cmp    eax,0x2
c001135c:	75 10                	jne    c001136e <KeHandleSleepButton()+0x1d>
c001135e:	83 ec 0c             	sub    esp,0xc
c0011361:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011367:	e8 de 5d ff ff       	call   c000714a <Computer::shutdown()>
c001136c:	eb 11                	jmp    c001137f <KeHandleSleepButton()+0x2e>
c001136e:	48                   	dec    eax
c001136f:	75 11                	jne    c0011382 <KeHandleSleepButton()+0x31>
c0011371:	83 ec 0c             	sub    esp,0xc
c0011374:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001137a:	e8 fb 5d ff ff       	call   c000717a <Computer::sleep()>
c001137f:	83 c4 10             	add    esp,0x10
c0011382:	83 c4 0c             	add    esp,0xc
c0011385:	c3                   	ret    

c0011386 <KeSetupPowerManager()>:
c0011386:	83 ec 0c             	sub    esp,0xc
c0011389:	68 f0 00 00 00       	push   0xf0
c001138e:	6a 00                	push   0x0
c0011390:	68 cd 12 01 c0       	push   0xc00112cd
c0011395:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001139b:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113a5:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113ac:	e8 c3 46 00 00       	call   c0015a74 <Process::createThread(void (*)(void*), void*, int)>
c00113b1:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c00113bb:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00113c5:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00113cf:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00113d9:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00113e3:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00113ed:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00113f7:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011401:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c001140b:	83 c4 1c             	add    esp,0x1c
c001140e:	c3                   	ret    

c001140f <KeRand()>:
c001140f:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c0011419:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c0011423:	53                   	push   ebx
c0011424:	01 c1                	add    ecx,eax
c0011426:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001142b:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011431:	01 ca                	add    edx,ecx
c0011433:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011438:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001143d:	83 d2 00             	adc    edx,0x0
c0011440:	0f b7 da             	movzx  ebx,dx
c0011443:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011449:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001144d:	5b                   	pop    ebx
c001144e:	c3                   	ret    

c001144f <KeSeedRand(unsigned int)>:
c001144f:	53                   	push   ebx
c0011450:	83 ec 08             	sub    esp,0x8
c0011453:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011457:	e8 13 6b 00 00       	call   c0017f6f <HalGetRand()>
c001145c:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011466:	31 d8                	xor    eax,ebx
c0011468:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001146d:	e8 9d ff ff ff       	call   c001140f <KeRand()>
c0011472:	83 c4 08             	add    esp,0x8
c0011475:	5b                   	pop    ebx
c0011476:	eb 97                	jmp    c001140f <KeRand()>

c0011478 <KeInitRand()>:
c0011478:	83 ec 0c             	sub    esp,0xc
c001147b:	e8 e4 68 00 00       	call   c0017d64 <HalQueryPerformanceCounter()>
c0011480:	0f 20 da             	mov    edx,cr3
c0011483:	0f 22 da             	mov    cr3,edx
c0011486:	0f 20 da             	mov    edx,cr3
c0011489:	0f 22 da             	mov    cr3,edx
c001148c:	0f 20 da             	mov    edx,cr3
c001148f:	0f 22 da             	mov    cr3,edx
c0011492:	0f 20 da             	mov    edx,cr3
c0011495:	0f 22 da             	mov    cr3,edx
c0011498:	83 ec 0c             	sub    esp,0xc
c001149b:	35 03 8a 95 38       	xor    eax,0x38958a03
c00114a0:	50                   	push   eax
c00114a1:	e8 a9 ff ff ff       	call   c001144f <KeSeedRand(unsigned int)>
c00114a6:	83 c4 1c             	add    esp,0x1c
c00114a9:	c3                   	ret    
c00114aa:	66 90                	xchg   ax,ax

c00114ac <KeResolveCompatibilitySymbol(char*)>:
c00114ac:	83 ec 0c             	sub    esp,0xc
c00114af:	83 ec 08             	sub    esp,0x8
c00114b2:	68 2c 1f 02 c0       	push   0xc0021f2c
c00114b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114bb:	e8 c0 f2 fe ff       	call   c0000780 <strcmp>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	85 c0                	test   eax,eax
c00114c5:	0f 94 c0             	sete   al
c00114c8:	0f b6 c0             	movzx  eax,al
c00114cb:	85 c0                	test   eax,eax
c00114cd:	74 0d                	je     c00114dc <KeResolveCompatibilitySymbol(char*)+0x30>
c00114cf:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00114d4:	e9 8b 01 00 00       	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114d9:	8d 76 00             	lea    esi,[esi+0x0]
c00114dc:	83 ec 08             	sub    esp,0x8
c00114df:	68 35 1f 02 c0       	push   0xc0021f35
c00114e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e8:	e8 93 f2 fe ff       	call   c0000780 <strcmp>
c00114ed:	83 c4 10             	add    esp,0x10
c00114f0:	85 c0                	test   eax,eax
c00114f2:	0f 94 c0             	sete   al
c00114f5:	0f b6 c0             	movzx  eax,al
c00114f8:	85 c0                	test   eax,eax
c00114fa:	74 0c                	je     c0011508 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00114fc:	b8 80 f3 01 c0       	mov    eax,0xc001f380
c0011501:	e9 5e 01 00 00       	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011506:	66 90                	xchg   ax,ax
c0011508:	83 ec 08             	sub    esp,0x8
c001150b:	68 3f 1f 02 c0       	push   0xc0021f3f
c0011510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011514:	e8 67 f2 fe ff       	call   c0000780 <strcmp>
c0011519:	83 c4 10             	add    esp,0x10
c001151c:	85 c0                	test   eax,eax
c001151e:	0f 94 c0             	sete   al
c0011521:	0f b6 c0             	movzx  eax,al
c0011524:	85 c0                	test   eax,eax
c0011526:	74 0c                	je     c0011534 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011528:	b8 b4 f0 01 c0       	mov    eax,0xc001f0b4
c001152d:	e9 32 01 00 00       	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011532:	66 90                	xchg   ax,ax
c0011534:	83 ec 08             	sub    esp,0x8
c0011537:	68 48 1f 02 c0       	push   0xc0021f48
c001153c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011540:	e8 3b f2 fe ff       	call   c0000780 <strcmp>
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	85 c0                	test   eax,eax
c001154a:	0f 94 c0             	sete   al
c001154d:	0f b6 c0             	movzx  eax,al
c0011550:	85 c0                	test   eax,eax
c0011552:	74 0c                	je     c0011560 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011554:	b8 c1 12 01 c0       	mov    eax,0xc00112c1
c0011559:	e9 06 01 00 00       	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001155e:	66 90                	xchg   ax,ax
c0011560:	83 ec 08             	sub    esp,0x8
c0011563:	68 5b 1f 02 c0       	push   0xc0021f5b
c0011568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001156c:	e8 0f f2 fe ff       	call   c0000780 <strcmp>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	85 c0                	test   eax,eax
c0011576:	0f 94 c0             	sete   al
c0011579:	0f b6 c0             	movzx  eax,al
c001157c:	85 c0                	test   eax,eax
c001157e:	74 0c                	je     c001158c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011580:	b8 ed 0b 01 c0       	mov    eax,0xc0010bed
c0011585:	e9 da 00 00 00       	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001158a:	66 90                	xchg   ax,ax
c001158c:	83 ec 08             	sub    esp,0x8
c001158f:	68 78 1f 02 c0       	push   0xc0021f78
c0011594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011598:	e8 e3 f1 fe ff       	call   c0000780 <strcmp>
c001159d:	83 c4 10             	add    esp,0x10
c00115a0:	85 c0                	test   eax,eax
c00115a2:	0f 94 c0             	sete   al
c00115a5:	0f b6 c0             	movzx  eax,al
c00115a8:	85 c0                	test   eax,eax
c00115aa:	74 0c                	je     c00115b8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00115ac:	b8 80 f4 01 c0       	mov    eax,0xc001f480
c00115b1:	e9 ae 00 00 00       	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115b6:	66 90                	xchg   ax,ax
c00115b8:	83 ec 08             	sub    esp,0x8
c00115bb:	68 82 1f 02 c0       	push   0xc0021f82
c00115c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c4:	e8 b7 f1 fe ff       	call   c0000780 <strcmp>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	85 c0                	test   eax,eax
c00115ce:	0f 94 c0             	sete   al
c00115d1:	0f b6 c0             	movzx  eax,al
c00115d4:	85 c0                	test   eax,eax
c00115d6:	74 0c                	je     c00115e4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00115d8:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c00115dd:	e9 82 00 00 00       	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115e2:	66 90                	xchg   ax,ax
c00115e4:	83 ec 08             	sub    esp,0x8
c00115e7:	68 8b 1f 02 c0       	push   0xc0021f8b
c00115ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f0:	e8 8b f1 fe ff       	call   c0000780 <strcmp>
c00115f5:	83 c4 10             	add    esp,0x10
c00115f8:	85 c0                	test   eax,eax
c00115fa:	0f 94 c0             	sete   al
c00115fd:	0f b6 c0             	movzx  eax,al
c0011600:	85 c0                	test   eax,eax
c0011602:	74 08                	je     c001160c <KeResolveCompatibilitySymbol(char*)+0x160>
c0011604:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011609:	eb 59                	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001160b:	90                   	nop
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	68 a3 1f 02 c0       	push   0xc0021fa3
c0011614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011618:	e8 63 f1 fe ff       	call   c0000780 <strcmp>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	85 c0                	test   eax,eax
c0011622:	0f 94 c0             	sete   al
c0011625:	0f b6 c0             	movzx  eax,al
c0011628:	85 c0                	test   eax,eax
c001162a:	74 08                	je     c0011634 <KeResolveCompatibilitySymbol(char*)+0x188>
c001162c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011631:	eb 31                	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011633:	90                   	nop
c0011634:	83 ec 08             	sub    esp,0x8
c0011637:	68 b0 1f 02 c0       	push   0xc0021fb0
c001163c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011640:	e8 3b f1 fe ff       	call   c0000780 <strcmp>
c0011645:	83 c4 10             	add    esp,0x10
c0011648:	85 c0                	test   eax,eax
c001164a:	0f 94 c0             	sete   al
c001164d:	0f b6 c0             	movzx  eax,al
c0011650:	85 c0                	test   eax,eax
c0011652:	74 08                	je     c001165c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011654:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011659:	eb 09                	jmp    c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001165b:	90                   	nop
c001165c:	b8 00 00 00 00       	mov    eax,0x0
c0011661:	8d 76 00             	lea    esi,[esi+0x0]
c0011664:	83 c4 0c             	add    esp,0xc
c0011667:	c3                   	ret    

c0011668 <KiSigKill(int)>:
c0011668:	83 ec 0c             	sub    esp,0xc
c001166b:	6a 00                	push   0x0
c001166d:	6a 00                	push   0x0
c001166f:	6a ff                	push   0xffffffff
c0011671:	6a 01                	push   0x1
c0011673:	e8 da 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011678:	83 c4 1c             	add    esp,0x1c
c001167b:	c3                   	ret    

c001167c <KiDefaultSignalHandlerIgnore(int)>:
c001167c:	c3                   	ret    

c001167d <KiDefaultSignalHandlerPause(int)>:
c001167d:	57                   	push   edi
c001167e:	b9 07 00 00 00       	mov    ecx,0x7
c0011683:	56                   	push   esi
c0011684:	be f9 1f 02 c0       	mov    esi,0xc0021ff9
c0011689:	83 ec 24             	sub    esp,0x24
c001168c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011690:	fc                   	cld    
c0011691:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011693:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011697:	50                   	push   eax
c0011698:	6a 00                	push   0x0
c001169a:	6a 00                	push   0x0
c001169c:	6a 27                	push   0x27
c001169e:	e8 af 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116a3:	83 c4 34             	add    esp,0x34
c00116a6:	5e                   	pop    esi
c00116a7:	5f                   	pop    edi
c00116a8:	c3                   	ret    

c00116a9 <KiDefaultSignalHandlerResume(int)>:
c00116a9:	57                   	push   edi
c00116aa:	b9 1d 00 00 00       	mov    ecx,0x1d
c00116af:	56                   	push   esi
c00116b0:	be 15 20 02 c0       	mov    esi,0xc0022015
c00116b5:	83 ec 24             	sub    esp,0x24
c00116b8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00116bc:	fc                   	cld    
c00116bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116bf:	8d 44 24 03          	lea    eax,[esp+0x3]
c00116c3:	50                   	push   eax
c00116c4:	6a 00                	push   0x0
c00116c6:	6a 00                	push   0x0
c00116c8:	6a 27                	push   0x27
c00116ca:	e8 83 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116cf:	83 c4 34             	add    esp,0x34
c00116d2:	5e                   	pop    esi
c00116d3:	5f                   	pop    edi
c00116d4:	c3                   	ret    

c00116d5 <KeDeinitSignals(SigHandlerBlock*)>:
c00116d5:	e9 09 64 ff ff       	jmp    c0007ae3 <free>

c00116da <KeInitSignals()>:
c00116da:	53                   	push   ebx
c00116db:	83 ec 14             	sub    esp,0x14
c00116de:	68 c8 00 00 00       	push   0xc8
c00116e3:	e8 eb 63 ff ff       	call   c0007ad3 <malloc>
c00116e8:	83 c4 0c             	add    esp,0xc
c00116eb:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00116f5:	89 c3                	mov    ebx,eax
c00116f7:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011701:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011707:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c001170b:	6a 20                	push   0x20
c001170d:	6a 00                	push   0x0
c001170f:	50                   	push   eax
c0011710:	e8 db ed fe ff       	call   c00004f0 <memset>
c0011715:	83 c4 0c             	add    esp,0xc
c0011718:	6a 44                	push   0x44
c001171a:	6a 00                	push   0x0
c001171c:	53                   	push   ebx
c001171d:	e8 ce ed fe ff       	call   c00004f0 <memset>
c0011722:	83 c4 18             	add    esp,0x18
c0011725:	89 d8                	mov    eax,ebx
c0011727:	5b                   	pop    ebx
c0011728:	c3                   	ret    

c0011729 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011729:	53                   	push   ebx
c001172a:	b8 01 00 00 00       	mov    eax,0x1
c001172f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011733:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011737:	83 f9 10             	cmp    ecx,0x10
c001173a:	7f 21                	jg     c001175d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001173c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011740:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011743:	89 03                	mov    DWORD PTR [ebx],eax
c0011745:	b8 01 00 00 00       	mov    eax,0x1
c001174a:	d3 e0                	shl    eax,cl
c001174c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011750:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011753:	31 c0                	xor    eax,eax
c0011755:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001175d:	5b                   	pop    ebx
c001175e:	c3                   	ret    

c001175f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001175f:	55                   	push   ebp
c0011760:	57                   	push   edi
c0011761:	bf 08 00 00 00       	mov    edi,0x8
c0011766:	56                   	push   esi
c0011767:	53                   	push   ebx
c0011768:	83 ec 18             	sub    esp,0x18
c001176b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001176f:	68 32 20 02 c0       	push   0xc0022032
c0011774:	e8 91 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	31 c9                	xor    ecx,ecx
c001177e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011785:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001178b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001178f:	99                   	cdq    
c0011790:	f7 ff                	idiv   edi
c0011792:	8d 42 24             	lea    eax,[edx+0x24]
c0011795:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011799:	85 f6                	test   esi,esi
c001179b:	75 1a                	jne    c00117b7 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001179d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00117a1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00117a5:	50                   	push   eax
c00117a6:	50                   	push   eax
c00117a7:	52                   	push   edx
c00117a8:	68 43 20 02 c0       	push   0xc0022043
c00117ad:	e8 58 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117b2:	83 c4 10             	add    esp,0x10
c00117b5:	eb 1b                	jmp    c00117d2 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00117b7:	41                   	inc    ecx
c00117b8:	83 f9 08             	cmp    ecx,0x8
c00117bb:	75 ce                	jne    c001178b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00117bd:	83 ec 0c             	sub    esp,0xc
c00117c0:	be 01 00 00 00       	mov    esi,0x1
c00117c5:	68 64 20 02 c0       	push   0xc0022064
c00117ca:	e8 3b 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117cf:	83 c4 10             	add    esp,0x10
c00117d2:	83 c4 0c             	add    esp,0xc
c00117d5:	89 f0                	mov    eax,esi
c00117d7:	5b                   	pop    ebx
c00117d8:	5e                   	pop    esi
c00117d9:	5f                   	pop    edi
c00117da:	5d                   	pop    ebp
c00117db:	c3                   	ret    

c00117dc <KeCheckSignal(SigHandlerBlock*, int*)>:
c00117dc:	55                   	push   ebp
c00117dd:	57                   	push   edi
c00117de:	56                   	push   esi
c00117df:	53                   	push   ebx
c00117e0:	51                   	push   ecx
c00117e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00117e5:	85 db                	test   ebx,ebx
c00117e7:	0f 84 bc 00 00 00    	je     c00118a9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117ed:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00117f4:	0f 84 af 00 00 00    	je     c00118a9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117fa:	31 c9                	xor    ecx,ecx
c00117fc:	bf 08 00 00 00       	mov    edi,0x8
c0011801:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011807:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001180a:	99                   	cdq    
c001180b:	f7 ff                	idiv   edi
c001180d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011814:	85 ed                	test   ebp,ebp
c0011816:	0f 84 9e 00 00 00    	je     c00118ba <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c001181c:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011822:	89 e9                	mov    ecx,ebp
c0011824:	bf 01 00 00 00       	mov    edi,0x1
c0011829:	d3 e7                	shl    edi,cl
c001182b:	31 c9                	xor    ecx,ecx
c001182d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011830:	b8 01 00 00 00       	mov    eax,0x1
c0011835:	d3 e0                	shl    eax,cl
c0011837:	85 04 24             	test   DWORD PTR [esp],eax
c001183a:	74 06                	je     c0011842 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001183c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011840:	75 67                	jne    c00118a9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011842:	41                   	inc    ecx
c0011843:	83 f9 11             	cmp    ecx,0x11
c0011846:	75 e8                	jne    c0011830 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001184b:	46                   	inc    esi
c001184c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011852:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001185d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011864:	09 f8                	or     eax,edi
c0011866:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001186c:	31 c0                	xor    eax,eax
c001186e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011876:	74 09                	je     c0011881 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011878:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001187f:	eb 06                	jmp    c0011887 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011881:	40                   	inc    eax
c0011882:	83 f8 08             	cmp    eax,0x8
c0011885:	75 e7                	jne    c001186e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011887:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001188b:	83 fd 09             	cmp    ebp,0x9
c001188e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011891:	89 2a                	mov    DWORD PTR [edx],ebp
c0011893:	75 07                	jne    c001189c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011895:	b8 68 16 01 c0       	mov    eax,0xc0011668
c001189a:	eb 31                	jmp    c00118cd <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001189c:	83 f8 01             	cmp    eax,0x1
c001189f:	75 0c                	jne    c00118ad <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00118a1:	f7 d7                	not    edi
c00118a3:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00118a9:	31 c0                	xor    eax,eax
c00118ab:	eb 20                	jmp    c00118cd <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118ad:	85 c0                	test   eax,eax
c00118af:	75 1c                	jne    c00118cd <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118b1:	8b 04 ad 60 34 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcba0]
c00118b8:	eb 13                	jmp    c00118cd <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118ba:	41                   	inc    ecx
c00118bb:	46                   	inc    esi
c00118bc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00118c2:	83 f9 08             	cmp    ecx,0x8
c00118c5:	0f 85 36 ff ff ff    	jne    c0011801 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00118cb:	eb dc                	jmp    c00118a9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118cd:	5a                   	pop    edx
c00118ce:	5b                   	pop    ebx
c00118cf:	5e                   	pop    esi
c00118d0:	5f                   	pop    edi
c00118d1:	5d                   	pop    ebp
c00118d2:	c3                   	ret    

c00118d3 <KiCheckSignalZ>:
c00118d3:	83 ec 10             	sub    esp,0x10
c00118d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00118da:	50                   	push   eax
c00118db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118e3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00118e9:	e8 ee fe ff ff       	call   c00117dc <KeCheckSignal(SigHandlerBlock*, int*)>
c00118ee:	5a                   	pop    edx
c00118ef:	31 d2                	xor    edx,edx
c00118f1:	59                   	pop    ecx
c00118f2:	85 c0                	test   eax,eax
c00118f4:	74 19                	je     c001190f <KiCheckSignalZ+0x3c>
c00118f6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00118fc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00118ff:	89 02                	mov    DWORD PTR [edx],eax
c0011901:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011908:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001190c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001190f:	89 d0                	mov    eax,edx
c0011911:	83 c4 10             	add    esp,0x10
c0011914:	c3                   	ret    

c0011915 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011915:	56                   	push   esi
c0011916:	53                   	push   ebx
c0011917:	bb 01 00 00 00       	mov    ebx,0x1
c001191c:	52                   	push   edx
c001191d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011921:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011925:	d3 e3                	shl    ebx,cl
c0011927:	83 f9 10             	cmp    ecx,0x10
c001192a:	7f 08                	jg     c0011934 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001192c:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011932:	75 10                	jne    c0011944 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011934:	83 ec 0c             	sub    esp,0xc
c0011937:	68 75 20 02 c0       	push   0xc0022075
c001193c:	e8 80 f9 ff ff       	call   c00112c1 <KePanic(char const*)>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	f7 d3                	not    ebx
c0011946:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001194c:	58                   	pop    eax
c001194d:	5b                   	pop    ebx
c001194e:	5e                   	pop    esi
c001194f:	c3                   	ret    

c0011950 <KiFinishSignalZ>:
c0011950:	53                   	push   ebx
c0011951:	83 ec 10             	sub    esp,0x10
c0011954:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011958:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001195b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011960:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011963:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011969:	e8 a7 ff ff ff       	call   c0011915 <KeCompleteSignal(SigHandlerBlock*, int)>
c001196e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011974:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001197b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011982:	83 c4 18             	add    esp,0x18
c0011985:	5b                   	pop    ebx
c0011986:	c3                   	ret    

c0011987 <SysSeekDir(regs*)>:
c0011987:	31 c0                	xor    eax,eax
c0011989:	31 d2                	xor    edx,edx
c001198b:	c3                   	ret    

c001198c <SysTellDir(regs*)>:
c001198c:	31 c0                	xor    eax,eax
c001198e:	31 d2                	xor    edx,edx
c0011990:	c3                   	ret    

c0011991 <SysVerify(regs*)>:
c0011991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011995:	31 d2                	xor    edx,edx
c0011997:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001199a:	c3                   	ret    

c001199b <SysGetArgc(regs*)>:
c001199b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119a3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00119a9:	89 c2                	mov    edx,eax
c00119ab:	c1 fa 1f             	sar    edx,0x1f
c00119ae:	c3                   	ret    

c00119af <SysTTYName(regs*)>:
c00119af:	b8 01 00 00 00       	mov    eax,0x1
c00119b4:	31 d2                	xor    edx,edx
c00119b6:	c3                   	ret    

c00119b7 <SysFormatDisk(regs*)>:
c00119b7:	56                   	push   esi
c00119b8:	53                   	push   ebx
c00119b9:	83 ec 04             	sub    esp,0x4
c00119bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119c0:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c00119c6:	eb 2a                	jmp    c00119f2 <SysFormatDisk(regs*)+0x3b>
c00119c8:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00119cb:	83 ec 0c             	sub    esp,0xc
c00119ce:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00119d1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119d3:	51                   	push   ecx
c00119d4:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00119d7:	51                   	push   ecx
c00119d8:	50                   	push   eax
c00119d9:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00119e0:	50                   	push   eax
c00119e1:	53                   	push   ebx
c00119e2:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00119e5:	83 c4 20             	add    esp,0x20
c00119e8:	83 f8 08             	cmp    eax,0x8
c00119eb:	89 c1                	mov    ecx,eax
c00119ed:	75 14                	jne    c0011a03 <SysFormatDisk(regs*)+0x4c>
c00119ef:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00119f2:	85 db                	test   ebx,ebx
c00119f4:	75 d2                	jne    c00119c8 <SysFormatDisk(regs*)+0x11>
c00119f6:	b8 03 00 00 00       	mov    eax,0x3
c00119fb:	31 d2                	xor    edx,edx
c00119fd:	83 c4 04             	add    esp,0x4
c0011a00:	5b                   	pop    ebx
c0011a01:	5e                   	pop    esi
c0011a02:	c3                   	ret    
c0011a03:	85 c0                	test   eax,eax
c0011a05:	74 13                	je     c0011a1a <SysFormatDisk(regs*)+0x63>
c0011a07:	31 d2                	xor    edx,edx
c0011a09:	83 f9 09             	cmp    ecx,0x9
c0011a0c:	b8 01 00 00 00       	mov    eax,0x1
c0011a11:	74 ea                	je     c00119fd <SysFormatDisk(regs*)+0x46>
c0011a13:	b8 02 00 00 00       	mov    eax,0x2
c0011a18:	eb e1                	jmp    c00119fb <SysFormatDisk(regs*)+0x44>
c0011a1a:	31 c0                	xor    eax,eax
c0011a1c:	eb dd                	jmp    c00119fb <SysFormatDisk(regs*)+0x44>

c0011a1e <SysSetDiskVolumeLabel(regs*)>:
c0011a1e:	56                   	push   esi
c0011a1f:	53                   	push   ebx
c0011a20:	83 ec 04             	sub    esp,0x4
c0011a23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a27:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a2a:	83 f8 19             	cmp    eax,0x19
c0011a2d:	77 33                	ja     c0011a62 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a2f:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011a36:	85 c9                	test   ecx,ecx
c0011a38:	74 28                	je     c0011a62 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a3a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a3d:	85 db                	test   ebx,ebx
c0011a3f:	74 21                	je     c0011a62 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a41:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a47:	85 d2                	test   edx,edx
c0011a49:	74 17                	je     c0011a62 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a4b:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a4d:	53                   	push   ebx
c0011a4e:	50                   	push   eax
c0011a4f:	51                   	push   ecx
c0011a50:	52                   	push   edx
c0011a51:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	83 c4 04             	add    esp,0x4
c0011a5a:	5b                   	pop    ebx
c0011a5b:	5e                   	pop    esi
c0011a5c:	89 c2                	mov    edx,eax
c0011a5e:	c1 fa 1f             	sar    edx,0x1f
c0011a61:	c3                   	ret    
c0011a62:	83 c4 04             	add    esp,0x4
c0011a65:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a6a:	5b                   	pop    ebx
c0011a6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a70:	5e                   	pop    esi
c0011a71:	c3                   	ret    

c0011a72 <SysGetDiskVolumeLabel(regs*)>:
c0011a72:	57                   	push   edi
c0011a73:	56                   	push   esi
c0011a74:	53                   	push   ebx
c0011a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a79:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011a7c:	83 fa 19             	cmp    edx,0x19
c0011a7f:	77 3c                	ja     c0011abd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a81:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011a88:	85 c9                	test   ecx,ecx
c0011a8a:	74 31                	je     c0011abd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a8c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a8f:	85 db                	test   ebx,ebx
c0011a91:	74 2a                	je     c0011abd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a93:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011a96:	85 f6                	test   esi,esi
c0011a98:	74 23                	je     c0011abd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a9a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011aa0:	85 c0                	test   eax,eax
c0011aa2:	74 19                	je     c0011abd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011aa4:	83 ec 0c             	sub    esp,0xc
c0011aa7:	8b 38                	mov    edi,DWORD PTR [eax]
c0011aa9:	56                   	push   esi
c0011aaa:	53                   	push   ebx
c0011aab:	52                   	push   edx
c0011aac:	51                   	push   ecx
c0011aad:	50                   	push   eax
c0011aae:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011ab1:	83 c4 20             	add    esp,0x20
c0011ab4:	5b                   	pop    ebx
c0011ab5:	5e                   	pop    esi
c0011ab6:	89 c2                	mov    edx,eax
c0011ab8:	c1 fa 1f             	sar    edx,0x1f
c0011abb:	5f                   	pop    edi
c0011abc:	c3                   	ret    
c0011abd:	5b                   	pop    ebx
c0011abe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ac3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ac8:	5e                   	pop    esi
c0011ac9:	5f                   	pop    edi
c0011aca:	c3                   	ret    

c0011acb <SysShutdown(regs*)>:
c0011acb:	57                   	push   edi
c0011acc:	56                   	push   esi
c0011acd:	83 ec 04             	sub    esp,0x4
c0011ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ad4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ad7:	85 c0                	test   eax,eax
c0011ad9:	74 1e                	je     c0011af9 <SysShutdown(regs*)+0x2e>
c0011adb:	83 f8 01             	cmp    eax,0x1
c0011ade:	74 5f                	je     c0011b3f <SysShutdown(regs*)+0x74>
c0011ae0:	83 f8 02             	cmp    eax,0x2
c0011ae3:	be ff ff ff ff       	mov    esi,0xffffffff
c0011ae8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011aed:	74 32                	je     c0011b21 <SysShutdown(regs*)+0x56>
c0011aef:	83 c4 04             	add    esp,0x4
c0011af2:	89 f0                	mov    eax,esi
c0011af4:	5e                   	pop    esi
c0011af5:	89 fa                	mov    edx,edi
c0011af7:	5f                   	pop    edi
c0011af8:	c3                   	ret    
c0011af9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011afe:	be ff ff ff ff       	mov    esi,0xffffffff
c0011b03:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011b08:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b0a:	6a 00                	push   0x0
c0011b0c:	6a 00                	push   0x0
c0011b0e:	6a 00                	push   0x0
c0011b10:	50                   	push   eax
c0011b11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b14:	83 c4 10             	add    esp,0x10
c0011b17:	89 f0                	mov    eax,esi
c0011b19:	83 c4 04             	add    esp,0x4
c0011b1c:	89 fa                	mov    edx,edi
c0011b1e:	5e                   	pop    esi
c0011b1f:	5f                   	pop    edi
c0011b20:	c3                   	ret    
c0011b21:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b26:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b28:	6a 00                	push   0x0
c0011b2a:	6a 00                	push   0x0
c0011b2c:	6a 01                	push   0x1
c0011b2e:	50                   	push   eax
c0011b2f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b32:	83 c4 10             	add    esp,0x10
c0011b35:	89 f0                	mov    eax,esi
c0011b37:	83 c4 04             	add    esp,0x4
c0011b3a:	89 fa                	mov    edx,edi
c0011b3c:	5e                   	pop    esi
c0011b3d:	5f                   	pop    edi
c0011b3e:	c3                   	ret    
c0011b3f:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011b44:	85 c0                	test   eax,eax
c0011b46:	74 02                	je     c0011b4a <SysShutdown(regs*)+0x7f>
c0011b48:	ff d0                	call   eax
c0011b4a:	31 f6                	xor    esi,esi
c0011b4c:	83 c4 04             	add    esp,0x4
c0011b4f:	89 f0                	mov    eax,esi
c0011b51:	31 ff                	xor    edi,edi
c0011b53:	5e                   	pop    esi
c0011b54:	89 fa                	mov    edx,edi
c0011b56:	5f                   	pop    edi
c0011b57:	c3                   	ret    

c0011b58 <SysRealpath(regs*)>:
c0011b58:	53                   	push   ebx
c0011b59:	83 ec 08             	sub    esp,0x8
c0011b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b60:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011b63:	85 c9                	test   ecx,ecx
c0011b65:	74 36                	je     c0011b9d <SysRealpath(regs*)+0x45>
c0011b67:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b6a:	31 d2                	xor    edx,edx
c0011b6c:	b8 01 00 00 00       	mov    eax,0x1
c0011b71:	85 db                	test   ebx,ebx
c0011b73:	75 05                	jne    c0011b7a <SysRealpath(regs*)+0x22>
c0011b75:	83 c4 08             	add    esp,0x8
c0011b78:	5b                   	pop    ebx
c0011b79:	c3                   	ret    
c0011b7a:	6a 00                	push   0x0
c0011b7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b81:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b84:	05 0c 01 00 00       	add    eax,0x10c
c0011b89:	50                   	push   eax
c0011b8a:	51                   	push   ecx
c0011b8b:	53                   	push   ebx
c0011b8c:	e8 19 9a ff ff       	call   c000b5aa <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011b91:	83 c4 10             	add    esp,0x10
c0011b94:	31 c0                	xor    eax,eax
c0011b96:	31 d2                	xor    edx,edx
c0011b98:	83 c4 08             	add    esp,0x8
c0011b9b:	5b                   	pop    ebx
c0011b9c:	c3                   	ret    
c0011b9d:	b8 01 00 00 00       	mov    eax,0x1
c0011ba2:	31 d2                	xor    edx,edx
c0011ba4:	eb f2                	jmp    c0011b98 <SysRealpath(regs*)+0x40>

c0011ba6 <SysReadDir(regs*)>:
c0011ba6:	53                   	push   ebx
c0011ba7:	83 ec 18             	sub    esp,0x18
c0011baa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bae:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bb1:	83 f8 02             	cmp    eax,0x2
c0011bb4:	76 4f                	jbe    c0011c05 <SysReadDir(regs*)+0x5f>
c0011bb6:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011bbd:	77 52                	ja     c0011c11 <SysReadDir(regs*)+0x6b>
c0011bbf:	83 ec 0c             	sub    esp,0xc
c0011bc2:	50                   	push   eax
c0011bc3:	e8 d3 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	85 c0                	test   eax,eax
c0011bcd:	74 42                	je     c0011c11 <SysReadDir(regs*)+0x6b>
c0011bcf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bd7:	83 ec 0c             	sub    esp,0xc
c0011bda:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011bde:	8b 10                	mov    edx,DWORD PTR [eax]
c0011be0:	51                   	push   ecx
c0011be1:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011be4:	51                   	push   ecx
c0011be5:	6a 00                	push   0x0
c0011be7:	68 10 01 00 00       	push   0x110
c0011bec:	50                   	push   eax
c0011bed:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bf0:	83 c4 20             	add    esp,0x20
c0011bf3:	85 c0                	test   eax,eax
c0011bf5:	89 c1                	mov    ecx,eax
c0011bf7:	74 27                	je     c0011c20 <SysReadDir(regs*)+0x7a>
c0011bf9:	31 d2                	xor    edx,edx
c0011bfb:	83 f9 07             	cmp    ecx,0x7
c0011bfe:	b8 02 00 00 00       	mov    eax,0x2
c0011c03:	75 16                	jne    c0011c1b <SysReadDir(regs*)+0x75>
c0011c05:	b8 01 00 00 00       	mov    eax,0x1
c0011c0a:	31 d2                	xor    edx,edx
c0011c0c:	83 c4 18             	add    esp,0x18
c0011c0f:	5b                   	pop    ebx
c0011c10:	c3                   	ret    
c0011c11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c1b:	83 c4 18             	add    esp,0x18
c0011c1e:	5b                   	pop    ebx
c0011c1f:	c3                   	ret    
c0011c20:	31 c0                	xor    eax,eax
c0011c22:	31 d2                	xor    edx,edx
c0011c24:	eb e6                	jmp    c0011c0c <SysReadDir(regs*)+0x66>

c0011c26 <SysIsATTY(regs*)>:
c0011c26:	83 ec 0c             	sub    esp,0xc
c0011c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c30:	83 f8 02             	cmp    eax,0x2
c0011c33:	76 07                	jbe    c0011c3c <SysIsATTY(regs*)+0x16>
c0011c35:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c3a:	75 26                	jne    c0011c62 <SysIsATTY(regs*)+0x3c>
c0011c3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c4a:	85 c0                	test   eax,eax
c0011c4c:	74 24                	je     c0011c72 <SysIsATTY(regs*)+0x4c>
c0011c4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c50:	83 ec 0c             	sub    esp,0xc
c0011c53:	50                   	push   eax
c0011c54:	ff 12                	call   DWORD PTR [edx]
c0011c56:	83 c4 10             	add    esp,0x10
c0011c59:	31 d2                	xor    edx,edx
c0011c5b:	83 c4 0c             	add    esp,0xc
c0011c5e:	0f b6 c0             	movzx  eax,al
c0011c61:	c3                   	ret    
c0011c62:	83 ec 0c             	sub    esp,0xc
c0011c65:	50                   	push   eax
c0011c66:	e8 30 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c6b:	83 c4 10             	add    esp,0x10
c0011c6e:	85 c0                	test   eax,eax
c0011c70:	75 dc                	jne    c0011c4e <SysIsATTY(regs*)+0x28>
c0011c72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c7c:	83 c4 0c             	add    esp,0xc
c0011c7f:	c3                   	ret    

c0011c80 <SysSeek(regs*)>:
c0011c80:	56                   	push   esi
c0011c81:	53                   	push   ebx
c0011c82:	83 ec 04             	sub    esp,0x4
c0011c85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c89:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011c8c:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011c8f:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011c95:	77 33                	ja     c0011cca <SysSeek(regs*)+0x4a>
c0011c97:	83 ec 0c             	sub    esp,0xc
c0011c9a:	51                   	push   ecx
c0011c9b:	e8 fb 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ca0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011ca3:	83 c4 0c             	add    esp,0xc
c0011ca6:	31 db                	xor    ebx,ebx
c0011ca8:	53                   	push   ebx
c0011ca9:	51                   	push   ecx
c0011caa:	50                   	push   eax
c0011cab:	e8 d2 9c ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0011cb0:	83 c4 10             	add    esp,0x10
c0011cb3:	85 c0                	test   eax,eax
c0011cb5:	0f 95 c0             	setne  al
c0011cb8:	31 d2                	xor    edx,edx
c0011cba:	0f b6 c0             	movzx  eax,al
c0011cbd:	f7 d8                	neg    eax
c0011cbf:	83 d2 00             	adc    edx,0x0
c0011cc2:	83 c4 04             	add    esp,0x4
c0011cc5:	5b                   	pop    ebx
c0011cc6:	f7 da                	neg    edx
c0011cc8:	5e                   	pop    esi
c0011cc9:	c3                   	ret    
c0011cca:	83 c4 04             	add    esp,0x4
c0011ccd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cd2:	5b                   	pop    ebx
c0011cd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cd8:	5e                   	pop    esi
c0011cd9:	c3                   	ret    

c0011cda <SysTell(regs*)>:
c0011cda:	53                   	push   ebx
c0011cdb:	83 ec 08             	sub    esp,0x8
c0011cde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ce2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ce5:	83 f8 02             	cmp    eax,0x2
c0011ce8:	76 4e                	jbe    c0011d38 <SysTell(regs*)+0x5e>
c0011cea:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011cef:	76 19                	jbe    c0011d0a <SysTell(regs*)+0x30>
c0011cf1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011cf4:	31 d2                	xor    edx,edx
c0011cf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d03:	83 c4 08             	add    esp,0x8
c0011d06:	31 c0                	xor    eax,eax
c0011d08:	5b                   	pop    ebx
c0011d09:	c3                   	ret    
c0011d0a:	83 ec 0c             	sub    esp,0xc
c0011d0d:	50                   	push   eax
c0011d0e:	e8 88 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d13:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011d16:	5a                   	pop    edx
c0011d17:	59                   	pop    ecx
c0011d18:	53                   	push   ebx
c0011d19:	50                   	push   eax
c0011d1a:	e8 0f 9d ff ff       	call   c000ba2e <File::tell(unsigned long long*)>
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	85 c0                	test   eax,eax
c0011d24:	0f 95 c0             	setne  al
c0011d27:	31 d2                	xor    edx,edx
c0011d29:	0f b6 c0             	movzx  eax,al
c0011d2c:	f7 d8                	neg    eax
c0011d2e:	83 d2 00             	adc    edx,0x0
c0011d31:	83 c4 08             	add    esp,0x8
c0011d34:	5b                   	pop    ebx
c0011d35:	f7 da                	neg    edx
c0011d37:	c3                   	ret    
c0011d38:	83 c4 08             	add    esp,0x8
c0011d3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d40:	5b                   	pop    ebx
c0011d41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d46:	c3                   	ret    

c0011d47 <SysSize(regs*)>:
c0011d47:	53                   	push   ebx
c0011d48:	83 ec 18             	sub    esp,0x18
c0011d4b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d4f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d52:	83 f8 02             	cmp    eax,0x2
c0011d55:	76 54                	jbe    c0011dab <SysSize(regs*)+0x64>
c0011d57:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d5c:	76 19                	jbe    c0011d77 <SysSize(regs*)+0x30>
c0011d5e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d61:	31 d2                	xor    edx,edx
c0011d63:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d70:	83 c4 18             	add    esp,0x18
c0011d73:	31 c0                	xor    eax,eax
c0011d75:	5b                   	pop    ebx
c0011d76:	c3                   	ret    
c0011d77:	83 ec 0c             	sub    esp,0xc
c0011d7a:	50                   	push   eax
c0011d7b:	e8 1b 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d80:	83 c4 0c             	add    esp,0xc
c0011d83:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d87:	52                   	push   edx
c0011d88:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d8b:	52                   	push   edx
c0011d8c:	50                   	push   eax
c0011d8d:	e8 34 9e ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c0011d92:	83 c4 10             	add    esp,0x10
c0011d95:	85 c0                	test   eax,eax
c0011d97:	0f 95 c0             	setne  al
c0011d9a:	31 d2                	xor    edx,edx
c0011d9c:	0f b6 c0             	movzx  eax,al
c0011d9f:	f7 d8                	neg    eax
c0011da1:	83 d2 00             	adc    edx,0x0
c0011da4:	83 c4 18             	add    esp,0x18
c0011da7:	5b                   	pop    ebx
c0011da8:	f7 da                	neg    edx
c0011daa:	c3                   	ret    
c0011dab:	83 c4 18             	add    esp,0x18
c0011dae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011db3:	5b                   	pop    ebx
c0011db4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011db9:	c3                   	ret    

c0011dba <SysSizeFromFilename(regs*)>:
c0011dba:	57                   	push   edi
c0011dbb:	56                   	push   esi
c0011dbc:	53                   	push   ebx
c0011dbd:	83 ec 10             	sub    esp,0x10
c0011dc0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011dc4:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011dc7:	83 fb 02             	cmp    ebx,0x2
c0011dca:	0f 86 83 00 00 00    	jbe    c0011e53 <SysSizeFromFilename(regs*)+0x99>
c0011dd0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011dd6:	76 1b                	jbe    c0011df3 <SysSizeFromFilename(regs*)+0x39>
c0011dd8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011ddb:	31 d2                	xor    edx,edx
c0011ddd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011de3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dea:	83 c4 10             	add    esp,0x10
c0011ded:	31 c0                	xor    eax,eax
c0011def:	5b                   	pop    ebx
c0011df0:	5e                   	pop    esi
c0011df1:	5f                   	pop    edi
c0011df2:	c3                   	ret    
c0011df3:	83 ec 0c             	sub    esp,0xc
c0011df6:	68 14 01 00 00       	push   0x114
c0011dfb:	e8 d3 5c ff ff       	call   c0007ad3 <malloc>
c0011e00:	83 c4 0c             	add    esp,0xc
c0011e03:	89 c7                	mov    edi,eax
c0011e05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e0d:	50                   	push   eax
c0011e0e:	53                   	push   ebx
c0011e0f:	57                   	push   edi
c0011e10:	e8 91 9a ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0011e15:	83 c4 0c             	add    esp,0xc
c0011e18:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011e1c:	50                   	push   eax
c0011e1d:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011e20:	52                   	push   edx
c0011e21:	57                   	push   edi
c0011e22:	e8 9f 9d ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c0011e27:	83 c4 10             	add    esp,0x10
c0011e2a:	85 ff                	test   edi,edi
c0011e2c:	89 c3                	mov    ebx,eax
c0011e2e:	74 0c                	je     c0011e3c <SysSizeFromFilename(regs*)+0x82>
c0011e30:	8b 07                	mov    eax,DWORD PTR [edi]
c0011e32:	83 ec 0c             	sub    esp,0xc
c0011e35:	57                   	push   edi
c0011e36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e39:	83 c4 10             	add    esp,0x10
c0011e3c:	31 c0                	xor    eax,eax
c0011e3e:	85 db                	test   ebx,ebx
c0011e40:	0f 95 c0             	setne  al
c0011e43:	31 d2                	xor    edx,edx
c0011e45:	f7 d8                	neg    eax
c0011e47:	83 d2 00             	adc    edx,0x0
c0011e4a:	83 c4 10             	add    esp,0x10
c0011e4d:	5b                   	pop    ebx
c0011e4e:	f7 da                	neg    edx
c0011e50:	5e                   	pop    esi
c0011e51:	5f                   	pop    edi
c0011e52:	c3                   	ret    
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e5b:	5b                   	pop    ebx
c0011e5c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e61:	5e                   	pop    esi
c0011e62:	5f                   	pop    edi
c0011e63:	c3                   	ret    

c0011e64 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011e64:	55                   	push   ebp
c0011e65:	57                   	push   edi
c0011e66:	56                   	push   esi
c0011e67:	53                   	push   ebx
c0011e68:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011e6e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011e75:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e78:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e7b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011e81:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e84:	83 f8 02             	cmp    eax,0x2
c0011e87:	0f 86 97 00 00 00    	jbe    c0011f24 <SysSizeFromFilenameNoSymlink(regs*)+0xc0>
c0011e8d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e92:	76 1f                	jbe    c0011eb3 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011e94:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e97:	31 d2                	xor    edx,edx
c0011e99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ea6:	31 c0                	xor    eax,eax
c0011ea8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011eae:	5b                   	pop    ebx
c0011eaf:	5e                   	pop    esi
c0011eb0:	5f                   	pop    edi
c0011eb1:	5d                   	pop    ebp
c0011eb2:	c3                   	ret    
c0011eb3:	83 ec 0c             	sub    esp,0xc
c0011eb6:	68 14 01 00 00       	push   0x114
c0011ebb:	e8 13 5c ff ff       	call   c0007ad3 <malloc>
c0011ec0:	6a 00                	push   0x0
c0011ec2:	89 c5                	mov    ebp,eax
c0011ec4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ec9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ecc:	50                   	push   eax
c0011ecd:	57                   	push   edi
c0011ece:	55                   	push   ebp
c0011ecf:	e8 f4 98 ff ff       	call   c000b7c8 <File::File(char const*, Process*, bool)>
c0011ed4:	83 c4 1c             	add    esp,0x1c
c0011ed7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0011edb:	50                   	push   eax
c0011edc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011edf:	52                   	push   edx
c0011ee0:	55                   	push   ebp
c0011ee1:	e8 e0 9c ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c0011ee6:	83 c4 10             	add    esp,0x10
c0011ee9:	85 ed                	test   ebp,ebp
c0011eeb:	89 c3                	mov    ebx,eax
c0011eed:	74 0d                	je     c0011efc <SysSizeFromFilenameNoSymlink(regs*)+0x98>
c0011eef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011ef2:	83 ec 0c             	sub    esp,0xc
c0011ef5:	55                   	push   ebp
c0011ef6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ef9:	83 c4 10             	add    esp,0x10
c0011efc:	85 db                	test   ebx,ebx
c0011efe:	75 24                	jne    c0011f24 <SysSizeFromFilenameNoSymlink(regs*)+0xc0>
c0011f00:	83 ec 08             	sub    esp,0x8
c0011f03:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011f07:	50                   	push   eax
c0011f08:	57                   	push   edi
c0011f09:	e8 ff 8f ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c0011f0e:	83 c4 10             	add    esp,0x10
c0011f11:	31 d2                	xor    edx,edx
c0011f13:	89 c1                	mov    ecx,eax
c0011f15:	31 c0                	xor    eax,eax
c0011f17:	83 f9 01             	cmp    ecx,0x1
c0011f1a:	75 8c                	jne    c0011ea8 <SysSizeFromFilenameNoSymlink(regs*)+0x44>
c0011f1c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011f22:	eb 84                	jmp    c0011ea8 <SysSizeFromFilenameNoSymlink(regs*)+0x44>
c0011f24:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011f2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f2f:	5b                   	pop    ebx
c0011f30:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f35:	5e                   	pop    esi
c0011f36:	5f                   	pop    edi
c0011f37:	5d                   	pop    ebp
c0011f38:	c3                   	ret    

c0011f39 <SysClose(regs*)>:
c0011f39:	53                   	push   ebx
c0011f3a:	83 ec 08             	sub    esp,0x8
c0011f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f41:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f44:	83 f8 02             	cmp    eax,0x2
c0011f47:	76 41                	jbe    c0011f8a <SysClose(regs*)+0x51>
c0011f49:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011f4f:	83 fa 01             	cmp    edx,0x1
c0011f52:	76 2d                	jbe    c0011f81 <SysClose(regs*)+0x48>
c0011f54:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f59:	77 2f                	ja     c0011f8a <SysClose(regs*)+0x51>
c0011f5b:	83 ec 0c             	sub    esp,0xc
c0011f5e:	50                   	push   eax
c0011f5f:	e8 37 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f64:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f67:	89 c3                	mov    ebx,eax
c0011f69:	e8 b4 99 ff ff       	call   c000b922 <File::close()>
c0011f6e:	83 c4 10             	add    esp,0x10
c0011f71:	85 db                	test   ebx,ebx
c0011f73:	74 0c                	je     c0011f81 <SysClose(regs*)+0x48>
c0011f75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f77:	83 ec 0c             	sub    esp,0xc
c0011f7a:	53                   	push   ebx
c0011f7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	83 c4 08             	add    esp,0x8
c0011f84:	31 c0                	xor    eax,eax
c0011f86:	5b                   	pop    ebx
c0011f87:	31 d2                	xor    edx,edx
c0011f89:	c3                   	ret    
c0011f8a:	83 c4 08             	add    esp,0x8
c0011f8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f92:	5b                   	pop    ebx
c0011f93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f98:	c3                   	ret    

c0011f99 <SysOpenDir(regs*)>:
c0011f99:	56                   	push   esi
c0011f9a:	53                   	push   ebx
c0011f9b:	83 ec 04             	sub    esp,0x4
c0011f9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fa2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011fa5:	85 c9                	test   ecx,ecx
c0011fa7:	74 5d                	je     c0012006 <SysOpenDir(regs*)+0x6d>
c0011fa9:	83 ec 0c             	sub    esp,0xc
c0011fac:	68 14 01 00 00       	push   0x114
c0011fb1:	e8 1d 5b ff ff       	call   c0007ad3 <malloc>
c0011fb6:	83 c4 0c             	add    esp,0xc
c0011fb9:	89 c6                	mov    esi,eax
c0011fbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fc3:	50                   	push   eax
c0011fc4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011fc7:	52                   	push   edx
c0011fc8:	56                   	push   esi
c0011fc9:	e8 b8 9d ff ff       	call   c000bd86 <Directory::Directory(char const*, Process*)>
c0011fce:	83 c4 10             	add    esp,0x10
c0011fd1:	85 f6                	test   esi,esi
c0011fd3:	74 31                	je     c0012006 <SysOpenDir(regs*)+0x6d>
c0011fd5:	83 ec 0c             	sub    esp,0xc
c0011fd8:	56                   	push   esi
c0011fd9:	e8 70 9e ff ff       	call   c000be4e <Directory::open()>
c0011fde:	83 c4 10             	add    esp,0x10
c0011fe1:	85 c0                	test   eax,eax
c0011fe3:	75 21                	jne    c0012006 <SysOpenDir(regs*)+0x6d>
c0011fe5:	83 ec 0c             	sub    esp,0xc
c0011fe8:	56                   	push   esi
c0011fe9:	e8 b0 71 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011fee:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ff1:	83 c4 10             	add    esp,0x10
c0011ff4:	89 02                	mov    DWORD PTR [edx],eax
c0011ff6:	c1 f8 1f             	sar    eax,0x1f
c0011ff9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ffc:	83 c4 04             	add    esp,0x4
c0011fff:	31 c0                	xor    eax,eax
c0012001:	5b                   	pop    ebx
c0012002:	31 d2                	xor    edx,edx
c0012004:	5e                   	pop    esi
c0012005:	c3                   	ret    
c0012006:	83 c4 04             	add    esp,0x4
c0012009:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001200e:	5b                   	pop    ebx
c001200f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012014:	5e                   	pop    esi
c0012015:	c3                   	ret    

c0012016 <SysMakeDir(regs*)>:
c0012016:	56                   	push   esi
c0012017:	53                   	push   ebx
c0012018:	83 ec 10             	sub    esp,0x10
c001201b:	68 14 01 00 00       	push   0x114
c0012020:	e8 ae 5a ff ff       	call   c0007ad3 <malloc>
c0012025:	83 c4 0c             	add    esp,0xc
c0012028:	89 c3                	mov    ebx,eax
c001202a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001202f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012032:	50                   	push   eax
c0012033:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012037:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001203a:	52                   	push   edx
c001203b:	53                   	push   ebx
c001203c:	e8 45 9d ff ff       	call   c000bd86 <Directory::Directory(char const*, Process*)>
c0012041:	83 c4 10             	add    esp,0x10
c0012044:	85 db                	test   ebx,ebx
c0012046:	74 2c                	je     c0012074 <SysMakeDir(regs*)+0x5e>
c0012048:	83 ec 0c             	sub    esp,0xc
c001204b:	53                   	push   ebx
c001204c:	e8 dd 9f ff ff       	call   c000c02e <Directory::create()>
c0012051:	89 c6                	mov    esi,eax
c0012053:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012055:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012058:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001205b:	83 c4 10             	add    esp,0x10
c001205e:	31 c0                	xor    eax,eax
c0012060:	85 f6                	test   esi,esi
c0012062:	0f 95 c0             	setne  al
c0012065:	31 d2                	xor    edx,edx
c0012067:	f7 d8                	neg    eax
c0012069:	83 d2 00             	adc    edx,0x0
c001206c:	83 c4 04             	add    esp,0x4
c001206f:	5b                   	pop    ebx
c0012070:	f7 da                	neg    edx
c0012072:	5e                   	pop    esi
c0012073:	c3                   	ret    
c0012074:	83 c4 04             	add    esp,0x4
c0012077:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001207c:	5b                   	pop    ebx
c001207d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012082:	5e                   	pop    esi
c0012083:	c3                   	ret    

c0012084 <SysCloseDir(regs*)>:
c0012084:	53                   	push   ebx
c0012085:	ba ff ff ff ff       	mov    edx,0xffffffff
c001208a:	83 ec 08             	sub    esp,0x8
c001208d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012091:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012094:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012099:	8d 59 fd             	lea    ebx,[ecx-0x3]
c001209c:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00120a2:	77 2a                	ja     c00120ce <SysCloseDir(regs*)+0x4a>
c00120a4:	83 ec 0c             	sub    esp,0xc
c00120a7:	51                   	push   ecx
c00120a8:	e8 ee 73 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00120ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00120b0:	89 c3                	mov    ebx,eax
c00120b2:	e8 f3 9d ff ff       	call   c000beaa <Directory::close()>
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	85 db                	test   ebx,ebx
c00120bc:	74 0c                	je     c00120ca <SysCloseDir(regs*)+0x46>
c00120be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120c0:	83 ec 0c             	sub    esp,0xc
c00120c3:	53                   	push   ebx
c00120c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120c7:	83 c4 10             	add    esp,0x10
c00120ca:	31 c0                	xor    eax,eax
c00120cc:	31 d2                	xor    edx,edx
c00120ce:	83 c4 08             	add    esp,0x8
c00120d1:	5b                   	pop    ebx
c00120d2:	c3                   	ret    

c00120d3 <SysWait(regs*)>:
c00120d3:	83 ec 10             	sub    esp,0x10
c00120d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120da:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00120dd:	52                   	push   edx
c00120de:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00120e1:	51                   	push   ecx
c00120e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00120e5:	50                   	push   eax
c00120e6:	e8 0d 3e 00 00       	call   c0015ef8 <waitTask(int, int*, int)>
c00120eb:	83 c4 1c             	add    esp,0x1c
c00120ee:	89 c2                	mov    edx,eax
c00120f0:	c1 fa 1f             	sar    edx,0x1f
c00120f3:	c3                   	ret    

c00120f4 <SysNotImpl(regs*)>:
c00120f4:	83 ec 18             	sub    esp,0x18
c00120f7:	68 86 20 02 c0       	push   0xc0022086
c00120fc:	e8 c0 f1 ff ff       	call   c00112c1 <KePanic(char const*)>
c0012101:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012106:	ba ff ff ff ff       	mov    edx,0xffffffff
c001210b:	83 c4 1c             	add    esp,0x1c
c001210e:	c3                   	ret    

c001210f <SysPanic(regs*)>:
c001210f:	83 ec 18             	sub    esp,0x18
c0012112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012116:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012119:	50                   	push   eax
c001211a:	e8 a2 f1 ff ff       	call   c00112c1 <KePanic(char const*)>
c001211f:	b8 01 00 00 00       	mov    eax,0x1
c0012124:	31 d2                	xor    edx,edx
c0012126:	83 c4 1c             	add    esp,0x1c
c0012129:	c3                   	ret    

c001212a <SysRmdir(regs*)>:
c001212a:	56                   	push   esi
c001212b:	53                   	push   ebx
c001212c:	83 ec 10             	sub    esp,0x10
c001212f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012133:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012136:	68 14 01 00 00       	push   0x114
c001213b:	e8 93 59 ff ff       	call   c0007ad3 <malloc>
c0012140:	6a 00                	push   0x0
c0012142:	89 c3                	mov    ebx,eax
c0012144:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012149:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001214c:	50                   	push   eax
c001214d:	56                   	push   esi
c001214e:	53                   	push   ebx
c001214f:	e8 74 96 ff ff       	call   c000b7c8 <File::File(char const*, Process*, bool)>
c0012154:	83 c4 14             	add    esp,0x14
c0012157:	53                   	push   ebx
c0012158:	e8 35 99 ff ff       	call   c000ba92 <File::unlink()>
c001215d:	83 c4 10             	add    esp,0x10
c0012160:	85 db                	test   ebx,ebx
c0012162:	89 c6                	mov    esi,eax
c0012164:	74 0c                	je     c0012172 <SysRmdir(regs*)+0x48>
c0012166:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012168:	83 ec 0c             	sub    esp,0xc
c001216b:	53                   	push   ebx
c001216c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001216f:	83 c4 10             	add    esp,0x10
c0012172:	31 c0                	xor    eax,eax
c0012174:	85 f6                	test   esi,esi
c0012176:	0f 95 c0             	setne  al
c0012179:	31 d2                	xor    edx,edx
c001217b:	f7 d8                	neg    eax
c001217d:	83 d2 00             	adc    edx,0x0
c0012180:	83 c4 04             	add    esp,0x4
c0012183:	5b                   	pop    ebx
c0012184:	f7 da                	neg    edx
c0012186:	5e                   	pop    esi
c0012187:	c3                   	ret    

c0012188 <SysUnlink(regs*)>:
c0012188:	56                   	push   esi
c0012189:	53                   	push   ebx
c001218a:	83 ec 10             	sub    esp,0x10
c001218d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012191:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012194:	68 14 01 00 00       	push   0x114
c0012199:	e8 35 59 ff ff       	call   c0007ad3 <malloc>
c001219e:	6a 00                	push   0x0
c00121a0:	89 c3                	mov    ebx,eax
c00121a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121aa:	50                   	push   eax
c00121ab:	56                   	push   esi
c00121ac:	53                   	push   ebx
c00121ad:	e8 16 96 ff ff       	call   c000b7c8 <File::File(char const*, Process*, bool)>
c00121b2:	83 c4 14             	add    esp,0x14
c00121b5:	53                   	push   ebx
c00121b6:	e8 d7 98 ff ff       	call   c000ba92 <File::unlink()>
c00121bb:	83 c4 10             	add    esp,0x10
c00121be:	85 db                	test   ebx,ebx
c00121c0:	89 c6                	mov    esi,eax
c00121c2:	74 0c                	je     c00121d0 <SysUnlink(regs*)+0x48>
c00121c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121c6:	83 ec 0c             	sub    esp,0xc
c00121c9:	53                   	push   ebx
c00121ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121cd:	83 c4 10             	add    esp,0x10
c00121d0:	31 c0                	xor    eax,eax
c00121d2:	85 f6                	test   esi,esi
c00121d4:	0f 95 c0             	setne  al
c00121d7:	31 d2                	xor    edx,edx
c00121d9:	f7 d8                	neg    eax
c00121db:	83 d2 00             	adc    edx,0x0
c00121de:	83 c4 04             	add    esp,0x4
c00121e1:	5b                   	pop    ebx
c00121e2:	f7 da                	neg    edx
c00121e4:	5e                   	pop    esi
c00121e5:	c3                   	ret    

c00121e6 <SysGetArgv(regs*)>:
c00121e6:	83 ec 0c             	sub    esp,0xc
c00121e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00121ed:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00121f0:	85 c0                	test   eax,eax
c00121f2:	78 2c                	js     c0012220 <SysGetArgv(regs*)+0x3a>
c00121f4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00121fa:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00121fd:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012203:	7d 1b                	jge    c0012220 <SysGetArgv(regs*)+0x3a>
c0012205:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001220c:	85 c0                	test   eax,eax
c001220e:	74 18                	je     c0012228 <SysGetArgv(regs*)+0x42>
c0012210:	83 ec 08             	sub    esp,0x8
c0012213:	50                   	push   eax
c0012214:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012217:	50                   	push   eax
c0012218:	e8 33 e4 fe ff       	call   c0000650 <strcpy>
c001221d:	83 c4 10             	add    esp,0x10
c0012220:	31 c0                	xor    eax,eax
c0012222:	31 d2                	xor    edx,edx
c0012224:	83 c4 0c             	add    esp,0xc
c0012227:	c3                   	ret    
c0012228:	b8 01 00 00 00       	mov    eax,0x1
c001222d:	31 d2                	xor    edx,edx
c001222f:	83 c4 0c             	add    esp,0xc
c0012232:	c3                   	ret    

c0012233 <SysUSleep(regs*)>:
c0012233:	83 ec 1c             	sub    esp,0x1c
c0012236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001223a:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001223d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012240:	6a 00                	push   0x0
c0012242:	6a 64                	push   0x64
c0012244:	52                   	push   edx
c0012245:	50                   	push   eax
c0012246:	e8 35 d1 00 00       	call   c001f380 <__udivdi3>
c001224b:	83 c4 14             	add    esp,0x14
c001224e:	50                   	push   eax
c001224f:	e8 88 3d 00 00       	call   c0015fdc <milliTenthSleep(unsigned int)>
c0012254:	31 c0                	xor    eax,eax
c0012256:	31 d2                	xor    edx,edx
c0012258:	83 c4 1c             	add    esp,0x1c
c001225b:	c3                   	ret    

c001225c <SysSpawn(regs*)>:
c001225c:	56                   	push   esi
c001225d:	53                   	push   ebx
c001225e:	83 ec 04             	sub    esp,0x4
c0012261:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012265:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012268:	85 f6                	test   esi,esi
c001226a:	75 0a                	jne    c0012276 <SysSpawn(regs*)+0x1a>
c001226c:	83 c4 04             	add    esp,0x4
c001226f:	31 c0                	xor    eax,eax
c0012271:	5b                   	pop    ebx
c0012272:	31 d2                	xor    edx,edx
c0012274:	5e                   	pop    esi
c0012275:	c3                   	ret    
c0012276:	83 ec 0c             	sub    esp,0xc
c0012279:	68 24 07 00 00       	push   0x724
c001227e:	e8 50 58 ff ff       	call   c0007ad3 <malloc>
c0012283:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012286:	83 c4 10             	add    esp,0x10
c0012289:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001228c:	89 c6                	mov    esi,eax
c001228e:	31 c0                	xor    eax,eax
c0012290:	85 c9                	test   ecx,ecx
c0012292:	75 08                	jne    c001229c <SysSpawn(regs*)+0x40>
c0012294:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012299:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001229c:	52                   	push   edx
c001229d:	50                   	push   eax
c001229e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122a1:	50                   	push   eax
c00122a2:	56                   	push   esi
c00122a3:	e8 9c 33 00 00       	call   c0015644 <Process::Process(char const*, Process*, char**)>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00122b2:	75 b8                	jne    c001226c <SysSpawn(regs*)+0x10>
c00122b4:	83 ec 0c             	sub    esp,0xc
c00122b7:	56                   	push   esi
c00122b8:	e8 bf 38 00 00       	call   c0015b7c <Process::createUserThread()>
c00122bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00122bf:	83 c4 10             	add    esp,0x10
c00122c2:	83 c4 04             	add    esp,0x4
c00122c5:	5b                   	pop    ebx
c00122c6:	89 c2                	mov    edx,eax
c00122c8:	c1 fa 1f             	sar    edx,0x1f
c00122cb:	5e                   	pop    esi
c00122cc:	c3                   	ret    

c00122cd <SysGetEnv(regs*)>:
c00122cd:	57                   	push   edi
c00122ce:	56                   	push   esi
c00122cf:	53                   	push   ebx
c00122d0:	83 ec 1c             	sub    esp,0x1c
c00122d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00122dc:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122df:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122e2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122e5:	51                   	push   ecx
c00122e6:	e8 8e ee ff ff       	call   c0011179 <KeGetProcessTotalEnvCount(Process*)>
c00122eb:	83 c4 10             	add    esp,0x10
c00122ee:	39 c7                	cmp    edi,eax
c00122f0:	7c 12                	jl     c0012304 <SysGetEnv(regs*)+0x37>
c00122f2:	31 c0                	xor    eax,eax
c00122f4:	31 d2                	xor    edx,edx
c00122f6:	85 f6                	test   esi,esi
c00122f8:	74 03                	je     c00122fd <SysGetEnv(regs*)+0x30>
c00122fa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122fd:	83 c4 10             	add    esp,0x10
c0012300:	5b                   	pop    ebx
c0012301:	5e                   	pop    esi
c0012302:	5f                   	pop    edi
c0012303:	c3                   	ret    
c0012304:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012308:	83 ec 04             	sub    esp,0x4
c001230b:	57                   	push   edi
c001230c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012312:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012315:	57                   	push   edi
c0012316:	50                   	push   eax
c0012317:	e8 7d ee ff ff       	call   c0011199 <KeGetProcessEnvPair(Process*, int)>
c001231c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001231f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012323:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012327:	83 c4 0c             	add    esp,0xc
c001232a:	85 d2                	test   edx,edx
c001232c:	75 23                	jne    c0012351 <SysGetEnv(regs*)+0x84>
c001232e:	83 ec 0c             	sub    esp,0xc
c0012331:	50                   	push   eax
c0012332:	e8 49 e2 fe ff       	call   c0000580 <strlen>
c0012337:	89 3c 24             	mov    DWORD PTR [esp],edi
c001233a:	89 c3                	mov    ebx,eax
c001233c:	e8 3f e2 fe ff       	call   c0000580 <strlen>
c0012341:	83 c4 10             	add    esp,0x10
c0012344:	31 d2                	xor    edx,edx
c0012346:	83 c4 10             	add    esp,0x10
c0012349:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001234d:	5b                   	pop    ebx
c001234e:	5e                   	pop    esi
c001234f:	5f                   	pop    edi
c0012350:	c3                   	ret    
c0012351:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012354:	83 ec 08             	sub    esp,0x8
c0012357:	50                   	push   eax
c0012358:	56                   	push   esi
c0012359:	e8 f2 e2 fe ff       	call   c0000650 <strcpy>
c001235e:	58                   	pop    eax
c001235f:	5a                   	pop    edx
c0012360:	68 a0 20 02 c0       	push   0xc00220a0
c0012365:	56                   	push   esi
c0012366:	e8 05 e5 fe ff       	call   c0000870 <strcat>
c001236b:	59                   	pop    ecx
c001236c:	5b                   	pop    ebx
c001236d:	57                   	push   edi
c001236e:	56                   	push   esi
c001236f:	e8 fc e4 fe ff       	call   c0000870 <strcat>
c0012374:	83 c4 10             	add    esp,0x10
c0012377:	31 c0                	xor    eax,eax
c0012379:	83 c4 10             	add    esp,0x10
c001237c:	31 d2                	xor    edx,edx
c001237e:	5b                   	pop    ebx
c001237f:	5e                   	pop    esi
c0012380:	5f                   	pop    edi
c0012381:	c3                   	ret    

c0012382 <SysSetFatAttrib(regs*)>:
c0012382:	57                   	push   edi
c0012383:	56                   	push   esi
c0012384:	53                   	push   ebx
c0012385:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012389:	83 ec 0c             	sub    esp,0xc
c001238c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001238f:	68 14 01 00 00       	push   0x114
c0012394:	e8 3a 57 ff ff       	call   c0007ad3 <malloc>
c0012399:	83 c4 0c             	add    esp,0xc
c001239c:	89 c3                	mov    ebx,eax
c001239e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123a6:	50                   	push   eax
c00123a7:	57                   	push   edi
c00123a8:	53                   	push   ebx
c00123a9:	e8 f8 94 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c00123ae:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00123b1:	83 c4 0c             	add    esp,0xc
c00123b4:	0f b6 d4             	movzx  edx,ah
c00123b7:	0f b6 c0             	movzx  eax,al
c00123ba:	52                   	push   edx
c00123bb:	50                   	push   eax
c00123bc:	53                   	push   ebx
c00123bd:	e8 6a 97 ff ff       	call   c000bb2c <File::chfatattr(unsigned char, unsigned char)>
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	85 db                	test   ebx,ebx
c00123c7:	89 c6                	mov    esi,eax
c00123c9:	74 0c                	je     c00123d7 <SysSetFatAttrib(regs*)+0x55>
c00123cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123cd:	83 ec 0c             	sub    esp,0xc
c00123d0:	53                   	push   ebx
c00123d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123d4:	83 c4 10             	add    esp,0x10
c00123d7:	5b                   	pop    ebx
c00123d8:	31 c0                	xor    eax,eax
c00123da:	85 f6                	test   esi,esi
c00123dc:	0f 95 c0             	setne  al
c00123df:	31 d2                	xor    edx,edx
c00123e1:	5e                   	pop    esi
c00123e2:	f7 d8                	neg    eax
c00123e4:	83 d2 00             	adc    edx,0x0
c00123e7:	f7 da                	neg    edx
c00123e9:	5f                   	pop    edi
c00123ea:	c3                   	ret    

c00123eb <SysPipe(regs*)>:
c00123eb:	57                   	push   edi
c00123ec:	56                   	push   esi
c00123ed:	53                   	push   ebx
c00123ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123f2:	83 ec 0c             	sub    esp,0xc
c00123f5:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00123f8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00123fb:	6a 20                	push   0x20
c00123fd:	e8 d1 56 ff ff       	call   c0007ad3 <malloc>
c0012402:	89 c3                	mov    ebx,eax
c0012404:	58                   	pop    eax
c0012405:	5a                   	pop    edx
c0012406:	68 00 50 00 00       	push   0x5000
c001240b:	53                   	push   ebx
c001240c:	e8 2d 60 ff ff       	call   c000843e <Pipe::Pipe(int)>
c0012411:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012414:	e8 85 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012419:	89 07                	mov    DWORD PTR [edi],eax
c001241b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001241e:	e8 7b 6d ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012423:	83 c4 10             	add    esp,0x10
c0012426:	31 d2                	xor    edx,edx
c0012428:	89 06                	mov    DWORD PTR [esi],eax
c001242a:	31 c0                	xor    eax,eax
c001242c:	5b                   	pop    ebx
c001242d:	5e                   	pop    esi
c001242e:	5f                   	pop    edi
c001242f:	c3                   	ret    

c0012430 <SysGetUnixTime(regs*)>:
c0012430:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012435:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001243b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001243f:	e9 2e 9e ff ff       	jmp    c000c272 <Clock::timeInSecondsLocal()>

c0012444 <string_ends_with(char const*, char const*)>:
c0012444:	57                   	push   edi
c0012445:	56                   	push   esi
c0012446:	53                   	push   ebx
c0012447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001244b:	83 ec 0c             	sub    esp,0xc
c001244e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012452:	53                   	push   ebx
c0012453:	e8 28 e1 fe ff       	call   c0000580 <strlen>
c0012458:	89 3c 24             	mov    DWORD PTR [esp],edi
c001245b:	89 c6                	mov    esi,eax
c001245d:	e8 1e e1 fe ff       	call   c0000580 <strlen>
c0012462:	83 c4 10             	add    esp,0x10
c0012465:	31 d2                	xor    edx,edx
c0012467:	39 c6                	cmp    esi,eax
c0012469:	7d 06                	jge    c0012471 <string_ends_with(char const*, char const*)+0x2d>
c001246b:	5b                   	pop    ebx
c001246c:	89 d0                	mov    eax,edx
c001246e:	5e                   	pop    esi
c001246f:	5f                   	pop    edi
c0012470:	c3                   	ret    
c0012471:	83 ec 08             	sub    esp,0x8
c0012474:	29 c6                	sub    esi,eax
c0012476:	57                   	push   edi
c0012477:	01 f3                	add    ebx,esi
c0012479:	53                   	push   ebx
c001247a:	e8 01 e3 fe ff       	call   c0000780 <strcmp>
c001247f:	83 c4 10             	add    esp,0x10
c0012482:	31 d2                	xor    edx,edx
c0012484:	5b                   	pop    ebx
c0012485:	5e                   	pop    esi
c0012486:	85 c0                	test   eax,eax
c0012488:	5f                   	pop    edi
c0012489:	0f 94 c2             	sete   dl
c001248c:	89 d0                	mov    eax,edx
c001248e:	c3                   	ret    

c001248f <SysOpen(regs*)>:
c001248f:	56                   	push   esi
c0012490:	53                   	push   ebx
c0012491:	81 ec 04 01 00 00    	sub    esp,0x104
c0012497:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001249e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124a1:	85 c0                	test   eax,eax
c00124a3:	0f 84 c4 01 00 00    	je     c001266d <SysOpen(regs*)+0x1de>
c00124a9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124ac:	85 c0                	test   eax,eax
c00124ae:	0f 84 b9 01 00 00    	je     c001266d <SysOpen(regs*)+0x1de>
c00124b4:	6a 00                	push   0x0
c00124b6:	68 a2 20 02 c0       	push   0xc00220a2
c00124bb:	50                   	push   eax
c00124bc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00124c0:	56                   	push   esi
c00124c1:	e8 e4 90 ff ff       	call   c000b5aa <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00124c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00124c9:	e8 b2 e0 fe ff       	call   c0000580 <strlen>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	83 e8 01             	sub    eax,0x1
c00124d4:	74 29                	je     c00124ff <SysOpen(regs*)+0x70>
c00124d6:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00124da:	83 fa 2e             	cmp    edx,0x2e
c00124dd:	74 1c                	je     c00124fb <SysOpen(regs*)+0x6c>
c00124df:	83 fa 3a             	cmp    edx,0x3a
c00124e2:	74 17                	je     c00124fb <SysOpen(regs*)+0x6c>
c00124e4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00124e8:	83 e8 01             	sub    eax,0x1
c00124eb:	74 12                	je     c00124ff <SysOpen(regs*)+0x70>
c00124ed:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00124f1:	83 fa 3a             	cmp    edx,0x3a
c00124f4:	74 05                	je     c00124fb <SysOpen(regs*)+0x6c>
c00124f6:	83 fa 2e             	cmp    edx,0x2e
c00124f9:	75 e9                	jne    c00124e4 <SysOpen(regs*)+0x55>
c00124fb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00124ff:	83 ec 08             	sub    esp,0x8
c0012502:	68 a6 20 02 c0       	push   0xc00220a6
c0012507:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001250a:	50                   	push   eax
c001250b:	e8 34 ff ff ff       	call   c0012444 <string_ends_with(char const*, char const*)>
c0012510:	83 c4 10             	add    esp,0x10
c0012513:	85 c0                	test   eax,eax
c0012515:	74 1d                	je     c0012534 <SysOpen(regs*)+0xa5>
c0012517:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001251a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012520:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012527:	81 c4 04 01 00 00    	add    esp,0x104
c001252d:	31 c0                	xor    eax,eax
c001252f:	5b                   	pop    ebx
c0012530:	31 d2                	xor    edx,edx
c0012532:	5e                   	pop    esi
c0012533:	c3                   	ret    
c0012534:	83 ec 08             	sub    esp,0x8
c0012537:	68 ab 20 02 c0       	push   0xc00220ab
c001253c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001253f:	50                   	push   eax
c0012540:	e8 ff fe ff ff       	call   c0012444 <string_ends_with(char const*, char const*)>
c0012545:	83 c4 10             	add    esp,0x10
c0012548:	85 c0                	test   eax,eax
c001254a:	75 cb                	jne    c0012517 <SysOpen(regs*)+0x88>
c001254c:	83 ec 08             	sub    esp,0x8
c001254f:	68 a7 20 02 c0       	push   0xc00220a7
c0012554:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012557:	50                   	push   eax
c0012558:	e8 23 e2 fe ff       	call   c0000780 <strcmp>
c001255d:	83 c4 10             	add    esp,0x10
c0012560:	85 c0                	test   eax,eax
c0012562:	74 b3                	je     c0012517 <SysOpen(regs*)+0x88>
c0012564:	83 ec 08             	sub    esp,0x8
c0012567:	68 a6 20 02 c0       	push   0xc00220a6
c001256c:	56                   	push   esi
c001256d:	e8 d2 fe ff ff       	call   c0012444 <string_ends_with(char const*, char const*)>
c0012572:	83 c4 10             	add    esp,0x10
c0012575:	85 c0                	test   eax,eax
c0012577:	75 9e                	jne    c0012517 <SysOpen(regs*)+0x88>
c0012579:	83 ec 08             	sub    esp,0x8
c001257c:	68 b0 20 02 c0       	push   0xc00220b0
c0012581:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012584:	50                   	push   eax
c0012585:	e8 ba fe ff ff       	call   c0012444 <string_ends_with(char const*, char const*)>
c001258a:	83 c4 10             	add    esp,0x10
c001258d:	85 c0                	test   eax,eax
c001258f:	0f 85 eb 00 00 00    	jne    c0012680 <SysOpen(regs*)+0x1f1>
c0012595:	83 ec 08             	sub    esp,0x8
c0012598:	68 b5 20 02 c0       	push   0xc00220b5
c001259d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125a0:	50                   	push   eax
c00125a1:	e8 9e fe ff ff       	call   c0012444 <string_ends_with(char const*, char const*)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	85 c0                	test   eax,eax
c00125ab:	0f 85 cf 00 00 00    	jne    c0012680 <SysOpen(regs*)+0x1f1>
c00125b1:	83 ec 08             	sub    esp,0x8
c00125b4:	68 b1 20 02 c0       	push   0xc00220b1
c00125b9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00125bc:	51                   	push   ecx
c00125bd:	e8 be e1 fe ff       	call   c0000780 <strcmp>
c00125c2:	83 c4 10             	add    esp,0x10
c00125c5:	85 c0                	test   eax,eax
c00125c7:	0f 84 b3 00 00 00    	je     c0012680 <SysOpen(regs*)+0x1f1>
c00125cd:	83 ec 08             	sub    esp,0x8
c00125d0:	68 b0 20 02 c0       	push   0xc00220b0
c00125d5:	56                   	push   esi
c00125d6:	e8 69 fe ff ff       	call   c0012444 <string_ends_with(char const*, char const*)>
c00125db:	83 c4 10             	add    esp,0x10
c00125de:	85 c0                	test   eax,eax
c00125e0:	0f 85 9a 00 00 00    	jne    c0012680 <SysOpen(regs*)+0x1f1>
c00125e6:	83 ec 0c             	sub    esp,0xc
c00125e9:	68 14 01 00 00       	push   0x114
c00125ee:	e8 e0 54 ff ff       	call   c0007ad3 <malloc>
c00125f3:	83 c4 0c             	add    esp,0xc
c00125f6:	89 c6                	mov    esi,eax
c00125f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012600:	50                   	push   eax
c0012601:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012604:	52                   	push   edx
c0012605:	56                   	push   esi
c0012606:	e8 9b 92 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c001260b:	83 c4 10             	add    esp,0x10
c001260e:	85 f6                	test   esi,esi
c0012610:	74 5b                	je     c001266d <SysOpen(regs*)+0x1de>
c0012612:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012615:	0f b6 c2             	movzx  eax,dl
c0012618:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001261b:	89 d0                	mov    eax,edx
c001261d:	83 e0 01             	and    eax,0x1
c0012620:	f6 c2 02             	test   dl,0x2
c0012623:	74 03                	je     c0012628 <SysOpen(regs*)+0x199>
c0012625:	83 c8 02             	or     eax,0x2
c0012628:	f6 c2 04             	test   dl,0x4
c001262b:	74 03                	je     c0012630 <SysOpen(regs*)+0x1a1>
c001262d:	83 c8 04             	or     eax,0x4
c0012630:	f6 c2 08             	test   dl,0x8
c0012633:	74 03                	je     c0012638 <SysOpen(regs*)+0x1a9>
c0012635:	83 c8 0a             	or     eax,0xa
c0012638:	80 e2 10             	and    dl,0x10
c001263b:	74 03                	je     c0012640 <SysOpen(regs*)+0x1b1>
c001263d:	83 c8 12             	or     eax,0x12
c0012640:	83 ec 08             	sub    esp,0x8
c0012643:	50                   	push   eax
c0012644:	56                   	push   esi
c0012645:	e8 7a 92 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	85 c0                	test   eax,eax
c001264f:	75 1c                	jne    c001266d <SysOpen(regs*)+0x1de>
c0012651:	83 ec 0c             	sub    esp,0xc
c0012654:	56                   	push   esi
c0012655:	e8 44 6b ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001265a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001265d:	83 c4 10             	add    esp,0x10
c0012660:	89 02                	mov    DWORD PTR [edx],eax
c0012662:	c1 f8 1f             	sar    eax,0x1f
c0012665:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012668:	e9 ba fe ff ff       	jmp    c0012527 <SysOpen(regs*)+0x98>
c001266d:	81 c4 04 01 00 00    	add    esp,0x104
c0012673:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012678:	5b                   	pop    ebx
c0012679:	ba ff ff ff ff       	mov    edx,0xffffffff
c001267e:	5e                   	pop    esi
c001267f:	c3                   	ret    
c0012680:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012683:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012689:	e9 92 fe ff ff       	jmp    c0012520 <SysOpen(regs*)+0x91>

c001268e <KeSystemCall(regs*, void*)>:
c001268e:	53                   	push   ebx
c001268f:	83 ec 08             	sub    esp,0x8
c0012692:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012696:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012699:	83 f8 3e             	cmp    eax,0x3e
c001269c:	77 16                	ja     c00126b4 <KeSystemCall(regs*, void*)+0x26>
c001269e:	8b 14 85 c0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb40]
c00126a5:	85 d2                	test   edx,edx
c00126a7:	74 0b                	je     c00126b4 <KeSystemCall(regs*, void*)+0x26>
c00126a9:	83 ec 0c             	sub    esp,0xc
c00126ac:	53                   	push   ebx
c00126ad:	ff d2                	call   edx
c00126af:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00126b2:	eb 0d                	jmp    c00126c1 <KeSystemCall(regs*, void*)+0x33>
c00126b4:	52                   	push   edx
c00126b5:	52                   	push   edx
c00126b6:	50                   	push   eax
c00126b7:	68 ba 20 02 c0       	push   0xc00220ba
c00126bc:	e8 49 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00126c1:	83 c4 10             	add    esp,0x10
c00126c4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00126c9:	83 c4 08             	add    esp,0x8
c00126cc:	31 d2                	xor    edx,edx
c00126ce:	5b                   	pop    ebx
c00126cf:	c3                   	ret    

c00126d0 <KeSwitchEndian16(unsigned short)>:
c00126d0:	83 ec 04             	sub    esp,0x4
c00126d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126d7:	66 89 04 24          	mov    WORD PTR [esp],ax
c00126db:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00126df:	c1 f8 08             	sar    eax,0x8
c00126e2:	89 c2                	mov    edx,eax
c00126e4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00126e8:	c1 e0 08             	shl    eax,0x8
c00126eb:	09 d0                	or     eax,edx
c00126ed:	83 c4 04             	add    esp,0x4
c00126f0:	c3                   	ret    
c00126f1:	8d 76 00             	lea    esi,[esi+0x0]

c00126f4 <KeSwitchEndian32(unsigned int)>:
c00126f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126f8:	c1 e8 18             	shr    eax,0x18
c00126fb:	89 c2                	mov    edx,eax
c00126fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012701:	c1 e0 08             	shl    eax,0x8
c0012704:	25 00 00 ff 00       	and    eax,0xff0000
c0012709:	09 c2                	or     edx,eax
c001270b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001270f:	c1 e8 08             	shr    eax,0x8
c0012712:	25 00 ff 00 00       	and    eax,0xff00
c0012717:	09 c2                	or     edx,eax
c0012719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001271d:	c1 e0 18             	shl    eax,0x18
c0012720:	09 d0                	or     eax,edx
c0012722:	c3                   	ret    
c0012723:	90                   	nop

c0012724 <EthernetCRC32(unsigned char*, int)>:
c0012724:	83 ec 10             	sub    esp,0x10
c0012727:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001272c:	75 0a                	jne    c0012738 <EthernetCRC32(unsigned char*, int)+0x14>
c001272e:	b8 00 00 00 00       	mov    eax,0x0
c0012733:	e9 8c 00 00 00       	jmp    c00127c4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012738:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001273d:	7f 09                	jg     c0012748 <EthernetCRC32(unsigned char*, int)+0x24>
c001273f:	b8 00 00 00 00       	mov    eax,0x0
c0012744:	eb 7e                	jmp    c00127c4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012746:	66 90                	xchg   ax,ax
c0012748:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012750:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012758:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001275c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012760:	7d 5a                	jge    c00127bc <EthernetCRC32(unsigned char*, int)+0x98>
c0012762:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012766:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001276a:	01 d0                	add    eax,edx
c001276c:	8a 00                	mov    al,BYTE PTR [eax]
c001276e:	0f b6 c0             	movzx  eax,al
c0012771:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012775:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001277d:	8d 76 00             	lea    esi,[esi+0x0]
c0012780:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012785:	7f 2d                	jg     c00127b4 <EthernetCRC32(unsigned char*, int)+0x90>
c0012787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001278b:	83 e0 01             	and    eax,0x1
c001278e:	74 10                	je     c00127a0 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012794:	d1 e8                	shr    eax,1
c0012796:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001279b:	eb 0b                	jmp    c00127a8 <EthernetCRC32(unsigned char*, int)+0x84>
c001279d:	8d 76 00             	lea    esi,[esi+0x0]
c00127a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127a4:	d1 e8                	shr    eax,1
c00127a6:	66 90                	xchg   ax,ax
c00127a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127ac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00127b1:	eb cd                	jmp    c0012780 <EthernetCRC32(unsigned char*, int)+0x5c>
c00127b3:	90                   	nop
c00127b4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00127b9:	eb 9d                	jmp    c0012758 <EthernetCRC32(unsigned char*, int)+0x34>
c00127bb:	90                   	nop
c00127bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127c0:	f7 d0                	not    eax
c00127c2:	66 90                	xchg   ax,ax
c00127c4:	83 c4 10             	add    esp,0x10
c00127c7:	c3                   	ret    

c00127c8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00127c8:	83 ec 2c             	sub    esp,0x2c
c00127cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00127d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127e3:	0f b7 c0             	movzx  eax,ax
c00127e6:	3d 06 08 00 00       	cmp    eax,0x806
c00127eb:	75 13                	jne    c0012800 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00127ed:	83 ec 0c             	sub    esp,0xc
c00127f0:	68 ce 20 02 c0       	push   0xc00220ce
c00127f5:	e8 10 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	eb 25                	jmp    c0012824 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00127ff:	90                   	nop
c0012800:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012804:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012807:	0f b7 c0             	movzx  eax,ax
c001280a:	3d 00 08 00 00       	cmp    eax,0x800
c001280f:	75 13                	jne    c0012824 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012811:	83 ec 0c             	sub    esp,0xc
c0012814:	68 e4 20 02 c0       	push   0xc00220e4
c0012819:	e8 ec 80 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001281e:	83 c4 10             	add    esp,0x10
c0012821:	8d 76 00             	lea    esi,[esi+0x0]
c0012824:	90                   	nop
c0012825:	83 c4 2c             	add    esp,0x2c
c0012828:	c3                   	ret    

c0012829 <CmOpen(char const*)>:
c0012829:	57                   	push   edi
c001282a:	56                   	push   esi
c001282b:	53                   	push   ebx
c001282c:	83 ec 1c             	sub    esp,0x1c
c001282f:	6a 30                	push   0x30
c0012831:	e8 9d 52 ff ff       	call   c0007ad3 <malloc>
c0012836:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001283d:	89 c3                	mov    ebx,eax
c001283f:	e8 8f 52 ff ff       	call   c0007ad3 <malloc>
c0012844:	83 c4 0c             	add    esp,0xc
c0012847:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001284d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012851:	89 c6                	mov    esi,eax
c0012853:	50                   	push   eax
c0012854:	e8 4d 90 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0012859:	83 c4 0c             	add    esp,0xc
c001285c:	89 33                	mov    DWORD PTR [ebx],esi
c001285e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012862:	50                   	push   eax
c0012863:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012867:	50                   	push   eax
c0012868:	56                   	push   esi
c0012869:	e8 58 93 ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c001286e:	5a                   	pop    edx
c001286f:	59                   	pop    ecx
c0012870:	6a 01                	push   0x1
c0012872:	ff 33                	push   DWORD PTR [ebx]
c0012874:	e8 4b 90 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c0012879:	5e                   	pop    esi
c001287a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001287e:	e8 50 52 ff ff       	call   c0007ad3 <malloc>
c0012883:	5a                   	pop    edx
c0012884:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012888:	89 c7                	mov    edi,eax
c001288a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001288c:	8b 10                	mov    edx,DWORD PTR [eax]
c001288e:	56                   	push   esi
c001288f:	57                   	push   edi
c0012890:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012894:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012898:	50                   	push   eax
c0012899:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001289c:	83 c4 14             	add    esp,0x14
c001289f:	ff 33                	push   DWORD PTR [ebx]
c00128a1:	e8 7c 90 ff ff       	call   c000b922 <File::close()>
c00128a6:	59                   	pop    ecx
c00128a7:	58                   	pop    eax
c00128a8:	6a 13                	push   0x13
c00128aa:	ff 33                	push   DWORD PTR [ebx]
c00128ac:	e8 13 90 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c00128b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00128b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00128b8:	57                   	push   edi
c00128b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128c1:	50                   	push   eax
c00128c2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00128c5:	83 c4 14             	add    esp,0x14
c00128c8:	57                   	push   edi
c00128c9:	e8 15 52 ff ff       	call   c0007ae3 <free>
c00128ce:	83 c4 10             	add    esp,0x10
c00128d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00128d4:	75 10                	jne    c00128e6 <CmOpen(char const*)+0xbd>
c00128d6:	83 ec 0c             	sub    esp,0xc
c00128d9:	68 f9 20 02 c0       	push   0xc00220f9
c00128de:	e8 de e9 ff ff       	call   c00112c1 <KePanic(char const*)>
c00128e3:	83 c4 10             	add    esp,0x10
c00128e6:	50                   	push   eax
c00128e7:	6a 00                	push   0x0
c00128e9:	6a 00                	push   0x0
c00128eb:	ff 33                	push   DWORD PTR [ebx]
c00128ed:	8d 7b 05             	lea    edi,[ebx+0x5]
c00128f0:	e8 8d 90 ff ff       	call   c000b982 <File::seek(unsigned long long)>
c00128f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00128f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00128fc:	57                   	push   edi
c00128fd:	6a 00                	push   0x0
c00128ff:	6a 2b                	push   0x2b
c0012901:	50                   	push   eax
c0012902:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012905:	83 c4 1c             	add    esp,0x1c
c0012908:	6a 00                	push   0x0
c001290a:	6a 00                	push   0x0
c001290c:	ff 33                	push   DWORD PTR [ebx]
c001290e:	e8 6f 90 ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0012913:	83 c4 0c             	add    esp,0xc
c0012916:	6a 08                	push   0x8
c0012918:	68 0a 21 02 c0       	push   0xc002210a
c001291d:	57                   	push   edi
c001291e:	e8 5d da fe ff       	call   c0000380 <memcmp>
c0012923:	83 c4 10             	add    esp,0x10
c0012926:	85 c0                	test   eax,eax
c0012928:	74 10                	je     c001293a <CmOpen(char const*)+0x111>
c001292a:	83 ec 0c             	sub    esp,0xc
c001292d:	68 13 21 02 c0       	push   0xc0022113
c0012932:	e8 8a e9 ff ff       	call   c00112c1 <KePanic(char const*)>
c0012937:	83 c4 10             	add    esp,0x10
c001293a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001293e:	83 c4 10             	add    esp,0x10
c0012941:	89 d8                	mov    eax,ebx
c0012943:	5b                   	pop    ebx
c0012944:	5e                   	pop    esi
c0012945:	5f                   	pop    edi
c0012946:	c3                   	ret    

c0012947 <CmClose(Reghive_Tag*)>:
c0012947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001294b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001294f:	74 0b                	je     c001295c <CmClose(Reghive_Tag*)+0x15>
c0012951:	8b 00                	mov    eax,DWORD PTR [eax]
c0012953:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012957:	e9 c6 8f ff ff       	jmp    c000b922 <File::close()>
c001295c:	c3                   	ret    

c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c001295d:	53                   	push   ebx
c001295e:	83 ec 18             	sub    esp,0x18
c0012961:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012965:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012969:	74 29                	je     c0012994 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001296b:	50                   	push   eax
c001296c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012971:	99                   	cdq    
c0012972:	52                   	push   edx
c0012973:	50                   	push   eax
c0012974:	ff 33                	push   DWORD PTR [ebx]
c0012976:	e8 07 90 ff ff       	call   c000b982 <File::seek(unsigned long long)>
c001297b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001297d:	5a                   	pop    edx
c001297e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012982:	8b 10                	mov    edx,DWORD PTR [eax]
c0012984:	51                   	push   ecx
c0012985:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012989:	6a 00                	push   0x0
c001298b:	6a 2b                	push   0x2b
c001298d:	50                   	push   eax
c001298e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012991:	83 c4 20             	add    esp,0x20
c0012994:	83 c4 18             	add    esp,0x18
c0012997:	5b                   	pop    ebx
c0012998:	c3                   	ret    

c0012999 <CmGetString(Reghive_Tag*, int, char*)>:
c0012999:	55                   	push   ebp
c001299a:	57                   	push   edi
c001299b:	56                   	push   esi
c001299c:	53                   	push   ebx
c001299d:	31 db                	xor    ebx,ebx
c001299f:	83 ec 70             	sub    esp,0x70
c00129a2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00129a6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00129ad:	50                   	push   eax
c00129ae:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00129b5:	55                   	push   ebp
c00129b6:	e8 a2 ff ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00129c3:	c1 e0 08             	shl    eax,0x8
c00129c6:	89 c2                	mov    edx,eax
c00129c8:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00129cd:	09 d0                	or     eax,edx
c00129cf:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00129d4:	c1 e0 08             	shl    eax,0x8
c00129d7:	09 d0                	or     eax,edx
c00129d9:	74 25                	je     c0012a00 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00129db:	52                   	push   edx
c00129dc:	8d 54 24 39          	lea    edx,[esp+0x39]
c00129e0:	52                   	push   edx
c00129e1:	6b fb 0d             	imul   edi,ebx,0xd
c00129e4:	50                   	push   eax
c00129e5:	55                   	push   ebp
c00129e6:	e8 72 ff ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129eb:	8d 74 24 49          	lea    esi,[esp+0x49]
c00129ef:	b9 27 00 00 00       	mov    ecx,0x27
c00129f4:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00129fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	83 c3 03             	add    ebx,0x3
c0012a03:	83 fb 15             	cmp    ebx,0x15
c0012a06:	75 b6                	jne    c00129be <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012a08:	83 c4 6c             	add    esp,0x6c
c0012a0b:	5b                   	pop    ebx
c0012a0c:	5e                   	pop    esi
c0012a0d:	5f                   	pop    edi
c0012a0e:	5d                   	pop    ebp
c0012a0f:	c3                   	ret    

c0012a10 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012a10:	83 ec 40             	sub    esp,0x40
c0012a13:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a17:	50                   	push   eax
c0012a18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a20:	e8 38 ff ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a25:	83 c4 10             	add    esp,0x10
c0012a28:	83 c8 ff             	or     eax,0xffffffff
c0012a2b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012a30:	75 19                	jne    c0012a4b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012a32:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012a37:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012a3c:	c1 e0 08             	shl    eax,0x8
c0012a3f:	09 c2                	or     edx,eax
c0012a41:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012a46:	c1 e0 10             	shl    eax,0x10
c0012a49:	09 d0                	or     eax,edx
c0012a4b:	83 c4 3c             	add    esp,0x3c
c0012a4e:	c3                   	ret    

c0012a4f <CmGetNext(Reghive_Tag*, int)>:
c0012a4f:	83 ec 40             	sub    esp,0x40
c0012a52:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a56:	50                   	push   eax
c0012a57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a5f:	e8 f9 fe ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a64:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012a69:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012a6e:	c1 e0 08             	shl    eax,0x8
c0012a71:	09 c2                	or     edx,eax
c0012a73:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012a78:	83 c4 4c             	add    esp,0x4c
c0012a7b:	c1 e0 10             	shl    eax,0x10
c0012a7e:	09 d0                	or     eax,edx
c0012a80:	c3                   	ret    

c0012a81 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012a81:	53                   	push   ebx
c0012a82:	83 ec 18             	sub    esp,0x18
c0012a85:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a89:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a8d:	74 29                	je     c0012ab8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012a8f:	50                   	push   eax
c0012a90:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012a95:	99                   	cdq    
c0012a96:	52                   	push   edx
c0012a97:	50                   	push   eax
c0012a98:	ff 33                	push   DWORD PTR [ebx]
c0012a9a:	e8 e3 8e ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0012a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012aa1:	5a                   	pop    edx
c0012aa2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012aa6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aa8:	51                   	push   ecx
c0012aa9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012aad:	6a 00                	push   0x0
c0012aaf:	6a 2b                	push   0x2b
c0012ab1:	50                   	push   eax
c0012ab2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ab5:	83 c4 20             	add    esp,0x20
c0012ab8:	83 c4 18             	add    esp,0x18
c0012abb:	5b                   	pop    ebx
c0012abc:	c3                   	ret    

c0012abd <CmFreeExtent(Reghive_Tag*, int)>:
c0012abd:	53                   	push   ebx
c0012abe:	83 ec 3c             	sub    esp,0x3c
c0012ac1:	6a 2b                	push   0x2b
c0012ac3:	6a 00                	push   0x0
c0012ac5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ac9:	53                   	push   ebx
c0012aca:	e8 21 da fe ff       	call   c00004f0 <memset>
c0012acf:	83 c4 0c             	add    esp,0xc
c0012ad2:	53                   	push   ebx
c0012ad3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ad7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012adb:	e8 a1 ff ff ff       	call   c0012a81 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ae0:	83 c4 48             	add    esp,0x48
c0012ae3:	5b                   	pop    ebx
c0012ae4:	c3                   	ret    

c0012ae5 <CmUpdateHeader(Reghive_Tag*)>:
c0012ae5:	83 ec 0c             	sub    esp,0xc
c0012ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aec:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012af0:	74 10                	je     c0012b02 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012af2:	52                   	push   edx
c0012af3:	8d 50 05             	lea    edx,[eax+0x5]
c0012af6:	52                   	push   edx
c0012af7:	6a 00                	push   0x0
c0012af9:	50                   	push   eax
c0012afa:	e8 82 ff ff ff       	call   c0012a81 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012aff:	83 c4 10             	add    esp,0x10
c0012b02:	83 c4 0c             	add    esp,0xc
c0012b05:	c3                   	ret    

c0012b06 <CmExpand(Reghive_Tag*, int)>:
c0012b06:	55                   	push   ebp
c0012b07:	57                   	push   edi
c0012b08:	83 cf ff             	or     edi,0xffffffff
c0012b0b:	56                   	push   esi
c0012b0c:	53                   	push   ebx
c0012b0d:	83 ec 3c             	sub    esp,0x3c
c0012b10:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012b14:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012b18:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012b1c:	74 59                	je     c0012b77 <CmExpand(Reghive_Tag*, int)+0x71>
c0012b1e:	50                   	push   eax
c0012b1f:	31 d2                	xor    edx,edx
c0012b21:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012b25:	31 ff                	xor    edi,edi
c0012b27:	52                   	push   edx
c0012b28:	50                   	push   eax
c0012b29:	ff 33                	push   DWORD PTR [ebx]
c0012b2b:	e8 52 8e ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0012b30:	83 c4 0c             	add    esp,0xc
c0012b33:	6a 2b                	push   0x2b
c0012b35:	6a 00                	push   0x0
c0012b37:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012b3b:	55                   	push   ebp
c0012b3c:	e8 af d9 fe ff       	call   c00004f0 <memset>
c0012b41:	83 c4 10             	add    esp,0x10
c0012b44:	39 f7                	cmp    edi,esi
c0012b46:	7d 1b                	jge    c0012b63 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012b48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b4a:	83 ec 0c             	sub    esp,0xc
c0012b4d:	47                   	inc    edi
c0012b4e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012b52:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b54:	51                   	push   ecx
c0012b55:	55                   	push   ebp
c0012b56:	6a 00                	push   0x0
c0012b58:	6a 2b                	push   0x2b
c0012b5a:	50                   	push   eax
c0012b5b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012b5e:	83 c4 20             	add    esp,0x20
c0012b61:	eb e1                	jmp    c0012b44 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012b63:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012b66:	83 ec 0c             	sub    esp,0xc
c0012b69:	01 fe                	add    esi,edi
c0012b6b:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012b6e:	53                   	push   ebx
c0012b6f:	e8 71 ff ff ff       	call   c0012ae5 <CmUpdateHeader(Reghive_Tag*)>
c0012b74:	83 c4 10             	add    esp,0x10
c0012b77:	83 c4 3c             	add    esp,0x3c
c0012b7a:	89 f8                	mov    eax,edi
c0012b7c:	5b                   	pop    ebx
c0012b7d:	5e                   	pop    esi
c0012b7e:	5f                   	pop    edi
c0012b7f:	5d                   	pop    ebp
c0012b80:	c3                   	ret    

c0012b81 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012b81:	55                   	push   ebp
c0012b82:	57                   	push   edi
c0012b83:	56                   	push   esi
c0012b84:	53                   	push   ebx
c0012b85:	83 cb ff             	or     ebx,0xffffffff
c0012b88:	83 ec 1c             	sub    esp,0x1c
c0012b8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012b8f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012b93:	74 68                	je     c0012bfd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b95:	51                   	push   ecx
c0012b96:	be 2b 00 00 00       	mov    esi,0x2b
c0012b9b:	6a 00                	push   0x0
c0012b9d:	31 ff                	xor    edi,edi
c0012b9f:	6a 00                	push   0x0
c0012ba1:	31 db                	xor    ebx,ebx
c0012ba3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012ba6:	e8 d7 8d ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0012bab:	83 c4 10             	add    esp,0x10
c0012bae:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012bb1:	76 3b                	jbe    c0012bee <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012bb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012bb6:	83 ec 0c             	sub    esp,0xc
c0012bb9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012bbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bbf:	51                   	push   ecx
c0012bc0:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012bc4:	51                   	push   ecx
c0012bc5:	6a 00                	push   0x0
c0012bc7:	6a 01                	push   0x1
c0012bc9:	50                   	push   eax
c0012bca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012bcd:	83 c4 20             	add    esp,0x20
c0012bd0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012bd5:	74 26                	je     c0012bfd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012bd7:	52                   	push   edx
c0012bd8:	43                   	inc    ebx
c0012bd9:	57                   	push   edi
c0012bda:	56                   	push   esi
c0012bdb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012bde:	e8 9f 8d ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0012be3:	83 c6 2b             	add    esi,0x2b
c0012be6:	83 d7 00             	adc    edi,0x0
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	eb c0                	jmp    c0012bae <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012bee:	50                   	push   eax
c0012bef:	50                   	push   eax
c0012bf0:	6a 40                	push   0x40
c0012bf2:	55                   	push   ebp
c0012bf3:	e8 0e ff ff ff       	call   c0012b06 <CmExpand(Reghive_Tag*, int)>
c0012bf8:	83 c4 10             	add    esp,0x10
c0012bfb:	89 c3                	mov    ebx,eax
c0012bfd:	83 c4 1c             	add    esp,0x1c
c0012c00:	89 d8                	mov    eax,ebx
c0012c02:	5b                   	pop    ebx
c0012c03:	5e                   	pop    esi
c0012c04:	5f                   	pop    edi
c0012c05:	5d                   	pop    ebp
c0012c06:	c3                   	ret    

c0012c07 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012c07:	55                   	push   ebp
c0012c08:	57                   	push   edi
c0012c09:	56                   	push   esi
c0012c0a:	53                   	push   ebx
c0012c0b:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c11:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012c18:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c1f:	e8 5d ff ff ff       	call   c0012b81 <CmFindUnusedExtent(Reghive_Tag*)>
c0012c24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c28:	83 c4 0c             	add    esp,0xc
c0012c2b:	6a 2b                	push   0x2b
c0012c2d:	6a 00                	push   0x0
c0012c2f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012c33:	55                   	push   ebp
c0012c34:	e8 b7 d8 fe ff       	call   c00004f0 <memset>
c0012c39:	83 c4 10             	add    esp,0x10
c0012c3c:	85 db                	test   ebx,ebx
c0012c3e:	74 12                	je     c0012c52 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012c40:	51                   	push   ecx
c0012c41:	55                   	push   ebp
c0012c42:	53                   	push   ebx
c0012c43:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c4a:	e8 0e fd ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c4f:	83 c4 10             	add    esp,0x10
c0012c52:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012c56:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012c5d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012c62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012c64:	85 db                	test   ebx,ebx
c0012c66:	74 49                	je     c0012cb1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012c68:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012c6d:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012c72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c76:	c1 e0 08             	shl    eax,0x8
c0012c79:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012c7f:	09 c8                	or     eax,ecx
c0012c81:	74 11                	je     c0012c94 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012c83:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012c87:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012c8b:	c1 e8 10             	shr    eax,0x10
c0012c8e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012c92:	eb 0f                	jmp    c0012ca3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012c94:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c99:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c9e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012ca3:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012ca7:	c1 ea 08             	shr    edx,0x8
c0012caa:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012caf:	eb 0f                	jmp    c0012cc0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012cb1:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012cb6:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012cbb:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012cc0:	52                   	push   edx
c0012cc1:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012cc5:	50                   	push   eax
c0012cc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cca:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cd1:	e8 ab fd ff ff       	call   c0012a81 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	85 db                	test   ebx,ebx
c0012cdb:	74 12                	je     c0012cef <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012cdd:	50                   	push   eax
c0012cde:	55                   	push   ebp
c0012cdf:	53                   	push   ebx
c0012ce0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ce7:	e8 95 fd ff ff       	call   c0012a81 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cec:	83 c4 10             	add    esp,0x10
c0012cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cf3:	83 c4 7c             	add    esp,0x7c
c0012cf6:	5b                   	pop    ebx
c0012cf7:	5e                   	pop    esi
c0012cf8:	5f                   	pop    edi
c0012cf9:	5d                   	pop    ebp
c0012cfa:	c3                   	ret    

c0012cfb <CmSetString(Reghive_Tag*, int, char const*)>:
c0012cfb:	55                   	push   ebp
c0012cfc:	57                   	push   edi
c0012cfd:	56                   	push   esi
c0012cfe:	53                   	push   ebx
c0012cff:	bb 27 00 00 00       	mov    ebx,0x27
c0012d04:	81 ec 88 00 00 00    	sub    esp,0x88
c0012d0a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012d11:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012d18:	e8 63 d8 fe ff       	call   c0000580 <strlen>
c0012d1d:	8d 48 26             	lea    ecx,[eax+0x26]
c0012d20:	89 c8                	mov    eax,ecx
c0012d22:	99                   	cdq    
c0012d23:	f7 fb                	idiv   ebx
c0012d25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d29:	83 c4 10             	add    esp,0x10
c0012d2c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012d32:	7e 10                	jle    c0012d44 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012d34:	83 ec 0c             	sub    esp,0xc
c0012d37:	68 24 21 02 c0       	push   0xc0022124
c0012d3c:	e8 80 e5 ff ff       	call   c00112c1 <KePanic(char const*)>
c0012d41:	83 c4 10             	add    esp,0x10
c0012d44:	53                   	push   ebx
c0012d45:	31 ed                	xor    ebp,ebp
c0012d47:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012d4b:	53                   	push   ebx
c0012d4c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d53:	57                   	push   edi
c0012d54:	e8 04 fc ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d59:	83 c4 10             	add    esp,0x10
c0012d5c:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012d60:	89 f0                	mov    eax,esi
c0012d62:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012d66:	c1 e0 08             	shl    eax,0x8
c0012d69:	09 c6                	or     esi,eax
c0012d6b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012d6f:	c1 e6 08             	shl    esi,0x8
c0012d72:	09 c6                	or     esi,eax
c0012d74:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012d78:	7e 72                	jle    c0012dec <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012d7a:	85 f6                	test   esi,esi
c0012d7c:	75 25                	jne    c0012da3 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012d7e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012d83:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012d87:	50                   	push   eax
c0012d88:	6a 00                	push   0x0
c0012d8a:	6a 00                	push   0x0
c0012d8c:	57                   	push   edi
c0012d8d:	e8 75 fe ff ff       	call   c0012c07 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012d92:	83 c4 10             	add    esp,0x10
c0012d95:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012d98:	89 c6                	mov    esi,eax
c0012d9a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012d9d:	c1 f8 10             	sar    eax,0x10
c0012da0:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012da3:	51                   	push   ecx
c0012da4:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012da8:	52                   	push   edx
c0012da9:	56                   	push   esi
c0012daa:	57                   	push   edi
c0012dab:	e8 ad fb ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012db0:	83 c4 0c             	add    esp,0xc
c0012db3:	6a 27                	push   0x27
c0012db5:	6a 00                	push   0x0
c0012db7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012dbb:	51                   	push   ecx
c0012dbc:	e8 2f d7 fe ff       	call   c00004f0 <memset>
c0012dc1:	6b c5 27             	imul   eax,ebp,0x27
c0012dc4:	83 c4 0c             	add    esp,0xc
c0012dc7:	6a 27                	push   0x27
c0012dc9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012dd0:	50                   	push   eax
c0012dd1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012dd5:	51                   	push   ecx
c0012dd6:	e8 b5 d8 fe ff       	call   c0000690 <strncpy>
c0012ddb:	83 c4 0c             	add    esp,0xc
c0012dde:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012de2:	52                   	push   edx
c0012de3:	56                   	push   esi
c0012de4:	57                   	push   edi
c0012de5:	e8 97 fc ff ff       	call   c0012a81 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012dea:	eb 19                	jmp    c0012e05 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012dec:	85 f6                	test   esi,esi
c0012dee:	74 18                	je     c0012e08 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012df0:	52                   	push   edx
c0012df1:	52                   	push   edx
c0012df2:	56                   	push   esi
c0012df3:	57                   	push   edi
c0012df4:	e8 c4 fc ff ff       	call   c0012abd <CmFreeExtent(Reghive_Tag*, int)>
c0012df9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012dfd:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012e01:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012e05:	83 c4 10             	add    esp,0x10
c0012e08:	45                   	inc    ebp
c0012e09:	83 c3 03             	add    ebx,0x3
c0012e0c:	83 fd 07             	cmp    ebp,0x7
c0012e0f:	0f 85 47 ff ff ff    	jne    c0012d5c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012e15:	50                   	push   eax
c0012e16:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012e1a:	50                   	push   eax
c0012e1b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e22:	57                   	push   edi
c0012e23:	e8 59 fc ff ff       	call   c0012a81 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e28:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012e2e:	5b                   	pop    ebx
c0012e2f:	5e                   	pop    esi
c0012e30:	5f                   	pop    edi
c0012e31:	5d                   	pop    ebp
c0012e32:	c3                   	ret    

c0012e33 <CmGetMatch(char*, char*, bool, bool*)>:
c0012e33:	56                   	push   esi
c0012e34:	53                   	push   ebx
c0012e35:	50                   	push   eax
c0012e36:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012e3b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e3f:	74 25                	je     c0012e66 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012e41:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e44:	31 db                	xor    ebx,ebx
c0012e46:	50                   	push   eax
c0012e47:	50                   	push   eax
c0012e48:	8d 04 9d c0 35 02 c0 	lea    eax,[ebx*4-0x3ffdca40]
c0012e4f:	50                   	push   eax
c0012e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e54:	e8 27 d9 fe ff       	call   c0000780 <strcmp>
c0012e59:	83 c4 10             	add    esp,0x10
c0012e5c:	85 c0                	test   eax,eax
c0012e5e:	74 2e                	je     c0012e8e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e60:	43                   	inc    ebx
c0012e61:	83 fb 3f             	cmp    ebx,0x3f
c0012e64:	75 e0                	jne    c0012e46 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012e66:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e69:	31 db                	xor    ebx,ebx
c0012e6b:	51                   	push   ecx
c0012e6c:	51                   	push   ecx
c0012e6d:	8d 04 9d c0 35 02 c0 	lea    eax,[ebx*4-0x3ffdca40]
c0012e74:	50                   	push   eax
c0012e75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e79:	e8 02 d9 fe ff       	call   c0000780 <strcmp>
c0012e7e:	83 c4 10             	add    esp,0x10
c0012e81:	85 c0                	test   eax,eax
c0012e83:	74 09                	je     c0012e8e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e85:	43                   	inc    ebx
c0012e86:	83 fb 3f             	cmp    ebx,0x3f
c0012e89:	75 e0                	jne    c0012e6b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012e8b:	83 cb ff             	or     ebx,0xffffffff
c0012e8e:	5a                   	pop    edx
c0012e8f:	89 d8                	mov    eax,ebx
c0012e91:	5b                   	pop    ebx
c0012e92:	5e                   	pop    esi
c0012e93:	c3                   	ret    

c0012e94 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012e94:	55                   	push   ebp
c0012e95:	31 c0                	xor    eax,eax
c0012e97:	57                   	push   edi
c0012e98:	56                   	push   esi
c0012e99:	53                   	push   ebx
c0012e9a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e9e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ea2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012ea6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012eaa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012eac:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012eaf:	83 fd 1f             	cmp    ebp,0x1f
c0012eb2:	7f 0b                	jg     c0012ebf <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012eb4:	0f b6 c2             	movzx  eax,dl
c0012eb7:	d3 e0                	shl    eax,cl
c0012eb9:	09 07                	or     DWORD PTR [edi],eax
c0012ebb:	b0 01                	mov    al,0x1
c0012ebd:	01 33                	add    DWORD PTR [ebx],esi
c0012ebf:	5b                   	pop    ebx
c0012ec0:	5e                   	pop    esi
c0012ec1:	5f                   	pop    edi
c0012ec2:	5d                   	pop    ebp
c0012ec3:	c3                   	ret    

c0012ec4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012ec4:	57                   	push   edi
c0012ec5:	56                   	push   esi
c0012ec6:	53                   	push   ebx
c0012ec7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ecb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012ecf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012ed3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ed7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012ed9:	7c 17                	jl     c0012ef2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012edb:	8b 17                	mov    edx,DWORD PTR [edi]
c0012edd:	b8 01 00 00 00       	mov    eax,0x1
c0012ee2:	d3 e0                	shl    eax,cl
c0012ee4:	48                   	dec    eax
c0012ee5:	21 d0                	and    eax,edx
c0012ee7:	d3 ea                	shr    edx,cl
c0012ee9:	89 17                	mov    DWORD PTR [edi],edx
c0012eeb:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012eed:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012ef0:	eb 05                	jmp    c0012ef7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012ef2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ef5:	31 c0                	xor    eax,eax
c0012ef7:	5b                   	pop    ebx
c0012ef8:	5e                   	pop    esi
c0012ef9:	5f                   	pop    edi
c0012efa:	c3                   	ret    

c0012efb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012efb:	83 ec 40             	sub    esp,0x40
c0012efe:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f02:	50                   	push   eax
c0012f03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f0b:	e8 4d fa ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f10:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012f14:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012f18:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012f1c:	89 10                	mov    DWORD PTR [eax],edx
c0012f1e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012f21:	83 c4 4c             	add    esp,0x4c
c0012f24:	c3                   	ret    

c0012f25 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012f25:	55                   	push   ebp
c0012f26:	57                   	push   edi
c0012f27:	56                   	push   esi
c0012f28:	53                   	push   ebx
c0012f29:	83 ec 40             	sub    esp,0x40
c0012f2c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012f30:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012f34:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012f38:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012f3c:	53                   	push   ebx
c0012f3d:	56                   	push   esi
c0012f3e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f42:	e8 16 fa ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f47:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012f4b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012f4f:	83 c4 0c             	add    esp,0xc
c0012f52:	53                   	push   ebx
c0012f53:	56                   	push   esi
c0012f54:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f58:	e8 24 fb ff ff       	call   c0012a81 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f5d:	83 c4 4c             	add    esp,0x4c
c0012f60:	5b                   	pop    ebx
c0012f61:	5e                   	pop    esi
c0012f62:	5f                   	pop    edi
c0012f63:	5d                   	pop    ebp
c0012f64:	c3                   	ret    

c0012f65 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012f65:	55                   	push   ebp
c0012f66:	57                   	push   edi
c0012f67:	56                   	push   esi
c0012f68:	31 f6                	xor    esi,esi
c0012f6a:	53                   	push   ebx
c0012f6b:	31 db                	xor    ebx,ebx
c0012f6d:	83 ec 40             	sub    esp,0x40
c0012f70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f78:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012f80:	6a 12                	push   0x12
c0012f82:	68 ee 00 00 00       	push   0xee
c0012f87:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f8b:	e8 60 d5 fe ff       	call   c00004f0 <memset>
c0012f90:	83 c4 10             	add    esp,0x10
c0012f93:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012f97:	6a 08                	push   0x8
c0012f99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f9d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012fa1:	50                   	push   eax
c0012fa2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012fa6:	55                   	push   ebp
c0012fa7:	57                   	push   edi
c0012fa8:	e8 e7 fe ff ff       	call   c0012e94 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012fad:	83 c4 10             	add    esp,0x10
c0012fb0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fb4:	50                   	push   eax
c0012fb5:	6a 06                	push   0x6
c0012fb7:	55                   	push   ebp
c0012fb8:	57                   	push   edi
c0012fb9:	e8 06 ff ff ff       	call   c0012ec4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012fbe:	83 c4 10             	add    esp,0x10
c0012fc1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fc6:	74 07                	je     c0012fcf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012fc8:	46                   	inc    esi
c0012fc9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012fcd:	eb e1                	jmp    c0012fb0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012fcf:	43                   	inc    ebx
c0012fd0:	83 fb 12             	cmp    ebx,0x12
c0012fd3:	75 c2                	jne    c0012f97 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012fd5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012fd9:	31 f6                	xor    esi,esi
c0012fdb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012fde:	50                   	push   eax
c0012fdf:	50                   	push   eax
c0012fe0:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012fe5:	46                   	inc    esi
c0012fe6:	8d 04 85 c0 35 02 c0 	lea    eax,[eax*4-0x3ffdca40]
c0012fed:	50                   	push   eax
c0012fee:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012ff2:	e8 79 d8 fe ff       	call   c0000870 <strcat>
c0012ff7:	83 c4 10             	add    esp,0x10
c0012ffa:	83 fe 18             	cmp    esi,0x18
c0012ffd:	75 df                	jne    c0012fde <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012fff:	83 c4 3c             	add    esp,0x3c
c0013002:	31 c0                	xor    eax,eax
c0013004:	5b                   	pop    ebx
c0013005:	5e                   	pop    esi
c0013006:	5f                   	pop    edi
c0013007:	5d                   	pop    ebp
c0013008:	c3                   	ret    

c0013009 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013009:	83 ec 40             	sub    esp,0x40
c001300c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013010:	50                   	push   eax
c0013011:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013015:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013019:	e8 3f f9 ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001301e:	58                   	pop    eax
c001301f:	5a                   	pop    edx
c0013020:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013024:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013028:	50                   	push   eax
c0013029:	e8 37 ff ff ff       	call   c0012f65 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001302e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013033:	83 c4 4c             	add    esp,0x4c
c0013036:	c3                   	ret    

c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013037:	55                   	push   ebp
c0013038:	57                   	push   edi
c0013039:	56                   	push   esi
c001303a:	53                   	push   ebx
c001303b:	31 db                	xor    ebx,ebx
c001303d:	83 ec 70             	sub    esp,0x70
c0013040:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013047:	6a 30                	push   0x30
c0013049:	6a 00                	push   0x0
c001304b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001304f:	56                   	push   esi
c0013050:	e8 9b d4 fe ff       	call   c00004f0 <memset>
c0013055:	83 c4 10             	add    esp,0x10
c0013058:	83 ec 0c             	sub    esp,0xc
c001305b:	57                   	push   edi
c001305c:	e8 1f d5 fe ff       	call   c0000580 <strlen>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	39 d8                	cmp    eax,ebx
c0013066:	76 16                	jbe    c001307e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013068:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001306c:	83 ec 0c             	sub    esp,0xc
c001306f:	50                   	push   eax
c0013070:	e8 eb d8 fe ff       	call   c0000960 <toupper>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001307b:	43                   	inc    ebx
c001307c:	eb da                	jmp    c0013058 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001307e:	52                   	push   edx
c001307f:	31 db                	xor    ebx,ebx
c0013081:	6a 18                	push   0x18
c0013083:	31 ff                	xor    edi,edi
c0013085:	6a 3f                	push   0x3f
c0013087:	8d 44 24 24          	lea    eax,[esp+0x24]
c001308b:	50                   	push   eax
c001308c:	e8 5f d4 fe ff       	call   c00004f0 <memset>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0013098:	8d 74 24 10          	lea    esi,[esp+0x10]
c001309c:	84 c0                	test   al,al
c001309e:	0f 84 af 00 00 00    	je     c0013153 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00130a4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00130a8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00130ab:	83 ec 0c             	sub    esp,0xc
c00130ae:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00130b3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00130b7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00130bb:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00130c0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00130c4:	56                   	push   esi
c00130c5:	e8 b6 d4 fe ff       	call   c0000580 <strlen>
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	85 c0                	test   eax,eax
c00130cf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00130d3:	74 0b                	je     c00130e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00130d5:	50                   	push   eax
c00130d6:	6a 01                	push   0x1
c00130d8:	56                   	push   esi
c00130d9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00130dd:	50                   	push   eax
c00130de:	eb 0a                	jmp    c00130ea <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00130e0:	50                   	push   eax
c00130e1:	6a 00                	push   0x0
c00130e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00130e7:	50                   	push   eax
c00130e8:	6a 00                	push   0x0
c00130ea:	e8 44 fd ff ff       	call   c0012e33 <CmGetMatch(char*, char*, bool, bool*)>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	83 f8 ff             	cmp    eax,0xffffffff
c00130f5:	75 1a                	jne    c0013111 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00130f7:	83 ec 0c             	sub    esp,0xc
c00130fa:	68 39 21 02 c0       	push   0xc0022139
c00130ff:	e8 bd e1 ff ff       	call   c00112c1 <KePanic(char const*)>
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	b8 02 00 00 00       	mov    eax,0x2
c001310c:	e9 bb 00 00 00       	jmp    c00131cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013111:	83 ff 18             	cmp    edi,0x18
c0013114:	75 1a                	jne    c0013130 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013116:	83 ec 0c             	sub    esp,0xc
c0013119:	68 4e 21 02 c0       	push   0xc002214e
c001311e:	e8 9e e1 ff ff       	call   c00112c1 <KePanic(char const*)>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	b8 01 00 00 00       	mov    eax,0x1
c001312b:	e9 9c 00 00 00       	jmp    c00131cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013130:	47                   	inc    edi
c0013131:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013136:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001313a:	0f 45 dd             	cmovne ebx,ebp
c001313d:	83 ec 0c             	sub    esp,0xc
c0013140:	56                   	push   esi
c0013141:	e8 3a d4 fe ff       	call   c0000580 <strlen>
c0013146:	83 c4 10             	add    esp,0x10
c0013149:	85 c0                	test   eax,eax
c001314b:	74 06                	je     c0013153 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001314d:	43                   	inc    ebx
c001314e:	e9 41 ff ff ff       	jmp    c0013094 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013153:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001315b:	31 db                	xor    ebx,ebx
c001315d:	31 ff                	xor    edi,edi
c001315f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013167:	50                   	push   eax
c0013168:	6a 12                	push   0x12
c001316a:	68 ee 00 00 00       	push   0xee
c001316f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013176:	e8 75 d3 fe ff       	call   c00004f0 <memset>
c001317b:	83 c4 10             	add    esp,0x10
c001317e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013182:	83 fb 17             	cmp    ebx,0x17
c0013185:	7e 26                	jle    c00131ad <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0013187:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001318b:	50                   	push   eax
c001318c:	6a 08                	push   0x8
c001318e:	55                   	push   ebp
c001318f:	56                   	push   esi
c0013190:	e8 2f fd ff ff       	call   c0012ec4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013195:	83 c4 10             	add    esp,0x10
c0013198:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001319d:	74 26                	je     c00131c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001319f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00131a6:	4b                   	dec    ebx
c00131a7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00131aa:	47                   	inc    edi
c00131ab:	eb 1c                	jmp    c00131c9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00131ad:	6a 06                	push   0x6
c00131af:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00131b4:	50                   	push   eax
c00131b5:	55                   	push   ebp
c00131b6:	56                   	push   esi
c00131b7:	e8 d8 fc ff ff       	call   c0012e94 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	84 c0                	test   al,al
c00131c1:	75 06                	jne    c00131c9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00131c3:	eb c2                	jmp    c0013187 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00131c5:	31 c0                	xor    eax,eax
c00131c7:	eb 03                	jmp    c00131cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00131c9:	43                   	inc    ebx
c00131ca:	eb b2                	jmp    c001317e <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00131cc:	83 c4 6c             	add    esp,0x6c
c00131cf:	5b                   	pop    ebx
c00131d0:	5e                   	pop    esi
c00131d1:	5f                   	pop    edi
c00131d2:	5d                   	pop    ebp
c00131d3:	c3                   	ret    

c00131d4 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00131d4:	53                   	push   ebx
c00131d5:	83 ec 3c             	sub    esp,0x3c
c00131d8:	6a 2b                	push   0x2b
c00131da:	6a 00                	push   0x0
c00131dc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00131e0:	53                   	push   ebx
c00131e1:	e8 0a d3 fe ff       	call   c00004f0 <memset>
c00131e6:	58                   	pop    eax
c00131e7:	5a                   	pop    edx
c00131e8:	8d 44 24 11          	lea    eax,[esp+0x11]
c00131ec:	50                   	push   eax
c00131ed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00131f1:	e8 41 fe ff ff       	call   c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131f6:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00131fb:	83 c4 0c             	add    esp,0xc
c00131fe:	6a 15                	push   0x15
c0013200:	6a 00                	push   0x0
c0013202:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013206:	50                   	push   eax
c0013207:	e8 e4 d2 fe ff       	call   c00004f0 <memset>
c001320c:	53                   	push   ebx
c001320d:	6a 00                	push   0x0
c001320f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013213:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013217:	e8 eb f9 ff ff       	call   c0012c07 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001321c:	83 c4 58             	add    esp,0x58
c001321f:	5b                   	pop    ebx
c0013220:	c3                   	ret    

c0013221 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013221:	56                   	push   esi
c0013222:	53                   	push   ebx
c0013223:	83 ec 48             	sub    esp,0x48
c0013226:	6a 12                	push   0x12
c0013228:	68 ff 00 00 00       	push   0xff
c001322d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013231:	56                   	push   esi
c0013232:	e8 b9 d2 fe ff       	call   c00004f0 <memset>
c0013237:	5a                   	pop    edx
c0013238:	59                   	pop    ecx
c0013239:	56                   	push   esi
c001323a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001323e:	e8 f4 fd ff ff       	call   c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013243:	83 c4 10             	add    esp,0x10
c0013246:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001324a:	85 db                	test   ebx,ebx
c001324c:	74 42                	je     c0013290 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001324e:	50                   	push   eax
c001324f:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013253:	50                   	push   eax
c0013254:	53                   	push   ebx
c0013255:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013259:	e8 ff f6 ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001325e:	83 c4 0c             	add    esp,0xc
c0013261:	6a 12                	push   0x12
c0013263:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013267:	50                   	push   eax
c0013268:	56                   	push   esi
c0013269:	e8 12 d1 fe ff       	call   c0000380 <memcmp>
c001326e:	83 c4 10             	add    esp,0x10
c0013271:	85 c0                	test   eax,eax
c0013273:	74 1e                	je     c0013293 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013275:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001327a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001327f:	c1 e3 08             	shl    ebx,0x8
c0013282:	09 d8                	or     eax,ebx
c0013284:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013289:	c1 e3 10             	shl    ebx,0x10
c001328c:	09 c3                	or     ebx,eax
c001328e:	eb ba                	jmp    c001324a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013290:	83 cb ff             	or     ebx,0xffffffff
c0013293:	83 c4 44             	add    esp,0x44
c0013296:	89 d8                	mov    eax,ebx
c0013298:	5b                   	pop    ebx
c0013299:	5e                   	pop    esi
c001329a:	c3                   	ret    

c001329b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001329b:	57                   	push   edi
c001329c:	56                   	push   esi
c001329d:	53                   	push   ebx
c001329e:	83 ec 34             	sub    esp,0x34
c00132a1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00132a5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00132a9:	6a 2b                	push   0x2b
c00132ab:	6a 00                	push   0x0
c00132ad:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00132b1:	53                   	push   ebx
c00132b2:	e8 39 d2 fe ff       	call   c00004f0 <memset>
c00132b7:	58                   	pop    eax
c00132b8:	5a                   	pop    edx
c00132b9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00132bd:	50                   	push   eax
c00132be:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00132c2:	e8 70 fd ff ff       	call   c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132c7:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00132cb:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00132cf:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00132d3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00132d7:	53                   	push   ebx
c00132d8:	6a 00                	push   0x0
c00132da:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132e2:	e8 20 f9 ff ff       	call   c0012c07 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132e7:	83 c4 50             	add    esp,0x50
c00132ea:	5b                   	pop    ebx
c00132eb:	5e                   	pop    esi
c00132ec:	5f                   	pop    edi
c00132ed:	c3                   	ret    

c00132ee <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00132ee:	55                   	push   ebp
c00132ef:	57                   	push   edi
c00132f0:	56                   	push   esi
c00132f1:	53                   	push   ebx
c00132f2:	83 ec 40             	sub    esp,0x40
c00132f5:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00132f9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00132fd:	6a 2b                	push   0x2b
c00132ff:	6a 00                	push   0x0
c0013301:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013305:	56                   	push   esi
c0013306:	e8 e5 d1 fe ff       	call   c00004f0 <memset>
c001330b:	5f                   	pop    edi
c001330c:	89 ef                	mov    edi,ebp
c001330e:	58                   	pop    eax
c001330f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013313:	50                   	push   eax
c0013314:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013318:	e8 1a fd ff ff       	call   c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001331d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013322:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013327:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001332c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013331:	83 c4 10             	add    esp,0x10
c0013334:	85 ed                	test   ebp,ebp
c0013336:	74 14                	je     c001334c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013338:	51                   	push   ecx
c0013339:	51                   	push   ecx
c001333a:	57                   	push   edi
c001333b:	53                   	push   ebx
c001333c:	e8 0e f7 ff ff       	call   c0012a4f <CmGetNext(Reghive_Tag*, int)>
c0013341:	83 c4 10             	add    esp,0x10
c0013344:	85 c0                	test   eax,eax
c0013346:	74 04                	je     c001334c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013348:	89 c7                	mov    edi,eax
c001334a:	eb e8                	jmp    c0013334 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001334c:	56                   	push   esi
c001334d:	6a 00                	push   0x0
c001334f:	57                   	push   edi
c0013350:	53                   	push   ebx
c0013351:	e8 b1 f8 ff ff       	call   c0012c07 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013356:	83 c4 0c             	add    esp,0xc
c0013359:	56                   	push   esi
c001335a:	50                   	push   eax
c001335b:	89 c7                	mov    edi,eax
c001335d:	53                   	push   ebx
c001335e:	e8 fa f5 ff ff       	call   c001295d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013363:	58                   	pop    eax
c0013364:	5a                   	pop    edx
c0013365:	6a 6c                	push   0x6c
c0013367:	6a 00                	push   0x0
c0013369:	6a 00                	push   0x0
c001336b:	68 5f 21 02 c0       	push   0xc002215f
c0013370:	57                   	push   edi
c0013371:	53                   	push   ebx
c0013372:	e8 24 ff ff ff       	call   c001329b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013377:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001337b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001337f:	c1 e8 10             	shr    eax,0x10
c0013382:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013386:	83 c4 1c             	add    esp,0x1c
c0013389:	56                   	push   esi
c001338a:	57                   	push   edi
c001338b:	53                   	push   ebx
c001338c:	e8 f0 f6 ff ff       	call   c0012a81 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013391:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013396:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001339b:	c1 e0 08             	shl    eax,0x8
c001339e:	09 c2                	or     edx,eax
c00133a0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00133a5:	83 c4 4c             	add    esp,0x4c
c00133a8:	5b                   	pop    ebx
c00133a9:	5e                   	pop    esi
c00133aa:	c1 e0 10             	shl    eax,0x10
c00133ad:	09 d0                	or     eax,edx
c00133af:	5f                   	pop    edi
c00133b0:	5d                   	pop    ebp
c00133b1:	c3                   	ret    

c00133b2 <zStrtok(char*, char const*)>:
c00133b2:	55                   	push   ebp
c00133b3:	57                   	push   edi
c00133b4:	56                   	push   esi
c00133b5:	53                   	push   ebx
c00133b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133be:	85 db                	test   ebx,ebx
c00133c0:	74 2f                	je     c00133f1 <zStrtok(char*, char const*)+0x3f>
c00133c2:	85 c0                	test   eax,eax
c00133c4:	75 09                	jne    c00133cf <zStrtok(char*, char const*)+0x1d>
c00133c6:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c00133cb:	85 c0                	test   eax,eax
c00133cd:	74 50                	je     c001341f <zStrtok(char*, char const*)+0x6d>
c00133cf:	31 c9                	xor    ecx,ecx
c00133d1:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00133d5:	74 03                	je     c00133da <zStrtok(char*, char const*)+0x28>
c00133d7:	41                   	inc    ecx
c00133d8:	eb f7                	jmp    c00133d1 <zStrtok(char*, char const*)+0x1f>
c00133da:	31 d2                	xor    edx,edx
c00133dc:	39 ca                	cmp    edx,ecx
c00133de:	74 15                	je     c00133f5 <zStrtok(char*, char const*)+0x43>
c00133e0:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00133e4:	8d 3c 10             	lea    edi,[eax+edx*1]
c00133e7:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00133ea:	39 ee                	cmp    esi,ebp
c00133ec:	74 13                	je     c0013401 <zStrtok(char*, char const*)+0x4f>
c00133ee:	42                   	inc    edx
c00133ef:	eb eb                	jmp    c00133dc <zStrtok(char*, char const*)+0x2a>
c00133f1:	31 c0                	xor    eax,eax
c00133f3:	eb 2a                	jmp    c001341f <zStrtok(char*, char const*)+0x6d>
c00133f5:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00133ff:	eb 1e                	jmp    c001341f <zStrtok(char*, char const*)+0x6d>
c0013401:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013404:	39 ce                	cmp    esi,ecx
c0013406:	75 0a                	jne    c0013412 <zStrtok(char*, char const*)+0x60>
c0013408:	40                   	inc    eax
c0013409:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c001340e:	89 d8                	mov    eax,ebx
c0013410:	eb 0d                	jmp    c001341f <zStrtok(char*, char const*)+0x6d>
c0013412:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013415:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013419:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c001341f:	5b                   	pop    ebx
c0013420:	5e                   	pop    esi
c0013421:	5f                   	pop    edi
c0013422:	5d                   	pop    ebp
c0013423:	c3                   	ret    

c0013424 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013424:	57                   	push   edi
c0013425:	56                   	push   esi
c0013426:	53                   	push   ebx
c0013427:	81 ec 08 01 00 00    	sub    esp,0x108
c001342d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013434:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001343b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001343f:	53                   	push   ebx
c0013440:	e8 0b d2 fe ff       	call   c0000650 <strcpy>
c0013445:	59                   	pop    ecx
c0013446:	5e                   	pop    esi
c0013447:	68 c3 24 02 c0       	push   0xc00224c3
c001344c:	53                   	push   ebx
c001344d:	bb 01 00 00 00       	mov    ebx,0x1
c0013452:	e8 5b ff ff ff       	call   c00133b2 <zStrtok(char*, char const*)>
c0013457:	83 c4 10             	add    esp,0x10
c001345a:	85 c0                	test   eax,eax
c001345c:	74 3b                	je     c0013499 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001345e:	52                   	push   edx
c001345f:	50                   	push   eax
c0013460:	6a 01                	push   0x1
c0013462:	57                   	push   edi
c0013463:	e8 b9 fd ff ff       	call   c0013221 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013468:	59                   	pop    ecx
c0013469:	5e                   	pop    esi
c001346a:	89 c3                	mov    ebx,eax
c001346c:	68 c3 24 02 c0       	push   0xc00224c3
c0013471:	6a 00                	push   0x0
c0013473:	e8 3a ff ff ff       	call   c00133b2 <zStrtok(char*, char const*)>
c0013478:	83 c4 10             	add    esp,0x10
c001347b:	85 c0                	test   eax,eax
c001347d:	89 c6                	mov    esi,eax
c001347f:	74 18                	je     c0013499 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013481:	52                   	push   edx
c0013482:	52                   	push   edx
c0013483:	53                   	push   ebx
c0013484:	57                   	push   edi
c0013485:	e8 86 f5 ff ff       	call   c0012a10 <CmEnterDirectory(Reghive_Tag*, int)>
c001348a:	83 c4 10             	add    esp,0x10
c001348d:	83 f8 ff             	cmp    eax,0xffffffff
c0013490:	89 c3                	mov    ebx,eax
c0013492:	74 05                	je     c0013499 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013494:	50                   	push   eax
c0013495:	56                   	push   esi
c0013496:	53                   	push   ebx
c0013497:	eb c9                	jmp    c0013462 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013499:	81 c4 00 01 00 00    	add    esp,0x100
c001349f:	89 d8                	mov    eax,ebx
c00134a1:	5b                   	pop    ebx
c00134a2:	5e                   	pop    esi
c00134a3:	5f                   	pop    edi
c00134a4:	c3                   	ret    

c00134a5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00134a5:	55                   	push   ebp
c00134a6:	57                   	push   edi
c00134a7:	56                   	push   esi
c00134a8:	53                   	push   ebx
c00134a9:	83 ec 5c             	sub    esp,0x5c
c00134ac:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00134b0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00134b4:	85 db                	test   ebx,ebx
c00134b6:	0f 8e 84 00 00 00    	jle    c0013540 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00134bc:	57                   	push   edi
c00134bd:	31 ed                	xor    ebp,ebp
c00134bf:	6a 32                	push   0x32
c00134c1:	6a 00                	push   0x0
c00134c3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00134c7:	57                   	push   edi
c00134c8:	e8 23 d0 fe ff       	call   c00004f0 <memset>
c00134cd:	83 c4 0c             	add    esp,0xc
c00134d0:	57                   	push   edi
c00134d1:	53                   	push   ebx
c00134d2:	56                   	push   esi
c00134d3:	e8 31 fb ff ff       	call   c0013009 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00134e3:	7d 13                	jge    c00134f8 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00134e5:	83 ec 0c             	sub    esp,0xc
c00134e8:	45                   	inc    ebp
c00134e9:	68 67 28 02 c0       	push   0xc0022867
c00134ee:	e8 17 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00134f3:	83 c4 10             	add    esp,0x10
c00134f6:	eb e7                	jmp    c00134df <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00134f8:	51                   	push   ecx
c00134f9:	57                   	push   edi
c00134fa:	53                   	push   ebx
c00134fb:	68 65 21 02 c0       	push   0xc0022165
c0013500:	e8 05 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013505:	83 c4 10             	add    esp,0x10
c0013508:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001350d:	75 1e                	jne    c001352d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001350f:	52                   	push   edx
c0013510:	52                   	push   edx
c0013511:	53                   	push   ebx
c0013512:	56                   	push   esi
c0013513:	e8 f8 f4 ff ff       	call   c0012a10 <CmEnterDirectory(Reghive_Tag*, int)>
c0013518:	83 c4 0c             	add    esp,0xc
c001351b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001351f:	8d 51 04             	lea    edx,[ecx+0x4]
c0013522:	52                   	push   edx
c0013523:	50                   	push   eax
c0013524:	56                   	push   esi
c0013525:	e8 7b ff ff ff       	call   c00134a5 <CmDisplayTree(Reghive_Tag*, int, int)>
c001352a:	83 c4 10             	add    esp,0x10
c001352d:	50                   	push   eax
c001352e:	50                   	push   eax
c001352f:	53                   	push   ebx
c0013530:	56                   	push   esi
c0013531:	e8 19 f5 ff ff       	call   c0012a4f <CmGetNext(Reghive_Tag*, int)>
c0013536:	83 c4 10             	add    esp,0x10
c0013539:	89 c3                	mov    ebx,eax
c001353b:	e9 74 ff ff ff       	jmp    c00134b4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013540:	83 c4 5c             	add    esp,0x5c
c0013543:	5b                   	pop    ebx
c0013544:	5e                   	pop    esi
c0013545:	5f                   	pop    edi
c0013546:	5d                   	pop    ebp
c0013547:	c3                   	ret    

c0013548 <CmSplitFinalSlashInPlace(char*)>:
c0013548:	53                   	push   ebx
c0013549:	83 ec 14             	sub    esp,0x14
c001354c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013550:	53                   	push   ebx
c0013551:	e8 2a d0 fe ff       	call   c0000580 <strlen>
c0013556:	83 c4 10             	add    esp,0x10
c0013559:	48                   	dec    eax
c001355a:	85 c0                	test   eax,eax
c001355c:	74 15                	je     c0013573 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001355e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013562:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013565:	75 09                	jne    c0013570 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013567:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001356a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001356e:	eb 05                	jmp    c0013575 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013570:	48                   	dec    eax
c0013571:	eb e7                	jmp    c001355a <CmSplitFinalSlashInPlace(char*)+0x12>
c0013573:	31 c0                	xor    eax,eax
c0013575:	83 c4 08             	add    esp,0x8
c0013578:	5b                   	pop    ebx
c0013579:	c3                   	ret    

c001357a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001357a:	55                   	push   ebp
c001357b:	57                   	push   edi
c001357c:	56                   	push   esi
c001357d:	53                   	push   ebx
c001357e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013584:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001358b:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c001358e:	8d 43 01             	lea    eax,[ebx+0x1]
c0013591:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013595:	89 f0                	mov    eax,esi
c0013597:	3c 40                	cmp    al,0x40
c0013599:	75 1b                	jne    c00135b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c001359b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001359e:	85 c0                	test   eax,eax
c00135a0:	74 08                	je     c00135aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00135a2:	83 f8 3a             	cmp    eax,0x3a
c00135a5:	74 03                	je     c00135aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00135a7:	43                   	inc    ebx
c00135a8:	eb f1                	jmp    c001359b <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00135aa:	85 c0                	test   eax,eax
c00135ac:	0f 84 45 01 00 00    	je     c00136f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00135b2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00135b5:	43                   	inc    ebx
c00135b6:	50                   	push   eax
c00135b7:	6a 40                	push   0x40
c00135b9:	6a 00                	push   0x0
c00135bb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00135bf:	50                   	push   eax
c00135c0:	e8 2b cf fe ff       	call   c00004f0 <memset>
c00135c5:	89 f1                	mov    ecx,esi
c00135c7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00135ce:	31 c0                	xor    eax,eax
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	0f be f1             	movsx  esi,cl
c00135d6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00135d9:	85 d2                	test   edx,edx
c00135db:	89 d1                	mov    ecx,edx
c00135dd:	0f 84 14 01 00 00    	je     c00136f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00135e3:	3d c7 00 00 00       	cmp    eax,0xc7
c00135e8:	0f 8f 09 01 00 00    	jg     c00136f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00135ee:	83 fa 0a             	cmp    edx,0xa
c00135f1:	0f 85 f1 00 00 00    	jne    c00136e8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00135f7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00135fc:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013601:	89 c8                	mov    eax,ecx
c0013603:	a8 df                	test   al,0xdf
c0013605:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001360a:	83 f9 23             	cmp    ecx,0x23
c001360d:	0f 94 c2             	sete   dl
c0013610:	89 d5                	mov    ebp,edx
c0013612:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013616:	09 ea                	or     edx,ebp
c0013618:	80 e2 01             	and    dl,0x1
c001361b:	75 47                	jne    c0013664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001361d:	83 e8 09             	sub    eax,0x9
c0013620:	3c 01                	cmp    al,0x1
c0013622:	76 40                	jbe    c0013664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013624:	83 f9 5b             	cmp    ecx,0x5b
c0013627:	75 42                	jne    c001366b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013629:	83 fe 40             	cmp    esi,0x40
c001362c:	75 36                	jne    c0013664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001362e:	83 ec 0c             	sub    esp,0xc
c0013631:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013635:	55                   	push   ebp
c0013636:	e8 45 cf fe ff       	call   c0000580 <strlen>
c001363b:	83 c4 10             	add    esp,0x10
c001363e:	83 f8 3f             	cmp    eax,0x3f
c0013641:	0f 87 b0 00 00 00    	ja     c00136f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013647:	50                   	push   eax
c0013648:	50                   	push   eax
c0013649:	55                   	push   ebp
c001364a:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001364e:	55                   	push   ebp
c001364f:	e8 fc cf fe ff       	call   c0000650 <strcpy>
c0013654:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013657:	e8 24 cf fe ff       	call   c0000580 <strlen>
c001365c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013661:	83 c4 10             	add    esp,0x10
c0013664:	31 d2                	xor    edx,edx
c0013666:	e9 84 00 00 00       	jmp    c00136ef <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c001366b:	83 fe 40             	cmp    esi,0x40
c001366e:	74 06                	je     c0013676 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013670:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013674:	eb 19                	jmp    c001368f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013676:	51                   	push   ecx
c0013677:	51                   	push   ecx
c0013678:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001367c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013680:	50                   	push   eax
c0013681:	e8 fa d0 fe ff       	call   c0000780 <strcmp>
c0013686:	83 c4 10             	add    esp,0x10
c0013689:	85 c0                	test   eax,eax
c001368b:	75 d7                	jne    c0013664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001368d:	eb e1                	jmp    c0013670 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c001368f:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013692:	85 c9                	test   ecx,ecx
c0013694:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013699:	83 f9 3d             	cmp    ecx,0x3d
c001369c:	0f 94 c0             	sete   al
c001369f:	89 c5                	mov    ebp,eax
c00136a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136a5:	09 e8                	or     eax,ebp
c00136a7:	a8 01                	test   al,0x1
c00136a9:	89 c5                	mov    ebp,eax
c00136ab:	75 03                	jne    c00136b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00136ad:	42                   	inc    edx
c00136ae:	eb df                	jmp    c001368f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00136b0:	85 c9                	test   ecx,ecx
c00136b2:	74 43                	je     c00136f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00136b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00136b8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00136bb:	52                   	push   edx
c00136bc:	52                   	push   edx
c00136bd:	8d 44 24 60          	lea    eax,[esp+0x60]
c00136c1:	50                   	push   eax
c00136c2:	53                   	push   ebx
c00136c3:	e8 b8 d0 fe ff       	call   c0000780 <strcmp>
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136cf:	85 c0                	test   eax,eax
c00136d1:	75 91                	jne    c0013664 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00136d3:	50                   	push   eax
c00136d4:	42                   	inc    edx
c00136d5:	50                   	push   eax
c00136d6:	52                   	push   edx
c00136d7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00136de:	e8 6d cf fe ff       	call   c0000650 <strcpy>
c00136e3:	83 c4 10             	add    esp,0x10
c00136e6:	eb 11                	jmp    c00136f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c00136e8:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00136ec:	8d 50 01             	lea    edx,[eax+0x1]
c00136ef:	47                   	inc    edi
c00136f0:	89 d0                	mov    eax,edx
c00136f2:	e9 df fe ff ff       	jmp    c00135d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c00136f7:	31 ed                	xor    ebp,ebp
c00136f9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00136ff:	89 e8                	mov    eax,ebp
c0013701:	5b                   	pop    ebx
c0013702:	5e                   	pop    esi
c0013703:	5f                   	pop    edi
c0013704:	5d                   	pop    ebp
c0013705:	c3                   	ret    

c0013706 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013706:	57                   	push   edi
c0013707:	56                   	push   esi
c0013708:	53                   	push   ebx
c0013709:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001370f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013716:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001371d:	53                   	push   ebx
c001371e:	e8 5d ce fe ff       	call   c0000580 <strlen>
c0013723:	89 34 24             	mov    DWORD PTR [esp],esi
c0013726:	89 c7                	mov    edi,eax
c0013728:	e8 53 ce fe ff       	call   c0000580 <strlen>
c001372d:	83 c4 10             	add    esp,0x10
c0013730:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013734:	3d ff 00 00 00       	cmp    eax,0xff
c0013739:	0f 87 d3 00 00 00    	ja     c0013812 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001373f:	57                   	push   edi
c0013740:	57                   	push   edi
c0013741:	56                   	push   esi
c0013742:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013746:	56                   	push   esi
c0013747:	e8 04 cf fe ff       	call   c0000650 <strcpy>
c001374c:	58                   	pop    eax
c001374d:	5a                   	pop    edx
c001374e:	68 c3 24 02 c0       	push   0xc00224c3
c0013753:	56                   	push   esi
c0013754:	e8 17 d1 fe ff       	call   c0000870 <strcat>
c0013759:	59                   	pop    ecx
c001375a:	5f                   	pop    edi
c001375b:	53                   	push   ebx
c001375c:	56                   	push   esi
c001375d:	e8 0e d1 fe ff       	call   c0000870 <strcat>
c0013762:	58                   	pop    eax
c0013763:	5a                   	pop    edx
c0013764:	68 6f 21 02 c0       	push   0xc002216f
c0013769:	56                   	push   esi
c001376a:	e8 01 d1 fe ff       	call   c0000870 <strcat>
c001376f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013776:	e8 58 43 ff ff       	call   c0007ad3 <malloc>
c001377b:	83 c4 0c             	add    esp,0xc
c001377e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0013784:	56                   	push   esi
c0013785:	50                   	push   eax
c0013786:	89 c3                	mov    ebx,eax
c0013788:	e8 19 81 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c001378d:	83 c4 10             	add    esp,0x10
c0013790:	85 db                	test   ebx,ebx
c0013792:	74 7e                	je     c0013812 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013794:	51                   	push   ecx
c0013795:	51                   	push   ecx
c0013796:	6a 01                	push   0x1
c0013798:	53                   	push   ebx
c0013799:	e8 26 81 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c001379e:	83 c4 10             	add    esp,0x10
c00137a1:	85 c0                	test   eax,eax
c00137a3:	74 08                	je     c00137ad <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00137a5:	83 ec 0c             	sub    esp,0xc
c00137a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137aa:	53                   	push   ebx
c00137ab:	eb 5f                	jmp    c001380c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00137ad:	52                   	push   edx
c00137ae:	8d 44 24 17          	lea    eax,[esp+0x17]
c00137b2:	50                   	push   eax
c00137b3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00137b7:	50                   	push   eax
c00137b8:	53                   	push   ebx
c00137b9:	e8 08 84 ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c00137be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137c2:	83 c4 10             	add    esp,0x10
c00137c5:	89 c1                	mov    ecx,eax
c00137c7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00137cb:	74 31                	je     c00137fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00137cd:	83 ec 0c             	sub    esp,0xc
c00137d0:	50                   	push   eax
c00137d1:	e8 fd 42 ff ff       	call   c0007ad3 <malloc>
c00137d6:	89 c6                	mov    esi,eax
c00137d8:	58                   	pop    eax
c00137d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137db:	8d 54 24 20          	lea    edx,[esp+0x20]
c00137df:	52                   	push   edx
c00137e0:	56                   	push   esi
c00137e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137e9:	53                   	push   ebx
c00137ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137ed:	83 c4 20             	add    esp,0x20
c00137f0:	85 c0                	test   eax,eax
c00137f2:	75 0a                	jne    c00137fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00137f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137f8:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00137fc:	74 18                	je     c0013816 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00137fe:	83 ec 0c             	sub    esp,0xc
c0013801:	53                   	push   ebx
c0013802:	e8 1b 81 ff ff       	call   c000b922 <File::close()>
c0013807:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013809:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001380c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001380f:	83 c4 10             	add    esp,0x10
c0013812:	31 c0                	xor    eax,eax
c0013814:	eb 3b                	jmp    c0013851 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013816:	83 ec 0c             	sub    esp,0xc
c0013819:	53                   	push   ebx
c001381a:	e8 03 81 ff ff       	call   c000b922 <File::close()>
c001381f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013821:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013824:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013827:	83 c4 0c             	add    esp,0xc
c001382a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013831:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013838:	56                   	push   esi
c0013839:	e8 3c fd ff ff       	call   c001357a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001383e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013841:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013845:	e8 99 42 ff ff       	call   c0007ae3 <free>
c001384a:	83 c4 10             	add    esp,0x10
c001384d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013851:	81 c4 20 01 00 00    	add    esp,0x120
c0013857:	5b                   	pop    ebx
c0013858:	5e                   	pop    esi
c0013859:	5f                   	pop    edi
c001385a:	c3                   	ret    

c001385b <Reg::getLine(char*, char*, char*)>:
c001385b:	57                   	push   edi
c001385c:	56                   	push   esi
c001385d:	53                   	push   ebx
c001385e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013862:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013866:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001386a:	57                   	push   edi
c001386b:	56                   	push   esi
c001386c:	53                   	push   ebx
c001386d:	68 74 21 02 c0       	push   0xc0022174
c0013872:	e8 8f fe ff ff       	call   c0013706 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013877:	83 c4 10             	add    esp,0x10
c001387a:	84 c0                	test   al,al
c001387c:	75 10                	jne    c001388e <Reg::getLine(char*, char*, char*)+0x33>
c001387e:	57                   	push   edi
c001387f:	56                   	push   esi
c0013880:	53                   	push   ebx
c0013881:	68 99 21 02 c0       	push   0xc0022199
c0013886:	e8 7b fe ff ff       	call   c0013706 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001388b:	83 c4 10             	add    esp,0x10
c001388e:	5b                   	pop    ebx
c001388f:	5e                   	pop    esi
c0013890:	5f                   	pop    edi
c0013891:	c3                   	ret    

c0013892 <Reg::readInt(char*, char*, int*)>:
c0013892:	55                   	push   ebp
c0013893:	57                   	push   edi
c0013894:	56                   	push   esi
c0013895:	53                   	push   ebx
c0013896:	81 ec f0 00 00 00    	sub    esp,0xf0
c001389c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00138a0:	55                   	push   ebp
c00138a1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00138a8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00138af:	e8 a7 ff ff ff       	call   c001385b <Reg::getLine(char*, char*, char*)>
c00138b4:	83 c4 10             	add    esp,0x10
c00138b7:	84 c0                	test   al,al
c00138b9:	0f 84 b6 00 00 00    	je     c0013975 <Reg::readInt(char*, char*, int*)+0xe3>
c00138bf:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00138c4:	83 fa 2b             	cmp    edx,0x2b
c00138c7:	74 0c                	je     c00138d5 <Reg::readInt(char*, char*, int*)+0x43>
c00138c9:	83 fa 2d             	cmp    edx,0x2d
c00138cc:	75 0e                	jne    c00138dc <Reg::readInt(char*, char*, int*)+0x4a>
c00138ce:	ba 01 00 00 00       	mov    edx,0x1
c00138d3:	eb 0b                	jmp    c00138e0 <Reg::readInt(char*, char*, int*)+0x4e>
c00138d5:	ba 01 00 00 00       	mov    edx,0x1
c00138da:	eb 02                	jmp    c00138de <Reg::readInt(char*, char*, int*)+0x4c>
c00138dc:	31 d2                	xor    edx,edx
c00138de:	31 c0                	xor    eax,eax
c00138e0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00138e5:	be 0a 00 00 00       	mov    esi,0xa
c00138ea:	75 21                	jne    c001390d <Reg::readInt(char*, char*, int*)+0x7b>
c00138ec:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00138f1:	83 f9 78             	cmp    ecx,0x78
c00138f4:	75 0a                	jne    c0013900 <Reg::readInt(char*, char*, int*)+0x6e>
c00138f6:	83 c2 02             	add    edx,0x2
c00138f9:	be 10 00 00 00       	mov    esi,0x10
c00138fe:	eb 0d                	jmp    c001390d <Reg::readInt(char*, char*, int*)+0x7b>
c0013900:	83 f9 62             	cmp    ecx,0x62
c0013903:	75 08                	jne    c001390d <Reg::readInt(char*, char*, int*)+0x7b>
c0013905:	83 c2 02             	add    edx,0x2
c0013908:	be 02 00 00 00       	mov    esi,0x2
c001390d:	01 d5                	add    ebp,edx
c001390f:	31 d2                	xor    edx,edx
c0013911:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013915:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013919:	85 c9                	test   ecx,ecx
c001391b:	0f 94 c3             	sete   bl
c001391e:	83 f9 0d             	cmp    ecx,0xd
c0013921:	89 df                	mov    edi,ebx
c0013923:	0f 94 c3             	sete   bl
c0013926:	09 df                	or     edi,ebx
c0013928:	89 fb                	mov    ebx,edi
c001392a:	83 e7 01             	and    edi,0x1
c001392d:	75 35                	jne    c0013964 <Reg::readInt(char*, char*, int*)+0xd2>
c001392f:	0f af d6             	imul   edx,esi
c0013932:	83 fe 10             	cmp    esi,0x10
c0013935:	75 26                	jne    c001395d <Reg::readInt(char*, char*, int*)+0xcb>
c0013937:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001393b:	83 ef 41             	sub    edi,0x41
c001393e:	89 fb                	mov    ebx,edi
c0013940:	80 fb 05             	cmp    bl,0x5
c0013943:	77 06                	ja     c001394b <Reg::readInt(char*, char*, int*)+0xb9>
c0013945:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013949:	eb 16                	jmp    c0013961 <Reg::readInt(char*, char*, int*)+0xcf>
c001394b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001394f:	83 eb 61             	sub    ebx,0x61
c0013952:	80 fb 05             	cmp    bl,0x5
c0013955:	77 06                	ja     c001395d <Reg::readInt(char*, char*, int*)+0xcb>
c0013957:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c001395b:	eb 04                	jmp    c0013961 <Reg::readInt(char*, char*, int*)+0xcf>
c001395d:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013961:	45                   	inc    ebp
c0013962:	eb ad                	jmp    c0013911 <Reg::readInt(char*, char*, int*)+0x7f>
c0013964:	84 c0                	test   al,al
c0013966:	74 02                	je     c001396a <Reg::readInt(char*, char*, int*)+0xd8>
c0013968:	f7 da                	neg    edx
c001396a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013971:	89 10                	mov    DWORD PTR [eax],edx
c0013973:	88 d8                	mov    al,bl
c0013975:	81 c4 ec 00 00 00    	add    esp,0xec
c001397b:	5b                   	pop    ebx
c001397c:	5e                   	pop    esi
c001397d:	5f                   	pop    edi
c001397e:	5d                   	pop    ebp
c001397f:	c3                   	ret    

c0013980 <Reg::readString(char*, char*, char*, int)>:
c0013980:	57                   	push   edi
c0013981:	56                   	push   esi
c0013982:	53                   	push   ebx
c0013983:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013989:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001398d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013994:	57                   	push   edi
c0013995:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001399c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00139a3:	e8 b3 fe ff ff       	call   c001385b <Reg::getLine(char*, char*, char*)>
c00139a8:	83 c4 10             	add    esp,0x10
c00139ab:	84 c0                	test   al,al
c00139ad:	89 c6                	mov    esi,eax
c00139af:	74 44                	je     c00139f5 <Reg::readString(char*, char*, char*, int)+0x75>
c00139b1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00139b8:	31 c0                	xor    eax,eax
c00139ba:	4a                   	dec    edx
c00139bb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00139be:	84 c9                	test   cl,cl
c00139c0:	74 0f                	je     c00139d1 <Reg::readString(char*, char*, char*, int)+0x51>
c00139c2:	39 c2                	cmp    edx,eax
c00139c4:	7e 0b                	jle    c00139d1 <Reg::readString(char*, char*, char*, int)+0x51>
c00139c6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00139c9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00139ce:	40                   	inc    eax
c00139cf:	eb ea                	jmp    c00139bb <Reg::readString(char*, char*, char*, int)+0x3b>
c00139d1:	83 ec 0c             	sub    esp,0xc
c00139d4:	53                   	push   ebx
c00139d5:	e8 a6 cb fe ff       	call   c0000580 <strlen>
c00139da:	83 c4 10             	add    esp,0x10
c00139dd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00139e2:	75 11                	jne    c00139f5 <Reg::readString(char*, char*, char*, int)+0x75>
c00139e4:	83 ec 0c             	sub    esp,0xc
c00139e7:	53                   	push   ebx
c00139e8:	e8 93 cb fe ff       	call   c0000580 <strlen>
c00139ed:	83 c4 10             	add    esp,0x10
c00139f0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00139f5:	81 c4 d0 00 00 00    	add    esp,0xd0
c00139fb:	89 f0                	mov    eax,esi
c00139fd:	5b                   	pop    ebx
c00139fe:	5e                   	pop    esi
c00139ff:	5f                   	pop    edi
c0013a00:	c3                   	ret    

c0013a01 <Reg::readBool(char*, char*, bool*)>:
c0013a01:	83 ec 20             	sub    esp,0x20
c0013a04:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013a08:	50                   	push   eax
c0013a09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a11:	e8 7c fe ff ff       	call   c0013892 <Reg::readInt(char*, char*, int*)>
c0013a16:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013a1a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013a1f:	0f 95 02             	setne  BYTE PTR [edx]
c0013a22:	83 c4 2c             	add    esp,0x2c
c0013a25:	c3                   	ret    

c0013a26 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013a26:	53                   	push   ebx
c0013a27:	83 ec 1c             	sub    esp,0x1c
c0013a2a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013a2e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013a32:	50                   	push   eax
c0013a33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a3b:	e8 c1 ff ff ff       	call   c0013a01 <Reg::readBool(char*, char*, bool*)>
c0013a40:	83 c4 10             	add    esp,0x10
c0013a43:	84 c0                	test   al,al
c0013a45:	74 04                	je     c0013a4b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013a47:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013a4b:	83 c4 18             	add    esp,0x18
c0013a4e:	88 d8                	mov    al,bl
c0013a50:	5b                   	pop    ebx
c0013a51:	c3                   	ret    

c0013a52 <Reg::readIntWithDefault(char*, char*, int)>:
c0013a52:	53                   	push   ebx
c0013a53:	83 ec 1c             	sub    esp,0x1c
c0013a56:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013a5a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a5e:	50                   	push   eax
c0013a5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a67:	e8 26 fe ff ff       	call   c0013892 <Reg::readInt(char*, char*, int*)>
c0013a6c:	83 c4 10             	add    esp,0x10
c0013a6f:	84 c0                	test   al,al
c0013a71:	74 04                	je     c0013a77 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013a73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a77:	83 c4 18             	add    esp,0x18
c0013a7a:	89 d8                	mov    eax,ebx
c0013a7c:	5b                   	pop    ebx
c0013a7d:	c3                   	ret    

c0013a7e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013a7e:	57                   	push   edi
c0013a7f:	56                   	push   esi
c0013a80:	53                   	push   ebx
c0013a81:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013a85:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013a8d:	56                   	push   esi
c0013a8e:	57                   	push   edi
c0013a8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a97:	e8 e4 fe ff ff       	call   c0013980 <Reg::readString(char*, char*, char*, int)>
c0013a9c:	83 c4 10             	add    esp,0x10
c0013a9f:	84 c0                	test   al,al
c0013aa1:	75 16                	jne    c0013ab9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013aa3:	50                   	push   eax
c0013aa4:	56                   	push   esi
c0013aa5:	6a 00                	push   0x0
c0013aa7:	57                   	push   edi
c0013aa8:	e8 43 ca fe ff       	call   c00004f0 <memset>
c0013aad:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013ab0:	89 de                	mov    esi,ebx
c0013ab2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ab4:	83 c4 10             	add    esp,0x10
c0013ab7:	89 df                	mov    edi,ebx
c0013ab9:	5b                   	pop    ebx
c0013aba:	89 f8                	mov    eax,edi
c0013abc:	5e                   	pop    esi
c0013abd:	5f                   	pop    edi
c0013abe:	c3                   	ret    

c0013abf <SysEject(regs*)>:
c0013abf:	83 ec 0c             	sub    esp,0xc
c0013ac2:	83 ca ff             	or     edx,0xffffffff
c0013ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013acc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ad1:	83 e9 41             	sub    ecx,0x41
c0013ad4:	83 f9 19             	cmp    ecx,0x19
c0013ad7:	77 18                	ja     c0013af1 <SysEject(regs*)+0x32>
c0013ad9:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013ae0:	85 c9                	test   ecx,ecx
c0013ae2:	74 0d                	je     c0013af1 <SysEject(regs*)+0x32>
c0013ae4:	83 ec 0c             	sub    esp,0xc
c0013ae7:	51                   	push   ecx
c0013ae8:	e8 b7 9f ff ff       	call   c000daa4 <LogicalDisk::eject()>
c0013aed:	83 c4 10             	add    esp,0x10
c0013af0:	99                   	cdq    
c0013af1:	83 c4 0c             	add    esp,0xc
c0013af4:	c3                   	ret    

c0013af5 <SysExit(regs*)>:
c0013af5:	83 ec 18             	sub    esp,0x18
c0013af8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013afc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013aff:	e8 3c 2b 00 00       	call   c0016640 <terminateTask(int)>
c0013b04:	83 c8 ff             	or     eax,0xffffffff
c0013b07:	83 c4 1c             	add    esp,0x1c
c0013b0a:	89 c2                	mov    edx,eax
c0013b0c:	c3                   	ret    

c0013b0d <SysGetCwd(regs*)>:
c0013b0d:	83 ec 10             	sub    esp,0x10
c0013b10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b14:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013b17:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b1f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b22:	e8 2f 7a ff ff       	call   c000b556 <Fs::getcwd(Process*, char*, int)>
c0013b27:	83 c4 1c             	add    esp,0x1c
c0013b2a:	99                   	cdq    
c0013b2b:	c3                   	ret    

c0013b2c <SysGetPID(regs*)>:
c0013b2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b34:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b36:	99                   	cdq    
c0013b37:	c3                   	ret    

c0013b38 <SysGetRAMData(regs*)>:
c0013b38:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013b42:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013b48:	99                   	cdq    
c0013b49:	f7 f9                	idiv   ecx
c0013b4b:	c1 e0 18             	shl    eax,0x18
c0013b4e:	09 c8                	or     eax,ecx
c0013b50:	99                   	cdq    
c0013b51:	c3                   	ret    

c0013b52 <SysGetVGAPtr(regs*)>:
c0013b52:	55                   	push   ebp
c0013b53:	57                   	push   edi
c0013b54:	56                   	push   esi
c0013b55:	53                   	push   ebx
c0013b56:	83 ec 18             	sub    esp,0x18
c0013b59:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013b5d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b60:	e8 a7 25 00 00       	call   c001610c <Thr::processFromPID(int)>
c0013b65:	83 c4 10             	add    esp,0x10
c0013b68:	89 c1                	mov    ecx,eax
c0013b6a:	b8 01 00 00 00       	mov    eax,0x1
c0013b6f:	85 c9                	test   ecx,ecx
c0013b71:	74 57                	je     c0013bca <SysGetVGAPtr(regs*)+0x78>
c0013b73:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013b77:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013b7d:	74 0c                	je     c0013b8b <SysGetVGAPtr(regs*)+0x39>
c0013b7f:	83 ec 0c             	sub    esp,0xc
c0013b82:	55                   	push   ebp
c0013b83:	e8 e7 4b ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013b88:	83 c4 10             	add    esp,0x10
c0013b8b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013b8e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013b93:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013b96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b98:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013b9b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b9e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013ba4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ba7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013baa:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013bb0:	50                   	push   eax
c0013bb1:	50                   	push   eax
c0013bb2:	68 b4 21 02 c0       	push   0xc00221b4
c0013bb7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013bba:	05 a8 0f 00 00       	add    eax,0xfa8
c0013bbf:	50                   	push   eax
c0013bc0:	e8 8b ca fe ff       	call   c0000650 <strcpy>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	31 c0                	xor    eax,eax
c0013bca:	83 c4 0c             	add    esp,0xc
c0013bcd:	31 d2                	xor    edx,edx
c0013bcf:	5b                   	pop    ebx
c0013bd0:	5e                   	pop    esi
c0013bd1:	5f                   	pop    edi
c0013bd2:	5d                   	pop    ebp
c0013bd3:	c3                   	ret    

c0013bd4 <SysKill(regs*)>:
c0013bd4:	53                   	push   ebx
c0013bd5:	83 ec 08             	sub    esp,0x8
c0013bd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bdc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013be0:	75 16                	jne    c0013bf8 <SysKill(regs*)+0x24>
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	68 be 21 02 c0       	push   0xc00221be
c0013bea:	e8 d2 d6 ff ff       	call   c00112c1 <KePanic(char const*)>
c0013bef:	83 c4 10             	add    esp,0x10
c0013bf2:	e9 89 00 00 00       	jmp    c0013c80 <SysKill(regs*)+0xac>
c0013bf7:	90                   	nop
c0013bf8:	83 ec 0c             	sub    esp,0xc
c0013bfb:	68 e4 96 02 c0       	push   0xc00296e4
c0013c00:	e8 67 bd 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c05:	8d 76 00             	lea    esi,[esi+0x0]
c0013c08:	83 c4 10             	add    esp,0x10
c0013c0b:	85 c0                	test   eax,eax
c0013c0d:	74 19                	je     c0013c28 <SysKill(regs*)+0x54>
c0013c0f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013c12:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013c15:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013c17:	74 33                	je     c0013c4c <SysKill(regs*)+0x78>
c0013c19:	52                   	push   edx
c0013c1a:	52                   	push   edx
c0013c1b:	50                   	push   eax
c0013c1c:	68 e4 96 02 c0       	push   0xc00296e4
c0013c21:	e8 66 c0 00 00       	call   c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c26:	eb e0                	jmp    c0013c08 <SysKill(regs*)+0x34>
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	68 d8 96 02 c0       	push   0xc00296d8
c0013c30:	e8 37 bd 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c35:	8d 76 00             	lea    esi,[esi+0x0]
c0013c38:	83 c4 10             	add    esp,0x10
c0013c3b:	85 c0                	test   eax,eax
c0013c3d:	74 41                	je     c0013c80 <SysKill(regs*)+0xac>
c0013c3f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013c42:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013c45:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013c47:	75 27                	jne    c0013c70 <SysKill(regs*)+0x9c>
c0013c49:	8d 76 00             	lea    esi,[esi+0x0]
c0013c4c:	51                   	push   ecx
c0013c4d:	51                   	push   ecx
c0013c4e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c59:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c5f:	e8 fb da ff ff       	call   c001175f <KeRaiseSignal(SigHandlerBlock*, int)>
c0013c64:	83 c4 10             	add    esp,0x10
c0013c67:	31 c0                	xor    eax,eax
c0013c69:	31 d2                	xor    edx,edx
c0013c6b:	eb 1b                	jmp    c0013c88 <SysKill(regs*)+0xb4>
c0013c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c70:	52                   	push   edx
c0013c71:	52                   	push   edx
c0013c72:	50                   	push   eax
c0013c73:	68 d8 96 02 c0       	push   0xc00296d8
c0013c78:	e8 0f c0 00 00       	call   c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c7d:	eb b9                	jmp    c0013c38 <SysKill(regs*)+0x64>
c0013c7f:	90                   	nop
c0013c80:	83 c8 ff             	or     eax,0xffffffff
c0013c83:	89 c2                	mov    edx,eax
c0013c85:	8d 76 00             	lea    esi,[esi+0x0]
c0013c88:	83 c4 08             	add    esp,0x8
c0013c8b:	5b                   	pop    ebx
c0013c8c:	c3                   	ret    

c0013c8d <SysLoadDLL(regs*)>:
c0013c8d:	56                   	push   esi
c0013c8e:	31 d2                	xor    edx,edx
c0013c90:	53                   	push   ebx
c0013c91:	b8 01 00 00 00       	mov    eax,0x1
c0013c96:	51                   	push   ecx
c0013c97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c9b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013c9f:	0f 84 8c 00 00 00    	je     c0013d31 <SysLoadDLL(regs*)+0xa4>
c0013ca5:	83 ec 0c             	sub    esp,0xc
c0013ca8:	68 14 01 00 00       	push   0x114
c0013cad:	e8 21 3e ff ff       	call   c0007ad3 <malloc>
c0013cb2:	83 c4 0c             	add    esp,0xc
c0013cb5:	89 c3                	mov    ebx,eax
c0013cb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cbc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013cbf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013cc2:	53                   	push   ebx
c0013cc3:	e8 de 7b ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0013cc8:	83 c4 10             	add    esp,0x10
c0013ccb:	31 d2                	xor    edx,edx
c0013ccd:	85 db                	test   ebx,ebx
c0013ccf:	b8 02 00 00 00       	mov    eax,0x2
c0013cd4:	74 5b                	je     c0013d31 <SysLoadDLL(regs*)+0xa4>
c0013cd6:	83 ec 0c             	sub    esp,0xc
c0013cd9:	53                   	push   ebx
c0013cda:	e8 a9 7e ff ff       	call   c000bb88 <File::exists()>
c0013cdf:	83 c4 10             	add    esp,0x10
c0013ce2:	84 c0                	test   al,al
c0013ce4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ce6:	75 11                	jne    c0013cf9 <SysLoadDLL(regs*)+0x6c>
c0013ce8:	83 ec 0c             	sub    esp,0xc
c0013ceb:	53                   	push   ebx
c0013cec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cef:	83 c4 10             	add    esp,0x10
c0013cf2:	b8 03 00 00 00       	mov    eax,0x3
c0013cf7:	eb 36                	jmp    c0013d2f <SysLoadDLL(regs*)+0xa2>
c0013cf9:	83 ec 0c             	sub    esp,0xc
c0013cfc:	53                   	push   ebx
c0013cfd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d00:	58                   	pop    eax
c0013d01:	5a                   	pop    edx
c0013d02:	6a 00                	push   0x0
c0013d04:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d07:	e8 49 15 00 00       	call   c0015255 <Thr::loadDLL(char const*, bool)>
c0013d0c:	83 c4 10             	add    esp,0x10
c0013d0f:	31 d2                	xor    edx,edx
c0013d11:	89 c1                	mov    ecx,eax
c0013d13:	b8 04 00 00 00       	mov    eax,0x4
c0013d18:	85 c9                	test   ecx,ecx
c0013d1a:	74 15                	je     c0013d31 <SysLoadDLL(regs*)+0xa4>
c0013d1c:	53                   	push   ebx
c0013d1d:	53                   	push   ebx
c0013d1e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013d24:	51                   	push   ecx
c0013d25:	e8 6b 17 00 00       	call   c0015495 <Thr::executeDLL(unsigned long, void*)>
c0013d2a:	83 c4 10             	add    esp,0x10
c0013d2d:	31 c0                	xor    eax,eax
c0013d2f:	31 d2                	xor    edx,edx
c0013d31:	59                   	pop    ecx
c0013d32:	5b                   	pop    ebx
c0013d33:	5e                   	pop    esi
c0013d34:	c3                   	ret    

c0013d35 <SysRead(regs*)>:
c0013d35:	57                   	push   edi
c0013d36:	56                   	push   esi
c0013d37:	53                   	push   ebx
c0013d38:	83 ec 10             	sub    esp,0x10
c0013d3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013d3f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d42:	83 f8 02             	cmp    eax,0x2
c0013d45:	77 10                	ja     c0013d57 <SysRead(regs*)+0x22>
c0013d47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d4f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013d55:	eb 0e                	jmp    c0013d65 <SysRead(regs*)+0x30>
c0013d57:	83 ec 0c             	sub    esp,0xc
c0013d5a:	50                   	push   eax
c0013d5b:	e8 3b 57 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013d60:	83 c4 10             	add    esp,0x10
c0013d63:	89 c1                	mov    ecx,eax
c0013d65:	83 c8 ff             	or     eax,0xffffffff
c0013d68:	85 c9                	test   ecx,ecx
c0013d6a:	89 c2                	mov    edx,eax
c0013d6c:	74 28                	je     c0013d96 <SysRead(regs*)+0x61>
c0013d6e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013d76:	83 ec 0c             	sub    esp,0xc
c0013d79:	31 ff                	xor    edi,edi
c0013d7b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013d7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d81:	52                   	push   edx
c0013d82:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d85:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013d88:	57                   	push   edi
c0013d89:	56                   	push   esi
c0013d8a:	51                   	push   ecx
c0013d8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013d92:	83 c4 20             	add    esp,0x20
c0013d95:	99                   	cdq    
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	5b                   	pop    ebx
c0013d9a:	5e                   	pop    esi
c0013d9b:	5f                   	pop    edi
c0013d9c:	c3                   	ret    

c0013d9d <SysRegisterSignal(regs*)>:
c0013d9d:	83 ec 18             	sub    esp,0x18
c0013da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013da4:	6a 00                	push   0x0
c0013da6:	6a 00                	push   0x0
c0013da8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013dab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013dae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013db3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013db6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013dbc:	e8 68 d9 ff ff       	call   c0011729 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013dc1:	83 c4 2c             	add    esp,0x2c
c0013dc4:	99                   	cdq    
c0013dc5:	c3                   	ret    

c0013dc6 <SysRegistryGetTypeFromPath(regs*)>:
c0013dc6:	57                   	push   edi
c0013dc7:	56                   	push   esi
c0013dc8:	53                   	push   ebx
c0013dc9:	81 ec 38 01 00 00    	sub    esp,0x138
c0013dcf:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013dd6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013dd9:	68 df 21 02 c0       	push   0xc00221df
c0013dde:	e8 27 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013de3:	5a                   	pop    edx
c0013de4:	59                   	pop    ecx
c0013de5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013de8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013deb:	e8 34 f6 ff ff       	call   c0013424 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013df0:	5f                   	pop    edi
c0013df1:	5a                   	pop    edx
c0013df2:	89 c6                	mov    esi,eax
c0013df4:	50                   	push   eax
c0013df5:	68 ff 21 02 c0       	push   0xc00221ff
c0013dfa:	e8 0b 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	85 f6                	test   esi,esi
c0013e04:	74 28                	je     c0013e2e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013e06:	50                   	push   eax
c0013e07:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e0b:	57                   	push   edi
c0013e0c:	56                   	push   esi
c0013e0d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e10:	e8 f4 f1 ff ff       	call   c0013009 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013e15:	83 c4 0c             	add    esp,0xc
c0013e18:	57                   	push   edi
c0013e19:	50                   	push   eax
c0013e1a:	89 c3                	mov    ebx,eax
c0013e1c:	68 07 22 02 c0       	push   0xc0022207
c0013e21:	e8 e4 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e26:	89 d8                	mov    eax,ebx
c0013e28:	83 c4 10             	add    esp,0x10
c0013e2b:	99                   	cdq    
c0013e2c:	eb 05                	jmp    c0013e33 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013e2e:	83 c8 ff             	or     eax,0xffffffff
c0013e31:	89 c2                	mov    edx,eax
c0013e33:	81 c4 30 01 00 00    	add    esp,0x130
c0013e39:	5b                   	pop    ebx
c0013e3a:	5e                   	pop    esi
c0013e3b:	5f                   	pop    edi
c0013e3c:	c3                   	ret    

c0013e3d <SysRegistryReadExtent(regs*)>:
c0013e3d:	83 ec 1c             	sub    esp,0x1c
c0013e40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e44:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e47:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013e4a:	85 c0                	test   eax,eax
c0013e4c:	79 1f                	jns    c0013e6d <SysRegistryReadExtent(regs*)+0x30>
c0013e4e:	52                   	push   edx
c0013e4f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013e54:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013e58:	52                   	push   edx
c0013e59:	50                   	push   eax
c0013e5a:	51                   	push   ecx
c0013e5b:	e8 9b f0 ff ff       	call   c0012efb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013e60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013e68:	83 c4 10             	add    esp,0x10
c0013e6b:	eb 14                	jmp    c0013e81 <SysRegistryReadExtent(regs*)+0x44>
c0013e6d:	83 ec 04             	sub    esp,0x4
c0013e70:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013e73:	50                   	push   eax
c0013e74:	51                   	push   ecx
c0013e75:	e8 1f eb ff ff       	call   c0012999 <CmGetString(Reghive_Tag*, int, char*)>
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	31 c0                	xor    eax,eax
c0013e7f:	31 d2                	xor    edx,edx
c0013e81:	83 c4 1c             	add    esp,0x1c
c0013e84:	c3                   	ret    

c0013e85 <SysRegistryPathToExtentLookup(regs*)>:
c0013e85:	53                   	push   ebx
c0013e86:	83 ec 10             	sub    esp,0x10
c0013e89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e8d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e90:	68 1d 22 02 c0       	push   0xc002221d
c0013e95:	e8 70 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e9a:	58                   	pop    eax
c0013e9b:	5a                   	pop    edx
c0013e9c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e9f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ea2:	e8 7d f5 ff ff       	call   c0013424 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013ea7:	83 c4 18             	add    esp,0x18
c0013eaa:	5b                   	pop    ebx
c0013eab:	99                   	cdq    
c0013eac:	c3                   	ret    

c0013ead <SysRegistryEnterDirectory(regs*)>:
c0013ead:	53                   	push   ebx
c0013eae:	83 ec 10             	sub    esp,0x10
c0013eb1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013eb5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013eb8:	68 40 22 02 c0       	push   0xc0022240
c0013ebd:	e8 48 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ec2:	58                   	pop    eax
c0013ec3:	5a                   	pop    edx
c0013ec4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ec7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013eca:	e8 41 eb ff ff       	call   c0012a10 <CmEnterDirectory(Reghive_Tag*, int)>
c0013ecf:	83 c4 18             	add    esp,0x18
c0013ed2:	5b                   	pop    ebx
c0013ed3:	99                   	cdq    
c0013ed4:	c3                   	ret    

c0013ed5 <SysRegistryGetNext(regs*)>:
c0013ed5:	53                   	push   ebx
c0013ed6:	83 ec 10             	sub    esp,0x10
c0013ed9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013edd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ee0:	68 5e 22 02 c0       	push   0xc002225e
c0013ee5:	e8 20 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013eea:	58                   	pop    eax
c0013eeb:	5a                   	pop    edx
c0013eec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013eef:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ef2:	e8 58 eb ff ff       	call   c0012a4f <CmGetNext(Reghive_Tag*, int)>
c0013ef7:	83 c4 18             	add    esp,0x18
c0013efa:	5b                   	pop    ebx
c0013efb:	99                   	cdq    
c0013efc:	c3                   	ret    

c0013efd <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013efd:	57                   	push   edi
c0013efe:	56                   	push   esi
c0013eff:	53                   	push   ebx
c0013f00:	81 ec 34 01 00 00    	sub    esp,0x134
c0013f06:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013f0d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013f11:	57                   	push   edi
c0013f12:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013f15:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013f18:	e8 ec f0 ff ff       	call   c0013009 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013f1d:	89 c3                	mov    ebx,eax
c0013f1f:	58                   	pop    eax
c0013f20:	5a                   	pop    edx
c0013f21:	57                   	push   edi
c0013f22:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013f25:	e8 26 c7 fe ff       	call   c0000650 <strcpy>
c0013f2a:	81 c4 40 01 00 00    	add    esp,0x140
c0013f30:	89 d8                	mov    eax,ebx
c0013f32:	5b                   	pop    ebx
c0013f33:	99                   	cdq    
c0013f34:	5e                   	pop    esi
c0013f35:	5f                   	pop    edi
c0013f36:	c3                   	ret    

c0013f37 <SysRegistryOpen(regs*)>:
c0013f37:	83 ec 18             	sub    esp,0x18
c0013f3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f3e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013f41:	e8 e3 e8 ff ff       	call   c0012829 <CmOpen(char const*)>
c0013f46:	83 c4 1c             	add    esp,0x1c
c0013f49:	99                   	cdq    
c0013f4a:	c3                   	ret    

c0013f4b <SysRegistryClose(regs*)>:
c0013f4b:	83 ec 18             	sub    esp,0x18
c0013f4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f52:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f55:	e8 ed e9 ff ff       	call   c0012947 <CmClose(Reghive_Tag*)>
c0013f5a:	31 c0                	xor    eax,eax
c0013f5c:	31 d2                	xor    edx,edx
c0013f5e:	83 c4 1c             	add    esp,0x1c
c0013f61:	c3                   	ret    

c0013f62 <SysSbrk(regs*)>:
c0013f62:	56                   	push   esi
c0013f63:	53                   	push   ebx
c0013f64:	50                   	push   eax
c0013f65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f71:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013f74:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013f7a:	85 db                	test   ebx,ebx
c0013f7c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013f7f:	74 02                	je     c0013f83 <SysSbrk(regs*)+0x21>
c0013f81:	79 06                	jns    c0013f89 <SysSbrk(regs*)+0x27>
c0013f83:	89 f0                	mov    eax,esi
c0013f85:	31 d2                	xor    edx,edx
c0013f87:	eb 2a                	jmp    c0013fb3 <SysSbrk(regs*)+0x51>
c0013f89:	83 c8 ff             	or     eax,0xffffffff
c0013f8c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013f92:	89 c2                	mov    edx,eax
c0013f94:	77 1d                	ja     c0013fb3 <SysSbrk(regs*)+0x51>
c0013f96:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013f9c:	50                   	push   eax
c0013f9d:	68 07 0c 00 00       	push   0xc07
c0013fa2:	c1 ea 0c             	shr    edx,0xc
c0013fa5:	52                   	push   edx
c0013fa6:	51                   	push   ecx
c0013fa7:	e8 5a 5e ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013fac:	89 f0                	mov    eax,esi
c0013fae:	31 d2                	xor    edx,edx
c0013fb0:	83 c4 10             	add    esp,0x10
c0013fb3:	59                   	pop    ecx
c0013fb4:	5b                   	pop    ebx
c0013fb5:	5e                   	pop    esi
c0013fb6:	c3                   	ret    

c0013fb7 <SysSetCwd(regs*)>:
c0013fb7:	83 ec 14             	sub    esp,0x14
c0013fba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fbe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fc6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fc9:	e8 59 7c ff ff       	call   c000bc27 <Fs::setcwd(Process*, char*)>
c0013fce:	83 c4 1c             	add    esp,0x1c
c0013fd1:	99                   	cdq    
c0013fd2:	c3                   	ret    

c0013fd3 <SysSetTime(regs*)>:
c0013fd3:	55                   	push   ebp
c0013fd4:	31 c9                	xor    ecx,ecx
c0013fd6:	57                   	push   edi
c0013fd7:	bd 0c 00 00 00       	mov    ebp,0xc
c0013fdc:	56                   	push   esi
c0013fdd:	53                   	push   ebx
c0013fde:	31 db                	xor    ebx,ebx
c0013fe0:	83 ec 10             	sub    esp,0x10
c0013fe3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013fe7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013fea:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013fed:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013ff0:	89 c2                	mov    edx,eax
c0013ff2:	c1 e8 05             	shr    eax,0x5
c0013ff5:	83 e2 1f             	and    edx,0x1f
c0013ff8:	42                   	inc    edx
c0013ff9:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013fff:	c1 e7 10             	shl    edi,0x10
c0014002:	88 d1                	mov    cl,dl
c0014004:	31 d2                	xor    edx,edx
c0014006:	f7 f5                	div    ebp
c0014008:	89 dd                	mov    ebp,ebx
c001400a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014010:	88 d5                	mov    ch,dl
c0014012:	31 d2                	xor    edx,edx
c0014014:	0f b7 c1             	movzx  eax,cx
c0014017:	09 f8                	or     eax,edi
c0014019:	bf 3c 00 00 00       	mov    edi,0x3c
c001401e:	89 c1                	mov    ecx,eax
c0014020:	89 f0                	mov    eax,esi
c0014022:	f7 f7                	div    edi
c0014024:	c1 e2 10             	shl    edx,0x10
c0014027:	09 d5                	or     ebp,edx
c0014029:	31 d2                	xor    edx,edx
c001402b:	f7 f7                	div    edi
c001402d:	89 eb                	mov    ebx,ebp
c001402f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014034:	89 f0                	mov    eax,esi
c0014036:	88 d7                	mov    bh,dl
c0014038:	31 d2                	xor    edx,edx
c001403a:	f7 f7                	div    edi
c001403c:	bf 18 00 00 00       	mov    edi,0x18
c0014041:	31 d2                	xor    edx,edx
c0014043:	f7 f7                	div    edi
c0014045:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001404a:	88 d3                	mov    bl,dl
c001404c:	53                   	push   ebx
c001404d:	51                   	push   ecx
c001404e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014054:	e8 df 83 ff ff       	call   c000c438 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014059:	83 c4 1c             	add    esp,0x1c
c001405c:	31 d2                	xor    edx,edx
c001405e:	5b                   	pop    ebx
c001405f:	5e                   	pop    esi
c0014060:	83 f0 01             	xor    eax,0x1
c0014063:	5f                   	pop    edi
c0014064:	0f b6 c0             	movzx  eax,al
c0014067:	5d                   	pop    ebp
c0014068:	c3                   	ret    

c0014069 <SysSymlink(regs*)>:
c0014069:	53                   	push   ebx
c001406a:	83 c8 ff             	or     eax,0xffffffff
c001406d:	83 ec 08             	sub    esp,0x8
c0014070:	89 c2                	mov    edx,eax
c0014072:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014076:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014079:	85 c9                	test   ecx,ecx
c001407b:	74 14                	je     c0014091 <SysSymlink(regs*)+0x28>
c001407d:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014080:	85 db                	test   ebx,ebx
c0014082:	74 0d                	je     c0014091 <SysSymlink(regs*)+0x28>
c0014084:	50                   	push   eax
c0014085:	50                   	push   eax
c0014086:	53                   	push   ebx
c0014087:	51                   	push   ecx
c0014088:	e8 95 70 ff ff       	call   c000b122 <KeCreateSymlink(char const*, char const*)>
c001408d:	83 c4 10             	add    esp,0x10
c0014090:	99                   	cdq    
c0014091:	83 c4 08             	add    esp,0x8
c0014094:	5b                   	pop    ebx
c0014095:	c3                   	ret    

c0014096 <SysTimezone(regs*)>:
c0014096:	53                   	push   ebx
c0014097:	83 ec 08             	sub    esp,0x8
c001409a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001409e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00140a2:	75 17                	jne    c00140bb <SysTimezone(regs*)+0x25>
c00140a4:	83 ec 0c             	sub    esp,0xc
c00140a7:	68 75 22 02 c0       	push   0xc0022275
c00140ac:	e8 59 68 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00140b1:	83 c8 ff             	or     eax,0xffffffff
c00140b4:	83 c4 10             	add    esp,0x10
c00140b7:	89 c2                	mov    edx,eax
c00140b9:	eb 20                	jmp    c00140db <SysTimezone(regs*)+0x45>
c00140bb:	83 ec 0c             	sub    esp,0xc
c00140be:	68 8a 22 02 c0       	push   0xc002228a
c00140c3:	e8 42 68 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00140c8:	58                   	pop    eax
c00140c9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140cc:	e8 cb 80 ff ff       	call   c000c19c <User::loadClockSettings(int)>
c00140d1:	83 c4 10             	add    esp,0x10
c00140d4:	b8 01 00 00 00       	mov    eax,0x1
c00140d9:	31 d2                	xor    edx,edx
c00140db:	83 c4 08             	add    esp,0x8
c00140de:	5b                   	pop    ebx
c00140df:	c3                   	ret    

c00140e0 <SysTruncate(regs*)>:
c00140e0:	55                   	push   ebp
c00140e1:	57                   	push   edi
c00140e2:	31 ff                	xor    edi,edi
c00140e4:	56                   	push   esi
c00140e5:	53                   	push   ebx
c00140e6:	83 ec 0c             	sub    esp,0xc
c00140e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ed:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00140f0:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00140f4:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00140f7:	89 ce                	mov    esi,ecx
c00140f9:	0f 84 9a 00 00 00    	je     c0014199 <SysTruncate(regs*)+0xb9>
c00140ff:	83 ec 0c             	sub    esp,0xc
c0014102:	68 14 01 00 00       	push   0x114
c0014107:	e8 c7 39 ff ff       	call   c0007ad3 <malloc>
c001410c:	83 c4 0c             	add    esp,0xc
c001410f:	89 c3                	mov    ebx,eax
c0014111:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014116:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014119:	55                   	push   ebp
c001411a:	53                   	push   ebx
c001411b:	e8 86 77 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0014120:	83 c4 10             	add    esp,0x10
c0014123:	31 d2                	xor    edx,edx
c0014125:	85 db                	test   ebx,ebx
c0014127:	b8 03 00 00 00       	mov    eax,0x3
c001412c:	0f 84 a2 00 00 00    	je     c00141d4 <SysTruncate(regs*)+0xf4>
c0014132:	51                   	push   ecx
c0014133:	51                   	push   ecx
c0014134:	6a 02                	push   0x2
c0014136:	53                   	push   ebx
c0014137:	e8 88 77 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c001413c:	83 c4 10             	add    esp,0x10
c001413f:	85 c0                	test   eax,eax
c0014141:	74 13                	je     c0014156 <SysTruncate(regs*)+0x76>
c0014143:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014145:	83 ec 0c             	sub    esp,0xc
c0014148:	53                   	push   ebx
c0014149:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001414c:	83 c4 10             	add    esp,0x10
c001414f:	b8 04 00 00 00       	mov    eax,0x4
c0014154:	eb 7c                	jmp    c00141d2 <SysTruncate(regs*)+0xf2>
c0014156:	52                   	push   edx
c0014157:	57                   	push   edi
c0014158:	56                   	push   esi
c0014159:	53                   	push   ebx
c001415a:	e8 79 78 ff ff       	call   c000b9d8 <File::truncate(unsigned long long)>
c001415f:	83 c4 10             	add    esp,0x10
c0014162:	85 c0                	test   eax,eax
c0014164:	74 1b                	je     c0014181 <SysTruncate(regs*)+0xa1>
c0014166:	83 ec 0c             	sub    esp,0xc
c0014169:	53                   	push   ebx
c001416a:	e8 b3 77 ff ff       	call   c000b922 <File::close()>
c001416f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014171:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014174:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014177:	83 c4 10             	add    esp,0x10
c001417a:	b8 05 00 00 00       	mov    eax,0x5
c001417f:	eb 51                	jmp    c00141d2 <SysTruncate(regs*)+0xf2>
c0014181:	83 ec 0c             	sub    esp,0xc
c0014184:	53                   	push   ebx
c0014185:	e8 98 77 ff ff       	call   c000b922 <File::close()>
c001418a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001418c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001418f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014192:	83 c4 10             	add    esp,0x10
c0014195:	31 c0                	xor    eax,eax
c0014197:	eb 39                	jmp    c00141d2 <SysTruncate(regs*)+0xf2>
c0014199:	31 d2                	xor    edx,edx
c001419b:	83 fd 02             	cmp    ebp,0x2
c001419e:	b8 01 00 00 00       	mov    eax,0x1
c00141a3:	7e 2f                	jle    c00141d4 <SysTruncate(regs*)+0xf4>
c00141a5:	83 ec 0c             	sub    esp,0xc
c00141a8:	51                   	push   ecx
c00141a9:	e8 ed 52 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00141ae:	83 c4 10             	add    esp,0x10
c00141b1:	31 d2                	xor    edx,edx
c00141b3:	89 c1                	mov    ecx,eax
c00141b5:	b8 02 00 00 00       	mov    eax,0x2
c00141ba:	85 c9                	test   ecx,ecx
c00141bc:	74 16                	je     c00141d4 <SysTruncate(regs*)+0xf4>
c00141be:	50                   	push   eax
c00141bf:	57                   	push   edi
c00141c0:	56                   	push   esi
c00141c1:	51                   	push   ecx
c00141c2:	e8 11 78 ff ff       	call   c000b9d8 <File::truncate(unsigned long long)>
c00141c7:	83 c4 10             	add    esp,0x10
c00141ca:	85 c0                	test   eax,eax
c00141cc:	0f 95 c0             	setne  al
c00141cf:	0f b6 c0             	movzx  eax,al
c00141d2:	31 d2                	xor    edx,edx
c00141d4:	83 c4 0c             	add    esp,0xc
c00141d7:	5b                   	pop    ebx
c00141d8:	5e                   	pop    esi
c00141d9:	5f                   	pop    edi
c00141da:	5d                   	pop    ebp
c00141db:	c3                   	ret    

c00141dc <SysWrite(regs*)>:
c00141dc:	57                   	push   edi
c00141dd:	56                   	push   esi
c00141de:	53                   	push   ebx
c00141df:	83 ec 10             	sub    esp,0x10
c00141e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141e9:	83 f8 02             	cmp    eax,0x2
c00141ec:	77 10                	ja     c00141fe <SysWrite(regs*)+0x22>
c00141ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141f6:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141fc:	eb 0e                	jmp    c001420c <SysWrite(regs*)+0x30>
c00141fe:	83 ec 0c             	sub    esp,0xc
c0014201:	50                   	push   eax
c0014202:	e8 94 52 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014207:	83 c4 10             	add    esp,0x10
c001420a:	89 c1                	mov    ecx,eax
c001420c:	83 c8 ff             	or     eax,0xffffffff
c001420f:	85 c9                	test   ecx,ecx
c0014211:	89 c2                	mov    edx,eax
c0014213:	74 28                	je     c001423d <SysWrite(regs*)+0x61>
c0014215:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001421d:	83 ec 0c             	sub    esp,0xc
c0014220:	31 ff                	xor    edi,edi
c0014222:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014226:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014228:	52                   	push   edx
c0014229:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001422c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001422f:	57                   	push   edi
c0014230:	56                   	push   esi
c0014231:	51                   	push   ecx
c0014232:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014235:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014239:	83 c4 20             	add    esp,0x20
c001423c:	99                   	cdq    
c001423d:	83 c4 10             	add    esp,0x10
c0014240:	5b                   	pop    ebx
c0014241:	5e                   	pop    esi
c0014242:	5f                   	pop    edi
c0014243:	c3                   	ret    

c0014244 <SysWsbe(regs*)>:
c0014244:	57                   	push   edi
c0014245:	b9 0b 00 00 00       	mov    ecx,0xb
c001424a:	56                   	push   esi
c001424b:	be c9 22 02 c0       	mov    esi,0xc00222c9
c0014250:	53                   	push   ebx
c0014251:	83 ec 30             	sub    esp,0x30
c0014254:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014258:	fc                   	cld    
c0014259:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001425b:	83 ec 0c             	sub    esp,0xc
c001425e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014262:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014267:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001426a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014270:	8b 06                	mov    eax,DWORD PTR [esi]
c0014272:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014275:	57                   	push   edi
c0014276:	e8 05 c3 fe ff       	call   c0000580 <strlen>
c001427b:	5a                   	pop    edx
c001427c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014280:	52                   	push   edx
c0014281:	31 d2                	xor    edx,edx
c0014283:	57                   	push   edi
c0014284:	52                   	push   edx
c0014285:	50                   	push   eax
c0014286:	56                   	push   esi
c0014287:	ff d3                	call   ebx
c0014289:	83 c4 14             	add    esp,0x14
c001428c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014290:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014293:	e8 a8 23 00 00       	call   c0016640 <terminateTask(int)>
c0014298:	83 c4 40             	add    esp,0x40
c001429b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00142a0:	5b                   	pop    ebx
c00142a1:	31 d2                	xor    edx,edx
c00142a3:	5e                   	pop    esi
c00142a4:	5f                   	pop    edi
c00142a5:	c3                   	ret    

c00142a6 <SysYield(regs*)>:
c00142a6:	83 ec 0c             	sub    esp,0xc
c00142a9:	fa                   	cli    
c00142aa:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00142b0:	e8 0b 1a 00 00       	call   c0015cc0 <schedule()>
c00142b5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00142ba:	48                   	dec    eax
c00142bb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00142c0:	75 01                	jne    c00142c3 <SysYield(regs*)+0x1d>
c00142c2:	fb                   	sti    
c00142c3:	31 c0                	xor    eax,eax
c00142c5:	31 d2                	xor    edx,edx
c00142c7:	83 c4 0c             	add    esp,0xc
c00142ca:	c3                   	ret    

c00142cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00142cb:	55                   	push   ebp
c00142cc:	57                   	push   edi
c00142cd:	56                   	push   esi
c00142ce:	53                   	push   ebx
c00142cf:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00142d5:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00142e0:	74 3b                	je     c001431d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00142e2:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00142ea:	74 31                	je     c001431d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00142ec:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00142f4:	75 27                	jne    c001431d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00142f6:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00142fd:	05 00 10 00 00       	add    eax,0x1000
c0014302:	89 c2                	mov    edx,eax
c0014304:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014309:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014310:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014316:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001431d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014324:	83 ec 0c             	sub    esp,0xc
c0014327:	6a 01                	push   0x1
c0014329:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001432f:	e8 c1 52 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014334:	83 c4 10             	add    esp,0x10
c0014337:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001433d:	89 c3                	mov    ebx,eax
c001433f:	0f 86 26 01 00 00    	jbe    c001446b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014345:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001434d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014354:	c1 ee 0c             	shr    esi,0xc
c0014357:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001435b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014362:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014369:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001436d:	29 ef                	sub    edi,ebp
c001436f:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014373:	0f 83 f9 00 00 00    	jae    c0014472 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014379:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001437f:	b8 00 10 00 00       	mov    eax,0x1000
c0014384:	0f 47 f8             	cmova  edi,eax
c0014387:	83 ec 0c             	sub    esp,0xc
c001438a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014391:	31 d2                	xor    edx,edx
c0014393:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014395:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014399:	50                   	push   eax
c001439a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001439e:	56                   	push   esi
c001439f:	52                   	push   edx
c00143a0:	57                   	push   edi
c00143a1:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00143a8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143ab:	83 c4 20             	add    esp,0x20
c00143ae:	85 c0                	test   eax,eax
c00143b0:	75 06                	jne    c00143b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00143b2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00143b6:	74 13                	je     c00143cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00143b8:	83 ec 0c             	sub    esp,0xc
c00143bb:	53                   	push   ebx
c00143bc:	e8 48 55 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00143c1:	83 c4 10             	add    esp,0x10
c00143c4:	31 c0                	xor    eax,eax
c00143c6:	e9 7c 01 00 00       	jmp    c0014547 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00143cb:	fa                   	cli    
c00143cc:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00143d2:	e8 0b 3a ff ff       	call   c0007de2 <Phys::allocatePage()>
c00143d7:	6a 07                	push   0x7
c00143d9:	53                   	push   ebx
c00143da:	50                   	push   eax
c00143db:	89 c7                	mov    edi,eax
c00143dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143e5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143eb:	e8 0e 59 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00143f0:	83 c4 0c             	add    esp,0xc
c00143f3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143fa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014400:	6a 00                	push   0x0
c0014402:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014407:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001440a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014410:	e8 4f 57 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014415:	58                   	pop    eax
c0014416:	5a                   	pop    edx
c0014417:	68 07 0c 00 00       	push   0xc07
c001441c:	55                   	push   ebp
c001441d:	57                   	push   edi
c001441e:	89 df                	mov    edi,ebx
c0014420:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014427:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001442d:	6a 00                	push   0x0
c001442f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014434:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014437:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001443d:	e8 20 5b ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014442:	b9 00 10 00 00       	mov    ecx,0x1000
c0014447:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014449:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001444e:	83 c4 20             	add    esp,0x20
c0014451:	48                   	dec    eax
c0014452:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014457:	85 c0                	test   eax,eax
c0014459:	75 01                	jne    c001445c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001445b:	fb                   	sti    
c001445c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014460:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014466:	e9 f0 fe ff ff       	jmp    c001435b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001446b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014472:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014479:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001447f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014485:	0f 86 ae 00 00 00    	jbe    c0014539 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001448b:	fa                   	cli    
c001448c:	51                   	push   ecx
c001448d:	31 ff                	xor    edi,edi
c001448f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014496:	c1 ee 0c             	shr    esi,0xc
c0014499:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001449f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144a5:	6a 00                	push   0x0
c00144a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144af:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144b5:	e8 aa 56 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00144ba:	83 c4 10             	add    esp,0x10
c00144bd:	e8 20 39 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00144c2:	47                   	inc    edi
c00144c3:	6a 07                	push   0x7
c00144c5:	53                   	push   ebx
c00144c6:	50                   	push   eax
c00144c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00144d1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00144d4:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00144da:	e8 1f 58 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00144df:	58                   	pop    eax
c00144e0:	5a                   	pop    edx
c00144e1:	68 07 0c 00 00       	push   0xc07
c00144e6:	55                   	push   ebp
c00144e7:	81 c5 00 10 00 00    	add    ebp,0x1000
c00144ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144f1:	50                   	push   eax
c00144f2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00144f9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144ff:	6a 00                	push   0x0
c0014501:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014506:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014509:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001450f:	e8 4e 5a ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014514:	83 c4 1c             	add    esp,0x1c
c0014517:	68 00 10 00 00       	push   0x1000
c001451c:	6a 00                	push   0x0
c001451e:	53                   	push   ebx
c001451f:	e8 cc bf fe ff       	call   c00004f0 <memset>
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	39 fe                	cmp    esi,edi
c0014529:	77 92                	ja     c00144bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001452b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014530:	48                   	dec    eax
c0014531:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014536:	75 01                	jne    c0014539 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014538:	fb                   	sti    
c0014539:	83 ec 0c             	sub    esp,0xc
c001453c:	53                   	push   ebx
c001453d:	e8 c7 53 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014542:	83 c4 10             	add    esp,0x10
c0014545:	b0 01                	mov    al,0x1
c0014547:	81 c4 2c 10 00 00    	add    esp,0x102c
c001454d:	5b                   	pop    ebx
c001454e:	5e                   	pop    esi
c001454f:	5f                   	pop    edi
c0014550:	5d                   	pop    ebp
c0014551:	c3                   	ret    

c0014552 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014552:	55                   	push   ebp
c0014553:	57                   	push   edi
c0014554:	56                   	push   esi
c0014555:	53                   	push   ebx
c0014556:	83 ec 48             	sub    esp,0x48
c0014559:	68 14 01 00 00       	push   0x114
c001455e:	e8 70 35 ff ff       	call   c0007ad3 <malloc>
c0014563:	83 c4 0c             	add    esp,0xc
c0014566:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001456a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001456e:	89 c7                	mov    edi,eax
c0014570:	50                   	push   eax
c0014571:	e8 30 73 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0014576:	58                   	pop    eax
c0014577:	5a                   	pop    edx
c0014578:	6a 01                	push   0x1
c001457a:	57                   	push   edi
c001457b:	e8 44 73 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c0014580:	83 c4 10             	add    esp,0x10
c0014583:	85 c0                	test   eax,eax
c0014585:	0f 85 4c 01 00 00    	jne    c00146d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001458b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014593:	83 ec 0c             	sub    esp,0xc
c0014596:	6a 34                	push   0x34
c0014598:	e8 36 35 ff ff       	call   c0007ad3 <malloc>
c001459d:	89 c3                	mov    ebx,eax
c001459f:	58                   	pop    eax
c00145a0:	8b 07                	mov    eax,DWORD PTR [edi]
c00145a2:	8d 74 24 38          	lea    esi,[esp+0x38]
c00145a6:	56                   	push   esi
c00145a7:	53                   	push   ebx
c00145a8:	6a 00                	push   0x0
c00145aa:	6a 34                	push   0x34
c00145ac:	57                   	push   edi
c00145ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145b0:	83 c4 20             	add    esp,0x20
c00145b3:	85 c0                	test   eax,eax
c00145b5:	0f 85 1c 01 00 00    	jne    c00146d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00145bb:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00145c1:	0f 85 10 01 00 00    	jne    c00146d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00145c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145ca:	85 c0                	test   eax,eax
c00145cc:	0f 84 05 01 00 00    	je     c00146d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00145d2:	31 d2                	xor    edx,edx
c00145d4:	55                   	push   ebp
c00145d5:	52                   	push   edx
c00145d6:	50                   	push   eax
c00145d7:	57                   	push   edi
c00145d8:	e8 a5 73 ff ff       	call   c000b982 <File::seek(unsigned long long)>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	85 c0                	test   eax,eax
c00145e2:	0f 85 ef 00 00 00    	jne    c00146d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00145e8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00145eb:	83 ec 0c             	sub    esp,0xc
c00145ee:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00145f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00145f6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00145fa:	0f af c2             	imul   eax,edx
c00145fd:	50                   	push   eax
c00145fe:	e8 d0 34 ff ff       	call   c0007ad3 <malloc>
c0014603:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014605:	89 34 24             	mov    DWORD PTR [esp],esi
c0014608:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001460c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014610:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014614:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014618:	0f af c2             	imul   eax,edx
c001461b:	99                   	cdq    
c001461c:	52                   	push   edx
c001461d:	50                   	push   eax
c001461e:	57                   	push   edi
c001461f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014622:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014625:	83 c4 20             	add    esp,0x20
c0014628:	85 c0                	test   eax,eax
c001462a:	0f 84 a7 00 00 00    	je     c00146d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014630:	31 d2                	xor    edx,edx
c0014632:	51                   	push   ecx
c0014633:	52                   	push   edx
c0014634:	50                   	push   eax
c0014635:	57                   	push   edi
c0014636:	e8 47 73 ff ff       	call   c000b982 <File::seek(unsigned long long)>
c001463b:	83 c4 10             	add    esp,0x10
c001463e:	85 c0                	test   eax,eax
c0014640:	0f 85 91 00 00 00    	jne    c00146d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014646:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001464a:	83 ec 0c             	sub    esp,0xc
c001464d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014651:	0f af c2             	imul   eax,edx
c0014654:	50                   	push   eax
c0014655:	e8 79 34 ff ff       	call   c0007ad3 <malloc>
c001465a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001465c:	89 34 24             	mov    DWORD PTR [esp],esi
c001465f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014667:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001466b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001466f:	0f af c2             	imul   eax,edx
c0014672:	99                   	cdq    
c0014673:	52                   	push   edx
c0014674:	50                   	push   eax
c0014675:	57                   	push   edi
c0014676:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014679:	83 c4 20             	add    esp,0x20
c001467c:	31 c9                	xor    ecx,ecx
c001467e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014686:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c001468a:	0f b7 e9             	movzx  ebp,cx
c001468d:	0f 83 86 00 00 00    	jae    c0014719 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014693:	c1 e5 05             	shl    ebp,0x5
c0014696:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c001469a:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c001469e:	75 73                	jne    c0014713 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00146a0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00146a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146a7:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00146aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146ae:	52                   	push   edx
c00146af:	31 d2                	xor    edx,edx
c00146b1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00146b4:	52                   	push   edx
c00146b5:	50                   	push   eax
c00146b6:	57                   	push   edi
c00146b7:	e8 c6 72 ff ff       	call   c000b982 <File::seek(unsigned long long)>
c00146bc:	83 c4 10             	add    esp,0x10
c00146bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00146c3:	85 c0                	test   eax,eax
c00146c5:	74 17                	je     c00146de <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00146c7:	83 ec 0c             	sub    esp,0xc
c00146ca:	68 f5 22 02 c0       	push   0xc00222f5
c00146cf:	e8 36 62 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	31 c0                	xor    eax,eax
c00146d9:	e9 8b 00 00 00       	jmp    c0014769 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00146de:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00146e2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00146e5:	83 ec 0c             	sub    esp,0xc
c00146e8:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00146eb:	50                   	push   eax
c00146ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146f0:	56                   	push   esi
c00146f1:	57                   	push   edi
c00146f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00146f6:	e8 d0 fb ff ff       	call   c00142cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00146fb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00146ff:	83 c4 20             	add    esp,0x20
c0014702:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014706:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001470a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001470f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014713:	41                   	inc    ecx
c0014714:	e9 6d ff ff ff       	jmp    c0014686 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014719:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001471d:	83 ec 0c             	sub    esp,0xc
c0014720:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014728:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c001472e:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014734:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014739:	05 00 10 00 00       	add    eax,0x1000
c001473e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014741:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014745:	e8 99 33 ff ff       	call   c0007ae3 <free>
c001474a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001474d:	e8 91 33 ff ff       	call   c0007ae3 <free>
c0014752:	58                   	pop    eax
c0014753:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014757:	e8 87 33 ff ff       	call   c0007ae3 <free>
c001475c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001475f:	e8 be 71 ff ff       	call   c000b922 <File::close()>
c0014764:	83 c4 10             	add    esp,0x10
c0014767:	b0 01                	mov    al,0x1
c0014769:	83 c4 3c             	add    esp,0x3c
c001476c:	5b                   	pop    ebx
c001476d:	5e                   	pop    esi
c001476e:	5f                   	pop    edi
c001476f:	5d                   	pop    ebp
c0014770:	c3                   	ret    

c0014771 <Thr::runtimeReferenceHelper()>:
c0014771:	83 ec 18             	sub    esp,0x18
c0014774:	68 fd 22 02 c0       	push   0xc00222fd
c0014779:	e8 8c 61 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001477e:	fa                   	cli    
c001477f:	83 c4 10             	add    esp,0x10
c0014782:	eb fe                	jmp    c0014782 <Thr::runtimeReferenceHelper()+0x11>

c0014784 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014784:	57                   	push   edi
c0014785:	56                   	push   esi
c0014786:	53                   	push   ebx
c0014787:	31 db                	xor    ebx,ebx
c0014789:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c001478f:	7e 3c                	jle    c00147cd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014791:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c0014798:	31 ff                	xor    edi,edi
c001479a:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00147a1:	7e 27                	jle    c00147ca <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00147a3:	50                   	push   eax
c00147a4:	50                   	push   eax
c00147a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00147ab:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c00147b2:	50                   	push   eax
c00147b3:	e8 c8 bf fe ff       	call   c0000780 <strcmp>
c00147b8:	83 c4 10             	add    esp,0x10
c00147bb:	85 c0                	test   eax,eax
c00147bd:	75 05                	jne    c00147c4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00147bf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00147c2:	eb 0b                	jmp    c00147cf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00147c4:	83 c6 10             	add    esi,0x10
c00147c7:	47                   	inc    edi
c00147c8:	eb d0                	jmp    c001479a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00147ca:	43                   	inc    ebx
c00147cb:	eb bc                	jmp    c0014789 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00147cd:	31 c0                	xor    eax,eax
c00147cf:	5b                   	pop    ebx
c00147d0:	5e                   	pop    esi
c00147d1:	5f                   	pop    edi
c00147d2:	c3                   	ret    

c00147d3 <Thr::loadKernelSymbolTable(char const*)>:
c00147d3:	55                   	push   ebp
c00147d4:	57                   	push   edi
c00147d5:	56                   	push   esi
c00147d6:	53                   	push   ebx
c00147d7:	83 ec 68             	sub    esp,0x68
c00147da:	68 14 01 00 00       	push   0x114
c00147df:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00147e5:	e8 e9 32 ff ff       	call   c0007ad3 <malloc>
c00147ea:	83 c4 0c             	add    esp,0xc
c00147ed:	56                   	push   esi
c00147ee:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00147f2:	89 c3                	mov    ebx,eax
c00147f4:	50                   	push   eax
c00147f5:	e8 ac 70 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c00147fa:	5e                   	pop    esi
c00147fb:	5f                   	pop    edi
c00147fc:	6a 01                	push   0x1
c00147fe:	53                   	push   ebx
c00147ff:	e8 c0 70 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c0014804:	83 c4 10             	add    esp,0x10
c0014807:	85 c0                	test   eax,eax
c0014809:	74 0a                	je     c0014815 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001480b:	83 ec 0c             	sub    esp,0xc
c001480e:	68 1f 23 02 c0       	push   0xc002231f
c0014813:	eb 34                	jmp    c0014849 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014815:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001481d:	83 ec 0c             	sub    esp,0xc
c0014820:	6a 34                	push   0x34
c0014822:	e8 ac 32 ff ff       	call   c0007ad3 <malloc>
c0014827:	59                   	pop    ecx
c0014828:	8d 74 24 34          	lea    esi,[esp+0x34]
c001482c:	89 c7                	mov    edi,eax
c001482e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014830:	56                   	push   esi
c0014831:	57                   	push   edi
c0014832:	6a 00                	push   0x0
c0014834:	6a 34                	push   0x34
c0014836:	53                   	push   ebx
c0014837:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001483a:	83 c4 20             	add    esp,0x20
c001483d:	85 c0                	test   eax,eax
c001483f:	74 17                	je     c0014858 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014841:	83 ec 0c             	sub    esp,0xc
c0014844:	68 36 23 02 c0       	push   0xc0022336
c0014849:	e8 73 ca ff ff       	call   c00112c1 <KePanic(char const*)>
c001484e:	83 c4 10             	add    esp,0x10
c0014851:	31 c0                	xor    eax,eax
c0014853:	e9 31 02 00 00       	jmp    c0014a89 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014858:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001485e:	75 e1                	jne    c0014841 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014860:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014863:	85 c0                	test   eax,eax
c0014865:	74 da                	je     c0014841 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014867:	52                   	push   edx
c0014868:	31 d2                	xor    edx,edx
c001486a:	52                   	push   edx
c001486b:	50                   	push   eax
c001486c:	53                   	push   ebx
c001486d:	e8 10 71 ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0014872:	83 c4 10             	add    esp,0x10
c0014875:	85 c0                	test   eax,eax
c0014877:	75 c8                	jne    c0014841 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014879:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001487d:	83 ec 0c             	sub    esp,0xc
c0014880:	31 ed                	xor    ebp,ebp
c0014882:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014886:	0f af c2             	imul   eax,edx
c0014889:	50                   	push   eax
c001488a:	e8 44 32 ff ff       	call   c0007ad3 <malloc>
c001488f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014891:	89 34 24             	mov    DWORD PTR [esp],esi
c0014894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014898:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001489c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00148a0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00148a4:	0f af c2             	imul   eax,edx
c00148a7:	99                   	cdq    
c00148a8:	52                   	push   edx
c00148a9:	50                   	push   eax
c00148aa:	53                   	push   ebx
c00148ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148ae:	83 c4 20             	add    esp,0x20
c00148b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00148b9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00148c1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00148c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148d1:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00148d5:	0f b7 f5             	movzx  esi,bp
c00148d8:	0f 83 a7 00 00 00    	jae    c0014985 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00148de:	6b f6 28             	imul   esi,esi,0x28
c00148e1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00148e5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00148e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148ec:	50                   	push   eax
c00148ed:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00148f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148f5:	8b 16                	mov    edx,DWORD PTR [esi]
c00148f7:	6b c0 28             	imul   eax,eax,0x28
c00148fa:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00148fe:	89 d0                	mov    eax,edx
c0014900:	31 d2                	xor    edx,edx
c0014902:	52                   	push   edx
c0014903:	50                   	push   eax
c0014904:	53                   	push   ebx
c0014905:	e8 78 70 ff ff       	call   c000b982 <File::seek(unsigned long long)>
c001490a:	83 c4 0c             	add    esp,0xc
c001490d:	6a 20                	push   0x20
c001490f:	6a 00                	push   0x0
c0014911:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014915:	52                   	push   edx
c0014916:	e8 d5 bb fe ff       	call   c00004f0 <memset>
c001491b:	58                   	pop    eax
c001491c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001491e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014922:	51                   	push   ecx
c0014923:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014927:	52                   	push   edx
c0014928:	6a 00                	push   0x0
c001492a:	6a 1f                	push   0x1f
c001492c:	53                   	push   ebx
c001492d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014930:	83 c4 18             	add    esp,0x18
c0014933:	68 4d 23 02 c0       	push   0xc002234d
c0014938:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001493c:	52                   	push   edx
c001493d:	e8 3e be fe ff       	call   c0000780 <strcmp>
c0014942:	83 c4 10             	add    esp,0x10
c0014945:	85 c0                	test   eax,eax
c0014947:	75 0f                	jne    c0014958 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014949:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001494c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014950:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014958:	50                   	push   eax
c0014959:	50                   	push   eax
c001495a:	68 55 23 02 c0       	push   0xc0022355
c001495f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014963:	50                   	push   eax
c0014964:	e8 17 be fe ff       	call   c0000780 <strcmp>
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	85 c0                	test   eax,eax
c001496e:	75 0f                	jne    c001497f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014970:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014973:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001497b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001497f:	45                   	inc    ebp
c0014980:	e9 4c ff ff ff       	jmp    c00148d1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014985:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001498a:	75 10                	jne    c001499c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001498c:	83 ec 0c             	sub    esp,0xc
c001498f:	68 5d 23 02 c0       	push   0xc002235d
c0014994:	e8 28 c9 ff ff       	call   c00112c1 <KePanic(char const*)>
c0014999:	83 c4 10             	add    esp,0x10
c001499c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00149a1:	75 10                	jne    c00149b3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00149a3:	83 ec 0c             	sub    esp,0xc
c00149a6:	68 5d 23 02 c0       	push   0xc002235d
c00149ab:	e8 11 c9 ff ff       	call   c00112c1 <KePanic(char const*)>
c00149b0:	83 c4 10             	add    esp,0x10
c00149b3:	50                   	push   eax
c00149b4:	31 d2                	xor    edx,edx
c00149b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149ba:	52                   	push   edx
c00149bb:	50                   	push   eax
c00149bc:	53                   	push   ebx
c00149bd:	e8 c0 6f ff ff       	call   c000b982 <File::seek(unsigned long long)>
c00149c2:	5a                   	pop    edx
c00149c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00149c7:	e8 07 31 ff ff       	call   c0007ad3 <malloc>
c00149cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149d0:	31 c9                	xor    ecx,ecx
c00149d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149d8:	5e                   	pop    esi
c00149d9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00149dd:	55                   	push   ebp
c00149de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149e2:	51                   	push   ecx
c00149e3:	52                   	push   edx
c00149e4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00149e8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00149ec:	53                   	push   ebx
c00149ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149f0:	83 c4 14             	add    esp,0x14
c00149f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149f7:	e8 d7 30 ff ff       	call   c0007ad3 <malloc>
c00149fc:	89 c6                	mov    esi,eax
c00149fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a03:	56                   	push   esi
c0014a04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014a08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014a0c:	51                   	push   ecx
c0014a0d:	52                   	push   edx
c0014a0e:	53                   	push   ebx
c0014a0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014a16:	83 c4 1c             	add    esp,0x1c
c0014a19:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014a1f:	c1 e8 04             	shr    eax,0x4
c0014a22:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014a29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a2d:	31 d2                	xor    edx,edx
c0014a2f:	52                   	push   edx
c0014a30:	50                   	push   eax
c0014a31:	53                   	push   ebx
c0014a32:	e8 4b 6f ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0014a37:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a39:	31 d2                	xor    edx,edx
c0014a3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a3e:	56                   	push   esi
c0014a3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014a43:	52                   	push   edx
c0014a44:	50                   	push   eax
c0014a45:	53                   	push   ebx
c0014a46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a49:	83 c4 14             	add    esp,0x14
c0014a4c:	53                   	push   ebx
c0014a4d:	e8 d0 6e ff ff       	call   c000b922 <File::close()>
c0014a52:	5d                   	pop    ebp
c0014a53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a57:	e8 87 30 ff ff       	call   c0007ae3 <free>
c0014a5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a5f:	e8 7f 30 ff ff       	call   c0007ae3 <free>
c0014a64:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014a69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a6d:	83 c4 10             	add    esp,0x10
c0014a70:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014a77:	8d 50 01             	lea    edx,[eax+0x1]
c0014a7a:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014a81:	b0 01                	mov    al,0x1
c0014a83:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014a89:	83 c4 5c             	add    esp,0x5c
c0014a8c:	5b                   	pop    ebx
c0014a8d:	5e                   	pop    esi
c0014a8e:	5f                   	pop    edi
c0014a8f:	5d                   	pop    ebp
c0014a90:	c3                   	ret    

c0014a91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014a91:	55                   	push   ebp
c0014a92:	57                   	push   edi
c0014a93:	56                   	push   esi
c0014a94:	53                   	push   ebx
c0014a95:	81 ec 68 03 00 00    	sub    esp,0x368
c0014a9b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014aa2:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014aa8:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014aac:	68 14 01 00 00       	push   0x114
c0014ab1:	e8 1d 30 ff ff       	call   c0007ad3 <malloc>
c0014ab6:	83 c4 0c             	add    esp,0xc
c0014ab9:	56                   	push   esi
c0014aba:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014ac1:	50                   	push   eax
c0014ac2:	89 c3                	mov    ebx,eax
c0014ac4:	e8 dd 6d ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0014ac9:	5f                   	pop    edi
c0014aca:	5d                   	pop    ebp
c0014acb:	6a 01                	push   0x1
c0014acd:	53                   	push   ebx
c0014ace:	e8 f1 6d ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c0014ad3:	83 c4 10             	add    esp,0x10
c0014ad6:	85 c0                	test   eax,eax
c0014ad8:	0f 85 b3 06 00 00    	jne    c0015191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ade:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014ae6:	83 ec 0c             	sub    esp,0xc
c0014ae9:	6a 34                	push   0x34
c0014aeb:	e8 e3 2f ff ff       	call   c0007ad3 <malloc>
c0014af0:	5e                   	pop    esi
c0014af1:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014af5:	89 c5                	mov    ebp,eax
c0014af7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014af9:	56                   	push   esi
c0014afa:	55                   	push   ebp
c0014afb:	6a 00                	push   0x0
c0014afd:	6a 34                	push   0x34
c0014aff:	53                   	push   ebx
c0014b00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b03:	83 c4 20             	add    esp,0x20
c0014b06:	85 c0                	test   eax,eax
c0014b08:	0f 85 83 06 00 00    	jne    c0015191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b0e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014b15:	0f 85 76 06 00 00    	jne    c0015191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b1b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014b1e:	85 c0                	test   eax,eax
c0014b20:	0f 84 6b 06 00 00    	je     c0015191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b26:	31 d2                	xor    edx,edx
c0014b28:	51                   	push   ecx
c0014b29:	52                   	push   edx
c0014b2a:	50                   	push   eax
c0014b2b:	53                   	push   ebx
c0014b2c:	e8 51 6e ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0014b31:	83 c4 10             	add    esp,0x10
c0014b34:	85 c0                	test   eax,eax
c0014b36:	0f 85 55 06 00 00    	jne    c0015191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b3c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014b3f:	83 ec 0c             	sub    esp,0xc
c0014b42:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014b46:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014b4a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014b4e:	0f af c2             	imul   eax,edx
c0014b51:	50                   	push   eax
c0014b52:	e8 7c 2f ff ff       	call   c0007ad3 <malloc>
c0014b57:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b59:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b64:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014b68:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014b6c:	0f af c2             	imul   eax,edx
c0014b6f:	99                   	cdq    
c0014b70:	52                   	push   edx
c0014b71:	50                   	push   eax
c0014b72:	53                   	push   ebx
c0014b73:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b76:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014b79:	83 c4 20             	add    esp,0x20
c0014b7c:	85 c0                	test   eax,eax
c0014b7e:	0f 84 0d 06 00 00    	je     c0015191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b84:	52                   	push   edx
c0014b85:	31 d2                	xor    edx,edx
c0014b87:	52                   	push   edx
c0014b88:	50                   	push   eax
c0014b89:	53                   	push   ebx
c0014b8a:	e8 f3 6d ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0014b8f:	83 c4 10             	add    esp,0x10
c0014b92:	85 c0                	test   eax,eax
c0014b94:	0f 85 f7 05 00 00    	jne    c0015191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b9a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014b9e:	83 ec 0c             	sub    esp,0xc
c0014ba1:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014ba5:	0f af c2             	imul   eax,edx
c0014ba8:	50                   	push   eax
c0014ba9:	e8 25 2f ff ff       	call   c0007ad3 <malloc>
c0014bae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014bb0:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bbb:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014bbf:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014bc3:	0f af c2             	imul   eax,edx
c0014bc6:	99                   	cdq    
c0014bc7:	52                   	push   edx
c0014bc8:	50                   	push   eax
c0014bc9:	53                   	push   ebx
c0014bca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bcd:	83 c4 20             	add    esp,0x20
c0014bd0:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014bd6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014bd9:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014bdd:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014be1:	73 78                	jae    c0014c5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014be3:	c1 e7 05             	shl    edi,0x5
c0014be6:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014bea:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014bed:	75 63                	jne    c0014c52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014bef:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014bf2:	31 d2                	xor    edx,edx
c0014bf4:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014bf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bfb:	50                   	push   eax
c0014bfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014bff:	52                   	push   edx
c0014c00:	50                   	push   eax
c0014c01:	53                   	push   ebx
c0014c02:	e8 7b 6d ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0014c07:	83 c4 10             	add    esp,0x10
c0014c0a:	85 c0                	test   eax,eax
c0014c0c:	0f 85 7f 05 00 00    	jne    c0015191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014c12:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014c19:	83 ec 0c             	sub    esp,0xc
c0014c1c:	31 d2                	xor    edx,edx
c0014c1e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014c22:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c24:	01 c6                	add    esi,eax
c0014c26:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c2d:	50                   	push   eax
c0014c2e:	56                   	push   esi
c0014c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c33:	52                   	push   edx
c0014c34:	50                   	push   eax
c0014c35:	53                   	push   ebx
c0014c36:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c39:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c3c:	83 c4 1c             	add    esp,0x1c
c0014c3f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014c42:	50                   	push   eax
c0014c43:	6a 00                	push   0x0
c0014c45:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014c49:	56                   	push   esi
c0014c4a:	e8 a1 b8 fe ff       	call   c00004f0 <memset>
c0014c4f:	83 c4 10             	add    esp,0x10
c0014c52:	66 ff 04 24          	inc    WORD PTR [esp]
c0014c56:	e9 7b ff ff ff       	jmp    c0014bd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014c5b:	50                   	push   eax
c0014c5c:	68 00 01 00 00       	push   0x100
c0014c61:	6a 00                	push   0x0
c0014c63:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014c67:	50                   	push   eax
c0014c68:	e8 83 b8 fe ff       	call   c00004f0 <memset>
c0014c6d:	83 c4 0c             	add    esp,0xc
c0014c70:	68 00 01 00 00       	push   0x100
c0014c75:	6a 00                	push   0x0
c0014c77:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014c7e:	50                   	push   eax
c0014c7f:	e8 6c b8 fe ff       	call   c00004f0 <memset>
c0014c84:	83 c4 10             	add    esp,0x10
c0014c87:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014c8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014c95:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c9d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014ca5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cad:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014cb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014cb9:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014cbd:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014cc2:	0f 83 16 01 00 00    	jae    c0014dde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014cc8:	6b ff 28             	imul   edi,edi,0x28
c0014ccb:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014ccf:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014cd2:	51                   	push   ecx
c0014cd3:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014cd7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014cdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0014cdd:	6b d2 28             	imul   edx,edx,0x28
c0014ce0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014ce4:	31 d2                	xor    edx,edx
c0014ce6:	52                   	push   edx
c0014ce7:	50                   	push   eax
c0014ce8:	53                   	push   ebx
c0014ce9:	e8 94 6c ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0014cee:	83 c4 0c             	add    esp,0xc
c0014cf1:	6a 20                	push   0x20
c0014cf3:	6a 00                	push   0x0
c0014cf5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014cfc:	51                   	push   ecx
c0014cfd:	e8 ee b7 fe ff       	call   c00004f0 <memset>
c0014d02:	58                   	pop    eax
c0014d03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d05:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014d09:	52                   	push   edx
c0014d0a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014d11:	51                   	push   ecx
c0014d12:	6a 00                	push   0x0
c0014d14:	6a 1f                	push   0x1f
c0014d16:	53                   	push   ebx
c0014d17:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d1a:	83 c4 1c             	add    esp,0x1c
c0014d1d:	6a 09                	push   0x9
c0014d1f:	68 77 23 02 c0       	push   0xc0022377
c0014d24:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d2b:	51                   	push   ecx
c0014d2c:	e8 4f b6 fe ff       	call   c0000380 <memcmp>
c0014d31:	83 c4 10             	add    esp,0x10
c0014d34:	85 c0                	test   eax,eax
c0014d36:	75 1a                	jne    c0014d52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014d38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014d3b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014d3e:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014d42:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014d45:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014d4c:	89 d0                	mov    eax,edx
c0014d4e:	40                   	inc    eax
c0014d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d52:	52                   	push   edx
c0014d53:	6a 09                	push   0x9
c0014d55:	68 81 23 02 c0       	push   0xc0022381
c0014d5a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d61:	50                   	push   eax
c0014d62:	e8 19 b6 fe ff       	call   c0000380 <memcmp>
c0014d67:	83 c4 10             	add    esp,0x10
c0014d6a:	85 c0                	test   eax,eax
c0014d6c:	75 1a                	jne    c0014d88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014d6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014d71:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014d74:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014d78:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014d7b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014d82:	89 c8                	mov    eax,ecx
c0014d84:	40                   	inc    eax
c0014d85:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d88:	50                   	push   eax
c0014d89:	50                   	push   eax
c0014d8a:	68 4d 23 02 c0       	push   0xc002234d
c0014d8f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d96:	50                   	push   eax
c0014d97:	e8 e4 b9 fe ff       	call   c0000780 <strcmp>
c0014d9c:	83 c4 10             	add    esp,0x10
c0014d9f:	85 c0                	test   eax,eax
c0014da1:	75 0b                	jne    c0014dae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014da3:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014da7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014daa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014dae:	50                   	push   eax
c0014daf:	50                   	push   eax
c0014db0:	68 55 23 02 c0       	push   0xc0022355
c0014db5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014dbc:	50                   	push   eax
c0014dbd:	e8 be b9 fe ff       	call   c0000780 <strcmp>
c0014dc2:	83 c4 10             	add    esp,0x10
c0014dc5:	85 c0                	test   eax,eax
c0014dc7:	75 0b                	jne    c0014dd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014dc9:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014dcd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014dd4:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014dd9:	e9 d7 fe ff ff       	jmp    c0014cb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014dde:	50                   	push   eax
c0014ddf:	31 d2                	xor    edx,edx
c0014de1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014de5:	52                   	push   edx
c0014de6:	50                   	push   eax
c0014de7:	53                   	push   ebx
c0014de8:	e8 95 6b ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0014ded:	58                   	pop    eax
c0014dee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014df2:	e8 dc 2c ff ff       	call   c0007ad3 <malloc>
c0014df7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014df9:	31 d2                	xor    edx,edx
c0014dfb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014dff:	58                   	pop    eax
c0014e00:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014e04:	56                   	push   esi
c0014e05:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e0d:	52                   	push   edx
c0014e0e:	50                   	push   eax
c0014e0f:	53                   	push   ebx
c0014e10:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e13:	83 c4 14             	add    esp,0x14
c0014e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e1a:	e8 b4 2c ff ff       	call   c0007ad3 <malloc>
c0014e1f:	31 d2                	xor    edx,edx
c0014e21:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014e25:	83 c4 0c             	add    esp,0xc
c0014e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e2c:	52                   	push   edx
c0014e2d:	50                   	push   eax
c0014e2e:	53                   	push   ebx
c0014e2f:	e8 4e 6b ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0014e34:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e36:	31 d2                	xor    edx,edx
c0014e38:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e43:	52                   	push   edx
c0014e44:	50                   	push   eax
c0014e45:	53                   	push   ebx
c0014e46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e49:	83 c4 20             	add    esp,0x20
c0014e4c:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014e51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014e59:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e5d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014e61:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014e64:	0f 84 2b 03 00 00    	je     c0015195 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014e6a:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014e71:	31 d2                	xor    edx,edx
c0014e73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e77:	c1 e8 03             	shr    eax,0x3
c0014e7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014e7e:	51                   	push   ecx
c0014e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e83:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014e87:	52                   	push   edx
c0014e88:	50                   	push   eax
c0014e89:	53                   	push   ebx
c0014e8a:	e8 f3 6a ff ff       	call   c000b982 <File::seek(unsigned long long)>
c0014e8f:	5e                   	pop    esi
c0014e90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e94:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014e9b:	e8 33 2c ff ff       	call   c0007ad3 <malloc>
c0014ea0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ea2:	31 d2                	xor    edx,edx
c0014ea4:	89 c7                	mov    edi,eax
c0014ea6:	58                   	pop    eax
c0014ea7:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014eab:	50                   	push   eax
c0014eac:	57                   	push   edi
c0014ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eb1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014eb8:	52                   	push   edx
c0014eb9:	50                   	push   eax
c0014eba:	53                   	push   ebx
c0014ebb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ebe:	83 c4 20             	add    esp,0x20
c0014ec1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014ec9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014ecd:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014ed1:	0f 8d a5 02 00 00    	jge    c001517c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014ed7:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014edc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ee0:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014ee7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014eeb:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ef3:	c1 e8 08             	shr    eax,0x8
c0014ef6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014efa:	89 c2                	mov    edx,eax
c0014efc:	c1 e2 04             	shl    edx,0x4
c0014eff:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014f03:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014f06:	85 f6                	test   esi,esi
c0014f08:	0f 85 cf 00 00 00    	jne    c0014fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014f0e:	83 ec 0c             	sub    esp,0xc
c0014f11:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f19:	03 02                	add    eax,DWORD PTR [edx]
c0014f1b:	50                   	push   eax
c0014f1c:	e8 63 f8 ff ff       	call   c0014784 <Thr::getAddressOfKernelSymbol(char const*)>
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014f28:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014f2d:	85 c0                	test   eax,eax
c0014f2f:	89 c6                	mov    esi,eax
c0014f31:	0f 85 a6 00 00 00    	jne    c0014fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014f37:	83 ec 0c             	sub    esp,0xc
c0014f3a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f42:	03 02                	add    eax,DWORD PTR [edx]
c0014f44:	50                   	push   eax
c0014f45:	e8 62 c5 ff ff       	call   c00114ac <KeResolveCompatibilitySymbol(char*)>
c0014f4a:	83 c4 10             	add    esp,0x10
c0014f4d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014f51:	85 c0                	test   eax,eax
c0014f53:	89 c6                	mov    esi,eax
c0014f55:	0f 85 82 00 00 00    	jne    c0014fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014f5b:	50                   	push   eax
c0014f5c:	50                   	push   eax
c0014f5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f61:	03 02                	add    eax,DWORD PTR [edx]
c0014f63:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014f67:	50                   	push   eax
c0014f68:	68 8b 23 02 c0       	push   0xc002238b
c0014f6d:	e8 98 59 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014f72:	58                   	pop    eax
c0014f73:	5a                   	pop    edx
c0014f74:	68 a5 23 02 c0       	push   0xc00223a5
c0014f79:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014f80:	51                   	push   ecx
c0014f81:	e8 ca b6 fe ff       	call   c0000650 <strcpy>
c0014f86:	59                   	pop    ecx
c0014f87:	58                   	pop    eax
c0014f88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f90:	03 02                	add    eax,DWORD PTR [edx]
c0014f92:	50                   	push   eax
c0014f93:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014f9a:	51                   	push   ecx
c0014f9b:	e8 d0 b8 fe ff       	call   c0000870 <strcat>
c0014fa0:	58                   	pop    eax
c0014fa1:	5a                   	pop    edx
c0014fa2:	68 3b 24 02 c0       	push   0xc002243b
c0014fa7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014fae:	51                   	push   ecx
c0014faf:	e8 bc b8 fe ff       	call   c0000870 <strcat>
c0014fb4:	83 c4 10             	add    esp,0x10
c0014fb7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014fbc:	0f 84 77 01 00 00    	je     c0015139 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014fc2:	83 ec 0c             	sub    esp,0xc
c0014fc5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014fcc:	51                   	push   ecx
c0014fcd:	e8 ef c2 ff ff       	call   c00112c1 <KePanic(char const*)>
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014fd9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014fdd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014fe2:	83 f8 01             	cmp    eax,0x1
c0014fe5:	0f 85 9b 00 00 00    	jne    c0015086 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014feb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014fef:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014ff6:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014ffa:	01 d0                	add    eax,edx
c0014ffc:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015004:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015008:	0f 94 c0             	sete   al
c001500b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015013:	0f 94 c1             	sete   cl
c0015016:	09 c1                	or     ecx,eax
c0015018:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001501c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015021:	0f b6 c9             	movzx  ecx,cl
c0015024:	8b 00                	mov    eax,DWORD PTR [eax]
c0015026:	74 41                	je     c0015069 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015028:	8d 14 06             	lea    edx,[esi+eax*1]
c001502b:	85 c9                	test   ecx,ecx
c001502d:	75 15                	jne    c0015044 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001502f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015033:	66 83 f8 0c          	cmp    ax,0xc
c0015037:	76 05                	jbe    c001503e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015039:	b8 0c 00 00 00       	mov    eax,0xc
c001503e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015042:	76 37                	jbe    c001507b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015044:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015049:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001504d:	0f 84 e6 00 00 00    	je     c0015139 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015053:	83 ec 0c             	sub    esp,0xc
c0015056:	68 bc 23 02 c0       	push   0xc00223bc
c001505b:	e8 61 c2 ff ff       	call   c00112c1 <KePanic(char const*)>
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015067:	eb 12                	jmp    c001507b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015069:	01 c2                	add    edx,eax
c001506b:	85 c9                	test   ecx,ecx
c001506d:	75 0c                	jne    c001507b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001506f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015073:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015077:	77 02                	ja     c001507b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015079:	01 f2                	add    edx,esi
c001507b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001507f:	89 10                	mov    DWORD PTR [eax],edx
c0015081:	e9 ed 00 00 00       	jmp    c0015173 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015086:	83 f8 02             	cmp    eax,0x2
c0015089:	0f 85 81 00 00 00    	jne    c0015110 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001508f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015096:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c001509a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001509e:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00150a6:	74 21                	je     c00150c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00150a8:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00150b0:	74 17                	je     c00150c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00150b2:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00150b6:	ba 0a 00 00 00       	mov    edx,0xa
c00150bb:	83 f9 0e             	cmp    ecx,0xe
c00150be:	77 03                	ja     c00150c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00150c0:	8d 51 fc             	lea    edx,[ecx-0x4]
c00150c3:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00150c7:	76 1f                	jbe    c00150e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00150c9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00150ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150d2:	74 65                	je     c0015139 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00150d4:	83 ec 0c             	sub    esp,0xc
c00150d7:	68 d8 23 02 c0       	push   0xc00223d8
c00150dc:	e8 e0 c1 ff ff       	call   c00112c1 <KePanic(char const*)>
c00150e1:	83 c4 10             	add    esp,0x10
c00150e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150e8:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00150ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00150ef:	74 15                	je     c0015106 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00150f1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00150f5:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00150fc:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015100:	01 d1                	add    ecx,edx
c0015102:	01 ce                	add    esi,ecx
c0015104:	eb 06                	jmp    c001510c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015106:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001510a:	01 d6                	add    esi,edx
c001510c:	89 30                	mov    DWORD PTR [eax],esi
c001510e:	eb 63                	jmp    c0015173 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015110:	56                   	push   esi
c0015111:	56                   	push   esi
c0015112:	50                   	push   eax
c0015113:	68 f4 23 02 c0       	push   0xc00223f4
c0015118:	e8 ed 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001511d:	83 c4 10             	add    esp,0x10
c0015120:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015125:	74 12                	je     c0015139 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015127:	83 ec 0c             	sub    esp,0xc
c001512a:	68 ff 23 02 c0       	push   0xc00223ff
c001512f:	e8 8d c1 ff ff       	call   c00112c1 <KePanic(char const*)>
c0015134:	83 c4 10             	add    esp,0x10
c0015137:	eb 3a                	jmp    c0015173 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015139:	83 ec 0c             	sub    esp,0xc
c001513c:	53                   	push   ebx
c001513d:	e8 e0 67 ff ff       	call   c000b922 <File::close()>
c0015142:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015144:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015147:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001514a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001514d:	e8 91 29 ff ff       	call   c0007ae3 <free>
c0015152:	59                   	pop    ecx
c0015153:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015157:	e8 87 29 ff ff       	call   c0007ae3 <free>
c001515c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001515f:	e8 7f 29 ff ff       	call   c0007ae3 <free>
c0015164:	5b                   	pop    ebx
c0015165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015169:	e8 75 29 ff ff       	call   c0007ae3 <free>
c001516e:	83 c4 10             	add    esp,0x10
c0015171:	eb 1e                	jmp    c0015191 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015173:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015177:	e9 4d fd ff ff       	jmp    c0014ec9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001517c:	83 ec 0c             	sub    esp,0xc
c001517f:	57                   	push   edi
c0015180:	e8 5e 29 ff ff       	call   c0007ae3 <free>
c0015185:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015189:	83 c4 10             	add    esp,0x10
c001518c:	e9 cc fc ff ff       	jmp    c0014e5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015191:	31 c0                	xor    eax,eax
c0015193:	eb 32                	jmp    c00151c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015195:	83 ec 0c             	sub    esp,0xc
c0015198:	53                   	push   ebx
c0015199:	e8 84 67 ff ff       	call   c000b922 <File::close()>
c001519e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151a6:	58                   	pop    eax
c00151a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151ab:	e8 33 29 ff ff       	call   c0007ae3 <free>
c00151b0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00151b3:	e8 2b 29 ff ff       	call   c0007ae3 <free>
c00151b8:	5a                   	pop    edx
c00151b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00151bd:	e8 21 29 ff ff       	call   c0007ae3 <free>
c00151c2:	83 c4 10             	add    esp,0x10
c00151c5:	b0 01                	mov    al,0x1
c00151c7:	81 c4 5c 03 00 00    	add    esp,0x35c
c00151cd:	5b                   	pop    ebx
c00151ce:	5e                   	pop    esi
c00151cf:	5f                   	pop    edi
c00151d0:	5d                   	pop    ebp
c00151d1:	c3                   	ret    

c00151d2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00151d2:	56                   	push   esi
c00151d3:	31 d2                	xor    edx,edx
c00151d5:	53                   	push   ebx
c00151d6:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00151dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151e0:	39 d3                	cmp    ebx,edx
c00151e2:	7e 1b                	jle    c00151ff <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00151e4:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c00151eb:	39 c8                	cmp    eax,ecx
c00151ed:	77 0d                	ja     c00151fc <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00151ef:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c00151f6:	01 c6                	add    esi,eax
c00151f8:	39 ce                	cmp    esi,ecx
c00151fa:	77 05                	ja     c0015201 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00151fc:	42                   	inc    edx
c00151fd:	eb e1                	jmp    c00151e0 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00151ff:	31 c0                	xor    eax,eax
c0015201:	5b                   	pop    ebx
c0015202:	5e                   	pop    esi
c0015203:	c3                   	ret    

c0015204 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015204:	53                   	push   ebx
c0015205:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c001520b:	31 c0                	xor    eax,eax
c001520d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015211:	39 c3                	cmp    ebx,eax
c0015213:	7e 22                	jle    c0015237 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015215:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c001521c:	39 ca                	cmp    edx,ecx
c001521e:	77 14                	ja     c0015234 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015220:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c0015227:	39 ca                	cmp    edx,ecx
c0015229:	76 09                	jbe    c0015234 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001522b:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c0015232:	eb 05                	jmp    c0015239 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015234:	40                   	inc    eax
c0015235:	eb da                	jmp    c0015211 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015237:	31 c0                	xor    eax,eax
c0015239:	5b                   	pop    ebx
c001523a:	c3                   	ret    

c001523b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001523b:	53                   	push   ebx
c001523c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015240:	53                   	push   ebx
c0015241:	e8 8c ff ff ff       	call   c00151d2 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015246:	5a                   	pop    edx
c0015247:	31 d2                	xor    edx,edx
c0015249:	85 c0                	test   eax,eax
c001524b:	74 04                	je     c0015251 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001524d:	89 da                	mov    edx,ebx
c001524f:	29 c2                	sub    edx,eax
c0015251:	5b                   	pop    ebx
c0015252:	89 d0                	mov    eax,edx
c0015254:	c3                   	ret    

c0015255 <Thr::loadDLL(char const*, bool)>:
c0015255:	55                   	push   ebp
c0015256:	57                   	push   edi
c0015257:	56                   	push   esi
c0015258:	53                   	push   ebx
c0015259:	81 ec 34 01 00 00    	sub    esp,0x134
c001525f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015266:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001526d:	56                   	push   esi
c001526e:	68 17 24 02 c0       	push   0xc0022417
c0015273:	e8 92 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015278:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001527f:	e8 4f 28 ff ff       	call   c0007ad3 <malloc>
c0015284:	83 c4 0c             	add    esp,0xc
c0015287:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001528d:	56                   	push   esi
c001528e:	50                   	push   eax
c001528f:	89 c3                	mov    ebx,eax
c0015291:	e8 10 66 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0015296:	83 c4 10             	add    esp,0x10
c0015299:	85 db                	test   ebx,ebx
c001529b:	75 3c                	jne    c00152d9 <Thr::loadDLL(char const*, bool)+0x84>
c001529d:	89 e8                	mov    eax,ebp
c001529f:	84 c0                	test   al,al
c00152a1:	0f 84 e1 01 00 00    	je     c0015488 <Thr::loadDLL(char const*, bool)+0x233>
c00152a7:	50                   	push   eax
c00152a8:	50                   	push   eax
c00152a9:	68 28 24 02 c0       	push   0xc0022428
c00152ae:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00152b2:	57                   	push   edi
c00152b3:	e8 98 b3 fe ff       	call   c0000650 <strcpy>
c00152b8:	58                   	pop    eax
c00152b9:	5a                   	pop    edx
c00152ba:	56                   	push   esi
c00152bb:	57                   	push   edi
c00152bc:	e8 af b5 fe ff       	call   c0000870 <strcat>
c00152c1:	59                   	pop    ecx
c00152c2:	58                   	pop    eax
c00152c3:	68 3b 24 02 c0       	push   0xc002243b
c00152c8:	57                   	push   edi
c00152c9:	e8 a2 b5 fe ff       	call   c0000870 <strcat>
c00152ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00152d1:	e8 eb bf ff ff       	call   c00112c1 <KePanic(char const*)>
c00152d6:	83 c4 10             	add    esp,0x10
c00152d9:	50                   	push   eax
c00152da:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00152de:	50                   	push   eax
c00152df:	8d 44 24 20          	lea    eax,[esp+0x20]
c00152e3:	50                   	push   eax
c00152e4:	53                   	push   ebx
c00152e5:	e8 dc 68 ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c00152ea:	83 c4 10             	add    esp,0x10
c00152ed:	85 db                	test   ebx,ebx
c00152ef:	74 0c                	je     c00152fd <Thr::loadDLL(char const*, bool)+0xa8>
c00152f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152f3:	83 ec 0c             	sub    esp,0xc
c00152f6:	53                   	push   ebx
c00152f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152fa:	83 c4 10             	add    esp,0x10
c00152fd:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015302:	75 0a                	jne    c001530e <Thr::loadDLL(char const*, bool)+0xb9>
c0015304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015308:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001530c:	75 3e                	jne    c001534c <Thr::loadDLL(char const*, bool)+0xf7>
c001530e:	89 e8                	mov    eax,ebp
c0015310:	31 db                	xor    ebx,ebx
c0015312:	84 c0                	test   al,al
c0015314:	0f 84 6e 01 00 00    	je     c0015488 <Thr::loadDLL(char const*, bool)+0x233>
c001531a:	50                   	push   eax
c001531b:	50                   	push   eax
c001531c:	68 28 24 02 c0       	push   0xc0022428
c0015321:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015325:	53                   	push   ebx
c0015326:	e8 25 b3 fe ff       	call   c0000650 <strcpy>
c001532b:	58                   	pop    eax
c001532c:	5a                   	pop    edx
c001532d:	56                   	push   esi
c001532e:	53                   	push   ebx
c001532f:	e8 3c b5 fe ff       	call   c0000870 <strcat>
c0015334:	59                   	pop    ecx
c0015335:	5f                   	pop    edi
c0015336:	68 3b 24 02 c0       	push   0xc002243b
c001533b:	53                   	push   ebx
c001533c:	e8 2f b5 fe ff       	call   c0000870 <strcat>
c0015341:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015344:	e8 78 bf ff ff       	call   c00112c1 <KePanic(char const*)>
c0015349:	83 c4 10             	add    esp,0x10
c001534c:	53                   	push   ebx
c001534d:	6a 03                	push   0x3
c001534f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015353:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015357:	05 ff 0f 00 00       	add    eax,0xfff
c001535c:	83 d2 00             	adc    edx,0x0
c001535f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015363:	50                   	push   eax
c0015364:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001536a:	e8 97 4a ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001536f:	89 c3                	mov    ebx,eax
c0015371:	58                   	pop    eax
c0015372:	5a                   	pop    edx
c0015373:	53                   	push   ebx
c0015374:	68 12 0a 02 c0       	push   0xc0020a12
c0015379:	e8 8c 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001537e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015381:	e8 fa b1 fe ff       	call   c0000580 <strlen>
c0015386:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c001538c:	40                   	inc    eax
c001538d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015390:	e8 3e 27 ff ff       	call   c0007ad3 <malloc>
c0015395:	59                   	pop    ecx
c0015396:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c001539d:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00153a2:	5f                   	pop    edi
c00153a3:	56                   	push   esi
c00153a4:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00153ab:	e8 a0 b2 fe ff       	call   c0000650 <strcpy>
c00153b0:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00153b5:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c00153bc:	8d 50 01             	lea    edx,[eax+0x1]
c00153bf:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c00153c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00153c9:	83 c4 0c             	add    esp,0xc
c00153cc:	6a 01                	push   0x1
c00153ce:	53                   	push   ebx
c00153cf:	56                   	push   esi
c00153d0:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00153d7:	e8 b5 f6 ff ff       	call   c0014a91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	89 c7                	mov    edi,eax
c00153e1:	89 f8                	mov    eax,edi
c00153e3:	83 f0 01             	xor    eax,0x1
c00153e6:	84 c0                	test   al,al
c00153e8:	74 18                	je     c0015402 <Thr::loadDLL(char const*, bool)+0x1ad>
c00153ea:	89 e8                	mov    eax,ebp
c00153ec:	84 c0                	test   al,al
c00153ee:	74 12                	je     c0015402 <Thr::loadDLL(char const*, bool)+0x1ad>
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	68 3d 24 02 c0       	push   0xc002243d
c00153f8:	e8 c4 be ff ff       	call   c00112c1 <KePanic(char const*)>
c00153fd:	83 c4 10             	add    esp,0x10
c0015400:	eb 06                	jmp    c0015408 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015402:	89 f8                	mov    eax,edi
c0015404:	84 c0                	test   al,al
c0015406:	75 10                	jne    c0015418 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015408:	83 ec 0c             	sub    esp,0xc
c001540b:	68 5c 24 02 c0       	push   0xc002245c
c0015410:	e8 ac be ff ff       	call   c00112c1 <KePanic(char const*)>
c0015415:	83 c4 10             	add    esp,0x10
c0015418:	31 f6                	xor    esi,esi
c001541a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001541e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015422:	05 ff 0f 00 00       	add    eax,0xfff
c0015427:	83 d2 00             	adc    edx,0x0
c001542a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001542e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015432:	c1 ea 0c             	shr    edx,0xc
c0015435:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015439:	ba 00 00 00 00       	mov    edx,0x0
c001543e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015442:	89 d0                	mov    eax,edx
c0015444:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015448:	73 32                	jae    c001547c <Thr::loadDLL(char const*, bool)+0x227>
c001544a:	50                   	push   eax
c001544b:	50                   	push   eax
c001544c:	89 f0                	mov    eax,esi
c001544e:	c1 e0 0c             	shl    eax,0xc
c0015451:	01 d8                	add    eax,ebx
c0015453:	50                   	push   eax
c0015454:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001545a:	e8 8b 44 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c001545f:	83 c4 10             	add    esp,0x10
c0015462:	8b 00                	mov    eax,DWORD PTR [eax]
c0015464:	a8 60                	test   al,0x60
c0015466:	75 11                	jne    c0015479 <Thr::loadDLL(char const*, bool)+0x224>
c0015468:	83 ec 0c             	sub    esp,0xc
c001546b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015470:	50                   	push   eax
c0015471:	e8 03 29 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	46                   	inc    esi
c001547a:	eb 9e                	jmp    c001541a <Thr::loadDLL(char const*, bool)+0x1c5>
c001547c:	89 f8                	mov    eax,edi
c001547e:	84 c0                	test   al,al
c0015480:	b8 00 00 00 00       	mov    eax,0x0
c0015485:	0f 44 d8             	cmove  ebx,eax
c0015488:	81 c4 2c 01 00 00    	add    esp,0x12c
c001548e:	89 d8                	mov    eax,ebx
c0015490:	5b                   	pop    ebx
c0015491:	5e                   	pop    esi
c0015492:	5f                   	pop    edi
c0015493:	5d                   	pop    ebp
c0015494:	c3                   	ret    

c0015495 <Thr::executeDLL(unsigned long, void*)>:
c0015495:	56                   	push   esi
c0015496:	53                   	push   ebx
c0015497:	52                   	push   edx
c0015498:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001549c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00154a0:	85 db                	test   ebx,ebx
c00154a2:	75 10                	jne    c00154b4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00154a4:	83 ec 0c             	sub    esp,0xc
c00154a7:	68 78 24 02 c0       	push   0xc0022478
c00154ac:	e8 10 be ff ff       	call   c00112c1 <KePanic(char const*)>
c00154b1:	83 c4 10             	add    esp,0x10
c00154b4:	50                   	push   eax
c00154b5:	50                   	push   eax
c00154b6:	53                   	push   ebx
c00154b7:	68 a2 24 02 c0       	push   0xc00224a2
c00154bc:	e8 49 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00154c1:	89 d8                	mov    eax,ebx
c00154c3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00154c7:	83 c4 14             	add    esp,0x14
c00154ca:	5b                   	pop    ebx
c00154cb:	5e                   	pop    esi
c00154cc:	ff e0                	jmp    eax
c00154ce:	66 90                	xchg   ax,ax

c00154d0 <userModeEntryPoint(void*)>:
c00154d0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00154d5:	83 e8 01             	sub    eax,0x1
c00154d8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00154dd:	75 01                	jne    c00154e0 <userModeEntryPoint(void*)+0x10>
c00154df:	fb                   	sti    
c00154e0:	fb                   	sti    
c00154e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154e9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00154ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154f3:	e9 47 ad fe ff       	jmp    c000023f <goToUsermode>

c00154f8 <changeTSS>:
c00154f8:	83 ec 14             	sub    esp,0x14
c00154fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015500:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015503:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015508:	c1 e2 15             	shl    edx,0x15
c001550b:	29 d0                	sub    eax,edx
c001550d:	50                   	push   eax
c001550e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0015513:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015519:	05 7c 11 00 00       	add    eax,0x117c
c001551e:	50                   	push   eax
c001551f:	e8 18 3a ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015524:	83 c4 1c             	add    esp,0x1c
c0015527:	c3                   	ret    

c0015528 <switchToThread(ThreadControlBlock*)>:
c0015528:	57                   	push   edi
c0015529:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c001552f:	56                   	push   esi
c0015530:	53                   	push   ebx
c0015531:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015535:	85 c9                	test   ecx,ecx
c0015537:	0f 85 8b 00 00 00    	jne    c00155c8 <switchToThread(ThreadControlBlock*)+0xa0>
c001553d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015541:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015547:	74 7b                	je     c00155c4 <switchToThread(ThreadControlBlock*)+0x9c>
c0015549:	b8 00 04 00 00       	mov    eax,0x400
c001554e:	29 d0                	sub    eax,edx
c0015550:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015553:	d1 f8                	sar    eax,1
c0015555:	01 d0                	add    eax,edx
c0015557:	90                   	nop
c0015558:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001555b:	e8 04 28 00 00       	call   c0017d64 <HalQueryPerformanceCounter()>
c0015560:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015565:	89 c6                	mov    esi,eax
c0015567:	89 d7                	mov    edi,edx
c0015569:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c001556f:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015574:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c001557a:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015580:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c0015586:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001558c:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c0015592:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015598:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001559b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001559e:	01 c6                	add    esi,eax
c00155a0:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00155a3:	11 d7                	adc    edi,edx
c00155a5:	83 ec 0c             	sub    esp,0xc
c00155a8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00155ab:	53                   	push   ebx
c00155ac:	e8 c6 ac fe ff       	call   c0000277 <switchToThreadASM>
c00155b1:	0f 20 c0             	mov    eax,cr0
c00155b4:	83 c8 08             	or     eax,0x8
c00155b7:	0f 22 c0             	mov    cr0,eax
c00155ba:	83 c4 10             	add    esp,0x10
c00155bd:	5b                   	pop    ebx
c00155be:	5e                   	pop    esi
c00155bf:	5f                   	pop    edi
c00155c0:	c3                   	ret    
c00155c1:	8d 76 00             	lea    esi,[esi+0x0]
c00155c4:	31 c0                	xor    eax,eax
c00155c6:	eb 90                	jmp    c0015558 <switchToThread(ThreadControlBlock*)+0x30>
c00155c8:	5b                   	pop    ebx
c00155c9:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00155d3:	5e                   	pop    esi
c00155d4:	5f                   	pop    edi
c00155d5:	c3                   	ret    
c00155d6:	66 90                	xchg   ax,ax

c00155d8 <Process::addArgs(char**)>:
c00155d8:	57                   	push   edi
c00155d9:	56                   	push   esi
c00155da:	53                   	push   ebx
c00155db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00155df:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00155e3:	85 f6                	test   esi,esi
c00155e5:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00155ef:	74 4f                	je     c0015640 <Process::addArgs(char**)+0x68>
c00155f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00155f3:	85 c0                	test   eax,eax
c00155f5:	74 49                	je     c0015640 <Process::addArgs(char**)+0x68>
c00155f7:	31 db                	xor    ebx,ebx
c00155f9:	8d 76 00             	lea    esi,[esi+0x0]
c00155fc:	83 ec 0c             	sub    esp,0xc
c00155ff:	50                   	push   eax
c0015600:	e8 7b af fe ff       	call   c0000580 <strlen>
c0015605:	83 c0 01             	add    eax,0x1
c0015608:	89 04 24             	mov    DWORD PTR [esp],eax
c001560b:	e8 c3 24 ff ff       	call   c0007ad3 <malloc>
c0015610:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015617:	5a                   	pop    edx
c0015618:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001561b:	83 c3 01             	add    ebx,0x1
c001561e:	59                   	pop    ecx
c001561f:	52                   	push   edx
c0015620:	50                   	push   eax
c0015621:	e8 2a b0 fe ff       	call   c0000650 <strcpy>
c0015626:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c001562c:	83 c4 10             	add    esp,0x10
c001562f:	83 c1 01             	add    ecx,0x1
c0015632:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015638:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001563b:	85 c0                	test   eax,eax
c001563d:	75 bd                	jne    c00155fc <Process::addArgs(char**)+0x24>
c001563f:	90                   	nop
c0015640:	5b                   	pop    ebx
c0015641:	5e                   	pop    esi
c0015642:	5f                   	pop    edi
c0015643:	c3                   	ret    

c0015644 <Process::Process(char const*, Process*, char**)>:
c0015644:	56                   	push   esi
c0015645:	53                   	push   ebx
c0015646:	83 ec 14             	sub    esp,0x14
c0015649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001564d:	05 0c 02 00 00       	add    eax,0x20c
c0015652:	bb 07 00 00 00       	mov    ebx,0x7
c0015657:	89 c6                	mov    esi,eax
c0015659:	8d 76 00             	lea    esi,[esi+0x0]
c001565c:	85 db                	test   ebx,ebx
c001565e:	78 14                	js     c0015674 <Process::Process(char const*, Process*, char**)+0x30>
c0015660:	83 ec 0c             	sub    esp,0xc
c0015663:	56                   	push   esi
c0015664:	e8 2f a6 00 00       	call   c001fc98 <ThreadControlBlock::ThreadControlBlock()>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	83 c6 5f             	add    esi,0x5f
c001566f:	83 eb 01             	sub    ebx,0x1
c0015672:	eb e8                	jmp    c001565c <Process::Process(char const*, Process*, char**)+0x18>
c0015674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015678:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001567f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015683:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001568a:	83 ec 0c             	sub    esp,0xc
c001568d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015691:	e8 20 ba ff ff       	call   c00110b6 <KeNewProcessEnv(Process*)>
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	89 c2                	mov    edx,eax
c001569b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001569f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00156a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00156b2:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c00156b7:	8d 50 01             	lea    edx,[eax+0x1]
c00156ba:	89 15 c0 36 02 c0    	mov    DWORD PTR ds:0xc00236c0,edx
c00156c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00156c4:	89 02                	mov    DWORD PTR [edx],eax
c00156c6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00156ce:	83 ec 0c             	sub    esp,0xc
c00156d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00156d5:	e8 f9 23 ff ff       	call   c0007ad3 <malloc>
c00156da:	83 c4 10             	add    esp,0x10
c00156dd:	89 c3                	mov    ebx,eax
c00156df:	83 ec 08             	sub    esp,0x8
c00156e2:	6a 00                	push   0x0
c00156e4:	53                   	push   ebx
c00156e5:	e8 68 49 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00156ea:	83 c4 10             	add    esp,0x10
c00156ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00156f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156fb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015705:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015709:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001570d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015713:	e8 c2 bf ff ff       	call   c00116da <KeInitSignals()>
c0015718:	89 c2                	mov    edx,eax
c001571a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001571e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015728:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001572e:	85 c0                	test   eax,eax
c0015730:	74 42                	je     c0015774 <Process::Process(char const*, Process*, char**)+0x130>
c0015732:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015736:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001573c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015746:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001574c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015750:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015756:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001575c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015760:	05 0c 01 00 00       	add    eax,0x10c
c0015765:	83 ec 08             	sub    esp,0x8
c0015768:	52                   	push   edx
c0015769:	50                   	push   eax
c001576a:	e8 e1 ae fe ff       	call   c0000650 <strcpy>
c001576f:	83 c4 10             	add    esp,0x10
c0015772:	eb 64                	jmp    c00157d8 <Process::Process(char const*, Process*, char**)+0x194>
c0015774:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001577c:	83 ec 0c             	sub    esp,0xc
c001577f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015783:	e8 4b 23 ff ff       	call   c0007ad3 <malloc>
c0015788:	83 c4 10             	add    esp,0x10
c001578b:	89 c3                	mov    ebx,eax
c001578d:	83 ec 08             	sub    esp,0x8
c0015790:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015794:	53                   	push   ebx
c0015795:	e8 d2 34 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157a1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00157a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157b1:	83 ec 0c             	sub    esp,0xc
c00157b4:	50                   	push   eax
c00157b5:	e8 60 2d ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157c1:	05 0c 01 00 00       	add    eax,0x10c
c00157c6:	83 ec 08             	sub    esp,0x8
c00157c9:	68 c1 24 02 c0       	push   0xc00224c1
c00157ce:	50                   	push   eax
c00157cf:	e8 7c ae fe ff       	call   c0000650 <strcpy>
c00157d4:	83 c4 10             	add    esp,0x10
c00157d7:	90                   	nop
c00157d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157dc:	83 c0 0c             	add    eax,0xc
c00157df:	83 ec 08             	sub    esp,0x8
c00157e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157e6:	50                   	push   eax
c00157e7:	e8 64 ae fe ff       	call   c0000650 <strcpy>
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	83 ec 08             	sub    esp,0x8
c00157f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00157f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157fa:	e8 d9 fd ff ff       	call   c00155d8 <Process::addArgs(char**)>
c00157ff:	83 c4 10             	add    esp,0x10
c0015802:	83 ec 08             	sub    esp,0x8
c0015805:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015809:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001580d:	e8 40 ed ff ff       	call   c0014552 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015812:	83 c4 10             	add    esp,0x10
c0015815:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015819:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001581d:	83 f0 01             	xor    eax,0x1
c0015820:	88 c2                	mov    dl,al
c0015822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015826:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001582c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015831:	83 ec 04             	sub    esp,0x4
c0015834:	50                   	push   eax
c0015835:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015839:	68 18 25 02 c0       	push   0xc0022518
c001583e:	e8 c7 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015843:	83 c4 10             	add    esp,0x10
c0015846:	90                   	nop
c0015847:	83 c4 14             	add    esp,0x14
c001584a:	5b                   	pop    ebx
c001584b:	5e                   	pop    esi
c001584c:	c3                   	ret    
c001584d:	90                   	nop
c001584e:	66 90                	xchg   ax,ax

c0015850 <Process::Process(bool, char const*, Process*, char**)>:
c0015850:	56                   	push   esi
c0015851:	53                   	push   ebx
c0015852:	83 ec 24             	sub    esp,0x24
c0015855:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015859:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001585d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015861:	05 0c 02 00 00       	add    eax,0x20c
c0015866:	bb 07 00 00 00       	mov    ebx,0x7
c001586b:	89 c6                	mov    esi,eax
c001586d:	8d 76 00             	lea    esi,[esi+0x0]
c0015870:	85 db                	test   ebx,ebx
c0015872:	78 14                	js     c0015888 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	56                   	push   esi
c0015878:	e8 1b a4 00 00       	call   c001fc98 <ThreadControlBlock::ThreadControlBlock()>
c001587d:	83 c4 10             	add    esp,0x10
c0015880:	83 c6 5f             	add    esi,0x5f
c0015883:	83 eb 01             	sub    ebx,0x1
c0015886:	eb e8                	jmp    c0015870 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015888:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001588c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015893:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015897:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001589e:	83 ec 0c             	sub    esp,0xc
c00158a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00158a5:	e8 0c b8 ff ff       	call   c00110b6 <KeNewProcessEnv(Process*)>
c00158aa:	83 c4 10             	add    esp,0x10
c00158ad:	89 c2                	mov    edx,eax
c00158af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158b3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00158b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158bd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00158c6:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c00158cb:	8d 50 01             	lea    edx,[eax+0x1]
c00158ce:	89 15 c0 36 02 c0    	mov    DWORD PTR ds:0xc00236c0,edx
c00158d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00158d8:	89 02                	mov    DWORD PTR [edx],eax
c00158da:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00158e2:	83 ec 0c             	sub    esp,0xc
c00158e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00158e9:	e8 e5 21 ff ff       	call   c0007ad3 <malloc>
c00158ee:	83 c4 10             	add    esp,0x10
c00158f1:	89 c3                	mov    ebx,eax
c00158f3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00158f8:	83 ec 08             	sub    esp,0x8
c00158fb:	50                   	push   eax
c00158fc:	53                   	push   ebx
c00158fd:	e8 50 47 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015902:	83 c4 10             	add    esp,0x10
c0015905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015909:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001590f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015913:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001591d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015921:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015925:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001592b:	e8 aa bd ff ff       	call   c00116da <KeInitSignals()>
c0015930:	89 c2                	mov    edx,eax
c0015932:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015936:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001593c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015940:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015946:	85 c0                	test   eax,eax
c0015948:	74 42                	je     c001598c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001594a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001594e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015954:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001595a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001595e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015964:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015968:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001596e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015974:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015978:	05 0c 01 00 00       	add    eax,0x10c
c001597d:	83 ec 08             	sub    esp,0x8
c0015980:	52                   	push   edx
c0015981:	50                   	push   eax
c0015982:	e8 c9 ac fe ff       	call   c0000650 <strcpy>
c0015987:	83 c4 10             	add    esp,0x10
c001598a:	eb 64                	jmp    c00159f0 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c001598c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015994:	83 ec 0c             	sub    esp,0xc
c0015997:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001599b:	e8 33 21 ff ff       	call   c0007ad3 <malloc>
c00159a0:	83 c4 10             	add    esp,0x10
c00159a3:	89 c3                	mov    ebx,eax
c00159a5:	83 ec 08             	sub    esp,0x8
c00159a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00159ac:	53                   	push   ebx
c00159ad:	e8 ba 32 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00159b2:	83 c4 10             	add    esp,0x10
c00159b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159b9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00159bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00159c9:	83 ec 0c             	sub    esp,0xc
c00159cc:	50                   	push   eax
c00159cd:	e8 48 2b ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00159d2:	83 c4 10             	add    esp,0x10
c00159d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159d9:	05 0c 01 00 00       	add    eax,0x10c
c00159de:	83 ec 08             	sub    esp,0x8
c00159e1:	68 c1 24 02 c0       	push   0xc00224c1
c00159e6:	50                   	push   eax
c00159e7:	e8 64 ac fe ff       	call   c0000650 <strcpy>
c00159ec:	83 c4 10             	add    esp,0x10
c00159ef:	90                   	nop
c00159f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159f4:	83 c0 0c             	add    eax,0xc
c00159f7:	83 ec 08             	sub    esp,0x8
c00159fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00159fe:	50                   	push   eax
c00159ff:	e8 4c ac fe ff       	call   c0000650 <strcpy>
c0015a04:	83 c4 10             	add    esp,0x10
c0015a07:	83 ec 08             	sub    esp,0x8
c0015a0a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015a0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015a12:	e8 c1 fb ff ff       	call   c00155d8 <Process::addArgs(char**)>
c0015a17:	83 c4 10             	add    esp,0x10
c0015a1a:	90                   	nop
c0015a1b:	83 c4 24             	add    esp,0x24
c0015a1e:	5b                   	pop    ebx
c0015a1f:	5e                   	pop    esi
c0015a20:	c3                   	ret    
c0015a21:	8d 76 00             	lea    esi,[esi+0x0]

c0015a24 <taskStartupFunction>:
c0015a24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a29:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015a2c:	c3                   	ret    
c0015a2d:	90                   	nop
c0015a2e:	66 90                	xchg   ax,ax

c0015a30 <Semaphore::Semaphore(int)>:
c0015a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015a38:	89 10                	mov    DWORD PTR [eax],edx
c0015a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a3e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015a45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a54:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015a5b:	90                   	nop
c0015a5c:	c3                   	ret    
c0015a5d:	90                   	nop
c0015a5e:	66 90                	xchg   ax,ax

c0015a60 <Mutex::Mutex()>:
c0015a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a64:	6a 01                	push   0x1
c0015a66:	50                   	push   eax
c0015a67:	e8 c4 ff ff ff       	call   c0015a30 <Semaphore::Semaphore(int)>
c0015a6c:	83 c4 08             	add    esp,0x8
c0015a6f:	90                   	nop
c0015a70:	c3                   	ret    
c0015a71:	90                   	nop
c0015a72:	66 90                	xchg   ax,ax

c0015a74 <Process::createThread(void (*)(void*), void*, int)>:
c0015a74:	57                   	push   edi
c0015a75:	31 c9                	xor    ecx,ecx
c0015a77:	56                   	push   esi
c0015a78:	53                   	push   ebx
c0015a79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a7d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015a84:	89 f2                	mov    edx,esi
c0015a86:	66 90                	xchg   ax,ax
c0015a88:	0f b7 c2             	movzx  eax,dx
c0015a8b:	80 e2 01             	and    dl,0x1
c0015a8e:	74 14                	je     c0015aa4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015a90:	d1 f8                	sar    eax,1
c0015a92:	83 c1 01             	add    ecx,0x1
c0015a95:	83 f9 10             	cmp    ecx,0x10
c0015a98:	89 c2                	mov    edx,eax
c0015a9a:	75 ec                	jne    c0015a88 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015a9c:	31 db                	xor    ebx,ebx
c0015a9e:	89 d8                	mov    eax,ebx
c0015aa0:	5b                   	pop    ebx
c0015aa1:	5e                   	pop    esi
c0015aa2:	5f                   	pop    edi
c0015aa3:	c3                   	ret    
c0015aa4:	b8 01 00 00 00       	mov    eax,0x1
c0015aa9:	d3 e0                	shl    eax,cl
c0015aab:	09 c6                	or     esi,eax
c0015aad:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015ab4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015ab7:	c1 e0 05             	shl    eax,0x5
c0015aba:	29 c8                	sub    eax,ecx
c0015abc:	01 d8                	add    eax,ebx
c0015abe:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015ac5:	75 0d                	jne    c0015ad4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015ac7:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ada:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015add:	83 ec 0c             	sub    esp,0xc
c0015ae0:	c1 e6 05             	shl    esi,0x5
c0015ae3:	29 ce                	sub    esi,ecx
c0015ae5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015ae8:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015aeb:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015af1:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015af7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015afd:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015b04:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015b0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b0e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015b14:	89 ca                	mov    edx,ecx
c0015b16:	f7 da                	neg    edx
c0015b18:	c1 e2 15             	shl    edx,0x15
c0015b1b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015b21:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015b27:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015b2b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015b35:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015b3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b3f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015b45:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015b4f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015b59:	68 00 01 00 00       	push   0x100
c0015b5e:	e8 70 1f ff ff       	call   c0007ad3 <malloc>
c0015b63:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015b66:	58                   	pop    eax
c0015b67:	5a                   	pop    edx
c0015b68:	53                   	push   ebx
c0015b69:	68 e4 96 02 c0       	push   0xc00296e4
c0015b6e:	e8 bd 9e 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b73:	83 c4 10             	add    esp,0x10
c0015b76:	89 d8                	mov    eax,ebx
c0015b78:	5b                   	pop    ebx
c0015b79:	5e                   	pop    esi
c0015b7a:	5f                   	pop    edi
c0015b7b:	c3                   	ret    

c0015b7c <Process::createUserThread()>:
c0015b7c:	83 ec 0c             	sub    esp,0xc
c0015b7f:	68 80 00 00 00       	push   0x80
c0015b84:	6a 00                	push   0x0
c0015b86:	68 d0 54 01 c0       	push   0xc00154d0
c0015b8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b8f:	50                   	push   eax
c0015b90:	e8 df fe ff ff       	call   c0015a74 <Process::createThread(void (*)(void*), void*, int)>
c0015b95:	83 c4 1c             	add    esp,0x1c
c0015b98:	c3                   	ret    
c0015b99:	8d 76 00             	lea    esi,[esi+0x0]

c0015b9c <setupMultitasking(void (*)())>:
c0015b9c:	56                   	push   esi
c0015b9d:	53                   	push   ebx
c0015b9e:	83 ec 04             	sub    esp,0x4
c0015ba1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ba5:	eb 11                	jmp    c0015bb8 <setupMultitasking(void (*)())+0x1c>
c0015ba7:	90                   	nop
c0015ba8:	83 ec 0c             	sub    esp,0xc
c0015bab:	68 e4 96 02 c0       	push   0xc00296e4
c0015bb0:	e8 bf 9d 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015bb5:	83 c4 10             	add    esp,0x10
c0015bb8:	83 ec 0c             	sub    esp,0xc
c0015bbb:	68 e4 96 02 c0       	push   0xc00296e4
c0015bc0:	e8 8b 9d 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015bc5:	83 c4 10             	add    esp,0x10
c0015bc8:	84 c0                	test   al,al
c0015bca:	74 dc                	je     c0015ba8 <setupMultitasking(void (*)())+0xc>
c0015bcc:	83 ec 0c             	sub    esp,0xc
c0015bcf:	68 24 07 00 00       	push   0x724
c0015bd4:	e8 fa 1e ff ff       	call   c0007ad3 <malloc>
c0015bd9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015be0:	6a 00                	push   0x0
c0015be2:	68 c5 24 02 c0       	push   0xc00224c5
c0015be7:	6a 01                	push   0x1
c0015be9:	50                   	push   eax
c0015bea:	89 c3                	mov    ebx,eax
c0015bec:	e8 5f fc ff ff       	call   c0015850 <Process::Process(bool, char const*, Process*, char**)>
c0015bf1:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015bf7:	83 c4 14             	add    esp,0x14
c0015bfa:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015c00:	50                   	push   eax
c0015c01:	e8 69 2b ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015c06:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015c0d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015c17:	83 c8 01             	or     eax,0x1
c0015c1a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015c21:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015c27:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015c2a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015c34:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015c3a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015c44:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015c4a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015c54:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015c5e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015c64:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015c6a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015c74:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015c7e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015c85:	e8 49 1e ff ff       	call   c0007ad3 <malloc>
c0015c8a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015c90:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015c96:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015c9c:	5a                   	pop    edx
c0015c9d:	59                   	pop    ecx
c0015c9e:	68 c1 24 02 c0       	push   0xc00224c1
c0015ca3:	50                   	push   eax
c0015ca4:	e8 a7 a9 fe ff       	call   c0000650 <strcpy>
c0015ca9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015cb0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015cb4:	83 c4 14             	add    esp,0x14
c0015cb7:	5b                   	pop    ebx
c0015cb8:	5e                   	pop    esi
c0015cb9:	e9 ab a5 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015cbe:	66 90                	xchg   ax,ax

c0015cc0 <schedule()>:
c0015cc0:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015cc6:	85 d2                	test   edx,edx
c0015cc8:	74 0e                	je     c0015cd8 <schedule()+0x18>
c0015cca:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015cd4:	c3                   	ret    
c0015cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0015cd8:	53                   	push   ebx
c0015cd9:	83 ec 14             	sub    esp,0x14
c0015cdc:	68 e4 96 02 c0       	push   0xc00296e4
c0015ce1:	e8 6a 9c 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	84 c0                	test   al,al
c0015ceb:	75 3f                	jne    c0015d2c <schedule()+0x6c>
c0015ced:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cf2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015cf5:	83 fa 01             	cmp    edx,0x1
c0015cf8:	74 3a                	je     c0015d34 <schedule()+0x74>
c0015cfa:	66 90                	xchg   ax,ax
c0015cfc:	83 ec 0c             	sub    esp,0xc
c0015cff:	68 e4 96 02 c0       	push   0xc00296e4
c0015d04:	e8 63 9c 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d09:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015d10:	89 c3                	mov    ebx,eax
c0015d12:	e8 5d 9c 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d17:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015d1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d21:	e8 02 f8 ff ff       	call   c0015528 <switchToThread(ThreadControlBlock*)>
c0015d26:	83 c4 10             	add    esp,0x10
c0015d29:	8d 76 00             	lea    esi,[esi+0x0]
c0015d2c:	83 c4 08             	add    esp,0x8
c0015d2f:	5b                   	pop    ebx
c0015d30:	c3                   	ret    
c0015d31:	8d 76 00             	lea    esi,[esi+0x0]
c0015d34:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015d3b:	83 ec 08             	sub    esp,0x8
c0015d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d43:	50                   	push   eax
c0015d44:	68 e4 96 02 c0       	push   0xc00296e4
c0015d49:	e8 e2 9c 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d4e:	83 c4 10             	add    esp,0x10
c0015d51:	eb a9                	jmp    c0015cfc <schedule()+0x3c>
c0015d53:	90                   	nop

c0015d54 <Semaphore::tryAcquire()>:
c0015d54:	53                   	push   ebx
c0015d55:	83 ec 08             	sub    esp,0x8
c0015d58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d5c:	fa                   	cli    
c0015d5d:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015d63:	8d 42 01             	lea    eax,[edx+0x1]
c0015d66:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d6b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d70:	8d 58 01             	lea    ebx,[eax+0x1]
c0015d73:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015d79:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015d7c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015d7e:	7c 2c                	jl     c0015dac <Semaphore::tryAcquire()+0x58>
c0015d80:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d85:	85 c0                	test   eax,eax
c0015d87:	75 0b                	jne    c0015d94 <Semaphore::tryAcquire()+0x40>
c0015d89:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015d8e:	85 c0                	test   eax,eax
c0015d90:	75 5a                	jne    c0015dec <Semaphore::tryAcquire()+0x98>
c0015d92:	66 90                	xchg   ax,ax
c0015d94:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d9a:	31 c0                	xor    eax,eax
c0015d9c:	85 d2                	test   edx,edx
c0015d9e:	75 04                	jne    c0015da4 <Semaphore::tryAcquire()+0x50>
c0015da0:	fb                   	sti    
c0015da1:	8d 76 00             	lea    esi,[esi+0x0]
c0015da4:	83 c4 08             	add    esp,0x8
c0015da7:	5b                   	pop    ebx
c0015da8:	c3                   	ret    
c0015da9:	8d 76 00             	lea    esi,[esi+0x0]
c0015dac:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015db1:	83 c3 01             	add    ebx,0x1
c0015db4:	85 c0                	test   eax,eax
c0015db6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015db9:	75 21                	jne    c0015ddc <Semaphore::tryAcquire()+0x88>
c0015dbb:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015dc1:	85 c9                	test   ecx,ecx
c0015dc3:	74 17                	je     c0015ddc <Semaphore::tryAcquire()+0x88>
c0015dc5:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015dcf:	e8 ec fe ff ff       	call   c0015cc0 <schedule()>
c0015dd4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dd9:	8d 50 ff             	lea    edx,[eax-0x1]
c0015ddc:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015de2:	85 d2                	test   edx,edx
c0015de4:	b0 01                	mov    al,0x1
c0015de6:	75 bc                	jne    c0015da4 <Semaphore::tryAcquire()+0x50>
c0015de8:	eb b6                	jmp    c0015da0 <Semaphore::tryAcquire()+0x4c>
c0015dea:	66 90                	xchg   ax,ax
c0015dec:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015df6:	e8 c5 fe ff ff       	call   c0015cc0 <schedule()>
c0015dfb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e00:	8d 50 ff             	lea    edx,[eax-0x1]
c0015e03:	31 c0                	xor    eax,eax
c0015e05:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015e0b:	85 d2                	test   edx,edx
c0015e0d:	75 95                	jne    c0015da4 <Semaphore::tryAcquire()+0x50>
c0015e0f:	eb 8f                	jmp    c0015da0 <Semaphore::tryAcquire()+0x4c>
c0015e11:	90                   	nop
c0015e12:	66 90                	xchg   ax,ax

c0015e14 <Semaphore::assertLocked(char const*)>:
c0015e14:	83 ec 0c             	sub    esp,0xc
c0015e17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e1b:	fa                   	cli    
c0015e1c:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015e22:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e27:	83 c1 01             	add    ecx,0x1
c0015e2a:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015e30:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e33:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e39:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015e3b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015e3e:	7c 28                	jl     c0015e68 <Semaphore::assertLocked(char const*)+0x54>
c0015e40:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e45:	85 c0                	test   eax,eax
c0015e47:	75 0b                	jne    c0015e54 <Semaphore::assertLocked(char const*)+0x40>
c0015e49:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e4e:	85 c0                	test   eax,eax
c0015e50:	75 32                	jne    c0015e84 <Semaphore::assertLocked(char const*)+0x70>
c0015e52:	66 90                	xchg   ax,ax
c0015e54:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e59:	83 e8 01             	sub    eax,0x1
c0015e5c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e61:	75 01                	jne    c0015e64 <Semaphore::assertLocked(char const*)+0x50>
c0015e63:	fb                   	sti    
c0015e64:	83 c4 0c             	add    esp,0xc
c0015e67:	c3                   	ret    
c0015e68:	83 ec 0c             	sub    esp,0xc
c0015e6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e6f:	52                   	push   edx
c0015e70:	e8 4c b4 ff ff       	call   c00112c1 <KePanic(char const*)>
c0015e75:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e7a:	83 c4 10             	add    esp,0x10
c0015e7d:	83 e8 01             	sub    eax,0x1
c0015e80:	eb be                	jmp    c0015e40 <Semaphore::assertLocked(char const*)+0x2c>
c0015e82:	66 90                	xchg   ax,ax
c0015e84:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e8e:	e8 2d fe ff ff       	call   c0015cc0 <schedule()>
c0015e93:	eb bf                	jmp    c0015e54 <Semaphore::assertLocked(char const*)+0x40>
c0015e95:	8d 76 00             	lea    esi,[esi+0x0]

c0015e98 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015e98:	83 ec 0c             	sub    esp,0xc
c0015e9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ea4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015ea7:	e8 14 fe ff ff       	call   c0015cc0 <schedule()>
c0015eac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015eb1:	83 e8 01             	sub    eax,0x1
c0015eb4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015eb9:	75 01                	jne    c0015ebc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015ebb:	fb                   	sti    
c0015ebc:	83 c4 0c             	add    esp,0xc
c0015ebf:	c3                   	ret    

c0015ec0 <blockTask(TaskState)>:
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	fa                   	cli    
c0015ec4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ecd:	83 c0 01             	add    eax,0x1
c0015ed0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ed5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015edd:	e8 de fd ff ff       	call   c0015cc0 <schedule()>
c0015ee2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ee7:	83 e8 01             	sub    eax,0x1
c0015eea:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015eef:	75 03                	jne    c0015ef4 <blockTask(TaskState)+0x34>
c0015ef1:	fb                   	sti    
c0015ef2:	66 90                	xchg   ax,ax
c0015ef4:	83 c4 0c             	add    esp,0xc
c0015ef7:	c3                   	ret    

c0015ef8 <waitTask(int, int*, int)>:
c0015ef8:	83 ec 18             	sub    esp,0x18
c0015efb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f04:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015f07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f10:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015f13:	6a 07                	push   0x7
c0015f15:	e8 a6 ff ff ff       	call   c0015ec0 <blockTask(TaskState)>
c0015f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f1f:	83 c4 10             	add    esp,0x10
c0015f22:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015f25:	85 d2                	test   edx,edx
c0015f27:	74 0b                	je     c0015f34 <waitTask(int, int*, int)+0x3c>
c0015f29:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015f2c:	89 02                	mov    DWORD PTR [edx],eax
c0015f2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f33:	90                   	nop
c0015f34:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015f37:	83 c4 0c             	add    esp,0xc
c0015f3a:	c3                   	ret    
c0015f3b:	90                   	nop

c0015f3c <milliTenthSleepUntil(unsigned int)>:
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f43:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015f49:	76 05                	jbe    c0015f50 <milliTenthSleepUntil(unsigned int)+0x14>
c0015f4b:	90                   	nop
c0015f4c:	83 c4 0c             	add    esp,0xc
c0015f4f:	c3                   	ret    
c0015f50:	fa                   	cli    
c0015f51:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015f57:	83 ec 08             	sub    esp,0x8
c0015f5a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015f60:	83 c2 01             	add    edx,0x1
c0015f63:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015f69:	83 c1 01             	add    ecx,0x1
c0015f6c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f72:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f78:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015f7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f80:	50                   	push   eax
c0015f81:	68 d8 96 02 c0       	push   0xc00296d8
c0015f86:	e8 a5 9a 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f8b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015f92:	e8 29 ff ff ff       	call   c0015ec0 <blockTask(TaskState)>
c0015f97:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f9c:	83 c4 10             	add    esp,0x10
c0015f9f:	83 e8 01             	sub    eax,0x1
c0015fa2:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015fa7:	85 c0                	test   eax,eax
c0015fa9:	75 09                	jne    c0015fb4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015fab:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015fb0:	85 c0                	test   eax,eax
c0015fb2:	75 14                	jne    c0015fc8 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015fb4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fb9:	83 e8 01             	sub    eax,0x1
c0015fbc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fc1:	75 89                	jne    c0015f4c <milliTenthSleepUntil(unsigned int)+0x10>
c0015fc3:	fb                   	sti    
c0015fc4:	83 c4 0c             	add    esp,0xc
c0015fc7:	c3                   	ret    
c0015fc8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015fd2:	e8 e9 fc ff ff       	call   c0015cc0 <schedule()>
c0015fd7:	eb db                	jmp    c0015fb4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015fd9:	8d 76 00             	lea    esi,[esi+0x0]

c0015fdc <milliTenthSleep(unsigned int)>:
c0015fdc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015fe0:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015fe5:	01 c2                	add    edx,eax
c0015fe7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015feb:	e9 4c ff ff ff       	jmp    c0015f3c <milliTenthSleepUntil(unsigned int)>

c0015ff0 <sleep(unsigned int)>:
c0015ff0:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015ff8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ffc:	eb de                	jmp    c0015fdc <milliTenthSleep(unsigned int)>
c0015ffe:	66 90                	xchg   ax,ax

c0016000 <Semaphore::acquire()>:
c0016000:	83 ec 0c             	sub    esp,0xc
c0016003:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016007:	fa                   	cli    
c0016008:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001600d:	83 c0 01             	add    eax,0x1
c0016010:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016015:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001601a:	8d 48 01             	lea    ecx,[eax+0x1]
c001601d:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016023:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016026:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016028:	7d 2e                	jge    c0016058 <Semaphore::acquire()+0x58>
c001602a:	83 c1 01             	add    ecx,0x1
c001602d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016030:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016035:	85 c0                	test   eax,eax
c0016037:	75 0b                	jne    c0016044 <Semaphore::acquire()+0x44>
c0016039:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001603e:	85 c0                	test   eax,eax
c0016040:	75 66                	jne    c00160a8 <Semaphore::acquire()+0xa8>
c0016042:	66 90                	xchg   ax,ax
c0016044:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016049:	83 e8 01             	sub    eax,0x1
c001604c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016051:	75 01                	jne    c0016054 <Semaphore::acquire()+0x54>
c0016053:	fb                   	sti    
c0016054:	83 c4 0c             	add    esp,0xc
c0016057:	c3                   	ret    
c0016058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001605d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016064:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016067:	85 c9                	test   ecx,ecx
c0016069:	74 51                	je     c00160bc <Semaphore::acquire()+0xbc>
c001606b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001606e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016074:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016077:	90                   	nop
c0016078:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001607d:	83 ec 0c             	sub    esp,0xc
c0016080:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016083:	68 44 25 02 c0       	push   0xc0022544
c0016088:	e8 7d 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001608d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016094:	e8 27 fe ff ff       	call   c0015ec0 <blockTask(TaskState)>
c0016099:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	83 e8 01             	sub    eax,0x1
c00160a4:	eb 8a                	jmp    c0016030 <Semaphore::acquire()+0x30>
c00160a6:	66 90                	xchg   ax,ax
c00160a8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00160b2:	e8 09 fc ff ff       	call   c0015cc0 <schedule()>
c00160b7:	eb 8b                	jmp    c0016044 <Semaphore::acquire()+0x44>
c00160b9:	8d 76 00             	lea    esi,[esi+0x0]
c00160bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00160c4:	eb b2                	jmp    c0016078 <Semaphore::acquire()+0x78>
c00160c6:	66 90                	xchg   ax,ax

c00160c8 <taskReturned>:
c00160c8:	83 ec 18             	sub    esp,0x18
c00160cb:	68 64 25 02 c0       	push   0xc0022564
c00160d0:	e8 ec b1 ff ff       	call   c00112c1 <KePanic(char const*)>
c00160d5:	83 c4 10             	add    esp,0x10
c00160d8:	83 ec 0c             	sub    esp,0xc
c00160db:	6a 02                	push   0x2
c00160dd:	e8 de fd ff ff       	call   c0015ec0 <blockTask(TaskState)>
c00160e2:	fa                   	cli    
c00160e3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160e8:	83 c0 01             	add    eax,0x1
c00160eb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160f0:	e8 cb fb ff ff       	call   c0015cc0 <schedule()>
c00160f5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160fa:	83 c4 10             	add    esp,0x10
c00160fd:	83 e8 01             	sub    eax,0x1
c0016100:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016105:	85 c0                	test   eax,eax
c0016107:	75 cf                	jne    c00160d8 <taskReturned+0x10>
c0016109:	fb                   	sti    
c001610a:	eb cc                	jmp    c00160d8 <taskReturned+0x10>

c001610c <Thr::processFromPID(int)>:
c001610c:	57                   	push   edi
c001610d:	56                   	push   esi
c001610e:	53                   	push   ebx
c001610f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016113:	fa                   	cli    
c0016114:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c001611a:	83 ec 0c             	sub    esp,0xc
c001611d:	68 e4 96 02 c0       	push   0xc00296e4
c0016122:	83 c1 01             	add    ecx,0x1
c0016125:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c001612b:	e8 3c 98 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016130:	83 c4 10             	add    esp,0x10
c0016133:	89 c7                	mov    edi,eax
c0016135:	eb 15                	jmp    c001614c <Thr::processFromPID(int)+0x40>
c0016137:	90                   	nop
c0016138:	83 ec 0c             	sub    esp,0xc
c001613b:	68 e4 96 02 c0       	push   0xc00296e4
c0016140:	e8 27 98 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016145:	83 c4 10             	add    esp,0x10
c0016148:	39 f8                	cmp    eax,edi
c001614a:	74 50                	je     c001619c <Thr::processFromPID(int)+0x90>
c001614c:	83 ec 0c             	sub    esp,0xc
c001614f:	68 e4 96 02 c0       	push   0xc00296e4
c0016154:	e8 13 98 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016159:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016160:	89 c3                	mov    ebx,eax
c0016162:	e8 0d 98 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016167:	58                   	pop    eax
c0016168:	5a                   	pop    edx
c0016169:	53                   	push   ebx
c001616a:	68 e4 96 02 c0       	push   0xc00296e4
c001616f:	e8 bc 98 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016174:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016177:	83 c4 10             	add    esp,0x10
c001617a:	39 30                	cmp    DWORD PTR [eax],esi
c001617c:	75 ba                	jne    c0016138 <Thr::processFromPID(int)+0x2c>
c001617e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016183:	83 e8 01             	sub    eax,0x1
c0016186:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001618b:	74 0b                	je     c0016198 <Thr::processFromPID(int)+0x8c>
c001618d:	8d 76 00             	lea    esi,[esi+0x0]
c0016190:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016193:	90                   	nop
c0016194:	5b                   	pop    ebx
c0016195:	5e                   	pop    esi
c0016196:	5f                   	pop    edi
c0016197:	c3                   	ret    
c0016198:	fb                   	sti    
c0016199:	eb f5                	jmp    c0016190 <Thr::processFromPID(int)+0x84>
c001619b:	90                   	nop
c001619c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00161a1:	8d 50 ff             	lea    edx,[eax-0x1]
c00161a4:	31 c0                	xor    eax,eax
c00161a6:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00161ac:	85 d2                	test   edx,edx
c00161ae:	75 e4                	jne    c0016194 <Thr::processFromPID(int)+0x88>
c00161b0:	fb                   	sti    
c00161b1:	5b                   	pop    ebx
c00161b2:	5e                   	pop    esi
c00161b3:	5f                   	pop    edi
c00161b4:	c3                   	ret    
c00161b5:	8d 76 00             	lea    esi,[esi+0x0]

c00161b8 <unblockTask(ThreadControlBlock*)>:
c00161b8:	53                   	push   ebx
c00161b9:	83 ec 08             	sub    esp,0x8
c00161bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00161c0:	fa                   	cli    
c00161c1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00161c6:	83 c0 01             	add    eax,0x1
c00161c9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00161ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00161d1:	85 c0                	test   eax,eax
c00161d3:	74 67                	je     c001623c <unblockTask(ThreadControlBlock*)+0x84>
c00161d5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00161d8:	83 f8 01             	cmp    eax,0x1
c00161db:	74 37                	je     c0016214 <unblockTask(ThreadControlBlock*)+0x5c>
c00161dd:	83 ec 0c             	sub    esp,0xc
c00161e0:	68 e4 96 02 c0       	push   0xc00296e4
c00161e5:	e8 82 97 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161ea:	83 c4 10             	add    esp,0x10
c00161ed:	85 c0                	test   eax,eax
c00161ef:	75 1b                	jne    c001620c <unblockTask(ThreadControlBlock*)+0x54>
c00161f1:	eb 5d                	jmp    c0016250 <unblockTask(ThreadControlBlock*)+0x98>
c00161f3:	90                   	nop
c00161f4:	83 ec 08             	sub    esp,0x8
c00161f7:	50                   	push   eax
c00161f8:	68 e4 96 02 c0       	push   0xc00296e4
c00161fd:	e8 8a 9a 00 00       	call   c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016202:	83 c4 10             	add    esp,0x10
c0016205:	85 c0                	test   eax,eax
c0016207:	74 47                	je     c0016250 <unblockTask(ThreadControlBlock*)+0x98>
c0016209:	8d 76 00             	lea    esi,[esi+0x0]
c001620c:	39 c3                	cmp    ebx,eax
c001620e:	75 e4                	jne    c00161f4 <unblockTask(ThreadControlBlock*)+0x3c>
c0016210:	eb 12                	jmp    c0016224 <unblockTask(ThreadControlBlock*)+0x6c>
c0016212:	66 90                	xchg   ax,ax
c0016214:	83 ec 0c             	sub    esp,0xc
c0016217:	68 e3 24 02 c0       	push   0xc00224e3
c001621c:	e8 e9 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016221:	83 c4 10             	add    esp,0x10
c0016224:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016229:	83 e8 01             	sub    eax,0x1
c001622c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016231:	75 01                	jne    c0016234 <unblockTask(ThreadControlBlock*)+0x7c>
c0016233:	fb                   	sti    
c0016234:	83 c4 08             	add    esp,0x8
c0016237:	5b                   	pop    ebx
c0016238:	c3                   	ret    
c0016239:	8d 76 00             	lea    esi,[esi+0x0]
c001623c:	83 ec 0c             	sub    esp,0xc
c001623f:	68 cc 24 02 c0       	push   0xc00224cc
c0016244:	e8 c1 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016249:	83 c4 10             	add    esp,0x10
c001624c:	eb d6                	jmp    c0016224 <unblockTask(ThreadControlBlock*)+0x6c>
c001624e:	66 90                	xchg   ax,ax
c0016250:	83 ec 08             	sub    esp,0x8
c0016253:	53                   	push   ebx
c0016254:	68 e4 96 02 c0       	push   0xc00296e4
c0016259:	e8 d2 97 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001625e:	83 c4 10             	add    esp,0x10
c0016261:	eb c1                	jmp    c0016224 <unblockTask(ThreadControlBlock*)+0x6c>
c0016263:	90                   	nop

c0016264 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016264:	55                   	push   ebp
c0016265:	57                   	push   edi
c0016266:	56                   	push   esi
c0016267:	53                   	push   ebx
c0016268:	83 ec 1c             	sub    esp,0x1c
c001626b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001626f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016272:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016278:	85 ed                	test   ebp,ebp
c001627a:	7e 28                	jle    c00162a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001627c:	31 f6                	xor    esi,esi
c001627e:	66 90                	xchg   ax,ax
c0016280:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016287:	83 ec 0c             	sub    esp,0xc
c001628a:	83 c6 01             	add    esi,0x1
c001628d:	57                   	push   edi
c001628e:	e8 50 18 ff ff       	call   c0007ae3 <free>
c0016293:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016296:	83 c4 10             	add    esp,0x10
c0016299:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001629f:	7f df                	jg     c0016280 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00162a1:	8d 76 00             	lea    esi,[esi+0x0]
c00162a4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00162ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00162b3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00162b6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00162b9:	d3 c0                	rol    eax,cl
c00162bb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00162c2:	21 c8                	and    eax,ecx
c00162c4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00162cb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162ce:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00162d6:	89 f7                	mov    edi,esi
c00162d8:	0f 85 72 01 00 00    	jne    c0016450 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00162de:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00162e4:	85 ed                	test   ebp,ebp
c00162e6:	74 1c                	je     c0016304 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00162e8:	83 ec 0c             	sub    esp,0xc
c00162eb:	55                   	push   ebp
c00162ec:	e8 e1 ac ff ff       	call   c0010fd2 <EnvVarContainer::~EnvVarContainer()>
c00162f1:	59                   	pop    ecx
c00162f2:	5e                   	pop    esi
c00162f3:	6a 0c                	push   0xc
c00162f5:	55                   	push   ebp
c00162f6:	e8 11 45 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00162fb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162fe:	83 c4 10             	add    esp,0x10
c0016301:	89 f7                	mov    edi,esi
c0016303:	90                   	nop
c0016304:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001630a:	85 c0                	test   eax,eax
c001630c:	0f 84 b2 00 00 00    	je     c00163c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016312:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016315:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016319:	31 c9                	xor    ecx,ecx
c001631b:	eb 17                	jmp    c0016334 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001631d:	8d 76 00             	lea    esi,[esi+0x0]
c0016320:	83 c1 01             	add    ecx,0x1
c0016323:	83 f9 10             	cmp    ecx,0x10
c0016326:	0f 84 98 00 00 00    	je     c00163c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001632c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016332:	66 90                	xchg   ax,ax
c0016334:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001633b:	d3 fa                	sar    edx,cl
c001633d:	80 e2 01             	and    dl,0x1
c0016340:	74 de                	je     c0016320 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016342:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016345:	c1 e2 05             	shl    edx,0x5
c0016348:	29 ca                	sub    edx,ecx
c001634a:	01 d0                	add    eax,edx
c001634c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016352:	83 fd 07             	cmp    ebp,0x7
c0016355:	75 c9                	jne    c0016320 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016357:	05 40 02 00 00       	add    eax,0x240
c001635c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001635f:	83 fd ff             	cmp    ebp,0xffffffff
c0016362:	0f 8c f0 00 00 00    	jl     c0016458 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016368:	0f 84 ae 01 00 00    	je     c001651c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001636e:	85 ed                	test   ebp,ebp
c0016370:	0f 84 92 01 00 00    	je     c0016508 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016376:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016378:	75 a6                	jne    c0016320 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001637a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001637e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016384:	01 d0                	add    eax,edx
c0016386:	66 90                	xchg   ax,ax
c0016388:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001638c:	83 ec 0c             	sub    esp,0xc
c001638f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016395:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016398:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001639e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00163a5:	50                   	push   eax
c00163a6:	e8 0d fe ff ff       	call   c00161b8 <unblockTask(ThreadControlBlock*)>
c00163ab:	83 c4 10             	add    esp,0x10
c00163ae:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00163b1:	89 f7                	mov    edi,esi
c00163b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163b7:	83 c1 01             	add    ecx,0x1
c00163ba:	83 f9 10             	cmp    ecx,0x10
c00163bd:	0f 85 69 ff ff ff    	jne    c001632c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00163c3:	90                   	nop
c00163c4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00163ca:	85 c0                	test   eax,eax
c00163cc:	74 62                	je     c0016430 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00163ce:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00163d4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00163da:	74 54                	je     c0016430 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00163dc:	83 ec 0c             	sub    esp,0xc
c00163df:	68 e4 96 02 c0       	push   0xc00296e4
c00163e4:	e8 83 95 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163e9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163f0:	89 c7                	mov    edi,eax
c00163f2:	e8 59 95 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	84 c0                	test   al,al
c00163fc:	0f 84 ce 00 00 00    	je     c00164d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016402:	66 90                	xchg   ax,ax
c0016404:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016407:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001640d:	85 d2                	test   edx,edx
c001640f:	74 0f                	je     c0016420 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016411:	8b 02                	mov    eax,DWORD PTR [edx]
c0016413:	83 ec 0c             	sub    esp,0xc
c0016416:	52                   	push   edx
c0016417:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001641a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001641d:	83 c4 10             	add    esp,0x10
c0016420:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001642a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001642d:	8d 76 00             	lea    esi,[esi+0x0]
c0016430:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016436:	85 db                	test   ebx,ebx
c0016438:	74 16                	je     c0016450 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001643a:	83 ec 0c             	sub    esp,0xc
c001643d:	53                   	push   ebx
c001643e:	e8 4d 37 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016443:	58                   	pop    eax
c0016444:	5a                   	pop    edx
c0016445:	6a 14                	push   0x14
c0016447:	53                   	push   ebx
c0016448:	e8 bf 43 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	83 c4 1c             	add    esp,0x1c
c0016453:	5b                   	pop    ebx
c0016454:	5e                   	pop    esi
c0016455:	5f                   	pop    edi
c0016456:	5d                   	pop    ebp
c0016457:	c3                   	ret    
c0016458:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001645c:	83 ec 0c             	sub    esp,0xc
c001645f:	68 98 25 02 c0       	push   0xc0022598
c0016464:	e8 58 ae ff ff       	call   c00112c1 <KePanic(char const*)>
c0016469:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001646c:	83 c4 10             	add    esp,0x10
c001646f:	89 f7                	mov    edi,esi
c0016471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016475:	e9 a6 fe ff ff       	jmp    c0016320 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001647a:	66 90                	xchg   ax,ax
c001647c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016482:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016488:	75 1e                	jne    c00164a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001648a:	83 ec 0c             	sub    esp,0xc
c001648d:	68 00 26 02 c0       	push   0xc0022600
c0016492:	e8 73 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016497:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001649e:	e8 1d fa ff ff       	call   c0015ec0 <blockTask(TaskState)>
c00164a3:	83 c4 10             	add    esp,0x10
c00164a6:	66 90                	xchg   ax,ax
c00164a8:	83 ec 08             	sub    esp,0x8
c00164ab:	56                   	push   esi
c00164ac:	68 e4 96 02 c0       	push   0xc00296e4
c00164b1:	e8 7a 95 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164b6:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00164bd:	e8 aa 94 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164c2:	83 c4 10             	add    esp,0x10
c00164c5:	39 f8                	cmp    eax,edi
c00164c7:	0f 84 37 ff ff ff    	je     c0016404 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00164cd:	8d 76 00             	lea    esi,[esi+0x0]
c00164d0:	83 ec 0c             	sub    esp,0xc
c00164d3:	68 e4 96 02 c0       	push   0xc00296e4
c00164d8:	e8 8f 94 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164dd:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00164e4:	89 c6                	mov    esi,eax
c00164e6:	e8 89 94 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	39 f3                	cmp    ebx,esi
c00164f0:	74 b6                	je     c00164a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164f2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00164f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164f8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00164fe:	75 a8                	jne    c00164a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016500:	e9 77 ff ff ff       	jmp    c001647c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016505:	8d 76 00             	lea    esi,[esi+0x0]
c0016508:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001650c:	83 ec 0c             	sub    esp,0xc
c001650f:	68 cc 25 02 c0       	push   0xc00225cc
c0016514:	e9 4b ff ff ff       	jmp    c0016464 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016519:	8d 76 00             	lea    esi,[esi+0x0]
c001651c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016520:	8b 36                	mov    esi,DWORD PTR [esi]
c0016522:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016525:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016528:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001652e:	01 d7                	add    edi,edx
c0016530:	89 f8                	mov    eax,edi
c0016532:	e9 51 fe ff ff       	jmp    c0016388 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016537:	90                   	nop

c0016538 <cleanerTaskFunction(void*)>:
c0016538:	53                   	push   ebx
c0016539:	83 ec 08             	sub    esp,0x8
c001653c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016541:	83 e8 01             	sub    eax,0x1
c0016544:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016549:	75 01                	jne    c001654c <cleanerTaskFunction(void*)+0x14>
c001654b:	fb                   	sti    
c001654c:	fa                   	cli    
c001654d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016552:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016559:	8d 50 01             	lea    edx,[eax+0x1]
c001655c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016562:	0f 84 c4 00 00 00    	je     c001662c <cleanerTaskFunction(void*)+0xf4>
c0016568:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001656d:	85 c0                	test   eax,eax
c001656f:	75 03                	jne    c0016574 <cleanerTaskFunction(void*)+0x3c>
c0016571:	fb                   	sti    
c0016572:	66 90                	xchg   ax,ax
c0016574:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c001657b:	fa                   	cli    
c001657c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016582:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016588:	83 c2 01             	add    edx,0x1
c001658b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016591:	83 c1 01             	add    ecx,0x1
c0016594:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001659a:	fa                   	cli    
c001659b:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c00165a1:	83 c3 01             	add    ebx,0x1
c00165a4:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c00165aa:	eb 28                	jmp    c00165d4 <cleanerTaskFunction(void*)+0x9c>
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	68 cc 96 02 c0       	push   0xc00296cc
c00165b4:	e8 b3 93 00 00       	call   c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165b9:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c00165c0:	89 c3                	mov    ebx,eax
c00165c2:	e8 ad 93 00 00       	call   c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165ca:	e8 95 fc ff ff       	call   c0016264 <cleanupTerminatedTask(ThreadControlBlock*)>
c00165cf:	83 c4 10             	add    esp,0x10
c00165d2:	66 90                	xchg   ax,ax
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	68 cc 96 02 c0       	push   0xc00296cc
c00165dc:	e8 6f 93 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165e1:	83 c4 10             	add    esp,0x10
c00165e4:	84 c0                	test   al,al
c00165e6:	74 c4                	je     c00165ac <cleanerTaskFunction(void*)+0x74>
c00165e8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165ed:	83 e8 01             	sub    eax,0x1
c00165f0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165f5:	75 01                	jne    c00165f8 <cleanerTaskFunction(void*)+0xc0>
c00165f7:	fb                   	sti    
c00165f8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165fd:	83 e8 01             	sub    eax,0x1
c0016600:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016605:	0f 85 31 ff ff ff    	jne    c001653c <cleanerTaskFunction(void*)+0x4>
c001660b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016610:	85 c0                	test   eax,eax
c0016612:	0f 84 24 ff ff ff    	je     c001653c <cleanerTaskFunction(void*)+0x4>
c0016618:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016622:	e8 99 f6 ff ff       	call   c0015cc0 <schedule()>
c0016627:	e9 10 ff ff ff       	jmp    c001653c <cleanerTaskFunction(void*)+0x4>
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	6a 02                	push   0x2
c0016631:	e8 62 f8 ff ff       	call   c0015e98 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016636:	83 c4 10             	add    esp,0x10
c0016639:	e9 36 ff ff ff       	jmp    c0016574 <cleanerTaskFunction(void*)+0x3c>
c001663e:	66 90                	xchg   ax,ax

c0016640 <terminateTask(int)>:
c0016640:	83 ec 14             	sub    esp,0x14
c0016643:	fa                   	cli    
c0016644:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001664a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016650:	83 c2 01             	add    edx,0x1
c0016653:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016659:	83 c1 01             	add    ecx,0x1
c001665c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016662:	fa                   	cli    
c0016663:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016668:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001666c:	83 c0 01             	add    eax,0x1
c001666f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016674:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016679:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001667c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016681:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016684:	50                   	push   eax
c0016685:	68 cc 96 02 c0       	push   0xc00296cc
c001668a:	e8 a1 93 00 00       	call   c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001668f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016694:	83 c4 10             	add    esp,0x10
c0016697:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001669e:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c00166a3:	85 c0                	test   eax,eax
c00166a5:	74 65                	je     c001670c <terminateTask(int)+0xcc>
c00166a7:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c00166ae:	83 ec 0c             	sub    esp,0xc
c00166b1:	50                   	push   eax
c00166b2:	e8 01 fb ff ff       	call   c00161b8 <unblockTask(ThreadControlBlock*)>
c00166b7:	83 c4 10             	add    esp,0x10
c00166ba:	66 90                	xchg   ax,ax
c00166bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166c1:	83 e8 01             	sub    eax,0x1
c00166c4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166c9:	75 01                	jne    c00166cc <terminateTask(int)+0x8c>
c00166cb:	fb                   	sti    
c00166cc:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00166d1:	83 e8 01             	sub    eax,0x1
c00166d4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00166d9:	75 09                	jne    c00166e4 <terminateTask(int)+0xa4>
c00166db:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00166e2:	75 3c                	jne    c0016720 <terminateTask(int)+0xe0>
c00166e4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166e9:	83 e8 01             	sub    eax,0x1
c00166ec:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166f1:	75 01                	jne    c00166f4 <terminateTask(int)+0xb4>
c00166f3:	fb                   	sti    
c00166f4:	fa                   	cli    
c00166f5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166fa:	83 c0 01             	add    eax,0x1
c00166fd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016702:	66 90                	xchg   ax,ax
c0016704:	e8 b7 f5 ff ff       	call   c0015cc0 <schedule()>
c0016709:	eb d9                	jmp    c00166e4 <terminateTask(int)+0xa4>
c001670b:	90                   	nop
c001670c:	83 ec 0c             	sub    esp,0xc
c001670f:	68 fa 24 02 c0       	push   0xc00224fa
c0016714:	e8 f1 41 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016719:	83 c4 10             	add    esp,0x10
c001671c:	eb 9e                	jmp    c00166bc <terminateTask(int)+0x7c>
c001671e:	66 90                	xchg   ax,ax
c0016720:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001672a:	eb d8                	jmp    c0016704 <terminateTask(int)+0xc4>

c001672c <Thr::terminateFromIRQ(int)>:
c001672c:	83 ec 18             	sub    esp,0x18
c001672f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016733:	50                   	push   eax
c0016734:	e8 07 ff ff ff       	call   c0016640 <terminateTask(int)>
c0016739:	90                   	nop
c001673a:	66 90                	xchg   ax,ax

c001673c <Semaphore::release()>:
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016743:	fa                   	cli    
c0016744:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016749:	83 c0 01             	add    eax,0x1
c001674c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016751:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016756:	8d 48 01             	lea    ecx,[eax+0x1]
c0016759:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001675f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016762:	85 c9                	test   ecx,ecx
c0016764:	74 42                	je     c00167a8 <Semaphore::release()+0x6c>
c0016766:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016769:	83 ec 0c             	sub    esp,0xc
c001676c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001676f:	51                   	push   ecx
c0016770:	e8 43 fa ff ff       	call   c00161b8 <unblockTask(ThreadControlBlock*)>
c0016775:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001677a:	83 c4 10             	add    esp,0x10
c001677d:	83 e8 01             	sub    eax,0x1
c0016780:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016785:	85 c0                	test   eax,eax
c0016787:	75 0b                	jne    c0016794 <Semaphore::release()+0x58>
c0016789:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001678e:	85 c0                	test   eax,eax
c0016790:	75 22                	jne    c00167b4 <Semaphore::release()+0x78>
c0016792:	66 90                	xchg   ax,ax
c0016794:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016799:	83 e8 01             	sub    eax,0x1
c001679c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167a1:	75 01                	jne    c00167a4 <Semaphore::release()+0x68>
c00167a3:	fb                   	sti    
c00167a4:	83 c4 0c             	add    esp,0xc
c00167a7:	c3                   	ret    
c00167a8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00167ab:	83 e9 01             	sub    ecx,0x1
c00167ae:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00167b1:	eb cd                	jmp    c0016780 <Semaphore::release()+0x44>
c00167b3:	90                   	nop
c00167b4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00167be:	e8 fd f4 ff ff       	call   c0015cc0 <schedule()>
c00167c3:	eb cf                	jmp    c0016794 <Semaphore::release()+0x58>
c00167c5:	8d 76 00             	lea    esi,[esi+0x0]

c00167c8 <__static_initialization_and_destruction_0(int, int)>:
c00167c8:	83 ec 0c             	sub    esp,0xc
c00167cb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00167d0:	0f 85 8e 00 00 00    	jne    c0016864 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00167d6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00167de:	0f 85 80 00 00 00    	jne    c0016864 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	68 e4 96 02 c0       	push   0xc00296e4
c00167ec:	e8 f3 94 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167f1:	83 c4 10             	add    esp,0x10
c00167f4:	83 ec 04             	sub    esp,0x4
c00167f7:	68 d0 31 02 c0       	push   0xc00231d0
c00167fc:	68 e4 96 02 c0       	push   0xc00296e4
c0016801:	68 94 fc 01 c0       	push   0xc001fc94
c0016806:	e8 b1 3f ff ff       	call   c000a7bc <__cxa_atexit>
c001680b:	83 c4 10             	add    esp,0x10
c001680e:	83 ec 0c             	sub    esp,0xc
c0016811:	68 d8 96 02 c0       	push   0xc00296d8
c0016816:	e8 c9 94 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	83 ec 04             	sub    esp,0x4
c0016821:	68 d0 31 02 c0       	push   0xc00231d0
c0016826:	68 d8 96 02 c0       	push   0xc00296d8
c001682b:	68 94 fc 01 c0       	push   0xc001fc94
c0016830:	e8 87 3f ff ff       	call   c000a7bc <__cxa_atexit>
c0016835:	83 c4 10             	add    esp,0x10
c0016838:	83 ec 0c             	sub    esp,0xc
c001683b:	68 cc 96 02 c0       	push   0xc00296cc
c0016840:	e8 9f 94 00 00       	call   c001fce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016845:	83 c4 10             	add    esp,0x10
c0016848:	83 ec 04             	sub    esp,0x4
c001684b:	68 d0 31 02 c0       	push   0xc00231d0
c0016850:	68 cc 96 02 c0       	push   0xc00296cc
c0016855:	68 94 fc 01 c0       	push   0xc001fc94
c001685a:	e8 5d 3f ff ff       	call   c000a7bc <__cxa_atexit>
c001685f:	83 c4 10             	add    esp,0x10
c0016862:	66 90                	xchg   ax,ax
c0016864:	90                   	nop
c0016865:	83 c4 0c             	add    esp,0xc
c0016868:	c3                   	ret    
c0016869:	8d 76 00             	lea    esi,[esi+0x0]

c001686c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001686c:	83 ec 0c             	sub    esp,0xc
c001686f:	83 ec 08             	sub    esp,0x8
c0016872:	68 ff ff 00 00       	push   0xffff
c0016877:	6a 01                	push   0x1
c0016879:	e8 4a ff ff ff       	call   c00167c8 <__static_initialization_and_destruction_0(int, int)>
c001687e:	83 c4 10             	add    esp,0x10
c0016881:	83 c4 0c             	add    esp,0xc
c0016884:	c3                   	ret    

c0016885 <Vm::inbv(unsigned short)>:
c0016885:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016889:	66 81 fa fe fe       	cmp    dx,0xfefe
c001688e:	75 06                	jne    c0016896 <Vm::inbv(unsigned short)+0x11>
c0016890:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c0016895:	c3                   	ret    
c0016896:	ec                   	in     al,dx
c0016897:	c3                   	ret    

c0016898 <Vm::outbv(unsigned short, unsigned char)>:
c0016898:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001689c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00168a0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00168a5:	75 25                	jne    c00168cc <Vm::outbv(unsigned short, unsigned char)+0x34>
c00168a7:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00168ad:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c00168b3:	8d 51 01             	lea    edx,[ecx+0x1]
c00168b6:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c00168bc:	83 fa 20             	cmp    edx,0x20
c00168bf:	75 0c                	jne    c00168cd <Vm::outbv(unsigned short, unsigned char)+0x35>
c00168c1:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c00168cb:	c3                   	ret    
c00168cc:	ee                   	out    dx,al
c00168cd:	c3                   	ret    

c00168ce <Vm::realToLinear(unsigned short, unsigned short)>:
c00168ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00168d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00168d8:	c1 e0 04             	shl    eax,0x4
c00168db:	01 d0                	add    eax,edx
c00168dd:	c3                   	ret    

c00168de <Vm::getSegment(unsigned int)>:
c00168de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168e2:	c1 e8 10             	shr    eax,0x10
c00168e5:	c3                   	ret    

c00168e6 <Vm::getOffset(unsigned int)>:
c00168e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168ea:	c3                   	ret    

c00168eb <Vm::mainloop2()>:
c00168eb:	83 ec 18             	sub    esp,0x18
c00168ee:	fa                   	cli    
c00168ef:	6a 02                	push   0x2
c00168f1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168f7:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c00168fe:	e8 95 f5 ff ff       	call   c0015e98 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016903:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016908:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001690c:	52                   	push   edx
c001690d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016911:	52                   	push   edx
c0016912:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016916:	52                   	push   edx
c0016917:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001691b:	50                   	push   eax
c001691c:	e8 ee 98 fe ff       	call   c000020f <goToVM86>
c0016921:	83 c4 2c             	add    esp,0x2c
c0016924:	c3                   	ret    

c0016925 <Vm::mainVm8086Loop(void*)>:
c0016925:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001692a:	48                   	dec    eax
c001692b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016930:	75 01                	jne    c0016933 <Vm::mainVm8086Loop(void*)+0xe>
c0016932:	fb                   	sti    
c0016933:	eb b6                	jmp    c00168eb <Vm::mainloop2()>

c0016935 <Vm::mainloop3(unsigned long)>:
c0016935:	83 ec 18             	sub    esp,0x18
c0016938:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001693c:	fa                   	cli    
c001693d:	6a 02                	push   0x2
c001693f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016945:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c001694c:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016951:	e8 42 f5 ff ff       	call   c0015e98 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016956:	83 c4 1c             	add    esp,0x1c
c0016959:	eb 90                	jmp    c00168eb <Vm::mainloop2()>

c001695b <Vm::initialise8086()>:
c001695b:	83 ec 0c             	sub    esp,0xc
c001695e:	68 80 00 00 00       	push   0x80
c0016963:	6a 00                	push   0x0
c0016965:	68 25 69 01 c0       	push   0xc0016925
c001696a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016970:	e8 ff f0 ff ff       	call   c0015a74 <Process::createThread(void (*)(void*), void*, int)>
c0016975:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001697c:	68 00 01 00 00       	push   0x100
c0016981:	6a 00                	push   0x0
c0016983:	6a 00                	push   0x0
c0016985:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c001698a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001698f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016995:	e8 6e 35 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001699a:	83 c4 2c             	add    esp,0x2c
c001699d:	c3                   	ret    

c001699e <Vm::finish8086()>:
c001699e:	53                   	push   ebx
c001699f:	83 ec 08             	sub    esp,0x8
c00169a2:	fa                   	cli    
c00169a3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169a9:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c00169b0:	75 15                	jne    c00169c7 <Vm::finish8086()+0x29>
c00169b2:	e8 09 f3 ff ff       	call   c0015cc0 <schedule()>
c00169b7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169bc:	48                   	dec    eax
c00169bd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169c2:	75 de                	jne    c00169a2 <Vm::finish8086()+0x4>
c00169c4:	fb                   	sti    
c00169c5:	eb db                	jmp    c00169a2 <Vm::finish8086()+0x4>
c00169c7:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c00169ce:	83 ec 0c             	sub    esp,0xc
c00169d1:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00169d7:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00169dd:	e8 d6 f7 ff ff       	call   c00161b8 <unblockTask(ThreadControlBlock*)>
c00169e2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169e7:	83 c4 10             	add    esp,0x10
c00169ea:	8d 50 ff             	lea    edx,[eax-0x1]
c00169ed:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00169f3:	85 d2                	test   edx,edx
c00169f5:	75 01                	jne    c00169f8 <Vm::finish8086()+0x5a>
c00169f7:	fb                   	sti    
c00169f8:	83 c4 08             	add    esp,0x8
c00169fb:	89 d8                	mov    eax,ebx
c00169fd:	5b                   	pop    ebx
c00169fe:	c3                   	ret    

c00169ff <Vm::getOutput8086(unsigned char*)>:
c00169ff:	57                   	push   edi
c0016a00:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016a06:	56                   	push   esi
c0016a07:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016a0c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016a10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a12:	5e                   	pop    esi
c0016a13:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016a18:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a22:	5f                   	pop    edi
c0016a23:	c3                   	ret    

c0016a24 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016a24:	55                   	push   ebp
c0016a25:	57                   	push   edi
c0016a26:	56                   	push   esi
c0016a27:	53                   	push   ebx
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016a2f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016a33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016a37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016a3b:	fa                   	cli    
c0016a3c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a42:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016a49:	75 15                	jne    c0016a60 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016a4b:	e8 70 f2 ff ff       	call   c0015cc0 <schedule()>
c0016a50:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a55:	48                   	dec    eax
c0016a56:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a5b:	75 de                	jne    c0016a3b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a5d:	fb                   	sti    
c0016a5e:	eb db                	jmp    c0016a3b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a60:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a6a:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a6f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a73:	0f b7 ff             	movzx  edi,di
c0016a76:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a7a:	0f b7 f6             	movzx  esi,si
c0016a7d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a81:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016a85:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a89:	50                   	push   eax
c0016a8a:	6a 20                	push   0x20
c0016a8c:	6a 00                	push   0x0
c0016a8e:	68 40 97 02 c0       	push   0xc0029740
c0016a93:	e8 58 9a fe ff       	call   c00004f0 <memset>
c0016a98:	5a                   	pop    edx
c0016a99:	59                   	pop    ecx
c0016a9a:	57                   	push   edi
c0016a9b:	56                   	push   esi
c0016a9c:	e8 2d fe ff ff       	call   c00168ce <Vm::realToLinear(unsigned short, unsigned short)>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016aa8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016aac:	89 c7                	mov    edi,eax
c0016aae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ab0:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016ab7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016abc:	48                   	dec    eax
c0016abd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016ac2:	75 01                	jne    c0016ac5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016ac4:	fb                   	sti    
c0016ac5:	83 ec 0c             	sub    esp,0xc
c0016ac8:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016ace:	e8 e5 f6 ff ff       	call   c00161b8 <unblockTask(ThreadControlBlock*)>
c0016ad3:	83 c4 1c             	add    esp,0x1c
c0016ad6:	b0 01                	mov    al,0x1
c0016ad8:	5b                   	pop    ebx
c0016ad9:	5e                   	pop    esi
c0016ada:	5f                   	pop    edi
c0016adb:	5d                   	pop    ebp
c0016adc:	c3                   	ret    

c0016add <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016add:	55                   	push   ebp
c0016ade:	57                   	push   edi
c0016adf:	56                   	push   esi
c0016ae0:	53                   	push   ebx
c0016ae1:	83 ec 34             	sub    esp,0x34
c0016ae4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ae8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016aec:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016af0:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016af4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016af8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016afc:	68 28 26 02 c0       	push   0xc0022628
c0016b01:	e8 04 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016b06:	83 c4 10             	add    esp,0x10
c0016b09:	fa                   	cli    
c0016b0a:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016b10:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016b16:	84 db                	test   bl,bl
c0016b18:	75 15                	jne    c0016b2f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016b1a:	e8 a1 f1 ff ff       	call   c0015cc0 <schedule()>
c0016b1f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b24:	48                   	dec    eax
c0016b25:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b2a:	75 dd                	jne    c0016b09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016b2c:	fb                   	sti    
c0016b2d:	eb da                	jmp    c0016b09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016b2f:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016b39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b3d:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016b42:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016b46:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016b4a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016b4e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016b52:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016b56:	50                   	push   eax
c0016b57:	6a 20                	push   0x20
c0016b59:	6a 00                	push   0x0
c0016b5b:	68 40 97 02 c0       	push   0xc0029740
c0016b60:	e8 8b 99 fe ff       	call   c00004f0 <memset>
c0016b65:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016b6c:	e8 62 0f ff ff       	call   c0007ad3 <malloc>
c0016b71:	83 c4 0c             	add    esp,0xc
c0016b74:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016b7a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b7e:	89 c5                	mov    ebp,eax
c0016b80:	50                   	push   eax
c0016b81:	e8 20 4d ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0016b86:	83 c4 10             	add    esp,0x10
c0016b89:	85 ed                	test   ebp,ebp
c0016b8b:	75 0a                	jne    c0016b97 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016b8d:	83 ec 0c             	sub    esp,0xc
c0016b90:	68 4a 26 02 c0       	push   0xc002264a
c0016b95:	eb 2b                	jmp    c0016bc2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016b97:	50                   	push   eax
c0016b98:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016b9c:	50                   	push   eax
c0016b9d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016ba1:	50                   	push   eax
c0016ba2:	55                   	push   ebp
c0016ba3:	e8 1e 50 ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c0016ba8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016bac:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016bb0:	83 c4 10             	add    esp,0x10
c0016bb3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016bb8:	74 27                	je     c0016be1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016bba:	83 ec 0c             	sub    esp,0xc
c0016bbd:	68 5e 26 02 c0       	push   0xc002265e
c0016bc2:	e8 fa a6 ff ff       	call   c00112c1 <KePanic(char const*)>
c0016bc7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016bcc:	83 c4 10             	add    esp,0x10
c0016bcf:	48                   	dec    eax
c0016bd0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016bd5:	85 c0                	test   eax,eax
c0016bd7:	75 01                	jne    c0016bda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016bd9:	fb                   	sti    
c0016bda:	31 db                	xor    ebx,ebx
c0016bdc:	e9 90 00 00 00       	jmp    c0016c71 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016be1:	51                   	push   ecx
c0016be2:	51                   	push   ecx
c0016be3:	6a 01                	push   0x1
c0016be5:	55                   	push   ebp
c0016be6:	e8 d9 4c ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c0016beb:	83 c4 10             	add    esp,0x10
c0016bee:	85 c0                	test   eax,eax
c0016bf0:	74 26                	je     c0016c18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016bf2:	83 ec 0c             	sub    esp,0xc
c0016bf5:	68 77 26 02 c0       	push   0xc0022677
c0016bfa:	e8 c2 a6 ff ff       	call   c00112c1 <KePanic(char const*)>
c0016bff:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c04:	83 c4 10             	add    esp,0x10
c0016c07:	48                   	dec    eax
c0016c08:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c0d:	85 c0                	test   eax,eax
c0016c0f:	75 c9                	jne    c0016bda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016c11:	fb                   	sti    
c0016c12:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016c16:	eb 59                	jmp    c0016c71 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016c18:	50                   	push   eax
c0016c19:	0f b7 ff             	movzx  edi,di
c0016c1c:	50                   	push   eax
c0016c1d:	0f b7 f6             	movzx  esi,si
c0016c20:	57                   	push   edi
c0016c21:	56                   	push   esi
c0016c22:	e8 a7 fc ff ff       	call   c00168ce <Vm::realToLinear(unsigned short, unsigned short)>
c0016c27:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016c2a:	5a                   	pop    edx
c0016c2b:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016c2f:	56                   	push   esi
c0016c30:	50                   	push   eax
c0016c31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c39:	55                   	push   ebp
c0016c3a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c3d:	83 c4 14             	add    esp,0x14
c0016c40:	55                   	push   ebp
c0016c41:	e8 dc 4c ff ff       	call   c000b922 <File::close()>
c0016c46:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016c55:	48                   	dec    eax
c0016c56:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c5b:	85 c0                	test   eax,eax
c0016c5d:	75 01                	jne    c0016c60 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016c5f:	fb                   	sti    
c0016c60:	83 ec 0c             	sub    esp,0xc
c0016c63:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016c69:	e8 4a f5 ff ff       	call   c00161b8 <unblockTask(ThreadControlBlock*)>
c0016c6e:	83 c4 10             	add    esp,0x10
c0016c71:	83 c4 2c             	add    esp,0x2c
c0016c74:	88 d8                	mov    al,bl
c0016c76:	5b                   	pop    ebx
c0016c77:	5e                   	pop    esi
c0016c78:	5f                   	pop    edi
c0016c79:	5d                   	pop    ebp
c0016c7a:	c3                   	ret    

c0016c7b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016c7b:	57                   	push   edi
c0016c7c:	56                   	push   esi
c0016c7d:	53                   	push   ebx
c0016c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c86:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016c8a:	83 e8 06             	sub    eax,0x6
c0016c8d:	0f b7 c0             	movzx  eax,ax
c0016c90:	50                   	push   eax
c0016c91:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016c96:	50                   	push   eax
c0016c97:	e8 32 fc ff ff       	call   c00168ce <Vm::realToLinear(unsigned short, unsigned short)>
c0016c9c:	5a                   	pop    edx
c0016c9d:	59                   	pop    ecx
c0016c9e:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016ca1:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016ca4:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016ca7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016cad:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016cb0:	8d 51 02             	lea    edx,[ecx+0x2]
c0016cb3:	66 89 10             	mov    WORD PTR [eax],dx
c0016cb6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016cba:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016cbe:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016cc2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016cc5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016cc9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ccf:	89 f1                	mov    ecx,esi
c0016cd1:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016cd5:	89 f2                	mov    edx,esi
c0016cd7:	0f b6 d6             	movzx  edx,dh
c0016cda:	0f b6 f1             	movzx  esi,cl
c0016cdd:	74 0a                	je     c0016ce9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016cdf:	c1 e2 08             	shl    edx,0x8
c0016ce2:	09 f2                	or     edx,esi
c0016ce4:	80 ce 02             	or     dh,0x2
c0016ce7:	eb 08                	jmp    c0016cf1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016ce9:	c1 e2 08             	shl    edx,0x8
c0016cec:	09 f2                	or     edx,esi
c0016cee:	80 e6 fd             	and    dh,0xfd
c0016cf1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016cf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cfa:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016cfe:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016d06:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016d09:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016d11:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016d14:	5b                   	pop    ebx
c0016d15:	5e                   	pop    esi
c0016d16:	5f                   	pop    edi
c0016d17:	c3                   	ret    

c0016d18 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016d18:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d1d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d22:	c1 e0 04             	shl    eax,0x4
c0016d25:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016d28:	c3                   	ret    

c0016d29 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016d29:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d2e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d33:	c1 e0 04             	shl    eax,0x4
c0016d36:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016d3a:	c3                   	ret    

c0016d3b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016d3b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d40:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d45:	c1 e0 04             	shl    eax,0x4
c0016d48:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016d4b:	c3                   	ret    

c0016d4c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016d4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d51:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d56:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016d5a:	c1 e0 04             	shl    eax,0x4
c0016d5d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016d60:	c3                   	ret    

c0016d61 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016d61:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d66:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d6b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d6f:	c1 e0 04             	shl    eax,0x4
c0016d72:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016d76:	c3                   	ret    

c0016d77 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016d77:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d7c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d85:	c1 e0 04             	shl    eax,0x4
c0016d88:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016d8b:	c3                   	ret    

c0016d8c <Vm::faultHandler(regs*)>:
c0016d8c:	55                   	push   ebp
c0016d8d:	57                   	push   edi
c0016d8e:	56                   	push   esi
c0016d8f:	53                   	push   ebx
c0016d90:	83 ec 2c             	sub    esp,0x2c
c0016d93:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d97:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016d9a:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016d9e:	0f b7 f8             	movzx  edi,ax
c0016da1:	0f b7 c0             	movzx  eax,ax
c0016da4:	52                   	push   edx
c0016da5:	50                   	push   eax
c0016da6:	e8 23 fb ff ff       	call   c00168ce <Vm::realToLinear(unsigned short, unsigned short)>
c0016dab:	5a                   	pop    edx
c0016dac:	59                   	pop    ecx
c0016dad:	89 c1                	mov    ecx,eax
c0016daf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016db2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016db6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016dbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016dbf:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016dc2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dc6:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016dcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dcf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016dd3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dd7:	e8 f2 fa ff ff       	call   c00168ce <Vm::realToLinear(unsigned short, unsigned short)>
c0016ddc:	5e                   	pop    esi
c0016ddd:	be 06 00 00 00       	mov    esi,0x6
c0016de2:	5d                   	pop    ebp
c0016de3:	31 ed                	xor    ebp,ebp
c0016de5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016dea:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016ded:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016df3:	0f 84 74 02 00 00    	je     c001706d <Vm::faultHandler(regs*)+0x2e1>
c0016df9:	0f 87 94 00 00 00    	ja     c0016e93 <Vm::faultHandler(regs*)+0x107>
c0016dff:	83 fa 66             	cmp    edx,0x66
c0016e02:	0f 84 e2 01 00 00    	je     c0016fea <Vm::faultHandler(regs*)+0x25e>
c0016e08:	77 47                	ja     c0016e51 <Vm::faultHandler(regs*)+0xc5>
c0016e0a:	83 fa 36             	cmp    edx,0x36
c0016e0d:	0f 84 ca 01 00 00    	je     c0016fdd <Vm::faultHandler(regs*)+0x251>
c0016e13:	77 1a                	ja     c0016e2f <Vm::faultHandler(regs*)+0xa3>
c0016e15:	83 fa 26             	cmp    edx,0x26
c0016e18:	0f 84 98 01 00 00    	je     c0016fb6 <Vm::faultHandler(regs*)+0x22a>
c0016e1e:	83 fa 2e             	cmp    edx,0x2e
c0016e21:	0f 85 27 06 00 00    	jne    c001744e <Vm::faultHandler(regs*)+0x6c2>
c0016e27:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e2a:	31 f6                	xor    esi,esi
c0016e2c:	41                   	inc    ecx
c0016e2d:	eb bb                	jmp    c0016dea <Vm::faultHandler(regs*)+0x5e>
c0016e2f:	83 fa 64             	cmp    edx,0x64
c0016e32:	0f 84 8b 01 00 00    	je     c0016fc3 <Vm::faultHandler(regs*)+0x237>
c0016e38:	0f 87 92 01 00 00    	ja     c0016fd0 <Vm::faultHandler(regs*)+0x244>
c0016e3e:	83 fa 3e             	cmp    edx,0x3e
c0016e41:	0f 85 07 06 00 00    	jne    c001744e <Vm::faultHandler(regs*)+0x6c2>
c0016e47:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e4a:	be 01 00 00 00       	mov    esi,0x1
c0016e4f:	eb db                	jmp    c0016e2c <Vm::faultHandler(regs*)+0xa0>
c0016e51:	83 fa 6d             	cmp    edx,0x6d
c0016e54:	0f 84 34 03 00 00    	je     c001718e <Vm::faultHandler(regs*)+0x402>
c0016e5a:	77 17                	ja     c0016e73 <Vm::faultHandler(regs*)+0xe7>
c0016e5c:	83 fa 67             	cmp    edx,0x67
c0016e5f:	0f 84 92 01 00 00    	je     c0016ff7 <Vm::faultHandler(regs*)+0x26b>
c0016e65:	83 fa 6c             	cmp    edx,0x6c
c0016e68:	0f 84 b1 02 00 00    	je     c001711f <Vm::faultHandler(regs*)+0x393>
c0016e6e:	e9 db 05 00 00       	jmp    c001744e <Vm::faultHandler(regs*)+0x6c2>
c0016e73:	83 fa 6f             	cmp    edx,0x6f
c0016e76:	0f 84 40 04 00 00    	je     c00172bc <Vm::faultHandler(regs*)+0x530>
c0016e7c:	0f 82 a2 03 00 00    	jb     c0017224 <Vm::faultHandler(regs*)+0x498>
c0016e82:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016e88:	0f 84 76 01 00 00    	je     c0017004 <Vm::faultHandler(regs*)+0x278>
c0016e8e:	e9 bb 05 00 00       	jmp    c001744e <Vm::faultHandler(regs*)+0x6c2>
c0016e93:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016e99:	0f 84 57 05 00 00    	je     c00173f6 <Vm::faultHandler(regs*)+0x66a>
c0016e9f:	0f 87 a9 00 00 00    	ja     c0016f4e <Vm::faultHandler(regs*)+0x1c2>
c0016ea5:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016eab:	0f 84 d6 04 00 00    	je     c0017387 <Vm::faultHandler(regs*)+0x5fb>
c0016eb1:	77 78                	ja     c0016f2b <Vm::faultHandler(regs*)+0x19f>
c0016eb3:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016eb9:	0f 84 0e 02 00 00    	je     c00170cd <Vm::faultHandler(regs*)+0x341>
c0016ebf:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016ec5:	0f 85 83 05 00 00    	jne    c001744e <Vm::faultHandler(regs*)+0x6c2>
c0016ecb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016ecf:	89 d1                	mov    ecx,edx
c0016ed1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016ed4:	c1 e1 08             	shl    ecx,0x8
c0016ed7:	09 ca                	or     edx,ecx
c0016ed9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016edc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016ee0:	89 d1                	mov    ecx,edx
c0016ee2:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016ee6:	c1 e1 08             	shl    ecx,0x8
c0016ee9:	09 ca                	or     edx,ecx
c0016eeb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016eee:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016ef2:	89 d1                	mov    ecx,edx
c0016ef4:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016ef8:	c1 e1 08             	shl    ecx,0x8
c0016efb:	09 ca                	or     edx,ecx
c0016efd:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f03:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f06:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016f0a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f10:	d1 e8                	shr    eax,1
c0016f12:	83 e0 01             	and    eax,0x1
c0016f15:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f18:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f1b:	83 c0 06             	add    eax,0x6
c0016f1e:	25 ff ff 00 00       	and    eax,0xffff
c0016f23:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016f26:	e9 1f 05 00 00       	jmp    c001744a <Vm::faultHandler(regs*)+0x6be>
c0016f2b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016f31:	0f 84 95 04 00 00    	je     c00173cc <Vm::faultHandler(regs*)+0x640>
c0016f37:	0f 82 66 04 00 00    	jb     c00173a3 <Vm::faultHandler(regs*)+0x617>
c0016f3d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016f43:	0f 84 9a 04 00 00    	je     c00173e3 <Vm::faultHandler(regs*)+0x657>
c0016f49:	e9 00 05 00 00       	jmp    c001744e <Vm::faultHandler(regs*)+0x6c2>
c0016f4e:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016f54:	0f 84 dd 04 00 00    	je     c0017437 <Vm::faultHandler(regs*)+0x6ab>
c0016f5a:	77 2e                	ja     c0016f8a <Vm::faultHandler(regs*)+0x1fe>
c0016f5c:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016f62:	0f 84 aa 04 00 00    	je     c0017412 <Vm::faultHandler(regs*)+0x686>
c0016f68:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016f6e:	0f 85 da 04 00 00    	jne    c001744e <Vm::faultHandler(regs*)+0x6c2>
c0016f74:	50                   	push   eax
c0016f75:	50                   	push   eax
c0016f76:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016f7a:	50                   	push   eax
c0016f7b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f7f:	50                   	push   eax
c0016f80:	e8 13 f9 ff ff       	call   c0016898 <Vm::outbv(unsigned short, unsigned char)>
c0016f85:	e9 a5 04 00 00       	jmp    c001742f <Vm::faultHandler(regs*)+0x6a3>
c0016f8a:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016f90:	0f 84 6d 01 00 00    	je     c0017103 <Vm::faultHandler(regs*)+0x377>
c0016f96:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016f9c:	0f 84 6f 01 00 00    	je     c0017111 <Vm::faultHandler(regs*)+0x385>
c0016fa2:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016fa8:	0f 85 a0 04 00 00    	jne    c001744e <Vm::faultHandler(regs*)+0x6c2>
c0016fae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fb1:	e9 76 fe ff ff       	jmp    c0016e2c <Vm::faultHandler(regs*)+0xa0>
c0016fb6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fb9:	be 02 00 00 00       	mov    esi,0x2
c0016fbe:	e9 69 fe ff ff       	jmp    c0016e2c <Vm::faultHandler(regs*)+0xa0>
c0016fc3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fc6:	be 03 00 00 00       	mov    esi,0x3
c0016fcb:	e9 5c fe ff ff       	jmp    c0016e2c <Vm::faultHandler(regs*)+0xa0>
c0016fd0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fd3:	be 04 00 00 00       	mov    esi,0x4
c0016fd8:	e9 4f fe ff ff       	jmp    c0016e2c <Vm::faultHandler(regs*)+0xa0>
c0016fdd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fe0:	be 05 00 00 00       	mov    esi,0x5
c0016fe5:	e9 42 fe ff ff       	jmp    c0016e2c <Vm::faultHandler(regs*)+0xa0>
c0016fea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fed:	bd 01 00 00 00       	mov    ebp,0x1
c0016ff2:	e9 35 fe ff ff       	jmp    c0016e2c <Vm::faultHandler(regs*)+0xa0>
c0016ff7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ffa:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016fff:	e9 28 fe ff ff       	jmp    c0016e2c <Vm::faultHandler(regs*)+0xa0>
c0017004:	83 e5 01             	and    ebp,0x1
c0017007:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001700a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001700e:	74 30                	je     c0017040 <Vm::faultHandler(regs*)+0x2b4>
c0017010:	83 e9 04             	sub    ecx,0x4
c0017013:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017019:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001701f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017022:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017025:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001702b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001702f:	0f 84 12 04 00 00    	je     c0017447 <Vm::faultHandler(regs*)+0x6bb>
c0017035:	80 ce 02             	or     dh,0x2
c0017038:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001703b:	e9 07 04 00 00       	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c0017040:	83 e9 02             	sub    ecx,0x2
c0017043:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017049:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001704c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017050:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017056:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001705a:	74 05                	je     c0017061 <Vm::faultHandler(regs*)+0x2d5>
c001705c:	80 ce 02             	or     dh,0x2
c001705f:	eb 03                	jmp    c0017064 <Vm::faultHandler(regs*)+0x2d8>
c0017061:	80 e6 fd             	and    dh,0xfd
c0017064:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017068:	e9 da 03 00 00       	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c001706d:	83 e5 01             	and    ebp,0x1
c0017070:	74 2a                	je     c001709c <Vm::faultHandler(regs*)+0x310>
c0017072:	8b 10                	mov    edx,DWORD PTR [eax]
c0017074:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001707a:	81 ca 00 02 02 00    	or     edx,0x20200
c0017080:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017083:	8b 00                	mov    eax,DWORD PTR [eax]
c0017085:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001708b:	c1 e8 09             	shr    eax,0x9
c001708e:	83 e0 01             	and    eax,0x1
c0017091:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017094:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017097:	83 c0 04             	add    eax,0x4
c001709a:	eb 24                	jmp    c00170c0 <Vm::faultHandler(regs*)+0x334>
c001709c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001709f:	81 ca 00 02 02 00    	or     edx,0x20200
c00170a5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00170a8:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00170ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170b1:	c1 e8 09             	shr    eax,0x9
c00170b4:	83 e0 01             	and    eax,0x1
c00170b7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00170ba:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00170bd:	83 c0 02             	add    eax,0x2
c00170c0:	25 ff ff 00 00       	and    eax,0xffff
c00170c5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00170c8:	e9 7a 03 00 00       	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c00170cd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170d1:	3d ee 00 00 00       	cmp    eax,0xee
c00170d6:	75 10                	jne    c00170e8 <Vm::faultHandler(regs*)+0x35c>
c00170d8:	83 ec 0c             	sub    esp,0xc
c00170db:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00170de:	e8 52 f8 ff ff       	call   c0016935 <Vm::mainloop3(unsigned long)>
c00170e3:	e9 4a 03 00 00       	jmp    c0017432 <Vm::faultHandler(regs*)+0x6a6>
c00170e8:	83 ec 0c             	sub    esp,0xc
c00170eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00170ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170f3:	51                   	push   ecx
c00170f4:	50                   	push   eax
c00170f5:	53                   	push   ebx
c00170f6:	e8 80 fb ff ff       	call   c0016c7b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00170fb:	83 c4 20             	add    esp,0x20
c00170fe:	e9 47 03 00 00       	jmp    c001744a <Vm::faultHandler(regs*)+0x6be>
c0017103:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017108:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001710c:	e9 36 03 00 00       	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c0017111:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017116:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001711a:	e9 28 03 00 00       	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c001711f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017124:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017127:	74 2b                	je     c0017154 <Vm::faultHandler(regs*)+0x3c8>
c0017129:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017130:	76 22                	jbe    c0017154 <Vm::faultHandler(regs*)+0x3c8>
c0017132:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017136:	50                   	push   eax
c0017137:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001713b:	50                   	push   eax
c001713c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017140:	50                   	push   eax
c0017141:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017145:	50                   	push   eax
c0017146:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001714a:	50                   	push   eax
c001714b:	6a 6c                	push   0x6c
c001714d:	6a 6c                	push   0x6c
c001714f:	e9 c0 01 00 00       	jmp    c0017314 <Vm::faultHandler(regs*)+0x588>
c0017154:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017158:	83 ec 0c             	sub    esp,0xc
c001715b:	0f b7 f6             	movzx  esi,si
c001715e:	50                   	push   eax
c001715f:	e8 21 f7 ff ff       	call   c0016885 <Vm::inbv(unsigned short)>
c0017164:	83 c4 0c             	add    esp,0xc
c0017167:	0f b6 c0             	movzx  eax,al
c001716a:	50                   	push   eax
c001716b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001716f:	50                   	push   eax
c0017170:	56                   	push   esi
c0017171:	e8 d6 fb ff ff       	call   c0016d4c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017176:	83 c4 10             	add    esp,0x10
c0017179:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001717c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017180:	74 03                	je     c0017185 <Vm::faultHandler(regs*)+0x3f9>
c0017182:	48                   	dec    eax
c0017183:	eb 01                	jmp    c0017186 <Vm::faultHandler(regs*)+0x3fa>
c0017185:	40                   	inc    eax
c0017186:	0f b7 c0             	movzx  eax,ax
c0017189:	e9 8e 00 00 00       	jmp    c001721c <Vm::faultHandler(regs*)+0x490>
c001718e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017193:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017196:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017199:	74 29                	je     c00171c4 <Vm::faultHandler(regs*)+0x438>
c001719b:	3d ff ff 00 00       	cmp    eax,0xffff
c00171a0:	76 22                	jbe    c00171c4 <Vm::faultHandler(regs*)+0x438>
c00171a2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00171a6:	50                   	push   eax
c00171a7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171ab:	50                   	push   eax
c00171ac:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171b0:	50                   	push   eax
c00171b1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00171b5:	50                   	push   eax
c00171b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171ba:	50                   	push   eax
c00171bb:	6a 6d                	push   0x6d
c00171bd:	6a 6d                	push   0x6d
c00171bf:	e9 50 01 00 00       	jmp    c0017314 <Vm::faultHandler(regs*)+0x588>
c00171c4:	83 e5 01             	and    ebp,0x1
c00171c7:	0f b7 c8             	movzx  ecx,ax
c00171ca:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00171cd:	0f b7 f6             	movzx  esi,si
c00171d0:	74 1e                	je     c00171f0 <Vm::faultHandler(regs*)+0x464>
c00171d2:	ed                   	in     eax,dx
c00171d3:	55                   	push   ebp
c00171d4:	50                   	push   eax
c00171d5:	51                   	push   ecx
c00171d6:	56                   	push   esi
c00171d7:	e8 9b fb ff ff       	call   c0016d77 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00171dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	8d 50 04             	lea    edx,[eax+0x4]
c00171e5:	83 e8 04             	sub    eax,0x4
c00171e8:	81 e2 ff ff 00 00    	and    edx,0xffff
c00171ee:	eb 20                	jmp    c0017210 <Vm::faultHandler(regs*)+0x484>
c00171f0:	66 ed                	in     ax,dx
c00171f2:	57                   	push   edi
c00171f3:	0f b7 c0             	movzx  eax,ax
c00171f6:	50                   	push   eax
c00171f7:	51                   	push   ecx
c00171f8:	56                   	push   esi
c00171f9:	e8 63 fb ff ff       	call   c0016d61 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00171fe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017201:	83 c4 10             	add    esp,0x10
c0017204:	8d 50 02             	lea    edx,[eax+0x2]
c0017207:	83 e8 02             	sub    eax,0x2
c001720a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017210:	25 ff ff 00 00       	and    eax,0xffff
c0017215:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017219:	0f 44 c2             	cmove  eax,edx
c001721c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001721f:	e9 23 02 00 00       	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c0017224:	8d 46 ff             	lea    eax,[esi-0x1]
c0017227:	0f b6 f0             	movzx  esi,al
c001722a:	83 fe 05             	cmp    esi,0x5
c001722d:	77 23                	ja     c0017252 <Vm::faultHandler(regs*)+0x4c6>
c001722f:	ff 24 b5 ec 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd914]
c0017236:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001723b:	eb 15                	jmp    c0017252 <Vm::faultHandler(regs*)+0x4c6>
c001723d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017241:	eb 0f                	jmp    c0017252 <Vm::faultHandler(regs*)+0x4c6>
c0017243:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017247:	eb 09                	jmp    c0017252 <Vm::faultHandler(regs*)+0x4c6>
c0017249:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001724d:	eb 03                	jmp    c0017252 <Vm::faultHandler(regs*)+0x4c6>
c001724f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017252:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017257:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001725a:	74 29                	je     c0017285 <Vm::faultHandler(regs*)+0x4f9>
c001725c:	3d ff ff 00 00       	cmp    eax,0xffff
c0017261:	76 22                	jbe    c0017285 <Vm::faultHandler(regs*)+0x4f9>
c0017263:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017267:	50                   	push   eax
c0017268:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001726c:	50                   	push   eax
c001726d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017271:	50                   	push   eax
c0017272:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017276:	50                   	push   eax
c0017277:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001727b:	50                   	push   eax
c001727c:	6a 6e                	push   0x6e
c001727e:	6a 6e                	push   0x6e
c0017280:	e9 8f 00 00 00       	jmp    c0017314 <Vm::faultHandler(regs*)+0x588>
c0017285:	52                   	push   edx
c0017286:	0f b7 c0             	movzx  eax,ax
c0017289:	52                   	push   edx
c001728a:	50                   	push   eax
c001728b:	57                   	push   edi
c001728c:	e8 87 fa ff ff       	call   c0016d18 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017291:	59                   	pop    ecx
c0017292:	5e                   	pop    esi
c0017293:	0f b6 c0             	movzx  eax,al
c0017296:	50                   	push   eax
c0017297:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001729b:	50                   	push   eax
c001729c:	e8 f7 f5 ff ff       	call   c0016898 <Vm::outbv(unsigned short, unsigned char)>
c00172a1:	83 c4 10             	add    esp,0x10
c00172a4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00172a7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00172ab:	74 03                	je     c00172b0 <Vm::faultHandler(regs*)+0x524>
c00172ad:	48                   	dec    eax
c00172ae:	eb 01                	jmp    c00172b1 <Vm::faultHandler(regs*)+0x525>
c00172b0:	40                   	inc    eax
c00172b1:	0f b7 c0             	movzx  eax,ax
c00172b4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00172b7:	e9 8b 01 00 00       	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c00172bc:	8d 46 ff             	lea    eax,[esi-0x1]
c00172bf:	0f b6 f0             	movzx  esi,al
c00172c2:	83 fe 05             	cmp    esi,0x5
c00172c5:	77 1e                	ja     c00172e5 <Vm::faultHandler(regs*)+0x559>
c00172c7:	ff 24 b5 04 27 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd8fc]
c00172ce:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00172d2:	eb 11                	jmp    c00172e5 <Vm::faultHandler(regs*)+0x559>
c00172d4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00172d7:	eb 0c                	jmp    c00172e5 <Vm::faultHandler(regs*)+0x559>
c00172d9:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00172dc:	eb 07                	jmp    c00172e5 <Vm::faultHandler(regs*)+0x559>
c00172de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00172e1:	eb 02                	jmp    c00172e5 <Vm::faultHandler(regs*)+0x559>
c00172e3:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00172e5:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00172ea:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00172ed:	74 37                	je     c0017326 <Vm::faultHandler(regs*)+0x59a>
c00172ef:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00172f5:	76 2f                	jbe    c0017326 <Vm::faultHandler(regs*)+0x59a>
c00172f7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172fb:	50                   	push   eax
c00172fc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017300:	50                   	push   eax
c0017301:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017305:	50                   	push   eax
c0017306:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001730a:	50                   	push   eax
c001730b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001730f:	50                   	push   eax
c0017310:	6a 6f                	push   0x6f
c0017312:	6a 6f                	push   0x6f
c0017314:	68 90 26 02 c0       	push   0xc0022690
c0017319:	e8 ec 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001731e:	83 c4 20             	add    esp,0x20
c0017321:	e9 86 01 00 00       	jmp    c00174ac <Vm::faultHandler(regs*)+0x720>
c0017326:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017329:	0f b7 d7             	movzx  edx,di
c001732c:	0f b7 c6             	movzx  eax,si
c001732f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017332:	81 e1 00 04 00 00    	and    ecx,0x400
c0017338:	83 e5 01             	and    ebp,0x1
c001733b:	74 1c                	je     c0017359 <Vm::faultHandler(regs*)+0x5cd>
c001733d:	55                   	push   ebp
c001733e:	55                   	push   ebp
c001733f:	50                   	push   eax
c0017340:	52                   	push   edx
c0017341:	e8 f5 f9 ff ff       	call   c0016d3b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	89 fa                	mov    edx,edi
c001734b:	ef                   	out    dx,eax
c001734c:	8d 46 04             	lea    eax,[esi+0x4]
c001734f:	83 ee 04             	sub    esi,0x4
c0017352:	25 ff ff 00 00       	and    eax,0xffff
c0017357:	eb 1b                	jmp    c0017374 <Vm::faultHandler(regs*)+0x5e8>
c0017359:	55                   	push   ebp
c001735a:	55                   	push   ebp
c001735b:	50                   	push   eax
c001735c:	52                   	push   edx
c001735d:	e8 c7 f9 ff ff       	call   c0016d29 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017362:	83 c4 10             	add    esp,0x10
c0017365:	89 fa                	mov    edx,edi
c0017367:	66 ef                	out    dx,ax
c0017369:	8d 46 02             	lea    eax,[esi+0x2]
c001736c:	83 ee 02             	sub    esi,0x2
c001736f:	25 ff ff 00 00       	and    eax,0xffff
c0017374:	81 e6 ff ff 00 00    	and    esi,0xffff
c001737a:	85 c9                	test   ecx,ecx
c001737c:	0f 44 f0             	cmove  esi,eax
c001737f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017382:	e9 c0 00 00 00       	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c0017387:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001738e:	83 ec 0c             	sub    esp,0xc
c0017391:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017395:	50                   	push   eax
c0017396:	e8 ea f4 ff ff       	call   c0016885 <Vm::inbv(unsigned short)>
c001739b:	0f b6 c0             	movzx  eax,al
c001739e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00173a1:	eb 3a                	jmp    c00173dd <Vm::faultHandler(regs*)+0x651>
c00173a3:	83 e5 01             	and    ebp,0x1
c00173a6:	74 07                	je     c00173af <Vm::faultHandler(regs*)+0x623>
c00173a8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00173ac:	ed                   	in     eax,dx
c00173ad:	eb 14                	jmp    c00173c3 <Vm::faultHandler(regs*)+0x637>
c00173af:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00173b2:	66 31 f6             	xor    si,si
c00173b5:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00173b8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00173bc:	66 ed                	in     ax,dx
c00173be:	0f b7 c0             	movzx  eax,ax
c00173c1:	09 f0                	or     eax,esi
c00173c3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00173c6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00173ca:	eb 7e                	jmp    c001744a <Vm::faultHandler(regs*)+0x6be>
c00173cc:	52                   	push   edx
c00173cd:	52                   	push   edx
c00173ce:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173d2:	50                   	push   eax
c00173d3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173d7:	50                   	push   eax
c00173d8:	e8 bb f4 ff ff       	call   c0016898 <Vm::outbv(unsigned short, unsigned char)>
c00173dd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00173e1:	eb 4f                	jmp    c0017432 <Vm::faultHandler(regs*)+0x6a6>
c00173e3:	83 e5 01             	and    ebp,0x1
c00173e6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00173e9:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00173ed:	74 03                	je     c00173f2 <Vm::faultHandler(regs*)+0x666>
c00173ef:	ef                   	out    dx,eax
c00173f0:	eb d4                	jmp    c00173c6 <Vm::faultHandler(regs*)+0x63a>
c00173f2:	66 ef                	out    dx,ax
c00173f4:	eb d0                	jmp    c00173c6 <Vm::faultHandler(regs*)+0x63a>
c00173f6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173fa:	83 ec 0c             	sub    esp,0xc
c00173fd:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017404:	50                   	push   eax
c0017405:	e8 7b f4 ff ff       	call   c0016885 <Vm::inbv(unsigned short)>
c001740a:	0f b6 c0             	movzx  eax,al
c001740d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017410:	eb 1d                	jmp    c001742f <Vm::faultHandler(regs*)+0x6a3>
c0017412:	83 e5 01             	and    ebp,0x1
c0017415:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017418:	74 03                	je     c001741d <Vm::faultHandler(regs*)+0x691>
c001741a:	ed                   	in     eax,dx
c001741b:	eb 0d                	jmp    c001742a <Vm::faultHandler(regs*)+0x69e>
c001741d:	66 ed                	in     ax,dx
c001741f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017422:	0f b7 c0             	movzx  eax,ax
c0017425:	66 31 d2             	xor    dx,dx
c0017428:	09 d0                	or     eax,edx
c001742a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001742d:	eb 18                	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c001742f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017432:	83 c4 10             	add    esp,0x10
c0017435:	eb 13                	jmp    c001744a <Vm::faultHandler(regs*)+0x6be>
c0017437:	83 e5 01             	and    ebp,0x1
c001743a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001743d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017440:	74 03                	je     c0017445 <Vm::faultHandler(regs*)+0x6b9>
c0017442:	ef                   	out    dx,eax
c0017443:	eb 02                	jmp    c0017447 <Vm::faultHandler(regs*)+0x6bb>
c0017445:	66 ef                	out    dx,ax
c0017447:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001744a:	b0 01                	mov    al,0x1
c001744c:	eb 60                	jmp    c00174ae <Vm::faultHandler(regs*)+0x722>
c001744e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017452:	50                   	push   eax
c0017453:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017457:	50                   	push   eax
c0017458:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001745c:	50                   	push   eax
c001745d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017461:	50                   	push   eax
c0017462:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017466:	50                   	push   eax
c0017467:	52                   	push   edx
c0017468:	52                   	push   edx
c0017469:	68 bd 26 02 c0       	push   0xc00226bd
c001746e:	e8 97 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017473:	83 c4 20             	add    esp,0x20
c0017476:	83 ec 0c             	sub    esp,0xc
c0017479:	6a 60                	push   0x60
c001747b:	e8 05 f4 ff ff       	call   c0016885 <Vm::inbv(unsigned short)>
c0017480:	83 c4 10             	add    esp,0x10
c0017483:	0f b6 d0             	movzx  edx,al
c0017486:	83 fa 1c             	cmp    edx,0x1c
c0017489:	74 05                	je     c0017490 <Vm::faultHandler(regs*)+0x704>
c001748b:	83 fa 5a             	cmp    edx,0x5a
c001748e:	75 e6                	jne    c0017476 <Vm::faultHandler(regs*)+0x6ea>
c0017490:	0f b6 c0             	movzx  eax,al
c0017493:	83 f8 1c             	cmp    eax,0x1c
c0017496:	74 05                	je     c001749d <Vm::faultHandler(regs*)+0x711>
c0017498:	83 f8 5a             	cmp    eax,0x5a
c001749b:	75 0f                	jne    c00174ac <Vm::faultHandler(regs*)+0x720>
c001749d:	83 ec 0c             	sub    esp,0xc
c00174a0:	6a 60                	push   0x60
c00174a2:	e8 de f3 ff ff       	call   c0016885 <Vm::inbv(unsigned short)>
c00174a7:	83 c4 10             	add    esp,0x10
c00174aa:	eb e4                	jmp    c0017490 <Vm::faultHandler(regs*)+0x704>
c00174ac:	31 c0                	xor    eax,eax
c00174ae:	83 c4 2c             	add    esp,0x2c
c00174b1:	5b                   	pop    ebx
c00174b2:	5e                   	pop    esi
c00174b3:	5f                   	pop    edi
c00174b4:	5d                   	pop    ebp
c00174b5:	c3                   	ret    

c00174b6 <noCopro(unsigned long)>:
c00174b6:	c3                   	ret    

c00174b7 <nmiHandler(regs*, void*)>:
c00174b7:	83 ec 0c             	sub    esp,0xc
c00174ba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00174bf:	83 ec 0c             	sub    esp,0xc
c00174c2:	50                   	push   eax
c00174c3:	e8 0e fe fe ff       	call   c00072d6 <Computer::handleNMI()>
c00174c8:	83 c4 10             	add    esp,0x10
c00174cb:	90                   	nop
c00174cc:	83 c4 0c             	add    esp,0xc
c00174cf:	c3                   	ret    

c00174d0 <doubleFault(regs*, void*)>:
c00174d0:	55                   	push   ebp
c00174d1:	89 e5                	mov    ebp,esp
c00174d3:	83 ec 08             	sub    esp,0x8
c00174d6:	83 ec 0c             	sub    esp,0xc
c00174d9:	68 1c 27 02 c0       	push   0xc002271c
c00174de:	e8 de 9d ff ff       	call   c00112c1 <KePanic(char const*)>
c00174e3:	83 c4 10             	add    esp,0x10
c00174e6:	90                   	nop
c00174e7:	c9                   	leave  
c00174e8:	c3                   	ret    

c00174e9 <displayDebugInfo(regs*)>:
c00174e9:	83 ec 1c             	sub    esp,0x1c
c00174ec:	0f 20 c0             	mov    eax,cr0
c00174ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174f3:	0f 20 d0             	mov    eax,cr2
c00174f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174fa:	0f 20 d8             	mov    eax,cr3
c00174fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017501:	0f 20 e0             	mov    eax,cr4
c0017504:	89 04 24             	mov    DWORD PTR [esp],eax
c0017507:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001750b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001750e:	83 ec 08             	sub    esp,0x8
c0017511:	50                   	push   eax
c0017512:	68 38 27 02 c0       	push   0xc0022738
c0017517:	e8 ee 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001751c:	83 c4 10             	add    esp,0x10
c001751f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017523:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017526:	83 ec 08             	sub    esp,0x8
c0017529:	50                   	push   eax
c001752a:	68 29 27 02 c0       	push   0xc0022729
c001752f:	e8 d6 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017534:	83 c4 10             	add    esp,0x10
c0017537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001753b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001753e:	83 ec 08             	sub    esp,0x8
c0017541:	50                   	push   eax
c0017542:	68 34 27 02 c0       	push   0xc0022734
c0017547:	e8 be 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017553:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017556:	83 ec 08             	sub    esp,0x8
c0017559:	50                   	push   eax
c001755a:	68 43 27 02 c0       	push   0xc0022743
c001755f:	e8 a6 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017564:	83 c4 10             	add    esp,0x10
c0017567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001756b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001756e:	83 ec 08             	sub    esp,0x8
c0017571:	50                   	push   eax
c0017572:	68 4e 27 02 c0       	push   0xc002274e
c0017577:	e8 8e 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001757c:	83 c4 10             	add    esp,0x10
c001757f:	83 ec 08             	sub    esp,0x8
c0017582:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017586:	68 59 27 02 c0       	push   0xc0022759
c001758b:	e8 7a 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017590:	83 c4 10             	add    esp,0x10
c0017593:	83 ec 08             	sub    esp,0x8
c0017596:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001759a:	68 64 27 02 c0       	push   0xc0022764
c001759f:	e8 66 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00175a4:	83 c4 10             	add    esp,0x10
c00175a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175ab:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00175ae:	c1 e0 05             	shl    eax,0x5
c00175b1:	8d 90 e0 36 02 c0    	lea    edx,[eax-0x3ffdc920]
c00175b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175bb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00175be:	83 ec 04             	sub    esp,0x4
c00175c1:	52                   	push   edx
c00175c2:	50                   	push   eax
c00175c3:	68 6f 27 02 c0       	push   0xc002276f
c00175c8:	e8 3d 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00175cd:	83 c4 10             	add    esp,0x10
c00175d0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175db:	83 ec 0c             	sub    esp,0xc
c00175de:	50                   	push   eax
c00175df:	e8 8b 11 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00175e4:	83 c4 10             	add    esp,0x10
c00175e7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175f2:	83 ec 08             	sub    esp,0x8
c00175f5:	68 7e 27 02 c0       	push   0xc002277e
c00175fa:	50                   	push   eax
c00175fb:	e8 ac 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017600:	83 c4 10             	add    esp,0x10
c0017603:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017608:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001760e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017612:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017615:	83 ec 08             	sub    esp,0x8
c0017618:	52                   	push   edx
c0017619:	50                   	push   eax
c001761a:	e8 47 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001761f:	83 c4 10             	add    esp,0x10
c0017622:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017627:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001762d:	83 ec 08             	sub    esp,0x8
c0017630:	68 8c 27 02 c0       	push   0xc002278c
c0017635:	50                   	push   eax
c0017636:	e8 71 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001763b:	83 c4 10             	add    esp,0x10
c001763e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017643:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017649:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001764e:	8b 12                	mov    edx,DWORD PTR [edx]
c0017650:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017653:	83 c2 0c             	add    edx,0xc
c0017656:	83 ec 08             	sub    esp,0x8
c0017659:	52                   	push   edx
c001765a:	50                   	push   eax
c001765b:	e8 4c 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017660:	83 c4 10             	add    esp,0x10
c0017663:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017668:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001766e:	83 ec 08             	sub    esp,0x8
c0017671:	68 95 27 02 c0       	push   0xc0022795
c0017676:	50                   	push   eax
c0017677:	e8 30 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001767c:	83 c4 10             	add    esp,0x10
c001767f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017684:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001768a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001768e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017691:	83 ec 08             	sub    esp,0x8
c0017694:	52                   	push   edx
c0017695:	50                   	push   eax
c0017696:	e8 cb 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001769b:	83 c4 10             	add    esp,0x10
c001769e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176a9:	83 ec 08             	sub    esp,0x8
c00176ac:	68 9d 27 02 c0       	push   0xc002279d
c00176b1:	50                   	push   eax
c00176b2:	e8 f5 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176c9:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00176cc:	83 ec 08             	sub    esp,0x8
c00176cf:	52                   	push   edx
c00176d0:	50                   	push   eax
c00176d1:	e8 90 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176d6:	83 c4 10             	add    esp,0x10
c00176d9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176de:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176e4:	83 ec 08             	sub    esp,0x8
c00176e7:	68 a5 27 02 c0       	push   0xc00227a5
c00176ec:	50                   	push   eax
c00176ed:	e8 ba 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176f2:	83 c4 10             	add    esp,0x10
c00176f5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017700:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017704:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017707:	83 ec 08             	sub    esp,0x8
c001770a:	52                   	push   edx
c001770b:	50                   	push   eax
c001770c:	e8 55 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017711:	83 c4 10             	add    esp,0x10
c0017714:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017719:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001771f:	83 ec 08             	sub    esp,0x8
c0017722:	68 ad 27 02 c0       	push   0xc00227ad
c0017727:	50                   	push   eax
c0017728:	e8 7f 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001772d:	83 c4 10             	add    esp,0x10
c0017730:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017735:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001773b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001773f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017742:	83 ec 08             	sub    esp,0x8
c0017745:	52                   	push   edx
c0017746:	50                   	push   eax
c0017747:	e8 1a 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001774c:	83 c4 10             	add    esp,0x10
c001774f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017754:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001775a:	83 ec 08             	sub    esp,0x8
c001775d:	68 b5 27 02 c0       	push   0xc00227b5
c0017762:	50                   	push   eax
c0017763:	e8 44 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017768:	83 c4 10             	add    esp,0x10
c001776b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017770:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017776:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001777a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001777d:	83 ec 08             	sub    esp,0x8
c0017780:	52                   	push   edx
c0017781:	50                   	push   eax
c0017782:	e8 df 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017787:	83 c4 10             	add    esp,0x10
c001778a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001778f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017795:	83 ec 08             	sub    esp,0x8
c0017798:	68 bd 27 02 c0       	push   0xc00227bd
c001779d:	50                   	push   eax
c001779e:	e8 09 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00177a3:	83 c4 10             	add    esp,0x10
c00177a6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177b5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00177b8:	83 ec 08             	sub    esp,0x8
c00177bb:	52                   	push   edx
c00177bc:	50                   	push   eax
c00177bd:	e8 a4 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00177c2:	83 c4 10             	add    esp,0x10
c00177c5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177d0:	83 ec 08             	sub    esp,0x8
c00177d3:	68 c5 27 02 c0       	push   0xc00227c5
c00177d8:	50                   	push   eax
c00177d9:	e8 ce 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00177de:	83 c4 10             	add    esp,0x10
c00177e1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177ec:	83 ec 08             	sub    esp,0x8
c00177ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00177f3:	50                   	push   eax
c00177f4:	e8 6d 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00177f9:	83 c4 10             	add    esp,0x10
c00177fc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017801:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017807:	83 ec 08             	sub    esp,0x8
c001780a:	68 ce 27 02 c0       	push   0xc00227ce
c001780f:	50                   	push   eax
c0017810:	e8 97 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017815:	83 c4 10             	add    esp,0x10
c0017818:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001781d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017823:	83 ec 08             	sub    esp,0x8
c0017826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001782a:	50                   	push   eax
c001782b:	e8 36 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017830:	83 c4 10             	add    esp,0x10
c0017833:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017838:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001783e:	83 ec 08             	sub    esp,0x8
c0017841:	68 d6 27 02 c0       	push   0xc00227d6
c0017846:	50                   	push   eax
c0017847:	e8 60 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001784c:	83 c4 10             	add    esp,0x10
c001784f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017854:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001785a:	83 ec 08             	sub    esp,0x8
c001785d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017861:	50                   	push   eax
c0017862:	e8 ff 11 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017867:	83 c4 10             	add    esp,0x10
c001786a:	fa                   	cli    
c001786b:	f4                   	hlt    
c001786c:	eb fe                	jmp    c001786c <displayDebugInfo(regs*)+0x383>

c001786e <HalSystemIdle()>:
c001786e:	56                   	push   esi
c001786f:	53                   	push   ebx
c0017870:	83 ec 14             	sub    esp,0x14
c0017873:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017878:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001787e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017884:	83 e0 04             	and    eax,0x4
c0017887:	0f b6 c0             	movzx  eax,al
c001788a:	85 c0                	test   eax,eax
c001788c:	0f 95 c0             	setne  al
c001788f:	0f b6 c0             	movzx  eax,al
c0017892:	85 c0                	test   eax,eax
c0017894:	74 4c                	je     c00178e2 <HalSystemIdle()+0x74>
c0017896:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001789b:	83 ec 08             	sub    esp,0x8
c001789e:	68 e1 00 00 00       	push   0xe1
c00178a3:	50                   	push   eax
c00178a4:	e8 39 f8 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00178a9:	83 c4 10             	add    esp,0x10
c00178ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00178b4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00178b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178bd:	83 e2 02             	and    edx,0x2
c00178c0:	89 d3                	mov    ebx,edx
c00178c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178c6:	83 e2 00             	and    edx,0x0
c00178c9:	89 d6                	mov    esi,edx
c00178cb:	56                   	push   esi
c00178cc:	53                   	push   ebx
c00178cd:	68 e1 00 00 00       	push   0xe1
c00178d2:	50                   	push   eax
c00178d3:	e8 36 f8 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00178d8:	83 c4 10             	add    esp,0x10
c00178db:	e8 b4 88 fe ff       	call   c0000194 <doTPAUSE>
c00178e0:	eb 01                	jmp    c00178e3 <HalSystemIdle()+0x75>
c00178e2:	f4                   	hlt    
c00178e3:	90                   	nop
c00178e4:	83 c4 14             	add    esp,0x14
c00178e7:	5b                   	pop    ebx
c00178e8:	5e                   	pop    esi
c00178e9:	c3                   	ret    

c00178ea <displayProgramFault(char const*)>:
c00178ea:	83 ec 0c             	sub    esp,0xc
c00178ed:	83 ec 0c             	sub    esp,0xc
c00178f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178f4:	e8 11 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178f9:	83 c4 10             	add    esp,0x10
c00178fc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017901:	8b 00                	mov    eax,DWORD PTR [eax]
c0017903:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017906:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001790c:	85 c0                	test   eax,eax
c001790e:	74 21                	je     c0017931 <displayProgramFault(char const*)+0x47>
c0017910:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017915:	8b 00                	mov    eax,DWORD PTR [eax]
c0017917:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001791a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017920:	6a 04                	push   0x4
c0017922:	6a 0f                	push   0xf
c0017924:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017928:	50                   	push   eax
c0017929:	e8 f0 11 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001792e:	83 c4 10             	add    esp,0x10
c0017931:	90                   	nop
c0017932:	83 c4 0c             	add    esp,0xc
c0017935:	c3                   	ret    

c0017936 <gpFault(regs*, void*)>:
c0017936:	83 ec 1c             	sub    esp,0x1c
c0017939:	c7 05 74 97 02 c0 8c 6d 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016d8c
c0017943:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017948:	85 c0                	test   eax,eax
c001794a:	74 1e                	je     c001796a <gpFault(regs*, void*)+0x34>
c001794c:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017951:	83 ec 0c             	sub    esp,0xc
c0017954:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017958:	ff d0                	call   eax
c001795a:	83 c4 10             	add    esp,0x10
c001795d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017961:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017966:	85 c0                	test   eax,eax
c0017968:	75 2e                	jne    c0017998 <gpFault(regs*, void*)+0x62>
c001796a:	83 ec 0c             	sub    esp,0xc
c001796d:	68 de 27 02 c0       	push   0xc00227de
c0017972:	e8 73 ff ff ff       	call   c00178ea <displayProgramFault(char const*)>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	83 ec 0c             	sub    esp,0xc
c001797d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017981:	e8 63 fb ff ff       	call   c00174e9 <displayDebugInfo(regs*)>
c0017986:	83 c4 10             	add    esp,0x10
c0017989:	83 ec 0c             	sub    esp,0xc
c001798c:	6a 00                	push   0x0
c001798e:	e8 99 ed ff ff       	call   c001672c <Thr::terminateFromIRQ(int)>
c0017993:	83 c4 10             	add    esp,0x10
c0017996:	eb 01                	jmp    c0017999 <gpFault(regs*, void*)+0x63>
c0017998:	90                   	nop
c0017999:	83 c4 1c             	add    esp,0x1c
c001799c:	c3                   	ret    

c001799d <pgFault(regs*, void*)>:
c001799d:	83 ec 1c             	sub    esp,0x1c
c00179a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00179a7:	0f 20 d0             	mov    eax,cr2
c00179aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179b2:	83 ec 04             	sub    esp,0x4
c00179b5:	52                   	push   edx
c00179b6:	50                   	push   eax
c00179b7:	68 bc 28 02 c0       	push   0xc00228bc
c00179bc:	e8 49 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179c1:	83 c4 10             	add    esp,0x10
c00179c4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00179c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00179cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179ce:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00179d4:	0f 20 d2             	mov    edx,cr2
c00179d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00179db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179df:	83 ec 08             	sub    esp,0x8
c00179e2:	52                   	push   edx
c00179e3:	50                   	push   eax
c00179e4:	e8 91 29 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c00179e9:	83 c4 10             	add    esp,0x10
c00179ec:	0f b6 c0             	movzx  eax,al
c00179ef:	85 c0                	test   eax,eax
c00179f1:	75 2e                	jne    c0017a21 <pgFault(regs*, void*)+0x84>
c00179f3:	83 ec 0c             	sub    esp,0xc
c00179f6:	68 f7 27 02 c0       	push   0xc00227f7
c00179fb:	e8 ea fe ff ff       	call   c00178ea <displayProgramFault(char const*)>
c0017a00:	83 c4 10             	add    esp,0x10
c0017a03:	83 ec 0c             	sub    esp,0xc
c0017a06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a0a:	e8 da fa ff ff       	call   c00174e9 <displayDebugInfo(regs*)>
c0017a0f:	83 c4 10             	add    esp,0x10
c0017a12:	83 ec 0c             	sub    esp,0xc
c0017a15:	6a 00                	push   0x0
c0017a17:	e8 10 ed ff ff       	call   c001672c <Thr::terminateFromIRQ(int)>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	eb 01                	jmp    c0017a22 <pgFault(regs*, void*)+0x85>
c0017a21:	90                   	nop
c0017a22:	83 c4 1c             	add    esp,0x1c
c0017a25:	c3                   	ret    

c0017a26 <otherISRHandler(regs*, void*)>:
c0017a26:	83 ec 0c             	sub    esp,0xc
c0017a29:	83 ec 0c             	sub    esp,0xc
c0017a2c:	68 e4 28 02 c0       	push   0xc00228e4
c0017a31:	e8 b4 fe ff ff       	call   c00178ea <displayProgramFault(char const*)>
c0017a36:	83 c4 10             	add    esp,0x10
c0017a39:	83 ec 0c             	sub    esp,0xc
c0017a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a40:	e8 a4 fa ff ff       	call   c00174e9 <displayDebugInfo(regs*)>
c0017a45:	83 c4 10             	add    esp,0x10
c0017a48:	83 ec 0c             	sub    esp,0xc
c0017a4b:	6a 00                	push   0x0
c0017a4d:	e8 da ec ff ff       	call   c001672c <Thr::terminateFromIRQ(int)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	90                   	nop
c0017a56:	83 c4 0c             	add    esp,0xc
c0017a59:	c3                   	ret    

c0017a5a <opcodeFault(regs*, void*)>:
c0017a5a:	55                   	push   ebp
c0017a5b:	89 e5                	mov    ebp,esp
c0017a5d:	83 ec 08             	sub    esp,0x8
c0017a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a66:	83 ec 08             	sub    esp,0x8
c0017a69:	50                   	push   eax
c0017a6a:	68 02 28 02 c0       	push   0xc0022802
c0017a6f:	e8 96 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a74:	83 c4 10             	add    esp,0x10
c0017a77:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017a7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017a82:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017a88:	0f b6 c0             	movzx  eax,al
c0017a8b:	85 c0                	test   eax,eax
c0017a8d:	74 21                	je     c0017ab0 <opcodeFault(regs*, void*)+0x56>
c0017a8f:	83 ec 0c             	sub    esp,0xc
c0017a92:	68 0c 29 02 c0       	push   0xc002290c
c0017a97:	e8 6e 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a9c:	83 c4 10             	add    esp,0x10
c0017a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017aa2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017aa5:	8d 50 19             	lea    edx,[eax+0x19]
c0017aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017aab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017aae:	eb 2b                	jmp    c0017adb <opcodeFault(regs*, void*)+0x81>
c0017ab0:	83 ec 0c             	sub    esp,0xc
c0017ab3:	68 10 28 02 c0       	push   0xc0022810
c0017ab8:	e8 2d fe ff ff       	call   c00178ea <displayProgramFault(char const*)>
c0017abd:	83 c4 10             	add    esp,0x10
c0017ac0:	83 ec 0c             	sub    esp,0xc
c0017ac3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017ac6:	e8 1e fa ff ff       	call   c00174e9 <displayDebugInfo(regs*)>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	83 ec 0c             	sub    esp,0xc
c0017ad1:	6a 00                	push   0x0
c0017ad3:	e8 54 ec ff ff       	call   c001672c <Thr::terminateFromIRQ(int)>
c0017ad8:	83 c4 10             	add    esp,0x10
c0017adb:	c9                   	leave  
c0017adc:	c3                   	ret    

c0017add <i386SaveCoprocessor(void*)>:
c0017add:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ae1:	83 c0 3f             	add    eax,0x3f
c0017ae4:	83 e0 c0             	and    eax,0xffffffc0
c0017ae7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017aeb:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017af1 <i386LoadCoprocessor(void*)>:
c0017af1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017af5:	83 c0 3f             	add    eax,0x3f
c0017af8:	83 e0 c0             	and    eax,0xffffffc0
c0017afb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017aff:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017b05 <x87EmulHandler(regs*, void*)>:
c0017b05:	53                   	push   ebx
c0017b06:	83 ec 08             	sub    esp,0x8
c0017b09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b0e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017b12:	74 10                	je     c0017b24 <x87EmulHandler(regs*, void*)+0x1f>
c0017b14:	83 ec 0c             	sub    esp,0xc
c0017b17:	68 1d 28 02 c0       	push   0xc002281d
c0017b1c:	e8 a0 97 ff ff       	call   c00112c1 <KePanic(char const*)>
c0017b21:	83 c4 10             	add    esp,0x10
c0017b24:	0f 20 c0             	mov    eax,cr0
c0017b27:	a8 08                	test   al,0x8
c0017b29:	74 59                	je     c0017b84 <x87EmulHandler(regs*, void*)+0x7f>
c0017b2b:	0f 06                	clts   
c0017b2d:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017b32:	85 c0                	test   eax,eax
c0017b34:	74 0e                	je     c0017b44 <x87EmulHandler(regs*, void*)+0x3f>
c0017b36:	83 ec 0c             	sub    esp,0xc
c0017b39:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017b3c:	e8 9c ff ff ff       	call   c0017add <i386SaveCoprocessor(void*)>
c0017b41:	83 c4 10             	add    esp,0x10
c0017b44:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017b4a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017b4e:	75 12                	jne    c0017b62 <x87EmulHandler(regs*, void*)+0x5d>
c0017b50:	83 ec 0c             	sub    esp,0xc
c0017b53:	68 40 02 00 00       	push   0x240
c0017b58:	e8 76 ff fe ff       	call   c0007ad3 <malloc>
c0017b5d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017b60:	eb 10                	jmp    c0017b72 <x87EmulHandler(regs*, void*)+0x6d>
c0017b62:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017b67:	83 ec 0c             	sub    esp,0xc
c0017b6a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017b6d:	e8 7f ff ff ff       	call   c0017af1 <i386LoadCoprocessor(void*)>
c0017b72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b77:	83 c4 10             	add    esp,0x10
c0017b7a:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017b7f:	83 c4 08             	add    esp,0x8
c0017b82:	5b                   	pop    ebx
c0017b83:	c3                   	ret    
c0017b84:	83 ec 0c             	sub    esp,0xc
c0017b87:	68 31 28 02 c0       	push   0xc0022831
c0017b8c:	e8 79 2d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017b91:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017b99:	83 c4 18             	add    esp,0x18
c0017b9c:	5b                   	pop    ebx
c0017b9d:	e9 8a eb ff ff       	jmp    c001672c <Thr::terminateFromIRQ(int)>

c0017ba2 <HalInitialiseCoprocessor()>:
c0017ba2:	83 ec 10             	sub    esp,0x10
c0017ba5:	6a 00                	push   0x0
c0017ba7:	68 05 7b 01 c0       	push   0xc0017b05
c0017bac:	6a 07                	push   0x7
c0017bae:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017bb8:	e8 9d 50 ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bbd:	e8 ae 70 00 00       	call   c001ec70 <avxDetect>
c0017bc2:	83 c4 10             	add    esp,0x10
c0017bc5:	85 c0                	test   eax,eax
c0017bc7:	74 1c                	je     c0017be5 <HalInitialiseCoprocessor()+0x43>
c0017bc9:	c7 05 70 97 02 c0 9a ec 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ec9a
c0017bd3:	c7 05 6c 97 02 c0 ab ec 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ecab
c0017bdd:	83 c4 0c             	add    esp,0xc
c0017be0:	e9 d7 70 00 00       	jmp    c001ecbc <avxInit>
c0017be5:	e8 16 74 00 00       	call   c001f000 <absolutelyNoChanceInHell>
c0017bea:	85 c0                	test   eax,eax
c0017bec:	74 1c                	je     c0017c0a <HalInitialiseCoprocessor()+0x68>
c0017bee:	c7 05 70 97 02 c0 18 f0 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f018
c0017bf8:	c7 05 6c 97 02 c0 20 f0 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f020
c0017c02:	83 c4 0c             	add    esp,0xc
c0017c05:	e9 1e 74 00 00       	jmp    c001f028 <sseInit>
c0017c0a:	e8 37 74 00 00       	call   c001f046 <x87Detect>
c0017c0f:	85 c0                	test   eax,eax
c0017c11:	74 1c                	je     c0017c2f <HalInitialiseCoprocessor()+0x8d>
c0017c13:	c7 05 70 97 02 c0 61 f0 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f061
c0017c1d:	c7 05 6c 97 02 c0 68 f0 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f068
c0017c27:	83 c4 0c             	add    esp,0xc
c0017c2a:	e9 40 74 00 00       	jmp    c001f06f <x87Init>
c0017c2f:	c7 05 70 97 02 c0 b6 74 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc00174b6
c0017c39:	c7 05 6c 97 02 c0 b6 74 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00174b6
c0017c43:	0f 20 c0             	mov    eax,cr0
c0017c46:	83 c8 04             	or     eax,0x4
c0017c49:	0f 22 c0             	mov    cr0,eax
c0017c4c:	83 c4 0c             	add    esp,0xc
c0017c4f:	c3                   	ret    

c0017c50 <HalPanic(char const*)>:
c0017c50:	53                   	push   ebx
c0017c51:	83 ec 10             	sub    esp,0x10
c0017c54:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c58:	fa                   	cli    
c0017c59:	53                   	push   ebx
c0017c5a:	68 47 28 02 c0       	push   0xc0022847
c0017c5f:	e8 a6 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017c64:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017c69:	83 c4 10             	add    esp,0x10
c0017c6c:	85 c0                	test   eax,eax
c0017c6e:	74 09                	je     c0017c79 <HalPanic(char const*)+0x29>
c0017c70:	83 ec 0c             	sub    esp,0xc
c0017c73:	53                   	push   ebx
c0017c74:	ff d0                	call   eax
c0017c76:	83 c4 10             	add    esp,0x10
c0017c79:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017c7e:	85 c0                	test   eax,eax
c0017c80:	0f 84 dc 00 00 00    	je     c0017d62 <HalPanic(char const*)+0x112>
c0017c86:	52                   	push   edx
c0017c87:	6a 01                	push   0x1
c0017c89:	6a 0f                	push   0xf
c0017c8b:	50                   	push   eax
c0017c8c:	e8 39 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c91:	59                   	pop    ecx
c0017c92:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c98:	e8 1d 0b ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017c9d:	58                   	pop    eax
c0017c9e:	5a                   	pop    edx
c0017c9f:	68 c4 0a 02 c0       	push   0xc0020ac4
c0017ca4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017caa:	e8 53 09 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017caf:	83 c4 0c             	add    esp,0xc
c0017cb2:	6a 01                	push   0x1
c0017cb4:	6a 0f                	push   0xf
c0017cb6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cbc:	e8 09 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017cc1:	59                   	pop    ecx
c0017cc2:	58                   	pop    eax
c0017cc3:	68 60 28 02 c0       	push   0xc0022860
c0017cc8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cce:	e8 d9 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017cd3:	83 c4 0c             	add    esp,0xc
c0017cd6:	6a 0f                	push   0xf
c0017cd8:	6a 01                	push   0x1
c0017cda:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ce0:	e8 e5 08 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ce5:	58                   	pop    eax
c0017ce6:	5a                   	pop    edx
c0017ce7:	68 69 28 02 c0       	push   0xc0022869
c0017cec:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cf2:	e8 b5 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017cf7:	83 c4 0c             	add    esp,0xc
c0017cfa:	6a 01                	push   0x1
c0017cfc:	6a 0f                	push   0xf
c0017cfe:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d04:	e8 c1 08 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d09:	59                   	pop    ecx
c0017d0a:	58                   	pop    eax
c0017d0b:	68 ad 28 02 c0       	push   0xc00228ad
c0017d10:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d16:	e8 91 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d1b:	58                   	pop    eax
c0017d1c:	5a                   	pop    edx
c0017d1d:	68 76 28 02 c0       	push   0xc0022876
c0017d22:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d28:	e8 7f 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d2d:	59                   	pop    ecx
c0017d2e:	58                   	pop    eax
c0017d2f:	68 b0 28 02 c0       	push   0xc00228b0
c0017d34:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d3a:	e8 6d 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d3f:	58                   	pop    eax
c0017d40:	5a                   	pop    edx
c0017d41:	53                   	push   ebx
c0017d42:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d48:	e8 5f 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d4d:	59                   	pop    ecx
c0017d4e:	5b                   	pop    ebx
c0017d4f:	68 ad 28 02 c0       	push   0xc00228ad
c0017d54:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d5a:	e8 4d 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d5f:	83 c4 10             	add    esp,0x10
c0017d62:	eb fe                	jmp    c0017d62 <HalPanic(char const*)+0x112>

c0017d64 <HalQueryPerformanceCounter()>:
c0017d64:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d69:	31 d2                	xor    edx,edx
c0017d6b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017d71:	31 c0                	xor    eax,eax
c0017d73:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017d7a:	74 02                	je     c0017d7e <HalQueryPerformanceCounter()+0x1a>
c0017d7c:	0f 31                	rdtsc  
c0017d7e:	c3                   	ret    

c0017d7f <HalInitialise()>:
c0017d7f:	53                   	push   ebx
c0017d80:	83 ec 08             	sub    esp,0x8
c0017d83:	e8 09 51 ff ff       	call   c000ce91 <setupINTS()>
c0017d88:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d8d:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017d94:	75 0f                	jne    c0017da5 <HalInitialise()+0x26>
c0017d96:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d9c:	83 e2 fe             	and    edx,0xfffffffe
c0017d9f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017da5:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017dac:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017db2:	83 e2 fe             	and    edx,0xfffffffe
c0017db5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017dbb:	e8 a0 02 00 00       	call   c0018060 <picOpen()>
c0017dc0:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017dc7:	74 0a                	je     c0017dd3 <HalInitialise()+0x54>
c0017dc9:	e8 e2 01 00 00       	call   c0017fb0 <picDisable()>
c0017dce:	e8 0d 68 00 00       	call   c001e5e0 <apicOpen()>
c0017dd3:	50                   	push   eax
c0017dd4:	bb 0f 00 00 00       	mov    ebx,0xf
c0017dd9:	6a 00                	push   0x0
c0017ddb:	68 26 7a 01 c0       	push   0xc0017a26
c0017de0:	6a 00                	push   0x0
c0017de2:	e8 73 4e ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017de7:	83 c4 0c             	add    esp,0xc
c0017dea:	6a 00                	push   0x0
c0017dec:	68 26 7a 01 c0       	push   0xc0017a26
c0017df1:	6a 01                	push   0x1
c0017df3:	e8 62 4e ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017df8:	83 c4 0c             	add    esp,0xc
c0017dfb:	6a 00                	push   0x0
c0017dfd:	68 b7 74 01 c0       	push   0xc00174b7
c0017e02:	6a 02                	push   0x2
c0017e04:	e8 51 4e ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e09:	83 c4 0c             	add    esp,0xc
c0017e0c:	6a 00                	push   0x0
c0017e0e:	68 26 7a 01 c0       	push   0xc0017a26
c0017e13:	6a 03                	push   0x3
c0017e15:	e8 40 4e ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e1a:	83 c4 0c             	add    esp,0xc
c0017e1d:	6a 00                	push   0x0
c0017e1f:	68 26 7a 01 c0       	push   0xc0017a26
c0017e24:	6a 04                	push   0x4
c0017e26:	e8 2f 4e ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e2b:	83 c4 0c             	add    esp,0xc
c0017e2e:	6a 00                	push   0x0
c0017e30:	68 26 7a 01 c0       	push   0xc0017a26
c0017e35:	6a 05                	push   0x5
c0017e37:	e8 1e 4e ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e3c:	83 c4 0c             	add    esp,0xc
c0017e3f:	6a 00                	push   0x0
c0017e41:	68 5a 7a 01 c0       	push   0xc0017a5a
c0017e46:	6a 06                	push   0x6
c0017e48:	e8 0d 4e ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e4d:	83 c4 0c             	add    esp,0xc
c0017e50:	6a 00                	push   0x0
c0017e52:	68 d0 74 01 c0       	push   0xc00174d0
c0017e57:	6a 08                	push   0x8
c0017e59:	e8 fc 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e5e:	83 c4 0c             	add    esp,0xc
c0017e61:	6a 00                	push   0x0
c0017e63:	68 26 7a 01 c0       	push   0xc0017a26
c0017e68:	6a 09                	push   0x9
c0017e6a:	e8 eb 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e6f:	83 c4 0c             	add    esp,0xc
c0017e72:	6a 00                	push   0x0
c0017e74:	68 26 7a 01 c0       	push   0xc0017a26
c0017e79:	6a 0a                	push   0xa
c0017e7b:	e8 da 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e80:	83 c4 0c             	add    esp,0xc
c0017e83:	6a 00                	push   0x0
c0017e85:	68 26 7a 01 c0       	push   0xc0017a26
c0017e8a:	6a 0b                	push   0xb
c0017e8c:	e8 c9 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e91:	83 c4 0c             	add    esp,0xc
c0017e94:	6a 00                	push   0x0
c0017e96:	68 36 79 01 c0       	push   0xc0017936
c0017e9b:	6a 0d                	push   0xd
c0017e9d:	e8 b8 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ea2:	83 c4 0c             	add    esp,0xc
c0017ea5:	6a 00                	push   0x0
c0017ea7:	68 9d 79 01 c0       	push   0xc001799d
c0017eac:	6a 0e                	push   0xe
c0017eae:	e8 a7 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017eb3:	83 c4 10             	add    esp,0x10
c0017eb6:	50                   	push   eax
c0017eb7:	6a 00                	push   0x0
c0017eb9:	68 26 7a 01 c0       	push   0xc0017a26
c0017ebe:	53                   	push   ebx
c0017ebf:	43                   	inc    ebx
c0017ec0:	e8 95 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ec5:	83 c4 10             	add    esp,0x10
c0017ec8:	83 fb 1e             	cmp    ebx,0x1e
c0017ecb:	75 e9                	jne    c0017eb6 <HalInitialise()+0x137>
c0017ecd:	50                   	push   eax
c0017ece:	6a 00                	push   0x0
c0017ed0:	68 8e 26 01 c0       	push   0xc001268e
c0017ed5:	6a 60                	push   0x60
c0017ed7:	e8 7e 4d ff ff       	call   c000cc5a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017edc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017ee1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017eeb:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017ef2:	e8 dc fb fe ff       	call   c0007ad3 <malloc>
c0017ef7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017efa:	89 c3                	mov    ebx,eax
c0017efc:	e8 37 09 00 00       	call   c0018838 <RTC::RTC()>
c0017f01:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017f0b:	5a                   	pop    edx
c0017f0c:	59                   	pop    ecx
c0017f0d:	53                   	push   ebx
c0017f0e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f14:	e8 0b 48 ff ff       	call   c000c724 <Device::addChild(Device*)>
c0017f19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017f1b:	6a 00                	push   0x0
c0017f1d:	6a 00                	push   0x0
c0017f1f:	6a 00                	push   0x0
c0017f21:	53                   	push   ebx
c0017f22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017f25:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017f2a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017f30:	83 c4 28             	add    esp,0x28
c0017f33:	5b                   	pop    ebx
c0017f34:	c3                   	ret    

c0017f35 <HalMakeBeep(int)>:
c0017f35:	53                   	push   ebx
c0017f36:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017f3a:	85 db                	test   ebx,ebx
c0017f3c:	75 07                	jne    c0017f45 <HalMakeBeep(int)+0x10>
c0017f3e:	e4 61                	in     al,0x61
c0017f40:	83 e0 fc             	and    eax,0xfffffffc
c0017f43:	eb 26                	jmp    c0017f6b <HalMakeBeep(int)+0x36>
c0017f45:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017f4a:	99                   	cdq    
c0017f4b:	f7 fb                	idiv   ebx
c0017f4d:	89 c1                	mov    ecx,eax
c0017f4f:	b0 b6                	mov    al,0xb6
c0017f51:	e6 43                	out    0x43,al
c0017f53:	88 c8                	mov    al,cl
c0017f55:	e6 42                	out    0x42,al
c0017f57:	89 c8                	mov    eax,ecx
c0017f59:	c1 e8 08             	shr    eax,0x8
c0017f5c:	e6 42                	out    0x42,al
c0017f5e:	e4 61                	in     al,0x61
c0017f60:	89 c2                	mov    edx,eax
c0017f62:	83 ca 03             	or     edx,0x3
c0017f65:	38 d0                	cmp    al,dl
c0017f67:	74 04                	je     c0017f6d <HalMakeBeep(int)+0x38>
c0017f69:	88 d0                	mov    al,dl
c0017f6b:	e6 61                	out    0x61,al
c0017f6d:	5b                   	pop    ebx
c0017f6e:	c3                   	ret    

c0017f6f <HalGetRand()>:
c0017f6f:	31 c0                	xor    eax,eax
c0017f71:	c3                   	ret    

c0017f72 <HalEndOfInterrupt(int)>:
c0017f72:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017f79:	74 23                	je     c0017f9e <HalEndOfInterrupt(int)+0x2c>
c0017f7b:	83 ec 14             	sub    esp,0x14
c0017f7e:	6a 1b                	push   0x1b
c0017f80:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f86:	e8 57 f1 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017f8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017f90:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017f9a:	83 c4 1c             	add    esp,0x1c
c0017f9d:	c3                   	ret    
c0017f9e:	e9 41 02 00 00       	jmp    c00181e4 <picEOI(int)>

c0017fa3 <HalRestart()>:
c0017fa3:	c3                   	ret    

c0017fa4 <HalShutdown()>:
c0017fa4:	c3                   	ret    

c0017fa5 <HalSleep()>:
c0017fa5:	c3                   	ret    
c0017fa6:	66 90                	xchg   ax,ax

c0017fa8 <picIoWait()>:
c0017fa8:	eb 00                	jmp    c0017faa <picIoWait()+0x2>
c0017faa:	eb 00                	jmp    c0017fac <picIoWait()+0x4>
c0017fac:	90                   	nop
c0017fad:	c3                   	ret    
c0017fae:	66 90                	xchg   ax,ax

c0017fb0 <picDisable()>:
c0017fb0:	83 ec 10             	sub    esp,0x10
c0017fb3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017fba:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017fbf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017fc3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017fc8:	ee                   	out    dx,al
c0017fc9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017fd0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017fd5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017fd9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017fde:	ee                   	out    dx,al
c0017fdf:	90                   	nop
c0017fe0:	83 c4 10             	add    esp,0x10
c0017fe3:	c3                   	ret    

c0017fe4 <picGetIRQReg(int)>:
c0017fe4:	83 ec 10             	sub    esp,0x10
c0017fe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017feb:	0f b6 c0             	movzx  eax,al
c0017fee:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017ff5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017ff9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017ffd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018002:	ee                   	out    dx,al
c0018003:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018007:	0f b6 c0             	movzx  eax,al
c001800a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018011:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018015:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018019:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001801e:	ee                   	out    dx,al
c001801f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018026:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001802b:	89 c2                	mov    edx,eax
c001802d:	ec                   	in     al,dx
c001802e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018032:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018036:	0f b6 c0             	movzx  eax,al
c0018039:	c1 e0 08             	shl    eax,0x8
c001803c:	89 c1                	mov    ecx,eax
c001803e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018045:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001804a:	89 c2                	mov    edx,eax
c001804c:	ec                   	in     al,dx
c001804d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018051:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018055:	0f b6 c0             	movzx  eax,al
c0018058:	09 c8                	or     eax,ecx
c001805a:	83 c4 10             	add    esp,0x10
c001805d:	c3                   	ret    
c001805e:	66 90                	xchg   ax,ax

c0018060 <picOpen()>:
c0018060:	83 ec 50             	sub    esp,0x50
c0018063:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001806a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001806f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018073:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018077:	ee                   	out    dx,al
c0018078:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001807f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018084:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018088:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001808c:	ee                   	out    dx,al
c001808d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018095:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001809d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00180a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180a8:	89 c2                	mov    edx,eax
c00180aa:	ec                   	in     al,dx
c00180ab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00180af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00180b3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00180b7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00180be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180c2:	89 c2                	mov    edx,eax
c00180c4:	ec                   	in     al,dx
c00180c5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00180c9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00180cd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00180d1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00180d8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00180dd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00180e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180e5:	ee                   	out    dx,al
c00180e6:	e8 bd fe ff ff       	call   c0017fa8 <picIoWait()>
c00180eb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00180f2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00180f7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00180fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180ff:	ee                   	out    dx,al
c0018100:	e8 a3 fe ff ff       	call   c0017fa8 <picIoWait()>
c0018105:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018109:	0f b6 c0             	movzx  eax,al
c001810c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018113:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018117:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001811b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001811f:	ee                   	out    dx,al
c0018120:	e8 83 fe ff ff       	call   c0017fa8 <picIoWait()>
c0018125:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018129:	0f b6 c0             	movzx  eax,al
c001812c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018133:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018137:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001813b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001813f:	ee                   	out    dx,al
c0018140:	e8 63 fe ff ff       	call   c0017fa8 <picIoWait()>
c0018145:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001814c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018151:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018155:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018159:	ee                   	out    dx,al
c001815a:	e8 49 fe ff ff       	call   c0017fa8 <picIoWait()>
c001815f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018166:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001816b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001816f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018173:	ee                   	out    dx,al
c0018174:	e8 2f fe ff ff       	call   c0017fa8 <picIoWait()>
c0018179:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018180:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018185:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018189:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001818d:	ee                   	out    dx,al
c001818e:	e8 15 fe ff ff       	call   c0017fa8 <picIoWait()>
c0018193:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001819a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001819f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00181a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00181a7:	ee                   	out    dx,al
c00181a8:	e8 fb fd ff ff       	call   c0017fa8 <picIoWait()>
c00181ad:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00181b2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00181b9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00181bd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00181c1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00181c5:	ee                   	out    dx,al
c00181c6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00181cb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00181d2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00181d6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00181da:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00181de:	ee                   	out    dx,al
c00181df:	90                   	nop
c00181e0:	83 c4 50             	add    esp,0x50
c00181e3:	c3                   	ret    

c00181e4 <picEOI(int)>:
c00181e4:	83 ec 10             	sub    esp,0x10
c00181e7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00181ec:	75 1e                	jne    c001820c <picEOI(int)+0x28>
c00181ee:	6a 0b                	push   0xb
c00181f0:	e8 ef fd ff ff       	call   c0017fe4 <picGetIRQReg(int)>
c00181f5:	83 c4 04             	add    esp,0x4
c00181f8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00181fd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018202:	25 80 00 00 00       	and    eax,0x80
c0018207:	74 73                	je     c001827c <picEOI(int)+0x98>
c0018209:	8d 76 00             	lea    esi,[esi+0x0]
c001820c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018211:	75 31                	jne    c0018244 <picEOI(int)+0x60>
c0018213:	6a 0b                	push   0xb
c0018215:	e8 ca fd ff ff       	call   c0017fe4 <picGetIRQReg(int)>
c001821a:	83 c4 04             	add    esp,0x4
c001821d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018222:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018226:	98                   	cwde   
c0018227:	85 c0                	test   eax,eax
c0018229:	78 19                	js     c0018244 <picEOI(int)+0x60>
c001822b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018232:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018237:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001823b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018240:	ee                   	out    dx,al
c0018241:	eb 3d                	jmp    c0018280 <picEOI(int)+0x9c>
c0018243:	90                   	nop
c0018244:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018249:	7e 19                	jle    c0018264 <picEOI(int)+0x80>
c001824b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018252:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018257:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001825b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018260:	ee                   	out    dx,al
c0018261:	8d 76 00             	lea    esi,[esi+0x0]
c0018264:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001826b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018270:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018274:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018279:	ee                   	out    dx,al
c001827a:	eb 04                	jmp    c0018280 <picEOI(int)+0x9c>
c001827c:	90                   	nop
c001827d:	8d 76 00             	lea    esi,[esi+0x0]
c0018280:	83 c4 10             	add    esp,0x10
c0018283:	c3                   	ret    

c0018284 <RTC::open(int, int, void*)>:
c0018284:	31 c0                	xor    eax,eax
c0018286:	c3                   	ret    
c0018287:	90                   	nop

c0018288 <RTC::close(int, int, void*)>:
c0018288:	31 c0                	xor    eax,eax
c001828a:	c3                   	ret    
c001828b:	90                   	nop

c001828c <RTC::timeInSecondsUTC()>:
c001828c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018290:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018296:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001829c:	c3                   	ret    
c001829d:	90                   	nop

c001829e <RTC::timeInDatetimeUTC()>:
c001829e:	53                   	push   ebx
c001829f:	83 ec 14             	sub    esp,0x14
c00182a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00182aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00182ac:	50                   	push   eax
c00182ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00182b0:	83 c4 0c             	add    esp,0xc
c00182b3:	52                   	push   edx
c00182b4:	50                   	push   eax
c00182b5:	53                   	push   ebx
c00182b6:	e8 dd 41 ff ff       	call   c000c498 <secondsToDatetime(unsigned long long)>
c00182bb:	89 d8                	mov    eax,ebx
c00182bd:	83 c4 14             	add    esp,0x14
c00182c0:	5b                   	pop    ebx
c00182c1:	c2 04 00             	ret    0x4

c00182c4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00182c4:	56                   	push   esi
c00182c5:	53                   	push   ebx
c00182c6:	83 ec 14             	sub    esp,0x14
c00182c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00182cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182cf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00182d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00182d6:	52                   	push   edx
c00182d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182df:	50                   	push   eax
c00182e0:	e8 b3 41 ff ff       	call   c000c498 <secondsToDatetime(unsigned long long)>
c00182e5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00182e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00182ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00182f5:	89 f0                	mov    eax,esi
c00182f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00182fb:	83 c4 20             	add    esp,0x20
c00182fe:	5b                   	pop    ebx
c00182ff:	5e                   	pop    esi
c0018300:	ff e0                	jmp    eax

c0018302 <RTC::~RTC()>:
c0018302:	83 ec 0c             	sub    esp,0xc
c0018305:	ba 4c 29 02 c0       	mov    edx,0xc002294c
c001830a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001830e:	89 10                	mov    DWORD PTR [eax],edx
c0018310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018314:	83 ec 0c             	sub    esp,0xc
c0018317:	50                   	push   eax
c0018318:	e8 07 3f ff ff       	call   c000c224 <Clock::~Clock()>
c001831d:	83 c4 10             	add    esp,0x10
c0018320:	90                   	nop
c0018321:	83 c4 0c             	add    esp,0xc
c0018324:	c3                   	ret    
c0018325:	90                   	nop

c0018326 <RTC::~RTC()>:
c0018326:	83 ec 0c             	sub    esp,0xc
c0018329:	83 ec 0c             	sub    esp,0xc
c001832c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018330:	e8 cd ff ff ff       	call   c0018302 <RTC::~RTC()>
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	83 ec 08             	sub    esp,0x8
c001833b:	68 60 01 00 00       	push   0x160
c0018340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018344:	e8 c3 24 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018349:	83 c4 10             	add    esp,0x10
c001834c:	83 c4 0c             	add    esp,0xc
c001834f:	c3                   	ret    

c0018350 <RTC::get_update_in_progress_flag()>:
c0018350:	83 ec 14             	sub    esp,0x14
c0018353:	6a 0a                	push   0xa
c0018355:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001835b:	e8 3a ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018360:	83 c4 1c             	add    esp,0x1c
c0018363:	0f b6 c0             	movzx  eax,al
c0018366:	c1 e8 07             	shr    eax,0x7
c0018369:	c3                   	ret    

c001836a <RTC::completeRTCRefresh()>:
c001836a:	55                   	push   ebp
c001836b:	57                   	push   edi
c001836c:	56                   	push   esi
c001836d:	53                   	push   ebx
c001836e:	83 ec 3c             	sub    esp,0x3c
c0018371:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018377:	83 ec 0c             	sub    esp,0xc
c001837a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001837e:	e8 cd ff ff ff       	call   c0018350 <RTC::get_update_in_progress_flag()>
c0018383:	83 c4 10             	add    esp,0x10
c0018386:	84 c0                	test   al,al
c0018388:	74 0e                	je     c0018398 <RTC::completeRTCRefresh()+0x2e>
c001838a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018390:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018396:	73 df                	jae    c0018377 <RTC::completeRTCRefresh()+0xd>
c0018398:	50                   	push   eax
c0018399:	50                   	push   eax
c001839a:	6a 00                	push   0x0
c001839c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183a2:	e8 f3 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183a7:	89 c7                	mov    edi,eax
c00183a9:	58                   	pop    eax
c00183aa:	5a                   	pop    edx
c00183ab:	6a 02                	push   0x2
c00183ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183b3:	e8 e2 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183b8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00183bc:	59                   	pop    ecx
c00183bd:	5b                   	pop    ebx
c00183be:	6a 04                	push   0x4
c00183c0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183c6:	e8 cf ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183cb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00183cf:	5e                   	pop    esi
c00183d0:	5d                   	pop    ebp
c00183d1:	6a 07                	push   0x7
c00183d3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183d9:	e8 bc ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183de:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00183e2:	58                   	pop    eax
c00183e3:	5a                   	pop    edx
c00183e4:	6a 08                	push   0x8
c00183e6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ec:	e8 a9 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183f1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00183f5:	59                   	pop    ecx
c00183f6:	5b                   	pop    ebx
c00183f7:	6a 09                	push   0x9
c00183f9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ff:	e8 96 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018404:	0f b6 c0             	movzx  eax,al
c0018407:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001840b:	83 c4 10             	add    esp,0x10
c001840e:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018414:	83 ec 0c             	sub    esp,0xc
c0018417:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001841b:	e8 30 ff ff ff       	call   c0018350 <RTC::get_update_in_progress_flag()>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	84 c0                	test   al,al
c0018425:	74 0e                	je     c0018435 <RTC::completeRTCRefresh()+0xcb>
c0018427:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001842d:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018433:	73 df                	jae    c0018414 <RTC::completeRTCRefresh()+0xaa>
c0018435:	51                   	push   ecx
c0018436:	51                   	push   ecx
c0018437:	6a 00                	push   0x0
c0018439:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001843f:	e8 56 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018444:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018448:	5b                   	pop    ebx
c0018449:	5e                   	pop    esi
c001844a:	6a 02                	push   0x2
c001844c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018452:	e8 43 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018457:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001845b:	5d                   	pop    ebp
c001845c:	58                   	pop    eax
c001845d:	6a 04                	push   0x4
c001845f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018465:	e8 30 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001846a:	88 c3                	mov    bl,al
c001846c:	58                   	pop    eax
c001846d:	5a                   	pop    edx
c001846e:	6a 07                	push   0x7
c0018470:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018476:	e8 1f ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001847b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001847f:	59                   	pop    ecx
c0018480:	5e                   	pop    esi
c0018481:	6a 08                	push   0x8
c0018483:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018489:	e8 0c ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001848e:	5d                   	pop    ebp
c001848f:	89 c6                	mov    esi,eax
c0018491:	58                   	pop    eax
c0018492:	6a 09                	push   0x9
c0018494:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001849a:	e8 fb ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001849f:	89 f9                	mov    ecx,edi
c00184a1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00184a5:	83 c4 10             	add    esp,0x10
c00184a8:	0f b6 e8             	movzx  ebp,al
c00184ab:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184b0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00184b4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00184b8:	74 27                	je     c00184e1 <RTC::completeRTCRefresh()+0x177>
c00184ba:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00184be:	89 f0                	mov    eax,esi
c00184c0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00184c4:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00184c8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00184cc:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00184d0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00184d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00184d8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00184dc:	e9 2d ff ff ff       	jmp    c001840e <RTC::completeRTCRefresh()+0xa4>
c00184e1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00184e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00184ea:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00184ee:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00184f2:	75 c6                	jne    c00184ba <RTC::completeRTCRefresh()+0x150>
c00184f4:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00184f9:	89 f1                	mov    ecx,esi
c00184fb:	0f b6 fb             	movzx  edi,bl
c00184fe:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018502:	0f b6 c9             	movzx  ecx,cl
c0018505:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018509:	89 f1                	mov    ecx,esi
c001850b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001850f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018513:	0f 94 c2             	sete   dl
c0018516:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001851a:	0f 94 c0             	sete   al
c001851d:	21 d0                	and    eax,edx
c001851f:	31 d2                	xor    edx,edx
c0018521:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018525:	0f 94 c2             	sete   dl
c0018528:	85 c2                	test   edx,eax
c001852a:	74 8e                	je     c00184ba <RTC::completeRTCRefresh()+0x150>
c001852c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018530:	75 88                	jne    c00184ba <RTC::completeRTCRefresh()+0x150>
c0018532:	52                   	push   edx
c0018533:	52                   	push   edx
c0018534:	6a 0b                	push   0xb
c0018536:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001853c:	e8 59 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018541:	83 c4 10             	add    esp,0x10
c0018544:	a8 04                	test   al,0x4
c0018546:	75 7a                	jne    c00185c2 <RTC::completeRTCRefresh()+0x258>
c0018548:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001854c:	c1 ef 04             	shr    edi,0x4
c001854f:	83 e6 0f             	and    esi,0xf
c0018552:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018556:	c1 ed 04             	shr    ebp,0x4
c0018559:	6b ed 0a             	imul   ebp,ebp,0xa
c001855c:	c1 ea 04             	shr    edx,0x4
c001855f:	6b d2 0a             	imul   edx,edx,0xa
c0018562:	83 e1 0f             	and    ecx,0xf
c0018565:	01 d1                	add    ecx,edx
c0018567:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001856b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001856f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018573:	c1 ea 04             	shr    edx,0x4
c0018576:	6b d2 0a             	imul   edx,edx,0xa
c0018579:	83 e1 0f             	and    ecx,0xf
c001857c:	01 d1                	add    ecx,edx
c001857e:	89 fa                	mov    edx,edi
c0018580:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018584:	83 e2 07             	and    edx,0x7
c0018587:	89 d9                	mov    ecx,ebx
c0018589:	6b d2 0a             	imul   edx,edx,0xa
c001858c:	83 e1 0f             	and    ecx,0xf
c001858f:	83 e3 80             	and    ebx,0xffffff80
c0018592:	01 d1                	add    ecx,edx
c0018594:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018598:	09 cb                	or     ebx,ecx
c001859a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001859e:	c1 ea 04             	shr    edx,0x4
c00185a1:	6b d2 0a             	imul   edx,edx,0xa
c00185a4:	83 e1 0f             	and    ecx,0xf
c00185a7:	01 d1                	add    ecx,edx
c00185a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185ad:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00185b1:	c1 ea 04             	shr    edx,0x4
c00185b4:	6b d2 0a             	imul   edx,edx,0xa
c00185b7:	01 d6                	add    esi,edx
c00185b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00185bd:	83 e2 0f             	and    edx,0xf
c00185c0:	01 d5                	add    ebp,edx
c00185c2:	a8 02                	test   al,0x2
c00185c4:	75 15                	jne    c00185db <RTC::completeRTCRefresh()+0x271>
c00185c6:	f6 c3 80             	test   bl,0x80
c00185c9:	74 10                	je     c00185db <RTC::completeRTCRefresh()+0x271>
c00185cb:	83 e3 7f             	and    ebx,0x7f
c00185ce:	b9 18 00 00 00       	mov    ecx,0x18
c00185d3:	8d 43 0c             	lea    eax,[ebx+0xc]
c00185d6:	99                   	cdq    
c00185d7:	f7 f9                	idiv   ecx
c00185d9:	88 d3                	mov    bl,dl
c00185db:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00185e1:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00185e7:	77 06                	ja     c00185ef <RTC::completeRTCRefresh()+0x285>
c00185e9:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00185ef:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185f4:	31 c9                	xor    ecx,ecx
c00185f6:	31 d2                	xor    edx,edx
c00185f8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00185fc:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018600:	89 cd                	mov    ebp,ecx
c0018602:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018606:	c1 e7 10             	shl    edi,0x10
c0018609:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001860f:	c1 e0 10             	shl    eax,0x10
c0018612:	09 c5                	or     ebp,eax
c0018614:	89 e9                	mov    ecx,ebp
c0018616:	0f b7 c2             	movzx  eax,dx
c0018619:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001861d:	09 f8                	or     eax,edi
c001861f:	89 c2                	mov    edx,eax
c0018621:	50                   	push   eax
c0018622:	50                   	push   eax
c0018623:	88 d9                	mov    cl,bl
c0018625:	51                   	push   ecx
c0018626:	52                   	push   edx
c0018627:	e8 e7 3c ff ff       	call   c000c313 <datetimeToSeconds(datetime_t)>
c001862c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018630:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018636:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001863c:	83 c4 4c             	add    esp,0x4c
c001863f:	5b                   	pop    ebx
c0018640:	5e                   	pop    esi
c0018641:	5f                   	pop    edi
c0018642:	5d                   	pop    ebp
c0018643:	c3                   	ret    

c0018644 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018644:	55                   	push   ebp
c0018645:	57                   	push   edi
c0018646:	56                   	push   esi
c0018647:	53                   	push   ebx
c0018648:	83 ec 30             	sub    esp,0x30
c001864b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001864f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018653:	6a 00                	push   0x0
c0018655:	6a 00                	push   0x0
c0018657:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001865d:	e8 50 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018662:	83 c4 0c             	add    esp,0xc
c0018665:	6a 00                	push   0x0
c0018667:	6a 02                	push   0x2
c0018669:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001866f:	e8 3e ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018674:	89 f8                	mov    eax,edi
c0018676:	89 f9                	mov    ecx,edi
c0018678:	0f b6 c4             	movzx  eax,ah
c001867b:	31 d2                	xor    edx,edx
c001867d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018681:	c1 e9 10             	shr    ecx,0x10
c0018684:	89 f0                	mov    eax,esi
c0018686:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001868a:	89 f0                	mov    eax,esi
c001868c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018690:	0f b6 c4             	movzx  eax,ah
c0018693:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018697:	89 f0                	mov    eax,esi
c0018699:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001869d:	c1 e8 10             	shr    eax,0x10
c00186a0:	b9 64 00 00 00       	mov    ecx,0x64
c00186a5:	f7 f1                	div    ecx
c00186a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00186ab:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00186af:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00186b3:	59                   	pop    ecx
c00186b4:	5b                   	pop    ebx
c00186b5:	89 fb                	mov    ebx,edi
c00186b7:	6a 0b                	push   0xb
c00186b9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186bf:	e8 d6 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186c4:	83 c4 10             	add    esp,0x10
c00186c7:	a8 04                	test   al,0x4
c00186c9:	89 c5                	mov    ebp,eax
c00186cb:	75 6e                	jne    c001873b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00186cd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186d1:	31 d2                	xor    edx,edx
c00186d3:	0f b6 c1             	movzx  eax,cl
c00186d6:	b9 0a 00 00 00       	mov    ecx,0xa
c00186db:	f7 f1                	div    ecx
c00186dd:	c1 e0 04             	shl    eax,0x4
c00186e0:	09 d0                	or     eax,edx
c00186e2:	31 d2                	xor    edx,edx
c00186e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186e8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00186ed:	f7 f1                	div    ecx
c00186ef:	c1 e0 04             	shl    eax,0x4
c00186f2:	09 d0                	or     eax,edx
c00186f4:	31 d2                	xor    edx,edx
c00186f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00186fa:	0f b6 c3             	movzx  eax,bl
c00186fd:	f7 f1                	div    ecx
c00186ff:	c1 e0 04             	shl    eax,0x4
c0018702:	09 d0                	or     eax,edx
c0018704:	31 d2                	xor    edx,edx
c0018706:	89 c3                	mov    ebx,eax
c0018708:	89 f0                	mov    eax,esi
c001870a:	0f b6 c0             	movzx  eax,al
c001870d:	f7 f1                	div    ecx
c001870f:	c1 e0 04             	shl    eax,0x4
c0018712:	09 d0                	or     eax,edx
c0018714:	31 d2                	xor    edx,edx
c0018716:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001871a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001871f:	f7 f1                	div    ecx
c0018721:	c1 e0 04             	shl    eax,0x4
c0018724:	09 d0                	or     eax,edx
c0018726:	31 d2                	xor    edx,edx
c0018728:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001872c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018730:	f7 f1                	div    ecx
c0018732:	c1 e0 04             	shl    eax,0x4
c0018735:	09 d0                	or     eax,edx
c0018737:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001873b:	83 e5 02             	and    ebp,0x2
c001873e:	75 1e                	jne    c001875e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018740:	0f b6 c3             	movzx  eax,bl
c0018743:	83 f8 0b             	cmp    eax,0xb
c0018746:	76 10                	jbe    c0018758 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018748:	8d 53 f4             	lea    edx,[ebx-0xc]
c001874b:	84 d2                	test   dl,dl
c001874d:	88 d3                	mov    bl,dl
c001874f:	75 02                	jne    c0018753 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018751:	b3 0c                	mov    bl,0xc
c0018753:	83 cb 80             	or     ebx,0xffffff80
c0018756:	eb 06                	jmp    c001875e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018758:	85 c0                	test   eax,eax
c001875a:	75 02                	jne    c001875e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001875c:	b3 0c                	mov    bl,0xc
c001875e:	50                   	push   eax
c001875f:	0f b6 db             	movzx  ebx,bl
c0018762:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018767:	52                   	push   edx
c0018768:	6a 00                	push   0x0
c001876a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018770:	e8 3d eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018775:	83 c4 0c             	add    esp,0xc
c0018778:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001877d:	50                   	push   eax
c001877e:	6a 02                	push   0x2
c0018780:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018786:	e8 27 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001878b:	83 c4 0c             	add    esp,0xc
c001878e:	53                   	push   ebx
c001878f:	6a 04                	push   0x4
c0018791:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018797:	e8 16 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001879c:	83 c4 0c             	add    esp,0xc
c001879f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00187a4:	52                   	push   edx
c00187a5:	6a 07                	push   0x7
c00187a7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187ad:	e8 00 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187b2:	83 c4 0c             	add    esp,0xc
c00187b5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00187ba:	50                   	push   eax
c00187bb:	6a 08                	push   0x8
c00187bd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187c3:	e8 ea ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187c8:	83 c4 0c             	add    esp,0xc
c00187cb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00187d0:	55                   	push   ebp
c00187d1:	6a 09                	push   0x9
c00187d3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187d9:	e8 d4 ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187de:	5a                   	pop    edx
c00187df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00187e3:	e8 82 fb ff ff       	call   c001836a <RTC::completeRTCRefresh()>
c00187e8:	83 c4 3c             	add    esp,0x3c
c00187eb:	b0 01                	mov    al,0x1
c00187ed:	5b                   	pop    ebx
c00187ee:	5e                   	pop    esi
c00187ef:	5f                   	pop    edi
c00187f0:	5d                   	pop    ebp
c00187f1:	c3                   	ret    

c00187f2 <rtcIRQHandler(regs*, void*)>:
c00187f2:	53                   	push   ebx
c00187f3:	83 ec 10             	sub    esp,0x10
c00187f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00187fa:	6a 0c                	push   0xc
c00187fc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018802:	e8 93 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018807:	83 c4 10             	add    esp,0x10
c001880a:	a8 80                	test   al,0x80
c001880c:	74 24                	je     c0018832 <rtcIRQHandler(regs*, void*)+0x40>
c001880e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018815:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001881c:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c0018823:	75 0d                	jne    c0018832 <rtcIRQHandler(regs*, void*)+0x40>
c0018825:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018829:	83 c4 08             	add    esp,0x8
c001882c:	5b                   	pop    ebx
c001882d:	e9 38 fb ff ff       	jmp    c001836a <RTC::completeRTCRefresh()>
c0018832:	83 c4 08             	add    esp,0x8
c0018835:	5b                   	pop    ebx
c0018836:	c3                   	ret    
c0018837:	90                   	nop

c0018838 <RTC::RTC()>:
c0018838:	83 ec 1c             	sub    esp,0x1c
c001883b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001883f:	83 ec 08             	sub    esp,0x8
c0018842:	68 2f 29 02 c0       	push   0xc002292f
c0018847:	50                   	push   eax
c0018848:	e8 a1 39 ff ff       	call   c000c1ee <Clock::Clock(char const*)>
c001884d:	83 c4 10             	add    esp,0x10
c0018850:	ba 4c 29 02 c0       	mov    edx,0xc002294c
c0018855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018859:	89 10                	mov    DWORD PTR [eax],edx
c001885b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001885f:	83 ec 0c             	sub    esp,0xc
c0018862:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018866:	6a 01                	push   0x1
c0018868:	68 f2 87 01 c0       	push   0xc00187f2
c001886d:	6a 08                	push   0x8
c001886f:	50                   	push   eax
c0018870:	e8 5b 3e ff ff       	call   c000c6d0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018875:	83 c4 20             	add    esp,0x20
c0018878:	89 c2                	mov    edx,eax
c001887a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001887e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018884:	fa                   	cli    
c0018885:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001888a:	83 c0 01             	add    eax,0x1
c001888d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018892:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018897:	83 ec 08             	sub    esp,0x8
c001889a:	6a 0b                	push   0xb
c001889c:	50                   	push   eax
c001889d:	e8 f8 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188a2:	83 c4 10             	add    esp,0x10
c00188a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00188a9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00188ae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00188b2:	83 ca 10             	or     edx,0x10
c00188b5:	0f b6 d2             	movzx  edx,dl
c00188b8:	83 ec 04             	sub    esp,0x4
c00188bb:	52                   	push   edx
c00188bc:	6a 0b                	push   0xb
c00188be:	50                   	push   eax
c00188bf:	e8 ee e9 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00188c4:	83 c4 10             	add    esp,0x10
c00188c7:	83 ec 0c             	sub    esp,0xc
c00188ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188ce:	e8 97 fa ff ff       	call   c001836a <RTC::completeRTCRefresh()>
c00188d3:	83 c4 10             	add    esp,0x10
c00188d6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00188db:	83 e8 01             	sub    eax,0x1
c00188de:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00188e3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00188e8:	85 c0                	test   eax,eax
c00188ea:	75 01                	jne    c00188ed <RTC::RTC()+0xb5>
c00188ec:	fb                   	sti    
c00188ed:	90                   	nop
c00188ee:	83 c4 1c             	add    esp,0x1c
c00188f1:	c3                   	ret    
c00188f2:	66 90                	xchg   ax,ax

c00188f4 <HalConsoleScroll(int, int)>:
c00188f4:	83 ec 10             	sub    esp,0x10
c00188f7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00188ff:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018907:	90                   	nop
c0018908:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001890d:	0f 8f e1 00 00 00    	jg     c00189f4 <HalConsoleScroll(int, int)+0x100>
c0018913:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001891b:	90                   	nop
c001891c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018924:	0f 8f be 00 00 00    	jg     c00189e8 <HalConsoleScroll(int, int)+0xf4>
c001892a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001892e:	89 d0                	mov    eax,edx
c0018930:	c1 e0 02             	shl    eax,0x2
c0018933:	01 d0                	add    eax,edx
c0018935:	c1 e0 05             	shl    eax,0x5
c0018938:	89 c2                	mov    edx,eax
c001893a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001893e:	01 d0                	add    eax,edx
c0018940:	89 c2                	mov    edx,eax
c0018942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018946:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018949:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001894d:	89 d0                	mov    eax,edx
c001894f:	c1 e0 02             	shl    eax,0x2
c0018952:	01 d0                	add    eax,edx
c0018954:	c1 e0 05             	shl    eax,0x5
c0018957:	89 c2                	mov    edx,eax
c0018959:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001895d:	01 d0                	add    eax,edx
c001895f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018965:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018969:	01 d0                	add    eax,edx
c001896b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001896d:	88 10                	mov    BYTE PTR [eax],dl
c001896f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018974:	75 66                	jne    c00189dc <HalConsoleScroll(int, int)+0xe8>
c0018976:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001897a:	83 e0 01             	and    eax,0x1
c001897d:	74 39                	je     c00189b8 <HalConsoleScroll(int, int)+0xc4>
c001897f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018983:	83 e0 0f             	and    eax,0xf
c0018986:	88 c2                	mov    dl,al
c0018988:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001898c:	c1 e0 04             	shl    eax,0x4
c001898f:	09 d0                	or     eax,edx
c0018991:	88 c1                	mov    cl,al
c0018993:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018997:	89 d0                	mov    eax,edx
c0018999:	c1 e0 02             	shl    eax,0x2
c001899c:	01 d0                	add    eax,edx
c001899e:	c1 e0 05             	shl    eax,0x5
c00189a1:	89 c2                	mov    edx,eax
c00189a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189a7:	01 d0                	add    eax,edx
c00189a9:	89 c2                	mov    edx,eax
c00189ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189af:	01 d0                	add    eax,edx
c00189b1:	88 ca                	mov    dl,cl
c00189b3:	88 10                	mov    BYTE PTR [eax],dl
c00189b5:	eb 25                	jmp    c00189dc <HalConsoleScroll(int, int)+0xe8>
c00189b7:	90                   	nop
c00189b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189bc:	89 d0                	mov    eax,edx
c00189be:	c1 e0 02             	shl    eax,0x2
c00189c1:	01 d0                	add    eax,edx
c00189c3:	c1 e0 05             	shl    eax,0x5
c00189c6:	89 c2                	mov    edx,eax
c00189c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189cc:	01 d0                	add    eax,edx
c00189ce:	89 c2                	mov    edx,eax
c00189d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189d4:	01 d0                	add    eax,edx
c00189d6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00189d9:	8d 76 00             	lea    esi,[esi+0x0]
c00189dc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00189e1:	e9 36 ff ff ff       	jmp    c001891c <HalConsoleScroll(int, int)+0x28>
c00189e6:	66 90                	xchg   ax,ax
c00189e8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00189ed:	e9 16 ff ff ff       	jmp    c0018908 <HalConsoleScroll(int, int)+0x14>
c00189f2:	66 90                	xchg   ax,ax
c00189f4:	90                   	nop
c00189f5:	83 c4 10             	add    esp,0x10
c00189f8:	c3                   	ret    
c00189f9:	8d 76 00             	lea    esi,[esi+0x0]

c00189fc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00189fc:	83 ec 14             	sub    esp,0x14
c00189ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a03:	88 04 24             	mov    BYTE PTR [esp],al
c0018a06:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018a09:	0f b6 c0             	movzx  eax,al
c0018a0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a10:	89 d1                	mov    ecx,edx
c0018a12:	83 e1 0f             	and    ecx,0xf
c0018a15:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018a19:	c1 e2 04             	shl    edx,0x4
c0018a1c:	0f b6 d2             	movzx  edx,dl
c0018a1f:	09 ca                	or     edx,ecx
c0018a21:	c1 e2 08             	shl    edx,0x8
c0018a24:	09 d0                	or     eax,edx
c0018a26:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018a2b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018a33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a37:	89 d0                	mov    eax,edx
c0018a39:	c1 e0 02             	shl    eax,0x2
c0018a3c:	01 d0                	add    eax,edx
c0018a3e:	c1 e0 04             	shl    eax,0x4
c0018a41:	89 c2                	mov    edx,eax
c0018a43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a47:	01 d0                	add    eax,edx
c0018a49:	d1 e0                	shl    eax,1
c0018a4b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018a4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a53:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018a58:	66 89 10             	mov    WORD PTR [eax],dx
c0018a5b:	90                   	nop
c0018a5c:	83 c4 14             	add    esp,0x14
c0018a5f:	c3                   	ret    

c0018a60 <HalConsoleCursorUpdate(int, int)>:
c0018a60:	83 ec 20             	sub    esp,0x20
c0018a63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a67:	89 c2                	mov    edx,eax
c0018a69:	c1 e2 02             	shl    edx,0x2
c0018a6c:	01 d0                	add    eax,edx
c0018a6e:	c1 e0 04             	shl    eax,0x4
c0018a71:	89 c2                	mov    edx,eax
c0018a73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a77:	01 d0                	add    eax,edx
c0018a79:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018a7e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018a85:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018a8a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018a8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a92:	ee                   	out    dx,al
c0018a93:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018a98:	0f b6 c0             	movzx  eax,al
c0018a9b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018aa2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018aa6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018aaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018aae:	ee                   	out    dx,al
c0018aaf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018ab6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018abb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018abf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ac3:	ee                   	out    dx,al
c0018ac4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018ac9:	c1 e8 08             	shr    eax,0x8
c0018acc:	0f b6 c0             	movzx  eax,al
c0018acf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018ad6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018ada:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018ade:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ae2:	ee                   	out    dx,al
c0018ae3:	90                   	nop
c0018ae4:	83 c4 20             	add    esp,0x20
c0018ae7:	c3                   	ret    

c0018ae8 <FAT::getName()>:
c0018ae8:	b8 80 29 02 c0       	mov    eax,0xc0022980
c0018aed:	c3                   	ret    
c0018aee:	66 90                	xchg   ax,ax

c0018af0 <FAT::tell(void*, unsigned long long*)>:
c0018af0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018af5:	75 09                	jne    c0018b00 <FAT::tell(void*, unsigned long long*)+0x10>
c0018af7:	b8 04 00 00 00       	mov    eax,0x4
c0018afc:	c3                   	ret    
c0018afd:	8d 76 00             	lea    esi,[esi+0x0]
c0018b00:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b05:	75 09                	jne    c0018b10 <FAT::tell(void*, unsigned long long*)+0x20>
c0018b07:	b8 04 00 00 00       	mov    eax,0x4
c0018b0c:	c3                   	ret    
c0018b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b14:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018b17:	ba 00 00 00 00       	mov    edx,0x0
c0018b1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b20:	89 01                	mov    DWORD PTR [ecx],eax
c0018b22:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b25:	b8 00 00 00 00       	mov    eax,0x0
c0018b2a:	c3                   	ret    
c0018b2b:	90                   	nop

c0018b2c <FAT::stat(void*, unsigned long long*)>:
c0018b2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018b31:	75 09                	jne    c0018b3c <FAT::stat(void*, unsigned long long*)+0x10>
c0018b33:	b8 04 00 00 00       	mov    eax,0x4
c0018b38:	c3                   	ret    
c0018b39:	8d 76 00             	lea    esi,[esi+0x0]
c0018b3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b41:	75 09                	jne    c0018b4c <FAT::stat(void*, unsigned long long*)+0x20>
c0018b43:	b8 04 00 00 00       	mov    eax,0x4
c0018b48:	c3                   	ret    
c0018b49:	8d 76 00             	lea    esi,[esi+0x0]
c0018b4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b53:	ba 00 00 00 00       	mov    edx,0x0
c0018b58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b5c:	89 01                	mov    DWORD PTR [ecx],eax
c0018b5e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b61:	b8 00 00 00 00       	mov    eax,0x0
c0018b66:	c3                   	ret    
c0018b67:	90                   	nop

c0018b68 <FAT::~FAT()>:
c0018b68:	83 ec 0c             	sub    esp,0xc
c0018b6b:	ba cc 29 02 c0       	mov    edx,0xc00229cc
c0018b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b74:	89 10                	mov    DWORD PTR [eax],edx
c0018b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b7a:	83 ec 0c             	sub    esp,0xc
c0018b7d:	50                   	push   eax
c0018b7e:	e8 a1 29 ff ff       	call   c000b524 <Filesystem::~Filesystem()>
c0018b83:	83 c4 10             	add    esp,0x10
c0018b86:	90                   	nop
c0018b87:	83 c4 0c             	add    esp,0xc
c0018b8a:	c3                   	ret    
c0018b8b:	90                   	nop

c0018b8c <FAT::~FAT()>:
c0018b8c:	83 ec 0c             	sub    esp,0xc
c0018b8f:	83 ec 0c             	sub    esp,0xc
c0018b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b96:	e8 cd ff ff ff       	call   c0018b68 <FAT::~FAT()>
c0018b9b:	83 c4 10             	add    esp,0x10
c0018b9e:	83 ec 08             	sub    esp,0x8
c0018ba1:	6a 08                	push   0x8
c0018ba3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ba7:	e8 60 1c ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018bac:	83 c4 10             	add    esp,0x10
c0018baf:	83 c4 0c             	add    esp,0xc
c0018bb2:	c3                   	ret    
c0018bb3:	90                   	nop

c0018bb4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018bb4:	83 ec 1c             	sub    esp,0x1c
c0018bb7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018bbe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018bc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bc7:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bce:	83 f8 ff             	cmp    eax,0xffffffff
c0018bd1:	75 35                	jne    c0018c08 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018bd3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018bd7:	88 c2                	mov    dl,al
c0018bd9:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bde:	01 d0                	add    eax,edx
c0018be0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018be4:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018bea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bee:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018bf5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bfa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018bfe:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c05:	eb 19                	jmp    c0018c20 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018c07:	90                   	nop
c0018c08:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c0c:	88 c2                	mov    dl,al
c0018c0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c12:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c19:	01 d0                	add    eax,edx
c0018c1b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018c1f:	90                   	nop
c0018c20:	83 ec 04             	sub    esp,0x4
c0018c23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c2b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018c2f:	50                   	push   eax
c0018c30:	e8 be c3 fe ff       	call   c0004ff3 <f_getlabel>
c0018c35:	83 c4 10             	add    esp,0x10
c0018c38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c41:	75 09                	jne    c0018c4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018c43:	b8 00 00 00 00       	mov    eax,0x0
c0018c48:	eb 0a                	jmp    c0018c54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018c4a:	66 90                	xchg   ax,ax
c0018c4c:	b8 01 00 00 00       	mov    eax,0x1
c0018c51:	8d 76 00             	lea    esi,[esi+0x0]
c0018c54:	83 c4 1c             	add    esp,0x1c
c0018c57:	c3                   	ret    

c0018c58 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018c58:	53                   	push   ebx
c0018c59:	83 ec 58             	sub    esp,0x58
c0018c5c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018c64:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c68:	b9 00 00 00 00       	mov    ecx,0x0
c0018c6d:	b8 3c 00 00 00       	mov    eax,0x3c
c0018c72:	83 e0 f8             	and    eax,0xfffffff8
c0018c75:	89 c3                	mov    ebx,eax
c0018c77:	b8 00 00 00 00       	mov    eax,0x0
c0018c7c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018c80:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018c84:	83 c0 08             	add    eax,0x8
c0018c87:	39 d8                	cmp    eax,ebx
c0018c89:	72 f1                	jb     c0018c7c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018c8b:	01 c2                	add    edx,eax
c0018c8d:	89 0a                	mov    DWORD PTR [edx],ecx
c0018c8f:	83 c2 04             	add    edx,0x4
c0018c92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c96:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c9d:	83 f8 ff             	cmp    eax,0xffffffff
c0018ca0:	75 36                	jne    c0018cd8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018ca2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ca6:	88 c2                	mov    dl,al
c0018ca8:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018cad:	01 d0                	add    eax,edx
c0018caf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018cb3:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018cb9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018cbd:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018cc4:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018cc9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018ccd:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018cd4:	eb 1a                	jmp    c0018cf0 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018cd6:	66 90                	xchg   ax,ax
c0018cd8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018cdc:	88 c2                	mov    dl,al
c0018cde:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ce2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ce9:	01 d0                	add    eax,edx
c0018ceb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018cef:	90                   	nop
c0018cf0:	83 ec 08             	sub    esp,0x8
c0018cf3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018cf7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cfb:	50                   	push   eax
c0018cfc:	e8 6f 7b fe ff       	call   c0000870 <strcat>
c0018d01:	83 c4 10             	add    esp,0x10
c0018d04:	83 ec 0c             	sub    esp,0xc
c0018d07:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d0b:	50                   	push   eax
c0018d0c:	e8 36 c4 fe ff       	call   c0005147 <f_setlabel>
c0018d11:	83 c4 10             	add    esp,0x10
c0018d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018d18:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018d1d:	75 09                	jne    c0018d28 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018d1f:	b8 00 00 00 00       	mov    eax,0x0
c0018d24:	eb 0a                	jmp    c0018d30 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018d26:	66 90                	xchg   ax,ax
c0018d28:	b8 01 00 00 00       	mov    eax,0x1
c0018d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d30:	83 c4 58             	add    esp,0x58
c0018d33:	5b                   	pop    ebx
c0018d34:	c3                   	ret    
c0018d35:	90                   	nop
c0018d36:	66 90                	xchg   ax,ax

c0018d38 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018d38:	83 ec 2c             	sub    esp,0x2c
c0018d3b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018d43:	83 ec 08             	sub    esp,0x8
c0018d46:	68 a4 29 02 c0       	push   0xc00229a4
c0018d4b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d4f:	e8 2c 7a fe ff       	call   c0000780 <strcmp>
c0018d54:	83 c4 10             	add    esp,0x10
c0018d57:	85 c0                	test   eax,eax
c0018d59:	0f 94 c0             	sete   al
c0018d5c:	0f b6 c0             	movzx  eax,al
c0018d5f:	85 c0                	test   eax,eax
c0018d61:	74 0d                	je     c0018d70 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018d63:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d6b:	e9 c0 00 00 00       	jmp    c0018e30 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d70:	83 ec 08             	sub    esp,0x8
c0018d73:	68 96 29 02 c0       	push   0xc0022996
c0018d78:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d7c:	e8 ff 79 fe ff       	call   c0000780 <strcmp>
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	85 c0                	test   eax,eax
c0018d86:	0f 94 c0             	sete   al
c0018d89:	0f b6 c0             	movzx  eax,al
c0018d8c:	85 c0                	test   eax,eax
c0018d8e:	74 10                	je     c0018da0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018d90:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d98:	e9 93 00 00 00       	jmp    c0018e30 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018da0:	83 ec 08             	sub    esp,0x8
c0018da3:	68 9c 29 02 c0       	push   0xc002299c
c0018da8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018dac:	e8 cf 79 fe ff       	call   c0000780 <strcmp>
c0018db1:	83 c4 10             	add    esp,0x10
c0018db4:	85 c0                	test   eax,eax
c0018db6:	0f 94 c0             	sete   al
c0018db9:	0f b6 c0             	movzx  eax,al
c0018dbc:	85 c0                	test   eax,eax
c0018dbe:	74 0c                	je     c0018dcc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018dc0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018dc8:	eb 66                	jmp    c0018e30 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018dca:	66 90                	xchg   ax,ax
c0018dcc:	83 ec 08             	sub    esp,0x8
c0018dcf:	68 7c 01 02 c0       	push   0xc002017c
c0018dd4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018dd8:	e8 a3 79 fe ff       	call   c0000780 <strcmp>
c0018ddd:	83 c4 10             	add    esp,0x10
c0018de0:	85 c0                	test   eax,eax
c0018de2:	0f 94 c0             	sete   al
c0018de5:	0f b6 c0             	movzx  eax,al
c0018de8:	85 c0                	test   eax,eax
c0018dea:	74 0c                	je     c0018df8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018dec:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018df4:	eb 3a                	jmp    c0018e30 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018df6:	66 90                	xchg   ax,ax
c0018df8:	83 ec 08             	sub    esp,0x8
c0018dfb:	68 a2 29 02 c0       	push   0xc00229a2
c0018e00:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e04:	e8 77 79 fe ff       	call   c0000780 <strcmp>
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	85 c0                	test   eax,eax
c0018e0e:	0f 94 c0             	sete   al
c0018e11:	0f b6 c0             	movzx  eax,al
c0018e14:	85 c0                	test   eax,eax
c0018e16:	74 0c                	je     c0018e24 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018e18:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018e20:	eb 0e                	jmp    c0018e30 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e22:	66 90                	xchg   ax,ax
c0018e24:	b8 08 00 00 00       	mov    eax,0x8
c0018e29:	e9 ea 00 00 00       	jmp    c0018f18 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e2e:	66 90                	xchg   ax,ax
c0018e30:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018e37:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018e3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e40:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e47:	83 f8 ff             	cmp    eax,0xffffffff
c0018e4a:	75 34                	jne    c0018e80 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018e4c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e50:	88 c2                	mov    dl,al
c0018e52:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e57:	01 d0                	add    eax,edx
c0018e59:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e5d:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018e63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e67:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e6e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e73:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018e77:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018e7e:	eb 18                	jmp    c0018e98 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018e80:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e84:	88 c2                	mov    dl,al
c0018e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e8a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e91:	01 d0                	add    eax,edx
c0018e93:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e97:	90                   	nop
c0018e98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e9c:	88 04 24             	mov    BYTE PTR [esp],al
c0018e9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018ea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ea7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018eaf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018eb4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018ebc:	83 ec 0c             	sub    esp,0xc
c0018ebf:	68 00 20 00 00       	push   0x2000
c0018ec4:	e8 0a ec fe ff       	call   c0007ad3 <malloc>
c0018ec9:	83 c4 10             	add    esp,0x10
c0018ecc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ed0:	68 00 20 00 00       	push   0x2000
c0018ed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ed9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018edd:	50                   	push   eax
c0018ede:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018ee2:	50                   	push   eax
c0018ee3:	e8 5c c5 fe ff       	call   c0005444 <f_mkfs>
c0018ee8:	83 c4 10             	add    esp,0x10
c0018eeb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018eef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018ef4:	75 0a                	jne    c0018f00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018ef6:	b8 00 00 00 00       	mov    eax,0x0
c0018efb:	eb 1b                	jmp    c0018f18 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018efd:	8d 76 00             	lea    esi,[esi+0x0]
c0018f00:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018f05:	75 09                	jne    c0018f10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018f07:	b8 09 00 00 00       	mov    eax,0x9
c0018f0c:	eb 0a                	jmp    c0018f18 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018f0e:	66 90                	xchg   ax,ax
c0018f10:	b8 01 00 00 00       	mov    eax,0x1
c0018f15:	8d 76 00             	lea    esi,[esi+0x0]
c0018f18:	83 c4 2c             	add    esp,0x2c
c0018f1b:	c3                   	ret    

c0018f1c <FAT::tryMount(LogicalDisk*, int)>:
c0018f1c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018f22:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f27:	83 f8 14             	cmp    eax,0x14
c0018f2a:	75 18                	jne    c0018f44 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018f2c:	83 ec 0c             	sub    esp,0xc
c0018f2f:	68 a8 29 02 c0       	push   0xc00229a8
c0018f34:	e8 88 83 ff ff       	call   c00112c1 <KePanic(char const*)>
c0018f39:	83 c4 10             	add    esp,0x10
c0018f3c:	b0 00                	mov    al,0x0
c0018f3e:	e9 ed 01 00 00       	jmp    c0019130 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f43:	90                   	nop
c0018f44:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018f4b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018f57:	3d 00 02 00 00       	cmp    eax,0x200
c0018f5c:	74 0a                	je     c0018f68 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018f5e:	b0 00                	mov    al,0x0
c0018f60:	e9 cb 01 00 00       	jmp    c0019130 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f65:	8d 76 00             	lea    esi,[esi+0x0]
c0018f68:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018f70:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f77:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018f7e:	83 f8 ff             	cmp    eax,0xffffffff
c0018f81:	74 09                	je     c0018f8c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018f83:	b0 01                	mov    al,0x1
c0018f85:	e9 a6 01 00 00       	jmp    c0019130 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f8a:	66 90                	xchg   ax,ax
c0018f8c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018f96:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018f9e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018fa5:	88 c2                	mov    dl,al
c0018fa7:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018fac:	01 d0                	add    eax,edx
c0018fae:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018fb5:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018fbb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018fc2:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018fc9:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018fce:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018fd5:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018fdc:	83 ec 0c             	sub    esp,0xc
c0018fdf:	68 34 02 00 00       	push   0x234
c0018fe4:	e8 ea ea fe ff       	call   c0007ad3 <malloc>
c0018fe9:	83 c4 10             	add    esp,0x10
c0018fec:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018ff3:	83 ec 04             	sub    esp,0x4
c0018ff6:	6a 00                	push   0x0
c0018ff8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018fff:	50                   	push   eax
c0019000:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019007:	e8 32 ac fe ff       	call   c0003c3e <f_mount>
c001900c:	83 c4 10             	add    esp,0x10
c001900f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019016:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001901e:	74 1c                	je     c001903c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019020:	83 ec 0c             	sub    esp,0xc
c0019023:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001902a:	e8 c4 ea fe ff       	call   c0007af3 <rfree>
c001902f:	83 c4 10             	add    esp,0x10
c0019032:	b0 00                	mov    al,0x0
c0019034:	e9 f7 00 00 00       	jmp    c0019130 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019039:	8d 76 00             	lea    esi,[esi+0x0]
c001903c:	83 ec 04             	sub    esp,0x4
c001903f:	68 00 01 00 00       	push   0x100
c0019044:	6a 00                	push   0x0
c0019046:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001904d:	50                   	push   eax
c001904e:	e8 9d 74 fe ff       	call   c00004f0 <memset>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	83 ec 08             	sub    esp,0x8
c0019059:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019060:	50                   	push   eax
c0019061:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019068:	50                   	push   eax
c0019069:	e8 02 78 fe ff       	call   c0000870 <strcat>
c001906e:	83 c4 10             	add    esp,0x10
c0019071:	83 ec 08             	sub    esp,0x8
c0019074:	68 b6 29 02 c0       	push   0xc00229b6
c0019079:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019080:	50                   	push   eax
c0019081:	e8 ea 77 fe ff       	call   c0000870 <strcat>
c0019086:	83 c4 10             	add    esp,0x10
c0019089:	83 ec 04             	sub    esp,0x4
c001908c:	6a 01                	push   0x1
c001908e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019095:	50                   	push   eax
c0019096:	8d 44 24 14          	lea    eax,[esp+0x14]
c001909a:	50                   	push   eax
c001909b:	e8 00 ac fe ff       	call   c0003ca0 <f_open>
c00190a0:	83 c4 10             	add    esp,0x10
c00190a3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00190aa:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00190b1:	85 c0                	test   eax,eax
c00190b3:	74 0b                	je     c00190c0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00190b5:	78 31                	js     c00190e8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00190b7:	83 e8 04             	sub    eax,0x4
c00190ba:	83 f8 01             	cmp    eax,0x1
c00190bd:	77 29                	ja     c00190e8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00190bf:	90                   	nop
c00190c0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190cf:	50                   	push   eax
c00190d0:	e8 7b b3 fe ff       	call   c0004450 <f_close>
c00190d5:	83 c4 10             	add    esp,0x10
c00190d8:	90                   	nop
c00190d9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00190e1:	85 c0                	test   eax,eax
c00190e3:	74 43                	je     c0019128 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00190e5:	eb 31                	jmp    c0019118 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00190e7:	90                   	nop
c00190e8:	83 ec 0c             	sub    esp,0xc
c00190eb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00190f2:	e8 fc e9 fe ff       	call   c0007af3 <rfree>
c00190f7:	83 c4 10             	add    esp,0x10
c00190fa:	83 ec 04             	sub    esp,0x4
c00190fd:	6a 00                	push   0x0
c00190ff:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019106:	50                   	push   eax
c0019107:	6a 00                	push   0x0
c0019109:	e8 30 ab fe ff       	call   c0003c3e <f_mount>
c001910e:	83 c4 10             	add    esp,0x10
c0019111:	b0 00                	mov    al,0x0
c0019113:	eb 1b                	jmp    c0019130 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019115:	8d 76 00             	lea    esi,[esi+0x0]
c0019118:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c001911d:	83 c0 01             	add    eax,0x1
c0019120:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0019125:	8d 76 00             	lea    esi,[esi+0x0]
c0019128:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001912f:	90                   	nop
c0019130:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019136:	c3                   	ret    
c0019137:	90                   	nop

c0019138 <FAT::allocateSwapfile(char const*, int)>:
c0019138:	55                   	push   ebp
c0019139:	57                   	push   edi
c001913a:	56                   	push   esi
c001913b:	53                   	push   ebx
c001913c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019142:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001914d:	83 ec 0c             	sub    esp,0xc
c0019150:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019157:	e8 77 e9 fe ff       	call   c0007ad3 <malloc>
c001915c:	83 c4 10             	add    esp,0x10
c001915f:	89 c7                	mov    edi,eax
c0019161:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0019166:	83 ec 04             	sub    esp,0x4
c0019169:	50                   	push   eax
c001916a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019171:	57                   	push   edi
c0019172:	e8 2f 27 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c0019177:	83 c4 10             	add    esp,0x10
c001917a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019181:	83 ec 04             	sub    esp,0x4
c0019184:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019188:	50                   	push   eax
c0019189:	8d 44 24 18          	lea    eax,[esp+0x18]
c001918d:	50                   	push   eax
c001918e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019195:	e8 2c 2a ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c001919a:	83 c4 10             	add    esp,0x10
c001919d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00191a4:	c1 e0 14             	shl    eax,0x14
c00191a7:	89 c7                	mov    edi,eax
c00191a9:	89 c5                	mov    ebp,eax
c00191ab:	c1 fd 1f             	sar    ebp,0x1f
c00191ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00191b6:	89 f9                	mov    ecx,edi
c00191b8:	31 c1                	xor    ecx,eax
c00191ba:	89 cb                	mov    ebx,ecx
c00191bc:	89 e9                	mov    ecx,ebp
c00191be:	31 d1                	xor    ecx,edx
c00191c0:	89 ce                	mov    esi,ecx
c00191c2:	89 f0                	mov    eax,esi
c00191c4:	09 d8                	or     eax,ebx
c00191c6:	0f 84 9c 00 00 00    	je     c0019268 <FAT::allocateSwapfile(char const*, int)+0x130>
c00191cc:	83 ec 0c             	sub    esp,0xc
c00191cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191d6:	e8 b7 28 ff ff       	call   c000ba92 <File::unlink()>
c00191db:	83 c4 10             	add    esp,0x10
c00191de:	83 ec 08             	sub    esp,0x8
c00191e1:	6a 12                	push   0x12
c00191e3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191ea:	e8 d5 26 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191f9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00191ff:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019206:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001920d:	c1 e0 14             	shl    eax,0x14
c0019210:	83 ec 04             	sub    esp,0x4
c0019213:	6a 01                	push   0x1
c0019215:	50                   	push   eax
c0019216:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001921d:	e8 b5 c0 fe ff       	call   c00052d7 <f_expand>
c0019222:	83 c4 10             	add    esp,0x10
c0019225:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001922c:	8b 00                	mov    eax,DWORD PTR [eax]
c001922e:	83 c0 10             	add    eax,0x10
c0019231:	8b 00                	mov    eax,DWORD PTR [eax]
c0019233:	83 ec 0c             	sub    esp,0xc
c0019236:	8d 54 24 24          	lea    edx,[esp+0x24]
c001923a:	52                   	push   edx
c001923b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001923f:	52                   	push   edx
c0019240:	6a 00                	push   0x0
c0019242:	68 00 04 00 00       	push   0x400
c0019247:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001924e:	ff d0                	call   eax
c0019250:	83 c4 20             	add    esp,0x20
c0019253:	83 ec 0c             	sub    esp,0xc
c0019256:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001925d:	e8 c0 26 ff ff       	call   c000b922 <File::close()>
c0019262:	83 c4 10             	add    esp,0x10
c0019265:	8d 76 00             	lea    esi,[esi+0x0]
c0019268:	83 ec 08             	sub    esp,0x8
c001926b:	6a 01                	push   0x1
c001926d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019274:	e8 4b 26 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c0019279:	83 c4 10             	add    esp,0x10
c001927c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019283:	8b 00                	mov    eax,DWORD PTR [eax]
c0019285:	83 c0 0c             	add    eax,0xc
c0019288:	8b 00                	mov    eax,DWORD PTR [eax]
c001928a:	83 ec 0c             	sub    esp,0xc
c001928d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019291:	52                   	push   edx
c0019292:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019296:	52                   	push   edx
c0019297:	6a 00                	push   0x0
c0019299:	6a 04                	push   0x4
c001929b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00192a2:	ff d0                	call   eax
c00192a4:	83 c4 20             	add    esp,0x20
c00192a7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00192ae:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00192b4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00192bb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00192c2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00192c5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00192cc:	83 ec 0c             	sub    esp,0xc
c00192cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00192d6:	e8 47 26 ff ff       	call   c000b922 <File::close()>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00192e5:	ba 00 00 00 00       	mov    edx,0x0
c00192ea:	81 c4 3c 04 00 00    	add    esp,0x43c
c00192f0:	5b                   	pop    ebx
c00192f1:	5e                   	pop    esi
c00192f2:	5f                   	pop    edi
c00192f3:	5d                   	pop    ebp
c00192f4:	c3                   	ret    
c00192f5:	90                   	nop
c00192f6:	66 90                	xchg   ax,ax

c00192f8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00192f8:	57                   	push   edi
c00192f9:	56                   	push   esi
c00192fa:	53                   	push   ebx
c00192fb:	81 ec 50 02 00 00    	sub    esp,0x250
c0019301:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019309:	74 0d                	je     c0019318 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001930b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019313:	75 0f                	jne    c0019324 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019315:	8d 76 00             	lea    esi,[esi+0x0]
c0019318:	b8 04 00 00 00       	mov    eax,0x4
c001931d:	e9 3a 01 00 00       	jmp    c001945c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019322:	66 90                	xchg   ax,ax
c0019324:	83 ec 08             	sub    esp,0x8
c0019327:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001932e:	50                   	push   eax
c001932f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019336:	e8 e1 b3 fe ff       	call   c000471c <f_readdir>
c001933b:	83 c4 10             	add    esp,0x10
c001933e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019345:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001934c:	83 ec 0c             	sub    esp,0xc
c001934f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019356:	83 c0 16             	add    eax,0x16
c0019359:	50                   	push   eax
c001935a:	e8 21 72 fe ff       	call   c0000580 <strlen>
c001935f:	83 c4 10             	add    esp,0x10
c0019362:	ba 00 00 00 00       	mov    edx,0x0
c0019367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001936b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001936f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019376:	0f b6 c0             	movzx  eax,al
c0019379:	83 e0 10             	and    eax,0x10
c001937c:	74 0a                	je     c0019388 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001937e:	b8 02 00 00 00       	mov    eax,0x2
c0019383:	eb 0b                	jmp    c0019390 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019385:	8d 76 00             	lea    esi,[esi+0x0]
c0019388:	b8 01 00 00 00       	mov    eax,0x1
c001938d:	8d 76 00             	lea    esi,[esi+0x0]
c0019390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019394:	83 ec 08             	sub    esp,0x8
c0019397:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001939e:	83 c0 16             	add    eax,0x16
c00193a1:	50                   	push   eax
c00193a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193a6:	83 c0 10             	add    eax,0x10
c00193a9:	50                   	push   eax
c00193aa:	e8 a1 72 fe ff       	call   c0000650 <strcpy>
c00193af:	83 c4 10             	add    esp,0x10
c00193b2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00193b9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00193c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193c4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00193cb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00193d2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00193d9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00193e0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00193e7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00193ee:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00193f5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00193fc:	89 c6                	mov    esi,eax
c00193fe:	89 d7                	mov    edi,edx
c0019400:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019402:	89 c8                	mov    eax,ecx
c0019404:	89 fa                	mov    edx,edi
c0019406:	89 f3                	mov    ebx,esi
c0019408:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001940f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019416:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001941d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019424:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001942a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019431:	0f be c0             	movsx  eax,al
c0019434:	85 c0                	test   eax,eax
c0019436:	75 08                	jne    c0019440 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019438:	b8 07 00 00 00       	mov    eax,0x7
c001943d:	eb 1d                	jmp    c001945c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001943f:	90                   	nop
c0019440:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019447:	85 c0                	test   eax,eax
c0019449:	75 09                	jne    c0019454 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001944b:	b8 00 00 00 00       	mov    eax,0x0
c0019450:	eb 0a                	jmp    c001945c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019452:	66 90                	xchg   ax,ax
c0019454:	b8 01 00 00 00       	mov    eax,0x1
c0019459:	8d 76 00             	lea    esi,[esi+0x0]
c001945c:	81 c4 50 02 00 00    	add    esp,0x250
c0019462:	5b                   	pop    ebx
c0019463:	5e                   	pop    esi
c0019464:	5f                   	pop    edi
c0019465:	c3                   	ret    
c0019466:	66 90                	xchg   ax,ax

c0019468 <FAT::read(void*, unsigned long, void*, int*)>:
c0019468:	83 ec 1c             	sub    esp,0x1c
c001946b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019470:	74 0a                	je     c001947c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019472:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019477:	75 0b                	jne    c0019484 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019479:	8d 76 00             	lea    esi,[esi+0x0]
c001947c:	b8 04 00 00 00       	mov    eax,0x4
c0019481:	eb 41                	jmp    c00194c4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019483:	90                   	nop
c0019484:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019488:	50                   	push   eax
c0019489:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001948d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019491:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019495:	e8 c9 aa fe ff       	call   c0003f63 <f_read>
c001949a:	83 c4 10             	add    esp,0x10
c001949d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194a5:	89 c2                	mov    edx,eax
c00194a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194ab:	89 10                	mov    DWORD PTR [eax],edx
c00194ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194b1:	85 c0                	test   eax,eax
c00194b3:	75 07                	jne    c00194bc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00194b5:	b8 00 00 00 00       	mov    eax,0x0
c00194ba:	eb 08                	jmp    c00194c4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00194bc:	b8 01 00 00 00       	mov    eax,0x1
c00194c1:	8d 76 00             	lea    esi,[esi+0x0]
c00194c4:	83 c4 1c             	add    esp,0x1c
c00194c7:	c3                   	ret    

c00194c8 <FAT::write(void*, unsigned long, void*, int*)>:
c00194c8:	83 ec 1c             	sub    esp,0x1c
c00194cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194d0:	74 0a                	je     c00194dc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00194d2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194d7:	75 0b                	jne    c00194e4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00194d9:	8d 76 00             	lea    esi,[esi+0x0]
c00194dc:	b8 04 00 00 00       	mov    eax,0x4
c00194e1:	eb 41                	jmp    c0019524 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00194e3:	90                   	nop
c00194e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194e8:	50                   	push   eax
c00194e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00194f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194f5:	e8 4a ac fe ff       	call   c0004144 <f_write>
c00194fa:	83 c4 10             	add    esp,0x10
c00194fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019501:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019505:	89 c2                	mov    edx,eax
c0019507:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001950b:	89 10                	mov    DWORD PTR [eax],edx
c001950d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019511:	85 c0                	test   eax,eax
c0019513:	75 07                	jne    c001951c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019515:	b8 00 00 00 00       	mov    eax,0x0
c001951a:	eb 08                	jmp    c0019524 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001951c:	b8 01 00 00 00       	mov    eax,0x1
c0019521:	8d 76 00             	lea    esi,[esi+0x0]
c0019524:	83 c4 1c             	add    esp,0x1c
c0019527:	c3                   	ret    

c0019528 <FAT::close(void*)>:
c0019528:	83 ec 1c             	sub    esp,0x1c
c001952b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019530:	75 0a                	jne    c001953c <FAT::close(void*)+0x14>
c0019532:	b8 04 00 00 00       	mov    eax,0x4
c0019537:	eb 3f                	jmp    c0019578 <FAT::close(void*)+0x50>
c0019539:	8d 76 00             	lea    esi,[esi+0x0]
c001953c:	83 ec 0c             	sub    esp,0xc
c001953f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019543:	e8 08 af fe ff       	call   c0004450 <f_close>
c0019548:	83 c4 10             	add    esp,0x10
c001954b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001954f:	83 ec 0c             	sub    esp,0xc
c0019552:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019556:	e8 88 e5 fe ff       	call   c0007ae3 <free>
c001955b:	83 c4 10             	add    esp,0x10
c001955e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019562:	85 c0                	test   eax,eax
c0019564:	75 0a                	jne    c0019570 <FAT::close(void*)+0x48>
c0019566:	b8 00 00 00 00       	mov    eax,0x0
c001956b:	eb 0b                	jmp    c0019578 <FAT::close(void*)+0x50>
c001956d:	8d 76 00             	lea    esi,[esi+0x0]
c0019570:	b8 01 00 00 00       	mov    eax,0x1
c0019575:	8d 76 00             	lea    esi,[esi+0x0]
c0019578:	83 c4 1c             	add    esp,0x1c
c001957b:	c3                   	ret    

c001957c <FAT::closeDir(void*)>:
c001957c:	83 ec 1c             	sub    esp,0x1c
c001957f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019584:	75 0a                	jne    c0019590 <FAT::closeDir(void*)+0x14>
c0019586:	b8 04 00 00 00       	mov    eax,0x4
c001958b:	eb 3f                	jmp    c00195cc <FAT::closeDir(void*)+0x50>
c001958d:	8d 76 00             	lea    esi,[esi+0x0]
c0019590:	83 ec 0c             	sub    esp,0xc
c0019593:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019597:	e8 5e b1 fe ff       	call   c00046fa <f_closedir>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195a3:	83 ec 0c             	sub    esp,0xc
c00195a6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195aa:	e8 34 e5 fe ff       	call   c0007ae3 <free>
c00195af:	83 c4 10             	add    esp,0x10
c00195b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195b6:	85 c0                	test   eax,eax
c00195b8:	75 0a                	jne    c00195c4 <FAT::closeDir(void*)+0x48>
c00195ba:	b8 00 00 00 00       	mov    eax,0x0
c00195bf:	eb 0b                	jmp    c00195cc <FAT::closeDir(void*)+0x50>
c00195c1:	8d 76 00             	lea    esi,[esi+0x0]
c00195c4:	b8 01 00 00 00       	mov    eax,0x1
c00195c9:	8d 76 00             	lea    esi,[esi+0x0]
c00195cc:	83 c4 1c             	add    esp,0x1c
c00195cf:	c3                   	ret    

c00195d0 <FAT::truncate(void*, unsigned long long)>:
c00195d0:	83 ec 2c             	sub    esp,0x2c
c00195d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195e3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00195e8:	75 0a                	jne    c00195f4 <FAT::truncate(void*, unsigned long long)+0x24>
c00195ea:	b8 04 00 00 00       	mov    eax,0x4
c00195ef:	eb 47                	jmp    c0019638 <FAT::truncate(void*, unsigned long long)+0x68>
c00195f1:	8d 76 00             	lea    esi,[esi+0x0]
c00195f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00195f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00195fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195ff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019607:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001960b:	83 ec 08             	sub    esp,0x8
c001960e:	50                   	push   eax
c001960f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019613:	e8 67 ae fe ff       	call   c000447f <f_lseek>
c0019618:	83 c4 10             	add    esp,0x10
c001961b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001961f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019623:	85 c0                	test   eax,eax
c0019625:	75 09                	jne    c0019630 <FAT::truncate(void*, unsigned long long)+0x60>
c0019627:	b8 00 00 00 00       	mov    eax,0x0
c001962c:	eb 0a                	jmp    c0019638 <FAT::truncate(void*, unsigned long long)+0x68>
c001962e:	66 90                	xchg   ax,ax
c0019630:	b8 01 00 00 00       	mov    eax,0x1
c0019635:	8d 76 00             	lea    esi,[esi+0x0]
c0019638:	83 c4 2c             	add    esp,0x2c
c001963b:	c3                   	ret    

c001963c <FAT::seek(void*, unsigned long long)>:
c001963c:	83 ec 2c             	sub    esp,0x2c
c001963f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019643:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019647:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001964b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001964f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019654:	75 0a                	jne    c0019660 <FAT::seek(void*, unsigned long long)+0x24>
c0019656:	b8 04 00 00 00       	mov    eax,0x4
c001965b:	eb 33                	jmp    c0019690 <FAT::seek(void*, unsigned long long)+0x54>
c001965d:	8d 76 00             	lea    esi,[esi+0x0]
c0019660:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019664:	83 ec 08             	sub    esp,0x8
c0019667:	50                   	push   eax
c0019668:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001966c:	e8 0e ae fe ff       	call   c000447f <f_lseek>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001967c:	85 c0                	test   eax,eax
c001967e:	75 08                	jne    c0019688 <FAT::seek(void*, unsigned long long)+0x4c>
c0019680:	b8 00 00 00 00       	mov    eax,0x0
c0019685:	eb 09                	jmp    c0019690 <FAT::seek(void*, unsigned long long)+0x54>
c0019687:	90                   	nop
c0019688:	b8 01 00 00 00       	mov    eax,0x1
c001968d:	8d 76 00             	lea    esi,[esi+0x0]
c0019690:	83 c4 2c             	add    esp,0x2c
c0019693:	c3                   	ret    

c0019694 <fatWrapperReadDisk>:
c0019694:	53                   	push   ebx
c0019695:	83 ec 18             	sub    esp,0x18
c0019698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001969c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196a5:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00196ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00196b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196b4:	ba 00 00 00 00       	mov    edx,0x0
c00196b9:	83 ec 0c             	sub    esp,0xc
c00196bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196c0:	53                   	push   ebx
c00196c1:	52                   	push   edx
c00196c2:	50                   	push   eax
c00196c3:	51                   	push   ecx
c00196c4:	e8 45 44 ff ff       	call   c000db0e <LogicalDisk::read(unsigned long long, int, void*)>
c00196c9:	83 c4 20             	add    esp,0x20
c00196cc:	83 c4 18             	add    esp,0x18
c00196cf:	5b                   	pop    ebx
c00196d0:	c3                   	ret    
c00196d1:	8d 76 00             	lea    esi,[esi+0x0]

c00196d4 <fatWrapperWriteDisk>:
c00196d4:	53                   	push   ebx
c00196d5:	83 ec 18             	sub    esp,0x18
c00196d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196e5:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00196ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00196f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196f4:	ba 00 00 00 00       	mov    edx,0x0
c00196f9:	83 ec 0c             	sub    esp,0xc
c00196fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019700:	53                   	push   ebx
c0019701:	52                   	push   edx
c0019702:	50                   	push   eax
c0019703:	51                   	push   ecx
c0019704:	e8 71 44 ff ff       	call   c000db7a <LogicalDisk::write(unsigned long long, int, void*)>
c0019709:	83 c4 20             	add    esp,0x20
c001970c:	83 c4 18             	add    esp,0x18
c001970f:	5b                   	pop    ebx
c0019710:	c3                   	ret    
c0019711:	8d 76 00             	lea    esi,[esi+0x0]

c0019714 <fatWrapperIoctl>:
c0019714:	53                   	push   ebx
c0019715:	83 ec 28             	sub    esp,0x28
c0019718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001971c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019720:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019724:	88 d0                	mov    al,dl
c0019726:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001972a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001972f:	83 f8 02             	cmp    eax,0x2
c0019732:	75 34                	jne    c0019768 <fatWrapperIoctl+0x54>
c0019734:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019738:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001973c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019741:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019748:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001974e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019754:	89 c2                	mov    edx,eax
c0019756:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001975a:	66 89 10             	mov    WORD PTR [eax],dx
c001975d:	b8 00 00 00 00       	mov    eax,0x0
c0019762:	e9 c5 00 00 00       	jmp    c001982c <fatWrapperIoctl+0x118>
c0019767:	90                   	nop
c0019768:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001976d:	83 f8 01             	cmp    eax,0x1
c0019770:	75 6a                	jne    c00197dc <fatWrapperIoctl+0xc8>
c0019772:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019776:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001977a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001977f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019786:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001978c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019792:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019798:	89 c8                	mov    eax,ecx
c001979a:	89 da                	mov    edx,ebx
c001979c:	0f a4 c2 0a          	shld   edx,eax,0xa
c00197a0:	c1 e0 0a             	shl    eax,0xa
c00197a3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00197a8:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00197af:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00197b5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00197bb:	89 cb                	mov    ebx,ecx
c00197bd:	c1 fb 1f             	sar    ebx,0x1f
c00197c0:	53                   	push   ebx
c00197c1:	51                   	push   ecx
c00197c2:	52                   	push   edx
c00197c3:	50                   	push   eax
c00197c4:	e8 b7 5b 00 00       	call   c001f380 <__udivdi3>
c00197c9:	83 c4 10             	add    esp,0x10
c00197cc:	89 c2                	mov    edx,eax
c00197ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197d2:	89 10                	mov    DWORD PTR [eax],edx
c00197d4:	b8 00 00 00 00       	mov    eax,0x0
c00197d9:	eb 51                	jmp    c001982c <fatWrapperIoctl+0x118>
c00197db:	90                   	nop
c00197dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197e1:	85 c0                	test   eax,eax
c00197e3:	75 07                	jne    c00197ec <fatWrapperIoctl+0xd8>
c00197e5:	b8 00 00 00 00       	mov    eax,0x0
c00197ea:	eb 40                	jmp    c001982c <fatWrapperIoctl+0x118>
c00197ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197f1:	83 f8 03             	cmp    eax,0x3
c00197f4:	75 1a                	jne    c0019810 <fatWrapperIoctl+0xfc>
c00197f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019802:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019808:	b8 00 00 00 00       	mov    eax,0x0
c001980d:	eb 1d                	jmp    c001982c <fatWrapperIoctl+0x118>
c001980f:	90                   	nop
c0019810:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019815:	83 f8 04             	cmp    eax,0x4
c0019818:	75 0a                	jne    c0019824 <fatWrapperIoctl+0x110>
c001981a:	b8 00 00 00 00       	mov    eax,0x0
c001981f:	eb 0b                	jmp    c001982c <fatWrapperIoctl+0x118>
c0019821:	8d 76 00             	lea    esi,[esi+0x0]
c0019824:	b8 04 00 00 00       	mov    eax,0x4
c0019829:	8d 76 00             	lea    esi,[esi+0x0]
c001982c:	83 c4 28             	add    esp,0x28
c001982f:	5b                   	pop    ebx
c0019830:	c3                   	ret    
c0019831:	90                   	nop
c0019832:	66 90                	xchg   ax,ax

c0019834 <FAT::FAT()>:
c0019834:	83 ec 1c             	sub    esp,0x1c
c0019837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001983b:	83 ec 0c             	sub    esp,0xc
c001983e:	50                   	push   eax
c001983f:	e8 bc 1c ff ff       	call   c000b500 <Filesystem::Filesystem()>
c0019844:	83 c4 10             	add    esp,0x10
c0019847:	ba cc 29 02 c0       	mov    edx,0xc00229cc
c001984c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019850:	89 10                	mov    DWORD PTR [eax],edx
c0019852:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c001985c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019864:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019869:	7f 19                	jg     c0019884 <FAT::FAT()+0x50>
c001986b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001986f:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c001987a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001987f:	eb e3                	jmp    c0019864 <FAT::FAT()+0x30>
c0019881:	8d 76 00             	lea    esi,[esi+0x0]
c0019884:	90                   	nop
c0019885:	83 c4 1c             	add    esp,0x1c
c0019888:	c3                   	ret    
c0019889:	90                   	nop
c001988a:	66 90                	xchg   ax,ax

c001988c <FAT::fixFilepath(char*)>:
c001988c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019890:	8a 00                	mov    al,BYTE PTR [eax]
c0019892:	0f be c0             	movsx  eax,al
c0019895:	83 f8 40             	cmp    eax,0x40
c0019898:	7e 2e                	jle    c00198c8 <FAT::fixFilepath(char*)+0x3c>
c001989a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001989e:	8a 00                	mov    al,BYTE PTR [eax]
c00198a0:	83 e8 41             	sub    eax,0x41
c00198a3:	88 c2                	mov    dl,al
c00198a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198a9:	88 10                	mov    BYTE PTR [eax],dl
c00198ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198af:	8a 00                	mov    al,BYTE PTR [eax]
c00198b1:	0f be c0             	movsx  eax,al
c00198b4:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00198bb:	83 c0 30             	add    eax,0x30
c00198be:	88 c2                	mov    dl,al
c00198c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198c4:	88 10                	mov    BYTE PTR [eax],dl
c00198c6:	66 90                	xchg   ax,ax
c00198c8:	90                   	nop
c00198c9:	c3                   	ret    
c00198ca:	66 90                	xchg   ax,ax

c00198cc <FAT::open(char const*, void**, FileOpenMode)>:
c00198cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00198d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00198da:	74 0c                	je     c00198e8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00198dc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198e4:	75 0e                	jne    c00198f4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00198e6:	66 90                	xchg   ax,ax
c00198e8:	b8 04 00 00 00       	mov    eax,0x4
c00198ed:	e9 46 01 00 00       	jmp    c0019a38 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00198f2:	66 90                	xchg   ax,ax
c00198f4:	83 ec 08             	sub    esp,0x8
c00198f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019902:	50                   	push   eax
c0019903:	e8 48 6d fe ff       	call   c0000650 <strcpy>
c0019908:	83 c4 10             	add    esp,0x10
c001990b:	83 ec 08             	sub    esp,0x8
c001990e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019912:	50                   	push   eax
c0019913:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001991a:	e8 6d ff ff ff       	call   c001988c <FAT::fixFilepath(char*)>
c001991f:	83 c4 10             	add    esp,0x10
c0019922:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001992a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019931:	83 e0 01             	and    eax,0x1
c0019934:	74 12                	je     c0019948 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019936:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001993d:	83 c8 01             	or     eax,0x1
c0019940:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019947:	90                   	nop
c0019948:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001994f:	83 e0 04             	and    eax,0x4
c0019952:	74 24                	je     c0019978 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019954:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001995b:	83 c8 30             	or     eax,0x30
c001995e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019965:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001996c:	83 c8 02             	or     eax,0x2
c001996f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019976:	66 90                	xchg   ax,ax
c0019978:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001997f:	83 e0 02             	and    eax,0x2
c0019982:	74 14                	je     c0019998 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019984:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001998b:	83 c8 02             	or     eax,0x2
c001998e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019995:	8d 76 00             	lea    esi,[esi+0x0]
c0019998:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001999f:	83 e0 08             	and    eax,0x8
c00199a2:	74 14                	je     c00199b8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00199a4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199ab:	83 c8 04             	or     eax,0x4
c00199ae:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199b5:	8d 76 00             	lea    esi,[esi+0x0]
c00199b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199bf:	83 e0 10             	and    eax,0x10
c00199c2:	74 14                	je     c00199d8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00199c4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199cb:	83 c8 08             	or     eax,0x8
c00199ce:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199d5:	8d 76 00             	lea    esi,[esi+0x0]
c00199d8:	83 ec 0c             	sub    esp,0xc
c00199db:	68 28 02 00 00       	push   0x228
c00199e0:	e8 ee e0 fe ff       	call   c0007ad3 <malloc>
c00199e5:	83 c4 10             	add    esp,0x10
c00199e8:	89 c2                	mov    edx,eax
c00199ea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199f1:	89 10                	mov    DWORD PTR [eax],edx
c00199f3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00199fb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a04:	83 ec 04             	sub    esp,0x4
c0019a07:	52                   	push   edx
c0019a08:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019a0c:	52                   	push   edx
c0019a0d:	50                   	push   eax
c0019a0e:	e8 8d a2 fe ff       	call   c0003ca0 <f_open>
c0019a13:	83 c4 10             	add    esp,0x10
c0019a16:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019a1d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019a25:	74 09                	je     c0019a30 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019a27:	b8 01 00 00 00       	mov    eax,0x1
c0019a2c:	eb 0a                	jmp    c0019a38 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019a2e:	66 90                	xchg   ax,ax
c0019a30:	b8 00 00 00 00       	mov    eax,0x0
c0019a35:	8d 76 00             	lea    esi,[esi+0x0]
c0019a38:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a3e:	c3                   	ret    
c0019a3f:	90                   	nop

c0019a40 <FAT::openDir(char const*, void**)>:
c0019a40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a4e:	74 0c                	je     c0019a5c <FAT::openDir(char const*, void**)+0x1c>
c0019a50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019a58:	75 0e                	jne    c0019a68 <FAT::openDir(char const*, void**)+0x28>
c0019a5a:	66 90                	xchg   ax,ax
c0019a5c:	b8 04 00 00 00       	mov    eax,0x4
c0019a61:	e9 82 00 00 00       	jmp    c0019ae8 <FAT::openDir(char const*, void**)+0xa8>
c0019a66:	66 90                	xchg   ax,ax
c0019a68:	83 ec 08             	sub    esp,0x8
c0019a6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a72:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a76:	50                   	push   eax
c0019a77:	e8 d4 6b fe ff       	call   c0000650 <strcpy>
c0019a7c:	83 c4 10             	add    esp,0x10
c0019a7f:	83 ec 08             	sub    esp,0x8
c0019a82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a86:	50                   	push   eax
c0019a87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a8e:	e8 f9 fd ff ff       	call   c001988c <FAT::fixFilepath(char*)>
c0019a93:	83 c4 10             	add    esp,0x10
c0019a96:	83 ec 0c             	sub    esp,0xc
c0019a99:	6a 30                	push   0x30
c0019a9b:	e8 33 e0 fe ff       	call   c0007ad3 <malloc>
c0019aa0:	83 c4 10             	add    esp,0x10
c0019aa3:	89 c2                	mov    edx,eax
c0019aa5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019aac:	89 10                	mov    DWORD PTR [eax],edx
c0019aae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ab7:	83 ec 08             	sub    esp,0x8
c0019aba:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019abe:	52                   	push   edx
c0019abf:	50                   	push   eax
c0019ac0:	e8 6a ab fe ff       	call   c000462f <f_opendir>
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019acf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019ad7:	74 07                	je     c0019ae0 <FAT::openDir(char const*, void**)+0xa0>
c0019ad9:	b8 01 00 00 00       	mov    eax,0x1
c0019ade:	eb 08                	jmp    c0019ae8 <FAT::openDir(char const*, void**)+0xa8>
c0019ae0:	b8 00 00 00 00       	mov    eax,0x0
c0019ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019aee:	c3                   	ret    
c0019aef:	90                   	nop

c0019af0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019af0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019af6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019afe:	75 0c                	jne    c0019b0c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019b00:	b8 04 00 00 00       	mov    eax,0x4
c0019b05:	e9 d6 00 00 00       	jmp    c0019be0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b0a:	66 90                	xchg   ax,ax
c0019b0c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019b14:	75 0a                	jne    c0019b20 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019b16:	b8 04 00 00 00       	mov    eax,0x4
c0019b1b:	e9 c0 00 00 00       	jmp    c0019be0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b20:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019b28:	75 0a                	jne    c0019b34 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019b2a:	b8 04 00 00 00       	mov    eax,0x4
c0019b2f:	e9 ac 00 00 00       	jmp    c0019be0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b34:	83 ec 08             	sub    esp,0x8
c0019b37:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019b3e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b45:	50                   	push   eax
c0019b46:	e8 05 6b fe ff       	call   c0000650 <strcpy>
c0019b4b:	83 c4 10             	add    esp,0x10
c0019b4e:	83 ec 08             	sub    esp,0x8
c0019b51:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019b58:	50                   	push   eax
c0019b59:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019b60:	e8 27 fd ff ff       	call   c001988c <FAT::fixFilepath(char*)>
c0019b65:	83 c4 10             	add    esp,0x10
c0019b68:	83 ec 08             	sub    esp,0x8
c0019b6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019b6f:	50                   	push   eax
c0019b70:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b77:	50                   	push   eax
c0019b78:	e8 31 ac fe ff       	call   c00047ae <f_stat>
c0019b7d:	83 c4 10             	add    esp,0x10
c0019b80:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019b87:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019b8e:	85 c0                	test   eax,eax
c0019b90:	74 0a                	je     c0019b9c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019b92:	83 f8 04             	cmp    eax,0x4
c0019b95:	74 39                	je     c0019bd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019b97:	eb 3f                	jmp    c0019bd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019b99:	8d 76 00             	lea    esi,[esi+0x0]
c0019b9c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ba0:	0f b6 c0             	movzx  eax,al
c0019ba3:	83 e0 10             	and    eax,0x10
c0019ba6:	0f 95 c2             	setne  dl
c0019ba9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019bb0:	88 10                	mov    BYTE PTR [eax],dl
c0019bb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb6:	ba 00 00 00 00       	mov    edx,0x0
c0019bbb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019bc2:	89 01                	mov    DWORD PTR [ecx],eax
c0019bc4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019bc7:	b8 00 00 00 00       	mov    eax,0x0
c0019bcc:	eb 12                	jmp    c0019be0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019bce:	66 90                	xchg   ax,ax
c0019bd0:	b8 02 00 00 00       	mov    eax,0x2
c0019bd5:	eb 09                	jmp    c0019be0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019bd7:	90                   	nop
c0019bd8:	b8 01 00 00 00       	mov    eax,0x1
c0019bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0019be0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019be6:	c3                   	ret    
c0019be7:	90                   	nop

c0019be8 <FAT::unlink(char const*)>:
c0019be8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019bee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019bf6:	75 08                	jne    c0019c00 <FAT::unlink(char const*)+0x18>
c0019bf8:	b8 04 00 00 00       	mov    eax,0x4
c0019bfd:	eb 61                	jmp    c0019c60 <FAT::unlink(char const*)+0x78>
c0019bff:	90                   	nop
c0019c00:	83 ec 08             	sub    esp,0x8
c0019c03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c0e:	50                   	push   eax
c0019c0f:	e8 3c 6a fe ff       	call   c0000650 <strcpy>
c0019c14:	83 c4 10             	add    esp,0x10
c0019c17:	83 ec 08             	sub    esp,0x8
c0019c1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c1e:	50                   	push   eax
c0019c1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c26:	e8 61 fc ff ff       	call   c001988c <FAT::fixFilepath(char*)>
c0019c2b:	83 c4 10             	add    esp,0x10
c0019c2e:	83 ec 0c             	sub    esp,0xc
c0019c31:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c35:	50                   	push   eax
c0019c36:	e8 e5 ad fe ff       	call   c0004a20 <f_unlink>
c0019c3b:	83 c4 10             	add    esp,0x10
c0019c3e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019c45:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019c4c:	85 c0                	test   eax,eax
c0019c4e:	75 08                	jne    c0019c58 <FAT::unlink(char const*)+0x70>
c0019c50:	b8 00 00 00 00       	mov    eax,0x0
c0019c55:	eb 09                	jmp    c0019c60 <FAT::unlink(char const*)+0x78>
c0019c57:	90                   	nop
c0019c58:	b8 01 00 00 00       	mov    eax,0x1
c0019c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c60:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019c66:	c3                   	ret    
c0019c67:	90                   	nop

c0019c68 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019c68:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019c6e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019c75:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019c7c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019c80:	88 d0                	mov    al,dl
c0019c82:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c86:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019c8e:	75 0c                	jne    c0019c9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019c90:	b8 04 00 00 00       	mov    eax,0x4
c0019c95:	e9 7e 01 00 00       	jmp    c0019e18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019c9a:	66 90                	xchg   ax,ax
c0019c9c:	83 ec 08             	sub    esp,0x8
c0019c9f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ca6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019caa:	50                   	push   eax
c0019cab:	e8 a0 69 fe ff       	call   c0000650 <strcpy>
c0019cb0:	83 c4 10             	add    esp,0x10
c0019cb3:	83 ec 08             	sub    esp,0x8
c0019cb6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019cba:	50                   	push   eax
c0019cbb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019cc2:	e8 c5 fb ff ff       	call   c001988c <FAT::fixFilepath(char*)>
c0019cc7:	83 c4 10             	add    esp,0x10
c0019cca:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019cd2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019cda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cdf:	83 e0 01             	and    eax,0x1
c0019ce2:	74 14                	je     c0019cf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019ce4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ceb:	83 c8 01             	or     eax,0x1
c0019cee:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cfd:	83 e0 02             	and    eax,0x2
c0019d00:	74 12                	je     c0019d14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019d02:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d09:	83 c8 20             	or     eax,0x20
c0019d0c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d13:	90                   	nop
c0019d14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d19:	83 e0 04             	and    eax,0x4
c0019d1c:	74 12                	je     c0019d30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019d1e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d25:	83 c8 04             	or     eax,0x4
c0019d28:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d2f:	90                   	nop
c0019d30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d35:	83 e0 08             	and    eax,0x8
c0019d38:	74 12                	je     c0019d4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019d3a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d41:	83 c8 02             	or     eax,0x2
c0019d44:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d4b:	90                   	nop
c0019d4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d51:	83 e0 01             	and    eax,0x1
c0019d54:	74 12                	je     c0019d68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019d56:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d5d:	83 c8 01             	or     eax,0x1
c0019d60:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d67:	90                   	nop
c0019d68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d6d:	83 e0 02             	and    eax,0x2
c0019d70:	74 12                	je     c0019d84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019d72:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d79:	83 c8 20             	or     eax,0x20
c0019d7c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d83:	90                   	nop
c0019d84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d89:	83 e0 04             	and    eax,0x4
c0019d8c:	74 12                	je     c0019da0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019d8e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d95:	83 c8 04             	or     eax,0x4
c0019d98:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d9f:	90                   	nop
c0019da0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019da5:	83 e0 08             	and    eax,0x8
c0019da8:	74 12                	je     c0019dbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019daa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019db1:	83 c8 02             	or     eax,0x2
c0019db4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019dbb:	90                   	nop
c0019dbc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019dc3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019dca:	09 d0                	or     eax,edx
c0019dcc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019dd3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019ddb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019de3:	83 ec 04             	sub    esp,0x4
c0019de6:	52                   	push   edx
c0019de7:	50                   	push   eax
c0019de8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019dec:	50                   	push   eax
c0019ded:	e8 a1 b0 fe ff       	call   c0004e93 <f_chmod>
c0019df2:	83 c4 10             	add    esp,0x10
c0019df5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019dfc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019e03:	85 c0                	test   eax,eax
c0019e05:	75 09                	jne    c0019e10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019e07:	b8 00 00 00 00       	mov    eax,0x0
c0019e0c:	eb 0a                	jmp    c0019e18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019e0e:	66 90                	xchg   ax,ax
c0019e10:	b8 01 00 00 00       	mov    eax,0x1
c0019e15:	8d 76 00             	lea    esi,[esi+0x0]
c0019e18:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019e1e:	c3                   	ret    
c0019e1f:	90                   	nop

c0019e20 <FAT::rename(char const*, char const*)>:
c0019e20:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019e26:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019e2e:	74 0c                	je     c0019e3c <FAT::rename(char const*, char const*)+0x1c>
c0019e30:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019e38:	75 0e                	jne    c0019e48 <FAT::rename(char const*, char const*)+0x28>
c0019e3a:	66 90                	xchg   ax,ax
c0019e3c:	b8 04 00 00 00       	mov    eax,0x4
c0019e41:	e9 9e 00 00 00       	jmp    c0019ee4 <FAT::rename(char const*, char const*)+0xc4>
c0019e46:	66 90                	xchg   ax,ax
c0019e48:	83 ec 08             	sub    esp,0x8
c0019e4b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e52:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e59:	50                   	push   eax
c0019e5a:	e8 f1 67 fe ff       	call   c0000650 <strcpy>
c0019e5f:	83 c4 10             	add    esp,0x10
c0019e62:	83 ec 08             	sub    esp,0x8
c0019e65:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019e6c:	50                   	push   eax
c0019e6d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e74:	e8 13 fa ff ff       	call   c001988c <FAT::fixFilepath(char*)>
c0019e79:	83 c4 10             	add    esp,0x10
c0019e7c:	83 ec 08             	sub    esp,0x8
c0019e7f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019e86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e8a:	50                   	push   eax
c0019e8b:	e8 c0 67 fe ff       	call   c0000650 <strcpy>
c0019e90:	83 c4 10             	add    esp,0x10
c0019e93:	83 ec 08             	sub    esp,0x8
c0019e96:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e9a:	50                   	push   eax
c0019e9b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ea2:	e8 e5 f9 ff ff       	call   c001988c <FAT::fixFilepath(char*)>
c0019ea7:	83 c4 10             	add    esp,0x10
c0019eaa:	83 ec 08             	sub    esp,0x8
c0019ead:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019eb1:	50                   	push   eax
c0019eb2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019eb9:	50                   	push   eax
c0019eba:	e8 1c ae fe ff       	call   c0004cdb <f_rename>
c0019ebf:	83 c4 10             	add    esp,0x10
c0019ec2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019ec9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019ed0:	85 c0                	test   eax,eax
c0019ed2:	75 08                	jne    c0019edc <FAT::rename(char const*, char const*)+0xbc>
c0019ed4:	b8 00 00 00 00       	mov    eax,0x0
c0019ed9:	eb 09                	jmp    c0019ee4 <FAT::rename(char const*, char const*)+0xc4>
c0019edb:	90                   	nop
c0019edc:	b8 01 00 00 00       	mov    eax,0x1
c0019ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ee4:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019eea:	c3                   	ret    
c0019eeb:	90                   	nop

c0019eec <FAT::mkdir(char const*)>:
c0019eec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ef2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019efa:	75 08                	jne    c0019f04 <FAT::mkdir(char const*)+0x18>
c0019efc:	b8 04 00 00 00       	mov    eax,0x4
c0019f01:	eb 61                	jmp    c0019f64 <FAT::mkdir(char const*)+0x78>
c0019f03:	90                   	nop
c0019f04:	83 ec 08             	sub    esp,0x8
c0019f07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f12:	50                   	push   eax
c0019f13:	e8 38 67 fe ff       	call   c0000650 <strcpy>
c0019f18:	83 c4 10             	add    esp,0x10
c0019f1b:	83 ec 08             	sub    esp,0x8
c0019f1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f22:	50                   	push   eax
c0019f23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f2a:	e8 5d f9 ff ff       	call   c001988c <FAT::fixFilepath(char*)>
c0019f2f:	83 c4 10             	add    esp,0x10
c0019f32:	83 ec 0c             	sub    esp,0xc
c0019f35:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f39:	50                   	push   eax
c0019f3a:	e8 01 ac fe ff       	call   c0004b40 <f_mkdir>
c0019f3f:	83 c4 10             	add    esp,0x10
c0019f42:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f49:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019f50:	85 c0                	test   eax,eax
c0019f52:	75 08                	jne    c0019f5c <FAT::mkdir(char const*)+0x70>
c0019f54:	b8 00 00 00 00       	mov    eax,0x0
c0019f59:	eb 09                	jmp    c0019f64 <FAT::mkdir(char const*)+0x78>
c0019f5b:	90                   	nop
c0019f5c:	b8 01 00 00 00       	mov    eax,0x1
c0019f61:	8d 76 00             	lea    esi,[esi+0x0]
c0019f64:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f6a:	c3                   	ret    
c0019f6b:	90                   	nop

c0019f6c <FAT::exists(char const*)>:
c0019f6c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f72:	83 ec 08             	sub    esp,0x8
c0019f75:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f7c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f80:	50                   	push   eax
c0019f81:	e8 ca 66 fe ff       	call   c0000650 <strcpy>
c0019f86:	83 c4 10             	add    esp,0x10
c0019f89:	83 ec 08             	sub    esp,0x8
c0019f8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f90:	50                   	push   eax
c0019f91:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f98:	e8 ef f8 ff ff       	call   c001988c <FAT::fixFilepath(char*)>
c0019f9d:	83 c4 10             	add    esp,0x10
c0019fa0:	83 ec 08             	sub    esp,0x8
c0019fa3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019faa:	50                   	push   eax
c0019fab:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019faf:	50                   	push   eax
c0019fb0:	e8 f9 a7 fe ff       	call   c00047ae <f_stat>
c0019fb5:	83 c4 10             	add    esp,0x10
c0019fb8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019fbf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fc6:	85 c0                	test   eax,eax
c0019fc8:	75 06                	jne    c0019fd0 <FAT::exists(char const*)+0x64>
c0019fca:	b0 01                	mov    al,0x1
c0019fcc:	eb 06                	jmp    c0019fd4 <FAT::exists(char const*)+0x68>
c0019fce:	66 90                	xchg   ax,ax
c0019fd0:	b0 00                	mov    al,0x0
c0019fd2:	66 90                	xchg   ax,ax
c0019fd4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fda:	c3                   	ret    
c0019fdb:	90                   	nop

c0019fdc <isoReadDiscSectorHelper>:
c0019fdc:	83 ec 2c             	sub    esp,0x2c
c0019fdf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019fe3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fe7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019fec:	83 e8 41             	sub    eax,0x41
c0019fef:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019ff6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ffa:	ba 00 00 00 00       	mov    edx,0x0
c0019fff:	83 ec 0c             	sub    esp,0xc
c001a002:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a006:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a00a:	52                   	push   edx
c001a00b:	50                   	push   eax
c001a00c:	51                   	push   ecx
c001a00d:	e8 fc 3a ff ff       	call   c000db0e <LogicalDisk::read(unsigned long long, int, void*)>
c001a012:	83 c4 20             	add    esp,0x20
c001a015:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a019:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a01e:	74 0c                	je     c001a02c <isoReadDiscSectorHelper+0x50>
c001a020:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a024:	c1 e0 0b             	shl    eax,0xb
c001a027:	eb 0b                	jmp    c001a034 <isoReadDiscSectorHelper+0x58>
c001a029:	8d 76 00             	lea    esi,[esi+0x0]
c001a02c:	b8 00 00 00 00       	mov    eax,0x0
c001a031:	8d 76 00             	lea    esi,[esi+0x0]
c001a034:	83 c4 2c             	add    esp,0x2c
c001a037:	c3                   	ret    

c001a038 <iso_kprintf>:
c001a038:	83 ec 0c             	sub    esp,0xc
c001a03b:	83 ec 08             	sub    esp,0x8
c001a03e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a042:	68 7a 27 02 c0       	push   0xc002277a
c001a047:	e8 be 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a04c:	83 c4 10             	add    esp,0x10
c001a04f:	90                   	nop
c001a050:	83 c4 0c             	add    esp,0xc
c001a053:	c3                   	ret    

c001a054 <iso_kprintfd>:
c001a054:	83 ec 0c             	sub    esp,0xc
c001a057:	83 ec 08             	sub    esp,0x8
c001a05a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a05e:	68 5a 0f 02 c0       	push   0xc0020f5a
c001a063:	e8 a2 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a068:	83 c4 10             	add    esp,0x10
c001a06b:	90                   	nop
c001a06c:	83 c4 0c             	add    esp,0xc
c001a06f:	c3                   	ret    

c001a070 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a070:	b8 08 00 00 00       	mov    eax,0x8
c001a075:	c3                   	ret    

c001a076 <ISO9660::truncate(void*, unsigned long long)>:
c001a076:	b8 01 00 00 00       	mov    eax,0x1
c001a07b:	c3                   	ret    

c001a07c <ISO9660::getName()>:
c001a07c:	b8 30 2a 02 c0       	mov    eax,0xc0022a30
c001a081:	c3                   	ret    

c001a082 <ISO9660::closeDir(void*)>:
c001a082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a086:	8b 00                	mov    eax,DWORD PTR [eax]
c001a088:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a08b:	90                   	nop

c001a08c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a08c:	b8 01 00 00 00       	mov    eax,0x1
c001a091:	c3                   	ret    

c001a092 <ISO9660::unlink(char const*)>:
c001a092:	b8 01 00 00 00       	mov    eax,0x1
c001a097:	c3                   	ret    

c001a098 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a098:	b8 03 00 00 00       	mov    eax,0x3
c001a09d:	c3                   	ret    

c001a09e <ISO9660::rename(char const*, char const*)>:
c001a09e:	b8 01 00 00 00       	mov    eax,0x1
c001a0a3:	c3                   	ret    

c001a0a4 <ISO9660::mkdir(char const*)>:
c001a0a4:	b8 01 00 00 00       	mov    eax,0x1
c001a0a9:	c3                   	ret    

c001a0aa <ISO9660::~ISO9660()>:
c001a0aa:	83 ec 0c             	sub    esp,0xc
c001a0ad:	ba 70 2b 02 c0       	mov    edx,0xc0022b70
c001a0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b6:	89 10                	mov    DWORD PTR [eax],edx
c001a0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0bc:	83 ec 0c             	sub    esp,0xc
c001a0bf:	50                   	push   eax
c001a0c0:	e8 5f 14 ff ff       	call   c000b524 <Filesystem::~Filesystem()>
c001a0c5:	83 c4 10             	add    esp,0x10
c001a0c8:	90                   	nop
c001a0c9:	83 c4 0c             	add    esp,0xc
c001a0cc:	c3                   	ret    
c001a0cd:	90                   	nop

c001a0ce <ISO9660::~ISO9660()>:
c001a0ce:	83 ec 0c             	sub    esp,0xc
c001a0d1:	83 ec 0c             	sub    esp,0xc
c001a0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0d8:	e8 cd ff ff ff       	call   c001a0aa <ISO9660::~ISO9660()>
c001a0dd:	83 c4 10             	add    esp,0x10
c001a0e0:	83 ec 08             	sub    esp,0x8
c001a0e3:	6a 08                	push   0x8
c001a0e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0e9:	e8 1e 07 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a0ee:	83 c4 10             	add    esp,0x10
c001a0f1:	83 c4 0c             	add    esp,0xc
c001a0f4:	c3                   	ret    
c001a0f5:	90                   	nop

c001a0f6 <ISO9660::exists(char const*)>:
c001a0f6:	83 ec 18             	sub    esp,0x18
c001a0f9:	68 4b 2a 02 c0       	push   0xc0022a4b
c001a0fe:	e8 be 71 ff ff       	call   c00112c1 <KePanic(char const*)>
c001a103:	31 c0                	xor    eax,eax
c001a105:	83 c4 1c             	add    esp,0x1c
c001a108:	c3                   	ret    
c001a109:	90                   	nop

c001a10a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a10a:	56                   	push   esi
c001a10b:	53                   	push   ebx
c001a10c:	53                   	push   ebx
c001a10d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a111:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a115:	85 db                	test   ebx,ebx
c001a117:	0f 84 ca 00 00 00    	je     c001a1e7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a11d:	85 f6                	test   esi,esi
c001a11f:	0f 84 c2 00 00 00    	je     c001a1e7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a125:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a12a:	b8 03 00 00 00       	mov    eax,0x3
c001a12f:	0f 85 b7 00 00 00    	jne    c001a1ec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a135:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a137:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a13d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a144:	74 1b                	je     c001a161 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a146:	85 c0                	test   eax,eax
c001a148:	74 10                	je     c001a15a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a14a:	83 ec 0c             	sub    esp,0xc
c001a14d:	68 69 2a 02 c0       	push   0xc0022a69
c001a152:	e8 6a 71 ff ff       	call   c00112c1 <KePanic(char const*)>
c001a157:	83 c4 10             	add    esp,0x10
c001a15a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a15c:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a161:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a164:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a16b:	85 c0                	test   eax,eax
c001a16d:	74 09                	je     c001a178 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a16f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a176:	74 48                	je     c001a1c0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a178:	83 ec 0c             	sub    esp,0xc
c001a17b:	68 79 2a 02 c0       	push   0xc0022a79
c001a180:	e8 85 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a185:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a188:	83 c4 10             	add    esp,0x10
c001a18b:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a192:	85 c0                	test   eax,eax
c001a194:	74 17                	je     c001a1ad <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a196:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a19d:	83 ec 0c             	sub    esp,0xc
c001a1a0:	68 99 2a 02 c0       	push   0xc0022a99
c001a1a5:	e8 60 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1aa:	83 c4 10             	add    esp,0x10
c001a1ad:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1b4:	83 ec 0c             	sub    esp,0xc
c001a1b7:	50                   	push   eax
c001a1b8:	e8 aa c8 fe ff       	call   c0006a67 <init_percd>
c001a1bd:	83 c4 10             	add    esp,0x10
c001a1c0:	51                   	push   ecx
c001a1c1:	83 c3 03             	add    ebx,0x3
c001a1c4:	51                   	push   ecx
c001a1c5:	6a 00                	push   0x0
c001a1c7:	53                   	push   ebx
c001a1c8:	e8 5d c3 fe ff       	call   c000652a <iso_open>
c001a1cd:	83 c4 10             	add    esp,0x10
c001a1d0:	89 c2                	mov    edx,eax
c001a1d2:	b8 01 00 00 00       	mov    eax,0x1
c001a1d7:	83 fa ff             	cmp    edx,0xffffffff
c001a1da:	74 10                	je     c001a1ec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a1dc:	83 c2 32             	add    edx,0x32
c001a1df:	31 c0                	xor    eax,eax
c001a1e1:	01 d2                	add    edx,edx
c001a1e3:	89 16                	mov    DWORD PTR [esi],edx
c001a1e5:	eb 05                	jmp    c001a1ec <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a1e7:	b8 04 00 00 00       	mov    eax,0x4
c001a1ec:	5a                   	pop    edx
c001a1ed:	5b                   	pop    ebx
c001a1ee:	5e                   	pop    esi
c001a1ef:	c3                   	ret    

c001a1f0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a1f0:	53                   	push   ebx
c001a1f1:	83 ec 08             	sub    esp,0x8
c001a1f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1fc:	85 c0                	test   eax,eax
c001a1fe:	74 2d                	je     c001a22d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a200:	85 db                	test   ebx,ebx
c001a202:	74 29                	je     c001a22d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a204:	52                   	push   edx
c001a205:	b9 02 00 00 00       	mov    ecx,0x2
c001a20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a20e:	99                   	cdq    
c001a20f:	f7 f9                	idiv   ecx
c001a211:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a215:	83 e8 32             	sub    eax,0x32
c001a218:	50                   	push   eax
c001a219:	e8 b4 c3 fe ff       	call   c00065d2 <iso_read>
c001a21e:	83 c4 10             	add    esp,0x10
c001a221:	89 03                	mov    DWORD PTR [ebx],eax
c001a223:	09 d0                	or     eax,edx
c001a225:	0f 94 c0             	sete   al
c001a228:	0f b6 c0             	movzx  eax,al
c001a22b:	eb 05                	jmp    c001a232 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a22d:	b8 04 00 00 00       	mov    eax,0x4
c001a232:	83 c4 08             	add    esp,0x8
c001a235:	5b                   	pop    ebx
c001a236:	c3                   	ret    
c001a237:	90                   	nop

c001a238 <ISO9660::seek(void*, unsigned long long)>:
c001a238:	57                   	push   edi
c001a239:	b8 04 00 00 00       	mov    eax,0x4
c001a23e:	56                   	push   esi
c001a23f:	51                   	push   ecx
c001a240:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a244:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a248:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a24c:	85 d2                	test   edx,edx
c001a24e:	74 26                	je     c001a276 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a250:	89 d0                	mov    eax,edx
c001a252:	b9 02 00 00 00       	mov    ecx,0x2
c001a257:	6a 00                	push   0x0
c001a259:	99                   	cdq    
c001a25a:	f7 f9                	idiv   ecx
c001a25c:	57                   	push   edi
c001a25d:	56                   	push   esi
c001a25e:	83 e8 32             	sub    eax,0x32
c001a261:	50                   	push   eax
c001a262:	e8 81 c4 fe ff       	call   c00066e8 <iso_seek>
c001a267:	83 c4 10             	add    esp,0x10
c001a26a:	31 f0                	xor    eax,esi
c001a26c:	31 fa                	xor    edx,edi
c001a26e:	09 d0                	or     eax,edx
c001a270:	0f 95 c0             	setne  al
c001a273:	0f b6 c0             	movzx  eax,al
c001a276:	5a                   	pop    edx
c001a277:	5e                   	pop    esi
c001a278:	5f                   	pop    edi
c001a279:	c3                   	ret    

c001a27a <ISO9660::tell(void*, unsigned long long*)>:
c001a27a:	53                   	push   ebx
c001a27b:	83 ec 08             	sub    esp,0x8
c001a27e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a282:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a286:	85 c0                	test   eax,eax
c001a288:	74 24                	je     c001a2ae <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a28a:	85 db                	test   ebx,ebx
c001a28c:	74 20                	je     c001a2ae <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a28e:	b9 02 00 00 00       	mov    ecx,0x2
c001a293:	99                   	cdq    
c001a294:	f7 f9                	idiv   ecx
c001a296:	83 ec 0c             	sub    esp,0xc
c001a299:	83 e8 32             	sub    eax,0x32
c001a29c:	50                   	push   eax
c001a29d:	e8 ca c4 fe ff       	call   c000676c <iso_tell>
c001a2a2:	83 c4 10             	add    esp,0x10
c001a2a5:	89 03                	mov    DWORD PTR [ebx],eax
c001a2a7:	31 c0                	xor    eax,eax
c001a2a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a2ac:	eb 05                	jmp    c001a2b3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a2ae:	b8 04 00 00 00       	mov    eax,0x4
c001a2b3:	83 c4 08             	add    esp,0x8
c001a2b6:	5b                   	pop    ebx
c001a2b7:	c3                   	ret    

c001a2b8 <ISO9660::stat(void*, unsigned long long*)>:
c001a2b8:	56                   	push   esi
c001a2b9:	53                   	push   ebx
c001a2ba:	83 ec 10             	sub    esp,0x10
c001a2bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2c1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a2c5:	68 bd 2a 02 c0       	push   0xc0022abd
c001a2ca:	e8 3b 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a2cf:	83 c4 10             	add    esp,0x10
c001a2d2:	85 db                	test   ebx,ebx
c001a2d4:	74 2a                	je     c001a300 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a2d6:	85 f6                	test   esi,esi
c001a2d8:	74 26                	je     c001a300 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a2da:	89 d8                	mov    eax,ebx
c001a2dc:	b9 02 00 00 00       	mov    ecx,0x2
c001a2e1:	99                   	cdq    
c001a2e2:	83 ec 0c             	sub    esp,0xc
c001a2e5:	f7 f9                	idiv   ecx
c001a2e7:	83 e8 32             	sub    eax,0x32
c001a2ea:	50                   	push   eax
c001a2eb:	e8 ad c4 fe ff       	call   c000679d <iso_total>
c001a2f0:	83 c4 10             	add    esp,0x10
c001a2f3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a2fa:	89 06                	mov    DWORD PTR [esi],eax
c001a2fc:	31 c0                	xor    eax,eax
c001a2fe:	eb 05                	jmp    c001a305 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a300:	b8 04 00 00 00       	mov    eax,0x4
c001a305:	5a                   	pop    edx
c001a306:	5b                   	pop    ebx
c001a307:	5e                   	pop    esi
c001a308:	c3                   	ret    
c001a309:	90                   	nop

c001a30a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a30a:	55                   	push   ebp
c001a30b:	57                   	push   edi
c001a30c:	56                   	push   esi
c001a30d:	53                   	push   ebx
c001a30e:	83 ec 18             	sub    esp,0x18
c001a311:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a315:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a319:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a31d:	68 c5 2a 02 c0       	push   0xc0022ac5
c001a322:	e8 e3 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a327:	83 c4 10             	add    esp,0x10
c001a32a:	85 ff                	test   edi,edi
c001a32c:	0f 94 c0             	sete   al
c001a32f:	85 f6                	test   esi,esi
c001a331:	0f 94 c2             	sete   dl
c001a334:	09 d0                	or     eax,edx
c001a336:	a8 01                	test   al,0x1
c001a338:	0f 85 dd 00 00 00    	jne    c001a41b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a33e:	85 db                	test   ebx,ebx
c001a340:	0f 84 d5 00 00 00    	je     c001a41b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a346:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a349:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a34f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a356:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a35d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a35f:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a365:	74 1b                	je     c001a382 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a367:	85 c0                	test   eax,eax
c001a369:	74 10                	je     c001a37b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a36b:	83 ec 0c             	sub    esp,0xc
c001a36e:	68 69 2a 02 c0       	push   0xc0022a69
c001a373:	e8 49 6f ff ff       	call   c00112c1 <KePanic(char const*)>
c001a378:	83 c4 10             	add    esp,0x10
c001a37b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a37d:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a382:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a385:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a38c:	85 c0                	test   eax,eax
c001a38e:	74 09                	je     c001a399 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a390:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a397:	74 51                	je     c001a3ea <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a399:	83 ec 0c             	sub    esp,0xc
c001a39c:	68 cd 2a 02 c0       	push   0xc0022acd
c001a3a1:	e8 64 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3a6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a3a9:	83 c4 10             	add    esp,0x10
c001a3ac:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a3b4:	74 21                	je     c001a3d7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a3b6:	83 ec 0c             	sub    esp,0xc
c001a3b9:	68 ed 2a 02 c0       	push   0xc0022aed
c001a3be:	e8 47 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3c3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a3c6:	83 c4 10             	add    esp,0x10
c001a3c9:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a3d0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a3d7:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a3de:	83 ec 0c             	sub    esp,0xc
c001a3e1:	50                   	push   eax
c001a3e2:	e8 80 c6 fe ff       	call   c0006a67 <init_percd>
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	52                   	push   edx
c001a3eb:	83 c3 03             	add    ebx,0x3
c001a3ee:	52                   	push   edx
c001a3ef:	6a 00                	push   0x0
c001a3f1:	53                   	push   ebx
c001a3f2:	e8 33 c1 fe ff       	call   c000652a <iso_open>
c001a3f7:	83 c4 10             	add    esp,0x10
c001a3fa:	83 f8 ff             	cmp    eax,0xffffffff
c001a3fd:	89 c5                	mov    ebp,eax
c001a3ff:	75 21                	jne    c001a422 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a401:	50                   	push   eax
c001a402:	50                   	push   eax
c001a403:	6a 01                	push   0x1
c001a405:	53                   	push   ebx
c001a406:	e8 1f c1 fe ff       	call   c000652a <iso_open>
c001a40b:	83 c4 10             	add    esp,0x10
c001a40e:	ba 02 00 00 00       	mov    edx,0x2
c001a413:	40                   	inc    eax
c001a414:	74 2b                	je     c001a441 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a416:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a419:	eb 24                	jmp    c001a43f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a41b:	ba 04 00 00 00       	mov    edx,0x4
c001a420:	eb 1f                	jmp    c001a441 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a422:	83 ec 0c             	sub    esp,0xc
c001a425:	50                   	push   eax
c001a426:	e8 72 c3 fe ff       	call   c000679d <iso_total>
c001a42b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a432:	89 07                	mov    DWORD PTR [edi],eax
c001a434:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a437:	e8 78 c1 fe ff       	call   c00065b4 <iso_close>
c001a43c:	83 c4 10             	add    esp,0x10
c001a43f:	31 d2                	xor    edx,edx
c001a441:	83 c4 0c             	add    esp,0xc
c001a444:	89 d0                	mov    eax,edx
c001a446:	5b                   	pop    ebx
c001a447:	5e                   	pop    esi
c001a448:	5f                   	pop    edi
c001a449:	5d                   	pop    ebp
c001a44a:	c3                   	ret    
c001a44b:	90                   	nop

c001a44c <ISO9660::close(void*)>:
c001a44c:	83 ec 0c             	sub    esp,0xc
c001a44f:	b8 04 00 00 00       	mov    eax,0x4
c001a454:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a458:	85 d2                	test   edx,edx
c001a45a:	74 1b                	je     c001a477 <ISO9660::close(void*)+0x2b>
c001a45c:	89 d0                	mov    eax,edx
c001a45e:	b9 02 00 00 00       	mov    ecx,0x2
c001a463:	99                   	cdq    
c001a464:	83 ec 0c             	sub    esp,0xc
c001a467:	f7 f9                	idiv   ecx
c001a469:	83 e8 32             	sub    eax,0x32
c001a46c:	50                   	push   eax
c001a46d:	e8 42 c1 fe ff       	call   c00065b4 <iso_close>
c001a472:	83 c4 10             	add    esp,0x10
c001a475:	31 c0                	xor    eax,eax
c001a477:	83 c4 0c             	add    esp,0xc
c001a47a:	c3                   	ret    
c001a47b:	90                   	nop

c001a47c <ISO9660::openDir(char const*, void**)>:
c001a47c:	56                   	push   esi
c001a47d:	53                   	push   ebx
c001a47e:	50                   	push   eax
c001a47f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a483:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a487:	85 db                	test   ebx,ebx
c001a489:	0f 84 bd 00 00 00    	je     c001a54c <ISO9660::openDir(char const*, void**)+0xd0>
c001a48f:	85 f6                	test   esi,esi
c001a491:	0f 84 b5 00 00 00    	je     c001a54c <ISO9660::openDir(char const*, void**)+0xd0>
c001a497:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a499:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a49f:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a4a6:	74 1b                	je     c001a4c3 <ISO9660::openDir(char const*, void**)+0x47>
c001a4a8:	85 c0                	test   eax,eax
c001a4aa:	74 10                	je     c001a4bc <ISO9660::openDir(char const*, void**)+0x40>
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	68 69 2a 02 c0       	push   0xc0022a69
c001a4b4:	e8 08 6e ff ff       	call   c00112c1 <KePanic(char const*)>
c001a4b9:	83 c4 10             	add    esp,0x10
c001a4bc:	8a 03                	mov    al,BYTE PTR [ebx]
c001a4be:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a4c3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4c6:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a4cd:	85 c0                	test   eax,eax
c001a4cf:	74 10                	je     c001a4e1 <ISO9660::openDir(char const*, void**)+0x65>
c001a4d1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a4d8:	74 1a                	je     c001a4f4 <ISO9660::openDir(char const*, void**)+0x78>
c001a4da:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a4e1:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a4e8:	83 ec 0c             	sub    esp,0xc
c001a4eb:	50                   	push   eax
c001a4ec:	e8 76 c5 fe ff       	call   c0006a67 <init_percd>
c001a4f1:	83 c4 10             	add    esp,0x10
c001a4f4:	50                   	push   eax
c001a4f5:	83 c3 03             	add    ebx,0x3
c001a4f8:	50                   	push   eax
c001a4f9:	6a 01                	push   0x1
c001a4fb:	53                   	push   ebx
c001a4fc:	e8 29 c0 fe ff       	call   c000652a <iso_open>
c001a501:	83 c4 10             	add    esp,0x10
c001a504:	83 f8 ff             	cmp    eax,0xffffffff
c001a507:	89 c3                	mov    ebx,eax
c001a509:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a50e:	75 1c                	jne    c001a52c <ISO9660::openDir(char const*, void**)+0xb0>
c001a510:	53                   	push   ebx
c001a511:	53                   	push   ebx
c001a512:	68 11 2b 02 c0       	push   0xc0022b11
c001a517:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a51d:	e8 8a e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a522:	83 c4 10             	add    esp,0x10
c001a525:	b8 01 00 00 00       	mov    eax,0x1
c001a52a:	eb 25                	jmp    c001a551 <ISO9660::openDir(char const*, void**)+0xd5>
c001a52c:	51                   	push   ecx
c001a52d:	01 db                	add    ebx,ebx
c001a52f:	51                   	push   ecx
c001a530:	83 c3 65             	add    ebx,0x65
c001a533:	68 24 2b 02 c0       	push   0xc0022b24
c001a538:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a53e:	e8 69 e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a543:	83 c4 10             	add    esp,0x10
c001a546:	31 c0                	xor    eax,eax
c001a548:	89 1e                	mov    DWORD PTR [esi],ebx
c001a54a:	eb 05                	jmp    c001a551 <ISO9660::openDir(char const*, void**)+0xd5>
c001a54c:	b8 04 00 00 00       	mov    eax,0x4
c001a551:	5a                   	pop    edx
c001a552:	5b                   	pop    ebx
c001a553:	5e                   	pop    esi
c001a554:	c3                   	ret    
c001a555:	90                   	nop

c001a556 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a556:	55                   	push   ebp
c001a557:	57                   	push   edi
c001a558:	56                   	push   esi
c001a559:	53                   	push   ebx
c001a55a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a560:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a567:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a56e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a575:	85 db                	test   ebx,ebx
c001a577:	0f 84 e4 00 00 00    	je     c001a661 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a57d:	85 ed                	test   ebp,ebp
c001a57f:	0f 84 dc 00 00 00    	je     c001a661 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a585:	83 ec 0c             	sub    esp,0xc
c001a588:	68 37 2b 02 c0       	push   0xc0022b37
c001a58d:	e8 78 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a592:	89 d8                	mov    eax,ebx
c001a594:	b9 02 00 00 00       	mov    ecx,0x2
c001a599:	99                   	cdq    
c001a59a:	f7 f9                	idiv   ecx
c001a59c:	83 e8 32             	sub    eax,0x32
c001a59f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5a2:	e8 48 c2 fe ff       	call   c00067ef <iso_readdir>
c001a5a7:	83 c4 10             	add    esp,0x10
c001a5aa:	85 c0                	test   eax,eax
c001a5ac:	89 c3                	mov    ebx,eax
c001a5ae:	75 38                	jne    c001a5e8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a5b0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a5b5:	53                   	push   ebx
c001a5b6:	53                   	push   ebx
c001a5b7:	68 42 2b 02 c0       	push   0xc0022b42
c001a5bc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a5c2:	e8 e5 e4 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a5c7:	83 c4 0c             	add    esp,0xc
c001a5ca:	68 10 01 00 00       	push   0x110
c001a5cf:	6a 00                	push   0x0
c001a5d1:	57                   	push   edi
c001a5d2:	e8 19 5f fe ff       	call   c00004f0 <memset>
c001a5d7:	83 c4 10             	add    esp,0x10
c001a5da:	b8 01 00 00 00       	mov    eax,0x1
c001a5df:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a5e6:	eb 7e                	jmp    c001a666 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a5e8:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a5ee:	8d 70 08             	lea    esi,[eax+0x8]
c001a5f1:	83 ec 0c             	sub    esp,0xc
c001a5f4:	56                   	push   esi
c001a5f5:	e8 86 5f fe ff       	call   c0000580 <strlen>
c001a5fa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a602:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a606:	83 c4 10             	add    esp,0x10
c001a609:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a60d:	75 0a                	jne    c001a619 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a60f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a612:	b8 02 00 00 00       	mov    eax,0x2
c001a617:	74 05                	je     c001a61e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a619:	b8 01 00 00 00       	mov    eax,0x1
c001a61e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a622:	50                   	push   eax
c001a623:	50                   	push   eax
c001a624:	56                   	push   esi
c001a625:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a629:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a62d:	50                   	push   eax
c001a62e:	e8 1d 60 fe ff       	call   c0000650 <strcpy>
c001a633:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a63a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a63c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a643:	5a                   	pop    edx
c001a644:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a649:	59                   	pop    ecx
c001a64a:	68 55 2b 02 c0       	push   0xc0022b55
c001a64f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a655:	e8 52 e4 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	31 c0                	xor    eax,eax
c001a65f:	eb 05                	jmp    c001a666 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a661:	b8 04 00 00 00       	mov    eax,0x4
c001a666:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a66c:	5b                   	pop    ebx
c001a66d:	5e                   	pop    esi
c001a66e:	5f                   	pop    edi
c001a66f:	5d                   	pop    ebp
c001a670:	c3                   	ret    

c001a671 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a671:	57                   	push   edi
c001a672:	56                   	push   esi
c001a673:	53                   	push   ebx
c001a674:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a678:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a67c:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a682:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a686:	0f be cb             	movsx  ecx,bl
c001a689:	75 0b                	jne    c001a696 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a68b:	0f be 05 80 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023980
c001a692:	39 c8                	cmp    eax,ecx
c001a694:	74 47                	je     c001a6dd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a696:	83 ec 0c             	sub    esp,0xc
c001a699:	31 d2                	xor    edx,edx
c001a69b:	68 a0 98 02 c0       	push   0xc00298a0
c001a6a0:	6a 01                	push   0x1
c001a6a2:	52                   	push   edx
c001a6a3:	56                   	push   esi
c001a6a4:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a6ab:	e8 5e 34 ff ff       	call   c000db0e <LogicalDisk::read(unsigned long long, int, void*)>
c001a6b0:	83 c4 20             	add    esp,0x20
c001a6b3:	85 c0                	test   eax,eax
c001a6b5:	75 0e                	jne    c001a6c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a6b7:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a6bd:	88 1d 80 39 02 c0    	mov    BYTE PTR ds:0xc0023980,bl
c001a6c3:	eb 18                	jmp    c001a6dd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a6c5:	50                   	push   eax
c001a6c6:	68 00 08 00 00       	push   0x800
c001a6cb:	6a 00                	push   0x0
c001a6cd:	57                   	push   edi
c001a6ce:	e8 1d 5e fe ff       	call   c00004f0 <memset>
c001a6d3:	83 c4 10             	add    esp,0x10
c001a6d6:	b8 01 00 00 00       	mov    eax,0x1
c001a6db:	eb 0e                	jmp    c001a6eb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a6dd:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a6e2:	b9 00 08 00 00       	mov    ecx,0x800
c001a6e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6e9:	31 c0                	xor    eax,eax
c001a6eb:	5b                   	pop    ebx
c001a6ec:	5e                   	pop    esi
c001a6ed:	5f                   	pop    edi
c001a6ee:	c3                   	ret    
c001a6ef:	90                   	nop

c001a6f0 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a6f0:	53                   	push   ebx
c001a6f1:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a6f7:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a701:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a708:	8d 58 41             	lea    ebx,[eax+0x41]
c001a70b:	0f be db             	movsx  ebx,bl
c001a70e:	53                   	push   ebx
c001a70f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a713:	50                   	push   eax
c001a714:	6a 10                	push   0x10
c001a716:	e8 56 ff ff ff       	call   c001a671 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a71b:	83 c4 10             	add    esp,0x10
c001a71e:	31 d2                	xor    edx,edx
c001a720:	85 c0                	test   eax,eax
c001a722:	75 33                	jne    c001a757 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a724:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a729:	75 2c                	jne    c001a757 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a72b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a730:	75 25                	jne    c001a757 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a732:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a737:	75 1e                	jne    c001a757 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a739:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a73e:	75 17                	jne    c001a757 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a740:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a745:	75 10                	jne    c001a757 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a747:	83 ec 0c             	sub    esp,0xc
c001a74a:	53                   	push   ebx
c001a74b:	e8 17 c3 fe ff       	call   c0006a67 <init_percd>
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	40                   	inc    eax
c001a754:	0f 95 c2             	setne  dl
c001a757:	81 c4 08 08 00 00    	add    esp,0x808
c001a75d:	88 d0                	mov    al,dl
c001a75f:	5b                   	pop    ebx
c001a760:	c3                   	ret    
c001a761:	90                   	nop

c001a762 <ISO9660::ISO9660()>:
c001a762:	83 ec 0c             	sub    esp,0xc
c001a765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a769:	83 ec 0c             	sub    esp,0xc
c001a76c:	50                   	push   eax
c001a76d:	e8 8e 0d ff ff       	call   c000b500 <Filesystem::Filesystem()>
c001a772:	83 c4 10             	add    esp,0x10
c001a775:	ba 70 2b 02 c0       	mov    edx,0xc0022b70
c001a77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a77e:	89 10                	mov    DWORD PTR [eax],edx
c001a780:	e8 f4 c3 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a785:	90                   	nop
c001a786:	83 c4 0c             	add    esp,0xc
c001a789:	c3                   	ret    

c001a78a <SoundCard::beginPlayback()>:
c001a78a:	c7 44 24 04 d4 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bd4
c001a792:	e9 2a 6b ff ff       	jmp    c00112c1 <KePanic(char const*)>
c001a797:	90                   	nop

c001a798 <SoundCard::stopPlayback()>:
c001a798:	c7 44 24 04 d4 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bd4
c001a7a0:	e9 1c 6b ff ff       	jmp    c00112c1 <KePanic(char const*)>
c001a7a5:	90                   	nop

c001a7a6 <SoundCard::SoundCard(char const*)>:
c001a7a6:	83 ec 1c             	sub    esp,0x1c
c001a7a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7ad:	83 ec 08             	sub    esp,0x8
c001a7b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7b4:	50                   	push   eax
c001a7b5:	e8 02 21 ff ff       	call   c000c8bc <Device::Device(char const*)>
c001a7ba:	83 c4 10             	add    esp,0x10
c001a7bd:	ba 20 2c 02 c0       	mov    edx,0xc0022c20
c001a7c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7c6:	89 10                	mov    DWORD PTR [eax],edx
c001a7c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7cc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7d7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a7e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7e5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a7ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7f3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a801:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a80b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a813:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a818:	7f 1a                	jg     c001a834 <SoundCard::SoundCard(char const*)+0x8e>
c001a81a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a81e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a822:	83 c2 54             	add    edx,0x54
c001a825:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a82d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a832:	eb df                	jmp    c001a813 <SoundCard::SoundCard(char const*)+0x6d>
c001a834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a838:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a83f:	90                   	nop
c001a840:	83 c4 1c             	add    esp,0x1c
c001a843:	c3                   	ret    

c001a844 <SoundCard::~SoundCard()>:
c001a844:	83 ec 0c             	sub    esp,0xc
c001a847:	ba 20 2c 02 c0       	mov    edx,0xc0022c20
c001a84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a850:	89 10                	mov    DWORD PTR [eax],edx
c001a852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a856:	83 ec 0c             	sub    esp,0xc
c001a859:	50                   	push   eax
c001a85a:	e8 c7 1d ff ff       	call   c000c626 <Device::~Device()>
c001a85f:	83 c4 10             	add    esp,0x10
c001a862:	90                   	nop
c001a863:	83 c4 0c             	add    esp,0xc
c001a866:	c3                   	ret    
c001a867:	90                   	nop

c001a868 <SoundCard::~SoundCard()>:
c001a868:	83 ec 0c             	sub    esp,0xc
c001a86b:	83 ec 0c             	sub    esp,0xc
c001a86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a872:	e8 cd ff ff ff       	call   c001a844 <SoundCard::~SoundCard()>
c001a877:	83 c4 10             	add    esp,0x10
c001a87a:	83 ec 08             	sub    esp,0x8
c001a87d:	68 e8 01 00 00       	push   0x1e8
c001a882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a886:	e8 81 ff fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a88b:	83 c4 10             	add    esp,0x10
c001a88e:	83 c4 0c             	add    esp,0xc
c001a891:	c3                   	ret    

c001a892 <SoundCard::configureRates(int, int, int)>:
c001a892:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a896:	31 c0                	xor    eax,eax
c001a898:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a89f:	75 20                	jne    c001a8c1 <SoundCard::configureRates(int, int, int)+0x2f>
c001a8a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8a5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a8ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8af:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8b9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a8bf:	b0 01                	mov    al,0x1
c001a8c1:	c3                   	ret    

c001a8c2 <SoundCard::getSamples16(int, short*)>:
c001a8c2:	55                   	push   ebp
c001a8c3:	57                   	push   edi
c001a8c4:	31 ff                	xor    edi,edi
c001a8c6:	56                   	push   esi
c001a8c7:	53                   	push   ebx
c001a8c8:	31 db                	xor    ebx,ebx
c001a8ca:	83 ec 10             	sub    esp,0x10
c001a8cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a8d1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a8d5:	8d 04 36             	lea    eax,[esi+esi*1]
c001a8d8:	50                   	push   eax
c001a8d9:	6a 00                	push   0x0
c001a8db:	55                   	push   ebp
c001a8dc:	e8 0f 5c fe ff       	call   c00004f0 <memset>
c001a8e1:	83 c4 10             	add    esp,0x10
c001a8e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8e8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a8ef:	85 c0                	test   eax,eax
c001a8f1:	74 1a                	je     c001a90d <SoundCard::getSamples16(int, short*)+0x4b>
c001a8f3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a8f7:	75 14                	jne    c001a90d <SoundCard::getSamples16(int, short*)+0x4b>
c001a8f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a8fd:	55                   	push   ebp
c001a8fe:	56                   	push   esi
c001a8ff:	50                   	push   eax
c001a900:	e8 f3 02 00 00       	call   c001abf8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a905:	83 c4 10             	add    esp,0x10
c001a908:	39 c3                	cmp    ebx,eax
c001a90a:	0f 4c d8             	cmovl  ebx,eax
c001a90d:	47                   	inc    edi
c001a90e:	83 ff 20             	cmp    edi,0x20
c001a911:	75 d1                	jne    c001a8e4 <SoundCard::getSamples16(int, short*)+0x22>
c001a913:	83 c4 0c             	add    esp,0xc
c001a916:	89 d8                	mov    eax,ebx
c001a918:	5b                   	pop    ebx
c001a919:	5e                   	pop    esi
c001a91a:	5f                   	pop    edi
c001a91b:	5d                   	pop    ebp
c001a91c:	c3                   	ret    
c001a91d:	90                   	nop

c001a91e <SoundCard::getSamples32(int, int*)>:
c001a91e:	55                   	push   ebp
c001a91f:	57                   	push   edi
c001a920:	31 ff                	xor    edi,edi
c001a922:	56                   	push   esi
c001a923:	31 f6                	xor    esi,esi
c001a925:	53                   	push   ebx
c001a926:	83 ec 10             	sub    esp,0x10
c001a929:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a92d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a931:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a935:	c1 e0 02             	shl    eax,0x2
c001a938:	50                   	push   eax
c001a939:	6a 00                	push   0x0
c001a93b:	55                   	push   ebp
c001a93c:	e8 af 5b fe ff       	call   c00004f0 <memset>
c001a941:	83 c4 10             	add    esp,0x10
c001a944:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a94b:	85 c0                	test   eax,eax
c001a94d:	74 1a                	je     c001a969 <SoundCard::getSamples32(int, int*)+0x4b>
c001a94f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a953:	75 14                	jne    c001a969 <SoundCard::getSamples32(int, int*)+0x4b>
c001a955:	53                   	push   ebx
c001a956:	55                   	push   ebp
c001a957:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a95b:	50                   	push   eax
c001a95c:	e8 67 03 00 00       	call   c001acc8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a961:	83 c4 10             	add    esp,0x10
c001a964:	39 c6                	cmp    esi,eax
c001a966:	0f 4c f0             	cmovl  esi,eax
c001a969:	47                   	inc    edi
c001a96a:	83 ff 20             	cmp    edi,0x20
c001a96d:	75 d5                	jne    c001a944 <SoundCard::getSamples32(int, int*)+0x26>
c001a96f:	85 f6                	test   esi,esi
c001a971:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a978:	75 0f                	jne    c001a989 <SoundCard::getSamples32(int, int*)+0x6b>
c001a97a:	85 c0                	test   eax,eax
c001a97c:	74 1b                	je     c001a999 <SoundCard::getSamples32(int, int*)+0x7b>
c001a97e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a980:	83 ec 0c             	sub    esp,0xc
c001a983:	53                   	push   ebx
c001a984:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a987:	eb 0d                	jmp    c001a996 <SoundCard::getSamples32(int, int*)+0x78>
c001a989:	85 c0                	test   eax,eax
c001a98b:	75 0c                	jne    c001a999 <SoundCard::getSamples32(int, int*)+0x7b>
c001a98d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a98f:	83 ec 0c             	sub    esp,0xc
c001a992:	53                   	push   ebx
c001a993:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a996:	83 c4 10             	add    esp,0x10
c001a999:	83 c4 0c             	add    esp,0xc
c001a99c:	89 f0                	mov    eax,esi
c001a99e:	5b                   	pop    ebx
c001a99f:	5e                   	pop    esi
c001a9a0:	5f                   	pop    edi
c001a9a1:	5d                   	pop    ebp
c001a9a2:	c3                   	ret    
c001a9a3:	90                   	nop

c001a9a4 <SoundCard::addChannel(SoundPort*)>:
c001a9a4:	83 ec 0c             	sub    esp,0xc
c001a9a7:	31 c0                	xor    eax,eax
c001a9a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9ad:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a9b5:	74 1b                	je     c001a9d2 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a9b7:	40                   	inc    eax
c001a9b8:	83 f8 20             	cmp    eax,0x20
c001a9bb:	75 f0                	jne    c001a9ad <SoundCard::addChannel(SoundPort*)+0x9>
c001a9bd:	83 ec 0c             	sub    esp,0xc
c001a9c0:	68 f9 2b 02 c0       	push   0xc0022bf9
c001a9c5:	e8 f7 68 ff ff       	call   c00112c1 <KePanic(char const*)>
c001a9ca:	83 c4 10             	add    esp,0x10
c001a9cd:	83 c8 ff             	or     eax,0xffffffff
c001a9d0:	eb 0b                	jmp    c001a9dd <SoundCard::addChannel(SoundPort*)+0x39>
c001a9d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a9d6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a9dd:	83 c4 0c             	add    esp,0xc
c001a9e0:	c3                   	ret    
c001a9e1:	90                   	nop

c001a9e2 <SoundCard::removeChannel(int)>:
c001a9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9ea:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a9f5:	c3                   	ret    
c001a9f6:	66 90                	xchg   ax,ax

c001a9f8 <SoundPort::SoundPort(int, int, int, int)>:
c001a9f8:	83 ec 0c             	sub    esp,0xc
c001a9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ff:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa0a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aa0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa16:	89 10                	mov    DWORD PTR [eax],edx
c001aa18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aa23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa27:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa2b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aa2e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aa33:	75 13                	jne    c001aa48 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aa35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa39:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa3b:	05 a0 0f 00 00       	add    eax,0xfa0
c001aa40:	d1 e0                	shl    eax,1
c001aa42:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa46:	66 90                	xchg   ax,ax
c001aa48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aa50:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aa53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa57:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aa5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa62:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa65:	c1 e0 02             	shl    eax,0x2
c001aa68:	83 ec 0c             	sub    esp,0xc
c001aa6b:	50                   	push   eax
c001aa6c:	e8 62 d0 fe ff       	call   c0007ad3 <malloc>
c001aa71:	83 c4 10             	add    esp,0x10
c001aa74:	89 c2                	mov    edx,eax
c001aa76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa7a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aa7d:	90                   	nop
c001aa7e:	83 c4 0c             	add    esp,0xc
c001aa81:	c3                   	ret    
c001aa82:	66 90                	xchg   ax,ax

c001aa84 <SoundPort::~SoundPort()>:
c001aa84:	83 ec 0c             	sub    esp,0xc
c001aa87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa8e:	85 c0                	test   eax,eax
c001aa90:	74 1e                	je     c001aab0 <SoundPort::~SoundPort()+0x2c>
c001aa92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa99:	83 ec 0c             	sub    esp,0xc
c001aa9c:	50                   	push   eax
c001aa9d:	e8 41 d0 fe ff       	call   c0007ae3 <free>
c001aaa2:	83 c4 10             	add    esp,0x10
c001aaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaa9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aab0:	90                   	nop
c001aab1:	83 c4 0c             	add    esp,0xc
c001aab4:	c3                   	ret    
c001aab5:	90                   	nop
c001aab6:	66 90                	xchg   ax,ax

c001aab8 <SoundPort::unpause()>:
c001aab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aabc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aac0:	c3                   	ret    
c001aac1:	90                   	nop
c001aac2:	66 90                	xchg   ax,ax

c001aac4 <SoundPort::pause()>:
c001aac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aacc:	c3                   	ret    
c001aacd:	90                   	nop
c001aace:	66 90                	xchg   ax,ax

c001aad0 <SoundPort::getBufferUsed()>:
c001aad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aad4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aad7:	c3                   	ret    

c001aad8 <SoundPort::getBufferSize()>:
c001aad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aadc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aadf:	c3                   	ret    

c001aae0 <SoundPort::buffer16(short*, int)>:
c001aae0:	55                   	push   ebp
c001aae1:	57                   	push   edi
c001aae2:	56                   	push   esi
c001aae3:	53                   	push   ebx
c001aae4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aae8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aaec:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aaef:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aaf2:	74 68                	je     c001ab5c <SoundPort::buffer16(short*, int)+0x7c>
c001aaf4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aaf8:	85 c9                	test   ecx,ecx
c001aafa:	7e 60                	jle    c001ab5c <SoundPort::buffer16(short*, int)+0x7c>
c001aafc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ab00:	8d 70 01             	lea    esi,[eax+0x1]
c001ab03:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ab06:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ab09:	c1 e1 0f             	shl    ecx,0xf
c001ab0c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ab0f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab12:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab15:	74 4d                	je     c001ab64 <SoundPort::buffer16(short*, int)+0x84>
c001ab17:	31 f6                	xor    esi,esi
c001ab19:	eb 21                	jmp    c001ab3c <SoundPort::buffer16(short*, int)+0x5c>
c001ab1b:	90                   	nop
c001ab1c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ab21:	8d 79 01             	lea    edi,[ecx+0x1]
c001ab24:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ab27:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ab2a:	c1 e3 0f             	shl    ebx,0xf
c001ab2d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ab30:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab33:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab36:	74 1c                	je     c001ab54 <SoundPort::buffer16(short*, int)+0x74>
c001ab38:	89 c6                	mov    esi,eax
c001ab3a:	66 90                	xchg   ax,ax
c001ab3c:	8d 46 01             	lea    eax,[esi+0x1]
c001ab3f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ab43:	75 d7                	jne    c001ab1c <SoundPort::buffer16(short*, int)+0x3c>
c001ab45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab49:	8d 76 00             	lea    esi,[esi+0x0]
c001ab4c:	5b                   	pop    ebx
c001ab4d:	5e                   	pop    esi
c001ab4e:	5f                   	pop    edi
c001ab4f:	5d                   	pop    ebp
c001ab50:	c3                   	ret    
c001ab51:	8d 76 00             	lea    esi,[esi+0x0]
c001ab54:	5b                   	pop    ebx
c001ab55:	8d 46 02             	lea    eax,[esi+0x2]
c001ab58:	5e                   	pop    esi
c001ab59:	5f                   	pop    edi
c001ab5a:	5d                   	pop    ebp
c001ab5b:	c3                   	ret    
c001ab5c:	5b                   	pop    ebx
c001ab5d:	31 c0                	xor    eax,eax
c001ab5f:	5e                   	pop    esi
c001ab60:	5f                   	pop    edi
c001ab61:	5d                   	pop    ebp
c001ab62:	c3                   	ret    
c001ab63:	90                   	nop
c001ab64:	b8 01 00 00 00       	mov    eax,0x1
c001ab69:	eb e1                	jmp    c001ab4c <SoundPort::buffer16(short*, int)+0x6c>
c001ab6b:	90                   	nop

c001ab6c <SoundPort::buffer32(int*, int)>:
c001ab6c:	55                   	push   ebp
c001ab6d:	57                   	push   edi
c001ab6e:	56                   	push   esi
c001ab6f:	53                   	push   ebx
c001ab70:	83 ec 04             	sub    esp,0x4
c001ab73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab7b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab7f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab82:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab85:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab88:	74 5a                	je     c001abe4 <SoundPort::buffer32(int*, int)+0x78>
c001ab8a:	85 c0                	test   eax,eax
c001ab8c:	7e 56                	jle    c001abe4 <SoundPort::buffer32(int*, int)+0x78>
c001ab8e:	8d 71 01             	lea    esi,[ecx+0x1]
c001ab91:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ab94:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ab97:	8b 37                	mov    esi,DWORD PTR [edi]
c001ab99:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ab9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aba2:	74 4c                	je     c001abf0 <SoundPort::buffer32(int*, int)+0x84>
c001aba4:	31 f6                	xor    esi,esi
c001aba6:	eb 1c                	jmp    c001abc4 <SoundPort::buffer32(int*, int)+0x58>
c001aba8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001abab:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001abae:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001abb1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001abb4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001abb8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001abbb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001abbe:	74 18                	je     c001abd8 <SoundPort::buffer32(int*, int)+0x6c>
c001abc0:	89 de                	mov    esi,ebx
c001abc2:	66 90                	xchg   ax,ax
c001abc4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001abc7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001abca:	75 dc                	jne    c001aba8 <SoundPort::buffer32(int*, int)+0x3c>
c001abcc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001abcf:	90                   	nop
c001abd0:	83 c4 04             	add    esp,0x4
c001abd3:	5b                   	pop    ebx
c001abd4:	5e                   	pop    esi
c001abd5:	5f                   	pop    edi
c001abd6:	5d                   	pop    ebp
c001abd7:	c3                   	ret    
c001abd8:	8d 46 02             	lea    eax,[esi+0x2]
c001abdb:	83 c4 04             	add    esp,0x4
c001abde:	5b                   	pop    ebx
c001abdf:	5e                   	pop    esi
c001abe0:	5f                   	pop    edi
c001abe1:	5d                   	pop    ebp
c001abe2:	c3                   	ret    
c001abe3:	90                   	nop
c001abe4:	83 c4 04             	add    esp,0x4
c001abe7:	31 c0                	xor    eax,eax
c001abe9:	5b                   	pop    ebx
c001abea:	5e                   	pop    esi
c001abeb:	5f                   	pop    edi
c001abec:	5d                   	pop    ebp
c001abed:	c3                   	ret    
c001abee:	66 90                	xchg   ax,ax
c001abf0:	b8 01 00 00 00       	mov    eax,0x1
c001abf5:	eb d9                	jmp    c001abd0 <SoundPort::buffer32(int*, int)+0x64>
c001abf7:	90                   	nop

c001abf8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001abf8:	55                   	push   ebp
c001abf9:	57                   	push   edi
c001abfa:	56                   	push   esi
c001abfb:	53                   	push   ebx
c001abfc:	83 ec 0c             	sub    esp,0xc
c001abff:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ac0b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ac0f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ac15:	39 03                	cmp    DWORD PTR [ebx],eax
c001ac17:	74 13                	je     c001ac2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001ac19:	83 ec 0c             	sub    esp,0xc
c001ac1c:	68 4c 2c 02 c0       	push   0xc0022c4c
c001ac21:	e8 9b 66 ff ff       	call   c00112c1 <KePanic(char const*)>
c001ac26:	83 c4 10             	add    esp,0x10
c001ac29:	8d 76 00             	lea    esi,[esi+0x0]
c001ac2c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ac32:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ac35:	74 11                	je     c001ac48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001ac37:	83 ec 0c             	sub    esp,0xc
c001ac3a:	68 8b 2c 02 c0       	push   0xc0022c8b
c001ac3f:	e8 7d 66 ff ff       	call   c00112c1 <KePanic(char const*)>
c001ac44:	83 c4 10             	add    esp,0x10
c001ac47:	90                   	nop
c001ac48:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ac4e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ac51:	74 11                	je     c001ac64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001ac53:	83 ec 0c             	sub    esp,0xc
c001ac56:	68 8b 2c 02 c0       	push   0xc0022c8b
c001ac5b:	e8 61 66 ff ff       	call   c00112c1 <KePanic(char const*)>
c001ac60:	83 c4 10             	add    esp,0x10
c001ac63:	90                   	nop
c001ac64:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001ac67:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001ac6b:	85 f6                	test   esi,esi
c001ac6d:	7e 2d                	jle    c001ac9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ac6f:	31 c0                	xor    eax,eax
c001ac71:	8d 76 00             	lea    esi,[esi+0x0]
c001ac74:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac77:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001ac7a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001ac80:	85 c9                	test   ecx,ecx
c001ac82:	0f 49 d1             	cmovns edx,ecx
c001ac85:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001ac89:	c1 fa 0f             	sar    edx,0xf
c001ac8c:	01 d1                	add    ecx,edx
c001ac8e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001ac92:	83 c0 01             	add    eax,0x1
c001ac95:	39 f0                	cmp    eax,esi
c001ac97:	75 db                	jne    c001ac74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001ac99:	8d 76 00             	lea    esi,[esi+0x0]
c001ac9c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac9f:	83 ec 04             	sub    esp,0x4
c001aca2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aca5:	29 f0                	sub    eax,esi
c001aca7:	c1 e0 02             	shl    eax,0x2
c001acaa:	50                   	push   eax
c001acab:	8d 04 b2             	lea    eax,[edx+esi*4]
c001acae:	50                   	push   eax
c001acaf:	52                   	push   edx
c001acb0:	e8 1b 57 fe ff       	call   c00003d0 <memmove>
c001acb5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001acb8:	29 f0                	sub    eax,esi
c001acba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001acbd:	83 c4 1c             	add    esp,0x1c
c001acc0:	89 f0                	mov    eax,esi
c001acc2:	5b                   	pop    ebx
c001acc3:	5e                   	pop    esi
c001acc4:	5f                   	pop    edi
c001acc5:	5d                   	pop    ebp
c001acc6:	c3                   	ret    
c001acc7:	90                   	nop

c001acc8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001acc8:	55                   	push   ebp
c001acc9:	57                   	push   edi
c001acca:	56                   	push   esi
c001accb:	53                   	push   ebx
c001accc:	83 ec 0c             	sub    esp,0xc
c001accf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acd3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acd7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001acdb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001acdf:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ace5:	39 03                	cmp    DWORD PTR [ebx],eax
c001ace7:	74 13                	je     c001acfc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001ace9:	83 ec 0c             	sub    esp,0xc
c001acec:	68 6c 2c 02 c0       	push   0xc0022c6c
c001acf1:	e8 cb 65 ff ff       	call   c00112c1 <KePanic(char const*)>
c001acf6:	83 c4 10             	add    esp,0x10
c001acf9:	8d 76 00             	lea    esi,[esi+0x0]
c001acfc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ad02:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ad05:	74 11                	je     c001ad18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001ad07:	83 ec 0c             	sub    esp,0xc
c001ad0a:	68 a7 2c 02 c0       	push   0xc0022ca7
c001ad0f:	e8 ad 65 ff ff       	call   c00112c1 <KePanic(char const*)>
c001ad14:	83 c4 10             	add    esp,0x10
c001ad17:	90                   	nop
c001ad18:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ad1e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ad21:	74 11                	je     c001ad34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001ad23:	83 ec 0c             	sub    esp,0xc
c001ad26:	68 a7 2c 02 c0       	push   0xc0022ca7
c001ad2b:	e8 91 65 ff ff       	call   c00112c1 <KePanic(char const*)>
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	90                   	nop
c001ad34:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ad37:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ad3b:	85 ff                	test   edi,edi
c001ad3d:	7e 21                	jle    c001ad60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ad3f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ad46:	31 c0                	xor    eax,eax
c001ad48:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ad4b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ad4e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ad51:	01 d5                	add    ebp,edx
c001ad53:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ad56:	83 c0 04             	add    eax,0x4
c001ad59:	39 c1                	cmp    ecx,eax
c001ad5b:	75 eb                	jne    c001ad48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ad5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad60:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ad63:	83 ec 04             	sub    esp,0x4
c001ad66:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ad69:	29 f8                	sub    eax,edi
c001ad6b:	c1 e0 02             	shl    eax,0x2
c001ad6e:	50                   	push   eax
c001ad6f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ad72:	50                   	push   eax
c001ad73:	52                   	push   edx
c001ad74:	e8 57 56 fe ff       	call   c00003d0 <memmove>
c001ad79:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad7c:	29 f8                	sub    eax,edi
c001ad7e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ad81:	83 c4 1c             	add    esp,0x1c
c001ad84:	89 f8                	mov    eax,edi
c001ad86:	5b                   	pop    ebx
c001ad87:	5e                   	pop    esi
c001ad88:	5f                   	pop    edi
c001ad89:	5d                   	pop    ebp
c001ad8a:	c3                   	ret    
c001ad8b:	90                   	nop

c001ad8c <PCI::open(int, int, void*)>:
c001ad8c:	83 ec 18             	sub    esp,0x18
c001ad8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad97:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ad9d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad9f:	50                   	push   eax
c001ada0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ada3:	31 c0                	xor    eax,eax
c001ada5:	83 c4 1c             	add    esp,0x1c
c001ada8:	c3                   	ret    
c001ada9:	90                   	nop

c001adaa <PCI::close(int, int, void*)>:
c001adaa:	31 c0                	xor    eax,eax
c001adac:	c3                   	ret    
c001adad:	90                   	nop

c001adae <PCI::PCI()>:
c001adae:	83 ec 0c             	sub    esp,0xc
c001adb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb5:	83 ec 08             	sub    esp,0x8
c001adb8:	68 c3 2c 02 c0       	push   0xc0022cc3
c001adbd:	50                   	push   eax
c001adbe:	e8 bd 12 ff ff       	call   c000c080 <Bus::Bus(char const*)>
c001adc3:	83 c4 10             	add    esp,0x10
c001adc6:	ba 6c 2d 02 c0       	mov    edx,0xc0022d6c
c001adcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adcf:	89 10                	mov    DWORD PTR [eax],edx
c001add1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001addf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade3:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ade8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001adf2:	0f b6 d0             	movzx  edx,al
c001adf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ae00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae04:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae0a:	0f b6 d0             	movzx  edx,al
c001ae0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae11:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ae16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae20:	8d 50 01             	lea    edx,[eax+0x1]
c001ae23:	88 d1                	mov    cl,dl
c001ae25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae29:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ae2f:	0f b6 d0             	movzx  edx,al
c001ae32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae36:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ae3a:	83 c9 c0             	or     ecx,0xffffffc0
c001ae3d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ae41:	90                   	nop
c001ae42:	83 c4 0c             	add    esp,0xc
c001ae45:	c3                   	ret    

c001ae46 <PCI::readBAR8(unsigned int, int)>:
c001ae46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae4e:	f6 c2 01             	test   dl,0x1
c001ae51:	74 07                	je     c001ae5a <PCI::readBAR8(unsigned int, int)+0x14>
c001ae53:	83 e2 fc             	and    edx,0xfffffffc
c001ae56:	01 c2                	add    edx,eax
c001ae58:	ec                   	in     al,dx
c001ae59:	c3                   	ret    
c001ae5a:	83 e2 f0             	and    edx,0xfffffff0
c001ae5d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ae60:	c3                   	ret    
c001ae61:	90                   	nop

c001ae62 <PCI::readBAR16(unsigned int, int)>:
c001ae62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae6a:	f6 c2 01             	test   dl,0x1
c001ae6d:	74 08                	je     c001ae77 <PCI::readBAR16(unsigned int, int)+0x15>
c001ae6f:	83 e2 fc             	and    edx,0xfffffffc
c001ae72:	01 c2                	add    edx,eax
c001ae74:	66 ed                	in     ax,dx
c001ae76:	c3                   	ret    
c001ae77:	83 e2 f0             	and    edx,0xfffffff0
c001ae7a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ae7e:	c3                   	ret    
c001ae7f:	90                   	nop

c001ae80 <PCI::readBAR32(unsigned int, int)>:
c001ae80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae88:	f6 c2 01             	test   dl,0x1
c001ae8b:	74 07                	je     c001ae94 <PCI::readBAR32(unsigned int, int)+0x14>
c001ae8d:	83 e2 fc             	and    edx,0xfffffffc
c001ae90:	01 c2                	add    edx,eax
c001ae92:	ed                   	in     eax,dx
c001ae93:	c3                   	ret    
c001ae94:	83 e2 f0             	and    edx,0xfffffff0
c001ae97:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ae9a:	c3                   	ret    
c001ae9b:	90                   	nop

c001ae9c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ae9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aea4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aea8:	f6 c2 01             	test   dl,0x1
c001aeab:	74 07                	je     c001aeb4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001aead:	83 e2 fc             	and    edx,0xfffffffc
c001aeb0:	01 ca                	add    edx,ecx
c001aeb2:	ee                   	out    dx,al
c001aeb3:	c3                   	ret    
c001aeb4:	83 e2 f0             	and    edx,0xfffffff0
c001aeb7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001aeba:	c3                   	ret    
c001aebb:	90                   	nop

c001aebc <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001aebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aec0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aec4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aec8:	f6 c2 01             	test   dl,0x1
c001aecb:	74 08                	je     c001aed5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001aecd:	83 e2 fc             	and    edx,0xfffffffc
c001aed0:	01 ca                	add    edx,ecx
c001aed2:	66 ef                	out    dx,ax
c001aed4:	c3                   	ret    
c001aed5:	83 e2 f0             	and    edx,0xfffffff0
c001aed8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001aedc:	c3                   	ret    
c001aedd:	90                   	nop

c001aede <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001aede:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aee2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aee6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aeea:	f6 c2 01             	test   dl,0x1
c001aeed:	74 07                	je     c001aef6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001aeef:	83 e2 fc             	and    edx,0xfffffffc
c001aef2:	01 ca                	add    edx,ecx
c001aef4:	ef                   	out    dx,eax
c001aef5:	c3                   	ret    
c001aef6:	83 e2 f0             	and    edx,0xfffffff0
c001aef9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001aefc:	c3                   	ret    
c001aefd:	90                   	nop

c001aefe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aefe:	55                   	push   ebp
c001aeff:	57                   	push   edi
c001af00:	56                   	push   esi
c001af01:	53                   	push   ebx
c001af02:	83 ec 0c             	sub    esp,0xc
c001af05:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001af0a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001af0e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001af12:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001af16:	83 fe 07             	cmp    esi,0x7
c001af19:	76 10                	jbe    c001af2b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001af1b:	83 ec 0c             	sub    esp,0xc
c001af1e:	68 cb 2c 02 c0       	push   0xc0022ccb
c001af23:	e8 99 63 ff ff       	call   c00112c1 <KePanic(char const*)>
c001af28:	83 c4 10             	add    esp,0x10
c001af2b:	0f b6 db             	movzx  ebx,bl
c001af2e:	83 fb 0f             	cmp    ebx,0xf
c001af31:	76 10                	jbe    c001af43 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001af33:	83 ec 0c             	sub    esp,0xc
c001af36:	68 fb 2c 02 c0       	push   0xc0022cfb
c001af3b:	e8 81 63 ff ff       	call   c00112c1 <KePanic(char const*)>
c001af40:	83 c4 10             	add    esp,0x10
c001af43:	8d 04 36             	lea    eax,[esi+esi*1]
c001af46:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af4b:	83 c8 f0             	or     eax,0xfffffff0
c001af4e:	ee                   	out    dx,al
c001af4f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001af54:	89 e8                	mov    eax,ebp
c001af56:	ee                   	out    dx,al
c001af57:	89 f9                	mov    ecx,edi
c001af59:	89 d8                	mov    eax,ebx
c001af5b:	0f b6 d9             	movzx  ebx,cl
c001af5e:	83 c4 0c             	add    esp,0xc
c001af61:	c1 e0 08             	shl    eax,0x8
c001af64:	83 e3 fc             	and    ebx,0xfffffffc
c001af67:	09 d8                	or     eax,ebx
c001af69:	5b                   	pop    ebx
c001af6a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001af6f:	5e                   	pop    esi
c001af70:	5f                   	pop    edi
c001af71:	5d                   	pop    ebp
c001af72:	c3                   	ret    
c001af73:	90                   	nop

c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af74:	57                   	push   edi
c001af75:	56                   	push   esi
c001af76:	53                   	push   ebx
c001af77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af87:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001af8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af91:	83 ff 01             	cmp    edi,0x1
c001af94:	75 3f                	jne    c001afd5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001af96:	89 de                	mov    esi,ebx
c001af98:	0f b6 c0             	movzx  eax,al
c001af9b:	c1 e0 10             	shl    eax,0x10
c001af9e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001afa4:	0f b6 c9             	movzx  ecx,cl
c001afa7:	09 f0                	or     eax,esi
c001afa9:	c1 e1 08             	shl    ecx,0x8
c001afac:	0f b6 d2             	movzx  edx,dl
c001afaf:	c1 e2 0b             	shl    edx,0xb
c001afb2:	09 c8                	or     eax,ecx
c001afb4:	09 d0                	or     eax,edx
c001afb6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afbb:	0d 00 00 00 80       	or     eax,0x80000000
c001afc0:	ef                   	out    dx,eax
c001afc1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afc6:	ed                   	in     eax,dx
c001afc7:	83 e3 02             	and    ebx,0x2
c001afca:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001afd1:	d3 e8                	shr    eax,cl
c001afd3:	eb 44                	jmp    c001b019 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001afd5:	83 ff 02             	cmp    edi,0x2
c001afd8:	75 2d                	jne    c001b007 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	0f b6 fb             	movzx  edi,bl
c001afe0:	57                   	push   edi
c001afe1:	0f b6 c9             	movzx  ecx,cl
c001afe4:	51                   	push   ecx
c001afe5:	0f b6 d2             	movzx  edx,dl
c001afe8:	52                   	push   edx
c001afe9:	0f b6 c0             	movzx  eax,al
c001afec:	50                   	push   eax
c001afed:	56                   	push   esi
c001afee:	e8 0b ff ff ff       	call   c001aefe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aff3:	89 c2                	mov    edx,eax
c001aff5:	ed                   	in     eax,dx
c001aff6:	83 e3 02             	and    ebx,0x2
c001aff9:	83 c4 20             	add    esp,0x20
c001affc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b003:	d3 e8                	shr    eax,cl
c001b005:	eb 12                	jmp    c001b019 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b007:	83 ec 0c             	sub    esp,0xc
c001b00a:	68 2b 2d 02 c0       	push   0xc0022d2b
c001b00f:	e8 ad 62 ff ff       	call   c00112c1 <KePanic(char const*)>
c001b014:	83 c4 10             	add    esp,0x10
c001b017:	31 c0                	xor    eax,eax
c001b019:	5b                   	pop    ebx
c001b01a:	5e                   	pop    esi
c001b01b:	5f                   	pop    edi
c001b01c:	c3                   	ret    
c001b01d:	90                   	nop

c001b01e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b01e:	83 ec 18             	sub    esp,0x18
c001b021:	6a 00                	push   0x0
c001b023:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b028:	50                   	push   eax
c001b029:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b02e:	50                   	push   eax
c001b02f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b034:	50                   	push   eax
c001b035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b039:	e8 36 ff ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b03e:	83 c4 2c             	add    esp,0x2c
c001b041:	c3                   	ret    

c001b042 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b042:	83 ec 18             	sub    esp,0x18
c001b045:	6a 0e                	push   0xe
c001b047:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b04c:	50                   	push   eax
c001b04d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b052:	50                   	push   eax
c001b053:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b058:	50                   	push   eax
c001b059:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b05d:	e8 12 ff ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b062:	83 c4 2c             	add    esp,0x2c
c001b065:	0f b6 c0             	movzx  eax,al
c001b068:	c3                   	ret    
c001b069:	90                   	nop

c001b06a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b06a:	55                   	push   ebp
c001b06b:	57                   	push   edi
c001b06c:	56                   	push   esi
c001b06d:	53                   	push   ebx
c001b06e:	83 ec 18             	sub    esp,0x18
c001b071:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b076:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b07b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b080:	6a 0a                	push   0xa
c001b082:	56                   	push   esi
c001b083:	55                   	push   ebp
c001b084:	57                   	push   edi
c001b085:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b089:	e8 e6 fe ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b08e:	83 c4 14             	add    esp,0x14
c001b091:	6a 0a                	push   0xa
c001b093:	56                   	push   esi
c001b094:	55                   	push   ebp
c001b095:	57                   	push   edi
c001b096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b09a:	89 c3                	mov    ebx,eax
c001b09c:	0f b6 db             	movzx  ebx,bl
c001b09f:	e8 d0 fe ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0a4:	83 c4 2c             	add    esp,0x2c
c001b0a7:	25 00 ff 00 00       	and    eax,0xff00
c001b0ac:	09 d8                	or     eax,ebx
c001b0ae:	5b                   	pop    ebx
c001b0af:	5e                   	pop    esi
c001b0b0:	5f                   	pop    edi
c001b0b1:	5d                   	pop    ebp
c001b0b2:	c3                   	ret    
c001b0b3:	90                   	nop

c001b0b4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b0b4:	83 ec 18             	sub    esp,0x18
c001b0b7:	6a 08                	push   0x8
c001b0b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0be:	50                   	push   eax
c001b0bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0c4:	50                   	push   eax
c001b0c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0ca:	50                   	push   eax
c001b0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0cf:	e8 a0 fe ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0d4:	83 c4 2c             	add    esp,0x2c
c001b0d7:	0f b6 c4             	movzx  eax,ah
c001b0da:	c3                   	ret    
c001b0db:	90                   	nop

c001b0dc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b0dc:	83 ec 18             	sub    esp,0x18
c001b0df:	6a 08                	push   0x8
c001b0e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0e6:	50                   	push   eax
c001b0e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0ec:	50                   	push   eax
c001b0ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0f2:	50                   	push   eax
c001b0f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0f7:	e8 78 fe ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0fc:	83 c4 2c             	add    esp,0x2c
c001b0ff:	c3                   	ret    

c001b100 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b100:	83 ec 18             	sub    esp,0x18
c001b103:	6a 3c                	push   0x3c
c001b105:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b10a:	50                   	push   eax
c001b10b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b110:	50                   	push   eax
c001b111:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b116:	50                   	push   eax
c001b117:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b11b:	e8 54 fe ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b120:	83 c4 2c             	add    esp,0x2c
c001b123:	c3                   	ret    

c001b124 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b124:	83 ec 18             	sub    esp,0x18
c001b127:	6a 18                	push   0x18
c001b129:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b12e:	50                   	push   eax
c001b12f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b134:	50                   	push   eax
c001b135:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b13a:	50                   	push   eax
c001b13b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b13f:	e8 30 fe ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b144:	83 c4 2c             	add    esp,0x2c
c001b147:	0f b6 c4             	movzx  eax,ah
c001b14a:	c3                   	ret    
c001b14b:	90                   	nop

c001b14c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b14c:	55                   	push   ebp
c001b14d:	57                   	push   edi
c001b14e:	56                   	push   esi
c001b14f:	53                   	push   ebx
c001b150:	83 ec 28             	sub    esp,0x28
c001b153:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b157:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b15c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b161:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b166:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b16d:	8d 43 12             	lea    eax,[ebx+0x12]
c001b170:	83 c3 10             	add    ebx,0x10
c001b173:	0f b6 c0             	movzx  eax,al
c001b176:	0f b6 db             	movzx  ebx,bl
c001b179:	50                   	push   eax
c001b17a:	51                   	push   ecx
c001b17b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b17f:	57                   	push   edi
c001b180:	55                   	push   ebp
c001b181:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b185:	e8 ea fd ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b18a:	83 c4 14             	add    esp,0x14
c001b18d:	53                   	push   ebx
c001b18e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b192:	51                   	push   ecx
c001b193:	89 c6                	mov    esi,eax
c001b195:	57                   	push   edi
c001b196:	55                   	push   ebp
c001b197:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b19b:	c1 e6 10             	shl    esi,0x10
c001b19e:	e8 d1 fd ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1a3:	83 c4 3c             	add    esp,0x3c
c001b1a6:	5b                   	pop    ebx
c001b1a7:	0f b7 c0             	movzx  eax,ax
c001b1aa:	09 f0                	or     eax,esi
c001b1ac:	5e                   	pop    esi
c001b1ad:	5f                   	pop    edi
c001b1ae:	5d                   	pop    ebp
c001b1af:	c3                   	ret    

c001b1b0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b1b0:	55                   	push   ebp
c001b1b1:	57                   	push   edi
c001b1b2:	56                   	push   esi
c001b1b3:	53                   	push   ebx
c001b1b4:	83 ec 0c             	sub    esp,0xc
c001b1b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b1bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b1c3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b1c7:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b1cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b1d5:	83 f9 01             	cmp    ecx,0x1
c001b1d8:	75 5d                	jne    c001b237 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b1da:	0f b6 c8             	movzx  ecx,al
c001b1dd:	89 f0                	mov    eax,esi
c001b1df:	25 fc 00 00 00       	and    eax,0xfc
c001b1e4:	0f b6 d2             	movzx  edx,dl
c001b1e7:	c1 e1 10             	shl    ecx,0x10
c001b1ea:	c1 e2 0b             	shl    edx,0xb
c001b1ed:	09 c1                	or     ecx,eax
c001b1ef:	89 f8                	mov    eax,edi
c001b1f1:	0f b6 f8             	movzx  edi,al
c001b1f4:	c1 e7 08             	shl    edi,0x8
c001b1f7:	09 f9                	or     ecx,edi
c001b1f9:	09 d1                	or     ecx,edx
c001b1fb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b200:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b206:	89 c8                	mov    eax,ecx
c001b208:	ef                   	out    dx,eax
c001b209:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b20e:	ed                   	in     eax,dx
c001b20f:	83 e6 02             	and    esi,0x2
c001b212:	0f b7 db             	movzx  ebx,bx
c001b215:	74 0a                	je     c001b221 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b217:	c1 e3 10             	shl    ebx,0x10
c001b21a:	0f b7 d0             	movzx  edx,ax
c001b21d:	09 d3                	or     ebx,edx
c001b21f:	eb 05                	jmp    c001b226 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b221:	66 31 c0             	xor    ax,ax
c001b224:	09 c3                	or     ebx,eax
c001b226:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b22b:	89 c8                	mov    eax,ecx
c001b22d:	ef                   	out    dx,eax
c001b22e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b233:	89 d8                	mov    eax,ebx
c001b235:	eb 41                	jmp    c001b278 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b237:	83 f9 02             	cmp    ecx,0x2
c001b23a:	75 45                	jne    c001b281 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b23c:	89 f1                	mov    ecx,esi
c001b23e:	83 ec 0c             	sub    esp,0xc
c001b241:	0f b6 f1             	movzx  esi,cl
c001b244:	89 f9                	mov    ecx,edi
c001b246:	56                   	push   esi
c001b247:	0f b6 f9             	movzx  edi,cl
c001b24a:	57                   	push   edi
c001b24b:	0f b6 d2             	movzx  edx,dl
c001b24e:	52                   	push   edx
c001b24f:	0f b6 c0             	movzx  eax,al
c001b252:	50                   	push   eax
c001b253:	55                   	push   ebp
c001b254:	e8 a5 fc ff ff       	call   c001aefe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b259:	89 c2                	mov    edx,eax
c001b25b:	ed                   	in     eax,dx
c001b25c:	83 c4 20             	add    esp,0x20
c001b25f:	f6 c2 02             	test   dl,0x2
c001b262:	0f b7 db             	movzx  ebx,bx
c001b265:	74 0c                	je     c001b273 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b267:	0f b7 c8             	movzx  ecx,ax
c001b26a:	89 d8                	mov    eax,ebx
c001b26c:	c1 e0 10             	shl    eax,0x10
c001b26f:	09 c8                	or     eax,ecx
c001b271:	eb 05                	jmp    c001b278 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b273:	66 31 c0             	xor    ax,ax
c001b276:	09 d8                	or     eax,ebx
c001b278:	ef                   	out    dx,eax
c001b279:	83 c4 0c             	add    esp,0xc
c001b27c:	5b                   	pop    ebx
c001b27d:	5e                   	pop    esi
c001b27e:	5f                   	pop    edi
c001b27f:	5d                   	pop    ebp
c001b280:	c3                   	ret    
c001b281:	c7 44 24 20 2b 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022d2b
c001b289:	83 c4 0c             	add    esp,0xc
c001b28c:	5b                   	pop    ebx
c001b28d:	5e                   	pop    esi
c001b28e:	5f                   	pop    edi
c001b28f:	5d                   	pop    ebp
c001b290:	e9 2c 60 ff ff       	jmp    c00112c1 <KePanic(char const*)>
c001b295:	90                   	nop

c001b296 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b296:	55                   	push   ebp
c001b297:	57                   	push   edi
c001b298:	56                   	push   esi
c001b299:	53                   	push   ebx
c001b29a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b2a0:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b2a7:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b2ae:	0f 85 bd 00 00 00    	jne    c001b371 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b2b4:	83 ec 0c             	sub    esp,0xc
c001b2b7:	68 14 01 00 00       	push   0x114
c001b2bc:	e8 12 c8 fe ff       	call   c0007ad3 <malloc>
c001b2c1:	83 c4 0c             	add    esp,0xc
c001b2c4:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b2ca:	68 31 2d 02 c0       	push   0xc0022d31
c001b2cf:	50                   	push   eax
c001b2d0:	89 c3                	mov    ebx,eax
c001b2d2:	e8 cf 05 ff ff       	call   c000b8a6 <File::File(char const*, Process*)>
c001b2d7:	83 c4 10             	add    esp,0x10
c001b2da:	85 db                	test   ebx,ebx
c001b2dc:	0f 84 6b 02 00 00    	je     c001b54d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b2e2:	57                   	push   edi
c001b2e3:	57                   	push   edi
c001b2e4:	6a 01                	push   0x1
c001b2e6:	53                   	push   ebx
c001b2e7:	e8 d8 05 ff ff       	call   c000b8c4 <File::open(FileOpenMode)>
c001b2ec:	83 c4 10             	add    esp,0x10
c001b2ef:	85 c0                	test   eax,eax
c001b2f1:	0f 85 56 02 00 00    	jne    c001b54d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b2f7:	52                   	push   edx
c001b2f8:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b2fc:	50                   	push   eax
c001b2fd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b301:	50                   	push   eax
c001b302:	53                   	push   ebx
c001b303:	e8 be 08 ff ff       	call   c000bbc6 <File::stat(unsigned long long*, bool*)>
c001b308:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b30c:	40                   	inc    eax
c001b30d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b310:	e8 be c7 fe ff       	call   c0007ad3 <malloc>
c001b315:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b319:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b31d:	59                   	pop    ecx
c001b31e:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b323:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b325:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b329:	51                   	push   ecx
c001b32a:	50                   	push   eax
c001b32b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b32f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b333:	53                   	push   ebx
c001b334:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b337:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b33b:	83 c4 20             	add    esp,0x20
c001b33e:	89 c8                	mov    eax,ecx
c001b340:	99                   	cdq    
c001b341:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b345:	0f 85 02 02 00 00    	jne    c001b54d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b34b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b34f:	0f 85 f8 01 00 00    	jne    c001b54d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b355:	83 ec 0c             	sub    esp,0xc
c001b358:	53                   	push   ebx
c001b359:	e8 c4 05 ff ff       	call   c000b922 <File::close()>
c001b35e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b362:	83 c4 10             	add    esp,0x10
c001b365:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b36c:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b371:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b379:	31 c9                	xor    ecx,ecx
c001b37b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b382:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b388:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b38f:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b395:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b39a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b3a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b3a7:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b3af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b3b3:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b3bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b3bf:	39 cd                	cmp    ebp,ecx
c001b3c1:	0f 8e 86 01 00 00    	jle    c001b54d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b3c7:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b3ca:	d4 40                	aam    0x40
c001b3cc:	d5 39                	aad    0x39
c001b3ce:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b3d2:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b3d6:	d4 40                	aam    0x40
c001b3d8:	d5 39                	aad    0x39
c001b3da:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b3de:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b3e2:	d4 40                	aam    0x40
c001b3e4:	d5 39                	aad    0x39
c001b3e6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b3ea:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b3ee:	d4 40                	aam    0x40
c001b3f0:	d5 39                	aad    0x39
c001b3f2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b3f6:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b3fa:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b3fe:	3c 56                	cmp    al,0x56
c001b400:	74 47                	je     c001b449 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b402:	d4 40                	aam    0x40
c001b404:	d5 39                	aad    0x39
c001b406:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b409:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b40d:	0f b6 db             	movzx  ebx,bl
c001b410:	c1 e3 04             	shl    ebx,0x4
c001b413:	d4 40                	aam    0x40
c001b415:	d5 39                	aad    0x39
c001b417:	83 e8 30             	sub    eax,0x30
c001b41a:	0f b6 c0             	movzx  eax,al
c001b41d:	09 c3                	or     ebx,eax
c001b41f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b423:	c1 e3 04             	shl    ebx,0x4
c001b426:	d4 40                	aam    0x40
c001b428:	d5 39                	aad    0x39
c001b42a:	83 e8 30             	sub    eax,0x30
c001b42d:	0f b6 c0             	movzx  eax,al
c001b430:	09 c3                	or     ebx,eax
c001b432:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b436:	c1 e3 04             	shl    ebx,0x4
c001b439:	d4 40                	aam    0x40
c001b43b:	d5 39                	aad    0x39
c001b43d:	83 e8 30             	sub    eax,0x30
c001b440:	0f b6 c0             	movzx  eax,al
c001b443:	09 c3                	or     ebx,eax
c001b445:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b449:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b44d:	80 fb 58             	cmp    bl,0x58
c001b450:	74 49                	je     c001b49b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b452:	88 d8                	mov    al,bl
c001b454:	d4 40                	aam    0x40
c001b456:	d5 39                	aad    0x39
c001b458:	83 e8 30             	sub    eax,0x30
c001b45b:	0f b6 f8             	movzx  edi,al
c001b45e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b462:	c1 e7 04             	shl    edi,0x4
c001b465:	d4 40                	aam    0x40
c001b467:	d5 39                	aad    0x39
c001b469:	83 e8 30             	sub    eax,0x30
c001b46c:	0f b6 c0             	movzx  eax,al
c001b46f:	09 c7                	or     edi,eax
c001b471:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b475:	c1 e7 04             	shl    edi,0x4
c001b478:	d4 40                	aam    0x40
c001b47a:	d5 39                	aad    0x39
c001b47c:	83 e8 30             	sub    eax,0x30
c001b47f:	0f b6 c0             	movzx  eax,al
c001b482:	09 c7                	or     edi,eax
c001b484:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b488:	c1 e7 04             	shl    edi,0x4
c001b48b:	d4 40                	aam    0x40
c001b48d:	d5 39                	aad    0x39
c001b48f:	83 e8 30             	sub    eax,0x30
c001b492:	0f b6 c0             	movzx  eax,al
c001b495:	09 c7                	or     edi,eax
c001b497:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b49b:	8d 41 10             	lea    eax,[ecx+0x10]
c001b49e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b4a2:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b4a6:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b4aa:	83 f9 0a             	cmp    ecx,0xa
c001b4ad:	74 07                	je     c001b4b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b4af:	47                   	inc    edi
c001b4b0:	39 c5                	cmp    ebp,eax
c001b4b2:	75 16                	jne    c001b4ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b4b4:	89 e8                	mov    eax,ebp
c001b4b6:	83 f9 0a             	cmp    ecx,0xa
c001b4b9:	0f 94 c1             	sete   cl
c001b4bc:	0f b6 c9             	movzx  ecx,cl
c001b4bf:	01 c1                	add    ecx,eax
c001b4c1:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b4c6:	75 0f                	jne    c001b4d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b4c8:	eb 1c                	jmp    c001b4e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b4ca:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b4cd:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b4d1:	40                   	inc    eax
c001b4d2:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b4d5:	eb cb                	jmp    c001b4a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b4d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b4db:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b4e0:	0f 85 d9 fe ff ff    	jne    c001b3bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b4e6:	80 fb 58             	cmp    bl,0x58
c001b4e9:	74 10                	je     c001b4fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b4eb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b4f0:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b4f5:	0f 85 c4 fe ff ff    	jne    c001b3bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b4fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b503:	83 e8 30             	sub    eax,0x30
c001b506:	c1 e0 04             	shl    eax,0x4
c001b509:	83 eb 30             	sub    ebx,0x30
c001b50c:	09 d8                	or     eax,ebx
c001b50e:	0f b6 c0             	movzx  eax,al
c001b511:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b515:	0f 85 a4 fe ff ff    	jne    c001b3bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b51b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b51f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b523:	83 e8 30             	sub    eax,0x30
c001b526:	c1 e0 04             	shl    eax,0x4
c001b529:	83 eb 30             	sub    ebx,0x30
c001b52c:	09 d8                	or     eax,ebx
c001b52e:	0f b6 c0             	movzx  eax,al
c001b531:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b535:	0f 85 84 fe ff ff    	jne    c001b3bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b53b:	50                   	push   eax
c001b53c:	50                   	push   eax
c001b53d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b541:	50                   	push   eax
c001b542:	56                   	push   esi
c001b543:	e8 08 51 fe ff       	call   c0000650 <strcpy>
c001b548:	83 c4 10             	add    esp,0x10
c001b54b:	eb 05                	jmp    c001b552 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b54d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b550:	31 f6                	xor    esi,esi
c001b552:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b558:	89 f0                	mov    eax,esi
c001b55a:	5b                   	pop    ebx
c001b55b:	5e                   	pop    esi
c001b55c:	5f                   	pop    edi
c001b55d:	5d                   	pop    ebp
c001b55e:	c3                   	ret    
c001b55f:	90                   	nop

c001b560 <PCI::checkBus(unsigned char)>:
c001b560:	56                   	push   esi
c001b561:	53                   	push   ebx
c001b562:	31 db                	xor    ebx,ebx
c001b564:	51                   	push   ecx
c001b565:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b56a:	52                   	push   edx
c001b56b:	53                   	push   ebx
c001b56c:	43                   	inc    ebx
c001b56d:	56                   	push   esi
c001b56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b572:	e8 0f 03 00 00       	call   c001b886 <PCI::checkDevice(unsigned char, unsigned char)>
c001b577:	83 c4 10             	add    esp,0x10
c001b57a:	83 fb 20             	cmp    ebx,0x20
c001b57d:	75 eb                	jne    c001b56a <PCI::checkBus(unsigned char)+0xa>
c001b57f:	58                   	pop    eax
c001b580:	5b                   	pop    ebx
c001b581:	5e                   	pop    esi
c001b582:	c3                   	ret    
c001b583:	90                   	nop

c001b584 <PCI::foundDevice(PCIDeviceInfo)>:
c001b584:	55                   	push   ebp
c001b585:	57                   	push   edi
c001b586:	56                   	push   esi
c001b587:	53                   	push   ebx
c001b588:	83 ec 1c             	sub    esp,0x1c
c001b58b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b590:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b594:	3d ff ff 00 00       	cmp    eax,0xffff
c001b599:	0f 84 63 01 00 00    	je     c001b702 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b59f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b5a4:	66 3d 06 04          	cmp    ax,0x406
c001b5a8:	75 2c                	jne    c001b5d6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b5aa:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b5af:	50                   	push   eax
c001b5b0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b5b5:	50                   	push   eax
c001b5b6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b5bb:	50                   	push   eax
c001b5bc:	53                   	push   ebx
c001b5bd:	e8 62 fb ff ff       	call   c001b124 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b5c2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b5c6:	0f b6 c0             	movzx  eax,al
c001b5c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b5cd:	83 c4 2c             	add    esp,0x2c
c001b5d0:	5b                   	pop    ebx
c001b5d1:	5e                   	pop    esi
c001b5d2:	5f                   	pop    edi
c001b5d3:	5d                   	pop    ebp
c001b5d4:	eb 8a                	jmp    c001b560 <PCI::checkBus(unsigned char)>
c001b5d6:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b5db:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b5e1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b5e5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b5e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b5ed:	85 d2                	test   edx,edx
c001b5ef:	74 34                	je     c001b625 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b5f1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b5f4:	85 c9                	test   ecx,ecx
c001b5f6:	74 29                	je     c001b621 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b5f8:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b5fe:	31 f5                	xor    ebp,esi
c001b600:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b606:	75 19                	jne    c001b621 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b608:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b60e:	75 11                	jne    c001b621 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b610:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b617:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b61b:	0f 84 e1 00 00 00    	je     c001b702 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b621:	8b 12                	mov    edx,DWORD PTR [edx]
c001b623:	eb c8                	jmp    c001b5ed <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b625:	3d 01 06 00 00       	cmp    eax,0x601
c001b62a:	75 19                	jne    c001b645 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b62c:	83 ec 0c             	sub    esp,0xc
c001b62f:	68 64 01 00 00       	push   0x164
c001b634:	e8 9a c4 fe ff       	call   c0007ad3 <malloc>
c001b639:	89 04 24             	mov    DWORD PTR [esp],eax
c001b63c:	89 c5                	mov    ebp,eax
c001b63e:	e8 ab 0e 00 00       	call   c001c4ee <SATABus::SATABus()>
c001b643:	eb 1e                	jmp    c001b663 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b645:	3d 01 01 00 00       	cmp    eax,0x101
c001b64a:	75 62                	jne    c001b6ae <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b64c:	83 ec 0c             	sub    esp,0xc
c001b64f:	68 70 02 00 00       	push   0x270
c001b654:	e8 7a c4 fe ff       	call   c0007ad3 <malloc>
c001b659:	89 04 24             	mov    DWORD PTR [esp],eax
c001b65c:	89 c5                	mov    ebp,eax
c001b65e:	e8 f3 02 00 00       	call   c001b956 <IDE::IDE()>
c001b663:	58                   	pop    eax
c001b664:	5a                   	pop    edx
c001b665:	55                   	push   ebp
c001b666:	53                   	push   ebx
c001b667:	e8 b8 10 ff ff       	call   c000c724 <Device::addChild(Device*)>
c001b66c:	83 ec 1c             	sub    esp,0x1c
c001b66f:	b9 09 00 00 00       	mov    ecx,0x9
c001b674:	fc                   	cld    
c001b675:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b679:	89 e7                	mov    edi,esp
c001b67b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b67d:	55                   	push   ebp
c001b67e:	e8 e7 0f ff ff       	call   c000c66a <Device::preOpenPCI(PCIDeviceInfo)>
c001b683:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b686:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b68a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b692:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b69a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b6a2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b6a5:	83 c4 4c             	add    esp,0x4c
c001b6a8:	5b                   	pop    ebx
c001b6a9:	5e                   	pop    esi
c001b6aa:	5f                   	pop    edi
c001b6ab:	5d                   	pop    ebp
c001b6ac:	ff e0                	jmp    eax
c001b6ae:	83 ec 0c             	sub    esp,0xc
c001b6b1:	68 58 01 00 00       	push   0x158
c001b6b6:	e8 18 c4 fe ff       	call   c0007ad3 <malloc>
c001b6bb:	5a                   	pop    edx
c001b6bc:	59                   	pop    ecx
c001b6bd:	68 4a 2d 02 c0       	push   0xc0022d4a
c001b6c2:	50                   	push   eax
c001b6c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b6c7:	e8 f6 12 ff ff       	call   c000c9c2 <DriverlessDevice::DriverlessDevice(char const*)>
c001b6cc:	5e                   	pop    esi
c001b6cd:	5f                   	pop    edi
c001b6ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6d2:	50                   	push   eax
c001b6d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b6d7:	53                   	push   ebx
c001b6d8:	e8 47 10 ff ff       	call   c000c724 <Device::addChild(Device*)>
c001b6dd:	83 c4 10             	add    esp,0x10
c001b6e0:	b9 09 00 00 00       	mov    ecx,0x9
c001b6e5:	fc                   	cld    
c001b6e6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b6ea:	89 fe                	mov    esi,edi
c001b6ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6f6:	83 c4 1c             	add    esp,0x1c
c001b6f9:	5b                   	pop    ebx
c001b6fa:	5e                   	pop    esi
c001b6fb:	5f                   	pop    edi
c001b6fc:	5d                   	pop    ebp
c001b6fd:	e9 68 0f ff ff       	jmp    c000c66a <Device::preOpenPCI(PCIDeviceInfo)>
c001b702:	83 c4 1c             	add    esp,0x1c
c001b705:	5b                   	pop    ebx
c001b706:	5e                   	pop    esi
c001b707:	5f                   	pop    edi
c001b708:	5d                   	pop    ebp
c001b709:	c3                   	ret    

c001b70a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b70a:	55                   	push   ebp
c001b70b:	57                   	push   edi
c001b70c:	56                   	push   esi
c001b70d:	53                   	push   ebx
c001b70e:	83 ec 68             	sub    esp,0x68
c001b711:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b718:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b71c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b720:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b727:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b72c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b730:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b737:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b73c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b740:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b745:	6a 0c                	push   0xc
c001b747:	57                   	push   edi
c001b748:	53                   	push   ebx
c001b749:	56                   	push   esi
c001b74a:	55                   	push   ebp
c001b74b:	e8 24 f8 ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b750:	83 c4 20             	add    esp,0x20
c001b753:	57                   	push   edi
c001b754:	53                   	push   ebx
c001b755:	56                   	push   esi
c001b756:	55                   	push   ebp
c001b757:	e8 0e f9 ff ff       	call   c001b06a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b75c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b761:	57                   	push   edi
c001b762:	53                   	push   ebx
c001b763:	56                   	push   esi
c001b764:	55                   	push   ebp
c001b765:	e8 96 f9 ff ff       	call   c001b100 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b76a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b76e:	83 c4 14             	add    esp,0x14
c001b771:	6a 3c                	push   0x3c
c001b773:	57                   	push   edi
c001b774:	53                   	push   ebx
c001b775:	56                   	push   esi
c001b776:	55                   	push   ebp
c001b777:	e8 f8 f7 ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b77c:	0f b6 c4             	movzx  eax,ah
c001b77f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b783:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b787:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b78b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b790:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b796:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b79c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b7a0:	83 c4 20             	add    esp,0x20
c001b7a3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b7a8:	74 30                	je     c001b7da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b7aa:	31 c0                	xor    eax,eax
c001b7ac:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b7b0:	7e 28                	jle    c001b7da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b7b2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b7ba:	39 cb                	cmp    ebx,ecx
c001b7bc:	75 19                	jne    c001b7d7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b7be:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b7c6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b7ca:	75 0b                	jne    c001b7d7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b7cc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b7d3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b7d7:	40                   	inc    eax
c001b7d8:	eb d2                	jmp    c001b7ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b7da:	31 d2                	xor    edx,edx
c001b7dc:	83 ec 0c             	sub    esp,0xc
c001b7df:	57                   	push   edi
c001b7e0:	53                   	push   ebx
c001b7e1:	56                   	push   esi
c001b7e2:	52                   	push   edx
c001b7e3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b7e7:	55                   	push   ebp
c001b7e8:	e8 5f f9 ff ff       	call   c001b14c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b7ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b7f1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b7f5:	42                   	inc    edx
c001b7f6:	83 c4 20             	add    esp,0x20
c001b7f9:	83 fa 06             	cmp    edx,0x6
c001b7fc:	75 de                	jne    c001b7dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b7fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b802:	83 ec 0c             	sub    esp,0xc
c001b805:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b809:	c1 e2 08             	shl    edx,0x8
c001b80c:	0f b6 c4             	movzx  eax,ah
c001b80f:	09 d0                	or     eax,edx
c001b811:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b816:	6a 02                	push   0x2
c001b818:	57                   	push   edi
c001b819:	53                   	push   ebx
c001b81a:	56                   	push   esi
c001b81b:	55                   	push   ebp
c001b81c:	e8 53 f7 ff ff       	call   c001af74 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b821:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b826:	83 c4 20             	add    esp,0x20
c001b829:	57                   	push   edi
c001b82a:	53                   	push   ebx
c001b82b:	56                   	push   esi
c001b82c:	55                   	push   ebp
c001b82d:	e8 82 f8 ff ff       	call   c001b0b4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b832:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b836:	57                   	push   edi
c001b837:	53                   	push   ebx
c001b838:	56                   	push   esi
c001b839:	55                   	push   ebp
c001b83a:	e8 df f7 ff ff       	call   c001b01e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b83f:	b9 09 00 00 00       	mov    ecx,0x9
c001b844:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b849:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b84d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b851:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b855:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b859:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b85d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b861:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b865:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b869:	83 ec 0c             	sub    esp,0xc
c001b86c:	fc                   	cld    
c001b86d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b871:	89 e7                	mov    edi,esp
c001b873:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b875:	55                   	push   ebp
c001b876:	e8 09 fd ff ff       	call   c001b584 <PCI::foundDevice(PCIDeviceInfo)>
c001b87b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b881:	5b                   	pop    ebx
c001b882:	5e                   	pop    esi
c001b883:	5f                   	pop    edi
c001b884:	5d                   	pop    ebp
c001b885:	c3                   	ret    

c001b886 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b886:	55                   	push   ebp
c001b887:	57                   	push   edi
c001b888:	56                   	push   esi
c001b889:	53                   	push   ebx
c001b88a:	83 ec 0c             	sub    esp,0xc
c001b88d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b892:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b897:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b89b:	6a 00                	push   0x0
c001b89d:	56                   	push   esi
c001b89e:	57                   	push   edi
c001b89f:	55                   	push   ebp
c001b8a0:	e8 79 f7 ff ff       	call   c001b01e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8a5:	6a 00                	push   0x0
c001b8a7:	56                   	push   esi
c001b8a8:	57                   	push   edi
c001b8a9:	55                   	push   ebp
c001b8aa:	e8 5b fe ff ff       	call   c001b70a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b8af:	83 c4 20             	add    esp,0x20
c001b8b2:	6a 00                	push   0x0
c001b8b4:	56                   	push   esi
c001b8b5:	57                   	push   edi
c001b8b6:	55                   	push   ebp
c001b8b7:	e8 86 f7 ff ff       	call   c001b042 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b8bc:	83 c4 10             	add    esp,0x10
c001b8bf:	a8 80                	test   al,0x80
c001b8c1:	74 2d                	je     c001b8f0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b8c3:	bb 01 00 00 00       	mov    ebx,0x1
c001b8c8:	53                   	push   ebx
c001b8c9:	56                   	push   esi
c001b8ca:	57                   	push   edi
c001b8cb:	55                   	push   ebp
c001b8cc:	e8 4d f7 ff ff       	call   c001b01e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8d1:	83 c4 10             	add    esp,0x10
c001b8d4:	0f b7 c0             	movzx  eax,ax
c001b8d7:	3d ff ff 00 00       	cmp    eax,0xffff
c001b8dc:	74 0c                	je     c001b8ea <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b8de:	53                   	push   ebx
c001b8df:	56                   	push   esi
c001b8e0:	57                   	push   edi
c001b8e1:	55                   	push   ebp
c001b8e2:	e8 23 fe ff ff       	call   c001b70a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b8e7:	83 c4 10             	add    esp,0x10
c001b8ea:	43                   	inc    ebx
c001b8eb:	83 fb 08             	cmp    ebx,0x8
c001b8ee:	75 d8                	jne    c001b8c8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b8f0:	83 c4 0c             	add    esp,0xc
c001b8f3:	5b                   	pop    ebx
c001b8f4:	5e                   	pop    esi
c001b8f5:	5f                   	pop    edi
c001b8f6:	5d                   	pop    ebp
c001b8f7:	c3                   	ret    

c001b8f8 <PCI::detect()>:
c001b8f8:	56                   	push   esi
c001b8f9:	53                   	push   ebx
c001b8fa:	53                   	push   ebx
c001b8fb:	31 db                	xor    ebx,ebx
c001b8fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b901:	6a 00                	push   0x0
c001b903:	6a 00                	push   0x0
c001b905:	6a 00                	push   0x0
c001b907:	56                   	push   esi
c001b908:	e8 35 f7 ff ff       	call   c001b042 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b90d:	83 c4 10             	add    esp,0x10
c001b910:	a8 80                	test   al,0x80
c001b912:	75 21                	jne    c001b935 <PCI::detect()+0x3d>
c001b914:	51                   	push   ecx
c001b915:	51                   	push   ecx
c001b916:	6a 00                	push   0x0
c001b918:	56                   	push   esi
c001b919:	e8 42 fc ff ff       	call   c001b560 <PCI::checkBus(unsigned char)>
c001b91e:	83 c4 10             	add    esp,0x10
c001b921:	eb 2a                	jmp    c001b94d <PCI::detect()+0x55>
c001b923:	52                   	push   edx
c001b924:	52                   	push   edx
c001b925:	53                   	push   ebx
c001b926:	43                   	inc    ebx
c001b927:	56                   	push   esi
c001b928:	e8 33 fc ff ff       	call   c001b560 <PCI::checkBus(unsigned char)>
c001b92d:	83 c4 10             	add    esp,0x10
c001b930:	83 fb 08             	cmp    ebx,0x8
c001b933:	74 18                	je     c001b94d <PCI::detect()+0x55>
c001b935:	53                   	push   ebx
c001b936:	6a 00                	push   0x0
c001b938:	6a 00                	push   0x0
c001b93a:	56                   	push   esi
c001b93b:	e8 de f6 ff ff       	call   c001b01e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b940:	83 c4 10             	add    esp,0x10
c001b943:	0f b7 c0             	movzx  eax,ax
c001b946:	3d ff ff 00 00       	cmp    eax,0xffff
c001b94b:	74 d6                	je     c001b923 <PCI::detect()+0x2b>
c001b94d:	58                   	pop    eax
c001b94e:	5b                   	pop    ebx
c001b94f:	5e                   	pop    esi
c001b950:	c3                   	ret    
c001b951:	90                   	nop

c001b952 <IDE::close(int, int, void*)>:
c001b952:	83 c8 ff             	or     eax,0xffffffff
c001b955:	c3                   	ret    

c001b956 <IDE::IDE()>:
c001b956:	83 ec 0c             	sub    esp,0xc
c001b959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95d:	83 ec 08             	sub    esp,0x8
c001b960:	68 90 2d 02 c0       	push   0xc0022d90
c001b965:	50                   	push   eax
c001b966:	e8 fd 10 ff ff       	call   c000ca68 <HardDiskController::HardDiskController(char const*)>
c001b96b:	83 c4 10             	add    esp,0x10
c001b96e:	ba 20 2e 02 c0       	mov    edx,0xc0022e20
c001b973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b977:	89 10                	mov    DWORD PTR [eax],edx
c001b979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b984:	90                   	nop
c001b985:	83 c4 0c             	add    esp,0xc
c001b988:	c3                   	ret    
c001b989:	90                   	nop

c001b98a <IDE::prepareInterrupt(unsigned char)>:
c001b98a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b98f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b993:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b99b:	c3                   	ret    

c001b99c <selectDrive(unsigned char, unsigned char)>:
c001b99c:	c3                   	ret    
c001b99d:	90                   	nop

c001b99e <IDE::getBase(unsigned char)>:
c001b99e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b9a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9a7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b9af:	c3                   	ret    

c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b9b0:	55                   	push   ebp
c001b9b1:	57                   	push   edi
c001b9b2:	56                   	push   esi
c001b9b3:	53                   	push   ebx
c001b9b4:	83 ec 1c             	sub    esp,0x1c
c001b9b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b9bb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b9bf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b9c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b9c7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b9ca:	80 f9 03             	cmp    cl,0x3
c001b9cd:	77 4f                	ja     c001ba1e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b9cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9d3:	0f b6 f2             	movzx  esi,dl
c001b9d6:	0f b6 db             	movzx  ebx,bl
c001b9d9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b9dc:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b9e1:	80 ca 80             	or     dl,0x80
c001b9e4:	52                   	push   edx
c001b9e5:	6a 0c                	push   0xc
c001b9e7:	56                   	push   esi
c001b9e8:	57                   	push   edi
c001b9e9:	e8 c2 ff ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9ee:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b9f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9f7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b9fb:	ee                   	out    dx,al
c001b9fc:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ba01:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ba05:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ba09:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ba11:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ba15:	83 c4 2c             	add    esp,0x2c
c001ba18:	5b                   	pop    ebx
c001ba19:	5e                   	pop    esi
c001ba1a:	5f                   	pop    edi
c001ba1b:	5d                   	pop    ebp
c001ba1c:	eb 92                	jmp    c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba1e:	0f b6 cb             	movzx  ecx,bl
c001ba21:	83 f9 07             	cmp    ecx,0x7
c001ba24:	77 12                	ja     c001ba38 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ba26:	0f b6 d2             	movzx  edx,dl
c001ba29:	0f b6 db             	movzx  ebx,bl
c001ba2c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001ba34:	01 da                	add    edx,ebx
c001ba36:	eb 2f                	jmp    c001ba67 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ba38:	83 f9 0d             	cmp    ecx,0xd
c001ba3b:	77 13                	ja     c001ba50 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ba3d:	0f b6 d2             	movzx  edx,dl
c001ba40:	0f b6 db             	movzx  ebx,bl
c001ba43:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ba4a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ba4e:	eb 17                	jmp    c001ba67 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ba50:	83 f9 15             	cmp    ecx,0x15
c001ba53:	77 13                	ja     c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ba55:	0f b6 d2             	movzx  edx,dl
c001ba58:	0f b6 db             	movzx  ebx,bl
c001ba5b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ba63:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ba67:	ee                   	out    dx,al
c001ba68:	83 c4 1c             	add    esp,0x1c
c001ba6b:	5b                   	pop    ebx
c001ba6c:	5e                   	pop    esi
c001ba6d:	5f                   	pop    edi
c001ba6e:	5d                   	pop    ebp
c001ba6f:	c3                   	ret    

c001ba70 <IDE::read(unsigned char, unsigned char)>:
c001ba70:	57                   	push   edi
c001ba71:	56                   	push   esi
c001ba72:	53                   	push   ebx
c001ba73:	83 ec 10             	sub    esp,0x10
c001ba76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba7e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ba82:	8d 42 f8             	lea    eax,[edx-0x8]
c001ba85:	3c 03                	cmp    al,0x3
c001ba87:	77 48                	ja     c001bad1 <IDE::read(unsigned char, unsigned char)+0x61>
c001ba89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ba8d:	0f b6 f1             	movzx  esi,cl
c001ba90:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ba93:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ba98:	0c 80                	or     al,0x80
c001ba9a:	50                   	push   eax
c001ba9b:	6a 0c                	push   0xc
c001ba9d:	56                   	push   esi
c001ba9e:	53                   	push   ebx
c001ba9f:	e8 0c ff ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baa4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001baa8:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001baad:	0f b6 d2             	movzx  edx,dl
c001bab0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bab4:	ec                   	in     al,dx
c001bab5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bab9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001babe:	52                   	push   edx
c001babf:	6a 0c                	push   0xc
c001bac1:	56                   	push   esi
c001bac2:	53                   	push   ebx
c001bac3:	e8 e8 fe ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bac8:	83 c4 20             	add    esp,0x20
c001bacb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bacf:	eb 4c                	jmp    c001bb1d <IDE::read(unsigned char, unsigned char)+0xad>
c001bad1:	0f b6 f2             	movzx  esi,dl
c001bad4:	83 fe 07             	cmp    esi,0x7
c001bad7:	77 12                	ja     c001baeb <IDE::read(unsigned char, unsigned char)+0x7b>
c001bad9:	0f b6 c9             	movzx  ecx,cl
c001badc:	0f b6 d2             	movzx  edx,dl
c001badf:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bae7:	01 c2                	add    edx,eax
c001bae9:	eb 31                	jmp    c001bb1c <IDE::read(unsigned char, unsigned char)+0xac>
c001baeb:	83 fe 0d             	cmp    esi,0xd
c001baee:	77 13                	ja     c001bb03 <IDE::read(unsigned char, unsigned char)+0x93>
c001baf0:	0f b6 c9             	movzx  ecx,cl
c001baf3:	0f b6 d2             	movzx  edx,dl
c001baf6:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bafd:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bb01:	eb 19                	jmp    c001bb1c <IDE::read(unsigned char, unsigned char)+0xac>
c001bb03:	31 c0                	xor    eax,eax
c001bb05:	83 fe 15             	cmp    esi,0x15
c001bb08:	77 13                	ja     c001bb1d <IDE::read(unsigned char, unsigned char)+0xad>
c001bb0a:	0f b6 c9             	movzx  ecx,cl
c001bb0d:	0f b6 d2             	movzx  edx,dl
c001bb10:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bb18:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bb1c:	ec                   	in     al,dx
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	5b                   	pop    ebx
c001bb21:	5e                   	pop    esi
c001bb22:	5f                   	pop    edi
c001bb23:	c3                   	ret    

c001bb24 <IDE::waitInterrupt(unsigned char)>:
c001bb24:	55                   	push   ebp
c001bb25:	57                   	push   edi
c001bb26:	56                   	push   esi
c001bb27:	53                   	push   ebx
c001bb28:	31 db                	xor    ebx,ebx
c001bb2a:	83 ec 0c             	sub    esp,0xc
c001bb2d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bb31:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bb36:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bb3e:	89 e8                	mov    eax,ebp
c001bb40:	84 c0                	test   al,al
c001bb42:	75 30                	jne    c001bb74 <IDE::waitInterrupt(unsigned char)+0x50>
c001bb44:	50                   	push   eax
c001bb45:	6a 0c                	push   0xc
c001bb47:	56                   	push   esi
c001bb48:	57                   	push   edi
c001bb49:	e8 22 ff ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001bb4e:	83 c4 10             	add    esp,0x10
c001bb51:	a8 01                	test   al,0x1
c001bb53:	75 27                	jne    c001bb7c <IDE::waitInterrupt(unsigned char)+0x58>
c001bb55:	f6 c3 04             	test   bl,0x4
c001bb58:	75 12                	jne    c001bb6c <IDE::waitInterrupt(unsigned char)+0x48>
c001bb5a:	83 fb 32             	cmp    ebx,0x32
c001bb5d:	7e 0d                	jle    c001bb6c <IDE::waitInterrupt(unsigned char)+0x48>
c001bb5f:	83 ec 0c             	sub    esp,0xc
c001bb62:	6a 64                	push   0x64
c001bb64:	e8 73 a4 ff ff       	call   c0015fdc <milliTenthSleep(unsigned int)>
c001bb69:	83 c4 10             	add    esp,0x10
c001bb6c:	83 fb 3c             	cmp    ebx,0x3c
c001bb6f:	74 0b                	je     c001bb7c <IDE::waitInterrupt(unsigned char)+0x58>
c001bb71:	43                   	inc    ebx
c001bb72:	eb c2                	jmp    c001bb36 <IDE::waitInterrupt(unsigned char)+0x12>
c001bb74:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bb7c:	83 c4 0c             	add    esp,0xc
c001bb7f:	89 e8                	mov    eax,ebp
c001bb81:	5b                   	pop    ebx
c001bb82:	5e                   	pop    esi
c001bb83:	5f                   	pop    edi
c001bb84:	5d                   	pop    ebp
c001bb85:	c3                   	ret    

c001bb86 <ideChannel0IRQHandler(regs*, void*)>:
c001bb86:	83 ec 10             	sub    esp,0x10
c001bb89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb8d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bb94:	6a 07                	push   0x7
c001bb96:	6a 00                	push   0x0
c001bb98:	50                   	push   eax
c001bb99:	e8 d2 fe ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001bb9e:	83 c4 1c             	add    esp,0x1c
c001bba1:	c3                   	ret    

c001bba2 <ideChannel1IRQHandler(regs*, void*)>:
c001bba2:	83 ec 10             	sub    esp,0x10
c001bba5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bba9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bbb0:	6a 07                	push   0x7
c001bbb2:	6a 01                	push   0x1
c001bbb4:	50                   	push   eax
c001bbb5:	e8 b6 fe ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001bbba:	83 c4 1c             	add    esp,0x1c
c001bbbd:	c3                   	ret    

c001bbbe <IDE::enableIRQs(unsigned char, bool)>:
c001bbbe:	57                   	push   edi
c001bbbf:	b8 02 00 00 00       	mov    eax,0x2
c001bbc4:	56                   	push   esi
c001bbc5:	53                   	push   ebx
c001bbc6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bbcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbcf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bbd3:	74 02                	je     c001bbd7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bbd5:	31 c0                	xor    eax,eax
c001bbd7:	0f b6 db             	movzx  ebx,bl
c001bbda:	bf 04 00 00 00       	mov    edi,0x4
c001bbdf:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bbe6:	50                   	push   eax
c001bbe7:	6a 0c                	push   0xc
c001bbe9:	53                   	push   ebx
c001bbea:	56                   	push   esi
c001bbeb:	e8 c0 fd ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbf0:	83 c4 10             	add    esp,0x10
c001bbf3:	50                   	push   eax
c001bbf4:	6a 0c                	push   0xc
c001bbf6:	53                   	push   ebx
c001bbf7:	56                   	push   esi
c001bbf8:	e8 73 fe ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	4f                   	dec    edi
c001bc01:	75 f0                	jne    c001bbf3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bc03:	5b                   	pop    ebx
c001bc04:	5e                   	pop    esi
c001bc05:	5f                   	pop    edi
c001bc06:	c3                   	ret    
c001bc07:	90                   	nop

c001bc08 <IDE::open(int, int, void*)>:
c001bc08:	55                   	push   ebp
c001bc09:	57                   	push   edi
c001bc0a:	56                   	push   esi
c001bc0b:	53                   	push   ebx
c001bc0c:	83 ec 1c             	sub    esp,0x1c
c001bc0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bc13:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bc1a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bc23:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bc2c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bc33:	0f 85 da 02 00 00    	jne    c001bf13 <IDE::open(int, int, void*)+0x30b>
c001bc39:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bc3f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bc43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc47:	83 e0 7f             	and    eax,0x7f
c001bc4a:	83 f8 05             	cmp    eax,0x5
c001bc4d:	74 05                	je     c001bc54 <IDE::open(int, int, void*)+0x4c>
c001bc4f:	83 f8 0f             	cmp    eax,0xf
c001bc52:	75 32                	jne    c001bc86 <IDE::open(int, int, void*)+0x7e>
c001bc54:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bc5a:	83 e0 fc             	and    eax,0xfffffffc
c001bc5d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bc64:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bc6a:	83 e0 fc             	and    eax,0xfffffffc
c001bc6d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bc74:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bc7a:	83 e0 fc             	and    eax,0xfffffffc
c001bc7d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc84:	eb 14                	jmp    c001bc9a <IDE::open(int, int, void*)+0x92>
c001bc86:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bc90:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bc9a:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bca1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bca6:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bcad:	89 fa                	mov    edx,edi
c001bcaf:	89 f1                	mov    ecx,esi
c001bcb1:	c1 e1 10             	shl    ecx,0x10
c001bcb4:	89 e8                	mov    eax,ebp
c001bcb6:	c1 e0 0b             	shl    eax,0xb
c001bcb9:	09 c1                	or     ecx,eax
c001bcbb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bcc2:	c1 e0 08             	shl    eax,0x8
c001bcc5:	09 c1                	or     ecx,eax
c001bcc7:	89 c8                	mov    eax,ecx
c001bcc9:	0d 08 00 00 80       	or     eax,0x80000008
c001bcce:	ef                   	out    dx,eax
c001bccf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bcd4:	ed                   	in     eax,dx
c001bcd5:	c1 e8 10             	shr    eax,0x10
c001bcd8:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcdd:	0f 84 f9 00 00 00    	je     c001bddc <IDE::open(int, int, void*)+0x1d4>
c001bce3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bce9:	89 fa                	mov    edx,edi
c001bceb:	89 c8                	mov    eax,ecx
c001bced:	ef                   	out    dx,eax
c001bcee:	b0 fe                	mov    al,0xfe
c001bcf0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bcf5:	ee                   	out    dx,al
c001bcf6:	89 c8                	mov    eax,ecx
c001bcf8:	89 fa                	mov    edx,edi
c001bcfa:	ef                   	out    dx,eax
c001bcfb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd00:	ed                   	in     eax,dx
c001bd01:	3c fe                	cmp    al,0xfe
c001bd03:	0f 85 a4 00 00 00    	jne    c001bdad <IDE::open(int, int, void*)+0x1a5>
c001bd09:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bd0f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bd16:	74 30                	je     c001bd48 <IDE::open(int, int, void*)+0x140>
c001bd18:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bd1e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bd22:	83 ec 0c             	sub    esp,0xc
c001bd25:	40                   	inc    eax
c001bd26:	0f b6 c0             	movzx  eax,al
c001bd29:	50                   	push   eax
c001bd2a:	55                   	push   ebp
c001bd2b:	56                   	push   esi
c001bd2c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bd32:	51                   	push   ecx
c001bd33:	e8 88 39 ff ff       	call   c000f6c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bd38:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bd3d:	83 c4 1c             	add    esp,0x1c
c001bd40:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd46:	eb 0a                	jmp    c001bd52 <IDE::open(int, int, void*)+0x14a>
c001bd48:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bd52:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bd59:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bd5e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bd65:	89 ea                	mov    edx,ebp
c001bd67:	c1 e1 10             	shl    ecx,0x10
c001bd6a:	c1 e0 08             	shl    eax,0x8
c001bd6d:	09 c1                	or     ecx,eax
c001bd6f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bd76:	c1 e0 0b             	shl    eax,0xb
c001bd79:	09 c1                	or     ecx,eax
c001bd7b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bd81:	89 c8                	mov    eax,ecx
c001bd83:	ef                   	out    dx,eax
c001bd84:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bd8a:	be fc 0c 00 00       	mov    esi,0xcfc
c001bd8f:	89 f2                	mov    edx,esi
c001bd91:	89 f8                	mov    eax,edi
c001bd93:	ee                   	out    dx,al
c001bd94:	89 c8                	mov    eax,ecx
c001bd96:	89 ea                	mov    edx,ebp
c001bd98:	ef                   	out    dx,eax
c001bd99:	89 f2                	mov    edx,esi
c001bd9b:	ed                   	in     eax,dx
c001bd9c:	0f b6 c0             	movzx  eax,al
c001bd9f:	39 f8                	cmp    eax,edi
c001bda1:	74 49                	je     c001bdec <IDE::open(int, int, void*)+0x1e4>
c001bda3:	83 ec 0c             	sub    esp,0xc
c001bda6:	68 a8 2d 02 c0       	push   0xc0022da8
c001bdab:	eb 37                	jmp    c001bde4 <IDE::open(int, int, void*)+0x1dc>
c001bdad:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bdb6:	75 1a                	jne    c001bdd2 <IDE::open(int, int, void*)+0x1ca>
c001bdb8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bdbd:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bdc2:	74 05                	je     c001bdc9 <IDE::open(int, int, void*)+0x1c1>
c001bdc4:	83 c0 80             	add    eax,0xffffff80
c001bdc7:	75 09                	jne    c001bdd2 <IDE::open(int, int, void*)+0x1ca>
c001bdc9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bdd0:	eb 1a                	jmp    c001bdec <IDE::open(int, int, void*)+0x1e4>
c001bdd2:	83 ec 0c             	sub    esp,0xc
c001bdd5:	68 b0 2d 02 c0       	push   0xc0022db0
c001bdda:	eb 08                	jmp    c001bde4 <IDE::open(int, int, void*)+0x1dc>
c001bddc:	83 ec 0c             	sub    esp,0xc
c001bddf:	68 e1 2d 02 c0       	push   0xc0022de1
c001bde4:	e8 d8 54 ff ff       	call   c00112c1 <KePanic(char const*)>
c001bde9:	83 c4 10             	add    esp,0x10
c001bdec:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bdf3:	74 1a                	je     c001be0f <IDE::open(int, int, void*)+0x207>
c001bdf5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bdfb:	83 e0 fc             	and    eax,0xfffffffc
c001bdfe:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001be05:	83 c0 08             	add    eax,0x8
c001be08:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001be0f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001be15:	89 c2                	mov    edx,eax
c001be17:	83 e2 0f             	and    edx,0xf
c001be1a:	83 fa 08             	cmp    edx,0x8
c001be1d:	75 0a                	jne    c001be29 <IDE::open(int, int, void*)+0x221>
c001be1f:	83 e8 02             	sub    eax,0x2
c001be22:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be29:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001be2f:	89 c2                	mov    edx,eax
c001be31:	83 e2 0f             	and    edx,0xf
c001be34:	83 fa 08             	cmp    edx,0x8
c001be37:	75 0a                	jne    c001be43 <IDE::open(int, int, void*)+0x23b>
c001be39:	83 e8 02             	sub    eax,0x2
c001be3c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be43:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001be4a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001be51:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be54:	89 d0                	mov    eax,edx
c001be56:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be5a:	8d 7a 01             	lea    edi,[edx+0x1]
c001be5d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001be61:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001be65:	83 e1 3f             	and    ecx,0x3f
c001be68:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001be6c:	89 f9                	mov    ecx,edi
c001be6e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001be75:	8d 78 02             	lea    edi,[eax+0x2]
c001be78:	0f b6 c9             	movzx  ecx,cl
c001be7b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001be7e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001be82:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001be86:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001be8a:	83 e2 3f             	and    edx,0x3f
c001be8d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be91:	89 f9                	mov    ecx,edi
c001be93:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001be99:	8d 78 03             	lea    edi,[eax+0x3]
c001be9c:	0f b6 d1             	movzx  edx,cl
c001be9f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bea2:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bea6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001beaa:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001beae:	83 e1 3f             	and    ecx,0x3f
c001beb1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001beb5:	89 f9                	mov    ecx,edi
c001beb7:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bebd:	8d 78 04             	lea    edi,[eax+0x4]
c001bec0:	0f b6 c9             	movzx  ecx,cl
c001bec3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bec6:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001beca:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bece:	89 fa                	mov    edx,edi
c001bed0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bed6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001beda:	83 e2 3f             	and    edx,0x3f
c001bedd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bee1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bee8:	66 85 f6             	test   si,si
c001beeb:	74 65                	je     c001bf52 <IDE::open(int, int, void*)+0x34a>
c001beed:	89 f9                	mov    ecx,edi
c001beef:	83 c0 05             	add    eax,0x5
c001bef2:	0f b6 d1             	movzx  edx,cl
c001bef5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bef8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001befc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bf00:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bf06:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bf0a:	83 e0 3f             	and    eax,0x3f
c001bf0d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bf11:	eb 3f                	jmp    c001bf52 <IDE::open(int, int, void*)+0x34a>
c001bf13:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bf1a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bf20:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bf27:	05 06 02 00 00       	add    eax,0x206
c001bf2c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bf33:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bf3a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bf41:	05 06 02 00 00       	add    eax,0x206
c001bf46:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bf4d:	e9 bd fe ff ff       	jmp    c001be0f <IDE::open(int, int, void*)+0x207>
c001bf52:	50                   	push   eax
c001bf53:	50                   	push   eax
c001bf54:	6a 00                	push   0x0
c001bf56:	53                   	push   ebx
c001bf57:	e8 2e fa ff ff       	call   c001b98a <IDE::prepareInterrupt(unsigned char)>
c001bf5c:	5a                   	pop    edx
c001bf5d:	59                   	pop    ecx
c001bf5e:	6a 01                	push   0x1
c001bf60:	53                   	push   ebx
c001bf61:	e8 24 fa ff ff       	call   c001b98a <IDE::prepareInterrupt(unsigned char)>
c001bf66:	83 c4 0c             	add    esp,0xc
c001bf69:	6a 00                	push   0x0
c001bf6b:	6a 00                	push   0x0
c001bf6d:	53                   	push   ebx
c001bf6e:	e8 4b fc ff ff       	call   c001bbbe <IDE::enableIRQs(unsigned char, bool)>
c001bf73:	83 c4 0c             	add    esp,0xc
c001bf76:	6a 00                	push   0x0
c001bf78:	6a 01                	push   0x1
c001bf7a:	53                   	push   ebx
c001bf7b:	e8 3e fc ff ff       	call   c001bbbe <IDE::enableIRQs(unsigned char, bool)>
c001bf80:	83 c4 10             	add    esp,0x10
c001bf83:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bf8a:	74 34                	je     c001bfc0 <IDE::open(int, int, void*)+0x3b8>
c001bf8c:	83 ec 0c             	sub    esp,0xc
c001bf8f:	53                   	push   ebx
c001bf90:	6a 01                	push   0x1
c001bf92:	68 86 bb 01 c0       	push   0xc001bb86
c001bf97:	6a 0e                	push   0xe
c001bf99:	53                   	push   ebx
c001bf9a:	e8 31 07 ff ff       	call   c000c6d0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf9f:	83 c4 14             	add    esp,0x14
c001bfa2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bfa8:	53                   	push   ebx
c001bfa9:	6a 01                	push   0x1
c001bfab:	68 a2 bb 01 c0       	push   0xc001bba2
c001bfb0:	6a 0f                	push   0xf
c001bfb2:	53                   	push   ebx
c001bfb3:	e8 18 07 ff ff       	call   c000c6d0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bfb8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bfbe:	eb 38                	jmp    c001bff8 <IDE::open(int, int, void*)+0x3f0>
c001bfc0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bfca:	83 ec 0c             	sub    esp,0xc
c001bfcd:	53                   	push   ebx
c001bfce:	6a 00                	push   0x0
c001bfd0:	68 86 bb 01 c0       	push   0xc001bb86
c001bfd5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bfdb:	53                   	push   ebx
c001bfdc:	e8 ef 06 ff ff       	call   c000c6d0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bfe1:	83 c4 14             	add    esp,0x14
c001bfe4:	53                   	push   ebx
c001bfe5:	6a 00                	push   0x0
c001bfe7:	68 a2 bb 01 c0       	push   0xc001bba2
c001bfec:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bff2:	53                   	push   ebx
c001bff3:	e8 d8 06 ff ff       	call   c000c6d0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bff8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bffa:	83 c4 20             	add    esp,0x20
c001bffd:	83 ec 0c             	sub    esp,0xc
c001c000:	53                   	push   ebx
c001c001:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c004:	83 c4 0c             	add    esp,0xc
c001c007:	6a 07                	push   0x7
c001c009:	6a 00                	push   0x0
c001c00b:	53                   	push   ebx
c001c00c:	e8 5f fa ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c011:	83 c4 0c             	add    esp,0xc
c001c014:	6a 07                	push   0x7
c001c016:	6a 01                	push   0x1
c001c018:	53                   	push   ebx
c001c019:	e8 52 fa ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c01e:	83 c4 0c             	add    esp,0xc
c001c021:	6a 01                	push   0x1
c001c023:	6a 00                	push   0x0
c001c025:	53                   	push   ebx
c001c026:	e8 93 fb ff ff       	call   c001bbbe <IDE::enableIRQs(unsigned char, bool)>
c001c02b:	83 c4 0c             	add    esp,0xc
c001c02e:	6a 01                	push   0x1
c001c030:	6a 01                	push   0x1
c001c032:	53                   	push   ebx
c001c033:	e8 86 fb ff ff       	call   c001bbbe <IDE::enableIRQs(unsigned char, bool)>
c001c038:	83 c4 2c             	add    esp,0x2c
c001c03b:	31 c0                	xor    eax,eax
c001c03d:	5b                   	pop    ebx
c001c03e:	5e                   	pop    esi
c001c03f:	5f                   	pop    edi
c001c040:	5d                   	pop    ebp
c001c041:	c3                   	ret    

c001c042 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c042:	55                   	push   ebp
c001c043:	57                   	push   edi
c001c044:	56                   	push   esi
c001c045:	53                   	push   ebx
c001c046:	83 ec 1c             	sub    esp,0x1c
c001c049:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c04d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c051:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c055:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c059:	8d 42 f8             	lea    eax,[edx-0x8]
c001c05c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c060:	3c 03                	cmp    al,0x3
c001c062:	77 5a                	ja     c001c0be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c064:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c068:	0f b6 db             	movzx  ebx,bl
c001c06b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c06f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c072:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c077:	0c 80                	or     al,0x80
c001c079:	50                   	push   eax
c001c07a:	6a 0c                	push   0xc
c001c07c:	53                   	push   ebx
c001c07d:	56                   	push   esi
c001c07e:	e8 2d f9 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c083:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c087:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c08c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c090:	0f b6 d2             	movzx  edx,dl
c001c093:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c097:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c099:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c09e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c0a2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c0a6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c0ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c0b2:	83 c4 2c             	add    esp,0x2c
c001c0b5:	5b                   	pop    ebx
c001c0b6:	5e                   	pop    esi
c001c0b7:	5f                   	pop    edi
c001c0b8:	5d                   	pop    ebp
c001c0b9:	e9 f2 f8 ff ff       	jmp    c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0be:	0f b6 c2             	movzx  eax,dl
c001c0c1:	83 f8 07             	cmp    eax,0x7
c001c0c4:	77 12                	ja     c001c0d8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c0c6:	0f b6 db             	movzx  ebx,bl
c001c0c9:	0f b6 c2             	movzx  eax,dl
c001c0cc:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c0d4:	01 c2                	add    edx,eax
c001c0d6:	eb 2f                	jmp    c001c107 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c0d8:	83 f8 0d             	cmp    eax,0xd
c001c0db:	77 13                	ja     c001c0f0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c0dd:	0f b6 db             	movzx  ebx,bl
c001c0e0:	0f b6 d2             	movzx  edx,dl
c001c0e3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c0ea:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c0ee:	eb 17                	jmp    c001c107 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c0f0:	83 f8 15             	cmp    eax,0x15
c001c0f3:	77 14                	ja     c001c109 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c0f5:	0f b6 db             	movzx  ebx,bl
c001c0f8:	0f b6 d2             	movzx  edx,dl
c001c0fb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c103:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c107:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c109:	83 c4 1c             	add    esp,0x1c
c001c10c:	5b                   	pop    ebx
c001c10d:	5e                   	pop    esi
c001c10e:	5f                   	pop    edi
c001c10f:	5d                   	pop    ebp
c001c110:	c3                   	ret    
c001c111:	90                   	nop

c001c112 <IDE::detect()>:
c001c112:	55                   	push   ebp
c001c113:	57                   	push   edi
c001c114:	56                   	push   esi
c001c115:	53                   	push   ebx
c001c116:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c11c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c123:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c12a:	0f 85 9e 02 00 00    	jne    c001c3ce <IDE::detect()+0x2bc>
c001c130:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c137:	31 f6                	xor    esi,esi
c001c139:	31 ff                	xor    edi,edi
c001c13b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c143:	89 f8                	mov    eax,edi
c001c145:	c1 e0 06             	shl    eax,0x6
c001c148:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c150:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c154:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c15c:	c1 e0 04             	shl    eax,0x4
c001c15f:	83 c8 a0             	or     eax,0xffffffa0
c001c162:	0f b6 c0             	movzx  eax,al
c001c165:	50                   	push   eax
c001c166:	6a 06                	push   0x6
c001c168:	56                   	push   esi
c001c169:	53                   	push   ebx
c001c16a:	e8 41 f8 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c16f:	83 c4 0c             	add    esp,0xc
c001c172:	6a 0c                	push   0xc
c001c174:	56                   	push   esi
c001c175:	53                   	push   ebx
c001c176:	e8 f5 f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c17b:	83 c4 0c             	add    esp,0xc
c001c17e:	6a 0c                	push   0xc
c001c180:	56                   	push   esi
c001c181:	53                   	push   ebx
c001c182:	e8 e9 f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c187:	83 c4 0c             	add    esp,0xc
c001c18a:	6a 0c                	push   0xc
c001c18c:	56                   	push   esi
c001c18d:	53                   	push   ebx
c001c18e:	e8 dd f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c193:	83 c4 0c             	add    esp,0xc
c001c196:	6a 0c                	push   0xc
c001c198:	56                   	push   esi
c001c199:	53                   	push   ebx
c001c19a:	e8 d1 f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c19f:	68 ec 00 00 00       	push   0xec
c001c1a4:	6a 07                	push   0x7
c001c1a6:	56                   	push   esi
c001c1a7:	53                   	push   ebx
c001c1a8:	e8 03 f8 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1ad:	83 c4 1c             	add    esp,0x1c
c001c1b0:	6a 0c                	push   0xc
c001c1b2:	56                   	push   esi
c001c1b3:	53                   	push   ebx
c001c1b4:	e8 b7 f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c1b9:	83 c4 0c             	add    esp,0xc
c001c1bc:	6a 0c                	push   0xc
c001c1be:	56                   	push   esi
c001c1bf:	53                   	push   ebx
c001c1c0:	e8 ab f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c1c5:	83 c4 0c             	add    esp,0xc
c001c1c8:	6a 0c                	push   0xc
c001c1ca:	56                   	push   esi
c001c1cb:	53                   	push   ebx
c001c1cc:	e8 9f f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c1d1:	83 c4 0c             	add    esp,0xc
c001c1d4:	6a 0c                	push   0xc
c001c1d6:	56                   	push   esi
c001c1d7:	53                   	push   ebx
c001c1d8:	e8 93 f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c1dd:	83 c4 0c             	add    esp,0xc
c001c1e0:	6a 0c                	push   0xc
c001c1e2:	56                   	push   esi
c001c1e3:	53                   	push   ebx
c001c1e4:	e8 87 f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c1e9:	83 c4 10             	add    esp,0x10
c001c1ec:	84 c0                	test   al,al
c001c1ee:	0f 84 61 01 00 00    	je     c001c355 <IDE::detect()+0x243>
c001c1f4:	31 ed                	xor    ebp,ebp
c001c1f6:	50                   	push   eax
c001c1f7:	6a 0c                	push   0xc
c001c1f9:	56                   	push   esi
c001c1fa:	53                   	push   ebx
c001c1fb:	e8 70 f8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c200:	83 c4 10             	add    esp,0x10
c001c203:	a8 01                	test   al,0x1
c001c205:	0f 85 6b 01 00 00    	jne    c001c376 <IDE::detect()+0x264>
c001c20b:	a8 80                	test   al,0x80
c001c20d:	75 04                	jne    c001c213 <IDE::detect()+0x101>
c001c20f:	a8 08                	test   al,0x8
c001c211:	75 23                	jne    c001c236 <IDE::detect()+0x124>
c001c213:	45                   	inc    ebp
c001c214:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c21a:	7e da                	jle    c001c1f6 <IDE::detect()+0xe4>
c001c21c:	83 ec 0c             	sub    esp,0xc
c001c21f:	6a 32                	push   0x32
c001c221:	e8 b6 9d ff ff       	call   c0015fdc <milliTenthSleep(unsigned int)>
c001c226:	83 c4 10             	add    esp,0x10
c001c229:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c22f:	75 c5                	jne    c001c1f6 <IDE::detect()+0xe4>
c001c231:	e9 40 01 00 00       	jmp    c001c376 <IDE::detect()+0x264>
c001c236:	31 c9                	xor    ecx,ecx
c001c238:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c23c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c240:	83 ec 0c             	sub    esp,0xc
c001c243:	68 80 00 00 00       	push   0x80
c001c248:	55                   	push   ebp
c001c249:	6a 00                	push   0x0
c001c24b:	56                   	push   esi
c001c24c:	53                   	push   ebx
c001c24d:	e8 f0 fd ff ff       	call   c001c042 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c252:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c257:	89 f8                	mov    eax,edi
c001c259:	c1 e0 06             	shl    eax,0x6
c001c25c:	01 d8                	add    eax,ebx
c001c25e:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c265:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c26c:	89 d1                	mov    ecx,edx
c001c26e:	89 f2                	mov    edx,esi
c001c270:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c276:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c27a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c280:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c284:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c28b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c293:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c29a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c2a2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c2a8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c2af:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c2b5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c2b9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c2bd:	83 c4 20             	add    esp,0x20
c001c2c0:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c2c3:	83 c5 02             	add    ebp,0x2
c001c2c6:	83 c0 02             	add    eax,0x2
c001c2c9:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c2cf:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c2d2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c2d8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c2dc:	75 e2                	jne    c001c2c0 <IDE::detect()+0x1ae>
c001c2de:	89 f8                	mov    eax,edi
c001c2e0:	c1 e0 06             	shl    eax,0x6
c001c2e3:	01 d8                	add    eax,ebx
c001c2e5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c2ec:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c2f3:	c1 ea 09             	shr    edx,0x9
c001c2f6:	83 e2 01             	and    edx,0x1
c001c2f9:	80 e1 01             	and    cl,0x1
c001c2fc:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c302:	75 22                	jne    c001c326 <IDE::detect()+0x214>
c001c304:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c30b:	74 47                	je     c001c354 <IDE::detect()+0x242>
c001c30d:	83 ec 0c             	sub    esp,0xc
c001c310:	68 7c 01 00 00       	push   0x17c
c001c315:	e8 b9 b7 fe ff       	call   c0007ad3 <malloc>
c001c31a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c31d:	89 c5                	mov    ebp,eax
c001c31f:	e8 16 05 00 00       	call   c001c83a <ATA::ATA()>
c001c324:	eb 17                	jmp    c001c33d <IDE::detect()+0x22b>
c001c326:	83 ec 0c             	sub    esp,0xc
c001c329:	68 84 01 00 00       	push   0x184
c001c32e:	e8 a0 b7 fe ff       	call   c0007ad3 <malloc>
c001c333:	89 04 24             	mov    DWORD PTR [esp],eax
c001c336:	89 c5                	mov    ebp,eax
c001c338:	e8 6f 0e 00 00       	call   c001d1ac <ATAPI::ATAPI()>
c001c33d:	5a                   	pop    edx
c001c33e:	59                   	pop    ecx
c001c33f:	55                   	push   ebp
c001c340:	53                   	push   ebx
c001c341:	e8 de 03 ff ff       	call   c000c724 <Device::addChild(Device*)>
c001c346:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c349:	53                   	push   ebx
c001c34a:	57                   	push   edi
c001c34b:	6a 00                	push   0x0
c001c34d:	55                   	push   ebp
c001c34e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c351:	83 c4 20             	add    esp,0x20
c001c354:	47                   	inc    edi
c001c355:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c35a:	74 0d                	je     c001c369 <IDE::detect()+0x257>
c001c35c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c364:	e9 da fd ff ff       	jmp    c001c143 <IDE::detect()+0x31>
c001c369:	4e                   	dec    esi
c001c36a:	74 62                	je     c001c3ce <IDE::detect()+0x2bc>
c001c36c:	be 01 00 00 00       	mov    esi,0x1
c001c371:	e9 c5 fd ff ff       	jmp    c001c13b <IDE::detect()+0x29>
c001c376:	50                   	push   eax
c001c377:	6a 04                	push   0x4
c001c379:	56                   	push   esi
c001c37a:	53                   	push   ebx
c001c37b:	e8 f0 f6 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c380:	83 c4 0c             	add    esp,0xc
c001c383:	6a 05                	push   0x5
c001c385:	56                   	push   esi
c001c386:	53                   	push   ebx
c001c387:	89 c5                	mov    ebp,eax
c001c389:	e8 e2 f6 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c38e:	89 e9                	mov    ecx,ebp
c001c390:	83 c4 10             	add    esp,0x10
c001c393:	0f b6 e9             	movzx  ebp,cl
c001c396:	83 fd 14             	cmp    ebp,0x14
c001c399:	74 2d                	je     c001c3c8 <IDE::detect()+0x2b6>
c001c39b:	83 fd 69             	cmp    ebp,0x69
c001c39e:	75 b5                	jne    c001c355 <IDE::detect()+0x243>
c001c3a0:	3c 96                	cmp    al,0x96
c001c3a2:	75 b1                	jne    c001c355 <IDE::detect()+0x243>
c001c3a4:	68 a1 00 00 00       	push   0xa1
c001c3a9:	6a 07                	push   0x7
c001c3ab:	56                   	push   esi
c001c3ac:	53                   	push   ebx
c001c3ad:	e8 fe f5 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3b2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c3b9:	e8 1e 9c ff ff       	call   c0015fdc <milliTenthSleep(unsigned int)>
c001c3be:	83 c4 10             	add    esp,0x10
c001c3c1:	b1 01                	mov    cl,0x1
c001c3c3:	e9 70 fe ff ff       	jmp    c001c238 <IDE::detect()+0x126>
c001c3c8:	3c eb                	cmp    al,0xeb
c001c3ca:	75 cf                	jne    c001c39b <IDE::detect()+0x289>
c001c3cc:	eb d6                	jmp    c001c3a4 <IDE::detect()+0x292>
c001c3ce:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c3d4:	5b                   	pop    ebx
c001c3d5:	5e                   	pop    esi
c001c3d6:	5f                   	pop    edi
c001c3d7:	5d                   	pop    ebp
c001c3d8:	c3                   	ret    
c001c3d9:	90                   	nop

c001c3da <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c3da:	55                   	push   ebp
c001c3db:	57                   	push   edi
c001c3dc:	56                   	push   esi
c001c3dd:	53                   	push   ebx
c001c3de:	83 ec 1c             	sub    esp,0x1c
c001c3e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c3e5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c3e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c3ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c3f5:	88 c3                	mov    bl,al
c001c3f7:	25 ff 00 00 00       	and    eax,0xff
c001c3fc:	0f 84 88 00 00 00    	je     c001c48a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c402:	83 ec 0c             	sub    esp,0xc
c001c405:	89 c7                	mov    edi,eax
c001c407:	68 0b 2e 02 c0       	push   0xc0022e0b
c001c40c:	e8 f9 e4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c411:	83 c4 10             	add    esp,0x10
c001c414:	83 ff 01             	cmp    edi,0x1
c001c417:	74 6b                	je     c001c484 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c419:	83 ff 02             	cmp    edi,0x2
c001c41c:	75 58                	jne    c001c476 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c41e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c423:	50                   	push   eax
c001c424:	6a 01                	push   0x1
c001c426:	01 ff                	add    edi,edi
c001c428:	09 fe                	or     esi,edi
c001c42a:	89 f0                	mov    eax,esi
c001c42c:	0f b6 f0             	movzx  esi,al
c001c42f:	c1 e6 06             	shl    esi,0x6
c001c432:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c43a:	50                   	push   eax
c001c43b:	55                   	push   ebp
c001c43c:	e8 2f f6 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	a8 01                	test   al,0x1
c001c446:	74 02                	je     c001c44a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c448:	b3 07                	mov    bl,0x7
c001c44a:	a8 02                	test   al,0x2
c001c44c:	74 02                	je     c001c450 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c44e:	b3 03                	mov    bl,0x3
c001c450:	a8 04                	test   al,0x4
c001c452:	74 02                	je     c001c456 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c454:	b3 14                	mov    bl,0x14
c001c456:	a8 08                	test   al,0x8
c001c458:	74 02                	je     c001c45c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c45a:	b3 03                	mov    bl,0x3
c001c45c:	a8 10                	test   al,0x10
c001c45e:	74 02                	je     c001c462 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c460:	b3 15                	mov    bl,0x15
c001c462:	a8 20                	test   al,0x20
c001c464:	74 02                	je     c001c468 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c466:	b3 03                	mov    bl,0x3
c001c468:	a8 40                	test   al,0x40
c001c46a:	74 02                	je     c001c46e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c46c:	b3 16                	mov    bl,0x16
c001c46e:	a8 80                	test   al,0x80
c001c470:	74 18                	je     c001c48a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c472:	b3 0d                	mov    bl,0xd
c001c474:	eb 14                	jmp    c001c48a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c476:	83 ff 03             	cmp    edi,0x3
c001c479:	74 0d                	je     c001c488 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c47b:	83 ff 04             	cmp    edi,0x4
c001c47e:	75 0a                	jne    c001c48a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c480:	b3 08                	mov    bl,0x8
c001c482:	eb 06                	jmp    c001c48a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c484:	b3 13                	mov    bl,0x13
c001c486:	eb 02                	jmp    c001c48a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c488:	b3 17                	mov    bl,0x17
c001c48a:	83 c4 1c             	add    esp,0x1c
c001c48d:	88 d8                	mov    al,bl
c001c48f:	5b                   	pop    ebx
c001c490:	5e                   	pop    esi
c001c491:	5f                   	pop    edi
c001c492:	5d                   	pop    ebp
c001c493:	c3                   	ret    

c001c494 <IDE::polling(unsigned char, unsigned int)>:
c001c494:	57                   	push   edi
c001c495:	56                   	push   esi
c001c496:	53                   	push   ebx
c001c497:	bb 04 00 00 00       	mov    ebx,0x4
c001c49c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c4a0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c4a5:	52                   	push   edx
c001c4a6:	6a 0c                	push   0xc
c001c4a8:	56                   	push   esi
c001c4a9:	57                   	push   edi
c001c4aa:	e8 c1 f5 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	4b                   	dec    ebx
c001c4b3:	75 f0                	jne    c001c4a5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c4b5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c4ba:	50                   	push   eax
c001c4bb:	6a 0c                	push   0xc
c001c4bd:	56                   	push   esi
c001c4be:	57                   	push   edi
c001c4bf:	e8 ac f5 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c4c4:	83 c4 10             	add    esp,0x10
c001c4c7:	a8 01                	test   al,0x1
c001c4c9:	75 17                	jne    c001c4e2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c4cb:	a8 20                	test   al,0x20
c001c4cd:	75 0f                	jne    c001c4de <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c4cf:	4b                   	dec    ebx
c001c4d0:	74 10                	je     c001c4e2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c4d2:	a8 80                	test   al,0x80
c001c4d4:	75 e4                	jne    c001c4ba <IDE::polling(unsigned char, unsigned int)+0x26>
c001c4d6:	a8 08                	test   al,0x8
c001c4d8:	74 e0                	je     c001c4ba <IDE::polling(unsigned char, unsigned int)+0x26>
c001c4da:	31 c0                	xor    eax,eax
c001c4dc:	eb 06                	jmp    c001c4e4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c4de:	b0 01                	mov    al,0x1
c001c4e0:	eb 02                	jmp    c001c4e4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c4e2:	b0 02                	mov    al,0x2
c001c4e4:	5b                   	pop    ebx
c001c4e5:	5e                   	pop    esi
c001c4e6:	5f                   	pop    edi
c001c4e7:	c3                   	ret    

c001c4e8 <SATABus::close(int, int, void*)>:
c001c4e8:	31 c0                	xor    eax,eax
c001c4ea:	c3                   	ret    
c001c4eb:	90                   	nop

c001c4ec <SATABus::detect()>:
c001c4ec:	c3                   	ret    
c001c4ed:	90                   	nop

c001c4ee <SATABus::SATABus()>:
c001c4ee:	83 ec 0c             	sub    esp,0xc
c001c4f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f5:	83 ec 08             	sub    esp,0x8
c001c4f8:	68 44 2e 02 c0       	push   0xc0022e44
c001c4fd:	50                   	push   eax
c001c4fe:	e8 65 05 ff ff       	call   c000ca68 <HardDiskController::HardDiskController(char const*)>
c001c503:	83 c4 10             	add    esp,0x10
c001c506:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001c50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50f:	89 10                	mov    DWORD PTR [eax],edx
c001c511:	83 ec 0c             	sub    esp,0xc
c001c514:	6a 50                	push   0x50
c001c516:	e8 96 b9 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c51b:	83 c4 10             	add    esp,0x10
c001c51e:	89 c2                	mov    edx,eax
c001c520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c524:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c52a:	83 ec 0c             	sub    esp,0xc
c001c52d:	6a 50                	push   0x50
c001c52f:	e8 c1 d0 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c534:	83 c4 10             	add    esp,0x10
c001c537:	89 c2                	mov    edx,eax
c001c539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c543:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c548:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c54c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c552:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c556:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c55c:	83 ec 0c             	sub    esp,0xc
c001c55f:	6a 03                	push   0x3
c001c561:	6a 50                	push   0x50
c001c563:	51                   	push   ecx
c001c564:	52                   	push   edx
c001c565:	50                   	push   eax
c001c566:	e8 9d d9 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c56b:	83 c4 20             	add    esp,0x20
c001c56e:	90                   	nop
c001c56f:	83 c4 0c             	add    esp,0xc
c001c572:	c3                   	ret    
c001c573:	90                   	nop

c001c574 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c578:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c57b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c57e:	09 c2                	or     edx,eax
c001c580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c584:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c58a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c58c:	31 c0                	xor    eax,eax
c001c58e:	c1 e9 08             	shr    ecx,0x8
c001c591:	83 e1 0f             	and    ecx,0xf
c001c594:	39 c8                	cmp    eax,ecx
c001c596:	74 0a                	je     c001c5a2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c598:	f6 c2 01             	test   dl,0x1
c001c59b:	74 08                	je     c001c5a5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c59d:	d1 ea                	shr    edx,1
c001c59f:	40                   	inc    eax
c001c5a0:	eb f2                	jmp    c001c594 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c5a2:	83 c8 ff             	or     eax,0xffffffff
c001c5a5:	c3                   	ret    

c001c5a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c5a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c5aa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c5ad:	89 c2                	mov    edx,eax
c001c5af:	c1 ea 08             	shr    edx,0x8
c001c5b2:	83 e2 0f             	and    edx,0xf
c001c5b5:	4a                   	dec    edx
c001c5b6:	75 32                	jne    c001c5ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c5b8:	83 e0 0f             	and    eax,0xf
c001c5bb:	83 f8 03             	cmp    eax,0x3
c001c5be:	75 2a                	jne    c001c5ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c5c0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c5c3:	b8 02 00 00 00       	mov    eax,0x2
c001c5c8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c5ce:	74 1c                	je     c001c5ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c5d0:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c5d6:	b8 04 00 00 00       	mov    eax,0x4
c001c5db:	74 0f                	je     c001c5ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c5dd:	31 c0                	xor    eax,eax
c001c5df:	83 fa 03             	cmp    edx,0x3
c001c5e2:	0f 94 c0             	sete   al
c001c5e5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c5e9:	c3                   	ret    
c001c5ea:	31 c0                	xor    eax,eax
c001c5ec:	c3                   	ret    
c001c5ed:	90                   	nop

c001c5ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c5ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5f2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5f5:	0f ba e2 0f          	bt     edx,0xf
c001c5f9:	72 f7                	jb     c001c5f2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c5fb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5fe:	83 ca 10             	or     edx,0x10
c001c601:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c604:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c607:	83 ca 01             	or     edx,0x1
c001c60a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c60d:	c3                   	ret    

c001c60e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c60e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c612:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c615:	83 e2 fe             	and    edx,0xfffffffe
c001c618:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c61b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c61e:	83 e2 ef             	and    edx,0xffffffef
c001c621:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c624:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c627:	0f ba e2 0e          	bt     edx,0xe
c001c62b:	72 f7                	jb     c001c624 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c62d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c630:	0f ba e2 0f          	bt     edx,0xf
c001c634:	72 ee                	jb     c001c624 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c636:	c3                   	ret    
c001c637:	90                   	nop

c001c638 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c638:	55                   	push   ebp
c001c639:	57                   	push   edi
c001c63a:	56                   	push   esi
c001c63b:	53                   	push   ebx
c001c63c:	83 ec 1c             	sub    esp,0x1c
c001c63f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c643:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c647:	53                   	push   ebx
c001c648:	57                   	push   edi
c001c649:	e8 c0 ff ff ff       	call   c001c60e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c64e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c652:	83 ec 0c             	sub    esp,0xc
c001c655:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c65b:	c1 e5 0a             	shl    ebp,0xa
c001c65e:	01 e8                	add    eax,ebp
c001c660:	89 03                	mov    DWORD PTR [ebx],eax
c001c662:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c664:	68 00 04 00 00       	push   0x400
c001c669:	6a 00                	push   0x0
c001c66b:	50                   	push   eax
c001c66c:	e8 7f 3e fe ff       	call   c00004f0 <memset>
c001c671:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c677:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c67b:	83 c4 1c             	add    esp,0x1c
c001c67e:	01 e8                	add    eax,ebp
c001c680:	89 03                	mov    DWORD PTR [ebx],eax
c001c682:	c1 e6 08             	shl    esi,0x8
c001c685:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c68c:	81 c6 00 80 00 00    	add    esi,0x8000
c001c692:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c698:	01 f0                	add    eax,esi
c001c69a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c69d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c6a0:	68 00 01 00 00       	push   0x100
c001c6a5:	6a 00                	push   0x0
c001c6a7:	50                   	push   eax
c001c6a8:	e8 43 3e fe ff       	call   c00004f0 <memset>
c001c6ad:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c6b3:	31 d2                	xor    edx,edx
c001c6b5:	01 f0                	add    eax,esi
c001c6b7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c6ba:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c6c1:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c6c7:	01 ee                	add    esi,ebp
c001c6c9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c6cd:	83 c4 10             	add    esp,0x10
c001c6d0:	c1 e5 0d             	shl    ebp,0xd
c001c6d3:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c6d9:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c6df:	83 c6 20             	add    esi,0x20
c001c6e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c6e6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c6ec:	01 e8                	add    eax,ebp
c001c6ee:	01 d0                	add    eax,edx
c001c6f0:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c6f3:	52                   	push   edx
c001c6f4:	68 00 01 00 00       	push   0x100
c001c6f9:	6a 00                	push   0x0
c001c6fb:	50                   	push   eax
c001c6fc:	e8 ef 3d fe ff       	call   c00004f0 <memset>
c001c701:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c707:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c70e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c712:	83 c4 10             	add    esp,0x10
c001c715:	01 e8                	add    eax,ebp
c001c717:	01 d0                	add    eax,edx
c001c719:	81 c2 00 01 00 00    	add    edx,0x100
c001c71f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c722:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c728:	75 af                	jne    c001c6d9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c72a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c731:	50                   	push   eax
c001c732:	50                   	push   eax
c001c733:	53                   	push   ebx
c001c734:	57                   	push   edi
c001c735:	e8 b4 fe ff ff       	call   c001c5ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c73a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c741:	83 c4 2c             	add    esp,0x2c
c001c744:	5b                   	pop    ebx
c001c745:	5e                   	pop    esi
c001c746:	5f                   	pop    edi
c001c747:	5d                   	pop    ebp
c001c748:	c3                   	ret    
c001c749:	90                   	nop

c001c74a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c74a:	55                   	push   ebp
c001c74b:	57                   	push   edi
c001c74c:	56                   	push   esi
c001c74d:	53                   	push   ebx
c001c74e:	31 db                	xor    ebx,ebx
c001c750:	83 ec 0c             	sub    esp,0xc
c001c753:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c757:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c75b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c75e:	f7 c7 01 00 00 00    	test   edi,0x1
c001c764:	74 7a                	je     c001c7e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c766:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c76a:	89 d8                	mov    eax,ebx
c001c76c:	c1 e0 07             	shl    eax,0x7
c001c76f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c776:	55                   	push   ebp
c001c777:	56                   	push   esi
c001c778:	e8 29 fe ff ff       	call   c001c5a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c77d:	5a                   	pop    edx
c001c77e:	59                   	pop    ecx
c001c77f:	83 f8 01             	cmp    eax,0x1
c001c782:	75 21                	jne    c001c7a5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c784:	50                   	push   eax
c001c785:	53                   	push   ebx
c001c786:	55                   	push   ebp
c001c787:	56                   	push   esi
c001c788:	e8 ab fe ff ff       	call   c001c638 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c78d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c794:	e8 3a b3 fe ff       	call   c0007ad3 <malloc>
c001c799:	89 04 24             	mov    DWORD PTR [esp],eax
c001c79c:	89 c5                	mov    ebp,eax
c001c79e:	e8 c1 10 00 00       	call   c001d864 <SATA::SATA()>
c001c7a3:	eb 24                	jmp    c001c7c9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c7a5:	83 f8 04             	cmp    eax,0x4
c001c7a8:	75 36                	jne    c001c7e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c7aa:	51                   	push   ecx
c001c7ab:	53                   	push   ebx
c001c7ac:	55                   	push   ebp
c001c7ad:	56                   	push   esi
c001c7ae:	e8 85 fe ff ff       	call   c001c638 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c7b3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c7ba:	e8 14 b3 fe ff       	call   c0007ad3 <malloc>
c001c7bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7c2:	89 c5                	mov    ebp,eax
c001c7c4:	e8 f5 17 00 00       	call   c001dfbe <SATAPI::SATAPI()>
c001c7c9:	58                   	pop    eax
c001c7ca:	5a                   	pop    edx
c001c7cb:	55                   	push   ebp
c001c7cc:	56                   	push   esi
c001c7cd:	e8 52 ff fe ff       	call   c000c724 <Device::addChild(Device*)>
c001c7d2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c7d5:	56                   	push   esi
c001c7d6:	6a 00                	push   0x0
c001c7d8:	53                   	push   ebx
c001c7d9:	55                   	push   ebp
c001c7da:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c7dd:	83 c4 20             	add    esp,0x20
c001c7e0:	d1 ef                	shr    edi,1
c001c7e2:	43                   	inc    ebx
c001c7e3:	83 fb 20             	cmp    ebx,0x20
c001c7e6:	0f 85 72 ff ff ff    	jne    c001c75e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c7ec:	83 c4 0c             	add    esp,0xc
c001c7ef:	5b                   	pop    ebx
c001c7f0:	5e                   	pop    esi
c001c7f1:	5f                   	pop    edi
c001c7f2:	5d                   	pop    ebp
c001c7f3:	c3                   	ret    

c001c7f4 <SATABus::open(int, int, void*)>:
c001c7f4:	83 ec 14             	sub    esp,0x14
c001c7f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7fb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c801:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c807:	52                   	push   edx
c001c808:	50                   	push   eax
c001c809:	e8 3c ff ff ff       	call   c001c74a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c80e:	31 c0                	xor    eax,eax
c001c810:	83 c4 1c             	add    esp,0x1c
c001c813:	c3                   	ret    

c001c814 <ATA::close(int, int, void*)>:
c001c814:	83 ec 0c             	sub    esp,0xc
c001c817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c821:	85 c0                	test   eax,eax
c001c823:	74 0c                	je     c001c831 <ATA::close(int, int, void*)+0x1d>
c001c825:	8b 10                	mov    edx,DWORD PTR [eax]
c001c827:	83 ec 0c             	sub    esp,0xc
c001c82a:	50                   	push   eax
c001c82b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c82e:	83 c4 10             	add    esp,0x10
c001c831:	31 c0                	xor    eax,eax
c001c833:	83 c4 0c             	add    esp,0xc
c001c836:	c3                   	ret    
c001c837:	90                   	nop

c001c838 <ATA::powerSaving(PowerSavingLevel)>:
c001c838:	c3                   	ret    
c001c839:	90                   	nop

c001c83a <ATA::ATA()>:
c001c83a:	83 ec 0c             	sub    esp,0xc
c001c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c841:	83 ec 04             	sub    esp,0x4
c001c844:	68 00 02 00 00       	push   0x200
c001c849:	68 3d 2f 02 c0       	push   0xc0022f3d
c001c84e:	50                   	push   eax
c001c84f:	e8 9e 02 ff ff       	call   c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c854:	83 c4 10             	add    esp,0x10
c001c857:	ba b0 2e 02 c0       	mov    edx,0xc0022eb0
c001c85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c860:	89 10                	mov    DWORD PTR [eax],edx
c001c862:	90                   	nop
c001c863:	83 c4 0c             	add    esp,0xc
c001c866:	c3                   	ret    
c001c867:	90                   	nop

c001c868 <ATA::flush(bool)>:
c001c868:	53                   	push   ebx
c001c869:	83 ec 08             	sub    esp,0x8
c001c86c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c871:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c875:	83 f8 01             	cmp    eax,0x1
c001c878:	19 c0                	sbb    eax,eax
c001c87a:	83 e0 fd             	and    eax,0xfffffffd
c001c87d:	05 ea 00 00 00       	add    eax,0xea
c001c882:	50                   	push   eax
c001c883:	6a 07                	push   0x7
c001c885:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c88c:	50                   	push   eax
c001c88d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c893:	e8 18 f1 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c898:	83 c4 0c             	add    esp,0xc
c001c89b:	6a 00                	push   0x0
c001c89d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8a4:	50                   	push   eax
c001c8a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ab:	e8 e4 fb ff ff       	call   c001c494 <IDE::polling(unsigned char, unsigned int)>
c001c8b0:	83 c4 18             	add    esp,0x18
c001c8b3:	5b                   	pop    ebx
c001c8b4:	c3                   	ret    
c001c8b5:	90                   	nop

c001c8b6 <ATA::readyForCommand()>:
c001c8b6:	56                   	push   esi
c001c8b7:	53                   	push   ebx
c001c8b8:	53                   	push   ebx
c001c8b9:	31 db                	xor    ebx,ebx
c001c8bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8bf:	51                   	push   ecx
c001c8c0:	6a 0c                	push   0xc
c001c8c2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c8c9:	50                   	push   eax
c001c8ca:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c8d0:	e8 9b f1 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001c8d5:	83 c4 10             	add    esp,0x10
c001c8d8:	a8 88                	test   al,0x88
c001c8da:	74 1f                	je     c001c8fb <ATA::readyForCommand()+0x45>
c001c8dc:	43                   	inc    ebx
c001c8dd:	83 fb 63             	cmp    ebx,0x63
c001c8e0:	7e dd                	jle    c001c8bf <ATA::readyForCommand()+0x9>
c001c8e2:	83 ec 0c             	sub    esp,0xc
c001c8e5:	6a 0a                	push   0xa
c001c8e7:	e8 f0 96 ff ff       	call   c0015fdc <milliTenthSleep(unsigned int)>
c001c8ec:	83 c4 10             	add    esp,0x10
c001c8ef:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c8f5:	75 c8                	jne    c001c8bf <ATA::readyForCommand()+0x9>
c001c8f7:	31 c0                	xor    eax,eax
c001c8f9:	eb 02                	jmp    c001c8fd <ATA::readyForCommand()+0x47>
c001c8fb:	b0 01                	mov    al,0x1
c001c8fd:	5a                   	pop    edx
c001c8fe:	5b                   	pop    ebx
c001c8ff:	5e                   	pop    esi
c001c900:	c3                   	ret    
c001c901:	90                   	nop

c001c902 <ATA::access(unsigned long long, int, void*, bool)>:
c001c902:	55                   	push   ebp
c001c903:	57                   	push   edi
c001c904:	56                   	push   esi
c001c905:	53                   	push   ebx
c001c906:	83 ec 2c             	sub    esp,0x2c
c001c909:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c90d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c911:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c915:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c919:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c91d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c921:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c925:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c92b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c92f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c935:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c939:	c1 e0 06             	shl    eax,0x6
c001c93c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c944:	74 5b                	je     c001c9a1 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c946:	89 fa                	mov    edx,edi
c001c948:	89 f0                	mov    eax,esi
c001c94a:	c1 ea 1c             	shr    edx,0x1c
c001c94d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c951:	89 d1                	mov    ecx,edx
c001c953:	09 c1                	or     ecx,eax
c001c955:	74 25                	je     c001c97c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c957:	31 ed                	xor    ebp,ebp
c001c959:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c960:	89 fa                	mov    edx,edi
c001c962:	89 f0                	mov    eax,esi
c001c964:	0f ad d0             	shrd   eax,edx,cl
c001c967:	d3 ea                	shr    edx,cl
c001c969:	f6 c1 20             	test   cl,0x20
c001c96c:	74 02                	je     c001c970 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c96e:	89 d0                	mov    eax,edx
c001c970:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c974:	45                   	inc    ebp
c001c975:	83 fd 06             	cmp    ebp,0x6
c001c978:	75 df                	jne    c001c959 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c97a:	eb 71                	jmp    c001c9ed <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c97c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c981:	89 f0                	mov    eax,esi
c001c983:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c98a:	0f ac f8 10          	shrd   eax,edi,0x10
c001c98e:	bf 01 00 00 00       	mov    edi,0x1
c001c993:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c997:	c1 ee 18             	shr    esi,0x18
c001c99a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c99f:	eb 53                	jmp    c001c9f4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c9a1:	6a 00                	push   0x0
c001c9a3:	6a 3f                	push   0x3f
c001c9a5:	57                   	push   edi
c001c9a6:	56                   	push   esi
c001c9a7:	e8 d4 2a 00 00       	call   c001f480 <__umoddi3>
c001c9ac:	83 c4 10             	add    esp,0x10
c001c9af:	40                   	inc    eax
c001c9b0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c9b4:	6a 00                	push   0x0
c001c9b6:	68 f0 03 00 00       	push   0x3f0
c001c9bb:	57                   	push   edi
c001c9bc:	56                   	push   esi
c001c9bd:	e8 be 29 00 00       	call   c001f380 <__udivdi3>
c001c9c2:	83 c4 10             	add    esp,0x10
c001c9c5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c9ca:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9d1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9d6:	6a 00                	push   0x0
c001c9d8:	6a 3f                	push   0x3f
c001c9da:	57                   	push   edi
c001c9db:	31 ff                	xor    edi,edi
c001c9dd:	56                   	push   esi
c001c9de:	e8 9d 29 00 00       	call   c001f380 <__udivdi3>
c001c9e3:	83 c4 10             	add    esp,0x10
c001c9e6:	83 e0 0f             	and    eax,0xf
c001c9e9:	89 c6                	mov    esi,eax
c001c9eb:	eb 07                	jmp    c001c9f4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c9ed:	31 f6                	xor    esi,esi
c001c9ef:	bf 02 00 00 00       	mov    edi,0x2
c001c9f4:	50                   	push   eax
c001c9f5:	6a 00                	push   0x0
c001c9f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9fe:	50                   	push   eax
c001c9ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca03:	e8 b6 f1 ff ff       	call   c001bbbe <IDE::enableIRQs(unsigned char, bool)>
c001ca08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca0b:	e8 a6 fe ff ff       	call   c001c8b6 <ATA::readyForCommand()>
c001ca10:	83 c4 10             	add    esp,0x10
c001ca13:	84 c0                	test   al,al
c001ca15:	75 0a                	jne    c001ca21 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001ca17:	be 01 00 00 00       	mov    esi,0x1
c001ca1c:	e9 9b 02 00 00       	jmp    c001ccbc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ca21:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ca27:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ca2d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ca34:	c1 e0 04             	shl    eax,0x4
c001ca37:	09 c6                	or     esi,eax
c001ca39:	f7 c7 03 00 00 00    	test   edi,0x3
c001ca3f:	75 05                	jne    c001ca46 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001ca41:	83 ce a0             	or     esi,0xffffffa0
c001ca44:	eb 03                	jmp    c001ca49 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ca46:	83 ce e0             	or     esi,0xffffffe0
c001ca49:	89 f0                	mov    eax,esi
c001ca4b:	0f b6 f0             	movzx  esi,al
c001ca4e:	56                   	push   esi
c001ca4f:	6a 06                	push   0x6
c001ca51:	51                   	push   ecx
c001ca52:	52                   	push   edx
c001ca53:	e8 58 ef ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca58:	83 c4 10             	add    esp,0x10
c001ca5b:	6a 00                	push   0x0
c001ca5d:	6a 01                	push   0x1
c001ca5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca66:	50                   	push   eax
c001ca67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca6d:	e8 3e ef ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca72:	89 f8                	mov    eax,edi
c001ca74:	83 c4 10             	add    esp,0x10
c001ca77:	0f b6 f0             	movzx  esi,al
c001ca7a:	83 fe 02             	cmp    esi,0x2
c001ca7d:	75 6e                	jne    c001caed <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca7f:	6a 00                	push   0x0
c001ca81:	6a 08                	push   0x8
c001ca83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca8a:	50                   	push   eax
c001ca8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca91:	e8 1a ef ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca96:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca9b:	50                   	push   eax
c001ca9c:	6a 09                	push   0x9
c001ca9e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caa5:	50                   	push   eax
c001caa6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caac:	e8 ff ee ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cab1:	83 c4 20             	add    esp,0x20
c001cab4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cab9:	50                   	push   eax
c001caba:	6a 0a                	push   0xa
c001cabc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cac3:	50                   	push   eax
c001cac4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caca:	e8 e1 ee ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cacf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cad4:	50                   	push   eax
c001cad5:	6a 0b                	push   0xb
c001cad7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cade:	50                   	push   eax
c001cadf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cae5:	e8 c6 ee ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caea:	83 c4 20             	add    esp,0x20
c001caed:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001caf2:	50                   	push   eax
c001caf3:	6a 02                	push   0x2
c001caf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cafc:	50                   	push   eax
c001cafd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb03:	e8 a8 ee ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb08:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cb0d:	50                   	push   eax
c001cb0e:	6a 03                	push   0x3
c001cb10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb17:	50                   	push   eax
c001cb18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb1e:	e8 8d ee ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb23:	83 c4 20             	add    esp,0x20
c001cb26:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cb2b:	50                   	push   eax
c001cb2c:	6a 04                	push   0x4
c001cb2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb35:	50                   	push   eax
c001cb36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb3c:	e8 6f ee ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb46:	50                   	push   eax
c001cb47:	6a 05                	push   0x5
c001cb49:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb50:	50                   	push   eax
c001cb51:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb57:	e8 54 ee ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb5c:	83 c4 20             	add    esp,0x20
c001cb5f:	83 fe 02             	cmp    esi,0x2
c001cb62:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cb67:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cb6c:	85 c9                	test   ecx,ecx
c001cb6e:	74 07                	je     c001cb77 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cb70:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb75:	75 47                	jne    c001cbbe <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cb77:	89 f8                	mov    eax,edi
c001cb79:	0f b6 f8             	movzx  edi,al
c001cb7c:	31 c0                	xor    eax,eax
c001cb7e:	83 ff 02             	cmp    edi,0x2
c001cb81:	0f 95 c0             	setne  al
c001cb84:	89 c6                	mov    esi,eax
c001cb86:	74 0c                	je     c001cb94 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cb88:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb8d:	b8 30 00 00 00       	mov    eax,0x30
c001cb92:	75 2f                	jne    c001cbc3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cb94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb98:	83 f2 01             	xor    edx,0x1
c001cb9b:	85 c9                	test   ecx,ecx
c001cb9d:	74 09                	je     c001cba8 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cb9f:	84 d2                	test   dl,dl
c001cba1:	b8 24 00 00 00       	mov    eax,0x24
c001cba6:	75 1b                	jne    c001cbc3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cba8:	85 f6                	test   esi,esi
c001cbaa:	0f 84 67 fe ff ff    	je     c001ca17 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cbb0:	84 d2                	test   dl,dl
c001cbb2:	b8 20 00 00 00       	mov    eax,0x20
c001cbb7:	75 0a                	jne    c001cbc3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cbb9:	e9 59 fe ff ff       	jmp    c001ca17 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cbbe:	b8 34 00 00 00       	mov    eax,0x34
c001cbc3:	50                   	push   eax
c001cbc4:	6a 07                	push   0x7
c001cbc6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbcd:	50                   	push   eax
c001cbce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbd4:	e8 d7 ed ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbd9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cbdd:	83 c4 10             	add    esp,0x10
c001cbe0:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cbe5:	85 f6                	test   esi,esi
c001cbe7:	0f 84 b5 00 00 00    	je     c001cca2 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cbed:	50                   	push   eax
c001cbee:	6a 01                	push   0x1
c001cbf0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbf7:	50                   	push   eax
c001cbf8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbfe:	e8 91 f8 ff ff       	call   c001c494 <IDE::polling(unsigned char, unsigned int)>
c001cc03:	83 c4 10             	add    esp,0x10
c001cc06:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cc0c:	0f b6 c0             	movzx  eax,al
c001cc0f:	85 c0                	test   eax,eax
c001cc11:	74 1f                	je     c001cc32 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cc13:	50                   	push   eax
c001cc14:	89 c6                	mov    esi,eax
c001cc16:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cc1d:	0f b6 d2             	movzx  edx,dl
c001cc20:	50                   	push   eax
c001cc21:	52                   	push   edx
c001cc22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc28:	e8 ad f7 ff ff       	call   c001c3da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cc2d:	e9 87 00 00 00       	jmp    c001ccb9 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cc32:	85 ed                	test   ebp,ebp
c001cc34:	74 3b                	je     c001cc71 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cc36:	31 ff                	xor    edi,edi
c001cc38:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cc3c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cc40:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cc45:	50                   	push   eax
c001cc46:	50                   	push   eax
c001cc47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc4e:	50                   	push   eax
c001cc4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc55:	e8 44 ed ff ff       	call   c001b99e <IDE::getBase(unsigned char)>
c001cc5a:	89 c2                	mov    edx,eax
c001cc5c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cc61:	66 ef                	out    dx,ax
c001cc63:	47                   	inc    edi
c001cc64:	83 c4 10             	add    esp,0x10
c001cc67:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cc6d:	75 c9                	jne    c001cc38 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cc6f:	eb 23                	jmp    c001cc94 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cc71:	51                   	push   ecx
c001cc72:	0f b6 d2             	movzx  edx,dl
c001cc75:	51                   	push   ecx
c001cc76:	52                   	push   edx
c001cc77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc7d:	e8 1c ed ff ff       	call   c001b99e <IDE::getBase(unsigned char)>
c001cc82:	b9 00 01 00 00       	mov    ecx,0x100
c001cc87:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cc8b:	89 c2                	mov    edx,eax
c001cc8d:	fc                   	cld    
c001cc8e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cc91:	83 c4 10             	add    esp,0x10
c001cc94:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cc9c:	4e                   	dec    esi
c001cc9d:	e9 43 ff ff ff       	jmp    c001cbe5 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cca2:	31 f6                	xor    esi,esi
c001cca4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cca9:	74 11                	je     c001ccbc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001ccab:	50                   	push   eax
c001ccac:	50                   	push   eax
c001ccad:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001ccb2:	50                   	push   eax
c001ccb3:	53                   	push   ebx
c001ccb4:	e8 af fb ff ff       	call   c001c868 <ATA::flush(bool)>
c001ccb9:	83 c4 10             	add    esp,0x10
c001ccbc:	83 c4 2c             	add    esp,0x2c
c001ccbf:	89 f0                	mov    eax,esi
c001ccc1:	5b                   	pop    ebx
c001ccc2:	5e                   	pop    esi
c001ccc3:	5f                   	pop    edi
c001ccc4:	5d                   	pop    ebp
c001ccc5:	c3                   	ret    

c001ccc6 <ATA::detectCHS()>:
c001ccc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccca:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ccd0:	c1 e0 06             	shl    eax,0x6
c001ccd3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ccd9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cce3:	c7 44 24 04 94 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022e94
c001cceb:	e9 d1 45 ff ff       	jmp    c00112c1 <KePanic(char const*)>

c001ccf0 <ATA::open(int, int, void*)>:
c001ccf0:	53                   	push   ebx
c001ccf1:	83 ec 08             	sub    esp,0x8
c001ccf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccfc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd00:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd06:	c1 e0 06             	shl    eax,0x6
c001cd09:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd0f:	01 d0                	add    eax,edx
c001cd11:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd18:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cd1e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cd25:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd2f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cd36:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd3c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd43:	75 0c                	jne    c001cd51 <ATA::open(int, int, void*)+0x61>
c001cd45:	83 ec 0c             	sub    esp,0xc
c001cd48:	53                   	push   ebx
c001cd49:	e8 78 ff ff ff       	call   c001ccc6 <ATA::detectCHS()>
c001cd4e:	83 c4 10             	add    esp,0x10
c001cd51:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd57:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd5d:	c1 e0 06             	shl    eax,0x6
c001cd60:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd67:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd71:	d1 e8                	shr    eax,1
c001cd73:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cd79:	6a 04                	push   0x4
c001cd7b:	6a 0c                	push   0xc
c001cd7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd84:	50                   	push   eax
c001cd85:	52                   	push   edx
c001cd86:	e8 25 ec ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd8b:	90                   	nop
c001cd8c:	90                   	nop
c001cd8d:	6a 00                	push   0x0
c001cd8f:	6a 0c                	push   0xc
c001cd91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd98:	50                   	push   eax
c001cd99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd9f:	e8 0c ec ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cda4:	83 c4 14             	add    esp,0x14
c001cda7:	53                   	push   ebx
c001cda8:	e8 ad fd fe ff       	call   c000cb5a <PhysicalDisk::startCache()>
c001cdad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdb0:	e8 f1 0f ff ff       	call   c000dda6 <createPartitionsForDisk(PhysicalDisk*)>
c001cdb5:	83 c4 18             	add    esp,0x18
c001cdb8:	31 c0                	xor    eax,eax
c001cdba:	5b                   	pop    ebx
c001cdbb:	c3                   	ret    

c001cdbc <combineCharAndColour(char, unsigned char)>:
c001cdbc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cdc1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cdc7:	c1 e0 08             	shl    eax,0x8
c001cdca:	09 d0                	or     eax,edx
c001cdcc:	c3                   	ret    

c001cdcd <combineColours(unsigned char, unsigned char)>:
c001cdcd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cdd2:	c1 e0 04             	shl    eax,0x4
c001cdd5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cdd9:	c3                   	ret    

c001cdda <ATA::read(unsigned long long, int, void*)>:
c001cdda:	55                   	push   ebp
c001cddb:	57                   	push   edi
c001cddc:	56                   	push   esi
c001cddd:	be 04 00 00 00       	mov    esi,0x4
c001cde2:	53                   	push   ebx
c001cde3:	83 ec 0c             	sub    esp,0xc
c001cde6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdf2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdf6:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdf9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdff:	0f 87 a1 01 00 00    	ja     c001cfa6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ce05:	85 c9                	test   ecx,ecx
c001ce07:	be 06 00 00 00       	mov    esi,0x6
c001ce0c:	0f 84 94 01 00 00    	je     c001cfa6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ce12:	55                   	push   ebp
c001ce13:	55                   	push   ebp
c001ce14:	6a 00                	push   0x0
c001ce16:	51                   	push   ecx
c001ce17:	53                   	push   ebx
c001ce18:	52                   	push   edx
c001ce19:	50                   	push   eax
c001ce1a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce1e:	e8 df fa ff ff       	call   c001c902 <ATA::access(unsigned long long, int, void*, bool)>
c001ce23:	83 c4 20             	add    esp,0x20
c001ce26:	85 c0                	test   eax,eax
c001ce28:	89 c6                	mov    esi,eax
c001ce2a:	0f 85 71 01 00 00    	jne    c001cfa1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001ce30:	50                   	push   eax
c001ce31:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce36:	50                   	push   eax
c001ce37:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001ce3d:	6a 0f                	push   0xf
c001ce3f:	6a 00                	push   0x0
c001ce41:	89 da                	mov    edx,ebx
c001ce43:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001ce49:	e8 7f ff ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001ce4e:	59                   	pop    ecx
c001ce4f:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce54:	5b                   	pop    ebx
c001ce55:	0f b6 d8             	movzx  ebx,al
c001ce58:	89 d0                	mov    eax,edx
c001ce5a:	53                   	push   ebx
c001ce5b:	99                   	cdq    
c001ce5c:	f7 fd                	idiv   ebp
c001ce5e:	99                   	cdq    
c001ce5f:	f7 f9                	idiv   ecx
c001ce61:	83 c2 30             	add    edx,0x30
c001ce64:	0f b6 d2             	movzx  edx,dl
c001ce67:	52                   	push   edx
c001ce68:	e8 4f ff ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001ce6d:	5f                   	pop    edi
c001ce6e:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce73:	5a                   	pop    edx
c001ce74:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce7a:	53                   	push   ebx
c001ce7b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce80:	99                   	cdq    
c001ce81:	f7 ff                	idiv   edi
c001ce83:	99                   	cdq    
c001ce84:	f7 f9                	idiv   ecx
c001ce86:	8d 42 30             	lea    eax,[edx+0x30]
c001ce89:	0f b6 c0             	movzx  eax,al
c001ce8c:	50                   	push   eax
c001ce8d:	e8 2a ff ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001ce92:	5f                   	pop    edi
c001ce93:	bf 64 00 00 00       	mov    edi,0x64
c001ce98:	5a                   	pop    edx
c001ce99:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce9f:	53                   	push   ebx
c001cea0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cea5:	99                   	cdq    
c001cea6:	f7 ff                	idiv   edi
c001cea8:	99                   	cdq    
c001cea9:	f7 f9                	idiv   ecx
c001ceab:	8d 42 30             	lea    eax,[edx+0x30]
c001ceae:	0f b6 c0             	movzx  eax,al
c001ceb1:	50                   	push   eax
c001ceb2:	e8 05 ff ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001ceb7:	5a                   	pop    edx
c001ceb8:	5a                   	pop    edx
c001ceb9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cebf:	53                   	push   ebx
c001cec0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cec5:	99                   	cdq    
c001cec6:	f7 f9                	idiv   ecx
c001cec8:	99                   	cdq    
c001cec9:	f7 f9                	idiv   ecx
c001cecb:	8d 42 30             	lea    eax,[edx+0x30]
c001cece:	0f b6 c0             	movzx  eax,al
c001ced1:	50                   	push   eax
c001ced2:	e8 e5 fe ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001ced7:	5a                   	pop    edx
c001ced8:	5a                   	pop    edx
c001ced9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cedf:	53                   	push   ebx
c001cee0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cee5:	99                   	cdq    
c001cee6:	f7 f9                	idiv   ecx
c001cee8:	83 c2 30             	add    edx,0x30
c001ceeb:	0f b6 d2             	movzx  edx,dl
c001ceee:	52                   	push   edx
c001ceef:	e8 c8 fe ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001cef4:	5a                   	pop    edx
c001cef5:	5a                   	pop    edx
c001cef6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cefc:	53                   	push   ebx
c001cefd:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf02:	99                   	cdq    
c001cf03:	f7 fd                	idiv   ebp
c001cf05:	99                   	cdq    
c001cf06:	f7 f9                	idiv   ecx
c001cf08:	8d 42 30             	lea    eax,[edx+0x30]
c001cf0b:	0f b6 c0             	movzx  eax,al
c001cf0e:	50                   	push   eax
c001cf0f:	e8 a8 fe ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001cf14:	5d                   	pop    ebp
c001cf15:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cf1a:	5a                   	pop    edx
c001cf1b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf21:	53                   	push   ebx
c001cf22:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf27:	99                   	cdq    
c001cf28:	f7 fd                	idiv   ebp
c001cf2a:	99                   	cdq    
c001cf2b:	f7 f9                	idiv   ecx
c001cf2d:	8d 42 30             	lea    eax,[edx+0x30]
c001cf30:	0f b6 c0             	movzx  eax,al
c001cf33:	50                   	push   eax
c001cf34:	e8 83 fe ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001cf39:	5d                   	pop    ebp
c001cf3a:	5a                   	pop    edx
c001cf3b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf41:	53                   	push   ebx
c001cf42:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf47:	99                   	cdq    
c001cf48:	f7 ff                	idiv   edi
c001cf4a:	99                   	cdq    
c001cf4b:	f7 f9                	idiv   ecx
c001cf4d:	8d 42 30             	lea    eax,[edx+0x30]
c001cf50:	0f b6 c0             	movzx  eax,al
c001cf53:	50                   	push   eax
c001cf54:	e8 63 fe ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001cf59:	5f                   	pop    edi
c001cf5a:	5d                   	pop    ebp
c001cf5b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf61:	53                   	push   ebx
c001cf62:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf67:	99                   	cdq    
c001cf68:	f7 f9                	idiv   ecx
c001cf6a:	99                   	cdq    
c001cf6b:	f7 f9                	idiv   ecx
c001cf6d:	8d 42 30             	lea    eax,[edx+0x30]
c001cf70:	0f b6 c0             	movzx  eax,al
c001cf73:	50                   	push   eax
c001cf74:	e8 43 fe ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001cf79:	5a                   	pop    edx
c001cf7a:	5f                   	pop    edi
c001cf7b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf81:	53                   	push   ebx
c001cf82:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf87:	99                   	cdq    
c001cf88:	f7 f9                	idiv   ecx
c001cf8a:	83 c2 30             	add    edx,0x30
c001cf8d:	0f b6 d2             	movzx  edx,dl
c001cf90:	52                   	push   edx
c001cf91:	e8 26 fe ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001cf96:	83 c4 10             	add    esp,0x10
c001cf99:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf9f:	eb 05                	jmp    c001cfa6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cfa1:	be 01 00 00 00       	mov    esi,0x1
c001cfa6:	83 c4 0c             	add    esp,0xc
c001cfa9:	89 f0                	mov    eax,esi
c001cfab:	5b                   	pop    ebx
c001cfac:	5e                   	pop    esi
c001cfad:	5f                   	pop    edi
c001cfae:	5d                   	pop    ebp
c001cfaf:	c3                   	ret    

c001cfb0 <ATA::write(unsigned long long, int, void*)>:
c001cfb0:	55                   	push   ebp
c001cfb1:	57                   	push   edi
c001cfb2:	56                   	push   esi
c001cfb3:	be 04 00 00 00       	mov    esi,0x4
c001cfb8:	53                   	push   ebx
c001cfb9:	83 ec 0c             	sub    esp,0xc
c001cfbc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cfc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfc4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfc8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfcc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cfcf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cfd5:	0f 87 9c 01 00 00    	ja     c001d177 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cfdb:	85 c9                	test   ecx,ecx
c001cfdd:	be 06 00 00 00       	mov    esi,0x6
c001cfe2:	0f 84 8f 01 00 00    	je     c001d177 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cfe8:	55                   	push   ebp
c001cfe9:	55                   	push   ebp
c001cfea:	6a 01                	push   0x1
c001cfec:	51                   	push   ecx
c001cfed:	53                   	push   ebx
c001cfee:	52                   	push   edx
c001cfef:	50                   	push   eax
c001cff0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cff4:	e8 09 f9 ff ff       	call   c001c902 <ATA::access(unsigned long long, int, void*, bool)>
c001cff9:	83 c4 20             	add    esp,0x20
c001cffc:	85 c0                	test   eax,eax
c001cffe:	89 c6                	mov    esi,eax
c001d000:	0f 85 6c 01 00 00    	jne    c001d172 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d006:	50                   	push   eax
c001d007:	bd 10 27 00 00       	mov    ebp,0x2710
c001d00c:	50                   	push   eax
c001d00d:	6a 0f                	push   0xf
c001d00f:	6a 00                	push   0x0
c001d011:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001d017:	e8 b1 fd ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001d01c:	5a                   	pop    edx
c001d01d:	59                   	pop    ecx
c001d01e:	b9 0a 00 00 00       	mov    ecx,0xa
c001d023:	0f b6 d8             	movzx  ebx,al
c001d026:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d02b:	53                   	push   ebx
c001d02c:	99                   	cdq    
c001d02d:	f7 fd                	idiv   ebp
c001d02f:	99                   	cdq    
c001d030:	f7 f9                	idiv   ecx
c001d032:	8d 42 30             	lea    eax,[edx+0x30]
c001d035:	0f b6 c0             	movzx  eax,al
c001d038:	50                   	push   eax
c001d039:	e8 7e fd ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d03e:	5f                   	pop    edi
c001d03f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d044:	5a                   	pop    edx
c001d045:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d04b:	53                   	push   ebx
c001d04c:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d051:	99                   	cdq    
c001d052:	f7 ff                	idiv   edi
c001d054:	99                   	cdq    
c001d055:	f7 f9                	idiv   ecx
c001d057:	8d 42 30             	lea    eax,[edx+0x30]
c001d05a:	0f b6 c0             	movzx  eax,al
c001d05d:	50                   	push   eax
c001d05e:	e8 59 fd ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d063:	5f                   	pop    edi
c001d064:	bf 64 00 00 00       	mov    edi,0x64
c001d069:	5a                   	pop    edx
c001d06a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d070:	53                   	push   ebx
c001d071:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d076:	99                   	cdq    
c001d077:	f7 ff                	idiv   edi
c001d079:	99                   	cdq    
c001d07a:	f7 f9                	idiv   ecx
c001d07c:	8d 42 30             	lea    eax,[edx+0x30]
c001d07f:	0f b6 c0             	movzx  eax,al
c001d082:	50                   	push   eax
c001d083:	e8 34 fd ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d088:	5a                   	pop    edx
c001d089:	5a                   	pop    edx
c001d08a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d090:	53                   	push   ebx
c001d091:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d096:	99                   	cdq    
c001d097:	f7 f9                	idiv   ecx
c001d099:	99                   	cdq    
c001d09a:	f7 f9                	idiv   ecx
c001d09c:	8d 42 30             	lea    eax,[edx+0x30]
c001d09f:	0f b6 c0             	movzx  eax,al
c001d0a2:	50                   	push   eax
c001d0a3:	e8 14 fd ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d0a8:	5a                   	pop    edx
c001d0a9:	5a                   	pop    edx
c001d0aa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d0b0:	53                   	push   ebx
c001d0b1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d0b6:	99                   	cdq    
c001d0b7:	f7 f9                	idiv   ecx
c001d0b9:	83 c2 30             	add    edx,0x30
c001d0bc:	0f b6 d2             	movzx  edx,dl
c001d0bf:	52                   	push   edx
c001d0c0:	e8 f7 fc ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d0c5:	5a                   	pop    edx
c001d0c6:	5a                   	pop    edx
c001d0c7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d0cd:	53                   	push   ebx
c001d0ce:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0d3:	99                   	cdq    
c001d0d4:	f7 fd                	idiv   ebp
c001d0d6:	99                   	cdq    
c001d0d7:	f7 f9                	idiv   ecx
c001d0d9:	8d 42 30             	lea    eax,[edx+0x30]
c001d0dc:	0f b6 c0             	movzx  eax,al
c001d0df:	50                   	push   eax
c001d0e0:	e8 d7 fc ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d0e5:	5d                   	pop    ebp
c001d0e6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d0eb:	5a                   	pop    edx
c001d0ec:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d0f2:	53                   	push   ebx
c001d0f3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0f8:	99                   	cdq    
c001d0f9:	f7 fd                	idiv   ebp
c001d0fb:	99                   	cdq    
c001d0fc:	f7 f9                	idiv   ecx
c001d0fe:	8d 42 30             	lea    eax,[edx+0x30]
c001d101:	0f b6 c0             	movzx  eax,al
c001d104:	50                   	push   eax
c001d105:	e8 b2 fc ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d10a:	5d                   	pop    ebp
c001d10b:	5a                   	pop    edx
c001d10c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d112:	53                   	push   ebx
c001d113:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d118:	99                   	cdq    
c001d119:	f7 ff                	idiv   edi
c001d11b:	99                   	cdq    
c001d11c:	f7 f9                	idiv   ecx
c001d11e:	8d 42 30             	lea    eax,[edx+0x30]
c001d121:	0f b6 c0             	movzx  eax,al
c001d124:	50                   	push   eax
c001d125:	e8 92 fc ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d12a:	5f                   	pop    edi
c001d12b:	5d                   	pop    ebp
c001d12c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d132:	53                   	push   ebx
c001d133:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d138:	99                   	cdq    
c001d139:	f7 f9                	idiv   ecx
c001d13b:	99                   	cdq    
c001d13c:	f7 f9                	idiv   ecx
c001d13e:	8d 42 30             	lea    eax,[edx+0x30]
c001d141:	0f b6 c0             	movzx  eax,al
c001d144:	50                   	push   eax
c001d145:	e8 72 fc ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d14a:	5a                   	pop    edx
c001d14b:	5f                   	pop    edi
c001d14c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d152:	53                   	push   ebx
c001d153:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d158:	99                   	cdq    
c001d159:	f7 f9                	idiv   ecx
c001d15b:	83 c2 30             	add    edx,0x30
c001d15e:	0f b6 d2             	movzx  edx,dl
c001d161:	52                   	push   edx
c001d162:	e8 55 fc ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001d167:	83 c4 10             	add    esp,0x10
c001d16a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d170:	eb 05                	jmp    c001d177 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d172:	be 01 00 00 00       	mov    esi,0x1
c001d177:	83 c4 0c             	add    esp,0xc
c001d17a:	89 f0                	mov    eax,esi
c001d17c:	5b                   	pop    ebx
c001d17d:	5e                   	pop    esi
c001d17e:	5f                   	pop    edi
c001d17f:	5d                   	pop    ebp
c001d180:	c3                   	ret    
c001d181:	90                   	nop

c001d182 <ATAPI::write(unsigned long long, int, void*)>:
c001d182:	b8 03 00 00 00       	mov    eax,0x3
c001d187:	c3                   	ret    

c001d188 <ATAPI::close(int, int, void*)>:
c001d188:	83 ec 0c             	sub    esp,0xc
c001d18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d195:	85 c0                	test   eax,eax
c001d197:	74 0c                	je     c001d1a5 <ATAPI::close(int, int, void*)+0x1d>
c001d199:	8b 10                	mov    edx,DWORD PTR [eax]
c001d19b:	83 ec 0c             	sub    esp,0xc
c001d19e:	50                   	push   eax
c001d19f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d1a2:	83 c4 10             	add    esp,0x10
c001d1a5:	31 c0                	xor    eax,eax
c001d1a7:	83 c4 0c             	add    esp,0xc
c001d1aa:	c3                   	ret    
c001d1ab:	90                   	nop

c001d1ac <ATAPI::ATAPI()>:
c001d1ac:	83 ec 0c             	sub    esp,0xc
c001d1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b3:	83 ec 04             	sub    esp,0x4
c001d1b6:	68 00 08 00 00       	push   0x800
c001d1bb:	68 dd 2f 02 c0       	push   0xc0022fdd
c001d1c0:	50                   	push   eax
c001d1c1:	e8 2c f9 fe ff       	call   c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d1c6:	83 c4 10             	add    esp,0x10
c001d1c9:	ba f8 2e 02 c0       	mov    edx,0xc0022ef8
c001d1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d2:	89 10                	mov    DWORD PTR [eax],edx
c001d1d4:	90                   	nop
c001d1d5:	83 c4 0c             	add    esp,0xc
c001d1d8:	c3                   	ret    
c001d1d9:	90                   	nop

c001d1da <ATAPI::readyForCommand()>:
c001d1da:	56                   	push   esi
c001d1db:	53                   	push   ebx
c001d1dc:	53                   	push   ebx
c001d1dd:	31 db                	xor    ebx,ebx
c001d1df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1e3:	51                   	push   ecx
c001d1e4:	6a 0c                	push   0xc
c001d1e6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d1ed:	50                   	push   eax
c001d1ee:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d1f4:	e8 77 e8 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001d1f9:	83 c4 10             	add    esp,0x10
c001d1fc:	a8 88                	test   al,0x88
c001d1fe:	74 25                	je     c001d225 <ATAPI::readyForCommand()+0x4b>
c001d200:	43                   	inc    ebx
c001d201:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d207:	7e da                	jle    c001d1e3 <ATAPI::readyForCommand()+0x9>
c001d209:	83 ec 0c             	sub    esp,0xc
c001d20c:	68 5e 01 00 00       	push   0x15e
c001d211:	e8 c6 8d ff ff       	call   c0015fdc <milliTenthSleep(unsigned int)>
c001d216:	83 c4 10             	add    esp,0x10
c001d219:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d21f:	75 c2                	jne    c001d1e3 <ATAPI::readyForCommand()+0x9>
c001d221:	31 c0                	xor    eax,eax
c001d223:	eb 02                	jmp    c001d227 <ATAPI::readyForCommand()+0x4d>
c001d225:	b0 01                	mov    al,0x1
c001d227:	5a                   	pop    edx
c001d228:	5b                   	pop    ebx
c001d229:	5e                   	pop    esi
c001d22a:	c3                   	ret    
c001d22b:	90                   	nop

c001d22c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d22c:	55                   	push   ebp
c001d22d:	57                   	push   edi
c001d22e:	56                   	push   esi
c001d22f:	53                   	push   ebx
c001d230:	83 ec 20             	sub    esp,0x20
c001d233:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d237:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d23b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d23f:	6a 01                	push   0x1
c001d241:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d248:	50                   	push   eax
c001d249:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d24f:	e8 6a e9 ff ff       	call   c001bbbe <IDE::enableIRQs(unsigned char, bool)>
c001d254:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d25b:	59                   	pop    ecx
c001d25c:	5e                   	pop    esi
c001d25d:	50                   	push   eax
c001d25e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d264:	e8 21 e7 ff ff       	call   c001b98a <IDE::prepareInterrupt(unsigned char)>
c001d269:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d26c:	e8 69 ff ff ff       	call   c001d1da <ATAPI::readyForCommand()>
c001d271:	83 c4 10             	add    esp,0x10
c001d274:	84 c0                	test   al,al
c001d276:	75 0a                	jne    c001d282 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d278:	bb 01 00 00 00       	mov    ebx,0x1
c001d27d:	e9 5f 02 00 00       	jmp    c001d4e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d282:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d288:	c1 e0 04             	shl    eax,0x4
c001d28b:	0f b6 c0             	movzx  eax,al
c001d28e:	50                   	push   eax
c001d28f:	6a 06                	push   0x6
c001d291:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d298:	50                   	push   eax
c001d299:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d29f:	e8 0c e7 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2a4:	6a 00                	push   0x0
c001d2a6:	6a 01                	push   0x1
c001d2a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2af:	50                   	push   eax
c001d2b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2b6:	e8 f5 e6 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2bb:	83 c4 20             	add    esp,0x20
c001d2be:	0f b6 c3             	movzx  eax,bl
c001d2c1:	50                   	push   eax
c001d2c2:	0f b6 df             	movzx  ebx,bh
c001d2c5:	6a 04                	push   0x4
c001d2c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2ce:	50                   	push   eax
c001d2cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2d5:	e8 d6 e6 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2da:	53                   	push   ebx
c001d2db:	6a 05                	push   0x5
c001d2dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2e4:	50                   	push   eax
c001d2e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2eb:	e8 c0 e6 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2f0:	83 c4 20             	add    esp,0x20
c001d2f3:	68 a0 00 00 00       	push   0xa0
c001d2f8:	6a 07                	push   0x7
c001d2fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d301:	50                   	push   eax
c001d302:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d308:	e8 a3 e6 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d30d:	83 c4 0c             	add    esp,0xc
c001d310:	6a 01                	push   0x1
c001d312:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d319:	50                   	push   eax
c001d31a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d320:	e8 6f f1 ff ff       	call   c001c494 <IDE::polling(unsigned char, unsigned int)>
c001d325:	83 c4 10             	add    esp,0x10
c001d328:	0f b6 d8             	movzx  ebx,al
c001d32b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d331:	85 db                	test   ebx,ebx
c001d333:	74 20                	je     c001d355 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d335:	53                   	push   ebx
c001d336:	0f b6 c0             	movzx  eax,al
c001d339:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d340:	52                   	push   edx
c001d341:	50                   	push   eax
c001d342:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d348:	e8 8d f0 ff ff       	call   c001c3da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d34d:	83 c4 10             	add    esp,0x10
c001d350:	e9 8c 01 00 00       	jmp    c001d4e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d355:	52                   	push   edx
c001d356:	0f b6 c0             	movzx  eax,al
c001d359:	52                   	push   edx
c001d35a:	50                   	push   eax
c001d35b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d361:	e8 38 e6 ff ff       	call   c001b99e <IDE::getBase(unsigned char)>
c001d366:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d36a:	b9 06 00 00 00       	mov    ecx,0x6
c001d36f:	89 c2                	mov    edx,eax
c001d371:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d374:	89 e8                	mov    eax,ebp
c001d376:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d37a:	83 c4 10             	add    esp,0x10
c001d37d:	0f b6 c0             	movzx  eax,al
c001d380:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d384:	85 db                	test   ebx,ebx
c001d386:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d38c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d393:	0f 84 eb 00 00 00    	je     c001d484 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d399:	55                   	push   ebp
c001d39a:	55                   	push   ebp
c001d39b:	52                   	push   edx
c001d39c:	50                   	push   eax
c001d39d:	e8 82 e7 ff ff       	call   c001bb24 <IDE::waitInterrupt(unsigned char)>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	84 c0                	test   al,al
c001d3a7:	0f 84 cb fe ff ff    	je     c001d278 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d3ad:	56                   	push   esi
c001d3ae:	56                   	push   esi
c001d3af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3b6:	50                   	push   eax
c001d3b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3bd:	e8 c8 e5 ff ff       	call   c001b98a <IDE::prepareInterrupt(unsigned char)>
c001d3c2:	83 c4 0c             	add    esp,0xc
c001d3c5:	6a 04                	push   0x4
c001d3c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3ce:	50                   	push   eax
c001d3cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3d5:	e8 96 e6 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001d3da:	83 c4 0c             	add    esp,0xc
c001d3dd:	6a 05                	push   0x5
c001d3df:	89 c6                	mov    esi,eax
c001d3e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3e8:	50                   	push   eax
c001d3e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3ef:	e8 7c e6 ff ff       	call   c001ba70 <IDE::read(unsigned char, unsigned char)>
c001d3f4:	83 c4 10             	add    esp,0x10
c001d3f7:	0f b6 e8             	movzx  ebp,al
c001d3fa:	89 f0                	mov    eax,esi
c001d3fc:	c1 e5 08             	shl    ebp,0x8
c001d3ff:	0f b6 f0             	movzx  esi,al
c001d402:	09 f5                	or     ebp,esi
c001d404:	31 f6                	xor    esi,esi
c001d406:	d1 fd                	sar    ebp,1
c001d408:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d40d:	74 5c                	je     c001d46b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d40f:	39 ee                	cmp    esi,ebp
c001d411:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d417:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d41e:	75 0d                	jne    c001d42d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d420:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d423:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d427:	4b                   	dec    ebx
c001d428:	e9 57 ff ff ff       	jmp    c001d384 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d42d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d431:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d435:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d43a:	51                   	push   ecx
c001d43b:	51                   	push   ecx
c001d43c:	52                   	push   edx
c001d43d:	50                   	push   eax
c001d43e:	e8 5b e5 ff ff       	call   c001b99e <IDE::getBase(unsigned char)>
c001d443:	89 c2                	mov    edx,eax
c001d445:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d44a:	66 ef                	out    dx,ax
c001d44c:	46                   	inc    esi
c001d44d:	83 c4 10             	add    esp,0x10
c001d450:	eb bd                	jmp    c001d40f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d452:	51                   	push   ecx
c001d453:	51                   	push   ecx
c001d454:	52                   	push   edx
c001d455:	50                   	push   eax
c001d456:	e8 43 e5 ff ff       	call   c001b99e <IDE::getBase(unsigned char)>
c001d45b:	89 c2                	mov    edx,eax
c001d45d:	66 ed                	in     ax,dx
c001d45f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d463:	83 c4 10             	add    esp,0x10
c001d466:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d46a:	46                   	inc    esi
c001d46b:	39 ee                	cmp    esi,ebp
c001d46d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d473:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d47a:	75 d6                	jne    c001d452 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d47c:	01 f6                	add    esi,esi
c001d47e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d482:	eb a3                	jmp    c001d427 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d484:	51                   	push   ecx
c001d485:	51                   	push   ecx
c001d486:	52                   	push   edx
c001d487:	50                   	push   eax
c001d488:	e8 97 e6 ff ff       	call   c001bb24 <IDE::waitInterrupt(unsigned char)>
c001d48d:	83 c4 10             	add    esp,0x10
c001d490:	84 c0                	test   al,al
c001d492:	0f 84 e0 fd ff ff    	je     c001d278 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d498:	52                   	push   edx
c001d499:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d49e:	52                   	push   edx
c001d49f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4a6:	50                   	push   eax
c001d4a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4ad:	e8 d8 e4 ff ff       	call   c001b98a <IDE::prepareInterrupt(unsigned char)>
c001d4b2:	83 c4 10             	add    esp,0x10
c001d4b5:	50                   	push   eax
c001d4b6:	50                   	push   eax
c001d4b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4be:	50                   	push   eax
c001d4bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4c5:	e8 d4 e4 ff ff       	call   c001b99e <IDE::getBase(unsigned char)>
c001d4ca:	8d 50 07             	lea    edx,[eax+0x7]
c001d4cd:	ec                   	in     al,dx
c001d4ce:	83 c4 10             	add    esp,0x10
c001d4d1:	a8 88                	test   al,0x88
c001d4d3:	74 0a                	je     c001d4df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d4d5:	4b                   	dec    ebx
c001d4d6:	75 dd                	jne    c001d4b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d4d8:	bb 02 00 00 00       	mov    ebx,0x2
c001d4dd:	eb 02                	jmp    c001d4e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d4df:	31 db                	xor    ebx,ebx
c001d4e1:	83 c4 1c             	add    esp,0x1c
c001d4e4:	89 d8                	mov    eax,ebx
c001d4e6:	5b                   	pop    ebx
c001d4e7:	5e                   	pop    esi
c001d4e8:	5f                   	pop    edi
c001d4e9:	5d                   	pop    ebp
c001d4ea:	c3                   	ret    
c001d4eb:	90                   	nop

c001d4ec <ATAPI::diskRemoved()>:
c001d4ec:	53                   	push   ebx
c001d4ed:	83 ec 14             	sub    esp,0x14
c001d4f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d4f4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d4fb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d501:	e8 8e 05 ff ff       	call   c000da94 <LogicalDisk::unmount()>
c001d506:	58                   	pop    eax
c001d507:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d50d:	e8 66 0f ff ff       	call   c000e478 <VCache::writeWriteBuffer()>
c001d512:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d518:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d51c:	83 c4 18             	add    esp,0x18
c001d51f:	5b                   	pop    ebx
c001d520:	e9 43 0f ff ff       	jmp    c000e468 <VCache::invalidateReadBuffer()>
c001d525:	90                   	nop

c001d526 <ATAPI::eject()>:
c001d526:	57                   	push   edi
c001d527:	b9 03 00 00 00       	mov    ecx,0x3
c001d52c:	53                   	push   ebx
c001d52d:	83 ec 14             	sub    esp,0x14
c001d530:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d534:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d538:	fc                   	cld    
c001d539:	31 c0                	xor    eax,eax
c001d53b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d53d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d542:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d547:	50                   	push   eax
c001d548:	50                   	push   eax
c001d549:	6a 00                	push   0x0
c001d54b:	6a 00                	push   0x0
c001d54d:	6a 00                	push   0x0
c001d54f:	6a 02                	push   0x2
c001d551:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d555:	50                   	push   eax
c001d556:	53                   	push   ebx
c001d557:	e8 d0 fc ff ff       	call   c001d22c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d55c:	83 c4 14             	add    esp,0x14
c001d55f:	53                   	push   ebx
c001d560:	e8 87 ff ff ff       	call   c001d4ec <ATAPI::diskRemoved()>
c001d565:	83 c4 24             	add    esp,0x24
c001d568:	31 c0                	xor    eax,eax
c001d56a:	5b                   	pop    ebx
c001d56b:	5f                   	pop    edi
c001d56c:	c3                   	ret    
c001d56d:	90                   	nop

c001d56e <ATAPI::diskInserted()>:
c001d56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d572:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d579:	c3                   	ret    

c001d57a <ATAPI::detectMedia()>:
c001d57a:	56                   	push   esi
c001d57b:	53                   	push   ebx
c001d57c:	83 ec 28             	sub    esp,0x28
c001d57f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d583:	6a 0c                	push   0xc
c001d585:	6a 00                	push   0x0
c001d587:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d58b:	56                   	push   esi
c001d58c:	e8 5f 2f fe ff       	call   c00004f0 <memset>
c001d591:	58                   	pop    eax
c001d592:	5a                   	pop    edx
c001d593:	6a 00                	push   0x0
c001d595:	6a 00                	push   0x0
c001d597:	6a 00                	push   0x0
c001d599:	6a 00                	push   0x0
c001d59b:	56                   	push   esi
c001d59c:	53                   	push   ebx
c001d59d:	e8 8a fc ff ff       	call   c001d22c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d5a2:	83 c4 1c             	add    esp,0x1c
c001d5a5:	6a 0c                	push   0xc
c001d5a7:	6a 00                	push   0x0
c001d5a9:	56                   	push   esi
c001d5aa:	e8 41 2f fe ff       	call   c00004f0 <memset>
c001d5af:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d5b4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d5b9:	59                   	pop    ecx
c001d5ba:	58                   	pop    eax
c001d5bb:	6a 01                	push   0x1
c001d5bd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d5c1:	50                   	push   eax
c001d5c2:	6a 00                	push   0x0
c001d5c4:	6a 12                	push   0x12
c001d5c6:	56                   	push   esi
c001d5c7:	53                   	push   ebx
c001d5c8:	e8 5f fc ff ff       	call   c001d22c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d5cd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d5d1:	83 c4 20             	add    esp,0x20
c001d5d4:	83 e0 7f             	and    eax,0x7f
c001d5d7:	83 f8 70             	cmp    eax,0x70
c001d5da:	74 15                	je     c001d5f1 <ATAPI::detectMedia()+0x77>
c001d5dc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5e3:	75 0c                	jne    c001d5f1 <ATAPI::detectMedia()+0x77>
c001d5e5:	83 ec 0c             	sub    esp,0xc
c001d5e8:	53                   	push   ebx
c001d5e9:	e8 80 ff ff ff       	call   c001d56e <ATAPI::diskInserted()>
c001d5ee:	83 c4 10             	add    esp,0x10
c001d5f1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d5f5:	83 e0 0f             	and    eax,0xf
c001d5f8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d5fd:	0f b6 c0             	movzx  eax,al
c001d600:	75 19                	jne    c001d61b <ATAPI::detectMedia()+0xa1>
c001d602:	83 f8 02             	cmp    eax,0x2
c001d605:	75 14                	jne    c001d61b <ATAPI::detectMedia()+0xa1>
c001d607:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d60e:	74 24                	je     c001d634 <ATAPI::detectMedia()+0xba>
c001d610:	83 ec 0c             	sub    esp,0xc
c001d613:	53                   	push   ebx
c001d614:	e8 d3 fe ff ff       	call   c001d4ec <ATAPI::diskRemoved()>
c001d619:	eb 16                	jmp    c001d631 <ATAPI::detectMedia()+0xb7>
c001d61b:	85 c0                	test   eax,eax
c001d61d:	75 15                	jne    c001d634 <ATAPI::detectMedia()+0xba>
c001d61f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d626:	75 0c                	jne    c001d634 <ATAPI::detectMedia()+0xba>
c001d628:	83 ec 0c             	sub    esp,0xc
c001d62b:	53                   	push   ebx
c001d62c:	e8 3d ff ff ff       	call   c001d56e <ATAPI::diskInserted()>
c001d631:	83 c4 10             	add    esp,0x10
c001d634:	83 c4 24             	add    esp,0x24
c001d637:	5b                   	pop    ebx
c001d638:	5e                   	pop    esi
c001d639:	c3                   	ret    

c001d63a <ATAPI::open(int, int, void*)>:
c001d63a:	56                   	push   esi
c001d63b:	53                   	push   ebx
c001d63c:	50                   	push   eax
c001d63d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d641:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d645:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d649:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d64f:	c1 e0 06             	shl    eax,0x6
c001d652:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d658:	01 d0                	add    eax,edx
c001d65a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d661:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d667:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d66e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d678:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d67f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d685:	6a 04                	push   0x4
c001d687:	6a 0c                	push   0xc
c001d689:	51                   	push   ecx
c001d68a:	52                   	push   edx
c001d68b:	e8 20 e3 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d690:	90                   	nop
c001d691:	90                   	nop
c001d692:	6a 00                	push   0x0
c001d694:	6a 0c                	push   0xc
c001d696:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d69d:	50                   	push   eax
c001d69e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6a4:	e8 07 e3 ff ff       	call   c001b9b0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6a9:	83 c4 14             	add    esp,0x14
c001d6ac:	68 78 01 00 00       	push   0x178
c001d6b1:	e8 1d a4 fe ff       	call   c0007ad3 <malloc>
c001d6b6:	83 c4 0c             	add    esp,0xc
c001d6b9:	6a 00                	push   0x0
c001d6bb:	68 ff ff ff 7f       	push   0x7fffffff
c001d6c0:	6a 00                	push   0x0
c001d6c2:	6a 00                	push   0x0
c001d6c4:	53                   	push   ebx
c001d6c5:	68 8f 30 02 c0       	push   0xc002308f
c001d6ca:	89 c6                	mov    esi,eax
c001d6cc:	50                   	push   eax
c001d6cd:	e8 00 02 ff ff       	call   c000d8d2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d6d2:	83 c4 14             	add    esp,0x14
c001d6d5:	56                   	push   esi
c001d6d6:	e8 b7 02 ff ff       	call   c000d992 <LogicalDisk::assignDriveLetter()>
c001d6db:	5a                   	pop    edx
c001d6dc:	59                   	pop    ecx
c001d6dd:	0f be c0             	movsx  eax,al
c001d6e0:	50                   	push   eax
c001d6e1:	68 e0 2e 02 c0       	push   0xc0022ee0
c001d6e6:	e8 1f d2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d6eb:	58                   	pop    eax
c001d6ec:	5a                   	pop    edx
c001d6ed:	56                   	push   esi
c001d6ee:	53                   	push   ebx
c001d6ef:	e8 30 f0 fe ff       	call   c000c724 <Device::addChild(Device*)>
c001d6f4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d6fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6fd:	e8 58 f4 fe ff       	call   c000cb5a <PhysicalDisk::startCache()>
c001d702:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d709:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d70c:	e8 69 fe ff ff       	call   c001d57a <ATAPI::detectMedia()>
c001d711:	83 c4 14             	add    esp,0x14
c001d714:	31 c0                	xor    eax,eax
c001d716:	5b                   	pop    ebx
c001d717:	5e                   	pop    esi
c001d718:	c3                   	ret    
c001d719:	90                   	nop

c001d71a <ATAPI::read(unsigned long long, int, void*)>:
c001d71a:	55                   	push   ebp
c001d71b:	57                   	push   edi
c001d71c:	56                   	push   esi
c001d71d:	53                   	push   ebx
c001d71e:	83 ec 1c             	sub    esp,0x1c
c001d721:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d725:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d729:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d72d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d734:	74 3c                	je     c001d772 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d736:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d73a:	b9 03 00 00 00       	mov    ecx,0x3
c001d73f:	fc                   	cld    
c001d740:	31 c0                	xor    eax,eax
c001d742:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d744:	89 e8                	mov    eax,ebp
c001d746:	0f ce                	bswap  esi
c001d748:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d74c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d751:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d755:	50                   	push   eax
c001d756:	50                   	push   eax
c001d757:	55                   	push   ebp
c001d758:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d75c:	c1 e5 0b             	shl    ebp,0xb
c001d75f:	6a 00                	push   0x0
c001d761:	55                   	push   ebp
c001d762:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d766:	50                   	push   eax
c001d767:	53                   	push   ebx
c001d768:	e8 bf fa ff ff       	call   c001d22c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d76d:	83 c4 20             	add    esp,0x20
c001d770:	eb 1a                	jmp    c001d78c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d772:	83 ec 0c             	sub    esp,0xc
c001d775:	53                   	push   ebx
c001d776:	e8 ff fd ff ff       	call   c001d57a <ATAPI::detectMedia()>
c001d77b:	83 c4 10             	add    esp,0x10
c001d77e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d785:	75 af                	jne    c001d736 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d787:	b8 02 00 00 00       	mov    eax,0x2
c001d78c:	83 c4 1c             	add    esp,0x1c
c001d78f:	5b                   	pop    ebx
c001d790:	5e                   	pop    esi
c001d791:	5f                   	pop    edi
c001d792:	5d                   	pop    ebp
c001d793:	c3                   	ret    

c001d794 <SATA::close(int, int, void*)>:
c001d794:	83 ec 0c             	sub    esp,0xc
c001d797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d79b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d7a1:	85 c0                	test   eax,eax
c001d7a3:	74 0c                	je     c001d7b1 <SATA::close(int, int, void*)+0x1d>
c001d7a5:	8b 10                	mov    edx,DWORD PTR [eax]
c001d7a7:	83 ec 0c             	sub    esp,0xc
c001d7aa:	50                   	push   eax
c001d7ab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d7ae:	83 c4 10             	add    esp,0x10
c001d7b1:	31 c0                	xor    eax,eax
c001d7b3:	83 c4 0c             	add    esp,0xc
c001d7b6:	c3                   	ret    
c001d7b7:	90                   	nop

c001d7b8 <SATA::powerSaving(PowerSavingLevel)>:
c001d7b8:	c3                   	ret    
c001d7b9:	90                   	nop

c001d7ba <SATA::open(int, int, void*)>:
c001d7ba:	56                   	push   esi
c001d7bb:	53                   	push   ebx
c001d7bc:	50                   	push   eax
c001d7bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7c5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d7cf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d7d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7d9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d7e3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d7ed:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d7f4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d7fa:	e8 e3 a5 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d7ff:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d805:	89 c6                	mov    esi,eax
c001d807:	e8 d6 a5 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d80c:	81 c6 00 10 00 00    	add    esi,0x1000
c001d812:	39 c6                	cmp    esi,eax
c001d814:	74 10                	je     c001d826 <SATA::open(int, int, void*)+0x6c>
c001d816:	83 ec 0c             	sub    esp,0xc
c001d819:	68 28 2f 02 c0       	push   0xc0022f28
c001d81e:	e8 9e 3a ff ff       	call   c00112c1 <KePanic(char const*)>
c001d823:	83 c4 10             	add    esp,0x10
c001d826:	83 ec 0c             	sub    esp,0xc
c001d829:	6a 02                	push   0x2
c001d82b:	e8 c5 bd fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d830:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d836:	6a 03                	push   0x3
c001d838:	50                   	push   eax
c001d839:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d83f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d845:	e8 b4 c4 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d84a:	83 c4 14             	add    esp,0x14
c001d84d:	53                   	push   ebx
c001d84e:	e8 07 f3 fe ff       	call   c000cb5a <PhysicalDisk::startCache()>
c001d853:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d856:	e8 4b 05 ff ff       	call   c000dda6 <createPartitionsForDisk(PhysicalDisk*)>
c001d85b:	83 c4 14             	add    esp,0x14
c001d85e:	31 c0                	xor    eax,eax
c001d860:	5b                   	pop    ebx
c001d861:	5e                   	pop    esi
c001d862:	c3                   	ret    
c001d863:	90                   	nop

c001d864 <SATA::SATA()>:
c001d864:	83 ec 0c             	sub    esp,0xc
c001d867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d86b:	83 ec 04             	sub    esp,0x4
c001d86e:	68 00 02 00 00       	push   0x200
c001d873:	68 3c 2f 02 c0       	push   0xc0022f3c
c001d878:	50                   	push   eax
c001d879:	e8 74 f2 fe ff       	call   c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	ba ac 2f 02 c0       	mov    edx,0xc0022fac
c001d886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d88a:	89 10                	mov    DWORD PTR [eax],edx
c001d88c:	90                   	nop
c001d88d:	83 c4 0c             	add    esp,0xc
c001d890:	c3                   	ret    
c001d891:	90                   	nop

c001d892 <SATA::access(unsigned long long, int, void*, bool)>:
c001d892:	55                   	push   ebp
c001d893:	57                   	push   edi
c001d894:	56                   	push   esi
c001d895:	53                   	push   ebx
c001d896:	83 ec 2c             	sub    esp,0x2c
c001d899:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d89d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d8a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d8a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8aa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d8ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d8b2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d8b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8ba:	7e 10                	jle    c001d8cc <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d8bc:	83 ec 0c             	sub    esp,0xc
c001d8bf:	68 4c 2f 02 c0       	push   0xc0022f4c
c001d8c4:	e8 f8 39 ff ff       	call   c00112c1 <KePanic(char const*)>
c001d8c9:	83 c4 10             	add    esp,0x10
c001d8cc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d8d2:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d8d8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d8de:	89 e8                	mov    eax,ebp
c001d8e0:	c1 e0 07             	shl    eax,0x7
c001d8e3:	01 d0                	add    eax,edx
c001d8e5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d8ef:	8d 45 02             	lea    eax,[ebp+0x2]
c001d8f2:	51                   	push   ecx
c001d8f3:	c1 e0 07             	shl    eax,0x7
c001d8f6:	51                   	push   ecx
c001d8f7:	01 d0                	add    eax,edx
c001d8f9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d8fd:	50                   	push   eax
c001d8fe:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d904:	e8 6b ec ff ff       	call   c001c574 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d909:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d90d:	83 c4 10             	add    esp,0x10
c001d910:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d915:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d919:	0f 84 5b 01 00 00    	je     c001da7a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d91f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d923:	c1 e0 09             	shl    eax,0x9
c001d926:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d92b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d92f:	74 0e                	je     c001d93f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d931:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d937:	89 c1                	mov    ecx,eax
c001d939:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d93d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d93f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d943:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d949:	8d 45 02             	lea    eax,[ebp+0x2]
c001d94c:	c1 e0 07             	shl    eax,0x7
c001d94f:	01 d0                	add    eax,edx
c001d951:	8b 00                	mov    eax,DWORD PTR [eax]
c001d953:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d959:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d95f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d963:	c1 e1 05             	shl    ecx,0x5
c001d966:	01 c8                	add    eax,ecx
c001d968:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d96c:	83 e1 01             	and    ecx,0x1
c001d96f:	89 ce                	mov    esi,ecx
c001d971:	8a 08                	mov    cl,BYTE PTR [eax]
c001d973:	c1 e6 06             	shl    esi,0x6
c001d976:	83 e1 bf             	and    ecx,0xffffffbf
c001d979:	09 f1                	or     ecx,esi
c001d97b:	88 08                	mov    BYTE PTR [eax],cl
c001d97d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d97f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d985:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d98b:	89 08                	mov    DWORD PTR [eax],ecx
c001d98d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d993:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d999:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d99f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d9a2:	50                   	push   eax
c001d9a3:	68 90 00 00 00       	push   0x90
c001d9a8:	6a 00                	push   0x0
c001d9aa:	56                   	push   esi
c001d9ab:	e8 40 2b fe ff       	call   c00004f0 <memset>
c001d9b0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d9b6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c0:	83 c4 10             	add    esp,0x10
c001d9c3:	48                   	dec    eax
c001d9c4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d9c9:	89 c1                	mov    ecx,eax
c001d9cb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d9d1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d9d6:	09 c8                	or     eax,ecx
c001d9d8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d9de:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d9e4:	83 c8 80             	or     eax,0xffffff80
c001d9e7:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d9ed:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d9f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9f4:	25 00 7f 00 00       	and    eax,0x7f00
c001d9f9:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d9fe:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001da03:	66 89 06             	mov    WORD PTR [esi],ax
c001da06:	b0 35                	mov    al,0x35
c001da08:	75 02                	jne    c001da0c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001da0a:	b0 25                	mov    al,0x25
c001da0c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001da0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da13:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001da17:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001da1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da1f:	c1 e8 10             	shr    eax,0x10
c001da22:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001da25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da29:	c1 e8 18             	shr    eax,0x18
c001da2c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001da2f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001da33:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001da36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da3a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001da3d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001da41:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001da45:	89 ee                	mov    esi,ebp
c001da47:	31 c0                	xor    eax,eax
c001da49:	c1 e6 07             	shl    esi,0x7
c001da4c:	01 d6                	add    esi,edx
c001da4e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001da54:	80 e1 88             	and    cl,0x88
c001da57:	74 0a                	je     c001da63 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001da59:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001da5e:	74 0a                	je     c001da6a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001da60:	40                   	inc    eax
c001da61:	eb eb                	jmp    c001da4e <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001da63:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001da68:	75 17                	jne    c001da81 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001da6a:	83 ec 0c             	sub    esp,0xc
c001da6d:	68 85 2f 02 c0       	push   0xc0022f85
c001da72:	e8 93 ce fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001da77:	83 c4 10             	add    esp,0x10
c001da7a:	b8 01 00 00 00       	mov    eax,0x1
c001da7f:	eb 5b                	jmp    c001dadc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001da81:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001da85:	c1 e5 07             	shl    ebp,0x7
c001da88:	b8 01 00 00 00       	mov    eax,0x1
c001da8d:	01 ea                	add    edx,ebp
c001da8f:	d3 e0                	shl    eax,cl
c001da91:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001da97:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001da9d:	85 c8                	test   eax,ecx
c001da9f:	74 16                	je     c001dab7 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001daa1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001daa7:	0f ba e1 1e          	bt     ecx,0x1e
c001daab:	73 ea                	jae    c001da97 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001daad:	83 ec 0c             	sub    esp,0xc
c001dab0:	68 93 2f 02 c0       	push   0xc0022f93
c001dab5:	eb bb                	jmp    c001da72 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001dab7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001dabd:	0f ba e0 1e          	bt     eax,0x1e
c001dac1:	72 b7                	jb     c001da7a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dac3:	31 c0                	xor    eax,eax
c001dac5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001daca:	75 10                	jne    c001dadc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001dacc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001dad2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dad6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dada:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dadc:	83 c4 2c             	add    esp,0x2c
c001dadf:	5b                   	pop    ebx
c001dae0:	5e                   	pop    esi
c001dae1:	5f                   	pop    edi
c001dae2:	5d                   	pop    ebp
c001dae3:	c3                   	ret    

c001dae4 <SATA::read(unsigned long long, int, void*)>:
c001dae4:	55                   	push   ebp
c001dae5:	57                   	push   edi
c001dae6:	56                   	push   esi
c001dae7:	be 04 00 00 00       	mov    esi,0x4
c001daec:	53                   	push   ebx
c001daed:	83 ec 0c             	sub    esp,0xc
c001daf0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001daf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001daf8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dafc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001db00:	8d 7b ff             	lea    edi,[ebx-0x1]
c001db03:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001db09:	0f 87 1a 02 00 00    	ja     c001dd29 <SATA::read(unsigned long long, int, void*)+0x245>
c001db0f:	85 c9                	test   ecx,ecx
c001db11:	be 06 00 00 00       	mov    esi,0x6
c001db16:	0f 84 0d 02 00 00    	je     c001dd29 <SATA::read(unsigned long long, int, void*)+0x245>
c001db1c:	56                   	push   esi
c001db1d:	56                   	push   esi
c001db1e:	6a 00                	push   0x0
c001db20:	51                   	push   ecx
c001db21:	53                   	push   ebx
c001db22:	52                   	push   edx
c001db23:	50                   	push   eax
c001db24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db28:	e8 65 fd ff ff       	call   c001d892 <SATA::access(unsigned long long, int, void*, bool)>
c001db2d:	83 c4 20             	add    esp,0x20
c001db30:	85 c0                	test   eax,eax
c001db32:	89 c6                	mov    esi,eax
c001db34:	0f 85 ea 01 00 00    	jne    c001dd24 <SATA::read(unsigned long long, int, void*)+0x240>
c001db3a:	50                   	push   eax
c001db3b:	50                   	push   eax
c001db3c:	6a 0f                	push   0xf
c001db3e:	6a 00                	push   0x0
c001db40:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001db46:	bb 0a 00 00 00       	mov    ebx,0xa
c001db4b:	e8 7d f2 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001db50:	5a                   	pop    edx
c001db51:	59                   	pop    ecx
c001db52:	b9 10 27 00 00       	mov    ecx,0x2710
c001db57:	0f b6 c0             	movzx  eax,al
c001db5a:	50                   	push   eax
c001db5b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db60:	99                   	cdq    
c001db61:	f7 f9                	idiv   ecx
c001db63:	99                   	cdq    
c001db64:	f7 fb                	idiv   ebx
c001db66:	8d 42 30             	lea    eax,[edx+0x30]
c001db69:	0f b6 c0             	movzx  eax,al
c001db6c:	50                   	push   eax
c001db6d:	e8 4a f2 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001db72:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001db78:	5f                   	pop    edi
c001db79:	5d                   	pop    ebp
c001db7a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001db7f:	6a 0f                	push   0xf
c001db81:	6a 00                	push   0x0
c001db83:	e8 45 f2 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001db88:	5a                   	pop    edx
c001db89:	59                   	pop    ecx
c001db8a:	0f b6 c0             	movzx  eax,al
c001db8d:	50                   	push   eax
c001db8e:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db93:	99                   	cdq    
c001db94:	f7 fd                	idiv   ebp
c001db96:	99                   	cdq    
c001db97:	f7 fb                	idiv   ebx
c001db99:	8d 42 30             	lea    eax,[edx+0x30]
c001db9c:	0f b6 c0             	movzx  eax,al
c001db9f:	50                   	push   eax
c001dba0:	e8 17 f2 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001dba5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dbab:	5f                   	pop    edi
c001dbac:	bf 64 00 00 00       	mov    edi,0x64
c001dbb1:	58                   	pop    eax
c001dbb2:	6a 0f                	push   0xf
c001dbb4:	6a 00                	push   0x0
c001dbb6:	e8 12 f2 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001dbbb:	5a                   	pop    edx
c001dbbc:	59                   	pop    ecx
c001dbbd:	0f b6 c0             	movzx  eax,al
c001dbc0:	50                   	push   eax
c001dbc1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbc6:	99                   	cdq    
c001dbc7:	f7 ff                	idiv   edi
c001dbc9:	99                   	cdq    
c001dbca:	f7 fb                	idiv   ebx
c001dbcc:	8d 42 30             	lea    eax,[edx+0x30]
c001dbcf:	0f b6 c0             	movzx  eax,al
c001dbd2:	50                   	push   eax
c001dbd3:	e8 e4 f1 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001dbd8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dbde:	58                   	pop    eax
c001dbdf:	5a                   	pop    edx
c001dbe0:	6a 0f                	push   0xf
c001dbe2:	6a 00                	push   0x0
c001dbe4:	e8 e4 f1 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001dbe9:	59                   	pop    ecx
c001dbea:	5a                   	pop    edx
c001dbeb:	0f b6 c0             	movzx  eax,al
c001dbee:	50                   	push   eax
c001dbef:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbf4:	99                   	cdq    
c001dbf5:	f7 fb                	idiv   ebx
c001dbf7:	99                   	cdq    
c001dbf8:	f7 fb                	idiv   ebx
c001dbfa:	8d 42 30             	lea    eax,[edx+0x30]
c001dbfd:	0f b6 c0             	movzx  eax,al
c001dc00:	50                   	push   eax
c001dc01:	e8 b6 f1 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001dc06:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc0c:	59                   	pop    ecx
c001dc0d:	58                   	pop    eax
c001dc0e:	6a 0f                	push   0xf
c001dc10:	6a 00                	push   0x0
c001dc12:	e8 b6 f1 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001dc17:	5a                   	pop    edx
c001dc18:	59                   	pop    ecx
c001dc19:	0f b6 c0             	movzx  eax,al
c001dc1c:	50                   	push   eax
c001dc1d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc22:	99                   	cdq    
c001dc23:	f7 fb                	idiv   ebx
c001dc25:	83 c2 30             	add    edx,0x30
c001dc28:	0f b6 d2             	movzx  edx,dl
c001dc2b:	52                   	push   edx
c001dc2c:	e8 8b f1 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001dc31:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc37:	58                   	pop    eax
c001dc38:	5a                   	pop    edx
c001dc39:	6a 0f                	push   0xf
c001dc3b:	6a 00                	push   0x0
c001dc3d:	e8 8b f1 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001dc42:	59                   	pop    ecx
c001dc43:	b9 10 27 00 00       	mov    ecx,0x2710
c001dc48:	5a                   	pop    edx
c001dc49:	0f b6 c0             	movzx  eax,al
c001dc4c:	50                   	push   eax
c001dc4d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc52:	99                   	cdq    
c001dc53:	f7 f9                	idiv   ecx
c001dc55:	99                   	cdq    
c001dc56:	f7 fb                	idiv   ebx
c001dc58:	8d 42 30             	lea    eax,[edx+0x30]
c001dc5b:	0f b6 c0             	movzx  eax,al
c001dc5e:	50                   	push   eax
c001dc5f:	e8 58 f1 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001dc64:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc6a:	59                   	pop    ecx
c001dc6b:	58                   	pop    eax
c001dc6c:	6a 0f                	push   0xf
c001dc6e:	6a 00                	push   0x0
c001dc70:	e8 58 f1 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001dc75:	5a                   	pop    edx
c001dc76:	59                   	pop    ecx
c001dc77:	0f b6 c0             	movzx  eax,al
c001dc7a:	50                   	push   eax
c001dc7b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc80:	99                   	cdq    
c001dc81:	f7 fd                	idiv   ebp
c001dc83:	99                   	cdq    
c001dc84:	f7 fb                	idiv   ebx
c001dc86:	8d 42 30             	lea    eax,[edx+0x30]
c001dc89:	0f b6 c0             	movzx  eax,al
c001dc8c:	50                   	push   eax
c001dc8d:	e8 2a f1 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001dc92:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dc98:	5d                   	pop    ebp
c001dc99:	58                   	pop    eax
c001dc9a:	6a 0f                	push   0xf
c001dc9c:	6a 00                	push   0x0
c001dc9e:	e8 2a f1 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001dca3:	5a                   	pop    edx
c001dca4:	59                   	pop    ecx
c001dca5:	0f b6 c0             	movzx  eax,al
c001dca8:	50                   	push   eax
c001dca9:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcae:	99                   	cdq    
c001dcaf:	f7 ff                	idiv   edi
c001dcb1:	99                   	cdq    
c001dcb2:	f7 fb                	idiv   ebx
c001dcb4:	8d 42 30             	lea    eax,[edx+0x30]
c001dcb7:	0f b6 c0             	movzx  eax,al
c001dcba:	50                   	push   eax
c001dcbb:	e8 fc f0 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001dcc0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dcc6:	5f                   	pop    edi
c001dcc7:	5d                   	pop    ebp
c001dcc8:	6a 0f                	push   0xf
c001dcca:	6a 00                	push   0x0
c001dccc:	e8 fc f0 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001dcd1:	5a                   	pop    edx
c001dcd2:	59                   	pop    ecx
c001dcd3:	0f b6 c0             	movzx  eax,al
c001dcd6:	50                   	push   eax
c001dcd7:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcdc:	99                   	cdq    
c001dcdd:	f7 fb                	idiv   ebx
c001dcdf:	99                   	cdq    
c001dce0:	f7 fb                	idiv   ebx
c001dce2:	8d 42 30             	lea    eax,[edx+0x30]
c001dce5:	0f b6 c0             	movzx  eax,al
c001dce8:	50                   	push   eax
c001dce9:	e8 ce f0 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001dcee:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dcf4:	5f                   	pop    edi
c001dcf5:	5d                   	pop    ebp
c001dcf6:	6a 0f                	push   0xf
c001dcf8:	6a 00                	push   0x0
c001dcfa:	e8 ce f0 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001dcff:	5a                   	pop    edx
c001dd00:	59                   	pop    ecx
c001dd01:	0f b6 c0             	movzx  eax,al
c001dd04:	50                   	push   eax
c001dd05:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd0a:	99                   	cdq    
c001dd0b:	f7 fb                	idiv   ebx
c001dd0d:	83 c2 30             	add    edx,0x30
c001dd10:	0f b6 d2             	movzx  edx,dl
c001dd13:	52                   	push   edx
c001dd14:	e8 a3 f0 ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001dd19:	83 c4 10             	add    esp,0x10
c001dd1c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd22:	eb 05                	jmp    c001dd29 <SATA::read(unsigned long long, int, void*)+0x245>
c001dd24:	be 01 00 00 00       	mov    esi,0x1
c001dd29:	83 c4 0c             	add    esp,0xc
c001dd2c:	89 f0                	mov    eax,esi
c001dd2e:	5b                   	pop    ebx
c001dd2f:	5e                   	pop    esi
c001dd30:	5f                   	pop    edi
c001dd31:	5d                   	pop    ebp
c001dd32:	c3                   	ret    
c001dd33:	90                   	nop

c001dd34 <SATA::write(unsigned long long, int, void*)>:
c001dd34:	55                   	push   ebp
c001dd35:	57                   	push   edi
c001dd36:	56                   	push   esi
c001dd37:	53                   	push   ebx
c001dd38:	83 ec 0c             	sub    esp,0xc
c001dd3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dd3f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dd43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dd47:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd4b:	8d 70 ff             	lea    esi,[eax-0x1]
c001dd4e:	b8 04 00 00 00       	mov    eax,0x4
c001dd53:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dd59:	0f 87 2c 02 00 00    	ja     c001df8b <SATA::write(unsigned long long, int, void*)+0x257>
c001dd5f:	85 db                	test   ebx,ebx
c001dd61:	b8 06 00 00 00       	mov    eax,0x6
c001dd66:	0f 84 1f 02 00 00    	je     c001df8b <SATA::write(unsigned long long, int, void*)+0x257>
c001dd6c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dd70:	c1 e6 09             	shl    esi,0x9
c001dd73:	01 de                	add    esi,ebx
c001dd75:	50                   	push   eax
c001dd76:	89 d7                	mov    edi,edx
c001dd78:	50                   	push   eax
c001dd79:	83 c7 01             	add    edi,0x1
c001dd7c:	6a 01                	push   0x1
c001dd7e:	89 cd                	mov    ebp,ecx
c001dd80:	53                   	push   ebx
c001dd81:	83 d5 00             	adc    ebp,0x0
c001dd84:	6a 01                	push   0x1
c001dd86:	81 c3 00 02 00 00    	add    ebx,0x200
c001dd8c:	51                   	push   ecx
c001dd8d:	52                   	push   edx
c001dd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd92:	e8 fb fa ff ff       	call   c001d892 <SATA::access(unsigned long long, int, void*, bool)>
c001dd97:	83 c4 20             	add    esp,0x20
c001dd9a:	39 f3                	cmp    ebx,esi
c001dd9c:	89 fa                	mov    edx,edi
c001dd9e:	89 e9                	mov    ecx,ebp
c001dda0:	75 d3                	jne    c001dd75 <SATA::write(unsigned long long, int, void*)+0x41>
c001dda2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dda6:	bd 10 27 00 00       	mov    ebp,0x2710
c001ddab:	bb 0a 00 00 00       	mov    ebx,0xa
c001ddb0:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001ddb6:	50                   	push   eax
c001ddb7:	50                   	push   eax
c001ddb8:	6a 0f                	push   0xf
c001ddba:	6a 00                	push   0x0
c001ddbc:	e8 0c f0 ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001ddc1:	5a                   	pop    edx
c001ddc2:	59                   	pop    ecx
c001ddc3:	0f b6 c0             	movzx  eax,al
c001ddc6:	50                   	push   eax
c001ddc7:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddcc:	99                   	cdq    
c001ddcd:	f7 fd                	idiv   ebp
c001ddcf:	99                   	cdq    
c001ddd0:	f7 fb                	idiv   ebx
c001ddd2:	8d 42 30             	lea    eax,[edx+0x30]
c001ddd5:	0f b6 c0             	movzx  eax,al
c001ddd8:	50                   	push   eax
c001ddd9:	e8 de ef ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001ddde:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dde4:	5e                   	pop    esi
c001dde5:	5f                   	pop    edi
c001dde6:	bf e8 03 00 00       	mov    edi,0x3e8
c001ddeb:	6a 0f                	push   0xf
c001dded:	6a 00                	push   0x0
c001ddef:	e8 d9 ef ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001ddf4:	5a                   	pop    edx
c001ddf5:	59                   	pop    ecx
c001ddf6:	0f b6 c0             	movzx  eax,al
c001ddf9:	50                   	push   eax
c001ddfa:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddff:	99                   	cdq    
c001de00:	f7 ff                	idiv   edi
c001de02:	99                   	cdq    
c001de03:	f7 fb                	idiv   ebx
c001de05:	8d 42 30             	lea    eax,[edx+0x30]
c001de08:	0f b6 c0             	movzx  eax,al
c001de0b:	50                   	push   eax
c001de0c:	e8 ab ef ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001de11:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001de17:	5e                   	pop    esi
c001de18:	be 64 00 00 00       	mov    esi,0x64
c001de1d:	58                   	pop    eax
c001de1e:	6a 0f                	push   0xf
c001de20:	6a 00                	push   0x0
c001de22:	e8 a6 ef ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001de27:	5a                   	pop    edx
c001de28:	59                   	pop    ecx
c001de29:	0f b6 c0             	movzx  eax,al
c001de2c:	50                   	push   eax
c001de2d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de32:	99                   	cdq    
c001de33:	f7 fe                	idiv   esi
c001de35:	99                   	cdq    
c001de36:	f7 fb                	idiv   ebx
c001de38:	8d 42 30             	lea    eax,[edx+0x30]
c001de3b:	0f b6 c0             	movzx  eax,al
c001de3e:	50                   	push   eax
c001de3f:	e8 78 ef ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001de44:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001de4a:	58                   	pop    eax
c001de4b:	5a                   	pop    edx
c001de4c:	6a 0f                	push   0xf
c001de4e:	6a 00                	push   0x0
c001de50:	e8 78 ef ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001de55:	59                   	pop    ecx
c001de56:	5a                   	pop    edx
c001de57:	0f b6 c0             	movzx  eax,al
c001de5a:	50                   	push   eax
c001de5b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de60:	99                   	cdq    
c001de61:	f7 fb                	idiv   ebx
c001de63:	99                   	cdq    
c001de64:	f7 fb                	idiv   ebx
c001de66:	8d 42 30             	lea    eax,[edx+0x30]
c001de69:	0f b6 c0             	movzx  eax,al
c001de6c:	50                   	push   eax
c001de6d:	e8 4a ef ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001de72:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001de78:	59                   	pop    ecx
c001de79:	58                   	pop    eax
c001de7a:	6a 0f                	push   0xf
c001de7c:	6a 00                	push   0x0
c001de7e:	e8 4a ef ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001de83:	5a                   	pop    edx
c001de84:	59                   	pop    ecx
c001de85:	0f b6 c0             	movzx  eax,al
c001de88:	50                   	push   eax
c001de89:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de8e:	99                   	cdq    
c001de8f:	f7 fb                	idiv   ebx
c001de91:	83 c2 30             	add    edx,0x30
c001de94:	0f b6 d2             	movzx  edx,dl
c001de97:	52                   	push   edx
c001de98:	e8 1f ef ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001de9d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dea3:	58                   	pop    eax
c001dea4:	5a                   	pop    edx
c001dea5:	6a 0f                	push   0xf
c001dea7:	6a 00                	push   0x0
c001dea9:	e8 1f ef ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001deae:	59                   	pop    ecx
c001deaf:	5a                   	pop    edx
c001deb0:	0f b6 c0             	movzx  eax,al
c001deb3:	50                   	push   eax
c001deb4:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001deb9:	99                   	cdq    
c001deba:	f7 fd                	idiv   ebp
c001debc:	99                   	cdq    
c001debd:	f7 fb                	idiv   ebx
c001debf:	8d 42 30             	lea    eax,[edx+0x30]
c001dec2:	0f b6 c0             	movzx  eax,al
c001dec5:	50                   	push   eax
c001dec6:	e8 f1 ee ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001decb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ded1:	59                   	pop    ecx
c001ded2:	5d                   	pop    ebp
c001ded3:	6a 0f                	push   0xf
c001ded5:	6a 00                	push   0x0
c001ded7:	e8 f1 ee ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001dedc:	5a                   	pop    edx
c001dedd:	59                   	pop    ecx
c001dede:	0f b6 c0             	movzx  eax,al
c001dee1:	50                   	push   eax
c001dee2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dee7:	99                   	cdq    
c001dee8:	f7 ff                	idiv   edi
c001deea:	99                   	cdq    
c001deeb:	f7 fb                	idiv   ebx
c001deed:	8d 42 30             	lea    eax,[edx+0x30]
c001def0:	0f b6 c0             	movzx  eax,al
c001def3:	50                   	push   eax
c001def4:	e8 c3 ee ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001def9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001deff:	5f                   	pop    edi
c001df00:	5d                   	pop    ebp
c001df01:	6a 0f                	push   0xf
c001df03:	6a 00                	push   0x0
c001df05:	e8 c3 ee ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001df0a:	5a                   	pop    edx
c001df0b:	59                   	pop    ecx
c001df0c:	0f b6 c0             	movzx  eax,al
c001df0f:	50                   	push   eax
c001df10:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df15:	99                   	cdq    
c001df16:	f7 fe                	idiv   esi
c001df18:	99                   	cdq    
c001df19:	f7 fb                	idiv   ebx
c001df1b:	8d 42 30             	lea    eax,[edx+0x30]
c001df1e:	0f b6 c0             	movzx  eax,al
c001df21:	50                   	push   eax
c001df22:	e8 95 ee ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001df27:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001df2d:	5e                   	pop    esi
c001df2e:	5f                   	pop    edi
c001df2f:	6a 0f                	push   0xf
c001df31:	6a 00                	push   0x0
c001df33:	e8 95 ee ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001df38:	5d                   	pop    ebp
c001df39:	5a                   	pop    edx
c001df3a:	0f b6 c0             	movzx  eax,al
c001df3d:	50                   	push   eax
c001df3e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df43:	99                   	cdq    
c001df44:	f7 fb                	idiv   ebx
c001df46:	99                   	cdq    
c001df47:	f7 fb                	idiv   ebx
c001df49:	8d 42 30             	lea    eax,[edx+0x30]
c001df4c:	0f b6 c0             	movzx  eax,al
c001df4f:	50                   	push   eax
c001df50:	e8 67 ee ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001df55:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001df5b:	59                   	pop    ecx
c001df5c:	5e                   	pop    esi
c001df5d:	6a 0f                	push   0xf
c001df5f:	6a 00                	push   0x0
c001df61:	e8 67 ee ff ff       	call   c001cdcd <combineColours(unsigned char, unsigned char)>
c001df66:	5f                   	pop    edi
c001df67:	5d                   	pop    ebp
c001df68:	0f b6 c0             	movzx  eax,al
c001df6b:	50                   	push   eax
c001df6c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df71:	99                   	cdq    
c001df72:	f7 fb                	idiv   ebx
c001df74:	83 c2 30             	add    edx,0x30
c001df77:	0f b6 d2             	movzx  edx,dl
c001df7a:	52                   	push   edx
c001df7b:	e8 3c ee ff ff       	call   c001cdbc <combineCharAndColour(char, unsigned char)>
c001df80:	83 c4 10             	add    esp,0x10
c001df83:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001df89:	31 c0                	xor    eax,eax
c001df8b:	83 c4 0c             	add    esp,0xc
c001df8e:	5b                   	pop    ebx
c001df8f:	5e                   	pop    esi
c001df90:	5f                   	pop    edi
c001df91:	5d                   	pop    ebp
c001df92:	c3                   	ret    
c001df93:	90                   	nop

c001df94 <SATAPI::write(unsigned long long, int, void*)>:
c001df94:	b8 03 00 00 00       	mov    eax,0x3
c001df99:	c3                   	ret    

c001df9a <SATAPI::close(int, int, void*)>:
c001df9a:	83 ec 0c             	sub    esp,0xc
c001df9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dfa7:	85 c0                	test   eax,eax
c001dfa9:	74 0c                	je     c001dfb7 <SATAPI::close(int, int, void*)+0x1d>
c001dfab:	8b 10                	mov    edx,DWORD PTR [eax]
c001dfad:	83 ec 0c             	sub    esp,0xc
c001dfb0:	50                   	push   eax
c001dfb1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dfb4:	83 c4 10             	add    esp,0x10
c001dfb7:	31 c0                	xor    eax,eax
c001dfb9:	83 c4 0c             	add    esp,0xc
c001dfbc:	c3                   	ret    
c001dfbd:	90                   	nop

c001dfbe <SATAPI::SATAPI()>:
c001dfbe:	83 ec 0c             	sub    esp,0xc
c001dfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc5:	83 ec 04             	sub    esp,0x4
c001dfc8:	68 00 08 00 00       	push   0x800
c001dfcd:	68 dc 2f 02 c0       	push   0xc0022fdc
c001dfd2:	50                   	push   eax
c001dfd3:	e8 1a eb fe ff       	call   c000caf2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dfd8:	83 c4 10             	add    esp,0x10
c001dfdb:	ba d0 30 02 c0       	mov    edx,0xc00230d0
c001dfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe4:	89 10                	mov    DWORD PTR [eax],edx
c001dfe6:	90                   	nop
c001dfe7:	83 c4 0c             	add    esp,0xc
c001dfea:	c3                   	ret    
c001dfeb:	90                   	nop

c001dfec <SATAPI::diskRemoved()>:
c001dfec:	c3                   	ret    
c001dfed:	90                   	nop

c001dfee <SATAPI::diskInserted()>:
c001dfee:	83 ec 18             	sub    esp,0x18
c001dff1:	68 e8 2f 02 c0       	push   0xc0022fe8
c001dff6:	e8 0f c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfff:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e006:	83 c4 1c             	add    esp,0x1c
c001e009:	c3                   	ret    

c001e00a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e00a:	55                   	push   ebp
c001e00b:	57                   	push   edi
c001e00c:	56                   	push   esi
c001e00d:	53                   	push   ebx
c001e00e:	83 ec 34             	sub    esp,0x34
c001e011:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e015:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e019:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e01d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e021:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e025:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e02b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e031:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e035:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e03b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e03f:	83 c0 02             	add    eax,0x2
c001e042:	c1 e0 07             	shl    eax,0x7
c001e045:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e04d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e051:	c1 e0 07             	shl    eax,0x7
c001e054:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e058:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e05c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e06a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e070:	e8 ff e4 ff ff       	call   c001c574 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e075:	83 c4 10             	add    esp,0x10
c001e078:	89 c2                	mov    edx,eax
c001e07a:	b8 01 00 00 00       	mov    eax,0x1
c001e07f:	83 fa ff             	cmp    edx,0xffffffff
c001e082:	0f 84 5f 02 00 00    	je     c001e2e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e090:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e096:	8b 00                	mov    eax,DWORD PTR [eax]
c001e098:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e09e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e0a4:	89 d1                	mov    ecx,edx
c001e0a6:	c1 e1 05             	shl    ecx,0x5
c001e0a9:	01 c8                	add    eax,ecx
c001e0ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e0ad:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e0b3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e0b9:	89 08                	mov    DWORD PTR [eax],ecx
c001e0bb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e0c1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e0c7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e0cd:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e0d0:	50                   	push   eax
c001e0d1:	68 90 00 00 00       	push   0x90
c001e0d6:	6a 00                	push   0x0
c001e0d8:	53                   	push   ebx
c001e0d9:	e8 12 24 fe ff       	call   c00004f0 <memset>
c001e0de:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e0e1:	b9 0c 00 00 00       	mov    ecx,0xc
c001e0e6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e0ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0ec:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e0f2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e0f6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e0fa:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e100:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e104:	48                   	dec    eax
c001e105:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e10a:	89 c1                	mov    ecx,eax
c001e10c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e112:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e117:	09 c8                	or     eax,ecx
c001e119:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e11f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e125:	83 c8 80             	or     eax,0xffffff80
c001e128:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e12e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e131:	25 00 7f 00 00       	and    eax,0x7f00
c001e136:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e13b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e13e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e142:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e14a:	c1 e8 10             	shr    eax,0x10
c001e14d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e154:	c1 e8 18             	shr    eax,0x18
c001e157:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e15a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e15e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e161:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e165:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e168:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e16c:	83 c4 10             	add    esp,0x10
c001e16f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e173:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e177:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e17b:	31 c0                	xor    eax,eax
c001e17d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e183:	80 e1 88             	and    cl,0x88
c001e186:	74 0a                	je     c001e192 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e188:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e18d:	74 0a                	je     c001e199 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e18f:	40                   	inc    eax
c001e190:	eb eb                	jmp    c001e17d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e192:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e197:	75 43                	jne    c001e1dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e199:	83 ec 0c             	sub    esp,0xc
c001e19c:	68 00 30 02 c0       	push   0xc0023000
c001e1a1:	e8 64 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e1a6:	58                   	pop    eax
c001e1a7:	5a                   	pop    edx
c001e1a8:	68 15 30 02 c0       	push   0xc0023015
c001e1ad:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e1b3:	e8 f4 a8 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e1b8:	59                   	pop    ecx
c001e1b9:	5b                   	pop    ebx
c001e1ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e1be:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e1c4:	e8 45 e4 ff ff       	call   c001c60e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e1c9:	5e                   	pop    esi
c001e1ca:	5f                   	pop    edi
c001e1cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e1cf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e1d5:	e8 14 e4 ff ff       	call   c001c5ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e1da:	eb 48                	jmp    c001e224 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e1dc:	b8 01 00 00 00       	mov    eax,0x1
c001e1e1:	88 d1                	mov    cl,dl
c001e1e3:	d3 e0                	shl    eax,cl
c001e1e5:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e1ea:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e1f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e1f4:	89 c7                	mov    edi,eax
c001e1f6:	c1 e3 07             	shl    ebx,0x7
c001e1f9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e1fd:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e203:	85 c7                	test   edi,eax
c001e205:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e20b:	0f 84 a3 00 00 00    	je     c001e2b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e211:	0f ba e0 1e          	bt     eax,0x1e
c001e215:	73 1a                	jae    c001e231 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e217:	83 ec 0c             	sub    esp,0xc
c001e21a:	68 27 30 02 c0       	push   0xc0023027
c001e21f:	e8 e6 c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e224:	83 c4 10             	add    esp,0x10
c001e227:	b8 01 00 00 00       	mov    eax,0x1
c001e22c:	e9 b6 00 00 00       	jmp    c001e2e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e231:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e237:	83 f8 0d             	cmp    eax,0xd
c001e23a:	77 0a                	ja     c001e246 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e23c:	83 ec 0c             	sub    esp,0xc
c001e23f:	68 c8 00 00 00       	push   0xc8
c001e244:	eb 28                	jmp    c001e26e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e246:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e24c:	83 f8 0d             	cmp    eax,0xd
c001e24f:	77 0a                	ja     c001e25b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e251:	83 ec 0c             	sub    esp,0xc
c001e254:	68 58 02 00 00       	push   0x258
c001e259:	eb 13                	jmp    c001e26e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e25b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e261:	83 f8 06             	cmp    eax,0x6
c001e264:	77 10                	ja     c001e276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e266:	83 ec 0c             	sub    esp,0xc
c001e269:	68 dc 05 00 00       	push   0x5dc
c001e26e:	e8 69 7d ff ff       	call   c0015fdc <milliTenthSleep(unsigned int)>
c001e273:	83 c4 10             	add    esp,0x10
c001e276:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e27a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e27d:	75 06                	jne    c001e285 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e27f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e283:	74 15                	je     c001e29a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e285:	83 fe 06             	cmp    esi,0x6
c001e288:	77 10                	ja     c001e29a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e28a:	83 ec 0c             	sub    esp,0xc
c001e28d:	68 c4 09 00 00       	push   0x9c4
c001e292:	e8 45 7d ff ff       	call   c0015fdc <milliTenthSleep(unsigned int)>
c001e297:	83 c4 10             	add    esp,0x10
c001e29a:	46                   	inc    esi
c001e29b:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e2a1:	0f 85 56 ff ff ff    	jne    c001e1fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e2a7:	83 ec 0c             	sub    esp,0xc
c001e2aa:	68 3a 30 02 c0       	push   0xc002303a
c001e2af:	e9 6b ff ff ff       	jmp    c001e21f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e2b4:	0f ba e0 1e          	bt     eax,0x1e
c001e2b8:	73 0d                	jae    c001e2c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e2ba:	83 ec 0c             	sub    esp,0xc
c001e2bd:	68 4e 30 02 c0       	push   0xc002304e
c001e2c2:	e9 58 ff ff ff       	jmp    c001e21f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e2c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e2cc:	74 17                	je     c001e2e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e2ce:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e2d3:	74 10                	je     c001e2e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e2d5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e2db:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e2df:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e2e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e2e5:	31 c0                	xor    eax,eax
c001e2e7:	83 c4 2c             	add    esp,0x2c
c001e2ea:	5b                   	pop    ebx
c001e2eb:	5e                   	pop    esi
c001e2ec:	5f                   	pop    edi
c001e2ed:	5d                   	pop    ebp
c001e2ee:	c3                   	ret    
c001e2ef:	90                   	nop

c001e2f0 <SATAPI::eject()>:
c001e2f0:	57                   	push   edi
c001e2f1:	b9 03 00 00 00       	mov    ecx,0x3
c001e2f6:	83 ec 18             	sub    esp,0x18
c001e2f9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e2fd:	fc                   	cld    
c001e2fe:	31 c0                	xor    eax,eax
c001e300:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e302:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e307:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e30c:	50                   	push   eax
c001e30d:	6a 00                	push   0x0
c001e30f:	6a 00                	push   0x0
c001e311:	6a 00                	push   0x0
c001e313:	6a 00                	push   0x0
c001e315:	6a 02                	push   0x2
c001e317:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e31b:	50                   	push   eax
c001e31c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e320:	e8 e5 fc ff ff       	call   c001e00a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e325:	83 c4 38             	add    esp,0x38
c001e328:	31 c0                	xor    eax,eax
c001e32a:	5f                   	pop    edi
c001e32b:	c3                   	ret    

c001e32c <SATAPI::detectMedia()>:
c001e32c:	53                   	push   ebx
c001e32d:	83 ec 14             	sub    esp,0x14
c001e330:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e334:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e33a:	e8 39 01 ff ff       	call   c000e478 <VCache::writeWriteBuffer()>
c001e33f:	59                   	pop    ecx
c001e340:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e346:	e8 1d 01 ff ff       	call   c000e468 <VCache::invalidateReadBuffer()>
c001e34b:	c7 04 24 63 30 02 c0 	mov    DWORD PTR [esp],0xc0023063
c001e352:	e8 b3 c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e357:	83 c4 10             	add    esp,0x10
c001e35a:	31 c0                	xor    eax,eax
c001e35c:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e363:	85 d2                	test   edx,edx
c001e365:	74 0f                	je     c001e376 <SATAPI::detectMedia()+0x4a>
c001e367:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e36d:	75 07                	jne    c001e376 <SATAPI::detectMedia()+0x4a>
c001e36f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e376:	40                   	inc    eax
c001e377:	83 f8 1a             	cmp    eax,0x1a
c001e37a:	75 e0                	jne    c001e35c <SATAPI::detectMedia()+0x30>
c001e37c:	83 c4 08             	add    esp,0x8
c001e37f:	5b                   	pop    ebx
c001e380:	c3                   	ret    
c001e381:	90                   	nop

c001e382 <SATAPI::open(int, int, void*)>:
c001e382:	56                   	push   esi
c001e383:	53                   	push   ebx
c001e384:	51                   	push   ecx
c001e385:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e389:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e38d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e397:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e39d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3a1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e3ab:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e3b5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e3bc:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e3c2:	e8 1b 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e3c7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e3cd:	89 c6                	mov    esi,eax
c001e3cf:	e8 0e 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e3d4:	81 c6 00 10 00 00    	add    esi,0x1000
c001e3da:	39 c6                	cmp    esi,eax
c001e3dc:	74 10                	je     c001e3ee <SATAPI::open(int, int, void*)+0x6c>
c001e3de:	83 ec 0c             	sub    esp,0xc
c001e3e1:	68 78 30 02 c0       	push   0xc0023078
c001e3e6:	e8 d6 2e ff ff       	call   c00112c1 <KePanic(char const*)>
c001e3eb:	83 c4 10             	add    esp,0x10
c001e3ee:	83 ec 0c             	sub    esp,0xc
c001e3f1:	6a 02                	push   0x2
c001e3f3:	e8 fd b1 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e3f8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e3fe:	6a 03                	push   0x3
c001e400:	50                   	push   eax
c001e401:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e407:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e40d:	e8 ec b8 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e412:	83 c4 14             	add    esp,0x14
c001e415:	68 78 01 00 00       	push   0x178
c001e41a:	e8 b4 96 fe ff       	call   c0007ad3 <malloc>
c001e41f:	83 c4 0c             	add    esp,0xc
c001e422:	6a 00                	push   0x0
c001e424:	68 ff ff ff 7f       	push   0x7fffffff
c001e429:	6a 00                	push   0x0
c001e42b:	6a 00                	push   0x0
c001e42d:	53                   	push   ebx
c001e42e:	68 8e 30 02 c0       	push   0xc002308e
c001e433:	89 c6                	mov    esi,eax
c001e435:	50                   	push   eax
c001e436:	e8 97 f4 fe ff       	call   c000d8d2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e43b:	83 c4 14             	add    esp,0x14
c001e43e:	56                   	push   esi
c001e43f:	e8 4e f5 fe ff       	call   c000d992 <LogicalDisk::assignDriveLetter()>
c001e444:	5a                   	pop    edx
c001e445:	59                   	pop    ecx
c001e446:	0f be c0             	movsx  eax,al
c001e449:	50                   	push   eax
c001e44a:	68 e0 2e 02 c0       	push   0xc0022ee0
c001e44f:	e8 b6 c4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e454:	58                   	pop    eax
c001e455:	5a                   	pop    edx
c001e456:	56                   	push   esi
c001e457:	53                   	push   ebx
c001e458:	e8 c7 e2 fe ff       	call   c000c724 <Device::addChild(Device*)>
c001e45d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e463:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e466:	e8 ef e6 fe ff       	call   c000cb5a <PhysicalDisk::startCache()>
c001e46b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e472:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e475:	e8 b2 fe ff ff       	call   c001e32c <SATAPI::detectMedia()>
c001e47a:	83 c4 14             	add    esp,0x14
c001e47d:	31 c0                	xor    eax,eax
c001e47f:	5b                   	pop    ebx
c001e480:	5e                   	pop    esi
c001e481:	c3                   	ret    

c001e482 <SATAPI::read(unsigned long long, int, void*)>:
c001e482:	55                   	push   ebp
c001e483:	57                   	push   edi
c001e484:	56                   	push   esi
c001e485:	53                   	push   ebx
c001e486:	83 ec 3c             	sub    esp,0x3c
c001e489:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e48d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e491:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e495:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e499:	83 fd 04             	cmp    ebp,0x4
c001e49c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e4a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e4a4:	7e 10                	jle    c001e4b6 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	68 9c 30 02 c0       	push   0xc002309c
c001e4ae:	e8 0e 2e ff ff       	call   c00112c1 <KePanic(char const*)>
c001e4b3:	83 c4 10             	add    esp,0x10
c001e4b6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e4bc:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e4c2:	51                   	push   ecx
c001e4c3:	50                   	push   eax
c001e4c4:	83 c0 02             	add    eax,0x2
c001e4c7:	c1 e0 07             	shl    eax,0x7
c001e4ca:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e4d0:	50                   	push   eax
c001e4d1:	52                   	push   edx
c001e4d2:	e8 61 e1 ff ff       	call   c001c638 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4d7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e4db:	b9 03 00 00 00       	mov    ecx,0x3
c001e4e0:	fc                   	cld    
c001e4e1:	31 c0                	xor    eax,eax
c001e4e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e4e5:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e4ea:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e4ef:	83 c4 0c             	add    esp,0xc
c001e4f2:	6a 00                	push   0x0
c001e4f4:	6a 00                	push   0x0
c001e4f6:	6a 00                	push   0x0
c001e4f8:	6a 00                	push   0x0
c001e4fa:	6a 02                	push   0x2
c001e4fc:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e500:	50                   	push   eax
c001e501:	53                   	push   ebx
c001e502:	e8 03 fb ff ff       	call   c001e00a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e507:	83 c4 20             	add    esp,0x20
c001e50a:	85 c0                	test   eax,eax
c001e50c:	89 c6                	mov    esi,eax
c001e50e:	75 46                	jne    c001e556 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e510:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e514:	b9 03 00 00 00       	mov    ecx,0x3
c001e519:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e51b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e51f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e524:	0f c8                	bswap  eax
c001e526:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e52a:	89 e8                	mov    eax,ebp
c001e52c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e530:	50                   	push   eax
c001e531:	55                   	push   ebp
c001e532:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e536:	c1 e5 0b             	shl    ebp,0xb
c001e539:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e53d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e541:	55                   	push   ebp
c001e542:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e546:	50                   	push   eax
c001e547:	53                   	push   ebx
c001e548:	e8 bd fa ff ff       	call   c001e00a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e54d:	83 c4 20             	add    esp,0x20
c001e550:	85 c0                	test   eax,eax
c001e552:	89 c6                	mov    esi,eax
c001e554:	74 0c                	je     c001e562 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e556:	83 ec 0c             	sub    esp,0xc
c001e559:	53                   	push   ebx
c001e55a:	e8 cd fd ff ff       	call   c001e32c <SATAPI::detectMedia()>
c001e55f:	83 c4 10             	add    esp,0x10
c001e562:	83 c4 3c             	add    esp,0x3c
c001e565:	89 f0                	mov    eax,esi
c001e567:	5b                   	pop    ebx
c001e568:	5e                   	pop    esi
c001e569:	5f                   	pop    edi
c001e56a:	5d                   	pop    ebp
c001e56b:	c3                   	ret    

c001e56c <IOAPIC::close(int, int, void*)>:
c001e56c:	b8 00 00 00 00       	mov    eax,0x0
c001e571:	c3                   	ret    

c001e572 <apicGetBase()>:
c001e572:	55                   	push   ebp
c001e573:	89 e5                	mov    ebp,esp
c001e575:	83 ec 18             	sub    esp,0x18
c001e578:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e57d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e583:	83 e0 08             	and    eax,0x8
c001e586:	0f b6 c0             	movzx  eax,al
c001e589:	85 c0                	test   eax,eax
c001e58b:	75 07                	jne    c001e594 <apicGetBase()+0x22>
c001e58d:	b8 00 00 00 00       	mov    eax,0x0
c001e592:	eb 21                	jmp    c001e5b5 <apicGetBase()+0x43>
c001e594:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e599:	83 ec 08             	sub    esp,0x8
c001e59c:	6a 1b                	push   0x1b
c001e59e:	50                   	push   eax
c001e59f:	e8 3e 8b fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e5a4:	83 c4 10             	add    esp,0x10
c001e5a7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e5aa:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e5ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5b0:	25 00 00 ff ff       	and    eax,0xffff0000
c001e5b5:	c9                   	leave  
c001e5b6:	c3                   	ret    
c001e5b7:	90                   	nop

c001e5b8 <IOAPIC::IOAPIC()>:
c001e5b8:	83 ec 0c             	sub    esp,0xc
c001e5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5bf:	83 ec 08             	sub    esp,0x8
c001e5c2:	68 00 31 02 c0       	push   0xc0023100
c001e5c7:	50                   	push   eax
c001e5c8:	e8 ef e2 fe ff       	call   c000c8bc <Device::Device(char const*)>
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	ba 10 31 02 c0       	mov    edx,0xc0023110
c001e5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5d9:	89 10                	mov    DWORD PTR [eax],edx
c001e5db:	90                   	nop
c001e5dc:	83 c4 0c             	add    esp,0xc
c001e5df:	c3                   	ret    

c001e5e0 <apicOpen()>:
c001e5e0:	55                   	push   ebp
c001e5e1:	89 e5                	mov    ebp,esp
c001e5e3:	53                   	push   ebx
c001e5e4:	83 ec 34             	sub    esp,0x34
c001e5e7:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e5ec:	83 f0 01             	xor    eax,0x1
c001e5ef:	0f b6 c0             	movzx  eax,al
c001e5f2:	85 c0                	test   eax,eax
c001e5f4:	0f 84 a3 00 00 00    	je     c001e69d <apicOpen()+0xbd>
c001e5fa:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e5fe:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e603:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e607:	0f b6 c0             	movzx  eax,al
c001e60a:	39 c2                	cmp    edx,eax
c001e60c:	0f 83 84 00 00 00    	jae    c001e696 <apicOpen()+0xb6>
c001e612:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e619:	83 ec 0c             	sub    esp,0xc
c001e61c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e61f:	e8 af 94 fe ff       	call   c0007ad3 <malloc>
c001e624:	83 c4 10             	add    esp,0x10
c001e627:	89 c3                	mov    ebx,eax
c001e629:	83 ec 0c             	sub    esp,0xc
c001e62c:	53                   	push   ebx
c001e62d:	e8 86 ff ff ff       	call   c001e5b8 <IOAPIC::IOAPIC()>
c001e632:	83 c4 10             	add    esp,0x10
c001e635:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e638:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e63c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e63f:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e646:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e64b:	83 c0 01             	add    eax,0x1
c001e64e:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e653:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e658:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e65e:	83 ec 08             	sub    esp,0x8
c001e661:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e664:	50                   	push   eax
c001e665:	e8 ba e0 fe ff       	call   c000c724 <Device::addChild(Device*)>
c001e66a:	83 c4 10             	add    esp,0x10
c001e66d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e670:	8b 00                	mov    eax,DWORD PTR [eax]
c001e672:	83 c0 08             	add    eax,0x8
c001e675:	8b 00                	mov    eax,DWORD PTR [eax]
c001e677:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e67b:	6a 00                	push   0x0
c001e67d:	6a 00                	push   0x0
c001e67f:	52                   	push   edx
c001e680:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e683:	ff d0                	call   eax
c001e685:	83 c4 10             	add    esp,0x10
c001e688:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e68b:	83 c0 01             	add    eax,0x1
c001e68e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e691:	e9 68 ff ff ff       	jmp    c001e5fe <apicOpen()+0x1e>
c001e696:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e69d:	e8 d0 fe ff ff       	call   c001e572 <apicGetBase()>
c001e6a2:	05 f0 00 00 00       	add    eax,0xf0
c001e6a7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6aa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e6ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6af:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e6b2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e6b9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e6c0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e6c3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e6c6:	89 10                	mov    DWORD PTR [eax],edx
c001e6c8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e6cf:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e6d4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e6d7:	7d 7c                	jge    c001e755 <apicOpen()+0x175>
c001e6d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6dc:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e6e3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e6e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6e9:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e6f0:	c1 e8 08             	shr    eax,0x8
c001e6f3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e6f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6fa:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e701:	c1 e8 18             	shr    eax,0x18
c001e704:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e707:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e70b:	3d ff 00 00 00       	cmp    eax,0xff
c001e710:	75 3a                	jne    c001e74c <apicOpen()+0x16c>
c001e712:	e8 5b fe ff ff       	call   c001e572 <apicGetBase()>
c001e717:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e71b:	83 fa 01             	cmp    edx,0x1
c001e71e:	75 07                	jne    c001e727 <apicOpen()+0x147>
c001e720:	ba 60 03 00 00       	mov    edx,0x360
c001e725:	eb 05                	jmp    c001e72c <apicOpen()+0x14c>
c001e727:	ba 50 03 00 00       	mov    edx,0x350
c001e72c:	01 d0                	add    eax,edx
c001e72e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e731:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e734:	8b 00                	mov    eax,DWORD PTR [eax]
c001e736:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e739:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e740:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e744:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e747:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e74a:	89 10                	mov    DWORD PTR [eax],edx
c001e74c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e750:	e9 7a ff ff ff       	jmp    c001e6cf <apicOpen()+0xef>
c001e755:	90                   	nop
c001e756:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e759:	c9                   	leave  
c001e75a:	c3                   	ret    
c001e75b:	90                   	nop

c001e75c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e75c:	55                   	push   ebp
c001e75d:	89 e5                	mov    ebp,esp
c001e75f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e762:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e768:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e76b:	72 1d                	jb     c001e78a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e76d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e770:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e779:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e77f:	01 d0                	add    eax,edx
c001e781:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e784:	73 04                	jae    c001e78a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e786:	b0 01                	mov    al,0x1
c001e788:	eb 02                	jmp    c001e78c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e78a:	b0 00                	mov    al,0x0
c001e78c:	5d                   	pop    ebp
c001e78d:	c3                   	ret    

c001e78e <IOAPIC::read(int)>:
c001e78e:	55                   	push   ebp
c001e78f:	89 e5                	mov    ebp,esp
c001e791:	83 ec 10             	sub    esp,0x10
c001e794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e797:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e79d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e7a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7a3:	0f b6 d0             	movzx  edx,al
c001e7a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7a9:	89 10                	mov    DWORD PTR [eax],edx
c001e7ab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7ae:	83 c0 10             	add    eax,0x10
c001e7b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7b3:	c9                   	leave  
c001e7b4:	c3                   	ret    
c001e7b5:	90                   	nop

c001e7b6 <IOAPIC::open(int, int, void*)>:
c001e7b6:	55                   	push   ebp
c001e7b7:	89 e5                	mov    ebp,esp
c001e7b9:	57                   	push   edi
c001e7ba:	56                   	push   esi
c001e7bb:	53                   	push   ebx
c001e7bc:	83 ec 04             	sub    esp,0x4
c001e7bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7c2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7c5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e7cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e7d4:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e7db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7de:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e7e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e7ed:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e7f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7f7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e7fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e800:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e809:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e80f:	0f b6 f0             	movzx  esi,al
c001e812:	89 d0                	mov    eax,edx
c001e814:	ba 00 00 00 00       	mov    edx,0x0
c001e819:	89 c7                	mov    edi,eax
c001e81b:	83 e7 ff             	and    edi,0xffffffff
c001e81e:	89 f9                	mov    ecx,edi
c001e820:	0f b6 da             	movzx  ebx,dl
c001e823:	89 c8                	mov    eax,ecx
c001e825:	89 da                	mov    edx,ebx
c001e827:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e82a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e82d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e831:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e835:	83 e0 00             	and    eax,0x0
c001e838:	09 d0                	or     eax,edx
c001e83a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e83e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e841:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e847:	8d 50 01             	lea    edx,[eax+0x1]
c001e84a:	88 d1                	mov    cl,dl
c001e84c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e84f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e855:	0f b6 d0             	movzx  edx,al
c001e858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e85b:	83 c2 08             	add    edx,0x8
c001e85e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e862:	0f b6 c9             	movzx  ecx,cl
c001e865:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e86b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e86f:	6a 01                	push   0x1
c001e871:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e874:	e8 15 ff ff ff       	call   c001e78e <IOAPIC::read(int)>
c001e879:	83 c4 08             	add    esp,0x8
c001e87c:	c1 f8 10             	sar    eax,0x10
c001e87f:	0f b6 c0             	movzx  eax,al
c001e882:	8d 50 01             	lea    edx,[eax+0x1]
c001e885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e888:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e88e:	b8 00 00 00 00       	mov    eax,0x0
c001e893:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e896:	5b                   	pop    ebx
c001e897:	5e                   	pop    esi
c001e898:	5f                   	pop    edi
c001e899:	5d                   	pop    ebp
c001e89a:	c3                   	ret    
c001e89b:	90                   	nop

c001e89c <IOAPIC::write(int, int)>:
c001e89c:	55                   	push   ebp
c001e89d:	89 e5                	mov    ebp,esp
c001e89f:	83 ec 10             	sub    esp,0x10
c001e8a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e8ab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e8ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e8b1:	0f b6 d0             	movzx  edx,al
c001e8b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e8b7:	89 10                	mov    DWORD PTR [eax],edx
c001e8b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e8bc:	8d 50 10             	lea    edx,[eax+0x10]
c001e8bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e8c2:	89 02                	mov    DWORD PTR [edx],eax
c001e8c4:	90                   	nop
c001e8c5:	c9                   	leave  
c001e8c6:	c3                   	ret    
c001e8c7:	90                   	nop

c001e8c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e8c8:	55                   	push   ebp
c001e8c9:	89 e5                	mov    ebp,esp
c001e8cb:	53                   	push   ebx
c001e8cc:	83 ec 2c             	sub    esp,0x2c
c001e8cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e8d2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e8d5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e8d8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e8db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e8de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e8e1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e8e4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e8e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e8ea:	88 d8                	mov    al,bl
c001e8ec:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e8ef:	88 c8                	mov    al,cl
c001e8f1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e8f4:	88 d0                	mov    al,dl
c001e8f6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e8f9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e8fd:	83 c0 08             	add    eax,0x8
c001e900:	d1 e0                	shl    eax,1
c001e902:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e905:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e909:	83 c0 08             	add    eax,0x8
c001e90c:	d1 e0                	shl    eax,1
c001e90e:	83 c0 01             	add    eax,0x1
c001e911:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e914:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e917:	50                   	push   eax
c001e918:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e91b:	e8 6e fe ff ff       	call   c001e78e <IOAPIC::read(int)>
c001e920:	83 c4 08             	add    esp,0x8
c001e923:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e926:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e92d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e930:	c1 e0 18             	shl    eax,0x18
c001e933:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e936:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e939:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e93c:	52                   	push   edx
c001e93d:	50                   	push   eax
c001e93e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e941:	e8 56 ff ff ff       	call   c001e89c <IOAPIC::write(int, int)>
c001e946:	83 c4 0c             	add    esp,0xc
c001e949:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e94c:	50                   	push   eax
c001e94d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e950:	e8 39 fe ff ff       	call   c001e78e <IOAPIC::read(int)>
c001e955:	83 c4 08             	add    esp,0x8
c001e958:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e95b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e962:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e969:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e970:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e974:	85 c0                	test   eax,eax
c001e976:	74 09                	je     c001e981 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e978:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e97f:	eb 07                	jmp    c001e988 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e981:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e988:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e98c:	85 c0                	test   eax,eax
c001e98e:	74 09                	je     c001e999 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e990:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e997:	eb 07                	jmp    c001e9a0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e999:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e9a0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e9a7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e9ab:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e9ae:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e9b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9b4:	52                   	push   edx
c001e9b5:	50                   	push   eax
c001e9b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9b9:	e8 de fe ff ff       	call   c001e89c <IOAPIC::write(int, int)>
c001e9be:	83 c4 0c             	add    esp,0xc
c001e9c1:	90                   	nop
c001e9c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e9c5:	c9                   	leave  
c001e9c6:	c3                   	ret    
c001e9c7:	90                   	nop

c001e9c8 <APICTimer::close(int, int, void*)>:
c001e9c8:	b8 00 00 00 00       	mov    eax,0x0
c001e9cd:	c3                   	ret    
c001e9ce:	66 90                	xchg   ax,ax

c001e9d0 <apicTimerHandler(regs*, void*)>:
c001e9d0:	83 ec 0c             	sub    esp,0xc
c001e9d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e9d9:	b8 10 27 00 00       	mov    eax,0x2710
c001e9de:	ba 00 00 00 00       	mov    edx,0x0
c001e9e3:	f7 f1                	div    ecx
c001e9e5:	83 ec 0c             	sub    esp,0xc
c001e9e8:	50                   	push   eax
c001e9e9:	e8 a2 f7 fe ff       	call   c000e190 <timerHandler(unsigned int)>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	90                   	nop
c001e9f2:	83 c4 0c             	add    esp,0xc
c001e9f5:	c3                   	ret    
c001e9f6:	66 90                	xchg   ax,ax

c001e9f8 <APICTimer::open(int, int, void*)>:
c001e9f8:	83 ec 0c             	sub    esp,0xc
c001e9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea01:	83 c0 24             	add    eax,0x24
c001ea04:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea06:	83 ec 08             	sub    esp,0x8
c001ea09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea11:	ff d0                	call   eax
c001ea13:	83 c4 10             	add    esp,0x10
c001ea16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea1e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ea24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea2c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ea32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea36:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ea3c:	83 ec 0c             	sub    esp,0xc
c001ea3f:	51                   	push   ecx
c001ea40:	6a 01                	push   0x1
c001ea42:	68 d0 e9 01 c0       	push   0xc001e9d0
c001ea47:	52                   	push   edx
c001ea48:	50                   	push   eax
c001ea49:	e8 82 dc fe ff       	call   c000c6d0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea4e:	83 c4 20             	add    esp,0x20
c001ea51:	89 c2                	mov    edx,eax
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ea5d:	b8 00 00 00 00       	mov    eax,0x0
c001ea62:	83 c4 0c             	add    esp,0xc
c001ea65:	c3                   	ret    
c001ea66:	66 90                	xchg   ax,ax

c001ea68 <APICTimer::write(int)>:
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	83 ec 0c             	sub    esp,0xc
c001ea6e:	68 34 31 02 c0       	push   0xc0023134
c001ea73:	e8 49 28 ff ff       	call   c00112c1 <KePanic(char const*)>
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea83:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea89:	90                   	nop
c001ea8a:	83 c4 0c             	add    esp,0xc
c001ea8d:	c3                   	ret    
c001ea8e:	66 90                	xchg   ax,ax

c001ea90 <APICTimer::APICTimer()>:
c001ea90:	83 ec 0c             	sub    esp,0xc
c001ea93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea97:	83 ec 08             	sub    esp,0x8
c001ea9a:	68 44 31 02 c0       	push   0xc0023144
c001ea9f:	50                   	push   eax
c001eaa0:	e8 1f f6 fe ff       	call   c000e0c4 <Timer::Timer(char const*)>
c001eaa5:	83 c4 10             	add    esp,0x10
c001eaa8:	ba 58 31 02 c0       	mov    edx,0xc0023158
c001eaad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab1:	89 10                	mov    DWORD PTR [eax],edx
c001eab3:	90                   	nop
c001eab4:	83 c4 0c             	add    esp,0xc
c001eab7:	c3                   	ret    

c001eab8 <PIT::write(int)>:
c001eab8:	83 ec 10             	sub    esp,0x10
c001eabb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eabf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eac3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eac9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eacd:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001ead2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ead7:	89 c2                	mov    edx,eax
c001ead9:	c1 fa 1f             	sar    edx,0x1f
c001eadc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eae0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eae4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eaeb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eaf0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eaf4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eaf9:	ee                   	out    dx,al
c001eafa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eafe:	0f b6 c0             	movzx  eax,al
c001eb01:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eb08:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eb0c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eb10:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eb15:	ee                   	out    dx,al
c001eb16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb1a:	c1 f8 08             	sar    eax,0x8
c001eb1d:	0f b6 c0             	movzx  eax,al
c001eb20:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eb27:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eb2b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eb2f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eb34:	ee                   	out    dx,al
c001eb35:	90                   	nop
c001eb36:	83 c4 10             	add    esp,0x10
c001eb39:	c3                   	ret    
c001eb3a:	66 90                	xchg   ax,ax

c001eb3c <pitHandler(regs*, void*)>:
c001eb3c:	83 ec 0c             	sub    esp,0xc
c001eb3f:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001eb45:	b8 10 27 00 00       	mov    eax,0x2710
c001eb4a:	89 c2                	mov    edx,eax
c001eb4c:	c1 fa 1f             	sar    edx,0x1f
c001eb4f:	f7 f9                	idiv   ecx
c001eb51:	83 ec 0c             	sub    esp,0xc
c001eb54:	50                   	push   eax
c001eb55:	e8 36 f6 fe ff       	call   c000e190 <timerHandler(unsigned int)>
c001eb5a:	83 c4 10             	add    esp,0x10
c001eb5d:	90                   	nop
c001eb5e:	83 c4 0c             	add    esp,0xc
c001eb61:	c3                   	ret    
c001eb62:	66 90                	xchg   ax,ax

c001eb64 <PIT::open(int, int, void*)>:
c001eb64:	83 ec 0c             	sub    esp,0xc
c001eb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb6d:	83 c0 24             	add    eax,0x24
c001eb70:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb72:	83 ec 08             	sub    esp,0x8
c001eb75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb7d:	ff d0                	call   eax
c001eb7f:	83 c4 10             	add    esp,0x10
c001eb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb86:	83 ec 0c             	sub    esp,0xc
c001eb89:	6a 00                	push   0x0
c001eb8b:	6a 01                	push   0x1
c001eb8d:	68 3c eb 01 c0       	push   0xc001eb3c
c001eb92:	6a 00                	push   0x0
c001eb94:	50                   	push   eax
c001eb95:	e8 36 db fe ff       	call   c000c6d0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb9a:	83 c4 20             	add    esp,0x20
c001eb9d:	89 c2                	mov    edx,eax
c001eb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eba9:	b8 00 00 00 00       	mov    eax,0x0
c001ebae:	83 c4 0c             	add    esp,0xc
c001ebb1:	c3                   	ret    
c001ebb2:	66 90                	xchg   ax,ax

c001ebb4 <PIT::close(int, int, void*)>:
c001ebb4:	83 ec 0c             	sub    esp,0xc
c001ebb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ebc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc9:	6a 01                	push   0x1
c001ebcb:	68 3c eb 01 c0       	push   0xc001eb3c
c001ebd0:	6a 00                	push   0x0
c001ebd2:	50                   	push   eax
c001ebd3:	e8 2e db fe ff       	call   c000c706 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ebd8:	83 c4 10             	add    esp,0x10
c001ebdb:	b8 00 00 00 00       	mov    eax,0x0
c001ebe0:	83 c4 0c             	add    esp,0xc
c001ebe3:	c3                   	ret    

c001ebe4 <PIT::PIT()>:
c001ebe4:	83 ec 0c             	sub    esp,0xc
c001ebe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebeb:	83 ec 08             	sub    esp,0x8
c001ebee:	68 80 31 02 c0       	push   0xc0023180
c001ebf3:	50                   	push   eax
c001ebf4:	e8 cb f4 fe ff       	call   c000e0c4 <Timer::Timer(char const*)>
c001ebf9:	83 c4 10             	add    esp,0x10
c001ebfc:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c001ec01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec05:	89 10                	mov    DWORD PTR [eax],edx
c001ec07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec11:	0f b6 d0             	movzx  edx,al
c001ec14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec18:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ec1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec29:	0f b6 d0             	movzx  edx,al
c001ec2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec30:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ec35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec39:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec3f:	8d 50 01             	lea    edx,[eax+0x1]
c001ec42:	88 d1                	mov    cl,dl
c001ec44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec48:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ec4e:	0f b6 d0             	movzx  edx,al
c001ec51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec55:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ec59:	83 e1 3f             	and    ecx,0x3f
c001ec5c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ec60:	90                   	nop
c001ec61:	83 c4 0c             	add    esp,0xc
c001ec64:	c3                   	ret    
c001ec65:	66 90                	xchg   ax,ax
c001ec67:	66 90                	xchg   ax,ax
c001ec69:	66 90                	xchg   ax,ax
c001ec6b:	66 90                	xchg   ax,ax
c001ec6d:	66 90                	xchg   ax,ax
c001ec6f:	90                   	nop

c001ec70 <avxDetect>:
c001ec70:	b8 01 00 00 00       	mov    eax,0x1
c001ec75:	0f a2                	cpuid  
c001ec77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ec7d:	74 15                	je     c001ec94 <avxDetect.noAVX>
c001ec7f:	b8 01 00 00 00       	mov    eax,0x1
c001ec84:	0f a2                	cpuid  
c001ec86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ec8c:	74 06                	je     c001ec94 <avxDetect.noAVX>
c001ec8e:	b8 01 00 00 00       	mov    eax,0x1
c001ec93:	c3                   	ret    

c001ec94 <avxDetect.noAVX>:
c001ec94:	b8 00 00 00 00       	mov    eax,0x0
c001ec99:	c3                   	ret    

c001ec9a <avxSave>:
c001ec9a:	53                   	push   ebx
c001ec9b:	52                   	push   edx
c001ec9c:	31 c0                	xor    eax,eax
c001ec9e:	48                   	dec    eax
c001ec9f:	89 c2                	mov    edx,eax
c001eca1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eca5:	0f ae 23             	xsave  [ebx]
c001eca8:	5a                   	pop    edx
c001eca9:	5b                   	pop    ebx
c001ecaa:	c3                   	ret    

c001ecab <avxLoad>:
c001ecab:	53                   	push   ebx
c001ecac:	52                   	push   edx
c001ecad:	31 c0                	xor    eax,eax
c001ecaf:	48                   	dec    eax
c001ecb0:	89 c2                	mov    edx,eax
c001ecb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ecb6:	0f ae 2b             	xrstor [ebx]
c001ecb9:	5a                   	pop    edx
c001ecba:	5b                   	pop    ebx
c001ecbb:	c3                   	ret    

c001ecbc <avxInit>:
c001ecbc:	e8 67 03 00 00       	call   c001f028 <sseInit>
c001ecc1:	50                   	push   eax
c001ecc2:	51                   	push   ecx
c001ecc3:	0f 20 e0             	mov    eax,cr4
c001ecc6:	0d 00 00 04 00       	or     eax,0x40000
c001eccb:	0f 22 e0             	mov    cr4,eax
c001ecce:	31 c9                	xor    ecx,ecx
c001ecd0:	0f 01 d0             	xgetbv 
c001ecd3:	0d 07 00 00 00       	or     eax,0x7
c001ecd8:	0f 01 d1             	xsetbv 
c001ecdb:	59                   	pop    ecx
c001ecdc:	58                   	pop    eax
c001ecdd:	c3                   	ret    

c001ecde <avxClose>:
c001ecde:	c3                   	ret    

c001ecdf <wouldSheSayYes>:
c001ecdf:	c3                   	ret    
c001ece0:	49                   	dec    ecx
c001ece1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ece5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ece9:	75 20                	jne    c001ed0b <isr0+0xb>
c001eceb:	4e                   	dec    esi
c001ecec:	79 61                	jns    c001ed4f <isr7+0x3>
c001ecee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ecf3:	66 90                	xchg   ax,ax
c001ecf5:	66 90                	xchg   ax,ax
c001ecf7:	66 90                	xchg   ax,ax
c001ecf9:	66 90                	xchg   ax,ax
c001ecfb:	66 90                	xchg   ax,ax
c001ecfd:	66 90                	xchg   ax,ax
c001ecff:	90                   	nop

c001ed00 <isr0>:
c001ed00:	fa                   	cli    
c001ed01:	68 00 00 00 00       	push   0x0
c001ed06:	68 00 00 00 00       	push   0x0
c001ed0b:	e9 56 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed10 <isr1>:
c001ed10:	fa                   	cli    
c001ed11:	6a 00                	push   0x0
c001ed13:	6a 01                	push   0x1
c001ed15:	e9 4c 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed1a <isr2>:
c001ed1a:	fa                   	cli    
c001ed1b:	6a 00                	push   0x0
c001ed1d:	6a 02                	push   0x2
c001ed1f:	e9 42 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed24 <isr3>:
c001ed24:	fa                   	cli    
c001ed25:	6a 00                	push   0x0
c001ed27:	6a 03                	push   0x3
c001ed29:	e9 38 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed2e <isr4>:
c001ed2e:	fa                   	cli    
c001ed2f:	6a 00                	push   0x0
c001ed31:	6a 04                	push   0x4
c001ed33:	e9 2e 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed38 <isr5>:
c001ed38:	fa                   	cli    
c001ed39:	6a 00                	push   0x0
c001ed3b:	6a 05                	push   0x5
c001ed3d:	e9 24 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed42 <isr6>:
c001ed42:	fa                   	cli    
c001ed43:	6a 00                	push   0x0
c001ed45:	6a 06                	push   0x6
c001ed47:	e9 1a 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed4c <isr7>:
c001ed4c:	fa                   	cli    
c001ed4d:	6a 00                	push   0x0
c001ed4f:	6a 07                	push   0x7
c001ed51:	e9 10 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed56 <isr8>:
c001ed56:	fa                   	cli    
c001ed57:	6a 08                	push   0x8
c001ed59:	e9 08 01 00 00       	jmp    c001ee66 <int_common_stub>

c001ed5e <isr9>:
c001ed5e:	fa                   	cli    
c001ed5f:	6a 00                	push   0x0
c001ed61:	6a 09                	push   0x9
c001ed63:	e9 fe 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed68 <isr10>:
c001ed68:	fa                   	cli    
c001ed69:	6a 0a                	push   0xa
c001ed6b:	e9 f6 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed70 <isr11>:
c001ed70:	fa                   	cli    
c001ed71:	6a 0b                	push   0xb
c001ed73:	e9 ee 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed78 <isr12>:
c001ed78:	fa                   	cli    
c001ed79:	6a 0c                	push   0xc
c001ed7b:	e9 e6 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed80 <isr13>:
c001ed80:	fa                   	cli    
c001ed81:	6a 0d                	push   0xd
c001ed83:	53                   	push   ebx
c001ed84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed88:	81 fb 56 ef 01 c0    	cmp    ebx,0xc001ef56
c001ed8e:	5b                   	pop    ebx
c001ed8f:	0f 84 c3 01 00 00    	je     c001ef58 <finishSignal2>
c001ed95:	e9 cc 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ed9a <isr14>:
c001ed9a:	fa                   	cli    
c001ed9b:	6a 0e                	push   0xe
c001ed9d:	e9 c4 00 00 00       	jmp    c001ee66 <int_common_stub>

c001eda2 <isr15>:
c001eda2:	fa                   	cli    
c001eda3:	6a 00                	push   0x0
c001eda5:	6a 0f                	push   0xf
c001eda7:	e9 ba 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edac <isr16>:
c001edac:	fa                   	cli    
c001edad:	6a 00                	push   0x0
c001edaf:	6a 10                	push   0x10
c001edb1:	e9 b0 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edb6 <isr17>:
c001edb6:	fa                   	cli    
c001edb7:	6a 00                	push   0x0
c001edb9:	6a 11                	push   0x11
c001edbb:	e9 a6 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edc0 <isr18>:
c001edc0:	fa                   	cli    
c001edc1:	6a 00                	push   0x0
c001edc3:	6a 12                	push   0x12
c001edc5:	e9 9c 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edca <irq3>:
c001edca:	fa                   	cli    
c001edcb:	6a 00                	push   0x0
c001edcd:	6a 23                	push   0x23
c001edcf:	e9 92 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edd4 <irq4>:
c001edd4:	fa                   	cli    
c001edd5:	6a 00                	push   0x0
c001edd7:	6a 24                	push   0x24
c001edd9:	e9 88 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edde <irq5>:
c001edde:	fa                   	cli    
c001eddf:	6a 00                	push   0x0
c001ede1:	6a 25                	push   0x25
c001ede3:	e9 7e 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ede8 <irq6>:
c001ede8:	fa                   	cli    
c001ede9:	6a 00                	push   0x0
c001edeb:	6a 26                	push   0x26
c001eded:	e9 74 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edf2 <irq7>:
c001edf2:	fa                   	cli    
c001edf3:	6a 00                	push   0x0
c001edf5:	6a 27                	push   0x27
c001edf7:	e9 6a 00 00 00       	jmp    c001ee66 <int_common_stub>

c001edfc <irq8>:
c001edfc:	fa                   	cli    
c001edfd:	6a 00                	push   0x0
c001edff:	6a 28                	push   0x28
c001ee01:	e9 60 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee06 <irq9>:
c001ee06:	fa                   	cli    
c001ee07:	6a 00                	push   0x0
c001ee09:	6a 29                	push   0x29
c001ee0b:	e9 56 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee10 <irq10>:
c001ee10:	fa                   	cli    
c001ee11:	6a 00                	push   0x0
c001ee13:	6a 2a                	push   0x2a
c001ee15:	e9 4c 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee1a <irq11>:
c001ee1a:	fa                   	cli    
c001ee1b:	6a 00                	push   0x0
c001ee1d:	6a 2b                	push   0x2b
c001ee1f:	e9 42 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee24 <irq12>:
c001ee24:	fa                   	cli    
c001ee25:	6a 00                	push   0x0
c001ee27:	6a 2c                	push   0x2c
c001ee29:	e9 38 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee2e <irq13>:
c001ee2e:	fa                   	cli    
c001ee2f:	6a 00                	push   0x0
c001ee31:	6a 2d                	push   0x2d
c001ee33:	e9 2e 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee38 <irq14>:
c001ee38:	fa                   	cli    
c001ee39:	6a 00                	push   0x0
c001ee3b:	6a 2e                	push   0x2e
c001ee3d:	e9 24 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee42 <irq15>:
c001ee42:	fa                   	cli    
c001ee43:	6a 00                	push   0x0
c001ee45:	6a 2f                	push   0x2f
c001ee47:	e9 1a 00 00 00       	jmp    c001ee66 <int_common_stub>

c001ee4c <irq1>:
c001ee4c:	fa                   	cli    
c001ee4d:	6a 00                	push   0x0
c001ee4f:	6a 21                	push   0x21
c001ee51:	eb 13                	jmp    c001ee66 <int_common_stub>

c001ee53 <irq2>:
c001ee53:	fa                   	cli    
c001ee54:	6a 00                	push   0x0
c001ee56:	6a 22                	push   0x22
c001ee58:	eb 0c                	jmp    c001ee66 <int_common_stub>

c001ee5a <isr96>:
c001ee5a:	6a 00                	push   0x0
c001ee5c:	6a 60                	push   0x60
c001ee5e:	fb                   	sti    
c001ee5f:	eb 37                	jmp    c001ee98 <syscall_common_stub>

c001ee61 <irq0>:
c001ee61:	fa                   	cli    
c001ee62:	6a 00                	push   0x0
c001ee64:	6a 20                	push   0x20

c001ee66 <int_common_stub>:
c001ee66:	60                   	pusha  
c001ee67:	1e                   	push   ds
c001ee68:	06                   	push   es
c001ee69:	0f a0                	push   fs
c001ee6b:	0f a8                	push   gs
c001ee6d:	66 b8 10 00          	mov    ax,0x10
c001ee71:	66 8e d8             	mov    ds,ax
c001ee74:	66 8e c0             	mov    es,ax
c001ee77:	66 8e e0             	mov    fs,ax
c001ee7a:	66 8e e8             	mov    gs,ax
c001ee7d:	54                   	push   esp
c001ee7e:	fc                   	cld    
c001ee7f:	e8 4c dd fe ff       	call   c000cbd0 <int_handler>
c001ee84:	81 c4 04 00 00 00    	add    esp,0x4
c001ee8a:	0f a9                	pop    gs
c001ee8c:	0f a1                	pop    fs
c001ee8e:	07                   	pop    es
c001ee8f:	1f                   	pop    ds
c001ee90:	61                   	popa   
c001ee91:	81 c4 08 00 00 00    	add    esp,0x8
c001ee97:	cf                   	iret   

c001ee98 <syscall_common_stub>:
c001ee98:	60                   	pusha  
c001ee99:	1e                   	push   ds
c001ee9a:	06                   	push   es
c001ee9b:	0f a0                	push   fs
c001ee9d:	0f a8                	push   gs
c001ee9f:	66 b8 10 00          	mov    ax,0x10
c001eea3:	66 8e d8             	mov    ds,ax
c001eea6:	66 8e c0             	mov    es,ax
c001eea9:	66 8e e0             	mov    fs,ax
c001eeac:	66 8e e8             	mov    gs,ax
c001eeaf:	54                   	push   esp
c001eeb0:	fc                   	cld    
c001eeb1:	e8 1a dd fe ff       	call   c000cbd0 <int_handler>
c001eeb6:	81 c4 04 00 00 00    	add    esp,0x4
c001eebc:	0f a9                	pop    gs
c001eebe:	0f a1                	pop    fs
c001eec0:	07                   	pop    es
c001eec1:	1f                   	pop    ds
c001eec2:	e8 0c 2a ff ff       	call   c00118d3 <KiCheckSignalZ>
c001eec7:	3d 00 00 00 00       	cmp    eax,0x0
c001eecc:	0f 84 c0 00 00 00    	je     c001ef92 <skipSignals>
c001eed2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001eed7:	61                   	popa   
c001eed8:	53                   	push   ebx
c001eed9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001eedf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001eee2:	5b                   	pop    ebx
c001eee3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001eee8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001eeeb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001eeee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eef1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001eef4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001eef7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001eefa:	81 c4 08 00 00 00    	add    esp,0x8
c001ef00:	5e                   	pop    esi
c001ef01:	5b                   	pop    ebx
c001ef02:	59                   	pop    ecx
c001ef03:	5a                   	pop    edx
c001ef04:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ef07:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ef0a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ef0d:	52                   	push   edx
c001ef0e:	51                   	push   ecx
c001ef0f:	53                   	push   ebx
c001ef10:	56                   	push   esi
c001ef11:	81 ec 08 00 00 00    	sub    esp,0x8
c001ef17:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ef1a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ef1d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ef20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ef26:	60                   	pusha  
c001ef27:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ef2d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ef30:	89 e3                	mov    ebx,esp
c001ef32:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ef35:	52                   	push   edx
c001ef36:	68 56 ef 01 c0       	push   0xc001ef56
c001ef3b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ef3e:	89 dc                	mov    esp,ebx
c001ef40:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ef43:	68 23 00 00 00       	push   0x23
c001ef48:	51                   	push   ecx
c001ef49:	68 02 02 00 00       	push   0x202
c001ef4e:	68 1b 00 00 00       	push   0x1b
c001ef53:	ff 36                	push   DWORD PTR [esi]
c001ef55:	cf                   	iret   

c001ef56 <finishSignal>:
c001ef56:	cd 0f                	int    0xf

c001ef58 <finishSignal2>:
c001ef58:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ef5e:	e8 ed 29 ff ff       	call   c0011950 <KiFinishSignalZ>
c001ef63:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ef69:	68 23 00 00 00       	push   0x23
c001ef6e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ef71:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ef74:	68 1b 00 00 00       	push   0x1b
c001ef79:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ef7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ef7f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ef82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ef85:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ef88:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ef8b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ef8e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ef91:	cf                   	iret   

c001ef92 <skipSignals>:
c001ef92:	61                   	popa   
c001ef93:	81 c4 08 00 00 00    	add    esp,0x8
c001ef99:	cf                   	iret   
c001ef9a:	90                   	nop
c001ef9b:	90                   	nop

c001ef9c <irq16>:
c001ef9c:	fa                   	cli    
c001ef9d:	6a 00                	push   0x0
c001ef9f:	6a 30                	push   0x30
c001efa1:	e9 c0 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efa6 <irq17>:
c001efa6:	fa                   	cli    
c001efa7:	6a 00                	push   0x0
c001efa9:	6a 31                	push   0x31
c001efab:	e9 b6 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efb0 <irq18>:
c001efb0:	fa                   	cli    
c001efb1:	6a 00                	push   0x0
c001efb3:	6a 32                	push   0x32
c001efb5:	e9 ac fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efba <irq19>:
c001efba:	fa                   	cli    
c001efbb:	6a 00                	push   0x0
c001efbd:	6a 33                	push   0x33
c001efbf:	e9 a2 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efc4 <irq20>:
c001efc4:	fa                   	cli    
c001efc5:	6a 00                	push   0x0
c001efc7:	6a 34                	push   0x34
c001efc9:	e9 98 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efce <irq21>:
c001efce:	fa                   	cli    
c001efcf:	6a 00                	push   0x0
c001efd1:	6a 35                	push   0x35
c001efd3:	e9 8e fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efd8 <irq22>:
c001efd8:	fa                   	cli    
c001efd9:	6a 00                	push   0x0
c001efdb:	6a 36                	push   0x36
c001efdd:	e9 84 fe ff ff       	jmp    c001ee66 <int_common_stub>

c001efe2 <irq23>:
c001efe2:	fa                   	cli    
c001efe3:	6a 00                	push   0x0
c001efe5:	6a 37                	push   0x37
c001efe7:	e9 7a fe ff ff       	jmp    c001ee66 <int_common_stub>
c001efec:	66 90                	xchg   ax,ax
c001efee:	66 90                	xchg   ax,ax

c001eff0 <i386GetRDRAND>:
c001eff0:	b9 64 00 00 00       	mov    ecx,0x64

c001eff5 <retry>:
c001eff5:	0f c7 f0             	rdrand eax
c001eff8:	72 05                	jb     c001efff <retry.done>
c001effa:	e2 f9                	loop   c001eff5 <retry>

c001effc <retry.fail>:
c001effc:	31 c0                	xor    eax,eax
c001effe:	c3                   	ret    

c001efff <retry.done>:
c001efff:	c3                   	ret    

c001f000 <absolutelyNoChanceInHell>:
c001f000:	b8 01 00 00 00       	mov    eax,0x1
c001f005:	0f a2                	cpuid  
c001f007:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f00d:	74 06                	je     c001f015 <sseDetect.noSSE>
c001f00f:	b8 01 00 00 00       	mov    eax,0x1
c001f014:	c3                   	ret    

c001f015 <sseDetect.noSSE>:
c001f015:	31 c0                	xor    eax,eax
c001f017:	c3                   	ret    

c001f018 <sseSave>:
c001f018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f01c:	0f ae 00             	fxsave [eax]
c001f01f:	c3                   	ret    

c001f020 <sseLoad>:
c001f020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f024:	0f ae 08             	fxrstor [eax]
c001f027:	c3                   	ret    

c001f028 <sseInit>:
c001f028:	e8 42 00 00 00       	call   c001f06f <x87Init>
c001f02d:	0f 20 e0             	mov    eax,cr4
c001f030:	66 0d 00 06          	or     ax,0x600
c001f034:	0f 22 e0             	mov    cr4,eax
c001f037:	c3                   	ret    

c001f038 <sseClose>:
c001f038:	c3                   	ret    
c001f039:	66 90                	xchg   ax,ax
c001f03b:	66 90                	xchg   ax,ax
c001f03d:	66 90                	xchg   ax,ax
c001f03f:	90                   	nop

c001f040 <value_37F>:
c001f040:	7f 03                	jg     c001f045 <value_37A+0x1>

c001f042 <value_37E>:
c001f042:	7e 03                	jle    c001f047 <x87Detect+0x1>

c001f044 <value_37A>:
c001f044:	7a 03                	jp     c001f049 <x87Detect+0x3>

c001f046 <x87Detect>:
c001f046:	b8 01 00 00 00       	mov    eax,0x1
c001f04b:	0f a2                	cpuid  
c001f04d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f053:	74 06                	je     c001f05b <x87Detect.nox87>
c001f055:	b8 01 00 00 00       	mov    eax,0x1
c001f05a:	c3                   	ret    

c001f05b <x87Detect.nox87>:
c001f05b:	b8 00 00 00 00       	mov    eax,0x0
c001f060:	c3                   	ret    

c001f061 <x87Save>:
c001f061:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f065:	dd 30                	fnsave [eax]
c001f067:	c3                   	ret    

c001f068 <x87Load>:
c001f068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f06c:	dd 20                	frstor [eax]
c001f06e:	c3                   	ret    

c001f06f <x87Init>:
c001f06f:	0f 20 c0             	mov    eax,cr0
c001f072:	66 25 fb ff          	and    ax,0xfffb
c001f076:	66 0d 22 00          	or     ax,0x22
c001f07a:	0f 22 c0             	mov    cr0,eax
c001f07d:	db e3                	fninit 
c001f07f:	0f 06                	clts   
c001f081:	d9 2d 44 f0 01 c0    	fldcw  WORD PTR ds:0xc001f044
c001f087:	c3                   	ret    

c001f088 <x87Close>:
c001f088:	c3                   	ret    
c001f089:	66 90                	xchg   ax,ax
c001f08b:	90                   	nop

c001f08c <__do_global_ctors_aux>:
c001f08c:	a1 40 00 02 c0       	mov    eax,ds:0xc0020040
c001f091:	83 f8 ff             	cmp    eax,0xffffffff
c001f094:	74 1a                	je     c001f0b0 <__do_global_ctors_aux+0x24>
c001f096:	55                   	push   ebp
c001f097:	89 e5                	mov    ebp,esp
c001f099:	53                   	push   ebx
c001f09a:	52                   	push   edx
c001f09b:	bb 40 00 02 c0       	mov    ebx,0xc0020040
c001f0a0:	ff d0                	call   eax
c001f0a2:	83 eb 04             	sub    ebx,0x4
c001f0a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f0a7:	83 f8 ff             	cmp    eax,0xffffffff
c001f0aa:	75 f4                	jne    c001f0a0 <__do_global_ctors_aux+0x14>
c001f0ac:	58                   	pop    eax
c001f0ad:	5b                   	pop    ebx
c001f0ae:	5d                   	pop    ebp
c001f0af:	c3                   	ret    
c001f0b0:	c3                   	ret    
c001f0b1:	66 90                	xchg   ax,ax
c001f0b3:	90                   	nop

c001f0b4 <__divdi3>:
c001f0b4:	55                   	push   ebp
c001f0b5:	57                   	push   edi
c001f0b6:	56                   	push   esi
c001f0b7:	53                   	push   ebx
c001f0b8:	83 ec 1c             	sub    esp,0x1c
c001f0bb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f0bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f0c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f0ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f0ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f0d2:	85 db                	test   ebx,ebx
c001f0d4:	0f 88 8e 00 00 00    	js     c001f168 <__divdi3+0xb4>
c001f0da:	89 dd                	mov    ebp,ebx
c001f0dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f0e4:	89 d3                	mov    ebx,edx
c001f0e6:	85 d2                	test   edx,edx
c001f0e8:	79 0d                	jns    c001f0f7 <__divdi3+0x43>
c001f0ea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f0ee:	f7 d8                	neg    eax
c001f0f0:	83 d2 00             	adc    edx,0x0
c001f0f3:	f7 da                	neg    edx
c001f0f5:	89 d3                	mov    ebx,edx
c001f0f7:	89 c7                	mov    edi,eax
c001f0f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f0fc:	85 db                	test   ebx,ebx
c001f0fe:	75 48                	jne    c001f148 <__divdi3+0x94>
c001f100:	39 ef                	cmp    edi,ebp
c001f102:	76 24                	jbe    c001f128 <__divdi3+0x74>
c001f104:	89 ea                	mov    edx,ebp
c001f106:	f7 f7                	div    edi
c001f108:	89 c1                	mov    ecx,eax
c001f10a:	31 f6                	xor    esi,esi
c001f10c:	89 c8                	mov    eax,ecx
c001f10e:	89 f2                	mov    edx,esi
c001f110:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f114:	85 c9                	test   ecx,ecx
c001f116:	74 07                	je     c001f11f <__divdi3+0x6b>
c001f118:	f7 d8                	neg    eax
c001f11a:	83 d2 00             	adc    edx,0x0
c001f11d:	f7 da                	neg    edx
c001f11f:	83 c4 1c             	add    esp,0x1c
c001f122:	5b                   	pop    ebx
c001f123:	5e                   	pop    esi
c001f124:	5f                   	pop    edi
c001f125:	5d                   	pop    ebp
c001f126:	c3                   	ret    
c001f127:	90                   	nop
c001f128:	85 ff                	test   edi,edi
c001f12a:	75 0b                	jne    c001f137 <__divdi3+0x83>
c001f12c:	b8 01 00 00 00       	mov    eax,0x1
c001f131:	31 d2                	xor    edx,edx
c001f133:	f7 f3                	div    ebx
c001f135:	89 c7                	mov    edi,eax
c001f137:	31 d2                	xor    edx,edx
c001f139:	89 e8                	mov    eax,ebp
c001f13b:	f7 f7                	div    edi
c001f13d:	89 c6                	mov    esi,eax
c001f13f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f142:	f7 f7                	div    edi
c001f144:	89 c1                	mov    ecx,eax
c001f146:	eb c4                	jmp    c001f10c <__divdi3+0x58>
c001f148:	39 eb                	cmp    ebx,ebp
c001f14a:	77 3c                	ja     c001f188 <__divdi3+0xd4>
c001f14c:	0f bd f3             	bsr    esi,ebx
c001f14f:	83 f6 1f             	xor    esi,0x1f
c001f152:	75 40                	jne    c001f194 <__divdi3+0xe0>
c001f154:	39 eb                	cmp    ebx,ebp
c001f156:	72 09                	jb     c001f161 <__divdi3+0xad>
c001f158:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f15b:	0f 87 97 00 00 00    	ja     c001f1f8 <__divdi3+0x144>
c001f161:	b9 01 00 00 00       	mov    ecx,0x1
c001f166:	eb a4                	jmp    c001f10c <__divdi3+0x58>
c001f168:	f7 d9                	neg    ecx
c001f16a:	83 d3 00             	adc    ebx,0x0
c001f16d:	f7 db                	neg    ebx
c001f16f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f172:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f176:	89 dd                	mov    ebp,ebx
c001f178:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f180:	e9 5f ff ff ff       	jmp    c001f0e4 <__divdi3+0x30>
c001f185:	8d 76 00             	lea    esi,[esi+0x0]
c001f188:	31 f6                	xor    esi,esi
c001f18a:	31 c9                	xor    ecx,ecx
c001f18c:	e9 7b ff ff ff       	jmp    c001f10c <__divdi3+0x58>
c001f191:	8d 76 00             	lea    esi,[esi+0x0]
c001f194:	b8 20 00 00 00       	mov    eax,0x20
c001f199:	29 f0                	sub    eax,esi
c001f19b:	89 f1                	mov    ecx,esi
c001f19d:	d3 e3                	shl    ebx,cl
c001f19f:	89 fa                	mov    edx,edi
c001f1a1:	88 c1                	mov    cl,al
c001f1a3:	d3 ea                	shr    edx,cl
c001f1a5:	09 da                	or     edx,ebx
c001f1a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1ab:	89 f1                	mov    ecx,esi
c001f1ad:	d3 e7                	shl    edi,cl
c001f1af:	89 eb                	mov    ebx,ebp
c001f1b1:	88 c1                	mov    cl,al
c001f1b3:	d3 eb                	shr    ebx,cl
c001f1b5:	89 f1                	mov    ecx,esi
c001f1b7:	d3 e5                	shl    ebp,cl
c001f1b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f1bc:	88 c1                	mov    cl,al
c001f1be:	d3 ea                	shr    edx,cl
c001f1c0:	09 d5                	or     ebp,edx
c001f1c2:	89 e8                	mov    eax,ebp
c001f1c4:	89 da                	mov    edx,ebx
c001f1c6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f1ca:	89 d3                	mov    ebx,edx
c001f1cc:	89 c5                	mov    ebp,eax
c001f1ce:	f7 e7                	mul    edi
c001f1d0:	39 d3                	cmp    ebx,edx
c001f1d2:	72 18                	jb     c001f1ec <__divdi3+0x138>
c001f1d4:	74 0a                	je     c001f1e0 <__divdi3+0x12c>
c001f1d6:	89 e9                	mov    ecx,ebp
c001f1d8:	31 f6                	xor    esi,esi
c001f1da:	e9 2d ff ff ff       	jmp    c001f10c <__divdi3+0x58>
c001f1df:	90                   	nop
c001f1e0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f1e3:	89 f1                	mov    ecx,esi
c001f1e5:	d3 e7                	shl    edi,cl
c001f1e7:	39 c7                	cmp    edi,eax
c001f1e9:	73 eb                	jae    c001f1d6 <__divdi3+0x122>
c001f1eb:	90                   	nop
c001f1ec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f1ef:	31 f6                	xor    esi,esi
c001f1f1:	e9 16 ff ff ff       	jmp    c001f10c <__divdi3+0x58>
c001f1f6:	66 90                	xchg   ax,ax
c001f1f8:	31 c9                	xor    ecx,ecx
c001f1fa:	e9 0d ff ff ff       	jmp    c001f10c <__divdi3+0x58>
c001f1ff:	90                   	nop

c001f200 <__moddi3>:
c001f200:	55                   	push   ebp
c001f201:	57                   	push   edi
c001f202:	56                   	push   esi
c001f203:	53                   	push   ebx
c001f204:	83 ec 2c             	sub    esp,0x2c
c001f207:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f20b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f20f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f213:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f217:	85 db                	test   ebx,ebx
c001f219:	0f 88 85 00 00 00    	js     c001f2a4 <__moddi3+0xa4>
c001f21f:	89 de                	mov    esi,ebx
c001f221:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f229:	89 d7                	mov    edi,edx
c001f22b:	85 d2                	test   edx,edx
c001f22d:	79 09                	jns    c001f238 <__moddi3+0x38>
c001f22f:	f7 d8                	neg    eax
c001f231:	83 d2 00             	adc    edx,0x0
c001f234:	f7 da                	neg    edx
c001f236:	89 d7                	mov    edi,edx
c001f238:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f23c:	89 cd                	mov    ebp,ecx
c001f23e:	85 ff                	test   edi,edi
c001f240:	75 52                	jne    c001f294 <__moddi3+0x94>
c001f242:	89 c3                	mov    ebx,eax
c001f244:	39 f0                	cmp    eax,esi
c001f246:	76 24                	jbe    c001f26c <__moddi3+0x6c>
c001f248:	89 c8                	mov    eax,ecx
c001f24a:	89 f2                	mov    edx,esi
c001f24c:	f7 f3                	div    ebx
c001f24e:	89 d6                	mov    esi,edx
c001f250:	89 f0                	mov    eax,esi
c001f252:	31 d2                	xor    edx,edx
c001f254:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f258:	85 c9                	test   ecx,ecx
c001f25a:	74 07                	je     c001f263 <__moddi3+0x63>
c001f25c:	f7 d8                	neg    eax
c001f25e:	83 d2 00             	adc    edx,0x0
c001f261:	f7 da                	neg    edx
c001f263:	83 c4 2c             	add    esp,0x2c
c001f266:	5b                   	pop    ebx
c001f267:	5e                   	pop    esi
c001f268:	5f                   	pop    edi
c001f269:	5d                   	pop    ebp
c001f26a:	c3                   	ret    
c001f26b:	90                   	nop
c001f26c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f270:	85 db                	test   ebx,ebx
c001f272:	75 0d                	jne    c001f281 <__moddi3+0x81>
c001f274:	b8 01 00 00 00       	mov    eax,0x1
c001f279:	31 d2                	xor    edx,edx
c001f27b:	f7 f7                	div    edi
c001f27d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f281:	89 f0                	mov    eax,esi
c001f283:	31 d2                	xor    edx,edx
c001f285:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f289:	f7 f7                	div    edi
c001f28b:	89 e8                	mov    eax,ebp
c001f28d:	f7 f7                	div    edi
c001f28f:	89 d6                	mov    esi,edx
c001f291:	eb bd                	jmp    c001f250 <__moddi3+0x50>
c001f293:	90                   	nop
c001f294:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f298:	39 f7                	cmp    edi,esi
c001f29a:	76 20                	jbe    c001f2bc <__moddi3+0xbc>
c001f29c:	89 c8                	mov    eax,ecx
c001f29e:	89 f2                	mov    edx,esi
c001f2a0:	eb b2                	jmp    c001f254 <__moddi3+0x54>
c001f2a2:	66 90                	xchg   ax,ax
c001f2a4:	f7 d9                	neg    ecx
c001f2a6:	83 d3 00             	adc    ebx,0x0
c001f2a9:	f7 db                	neg    ebx
c001f2ab:	89 de                	mov    esi,ebx
c001f2ad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f2b5:	e9 6f ff ff ff       	jmp    c001f229 <__moddi3+0x29>
c001f2ba:	66 90                	xchg   ax,ax
c001f2bc:	0f bd c7             	bsr    eax,edi
c001f2bf:	83 f0 1f             	xor    eax,0x1f
c001f2c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f2c6:	75 24                	jne    c001f2ec <__moddi3+0xec>
c001f2c8:	39 f7                	cmp    edi,esi
c001f2ca:	72 06                	jb     c001f2d2 <__moddi3+0xd2>
c001f2cc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f2d0:	77 0c                	ja     c001f2de <__moddi3+0xde>
c001f2d2:	89 e9                	mov    ecx,ebp
c001f2d4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f2d8:	19 fe                	sbb    esi,edi
c001f2da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f2de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f2e2:	89 f2                	mov    edx,esi
c001f2e4:	e9 6b ff ff ff       	jmp    c001f254 <__moddi3+0x54>
c001f2e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f2ec:	b8 20 00 00 00       	mov    eax,0x20
c001f2f1:	89 c2                	mov    edx,eax
c001f2f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f2f7:	29 da                	sub    edx,ebx
c001f2f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f2fd:	88 d9                	mov    cl,bl
c001f2ff:	d3 e7                	shl    edi,cl
c001f301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f305:	88 d1                	mov    cl,dl
c001f307:	d3 e8                	shr    eax,cl
c001f309:	09 c7                	or     edi,eax
c001f30b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f30f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f313:	89 d8                	mov    eax,ebx
c001f315:	88 d9                	mov    cl,bl
c001f317:	d3 e7                	shl    edi,cl
c001f319:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f31d:	89 f3                	mov    ebx,esi
c001f31f:	88 d1                	mov    cl,dl
c001f321:	d3 eb                	shr    ebx,cl
c001f323:	89 c7                	mov    edi,eax
c001f325:	88 c1                	mov    cl,al
c001f327:	d3 e6                	shl    esi,cl
c001f329:	89 e8                	mov    eax,ebp
c001f32b:	88 d1                	mov    cl,dl
c001f32d:	d3 e8                	shr    eax,cl
c001f32f:	09 f0                	or     eax,esi
c001f331:	89 f9                	mov    ecx,edi
c001f333:	d3 e5                	shl    ebp,cl
c001f335:	89 da                	mov    edx,ebx
c001f337:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f33b:	89 d3                	mov    ebx,edx
c001f33d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f341:	89 c6                	mov    esi,eax
c001f343:	89 d1                	mov    ecx,edx
c001f345:	39 d3                	cmp    ebx,edx
c001f347:	72 27                	jb     c001f370 <__moddi3+0x170>
c001f349:	74 21                	je     c001f36c <__moddi3+0x16c>
c001f34b:	29 f5                	sub    ebp,esi
c001f34d:	19 cb                	sbb    ebx,ecx
c001f34f:	89 de                	mov    esi,ebx
c001f351:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f355:	d3 e6                	shl    esi,cl
c001f357:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f35b:	89 f9                	mov    ecx,edi
c001f35d:	d3 ed                	shr    ebp,cl
c001f35f:	09 ee                	or     esi,ebp
c001f361:	89 f0                	mov    eax,esi
c001f363:	d3 eb                	shr    ebx,cl
c001f365:	89 da                	mov    edx,ebx
c001f367:	e9 e8 fe ff ff       	jmp    c001f254 <__moddi3+0x54>
c001f36c:	39 c5                	cmp    ebp,eax
c001f36e:	73 db                	jae    c001f34b <__moddi3+0x14b>
c001f370:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f374:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f378:	89 d1                	mov    ecx,edx
c001f37a:	89 c6                	mov    esi,eax
c001f37c:	eb cd                	jmp    c001f34b <__moddi3+0x14b>
c001f37e:	66 90                	xchg   ax,ax

c001f380 <__udivdi3>:
c001f380:	55                   	push   ebp
c001f381:	57                   	push   edi
c001f382:	56                   	push   esi
c001f383:	53                   	push   ebx
c001f384:	83 ec 1c             	sub    esp,0x1c
c001f387:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f38b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f38f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f393:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f397:	85 d2                	test   edx,edx
c001f399:	75 41                	jne    c001f3dc <__udivdi3+0x5c>
c001f39b:	39 f7                	cmp    edi,esi
c001f39d:	76 15                	jbe    c001f3b4 <__udivdi3+0x34>
c001f39f:	89 e8                	mov    eax,ebp
c001f3a1:	89 f2                	mov    edx,esi
c001f3a3:	f7 f7                	div    edi
c001f3a5:	31 db                	xor    ebx,ebx
c001f3a7:	89 da                	mov    edx,ebx
c001f3a9:	83 c4 1c             	add    esp,0x1c
c001f3ac:	5b                   	pop    ebx
c001f3ad:	5e                   	pop    esi
c001f3ae:	5f                   	pop    edi
c001f3af:	5d                   	pop    ebp
c001f3b0:	c3                   	ret    
c001f3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3b4:	89 f9                	mov    ecx,edi
c001f3b6:	85 ff                	test   edi,edi
c001f3b8:	75 0b                	jne    c001f3c5 <__udivdi3+0x45>
c001f3ba:	b8 01 00 00 00       	mov    eax,0x1
c001f3bf:	31 d2                	xor    edx,edx
c001f3c1:	f7 f7                	div    edi
c001f3c3:	89 c1                	mov    ecx,eax
c001f3c5:	31 d2                	xor    edx,edx
c001f3c7:	89 f0                	mov    eax,esi
c001f3c9:	f7 f1                	div    ecx
c001f3cb:	89 c3                	mov    ebx,eax
c001f3cd:	89 e8                	mov    eax,ebp
c001f3cf:	f7 f1                	div    ecx
c001f3d1:	89 da                	mov    edx,ebx
c001f3d3:	83 c4 1c             	add    esp,0x1c
c001f3d6:	5b                   	pop    ebx
c001f3d7:	5e                   	pop    esi
c001f3d8:	5f                   	pop    edi
c001f3d9:	5d                   	pop    ebp
c001f3da:	c3                   	ret    
c001f3db:	90                   	nop
c001f3dc:	39 f2                	cmp    edx,esi
c001f3de:	77 1c                	ja     c001f3fc <__udivdi3+0x7c>
c001f3e0:	0f bd da             	bsr    ebx,edx
c001f3e3:	83 f3 1f             	xor    ebx,0x1f
c001f3e6:	75 24                	jne    c001f40c <__udivdi3+0x8c>
c001f3e8:	39 f2                	cmp    edx,esi
c001f3ea:	72 08                	jb     c001f3f4 <__udivdi3+0x74>
c001f3ec:	39 ef                	cmp    edi,ebp
c001f3ee:	0f 87 84 00 00 00    	ja     c001f478 <__udivdi3+0xf8>
c001f3f4:	b8 01 00 00 00       	mov    eax,0x1
c001f3f9:	eb ac                	jmp    c001f3a7 <__udivdi3+0x27>
c001f3fb:	90                   	nop
c001f3fc:	31 db                	xor    ebx,ebx
c001f3fe:	31 c0                	xor    eax,eax
c001f400:	89 da                	mov    edx,ebx
c001f402:	83 c4 1c             	add    esp,0x1c
c001f405:	5b                   	pop    ebx
c001f406:	5e                   	pop    esi
c001f407:	5f                   	pop    edi
c001f408:	5d                   	pop    ebp
c001f409:	c3                   	ret    
c001f40a:	66 90                	xchg   ax,ax
c001f40c:	b8 20 00 00 00       	mov    eax,0x20
c001f411:	29 d8                	sub    eax,ebx
c001f413:	88 d9                	mov    cl,bl
c001f415:	d3 e2                	shl    edx,cl
c001f417:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f41b:	89 fa                	mov    edx,edi
c001f41d:	88 c1                	mov    cl,al
c001f41f:	d3 ea                	shr    edx,cl
c001f421:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f425:	09 d1                	or     ecx,edx
c001f427:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f42b:	88 d9                	mov    cl,bl
c001f42d:	d3 e7                	shl    edi,cl
c001f42f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f433:	89 f7                	mov    edi,esi
c001f435:	88 c1                	mov    cl,al
c001f437:	d3 ef                	shr    edi,cl
c001f439:	88 d9                	mov    cl,bl
c001f43b:	d3 e6                	shl    esi,cl
c001f43d:	89 ea                	mov    edx,ebp
c001f43f:	88 c1                	mov    cl,al
c001f441:	d3 ea                	shr    edx,cl
c001f443:	09 d6                	or     esi,edx
c001f445:	89 f0                	mov    eax,esi
c001f447:	89 fa                	mov    edx,edi
c001f449:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f44d:	89 d7                	mov    edi,edx
c001f44f:	89 c6                	mov    esi,eax
c001f451:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f455:	39 d7                	cmp    edi,edx
c001f457:	72 13                	jb     c001f46c <__udivdi3+0xec>
c001f459:	74 09                	je     c001f464 <__udivdi3+0xe4>
c001f45b:	89 f0                	mov    eax,esi
c001f45d:	31 db                	xor    ebx,ebx
c001f45f:	e9 43 ff ff ff       	jmp    c001f3a7 <__udivdi3+0x27>
c001f464:	88 d9                	mov    cl,bl
c001f466:	d3 e5                	shl    ebp,cl
c001f468:	39 c5                	cmp    ebp,eax
c001f46a:	73 ef                	jae    c001f45b <__udivdi3+0xdb>
c001f46c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f46f:	31 db                	xor    ebx,ebx
c001f471:	e9 31 ff ff ff       	jmp    c001f3a7 <__udivdi3+0x27>
c001f476:	66 90                	xchg   ax,ax
c001f478:	31 c0                	xor    eax,eax
c001f47a:	e9 28 ff ff ff       	jmp    c001f3a7 <__udivdi3+0x27>
c001f47f:	90                   	nop

c001f480 <__umoddi3>:
c001f480:	55                   	push   ebp
c001f481:	57                   	push   edi
c001f482:	56                   	push   esi
c001f483:	53                   	push   ebx
c001f484:	83 ec 1c             	sub    esp,0x1c
c001f487:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f48b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f48f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f493:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f497:	89 da                	mov    edx,ebx
c001f499:	85 c0                	test   eax,eax
c001f49b:	75 37                	jne    c001f4d4 <__umoddi3+0x54>
c001f49d:	39 df                	cmp    edi,ebx
c001f49f:	76 13                	jbe    c001f4b4 <__umoddi3+0x34>
c001f4a1:	89 f0                	mov    eax,esi
c001f4a3:	f7 f7                	div    edi
c001f4a5:	89 d0                	mov    eax,edx
c001f4a7:	31 d2                	xor    edx,edx
c001f4a9:	83 c4 1c             	add    esp,0x1c
c001f4ac:	5b                   	pop    ebx
c001f4ad:	5e                   	pop    esi
c001f4ae:	5f                   	pop    edi
c001f4af:	5d                   	pop    ebp
c001f4b0:	c3                   	ret    
c001f4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4b4:	89 fd                	mov    ebp,edi
c001f4b6:	85 ff                	test   edi,edi
c001f4b8:	75 0b                	jne    c001f4c5 <__umoddi3+0x45>
c001f4ba:	b8 01 00 00 00       	mov    eax,0x1
c001f4bf:	31 d2                	xor    edx,edx
c001f4c1:	f7 f7                	div    edi
c001f4c3:	89 c5                	mov    ebp,eax
c001f4c5:	89 d8                	mov    eax,ebx
c001f4c7:	31 d2                	xor    edx,edx
c001f4c9:	f7 f5                	div    ebp
c001f4cb:	89 f0                	mov    eax,esi
c001f4cd:	f7 f5                	div    ebp
c001f4cf:	89 d0                	mov    eax,edx
c001f4d1:	eb d4                	jmp    c001f4a7 <__umoddi3+0x27>
c001f4d3:	90                   	nop
c001f4d4:	89 f1                	mov    ecx,esi
c001f4d6:	39 d8                	cmp    eax,ebx
c001f4d8:	76 0a                	jbe    c001f4e4 <__umoddi3+0x64>
c001f4da:	89 f0                	mov    eax,esi
c001f4dc:	83 c4 1c             	add    esp,0x1c
c001f4df:	5b                   	pop    ebx
c001f4e0:	5e                   	pop    esi
c001f4e1:	5f                   	pop    edi
c001f4e2:	5d                   	pop    ebp
c001f4e3:	c3                   	ret    
c001f4e4:	0f bd e8             	bsr    ebp,eax
c001f4e7:	83 f5 1f             	xor    ebp,0x1f
c001f4ea:	75 1c                	jne    c001f508 <__umoddi3+0x88>
c001f4ec:	39 d8                	cmp    eax,ebx
c001f4ee:	72 04                	jb     c001f4f4 <__umoddi3+0x74>
c001f4f0:	39 f7                	cmp    edi,esi
c001f4f2:	77 08                	ja     c001f4fc <__umoddi3+0x7c>
c001f4f4:	89 da                	mov    edx,ebx
c001f4f6:	29 fe                	sub    esi,edi
c001f4f8:	19 c2                	sbb    edx,eax
c001f4fa:	89 f1                	mov    ecx,esi
c001f4fc:	89 c8                	mov    eax,ecx
c001f4fe:	83 c4 1c             	add    esp,0x1c
c001f501:	5b                   	pop    ebx
c001f502:	5e                   	pop    esi
c001f503:	5f                   	pop    edi
c001f504:	5d                   	pop    ebp
c001f505:	c3                   	ret    
c001f506:	66 90                	xchg   ax,ax
c001f508:	ba 20 00 00 00       	mov    edx,0x20
c001f50d:	29 ea                	sub    edx,ebp
c001f50f:	89 e9                	mov    ecx,ebp
c001f511:	d3 e0                	shl    eax,cl
c001f513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f517:	89 f8                	mov    eax,edi
c001f519:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f51d:	88 d1                	mov    cl,dl
c001f51f:	d3 e8                	shr    eax,cl
c001f521:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f525:	09 c1                	or     ecx,eax
c001f527:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f52b:	89 e9                	mov    ecx,ebp
c001f52d:	d3 e7                	shl    edi,cl
c001f52f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f533:	89 d8                	mov    eax,ebx
c001f535:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f539:	88 d1                	mov    cl,dl
c001f53b:	d3 e8                	shr    eax,cl
c001f53d:	89 c7                	mov    edi,eax
c001f53f:	89 e9                	mov    ecx,ebp
c001f541:	d3 e3                	shl    ebx,cl
c001f543:	89 f0                	mov    eax,esi
c001f545:	88 d1                	mov    cl,dl
c001f547:	d3 e8                	shr    eax,cl
c001f549:	09 d8                	or     eax,ebx
c001f54b:	89 e9                	mov    ecx,ebp
c001f54d:	d3 e6                	shl    esi,cl
c001f54f:	89 f3                	mov    ebx,esi
c001f551:	89 fa                	mov    edx,edi
c001f553:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f557:	89 d1                	mov    ecx,edx
c001f559:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f55d:	89 c6                	mov    esi,eax
c001f55f:	89 d7                	mov    edi,edx
c001f561:	39 d1                	cmp    ecx,edx
c001f563:	72 27                	jb     c001f58c <__umoddi3+0x10c>
c001f565:	74 21                	je     c001f588 <__umoddi3+0x108>
c001f567:	89 ca                	mov    edx,ecx
c001f569:	29 f3                	sub    ebx,esi
c001f56b:	19 fa                	sbb    edx,edi
c001f56d:	89 d0                	mov    eax,edx
c001f56f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f573:	d3 e0                	shl    eax,cl
c001f575:	89 e9                	mov    ecx,ebp
c001f577:	d3 eb                	shr    ebx,cl
c001f579:	09 d8                	or     eax,ebx
c001f57b:	d3 ea                	shr    edx,cl
c001f57d:	83 c4 1c             	add    esp,0x1c
c001f580:	5b                   	pop    ebx
c001f581:	5e                   	pop    esi
c001f582:	5f                   	pop    edi
c001f583:	5d                   	pop    ebp
c001f584:	c3                   	ret    
c001f585:	8d 76 00             	lea    esi,[esi+0x0]
c001f588:	39 c3                	cmp    ebx,eax
c001f58a:	73 db                	jae    c001f567 <__umoddi3+0xe7>
c001f58c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f590:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f594:	89 d7                	mov    edi,edx
c001f596:	89 c6                	mov    esi,eax
c001f598:	eb cd                	jmp    c001f567 <__umoddi3+0xe7>

Disassembly of section .init:

c001f59a <_init>:
c001f59a:	55                   	push   ebp
c001f59b:	89 e5                	mov    ebp,esp
c001f59d:	e8 52 0b fe ff       	call   c00000f4 <frame_dummy>
c001f5a2:	e8 e5 fa ff ff       	call   c001f08c <__do_global_ctors_aux>
c001f5a7:	5d                   	pop    ebp
c001f5a8:	c3                   	ret    

Disassembly of section .fini:

c001f5a9 <_fini>:
c001f5a9:	55                   	push   ebp
c001f5aa:	89 e5                	mov    ebp,esp
c001f5ac:	e8 d3 0a fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f5b1:	5d                   	pop    ebp
c001f5b2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f5b4 <Computer::~Computer()>:
c001f5b4:	83 ec 0c             	sub    esp,0xc
c001f5b7:	ba d4 08 02 c0       	mov    edx,0xc00208d4
c001f5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c0:	89 10                	mov    DWORD PTR [eax],edx
c001f5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c6:	83 ec 0c             	sub    esp,0xc
c001f5c9:	50                   	push   eax
c001f5ca:	e8 57 d0 fe ff       	call   c000c626 <Device::~Device()>
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	90                   	nop
c001f5d3:	83 c4 0c             	add    esp,0xc
c001f5d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f5d8 <Computer::~Computer()>:
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	83 ec 0c             	sub    esp,0xc
c001f5de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5e2:	e8 cd ff ff ff       	call   c001f5b4 <Computer::~Computer()>
c001f5e7:	83 c4 10             	add    esp,0x10
c001f5ea:	83 ec 08             	sub    esp,0x8
c001f5ed:	68 70 01 00 00       	push   0x170
c001f5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5f6:	e8 11 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f5fb:	83 c4 10             	add    esp,0x10
c001f5fe:	83 c4 0c             	add    esp,0xc
c001f601:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f602 <idleCommon()>:
c001f602:	83 ec 0c             	sub    esp,0xc
c001f605:	fa                   	cli    
c001f606:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f60c:	e8 af 66 ff ff       	call   c0015cc0 <schedule()>
c001f611:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f616:	48                   	dec    eax
c001f617:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f61c:	75 01                	jne    c001f61f <idleCommon()+0x1d>
c001f61e:	fb                   	sti    
c001f61f:	83 c4 0c             	add    esp,0xc
c001f622:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f624 <LinkedList<UnixFile>::~LinkedList()>:
c001f624:	90                   	nop
c001f625:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f626 <LinkedList<UnixFile>::LinkedList()>:
c001f626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f62a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f634:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f63b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f63f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f64a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f654:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f65b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f65f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f666:	90                   	nop
c001f667:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f668 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f668:	83 ec 0c             	sub    esp,0xc
c001f66b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f670:	75 10                	jne    c001f682 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f672:	83 ec 0c             	sub    esp,0xc
c001f675:	68 e8 0a 02 c0       	push   0xc0020ae8
c001f67a:	e8 42 1c ff ff       	call   c00112c1 <KePanic(char const*)>
c001f67f:	83 c4 10             	add    esp,0x10
c001f682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f686:	8b 00                	mov    eax,DWORD PTR [eax]
c001f688:	85 c0                	test   eax,eax
c001f68a:	74 34                	je     c001f6c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f693:	85 c0                	test   eax,eax
c001f695:	74 29                	je     c001f6c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f69e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6be:	eb 65                	jmp    c001f725 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6c6:	85 c0                	test   eax,eax
c001f6c8:	75 4b                	jne    c001f715 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6d1:	85 c0                	test   eax,eax
c001f6d3:	75 40                	jne    c001f715 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6dd:	89 10                	mov    DWORD PTR [eax],edx
c001f6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ff:	85 c0                	test   eax,eax
c001f701:	74 22                	je     c001f725 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f703:	83 ec 0c             	sub    esp,0xc
c001f706:	68 0a 0b 02 c0       	push   0xc0020b0a
c001f70b:	e8 b1 1b ff ff       	call   c00112c1 <KePanic(char const*)>
c001f710:	83 c4 10             	add    esp,0x10
c001f713:	eb 10                	jmp    c001f725 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f715:	83 ec 0c             	sub    esp,0xc
c001f718:	68 14 0b 02 c0       	push   0xc0020b14
c001f71d:	e8 9f 1b ff ff       	call   c00112c1 <KePanic(char const*)>
c001f722:	83 c4 10             	add    esp,0x10
c001f725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f729:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f72c:	8d 50 01             	lea    edx,[eax+0x1]
c001f72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f736:	90                   	nop
c001f737:	83 c4 0c             	add    esp,0xc
c001f73a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f73c <LinkedList<UnixFile>::getFirstElement()>:
c001f73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f740:	8b 00                	mov    eax,DWORD PTR [eax]
c001f742:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f744 <LinkedList<UnixFile>::removeFirst()>:
c001f744:	83 ec 0c             	sub    esp,0xc
c001f747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f74d:	85 c0                	test   eax,eax
c001f74f:	75 12                	jne    c001f763 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f751:	83 ec 0c             	sub    esp,0xc
c001f754:	68 20 0b 02 c0       	push   0xc0020b20
c001f759:	e8 63 1b ff ff       	call   c00112c1 <KePanic(char const*)>
c001f75e:	83 c4 10             	add    esp,0x10
c001f761:	eb 7e                	jmp    c001f7e1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f767:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f76a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f76d:	85 c0                	test   eax,eax
c001f76f:	74 10                	je     c001f781 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f771:	83 ec 0c             	sub    esp,0xc
c001f774:	68 6b 0b 02 c0       	push   0xc0020b6b
c001f779:	e8 43 1b ff ff       	call   c00112c1 <KePanic(char const*)>
c001f77e:	83 c4 10             	add    esp,0x10
c001f781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f785:	8b 00                	mov    eax,DWORD PTR [eax]
c001f787:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f78a:	85 c0                	test   eax,eax
c001f78c:	75 33                	jne    c001f7c1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f792:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7aa:	83 f8 01             	cmp    eax,0x1
c001f7ad:	74 21                	je     c001f7d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f7af:	83 ec 0c             	sub    esp,0xc
c001f7b2:	68 44 0b 02 c0       	push   0xc0020b44
c001f7b7:	e8 05 1b ff ff       	call   c00112c1 <KePanic(char const*)>
c001f7bc:	83 c4 10             	add    esp,0x10
c001f7bf:	eb 0f                	jmp    c001f7d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ce:	89 10                	mov    DWORD PTR [eax],edx
c001f7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7d7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7e1:	83 c4 0c             	add    esp,0xc
c001f7e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f7e6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f7e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7ed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f7ee <DriverlessDevice::~DriverlessDevice()>:
c001f7ee:	ba fc 16 02 c0       	mov    edx,0xc00216fc
c001f7f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f7:	89 10                	mov    DWORD PTR [eax],edx
c001f7f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fd:	50                   	push   eax
c001f7fe:	e8 23 ce fe ff       	call   c000c626 <Device::~Device()>
c001f803:	83 c4 04             	add    esp,0x4
c001f806:	90                   	nop
c001f807:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f808 <DriverlessDevice::~DriverlessDevice()>:
c001f808:	83 ec 0c             	sub    esp,0xc
c001f80b:	83 ec 0c             	sub    esp,0xc
c001f80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f812:	e8 d7 ff ff ff       	call   c001f7ee <DriverlessDevice::~DriverlessDevice()>
c001f817:	83 c4 10             	add    esp,0x10
c001f81a:	83 ec 08             	sub    esp,0x8
c001f81d:	68 58 01 00 00       	push   0x158
c001f822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f826:	e8 e1 af fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f82b:	83 c4 10             	add    esp,0x10
c001f82e:	83 c4 0c             	add    esp,0xc
c001f831:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f832 <LinkedList<Device>::addElement(Device*)>:
c001f832:	83 ec 0c             	sub    esp,0xc
c001f835:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f83a:	75 10                	jne    c001f84c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f83c:	83 ec 0c             	sub    esp,0xc
c001f83f:	68 e8 0a 02 c0       	push   0xc0020ae8
c001f844:	e8 78 1a ff ff       	call   c00112c1 <KePanic(char const*)>
c001f849:	83 c4 10             	add    esp,0x10
c001f84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f850:	8b 00                	mov    eax,DWORD PTR [eax]
c001f852:	85 c0                	test   eax,eax
c001f854:	74 3a                	je     c001f890 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f85d:	85 c0                	test   eax,eax
c001f85f:	74 2f                	je     c001f890 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f865:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f868:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f86c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f876:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f87a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f881:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f884:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f88e:	eb 68                	jmp    c001f8f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f894:	8b 00                	mov    eax,DWORD PTR [eax]
c001f896:	85 c0                	test   eax,eax
c001f898:	75 4e                	jne    c001f8e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a1:	85 c0                	test   eax,eax
c001f8a3:	75 43                	jne    c001f8e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8ad:	89 10                	mov    DWORD PTR [eax],edx
c001f8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8c1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8d2:	85 c0                	test   eax,eax
c001f8d4:	74 22                	je     c001f8f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f8d6:	83 ec 0c             	sub    esp,0xc
c001f8d9:	68 0a 0b 02 c0       	push   0xc0020b0a
c001f8de:	e8 de 19 ff ff       	call   c00112c1 <KePanic(char const*)>
c001f8e3:	83 c4 10             	add    esp,0x10
c001f8e6:	eb 10                	jmp    c001f8f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f8e8:	83 ec 0c             	sub    esp,0xc
c001f8eb:	68 14 0b 02 c0       	push   0xc0020b14
c001f8f0:	e8 cc 19 ff ff       	call   c00112c1 <KePanic(char const*)>
c001f8f5:	83 c4 10             	add    esp,0x10
c001f8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8ff:	8d 50 01             	lea    edx,[eax+0x1]
c001f902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f906:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f909:	90                   	nop
c001f90a:	83 c4 0c             	add    esp,0xc
c001f90d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f90e <LinkedList<Device>::LinkedList()>:
c001f90e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f912:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f91c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f927:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f932:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f93c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f947:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f94e:	90                   	nop
c001f94f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f950 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f954:	8b 00                	mov    eax,DWORD PTR [eax]
c001f956:	85 c0                	test   eax,eax
c001f958:	75 0e                	jne    c001f968 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f95a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f95e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f961:	85 c0                	test   eax,eax
c001f963:	75 03                	jne    c001f968 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f965:	b0 01                	mov    al,0x1
c001f967:	c3                   	ret    
c001f968:	b0 00                	mov    al,0x0
c001f96a:	90                   	nop
c001f96b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f96c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f96c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f970:	8b 00                	mov    eax,DWORD PTR [eax]
c001f972:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f974 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f974:	83 ec 0c             	sub    esp,0xc
c001f977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f97d:	85 c0                	test   eax,eax
c001f97f:	75 17                	jne    c001f998 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f981:	83 ec 0c             	sub    esp,0xc
c001f984:	68 20 0b 02 c0       	push   0xc0020b20
c001f989:	e8 33 19 ff ff       	call   c00112c1 <KePanic(char const*)>
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	e9 96 00 00 00       	jmp    c001fa2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f996:	66 90                	xchg   ax,ax
c001f998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f99f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f9a2:	85 c0                	test   eax,eax
c001f9a4:	0f 95 c0             	setne  al
c001f9a7:	0f b6 c0             	movzx  eax,al
c001f9aa:	85 c0                	test   eax,eax
c001f9ac:	74 12                	je     c001f9c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f9ae:	83 ec 0c             	sub    esp,0xc
c001f9b1:	68 6b 0b 02 c0       	push   0xc0020b6b
c001f9b6:	e8 06 19 ff ff       	call   c00112c1 <KePanic(char const*)>
c001f9bb:	83 c4 10             	add    esp,0x10
c001f9be:	66 90                	xchg   ax,ax
c001f9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f9c9:	85 c0                	test   eax,eax
c001f9cb:	0f 94 c0             	sete   al
c001f9ce:	0f b6 c0             	movzx  eax,al
c001f9d1:	85 c0                	test   eax,eax
c001f9d3:	74 33                	je     c001fa08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9f1:	83 f8 01             	cmp    eax,0x1
c001f9f4:	74 22                	je     c001fa18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f9f6:	83 ec 0c             	sub    esp,0xc
c001f9f9:	68 44 0b 02 c0       	push   0xc0020b44
c001f9fe:	e8 be 18 ff ff       	call   c00112c1 <KePanic(char const*)>
c001fa03:	83 c4 10             	add    esp,0x10
c001fa06:	eb 10                	jmp    c001fa18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fa08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa0e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fa11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa15:	89 10                	mov    DWORD PTR [eax],edx
c001fa17:	90                   	nop
c001fa18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa1f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fa22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa29:	8d 76 00             	lea    esi,[esi+0x0]
c001fa2c:	83 c4 0c             	add    esp,0xc
c001fa2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fa30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fa30:	83 ec 0c             	sub    esp,0xc
c001fa33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa38:	75 12                	jne    c001fa4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fa3a:	83 ec 0c             	sub    esp,0xc
c001fa3d:	68 e8 0a 02 c0       	push   0xc0020ae8
c001fa42:	e8 7a 18 ff ff       	call   c00112c1 <KePanic(char const*)>
c001fa47:	83 c4 10             	add    esp,0x10
c001fa4a:	66 90                	xchg   ax,ax
c001fa4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa52:	85 c0                	test   eax,eax
c001fa54:	74 36                	je     c001fa8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fa56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa5d:	85 c0                	test   eax,eax
c001fa5f:	74 2b                	je     c001fa8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fa61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa88:	eb 6a                	jmp    c001faf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa8a:	66 90                	xchg   ax,ax
c001fa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa92:	85 c0                	test   eax,eax
c001fa94:	75 4e                	jne    c001fae4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa9d:	85 c0                	test   eax,eax
c001fa9f:	75 43                	jne    c001fae4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001faa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faa9:	89 10                	mov    DWORD PTR [eax],edx
c001faab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fab3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fabd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001facb:	85 c0                	test   eax,eax
c001facd:	74 25                	je     c001faf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001facf:	83 ec 0c             	sub    esp,0xc
c001fad2:	68 0a 0b 02 c0       	push   0xc0020b0a
c001fad7:	e8 e5 17 ff ff       	call   c00112c1 <KePanic(char const*)>
c001fadc:	83 c4 10             	add    esp,0x10
c001fadf:	eb 13                	jmp    c001faf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fae1:	8d 76 00             	lea    esi,[esi+0x0]
c001fae4:	83 ec 0c             	sub    esp,0xc
c001fae7:	68 14 0b 02 c0       	push   0xc0020b14
c001faec:	e8 d0 17 ff ff       	call   c00112c1 <KePanic(char const*)>
c001faf1:	83 c4 10             	add    esp,0x10
c001faf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fafb:	8d 50 01             	lea    edx,[eax+0x1]
c001fafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb05:	90                   	nop
c001fb06:	83 c4 0c             	add    esp,0xc
c001fb09:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fb0c <ACPI::~ACPI()>:
c001fb0c:	83 ec 0c             	sub    esp,0xc
c001fb0f:	ba e4 1c 02 c0       	mov    edx,0xc0021ce4
c001fb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb18:	89 10                	mov    DWORD PTR [eax],edx
c001fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1e:	83 ec 0c             	sub    esp,0xc
c001fb21:	50                   	push   eax
c001fb22:	e8 ff ca fe ff       	call   c000c626 <Device::~Device()>
c001fb27:	83 c4 10             	add    esp,0x10
c001fb2a:	90                   	nop
c001fb2b:	83 c4 0c             	add    esp,0xc
c001fb2e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fb30 <ACPI::~ACPI()>:
c001fb30:	83 ec 0c             	sub    esp,0xc
c001fb33:	83 ec 0c             	sub    esp,0xc
c001fb36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb3a:	e8 cd ff ff ff       	call   c001fb0c <ACPI::~ACPI()>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	83 ec 08             	sub    esp,0x8
c001fb45:	68 64 12 00 00       	push   0x1264
c001fb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb4e:	e8 b9 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb53:	83 c4 10             	add    esp,0x10
c001fb56:	83 c4 0c             	add    esp,0xc
c001fb59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fb5c <LinkedList<Device>::~LinkedList()>:
c001fb5c:	90                   	nop
c001fb5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fb60 <LinkedList<Device>::isEmpty()>:
c001fb60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb66:	85 c0                	test   eax,eax
c001fb68:	75 0e                	jne    c001fb78 <LinkedList<Device>::isEmpty()+0x18>
c001fb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb71:	85 c0                	test   eax,eax
c001fb73:	75 03                	jne    c001fb78 <LinkedList<Device>::isEmpty()+0x18>
c001fb75:	b0 01                	mov    al,0x1
c001fb77:	c3                   	ret    
c001fb78:	b0 00                	mov    al,0x0
c001fb7a:	90                   	nop
c001fb7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fb7c <LinkedList<Device>::getFirstElement()>:
c001fb7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fb84 <LinkedList<Device>::removeFirst()>:
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb8d:	85 c0                	test   eax,eax
c001fb8f:	75 17                	jne    c001fba8 <LinkedList<Device>::removeFirst()+0x24>
c001fb91:	83 ec 0c             	sub    esp,0xc
c001fb94:	68 20 0b 02 c0       	push   0xc0020b20
c001fb99:	e8 23 17 ff ff       	call   c00112c1 <KePanic(char const*)>
c001fb9e:	83 c4 10             	add    esp,0x10
c001fba1:	e9 92 00 00 00       	jmp    c001fc38 <LinkedList<Device>::removeFirst()+0xb4>
c001fba6:	66 90                	xchg   ax,ax
c001fba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbaf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fbb5:	85 c0                	test   eax,eax
c001fbb7:	74 13                	je     c001fbcc <LinkedList<Device>::removeFirst()+0x48>
c001fbb9:	83 ec 0c             	sub    esp,0xc
c001fbbc:	68 6b 0b 02 c0       	push   0xc0020b6b
c001fbc1:	e8 fb 16 ff ff       	call   c00112c1 <KePanic(char const*)>
c001fbc6:	83 c4 10             	add    esp,0x10
c001fbc9:	8d 76 00             	lea    esi,[esi+0x0]
c001fbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fbd8:	85 c0                	test   eax,eax
c001fbda:	75 34                	jne    c001fc10 <LinkedList<Device>::removeFirst()+0x8c>
c001fbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbf8:	83 f8 01             	cmp    eax,0x1
c001fbfb:	74 27                	je     c001fc24 <LinkedList<Device>::removeFirst()+0xa0>
c001fbfd:	83 ec 0c             	sub    esp,0xc
c001fc00:	68 44 0b 02 c0       	push   0xc0020b44
c001fc05:	e8 b7 16 ff ff       	call   c00112c1 <KePanic(char const*)>
c001fc0a:	83 c4 10             	add    esp,0x10
c001fc0d:	eb 15                	jmp    c001fc24 <LinkedList<Device>::removeFirst()+0xa0>
c001fc0f:	90                   	nop
c001fc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc16:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc20:	89 10                	mov    DWORD PTR [eax],edx
c001fc22:	66 90                	xchg   ax,ax
c001fc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc2b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc35:	8d 76 00             	lea    esi,[esi+0x0]
c001fc38:	83 c4 0c             	add    esp,0xc
c001fc3b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fc3c <CPU::~CPU()>:
c001fc3c:	83 ec 0c             	sub    esp,0xc
c001fc3f:	ba 8c 1e 02 c0       	mov    edx,0xc0021e8c
c001fc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc48:	89 10                	mov    DWORD PTR [eax],edx
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	83 ec 0c             	sub    esp,0xc
c001fc51:	50                   	push   eax
c001fc52:	e8 cf c9 fe ff       	call   c000c626 <Device::~Device()>
c001fc57:	83 c4 10             	add    esp,0x10
c001fc5a:	90                   	nop
c001fc5b:	83 c4 0c             	add    esp,0xc
c001fc5e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fc60 <CPU::~CPU()>:
c001fc60:	83 ec 0c             	sub    esp,0xc
c001fc63:	83 ec 0c             	sub    esp,0xc
c001fc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc6a:	e8 cd ff ff ff       	call   c001fc3c <CPU::~CPU()>
c001fc6f:	83 c4 10             	add    esp,0x10
c001fc72:	83 ec 08             	sub    esp,0x8
c001fc75:	68 94 11 00 00       	push   0x1194
c001fc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc7e:	e8 89 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc83:	83 c4 10             	add    esp,0x10
c001fc86:	83 c4 0c             	add    esp,0xc
c001fc89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fc8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fc8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fc94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fc94:	90                   	nop
c001fc95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fc98 <ThreadControlBlock::ThreadControlBlock()>:
c001fc98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc9c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fcae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fcb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcbd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fcc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fcd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcdb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fcdf:	90                   	nop
c001fce0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcfd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd24:	90                   	nop
c001fd25:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fd26 <PCI::~PCI()>:
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	ba 6c 2d 02 c0       	mov    edx,0xc0022d6c
c001fd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd32:	89 10                	mov    DWORD PTR [eax],edx
c001fd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	50                   	push   eax
c001fd3c:	e8 77 c3 fe ff       	call   c000c0b8 <Bus::~Bus()>
c001fd41:	83 c4 10             	add    esp,0x10
c001fd44:	90                   	nop
c001fd45:	83 c4 0c             	add    esp,0xc
c001fd48:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fd4a <PCI::~PCI()>:
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd54:	e8 cd ff ff ff       	call   c001fd26 <PCI::~PCI()>
c001fd59:	83 c4 10             	add    esp,0x10
c001fd5c:	83 ec 08             	sub    esp,0x8
c001fd5f:	68 5c 01 00 00       	push   0x15c
c001fd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd68:	e8 9f aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd6d:	83 c4 10             	add    esp,0x10
c001fd70:	83 c4 0c             	add    esp,0xc
c001fd73:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fd74 <IDE::~IDE()>:
c001fd74:	83 ec 0c             	sub    esp,0xc
c001fd77:	ba 20 2e 02 c0       	mov    edx,0xc0022e20
c001fd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd80:	89 10                	mov    DWORD PTR [eax],edx
c001fd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	50                   	push   eax
c001fd8a:	e8 11 cd fe ff       	call   c000caa0 <HardDiskController::~HardDiskController()>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	90                   	nop
c001fd93:	83 c4 0c             	add    esp,0xc
c001fd96:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fd98 <IDE::~IDE()>:
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	83 ec 0c             	sub    esp,0xc
c001fd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda2:	e8 cd ff ff ff       	call   c001fd74 <IDE::~IDE()>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	83 ec 08             	sub    esp,0x8
c001fdad:	68 70 02 00 00       	push   0x270
c001fdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb6:	e8 51 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	83 c4 0c             	add    esp,0xc
c001fdc1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fdc2 <SATABus::~SATABus()>:
c001fdc2:	83 ec 0c             	sub    esp,0xc
c001fdc5:	ba 70 2e 02 c0       	mov    edx,0xc0022e70
c001fdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdce:	89 10                	mov    DWORD PTR [eax],edx
c001fdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	50                   	push   eax
c001fdd8:	e8 c3 cc fe ff       	call   c000caa0 <HardDiskController::~HardDiskController()>
c001fddd:	83 c4 10             	add    esp,0x10
c001fde0:	90                   	nop
c001fde1:	83 c4 0c             	add    esp,0xc
c001fde4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fde6 <SATABus::~SATABus()>:
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	83 ec 0c             	sub    esp,0xc
c001fdec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf0:	e8 cd ff ff ff       	call   c001fdc2 <SATABus::~SATABus()>
c001fdf5:	83 c4 10             	add    esp,0x10
c001fdf8:	83 ec 08             	sub    esp,0x8
c001fdfb:	68 64 01 00 00       	push   0x164
c001fe00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe04:	e8 03 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe09:	83 c4 10             	add    esp,0x10
c001fe0c:	83 c4 0c             	add    esp,0xc
c001fe0f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fe10 <ATA::~ATA()>:
c001fe10:	83 ec 0c             	sub    esp,0xc
c001fe13:	ba b0 2e 02 c0       	mov    edx,0xc0022eb0
c001fe18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1c:	89 10                	mov    DWORD PTR [eax],edx
c001fe1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe22:	83 ec 0c             	sub    esp,0xc
c001fe25:	50                   	push   eax
c001fe26:	e8 57 cd fe ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	90                   	nop
c001fe2f:	83 c4 0c             	add    esp,0xc
c001fe32:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fe34 <ATA::~ATA()>:
c001fe34:	83 ec 0c             	sub    esp,0xc
c001fe37:	83 ec 0c             	sub    esp,0xc
c001fe3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe3e:	e8 cd ff ff ff       	call   c001fe10 <ATA::~ATA()>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	83 ec 08             	sub    esp,0x8
c001fe49:	68 7c 01 00 00       	push   0x17c
c001fe4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe52:	e8 b5 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe57:	83 c4 10             	add    esp,0x10
c001fe5a:	83 c4 0c             	add    esp,0xc
c001fe5d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fe5e <ATAPI::~ATAPI()>:
c001fe5e:	83 ec 0c             	sub    esp,0xc
c001fe61:	ba f8 2e 02 c0       	mov    edx,0xc0022ef8
c001fe66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6a:	89 10                	mov    DWORD PTR [eax],edx
c001fe6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe70:	83 ec 0c             	sub    esp,0xc
c001fe73:	50                   	push   eax
c001fe74:	e8 09 cd fe ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c001fe79:	83 c4 10             	add    esp,0x10
c001fe7c:	90                   	nop
c001fe7d:	83 c4 0c             	add    esp,0xc
c001fe80:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fe82 <ATAPI::~ATAPI()>:
c001fe82:	83 ec 0c             	sub    esp,0xc
c001fe85:	83 ec 0c             	sub    esp,0xc
c001fe88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe8c:	e8 cd ff ff ff       	call   c001fe5e <ATAPI::~ATAPI()>
c001fe91:	83 c4 10             	add    esp,0x10
c001fe94:	83 ec 08             	sub    esp,0x8
c001fe97:	68 84 01 00 00       	push   0x184
c001fe9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea0:	e8 67 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fea5:	83 c4 10             	add    esp,0x10
c001fea8:	83 c4 0c             	add    esp,0xc
c001feab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001feac <SATA::~SATA()>:
c001feac:	83 ec 0c             	sub    esp,0xc
c001feaf:	ba ac 2f 02 c0       	mov    edx,0xc0022fac
c001feb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb8:	89 10                	mov    DWORD PTR [eax],edx
c001feba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febe:	83 ec 0c             	sub    esp,0xc
c001fec1:	50                   	push   eax
c001fec2:	e8 bb cc fe ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c001fec7:	83 c4 10             	add    esp,0x10
c001feca:	90                   	nop
c001fecb:	83 c4 0c             	add    esp,0xc
c001fece:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fed0 <SATA::~SATA()>:
c001fed0:	83 ec 0c             	sub    esp,0xc
c001fed3:	83 ec 0c             	sub    esp,0xc
c001fed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feda:	e8 cd ff ff ff       	call   c001feac <SATA::~SATA()>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	83 ec 08             	sub    esp,0x8
c001fee5:	68 7c 01 00 00       	push   0x17c
c001feea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feee:	e8 19 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fef3:	83 c4 10             	add    esp,0x10
c001fef6:	83 c4 0c             	add    esp,0xc
c001fef9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fefa <SATAPI::~SATAPI()>:
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	ba d0 30 02 c0       	mov    edx,0xc00230d0
c001ff02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff06:	89 10                	mov    DWORD PTR [eax],edx
c001ff08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	50                   	push   eax
c001ff10:	e8 6d cc fe ff       	call   c000cb82 <PhysicalDisk::~PhysicalDisk()>
c001ff15:	83 c4 10             	add    esp,0x10
c001ff18:	90                   	nop
c001ff19:	83 c4 0c             	add    esp,0xc
c001ff1c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ff1e <SATAPI::~SATAPI()>:
c001ff1e:	83 ec 0c             	sub    esp,0xc
c001ff21:	83 ec 0c             	sub    esp,0xc
c001ff24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff28:	e8 cd ff ff ff       	call   c001fefa <SATAPI::~SATAPI()>
c001ff2d:	83 c4 10             	add    esp,0x10
c001ff30:	83 ec 08             	sub    esp,0x8
c001ff33:	68 84 01 00 00       	push   0x184
c001ff38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3c:	e8 cb a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	83 c4 0c             	add    esp,0xc
c001ff47:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ff48 <IOAPIC::~IOAPIC()>:
c001ff48:	83 ec 0c             	sub    esp,0xc
c001ff4b:	ba 10 31 02 c0       	mov    edx,0xc0023110
c001ff50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff54:	89 10                	mov    DWORD PTR [eax],edx
c001ff56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5a:	83 ec 0c             	sub    esp,0xc
c001ff5d:	50                   	push   eax
c001ff5e:	e8 c3 c6 fe ff       	call   c000c626 <Device::~Device()>
c001ff63:	83 c4 10             	add    esp,0x10
c001ff66:	90                   	nop
c001ff67:	83 c4 0c             	add    esp,0xc
c001ff6a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ff6c <IOAPIC::~IOAPIC()>:
c001ff6c:	83 ec 0c             	sub    esp,0xc
c001ff6f:	83 ec 0c             	sub    esp,0xc
c001ff72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff76:	e8 cd ff ff ff       	call   c001ff48 <IOAPIC::~IOAPIC()>
c001ff7b:	83 c4 10             	add    esp,0x10
c001ff7e:	83 ec 08             	sub    esp,0x8
c001ff81:	68 68 01 00 00       	push   0x168
c001ff86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8a:	e8 7d a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff8f:	83 c4 10             	add    esp,0x10
c001ff92:	83 c4 0c             	add    esp,0xc
c001ff95:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ff98 <APICTimer::~APICTimer()>:
c001ff98:	83 ec 0c             	sub    esp,0xc
c001ff9b:	ba 58 31 02 c0       	mov    edx,0xc0023158
c001ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa4:	89 10                	mov    DWORD PTR [eax],edx
c001ffa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffaa:	83 ec 0c             	sub    esp,0xc
c001ffad:	50                   	push   eax
c001ffae:	e8 49 e1 fe ff       	call   c000e0fc <Timer::~Timer()>
c001ffb3:	83 c4 10             	add    esp,0x10
c001ffb6:	90                   	nop
c001ffb7:	83 c4 0c             	add    esp,0xc
c001ffba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ffbc <APICTimer::~APICTimer()>:
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	83 ec 0c             	sub    esp,0xc
c001ffc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc6:	e8 cd ff ff ff       	call   c001ff98 <APICTimer::~APICTimer()>
c001ffcb:	83 c4 10             	add    esp,0x10
c001ffce:	83 ec 08             	sub    esp,0x8
c001ffd1:	68 60 01 00 00       	push   0x160
c001ffd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffda:	e8 2d a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ffdf:	83 c4 10             	add    esp,0x10
c001ffe2:	83 c4 0c             	add    esp,0xc
c001ffe5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ffe8 <PIT::~PIT()>:
c001ffe8:	83 ec 0c             	sub    esp,0xc
c001ffeb:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c001fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff4:	89 10                	mov    DWORD PTR [eax],edx
c001fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffa:	83 ec 0c             	sub    esp,0xc
c001fffd:	50                   	push   eax
c001fffe:	e8 f9 e0 fe ff       	call   c000e0fc <Timer::~Timer()>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	90                   	nop
c0020007:	83 c4 0c             	add    esp,0xc
c002000a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002000c <PIT::~PIT()>:
c002000c:	83 ec 0c             	sub    esp,0xc
c002000f:	83 ec 0c             	sub    esp,0xc
c0020012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020016:	e8 cd ff ff ff       	call   c001ffe8 <PIT::~PIT()>
c002001b:	83 c4 10             	add    esp,0x10
c002001e:	83 ec 08             	sub    esp,0x8
c0020021:	68 5c 01 00 00       	push   0x15c
c0020026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002002a:	e8 dd a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002002f:	83 c4 10             	add    esp,0x10
c0020032:	83 c4 0c             	add    esp,0xc
c0020035:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be bd 1f 02 c0       	mov    esi,0xc0021fbd
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be d9 1f 02 c0       	mov    esi,0xc0021fd9
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
