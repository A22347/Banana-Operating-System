
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d6 66 01 00       	call   c00166f6 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 4e 03 c0       	mov    eax,0xc0034e44
c0000025:	3d 44 4e 03 c0       	cmp    eax,0xc0034e44
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 4e 03 c0       	push   0xc0034e44
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 4e 03 c0       	mov    eax,0xc0034e44
c0000051:	2d 44 4e 03 c0       	sub    eax,0xc0034e44
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 4e 03 c0       	push   0xc0034e44
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c f8 02 c0       	mov    ebx,0xc002f84c
c0000097:	81 eb 48 f8 02 c0    	sub    ebx,0xc002f848
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 f8 02 c0       	mov    esi,0xc002f848
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 4e 03 c0       	push   0xc0034e44
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 44 4e 03 c0       	push   0xc0034e44
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 73 4b 02 00       	call   c0024e20 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 c4 8f 01 00       	call   c0019289 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 51 4b 02 00       	call   c0024e20 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 5e 50 02 00       	call   c002534c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f1 54 02 00       	call   c00257e8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 e7 01 02 00       	jmp    c0020566 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 f8 02 c0 02 	test   BYTE PTR [edx-0x3ffd07a0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 f8 02 c0 01 	test   BYTE PTR [edx-0x3ffd07a0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 f8 02 c0 08 	test   BYTE PTR [edx-0x3ffd07a0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 f8 02 c0 08 	test   BYTE PTR [edx-0x3ffd07a0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 f8 02 c0 04 	test   BYTE PTR [ecx-0x3ffd07a0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 f8 02 c0 01 	test   BYTE PTR [edx-0x3ffd07a0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c1b:	90                   	nop

c0000c1c <LWIP_PLATFORM_HTONS>:
c0000c1c:	83 ec 04             	sub    esp,0x4
c0000c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000c27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c2b:	c1 e8 08             	shr    eax,0x8
c0000c2e:	89 c2                	mov    edx,eax
c0000c30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c34:	c1 e0 08             	shl    eax,0x8
c0000c37:	09 d0                	or     eax,edx
c0000c39:	83 c4 04             	add    esp,0x4
c0000c3c:	c3                   	ret    
c0000c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0000c40 <LWIP_PLATFORM_HTONL>:
c0000c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c44:	c1 e8 18             	shr    eax,0x18
c0000c47:	89 c2                	mov    edx,eax
c0000c49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c4d:	c1 e8 08             	shr    eax,0x8
c0000c50:	25 00 ff 00 00       	and    eax,0xff00
c0000c55:	09 c2                	or     edx,eax
c0000c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c5b:	c1 e0 08             	shl    eax,0x8
c0000c5e:	25 00 00 ff 00       	and    eax,0xff0000
c0000c63:	09 c2                	or     edx,eax
c0000c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c69:	c1 e0 18             	shl    eax,0x18
c0000c6c:	09 d0                	or     eax,edx
c0000c6e:	c3                   	ret    
c0000c6f:	90                   	nop

c0000c70 <lwip_socket_init>:
c0000c70:	83 ec 0c             	sub    esp,0xc
c0000c73:	83 ec 0c             	sub    esp,0xc
c0000c76:	68 64 f9 02 c0       	push   0xc002f964
c0000c7b:	e8 58 14 02 00       	call   c00220d8 <KeCPuts>
c0000c80:	83 c4 10             	add    esp,0x10
c0000c83:	90                   	nop
c0000c84:	83 c4 0c             	add    esp,0xc
c0000c87:	c3                   	ret    

c0000c88 <tcpip_callback_with_block>:
c0000c88:	83 ec 0c             	sub    esp,0xc
c0000c8b:	83 ec 0c             	sub    esp,0xc
c0000c8e:	68 9f f9 02 c0       	push   0xc002f99f
c0000c93:	e8 28 14 02 00       	call   c00220c0 <KeCPanic>
c0000c98:	83 c4 10             	add    esp,0x10
c0000c9b:	90                   	nop
c0000c9c:	83 c4 0c             	add    esp,0xc
c0000c9f:	c3                   	ret    

c0000ca0 <sys_sem_new>:
c0000ca0:	83 ec 1c             	sub    esp,0x1c
c0000ca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000ca7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000cab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000cb0:	83 ec 08             	sub    esp,0x8
c0000cb3:	50                   	push   eax
c0000cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000cb8:	e8 43 13 02 00       	call   c0022000 <KeNetCreateSemaphore>
c0000cbd:	83 c4 10             	add    esp,0x10
c0000cc0:	b0 00                	mov    al,0x0
c0000cc2:	83 c4 1c             	add    esp,0x1c
c0000cc5:	c3                   	ret    
c0000cc6:	66 90                	xchg   ax,ax

c0000cc8 <sys_sem_free>:
c0000cc8:	83 ec 0c             	sub    esp,0xc
c0000ccb:	83 ec 0c             	sub    esp,0xc
c0000cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd2:	e8 6d 13 02 00       	call   c0022044 <KeNetFreeSemaphore>
c0000cd7:	83 c4 10             	add    esp,0x10
c0000cda:	90                   	nop
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_sem_signal>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cea:	e8 71 13 02 00       	call   c0022060 <KeNetSignalSemaphore>
c0000cef:	83 c4 10             	add    esp,0x10
c0000cf2:	90                   	nop
c0000cf3:	83 c4 0c             	add    esp,0xc
c0000cf6:	c3                   	ret    
c0000cf7:	90                   	nop

c0000cf8 <sys_arch_sem_wait>:
c0000cf8:	83 ec 0c             	sub    esp,0xc
c0000cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000cff:	83 ec 08             	sub    esp,0x8
c0000d02:	50                   	push   eax
c0000d03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000d07:	e8 70 13 02 00       	call   c002207c <KeNetWaitSemaphore>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	83 c4 0c             	add    esp,0xc
c0000d12:	c3                   	ret    
c0000d13:	90                   	nop

c0000d14 <sys_mbox_new>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 b9 f9 02 c0       	push   0xc002f9b9
c0000d1f:	e8 9c 13 02 00       	call   c00220c0 <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	b0 00                	mov    al,0x0
c0000d29:	83 c4 0c             	add    esp,0xc
c0000d2c:	c3                   	ret    
c0000d2d:	8d 76 00             	lea    esi,[esi+0x0]

c0000d30 <sys_mbox_free>:
c0000d30:	83 ec 0c             	sub    esp,0xc
c0000d33:	83 ec 0c             	sub    esp,0xc
c0000d36:	68 c6 f9 02 c0       	push   0xc002f9c6
c0000d3b:	e8 80 13 02 00       	call   c00220c0 <KeCPanic>
c0000d40:	83 c4 10             	add    esp,0x10
c0000d43:	90                   	nop
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_mbox_post>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 d4 f9 02 c0       	push   0xc002f9d4
c0000d53:	e8 68 13 02 00       	call   c00220c0 <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	90                   	nop
c0000d5c:	83 c4 0c             	add    esp,0xc
c0000d5f:	c3                   	ret    

c0000d60 <sys_arch_mbox_fetch>:
c0000d60:	83 ec 0c             	sub    esp,0xc
c0000d63:	83 ec 0c             	sub    esp,0xc
c0000d66:	68 e2 f9 02 c0       	push   0xc002f9e2
c0000d6b:	e8 50 13 02 00       	call   c00220c0 <KeCPanic>
c0000d70:	83 c4 10             	add    esp,0x10
c0000d73:	b8 00 00 00 00       	mov    eax,0x0
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_arch_mbox_tryfetch>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 0c             	sub    esp,0xc
c0000d82:	68 f6 f9 02 c0       	push   0xc002f9f6
c0000d87:	e8 34 13 02 00       	call   c00220c0 <KeCPanic>
c0000d8c:	83 c4 10             	add    esp,0x10
c0000d8f:	b8 00 00 00 00       	mov    eax,0x0
c0000d94:	83 c4 0c             	add    esp,0xc
c0000d97:	c3                   	ret    

c0000d98 <sys_mbox_trypost>:
c0000d98:	83 ec 0c             	sub    esp,0xc
c0000d9b:	83 ec 0c             	sub    esp,0xc
c0000d9e:	68 0d fa 02 c0       	push   0xc002fa0d
c0000da3:	e8 18 13 02 00       	call   c00220c0 <KeCPanic>
c0000da8:	83 c4 10             	add    esp,0x10
c0000dab:	90                   	nop
c0000dac:	83 c4 0c             	add    esp,0xc
c0000daf:	c3                   	ret    

c0000db0 <sys_thread_new>:
c0000db0:	83 ec 0c             	sub    esp,0xc
c0000db3:	83 ec 08             	sub    esp,0x8
c0000db6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dbe:	e8 d9 12 02 00       	call   c002209c <KeNetCreateThread>
c0000dc3:	83 c4 10             	add    esp,0x10
c0000dc6:	b8 00 00 00 00       	mov    eax,0x0
c0000dcb:	83 c4 0c             	add    esp,0xc
c0000dce:	c3                   	ret    
c0000dcf:	90                   	nop

c0000dd0 <sys_init>:
c0000dd0:	90                   	nop
c0000dd1:	c3                   	ret    

c0000dd2 <largebin_index>:
c0000dd2:	89 c2                	mov    edx,eax
c0000dd4:	c1 ea 08             	shr    edx,0x8
c0000dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ddd:	77 10                	ja     c0000def <largebin_index+0x1d>
c0000ddf:	0f bd d2             	bsr    edx,edx
c0000de2:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000de5:	d3 e8                	shr    eax,cl
c0000de7:	83 e0 03             	and    eax,0x3
c0000dea:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dee:	c3                   	ret    
c0000def:	b8 5f 00 00 00       	mov    eax,0x5f
c0000df4:	c3                   	ret    

c0000df5 <malloc_init_state>:
c0000df5:	8d 50 34             	lea    edx,[eax+0x34]
c0000df8:	53                   	push   ebx
c0000df9:	89 d1                	mov    ecx,edx
c0000dfb:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000e01:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000e04:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000e07:	83 c2 08             	add    edx,0x8
c0000e0a:	39 da                	cmp    edx,ebx
c0000e0c:	75 f3                	jne    c0000e01 <malloc_init_state+0xc>
c0000e0e:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000e18:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e1a:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000e24:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e2e:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e38:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e3f:	83 e2 03             	and    edx,0x3
c0000e42:	5b                   	pop    ebx
c0000e43:	83 ca 48             	or     edx,0x48
c0000e46:	89 10                	mov    DWORD PTR [eax],edx
c0000e48:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e4b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e55:	c3                   	ret    

c0000e56 <malloc_consolidate>:
c0000e56:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e58:	85 d2                	test   edx,edx
c0000e5a:	0f 84 d8 00 00 00    	je     c0000f38 <malloc_consolidate+0xe2>
c0000e60:	55                   	push   ebp
c0000e61:	83 e2 fd             	and    edx,0xfffffffd
c0000e64:	57                   	push   edi
c0000e65:	89 c5                	mov    ebp,eax
c0000e67:	56                   	push   esi
c0000e68:	53                   	push   ebx
c0000e69:	8d 78 34             	lea    edi,[eax+0x34]
c0000e6c:	83 ec 10             	sub    esp,0x10
c0000e6f:	89 10                	mov    DWORD PTR [eax],edx
c0000e71:	c1 ea 03             	shr    edx,0x3
c0000e74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e78:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e7c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e80:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e83:	85 d2                	test   edx,edx
c0000e85:	0f 84 98 00 00 00    	je     c0000f23 <malloc_consolidate+0xcd>
c0000e8b:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e92:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e95:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e9c:	89 f9                	mov    ecx,edi
c0000e9e:	83 e1 fe             	and    ecx,0xfffffffe
c0000ea1:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ea4:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ea7:	83 e3 fc             	and    ebx,0xfffffffc
c0000eaa:	83 e7 01             	and    edi,0x1
c0000ead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000eb0:	75 14                	jne    c0000ec6 <malloc_consolidate+0x70>
c0000eb2:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000eb4:	29 fa                	sub    edx,edi
c0000eb6:	01 f9                	add    ecx,edi
c0000eb8:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ebb:	89 fb                	mov    ebx,edi
c0000ebd:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ec0:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ec3:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ec6:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000ec9:	74 40                	je     c0000f0b <malloc_consolidate+0xb5>
c0000ecb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ece:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ed1:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ed5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ed8:	83 e7 01             	and    edi,0x1
c0000edb:	75 0e                	jne    c0000eeb <malloc_consolidate+0x95>
c0000edd:	01 d9                	add    ecx,ebx
c0000edf:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000ee2:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000ee5:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000ee8:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eeb:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eee:	89 ce                	mov    esi,ecx
c0000ef0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ef3:	83 ce 01             	or     esi,0x1
c0000ef6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ef9:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000efc:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000f00:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000f03:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000f06:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000f09:	eb 0c                	jmp    c0000f17 <malloc_consolidate+0xc1>
c0000f0b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000f0e:	83 c9 01             	or     ecx,0x1
c0000f11:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f14:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000f17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000f1b:	85 d2                	test   edx,edx
c0000f1d:	0f 85 6f ff ff ff    	jne    c0000e92 <malloc_consolidate+0x3c>
c0000f23:	83 c5 04             	add    ebp,0x4
c0000f26:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000f2a:	0f 85 50 ff ff ff    	jne    c0000e80 <malloc_consolidate+0x2a>
c0000f30:	83 c4 10             	add    esp,0x10
c0000f33:	5b                   	pop    ebx
c0000f34:	5e                   	pop    esi
c0000f35:	5f                   	pop    edi
c0000f36:	5d                   	pop    ebp
c0000f37:	c3                   	ret    
c0000f38:	e9 b8 fe ff ff       	jmp    c0000df5 <malloc_init_state>

c0000f3d <dlfree>:
c0000f3d:	57                   	push   edi
c0000f3e:	56                   	push   esi
c0000f3f:	53                   	push   ebx
c0000f40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000f44:	85 c9                	test   ecx,ecx
c0000f46:	0f 84 01 01 00 00    	je     c000104d <dlfree+0x110>
c0000f4c:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000f4f:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000f52:	8b 1d e0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368e0
c0000f58:	89 f0                	mov    eax,esi
c0000f5a:	83 e0 fc             	and    eax,0xfffffffc
c0000f5d:	39 c3                	cmp    ebx,eax
c0000f5f:	72 24                	jb     c0000f85 <dlfree+0x48>
c0000f61:	c1 e8 03             	shr    eax,0x3
c0000f64:	83 cb 03             	or     ebx,0x3
c0000f67:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f6d:	83 e8 02             	sub    eax,0x2
c0000f70:	8b 1c 85 e4 68 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc971c]
c0000f77:	89 19                	mov    DWORD PTR [ecx],ebx
c0000f79:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f80:	e9 c8 00 00 00       	jmp    c000104d <dlfree+0x110>
c0000f85:	83 e6 02             	and    esi,0x2
c0000f88:	0f 85 a0 00 00 00    	jne    c000102e <dlfree+0xf1>
c0000f8e:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f91:	83 cb 01             	or     ebx,0x1
c0000f94:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f9a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000f9d:	83 e3 fc             	and    ebx,0xfffffffc
c0000fa0:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000fa4:	75 13                	jne    c0000fb9 <dlfree+0x7c>
c0000fa6:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000fa9:	29 ca                	sub    edx,ecx
c0000fab:	01 c8                	add    eax,ecx
c0000fad:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000fb0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000fb3:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fb6:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fb9:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000fbf:	74 40                	je     c0001001 <dlfree+0xc4>
c0000fc1:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000fc5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000fc8:	80 e1 01             	and    cl,0x1
c0000fcb:	75 0e                	jne    c0000fdb <dlfree+0x9e>
c0000fcd:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000fd0:	01 d8                	add    eax,ebx
c0000fd2:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000fd5:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fd8:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fdb:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fe1:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fe8:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000feb:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000ff1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ff4:	89 c1                	mov    ecx,eax
c0000ff6:	83 c9 01             	or     ecx,0x1
c0000ff9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ffc:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fff:	eb 10                	jmp    c0001011 <dlfree+0xd4>
c0001001:	01 d8                	add    eax,ebx
c0001003:	89 c1                	mov    ecx,eax
c0001005:	83 c9 01             	or     ecx,0x1
c0001008:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000100b:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0001011:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0001016:	76 35                	jbe    c000104d <dlfree+0x110>
c0001018:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c000101f:	74 2c                	je     c000104d <dlfree+0x110>
c0001021:	5b                   	pop    ebx
c0001022:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001027:	5e                   	pop    esi
c0001028:	5f                   	pop    edi
c0001029:	e9 28 fe ff ff       	jmp    c0000e56 <malloc_consolidate>
c000102e:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0001031:	53                   	push   ebx
c0001032:	53                   	push   ebx
c0001033:	ff 0d 30 6c 03 c0    	dec    DWORD PTR ds:0xc0036c30
c0001039:	01 c8                	add    eax,ecx
c000103b:	29 ca                	sub    edx,ecx
c000103d:	50                   	push   eax
c000103e:	52                   	push   edx
c000103f:	29 05 44 6c 03 c0    	sub    DWORD PTR ds:0xc0036c44,eax
c0001045:	e8 d2 55 01 00       	call   c001661c <munmap>
c000104a:	83 c4 10             	add    esp,0x10
c000104d:	5b                   	pop    ebx
c000104e:	5e                   	pop    esi
c000104f:	5f                   	pop    edi
c0001050:	c3                   	ret    

c0001051 <sYSMALLOc>:
c0001051:	55                   	push   ebp
c0001052:	57                   	push   edi
c0001053:	56                   	push   esi
c0001054:	53                   	push   ebx
c0001055:	89 d3                	mov    ebx,edx
c0001057:	83 ec 2c             	sub    esp,0x2c
c000105a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000105e:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0001064:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001067:	8d 41 ff             	lea    eax,[ecx-0x1]
c000106a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000106e:	74 1f                	je     c000108f <sYSMALLOc+0x3e>
c0001070:	89 d0                	mov    eax,edx
c0001072:	e8 df fd ff ff       	call   c0000e56 <malloc_consolidate>
c0001077:	83 ec 0c             	sub    esp,0xc
c000107a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000107e:	83 e8 07             	sub    eax,0x7
c0001081:	50                   	push   eax
c0001082:	e8 78 03 00 00       	call   c00013ff <dlmalloc>
c0001087:	83 c4 10             	add    esp,0x10
c000108a:	e9 68 03 00 00       	jmp    c00013f7 <sYSMALLOc+0x3a6>
c000108f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001093:	f7 d9                	neg    ecx
c0001095:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c000109b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000109f:	0f 87 be 00 00 00    	ja     c0001163 <sYSMALLOc+0x112>
c00010a5:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c00010ab:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c00010b1:	0f 8d ac 00 00 00    	jge    c0001163 <sYSMALLOc+0x112>
c00010b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00010bf:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c00010c3:	21 ce                	and    esi,ecx
c00010c5:	39 fe                	cmp    esi,edi
c00010c7:	0f 86 96 00 00 00    	jbe    c0001163 <sYSMALLOc+0x112>
c00010cd:	52                   	push   edx
c00010ce:	52                   	push   edx
c00010cf:	6a 00                	push   0x0
c00010d1:	6a ff                	push   0xffffffff
c00010d3:	6a 0c                	push   0xc
c00010d5:	6a 03                	push   0x3
c00010d7:	56                   	push   esi
c00010d8:	6a 00                	push   0x0
c00010da:	e8 df 54 01 00       	call   c00165be <mmap>
c00010df:	83 c4 20             	add    esp,0x20
c00010e2:	83 f8 ff             	cmp    eax,0xffffffff
c00010e5:	74 7c                	je     c0001163 <sYSMALLOc+0x112>
c00010e7:	89 c1                	mov    ecx,eax
c00010e9:	83 e1 07             	and    ecx,0x7
c00010ec:	74 13                	je     c0001101 <sYSMALLOc+0xb0>
c00010ee:	ba 08 00 00 00       	mov    edx,0x8
c00010f3:	89 f7                	mov    edi,esi
c00010f5:	29 ca                	sub    edx,ecx
c00010f7:	01 d0                	add    eax,edx
c00010f9:	29 d7                	sub    edi,edx
c00010fb:	89 10                	mov    DWORD PTR [eax],edx
c00010fd:	89 fa                	mov    edx,edi
c00010ff:	eb 08                	jmp    c0001109 <sYSMALLOc+0xb8>
c0001101:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0001107:	89 f2                	mov    edx,esi
c0001109:	83 ca 02             	or     edx,0x2
c000110c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000110f:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0001115:	8d 57 01             	lea    edx,[edi+0x1]
c0001118:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c000111e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0001124:	7e 06                	jle    c000112c <sYSMALLOc+0xdb>
c0001126:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c000112c:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0001132:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0001138:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c000113e:	76 06                	jbe    c0001146 <sYSMALLOc+0xf5>
c0001140:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0001146:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c000114c:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0001152:	0f 83 41 01 00 00    	jae    c0001299 <sYSMALLOc+0x248>
c0001158:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c000115e:	e9 36 01 00 00       	jmp    c0001299 <sYSMALLOc+0x248>
c0001163:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001166:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001173:	83 e0 fc             	and    eax,0xfffffffc
c0001176:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000117a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000117e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001182:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001186:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000118a:	83 c0 10             	add    eax,0x10
c000118d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0001191:	01 c5                	add    ebp,eax
c0001193:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c000119a:	74 04                	je     c00011a0 <sYSMALLOc+0x14f>
c000119c:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c00011a0:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00011a4:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c00011a8:	89 ee                	mov    esi,ebp
c00011aa:	7f 19                	jg     c00011c5 <sYSMALLOc+0x174>
c00011ac:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c00011b3:	74 28                	je     c00011dd <sYSMALLOc+0x18c>
c00011b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00011b9:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00011bd:	01 ee                	add    esi,ebp
c00011bf:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c00011c3:	eb 18                	jmp    c00011dd <sYSMALLOc+0x18c>
c00011c5:	83 ec 0c             	sub    esp,0xc
c00011c8:	55                   	push   ebp
c00011c9:	e8 ba 53 01 00       	call   c0016588 <sbrk_thunk>
c00011ce:	83 c4 10             	add    esp,0x10
c00011d1:	89 c7                	mov    edi,eax
c00011d3:	83 c8 ff             	or     eax,0xffffffff
c00011d6:	83 ff ff             	cmp    edi,0xffffffff
c00011d9:	75 42                	jne    c000121d <sYSMALLOc+0x1cc>
c00011db:	eb cf                	jmp    c00011ac <sYSMALLOc+0x15b>
c00011dd:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c00011e3:	77 05                	ja     c00011ea <sYSMALLOc+0x199>
c00011e5:	be 00 c0 00 00       	mov    esi,0xc000
c00011ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00011ee:	77 07                	ja     c00011f7 <sYSMALLOc+0x1a6>
c00011f0:	31 c0                	xor    eax,eax
c00011f2:	e9 00 02 00 00       	jmp    c00013f7 <sYSMALLOc+0x3a6>
c00011f7:	50                   	push   eax
c00011f8:	50                   	push   eax
c00011f9:	6a 00                	push   0x0
c00011fb:	6a ff                	push   0xffffffff
c00011fd:	6a 0c                	push   0xc
c00011ff:	6a 03                	push   0x3
c0001201:	56                   	push   esi
c0001202:	6a 00                	push   0x0
c0001204:	e8 b5 53 01 00       	call   c00165be <mmap>
c0001209:	83 c4 20             	add    esp,0x20
c000120c:	83 f8 ff             	cmp    eax,0xffffffff
c000120f:	89 c7                	mov    edi,eax
c0001211:	74 dd                	je     c00011f0 <sYSMALLOc+0x19f>
c0001213:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000121a:	8d 04 30             	lea    eax,[eax+esi*1]
c000121d:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c0001223:	01 f1                	add    ecx,esi
c0001225:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001229:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c000122f:	75 70                	jne    c00012a1 <sYSMALLOc+0x250>
c0001231:	83 f8 ff             	cmp    eax,0xffffffff
c0001234:	75 6b                	jne    c00012a1 <sYSMALLOc+0x250>
c0001236:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c000123a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000123e:	83 ce 01             	or     esi,0x1
c0001241:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001244:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000124a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001250:	73 06                	jae    c0001258 <sYSMALLOc+0x207>
c0001252:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001258:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000125e:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001264:	73 06                	jae    c000126c <sYSMALLOc+0x21b>
c0001266:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000126c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000126f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001272:	83 e2 fc             	and    edx,0xfffffffc
c0001275:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c0001279:	0f 87 71 ff ff ff    	ja     c00011f0 <sYSMALLOc+0x19f>
c000127f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001283:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001286:	29 fa                	sub    edx,edi
c0001288:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000128b:	89 fb                	mov    ebx,edi
c000128d:	83 ca 01             	or     edx,0x1
c0001290:	83 cb 01             	or     ebx,0x1
c0001293:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001296:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001299:	83 c0 08             	add    eax,0x8
c000129c:	e9 56 01 00 00       	jmp    c00013f7 <sYSMALLOc+0x3a6>
c00012a1:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00012a7:	f6 c2 01             	test   dl,0x1
c00012aa:	74 1e                	je     c00012ca <sYSMALLOc+0x279>
c00012ac:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00012b1:	0f 84 bb 00 00 00    	je     c0001372 <sYSMALLOc+0x321>
c00012b7:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c00012bb:	0f 86 b1 00 00 00    	jbe    c0001372 <sYSMALLOc+0x321>
c00012c1:	83 e2 fe             	and    edx,0xfffffffe
c00012c4:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00012ca:	83 f8 ff             	cmp    eax,0xffffffff
c00012cd:	89 fd                	mov    ebp,edi
c00012cf:	75 24                	jne    c00012f5 <sYSMALLOc+0x2a4>
c00012d1:	83 ec 0c             	sub    esp,0xc
c00012d4:	89 fd                	mov    ebp,edi
c00012d6:	6a 00                	push   0x0
c00012d8:	e8 ab 52 01 00       	call   c0016588 <sbrk_thunk>
c00012dd:	83 c4 10             	add    esp,0x10
c00012e0:	89 c2                	mov    edx,eax
c00012e2:	29 fa                	sub    edx,edi
c00012e4:	29 f2                	sub    edx,esi
c00012e6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00012ec:	83 f8 ff             	cmp    eax,0xffffffff
c00012ef:	0f 84 4f ff ff ff    	je     c0001244 <sYSMALLOc+0x1f3>
c00012f5:	31 c9                	xor    ecx,ecx
c00012f7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00012fa:	29 e8                	sub    eax,ebp
c00012fc:	01 c8                	add    eax,ecx
c00012fe:	83 c8 01             	or     eax,0x1
c0001301:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001304:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000130a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000130f:	0f 84 2f ff ff ff    	je     c0001244 <sYSMALLOc+0x1f3>
c0001315:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001319:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000131d:	83 ee 0c             	sub    esi,0xc
c0001320:	83 e6 f8             	and    esi,0xfffffff8
c0001323:	89 f0                	mov    eax,esi
c0001325:	83 c8 01             	or     eax,0x1
c0001328:	83 fe 0f             	cmp    esi,0xf
c000132b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000132e:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c0001336:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c000133e:	0f 86 00 ff ff ff    	jbe    c0001244 <sYSMALLOc+0x1f3>
c0001344:	83 ec 0c             	sub    esp,0xc
c0001347:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000134d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000135b:	83 c0 08             	add    eax,0x8
c000135e:	50                   	push   eax
c000135f:	e8 d9 fb ff ff       	call   c0000f3d <dlfree>
c0001364:	83 c4 10             	add    esp,0x10
c0001367:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000136d:	e9 d2 fe ff ff       	jmp    c0001244 <sYSMALLOc+0x1f3>
c0001372:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001377:	74 0e                	je     c0001387 <sYSMALLOc+0x336>
c0001379:	89 f8                	mov    eax,edi
c000137b:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000137f:	01 c1                	add    ecx,eax
c0001381:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001387:	89 fa                	mov    edx,edi
c0001389:	83 e2 07             	and    edx,0x7
c000138c:	74 0c                	je     c000139a <sYSMALLOc+0x349>
c000138e:	b8 08 00 00 00       	mov    eax,0x8
c0001393:	29 d0                	sub    eax,edx
c0001395:	8d 2c 07             	lea    ebp,[edi+eax*1]
c0001398:	eb 04                	jmp    c000139e <sYSMALLOc+0x34d>
c000139a:	89 fd                	mov    ebp,edi
c000139c:	31 c0                	xor    eax,eax
c000139e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00013a2:	83 ec 0c             	sub    esp,0xc
c00013a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00013a9:	8d 14 06             	lea    edx,[esi+eax*1]
c00013ac:	01 fa                	add    edx,edi
c00013ae:	01 d1                	add    ecx,edx
c00013b0:	29 d0                	sub    eax,edx
c00013b2:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00013b6:	01 c1                	add    ecx,eax
c00013b8:	51                   	push   ecx
c00013b9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00013bd:	e8 c6 51 01 00       	call   c0016588 <sbrk_thunk>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c9:	83 f8 ff             	cmp    eax,0xffffffff
c00013cc:	75 12                	jne    c00013e0 <sYSMALLOc+0x38f>
c00013ce:	83 ec 0c             	sub    esp,0xc
c00013d1:	6a 00                	push   0x0
c00013d3:	e8 b0 51 01 00       	call   c0016588 <sbrk_thunk>
c00013d8:	83 c4 10             	add    esp,0x10
c00013db:	e9 0c ff ff ff       	jmp    c00012ec <sYSMALLOc+0x29b>
c00013e0:	39 f8                	cmp    eax,edi
c00013e2:	0f 83 0f ff ff ff    	jae    c00012f7 <sYSMALLOc+0x2a6>
c00013e8:	8d 04 37             	lea    eax,[edi+esi*1]
c00013eb:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00013f2:	e9 f5 fe ff ff       	jmp    c00012ec <sYSMALLOc+0x29b>
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	c3                   	ret    

c00013ff <dlmalloc>:
c00013ff:	55                   	push   ebp
c0001400:	57                   	push   edi
c0001401:	56                   	push   esi
c0001402:	53                   	push   ebx
c0001403:	83 ec 1c             	sub    esp,0x1c
c0001406:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000140a:	83 f8 df             	cmp    eax,0xffffffdf
c000140d:	0f 87 70 03 00 00    	ja     c0001783 <dlmalloc+0x384>
c0001413:	83 c0 0b             	add    eax,0xb
c0001416:	be 10 00 00 00       	mov    esi,0x10
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 05                	jbe    c0001425 <dlmalloc+0x26>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 c6                	mov    esi,eax
c0001425:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c000142b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001431:	75 17                	jne    c000144a <dlmalloc+0x4b>
c0001433:	85 ff                	test   edi,edi
c0001435:	0f 85 05 03 00 00    	jne    c0001740 <dlmalloc+0x341>
c000143b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001440:	e8 11 fa ff ff       	call   c0000e56 <malloc_consolidate>
c0001445:	e9 f6 02 00 00       	jmp    c0001740 <dlmalloc+0x341>
c000144a:	39 f7                	cmp    edi,esi
c000144c:	72 1f                	jb     c000146d <dlmalloc+0x6e>
c000144e:	89 f2                	mov    edx,esi
c0001450:	c1 ea 03             	shr    edx,0x3
c0001453:	83 ea 02             	sub    edx,0x2
c0001456:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c000145d:	85 c0                	test   eax,eax
c000145f:	74 0c                	je     c000146d <dlmalloc+0x6e>
c0001461:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001464:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c000146b:	eb 30                	jmp    c000149d <dlmalloc+0x9e>
c000146d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001473:	89 f0                	mov    eax,esi
c0001475:	77 2e                	ja     c00014a5 <dlmalloc+0xa6>
c0001477:	c1 e8 03             	shr    eax,0x3
c000147a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000147e:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001485:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001488:	8d 5a f8             	lea    ebx,[edx-0x8]
c000148b:	39 c3                	cmp    ebx,eax
c000148d:	74 2e                	je     c00014bd <dlmalloc+0xbe>
c000148f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001492:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001497:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000149a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000149d:	83 c0 08             	add    eax,0x8
c00014a0:	e9 e0 02 00 00       	jmp    c0001785 <dlmalloc+0x386>
c00014a5:	e8 28 f9 ff ff       	call   c0000dd2 <largebin_index>
c00014aa:	83 e7 02             	and    edi,0x2
c00014ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00014b1:	74 0a                	je     c00014bd <dlmalloc+0xbe>
c00014b3:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00014b8:	e8 99 f9 ff ff       	call   c0000e56 <malloc_consolidate>
c00014bd:	8d 46 10             	lea    eax,[esi+0x10]
c00014c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c4:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c00014ca:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c00014d0:	0f 84 13 01 00 00    	je     c00015e9 <dlmalloc+0x1ea>
c00014d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00014d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014dc:	83 e7 fc             	and    edi,0xfffffffc
c00014df:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014e5:	77 4c                	ja     c0001533 <dlmalloc+0x134>
c00014e7:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c00014ec:	75 45                	jne    c0001533 <dlmalloc+0x134>
c00014ee:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c00014f4:	75 3d                	jne    c0001533 <dlmalloc+0x134>
c00014f6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00014fa:	73 37                	jae    c0001533 <dlmalloc+0x134>
c00014fc:	8d 04 33             	lea    eax,[ebx+esi*1]
c00014ff:	89 fa                	mov    edx,edi
c0001501:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c0001506:	29 f2                	sub    edx,esi
c0001508:	83 ce 01             	or     esi,0x1
c000150b:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001510:	89 d1                	mov    ecx,edx
c0001512:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c0001517:	83 c9 01             	or     ecx,0x1
c000151a:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001521:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c0001528:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000152b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000152e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001531:	eb 15                	jmp    c0001548 <dlmalloc+0x149>
c0001533:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001538:	39 fe                	cmp    esi,edi
c000153a:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001541:	75 0d                	jne    c0001550 <dlmalloc+0x151>
c0001543:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001548:	8d 43 08             	lea    eax,[ebx+0x8]
c000154b:	e9 35 02 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001550:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001556:	89 f8                	mov    eax,edi
c0001558:	77 19                	ja     c0001573 <dlmalloc+0x174>
c000155a:	c1 e8 03             	shr    eax,0x3
c000155d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001560:	83 c2 0d             	add    edx,0xd
c0001563:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c000156a:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001571:	eb 46                	jmp    c00015b9 <dlmalloc+0x1ba>
c0001573:	e8 5a f8 ff ff       	call   c0000dd2 <largebin_index>
c0001578:	8d 14 00             	lea    edx,[eax+eax*1]
c000157b:	83 c2 0d             	add    edx,0xd
c000157e:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001585:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000158c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000158f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001593:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001597:	89 d5                	mov    ebp,edx
c0001599:	74 1e                	je     c00015b9 <dlmalloc+0x1ba>
c000159b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000159e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00015a1:	77 12                	ja     c00015b5 <dlmalloc+0x1b6>
c00015a3:	83 cf 01             	or     edi,0x1
c00015a6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00015a9:	76 05                	jbe    c00015b0 <dlmalloc+0x1b1>
c00015ab:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00015ae:	eb f6                	jmp    c00015a6 <dlmalloc+0x1a7>
c00015b0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00015b3:	eb 04                	jmp    c00015b9 <dlmalloc+0x1ba>
c00015b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00015b9:	89 c7                	mov    edi,eax
c00015bb:	88 c1                	mov    cl,al
c00015bd:	c1 ff 05             	sar    edi,0x5
c00015c0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00015c4:	bf 01 00 00 00       	mov    edi,0x1
c00015c9:	d3 e7                	shl    edi,cl
c00015cb:	89 f8                	mov    eax,edi
c00015cd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00015d1:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c00015d8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00015db:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00015de:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00015e1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00015e4:	e9 db fe ff ff       	jmp    c00014c4 <dlmalloc+0xc5>
c00015e9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015ef:	76 78                	jbe    c0001669 <dlmalloc+0x26a>
c00015f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00015f5:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c00015fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015ff:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001602:	39 ca                	cmp    edx,ecx
c0001604:	74 63                	je     c0001669 <dlmalloc+0x26a>
c0001606:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	83 e3 fc             	and    ebx,0xfffffffc
c000160f:	39 de                	cmp    esi,ebx
c0001611:	77 52                	ja     c0001665 <dlmalloc+0x266>
c0001613:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001616:	89 df                	mov    edi,ebx
c0001618:	01 d3                	add    ebx,edx
c000161a:	29 f7                	sub    edi,esi
c000161c:	83 ff 0f             	cmp    edi,0xf
c000161f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001622:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001625:	8d 42 08             	lea    eax,[edx+0x8]
c0001628:	77 09                	ja     c0001633 <dlmalloc+0x234>
c000162a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000162e:	e9 52 01 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001633:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001636:	83 ce 01             	or     esi,0x1
c0001639:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c000163f:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c0001645:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c000164c:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c0001653:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001656:	89 fa                	mov    edx,edi
c0001658:	83 ca 01             	or     edx,0x1
c000165b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000165e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001660:	e9 20 01 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001665:	89 c2                	mov    edx,eax
c0001667:	eb 99                	jmp    c0001602 <dlmalloc+0x203>
c0001669:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000166d:	b8 01 00 00 00       	mov    eax,0x1
c0001672:	41                   	inc    ecx
c0001673:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c000167a:	89 cb                	mov    ebx,ecx
c000167c:	c1 eb 05             	shr    ebx,0x5
c000167f:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001686:	d3 e0                	shl    eax,cl
c0001688:	39 f8                	cmp    eax,edi
c000168a:	77 04                	ja     c0001690 <dlmalloc+0x291>
c000168c:	85 c0                	test   eax,eax
c000168e:	75 26                	jne    c00016b6 <dlmalloc+0x2b7>
c0001690:	43                   	inc    ebx
c0001691:	83 fb 02             	cmp    ebx,0x2
c0001694:	0f 87 a6 00 00 00    	ja     c0001740 <dlmalloc+0x341>
c000169a:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c00016a1:	85 ff                	test   edi,edi
c00016a3:	74 eb                	je     c0001690 <dlmalloc+0x291>
c00016a5:	89 d8                	mov    eax,ebx
c00016a7:	c1 e0 06             	shl    eax,0x6
c00016aa:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c00016b1:	b8 01 00 00 00       	mov    eax,0x1
c00016b6:	85 f8                	test   eax,edi
c00016b8:	75 07                	jne    c00016c1 <dlmalloc+0x2c2>
c00016ba:	83 c2 08             	add    edx,0x8
c00016bd:	01 c0                	add    eax,eax
c00016bf:	eb f5                	jmp    c00016b6 <dlmalloc+0x2b7>
c00016c1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00016c4:	39 ca                	cmp    edx,ecx
c00016c6:	75 14                	jne    c00016dc <dlmalloc+0x2dd>
c00016c8:	89 c1                	mov    ecx,eax
c00016ca:	83 c2 08             	add    edx,0x8
c00016cd:	f7 d1                	not    ecx
c00016cf:	01 c0                	add    eax,eax
c00016d1:	21 cf                	and    edi,ecx
c00016d3:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c00016da:	eb ac                	jmp    c0001688 <dlmalloc+0x289>
c00016dc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00016df:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00016e2:	83 e0 fc             	and    eax,0xfffffffc
c00016e5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00016e8:	89 c3                	mov    ebx,eax
c00016ea:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00016ed:	8d 14 01             	lea    edx,[ecx+eax*1]
c00016f0:	29 f3                	sub    ebx,esi
c00016f2:	8d 41 08             	lea    eax,[ecx+0x8]
c00016f5:	83 fb 0f             	cmp    ebx,0xf
c00016f8:	77 09                	ja     c0001703 <dlmalloc+0x304>
c00016fa:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00016fe:	e9 82 00 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001703:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001706:	81 fe ff 00 00 00    	cmp    esi,0xff
c000170c:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c0001712:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c0001718:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c000171f:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c0001726:	77 06                	ja     c000172e <dlmalloc+0x32f>
c0001728:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c000172e:	83 ce 01             	or     esi,0x1
c0001731:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001734:	89 d9                	mov    ecx,ebx
c0001736:	83 c9 01             	or     ecx,0x1
c0001739:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000173c:	89 1a                	mov    DWORD PTR [edx],ebx
c000173e:	eb 45                	jmp    c0001785 <dlmalloc+0x386>
c0001740:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001745:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001748:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000174b:	83 e2 fc             	and    edx,0xfffffffc
c000174e:	39 d1                	cmp    ecx,edx
c0001750:	77 1e                	ja     c0001770 <dlmalloc+0x371>
c0001752:	89 f3                	mov    ebx,esi
c0001754:	29 f2                	sub    edx,esi
c0001756:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001759:	83 cb 01             	or     ebx,0x1
c000175c:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c0001762:	83 ca 01             	or     edx,0x1
c0001765:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001768:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000176b:	e9 2d fd ff ff       	jmp    c000149d <dlmalloc+0x9e>
c0001770:	83 c4 1c             	add    esp,0x1c
c0001773:	89 f0                	mov    eax,esi
c0001775:	5b                   	pop    ebx
c0001776:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c000177b:	5e                   	pop    esi
c000177c:	5f                   	pop    edi
c000177d:	5d                   	pop    ebp
c000177e:	e9 ce f8 ff ff       	jmp    c0001051 <sYSMALLOc>
c0001783:	31 c0                	xor    eax,eax
c0001785:	83 c4 1c             	add    esp,0x1c
c0001788:	5b                   	pop    ebx
c0001789:	5e                   	pop    esi
c000178a:	5f                   	pop    edi
c000178b:	5d                   	pop    ebp
c000178c:	c3                   	ret    

c000178d <iALLOc>:
c000178d:	55                   	push   ebp
c000178e:	89 c5                	mov    ebp,eax
c0001790:	57                   	push   edi
c0001791:	56                   	push   esi
c0001792:	53                   	push   ebx
c0001793:	83 ec 2c             	sub    esp,0x2c
c0001796:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000179a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000179e:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c00017a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017a9:	75 12                	jne    c00017bd <iALLOc+0x30>
c00017ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00017af:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00017b4:	e8 9d f6 ff ff       	call   c0000e56 <malloc_consolidate>
c00017b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00017bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00017c2:	74 12                	je     c00017d6 <iALLOc+0x49>
c00017c4:	85 ed                	test   ebp,ebp
c00017c6:	0f 84 64 01 00 00    	je     c0001930 <iALLOc+0x1a3>
c00017cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00017d4:	eb 33                	jmp    c0001809 <iALLOc+0x7c>
c00017d6:	85 ed                	test   ebp,ebp
c00017d8:	75 14                	jne    c00017ee <iALLOc+0x61>
c00017da:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00017e2:	83 c4 2c             	add    esp,0x2c
c00017e5:	5b                   	pop    ebx
c00017e6:	5e                   	pop    esi
c00017e7:	5f                   	pop    edi
c00017e8:	5d                   	pop    ebp
c00017e9:	e9 11 fc ff ff       	jmp    c00013ff <dlmalloc>
c00017ee:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00017f6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00017fd:	83 f8 0f             	cmp    eax,0xf
c0001800:	76 07                	jbe    c0001809 <iALLOc+0x7c>
c0001802:	83 e0 f8             	and    eax,0xfffffff8
c0001805:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001809:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000180e:	75 09                	jne    c0001819 <iALLOc+0x8c>
c0001810:	89 d0                	mov    eax,edx
c0001812:	31 f6                	xor    esi,esi
c0001814:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001817:	eb 3b                	jmp    c0001854 <iALLOc+0xc7>
c0001819:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001821:	8b 02                	mov    eax,DWORD PTR [edx]
c0001823:	83 c0 0b             	add    eax,0xb
c0001826:	83 f8 0f             	cmp    eax,0xf
c0001829:	76 07                	jbe    c0001832 <iALLOc+0xa5>
c000182b:	83 e0 f8             	and    eax,0xfffffff8
c000182e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001832:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001836:	0f af f5             	imul   esi,ebp
c0001839:	eb 25                	jmp    c0001860 <iALLOc+0xd3>
c000183b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000183d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001840:	bb 10 00 00 00       	mov    ebx,0x10
c0001845:	83 f9 0f             	cmp    ecx,0xf
c0001848:	76 05                	jbe    c000184f <iALLOc+0xc2>
c000184a:	83 e1 f8             	and    ecx,0xfffffff8
c000184d:	89 cb                	mov    ebx,ecx
c000184f:	01 de                	add    esi,ebx
c0001851:	83 c0 04             	add    eax,0x4
c0001854:	39 c7                	cmp    edi,eax
c0001856:	75 e3                	jne    c000183b <iALLOc+0xae>
c0001858:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001860:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001864:	83 ec 0c             	sub    esp,0xc
c0001867:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c000186d:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000187b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000187f:	50                   	push   eax
c0001880:	e8 7a fb ff ff       	call   c00013ff <dlmalloc>
c0001885:	83 c4 10             	add    esp,0x10
c0001888:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c000188e:	85 c0                	test   eax,eax
c0001890:	0f 84 92 00 00 00    	je     c0001928 <iALLOc+0x19b>
c0001896:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001899:	8d 78 f8             	lea    edi,[eax-0x8]
c000189c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00018a0:	83 e3 fc             	and    ebx,0xfffffffc
c00018a3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00018a8:	74 1e                	je     c00018c8 <iALLOc+0x13b>
c00018aa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00018ae:	89 d9                	mov    ecx,ebx
c00018b0:	52                   	push   edx
c00018b1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00018b5:	83 e9 04             	sub    ecx,0x4
c00018b8:	51                   	push   ecx
c00018b9:	6a 00                	push   0x0
c00018bb:	50                   	push   eax
c00018bc:	e8 2f ec ff ff       	call   c00004f0 <memset>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00018c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00018cd:	75 14                	jne    c00018e3 <iALLOc+0x156>
c00018cf:	8d 04 37             	lea    eax,[edi+esi*1]
c00018d2:	29 f3                	sub    ebx,esi
c00018d4:	8d 48 08             	lea    ecx,[eax+0x8]
c00018d7:	83 cb 01             	or     ebx,0x1
c00018da:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00018dd:	89 f3                	mov    ebx,esi
c00018df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00018e3:	31 c0                	xor    eax,eax
c00018e5:	4d                   	dec    ebp
c00018e6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018ea:	8d 4f 08             	lea    ecx,[edi+0x8]
c00018ed:	39 c5                	cmp    ebp,eax
c00018ef:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00018f2:	74 2c                	je     c0001920 <iALLOc+0x193>
c00018f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00018f8:	85 c9                	test   ecx,ecx
c00018fa:	75 15                	jne    c0001911 <iALLOc+0x184>
c00018fc:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00018ff:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001902:	b9 10 00 00 00       	mov    ecx,0x10
c0001907:	83 fe 0f             	cmp    esi,0xf
c000190a:	76 05                	jbe    c0001911 <iALLOc+0x184>
c000190c:	83 e6 f8             	and    esi,0xfffffff8
c000190f:	89 f1                	mov    ecx,esi
c0001911:	89 ce                	mov    esi,ecx
c0001913:	29 cb                	sub    ebx,ecx
c0001915:	83 ce 01             	or     esi,0x1
c0001918:	40                   	inc    eax
c0001919:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000191c:	01 cf                	add    edi,ecx
c000191e:	eb c6                	jmp    c00018e6 <iALLOc+0x159>
c0001920:	83 cb 01             	or     ebx,0x1
c0001923:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001926:	eb 08                	jmp    c0001930 <iALLOc+0x1a3>
c0001928:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001934:	83 c4 2c             	add    esp,0x2c
c0001937:	5b                   	pop    ebx
c0001938:	5e                   	pop    esi
c0001939:	5f                   	pop    edi
c000193a:	5d                   	pop    ebp
c000193b:	c3                   	ret    

c000193c <dlrealloc>:
c000193c:	55                   	push   ebp
c000193d:	57                   	push   edi
c000193e:	56                   	push   esi
c000193f:	53                   	push   ebx
c0001940:	83 ec 1c             	sub    esp,0x1c
c0001943:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001947:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000194b:	85 db                	test   ebx,ebx
c000194d:	75 10                	jne    c000195f <dlrealloc+0x23>
c000194f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001953:	83 c4 1c             	add    esp,0x1c
c0001956:	5b                   	pop    ebx
c0001957:	5e                   	pop    esi
c0001958:	5f                   	pop    edi
c0001959:	5d                   	pop    ebp
c000195a:	e9 a0 fa ff ff       	jmp    c00013ff <dlmalloc>
c000195f:	83 f8 df             	cmp    eax,0xffffffdf
c0001962:	0f 87 a6 01 00 00    	ja     c0001b0e <dlrealloc+0x1d2>
c0001968:	83 c0 0b             	add    eax,0xb
c000196b:	bd 10 00 00 00       	mov    ebp,0x10
c0001970:	83 f8 0f             	cmp    eax,0xf
c0001973:	76 05                	jbe    c000197a <dlrealloc+0x3e>
c0001975:	83 e0 f8             	and    eax,0xfffffff8
c0001978:	89 c5                	mov    ebp,eax
c000197a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000197d:	89 ce                	mov    esi,ecx
c000197f:	83 e6 fc             	and    esi,0xfffffffc
c0001982:	f6 c1 02             	test   cl,0x2
c0001985:	0f 85 4e 01 00 00    	jne    c0001ad9 <dlrealloc+0x19d>
c000198b:	8d 7b f8             	lea    edi,[ebx-0x8]
c000198e:	39 f5                	cmp    ebp,esi
c0001990:	0f 86 04 01 00 00    	jbe    c0001a9a <dlrealloc+0x15e>
c0001996:	8d 14 37             	lea    edx,[edi+esi*1]
c0001999:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c000199f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00019a2:	75 33                	jne    c00019d7 <dlrealloc+0x9b>
c00019a4:	83 e0 fc             	and    eax,0xfffffffc
c00019a7:	01 f0                	add    eax,esi
c00019a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00019ad:	8d 45 10             	lea    eax,[ebp+0x10]
c00019b0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00019b4:	77 49                	ja     c00019ff <dlrealloc+0xc3>
c00019b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00019ba:	83 e1 01             	and    ecx,0x1
c00019bd:	01 ef                	add    edi,ebp
c00019bf:	09 e9                	or     ecx,ebp
c00019c1:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00019c4:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c00019ca:	29 e8                	sub    eax,ebp
c00019cc:	83 c8 01             	or     eax,0x1
c00019cf:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00019d2:	e9 39 01 00 00       	jmp    c0001b10 <dlrealloc+0x1d4>
c00019d7:	89 c1                	mov    ecx,eax
c00019d9:	83 e1 fe             	and    ecx,0xfffffffe
c00019dc:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00019e1:	75 1c                	jne    c00019ff <dlrealloc+0xc3>
c00019e3:	83 e0 fc             	and    eax,0xfffffffc
c00019e6:	01 f0                	add    eax,esi
c00019e8:	39 c5                	cmp    ebp,eax
c00019ea:	77 13                	ja     c00019ff <dlrealloc+0xc3>
c00019ec:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00019ef:	89 c6                	mov    esi,eax
c00019f1:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00019f4:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00019f7:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00019fa:	e9 9b 00 00 00       	jmp    c0001a9a <dlrealloc+0x15e>
c00019ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001a03:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001a06:	83 ec 0c             	sub    esp,0xc
c0001a09:	50                   	push   eax
c0001a0a:	e8 f0 f9 ff ff       	call   c00013ff <dlmalloc>
c0001a0f:	83 c4 10             	add    esp,0x10
c0001a12:	85 c0                	test   eax,eax
c0001a14:	0f 84 f4 00 00 00    	je     c0001b0e <dlrealloc+0x1d2>
c0001a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a1e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001a21:	39 ca                	cmp    edx,ecx
c0001a23:	75 0a                	jne    c0001a2f <dlrealloc+0xf3>
c0001a25:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a28:	83 e0 fc             	and    eax,0xfffffffc
c0001a2b:	01 c6                	add    esi,eax
c0001a2d:	eb 6b                	jmp    c0001a9a <dlrealloc+0x15e>
c0001a2f:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001a32:	83 f9 27             	cmp    ecx,0x27
c0001a35:	76 08                	jbe    c0001a3f <dlrealloc+0x103>
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 c7                	mov    edi,eax
c0001a3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a3d:	eb 43                	jmp    c0001a82 <dlrealloc+0x146>
c0001a3f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001a41:	83 f9 13             	cmp    ecx,0x13
c0001a44:	89 10                	mov    DWORD PTR [eax],edx
c0001a46:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001a49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001a4c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001a4f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001a52:	76 2e                	jbe    c0001a82 <dlrealloc+0x146>
c0001a54:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001a57:	83 f9 1b             	cmp    ecx,0x1b
c0001a5a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001a5d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001a60:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001a63:	76 1d                	jbe    c0001a82 <dlrealloc+0x146>
c0001a65:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001a68:	83 f9 23             	cmp    ecx,0x23
c0001a6b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001a6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001a71:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001a74:	76 0c                	jbe    c0001a82 <dlrealloc+0x146>
c0001a76:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001a79:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001a7c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001a7f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001a82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001a86:	83 ec 0c             	sub    esp,0xc
c0001a89:	53                   	push   ebx
c0001a8a:	e8 ae f4 ff ff       	call   c0000f3d <dlfree>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001a96:	89 c3                	mov    ebx,eax
c0001a98:	eb 76                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001a9a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001a9d:	8d 04 37             	lea    eax,[edi+esi*1]
c0001aa0:	89 f2                	mov    edx,esi
c0001aa2:	29 ea                	sub    edx,ebp
c0001aa4:	83 e1 01             	and    ecx,0x1
c0001aa7:	83 fa 0f             	cmp    edx,0xf
c0001aaa:	77 0b                	ja     c0001ab7 <dlrealloc+0x17b>
c0001aac:	09 f1                	or     ecx,esi
c0001aae:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001ab1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001ab5:	eb 59                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001ab7:	01 ef                	add    edi,ebp
c0001ab9:	83 ca 01             	or     edx,0x1
c0001abc:	09 cd                	or     ebp,ecx
c0001abe:	83 ec 0c             	sub    esp,0xc
c0001ac1:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001ac4:	83 c7 08             	add    edi,0x8
c0001ac7:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001aca:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001ace:	57                   	push   edi
c0001acf:	e8 69 f4 ff ff       	call   c0000f3d <dlfree>
c0001ad4:	83 c4 10             	add    esp,0x10
c0001ad7:	eb 37                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001ad9:	8d 45 04             	lea    eax,[ebp+0x4]
c0001adc:	39 f0                	cmp    eax,esi
c0001ade:	76 30                	jbe    c0001b10 <dlrealloc+0x1d4>
c0001ae0:	83 ec 0c             	sub    esp,0xc
c0001ae3:	83 ed 07             	sub    ebp,0x7
c0001ae6:	55                   	push   ebp
c0001ae7:	e8 13 f9 ff ff       	call   c00013ff <dlmalloc>
c0001aec:	83 c4 10             	add    esp,0x10
c0001aef:	85 c0                	test   eax,eax
c0001af1:	89 c5                	mov    ebp,eax
c0001af3:	74 19                	je     c0001b0e <dlrealloc+0x1d2>
c0001af5:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001af8:	89 c7                	mov    edi,eax
c0001afa:	89 de                	mov    esi,ebx
c0001afc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001afe:	83 ec 0c             	sub    esp,0xc
c0001b01:	53                   	push   ebx
c0001b02:	89 eb                	mov    ebx,ebp
c0001b04:	e8 34 f4 ff ff       	call   c0000f3d <dlfree>
c0001b09:	83 c4 10             	add    esp,0x10
c0001b0c:	eb 02                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001b0e:	31 db                	xor    ebx,ebx
c0001b10:	83 c4 1c             	add    esp,0x1c
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	5e                   	pop    esi
c0001b17:	5f                   	pop    edi
c0001b18:	5d                   	pop    ebp
c0001b19:	c3                   	ret    

c0001b1a <dlmemalign>:
c0001b1a:	55                   	push   ebp
c0001b1b:	57                   	push   edi
c0001b1c:	56                   	push   esi
c0001b1d:	53                   	push   ebx
c0001b1e:	83 ec 0c             	sub    esp,0xc
c0001b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001b25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001b29:	83 fa 08             	cmp    edx,0x8
c0001b2c:	77 10                	ja     c0001b3e <dlmemalign+0x24>
c0001b2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001b32:	83 c4 0c             	add    esp,0xc
c0001b35:	5b                   	pop    ebx
c0001b36:	5e                   	pop    esi
c0001b37:	5f                   	pop    edi
c0001b38:	5d                   	pop    ebp
c0001b39:	e9 c1 f8 ff ff       	jmp    c00013ff <dlmalloc>
c0001b3e:	83 fa 0f             	cmp    edx,0xf
c0001b41:	bf 10 00 00 00       	mov    edi,0x10
c0001b46:	76 13                	jbe    c0001b5b <dlmemalign+0x41>
c0001b48:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001b4b:	85 d1                	test   ecx,edx
c0001b4d:	75 04                	jne    c0001b53 <dlmemalign+0x39>
c0001b4f:	89 d7                	mov    edi,edx
c0001b51:	eb 08                	jmp    c0001b5b <dlmemalign+0x41>
c0001b53:	39 d7                	cmp    edi,edx
c0001b55:	73 04                	jae    c0001b5b <dlmemalign+0x41>
c0001b57:	01 ff                	add    edi,edi
c0001b59:	eb f8                	jmp    c0001b53 <dlmemalign+0x39>
c0001b5b:	83 f8 df             	cmp    eax,0xffffffdf
c0001b5e:	76 07                	jbe    c0001b67 <dlmemalign+0x4d>
c0001b60:	31 c0                	xor    eax,eax
c0001b62:	e9 ce 00 00 00       	jmp    c0001c35 <dlmemalign+0x11b>
c0001b67:	83 c0 0b             	add    eax,0xb
c0001b6a:	bd 10 00 00 00       	mov    ebp,0x10
c0001b6f:	83 f8 0f             	cmp    eax,0xf
c0001b72:	76 05                	jbe    c0001b79 <dlmemalign+0x5f>
c0001b74:	83 e0 f8             	and    eax,0xfffffff8
c0001b77:	89 c5                	mov    ebp,eax
c0001b79:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001b7d:	83 ec 0c             	sub    esp,0xc
c0001b80:	50                   	push   eax
c0001b81:	e8 79 f8 ff ff       	call   c00013ff <dlmalloc>
c0001b86:	83 c4 10             	add    esp,0x10
c0001b89:	85 c0                	test   eax,eax
c0001b8b:	89 c1                	mov    ecx,eax
c0001b8d:	74 d1                	je     c0001b60 <dlmemalign+0x46>
c0001b8f:	8d 70 f8             	lea    esi,[eax-0x8]
c0001b92:	31 d2                	xor    edx,edx
c0001b94:	f7 f7                	div    edi
c0001b96:	85 d2                	test   edx,edx
c0001b98:	74 62                	je     c0001bfc <dlmemalign+0xe2>
c0001b9a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001b9e:	89 f8                	mov    eax,edi
c0001ba0:	f7 d8                	neg    eax
c0001ba2:	21 c3                	and    ebx,eax
c0001ba4:	83 eb 08             	sub    ebx,0x8
c0001ba7:	89 d8                	mov    eax,ebx
c0001ba9:	29 f0                	sub    eax,esi
c0001bab:	83 f8 0f             	cmp    eax,0xf
c0001bae:	77 02                	ja     c0001bb2 <dlmemalign+0x98>
c0001bb0:	01 fb                	add    ebx,edi
c0001bb2:	89 d8                	mov    eax,ebx
c0001bb4:	29 f0                	sub    eax,esi
c0001bb6:	89 c6                	mov    esi,eax
c0001bb8:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001bbb:	89 c2                	mov    edx,eax
c0001bbd:	83 e2 fc             	and    edx,0xfffffffc
c0001bc0:	29 f2                	sub    edx,esi
c0001bc2:	a8 02                	test   al,0x2
c0001bc4:	74 10                	je     c0001bd6 <dlmemalign+0xbc>
c0001bc6:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001bc9:	83 ca 02             	or     edx,0x2
c0001bcc:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001bcf:	8d 43 08             	lea    eax,[ebx+0x8]
c0001bd2:	89 33                	mov    DWORD PTR [ebx],esi
c0001bd4:	eb 5f                	jmp    c0001c35 <dlmemalign+0x11b>
c0001bd6:	89 d0                	mov    eax,edx
c0001bd8:	83 ec 0c             	sub    esp,0xc
c0001bdb:	83 c8 01             	or     eax,0x1
c0001bde:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001be1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001be6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001be9:	83 e0 01             	and    eax,0x1
c0001bec:	09 f0                	or     eax,esi
c0001bee:	89 de                	mov    esi,ebx
c0001bf0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001bf3:	51                   	push   ecx
c0001bf4:	e8 44 f3 ff ff       	call   c0000f3d <dlfree>
c0001bf9:	83 c4 10             	add    esp,0x10
c0001bfc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bff:	a8 02                	test   al,0x2
c0001c01:	75 2f                	jne    c0001c32 <dlmemalign+0x118>
c0001c03:	8d 55 10             	lea    edx,[ebp+0x10]
c0001c06:	83 e0 fc             	and    eax,0xfffffffc
c0001c09:	39 c2                	cmp    edx,eax
c0001c0b:	73 25                	jae    c0001c32 <dlmemalign+0x118>
c0001c0d:	29 e8                	sub    eax,ebp
c0001c0f:	83 ec 0c             	sub    esp,0xc
c0001c12:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001c15:	83 c8 01             	or     eax,0x1
c0001c18:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001c1b:	83 c2 08             	add    edx,0x8
c0001c1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001c21:	83 e0 01             	and    eax,0x1
c0001c24:	09 c5                	or     ebp,eax
c0001c26:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001c29:	52                   	push   edx
c0001c2a:	e8 0e f3 ff ff       	call   c0000f3d <dlfree>
c0001c2f:	83 c4 10             	add    esp,0x10
c0001c32:	8d 46 08             	lea    eax,[esi+0x8]
c0001c35:	83 c4 0c             	add    esp,0xc
c0001c38:	5b                   	pop    ebx
c0001c39:	5e                   	pop    esi
c0001c3a:	5f                   	pop    edi
c0001c3b:	5d                   	pop    ebp
c0001c3c:	c3                   	ret    

c0001c3d <dlcalloc>:
c0001c3d:	53                   	push   ebx
c0001c3e:	83 ec 14             	sub    esp,0x14
c0001c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001c45:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001c4a:	50                   	push   eax
c0001c4b:	e8 af f7 ff ff       	call   c00013ff <dlmalloc>
c0001c50:	83 c4 10             	add    esp,0x10
c0001c53:	85 c0                	test   eax,eax
c0001c55:	89 c3                	mov    ebx,eax
c0001c57:	74 6e                	je     c0001cc7 <dlcalloc+0x8a>
c0001c59:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001c5c:	a8 02                	test   al,0x2
c0001c5e:	75 67                	jne    c0001cc7 <dlcalloc+0x8a>
c0001c60:	83 e0 fc             	and    eax,0xfffffffc
c0001c63:	83 e8 04             	sub    eax,0x4
c0001c66:	83 f8 27             	cmp    eax,0x27
c0001c69:	76 0f                	jbe    c0001c7a <dlcalloc+0x3d>
c0001c6b:	52                   	push   edx
c0001c6c:	50                   	push   eax
c0001c6d:	6a 00                	push   0x0
c0001c6f:	53                   	push   ebx
c0001c70:	e8 7b e8 ff ff       	call   c00004f0 <memset>
c0001c75:	83 c4 10             	add    esp,0x10
c0001c78:	eb 4d                	jmp    c0001cc7 <dlcalloc+0x8a>
c0001c7a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001c80:	83 f8 13             	cmp    eax,0x13
c0001c83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001c8a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001c91:	76 34                	jbe    c0001cc7 <dlcalloc+0x8a>
c0001c93:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001c9a:	83 f8 1b             	cmp    eax,0x1b
c0001c9d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001ca4:	76 21                	jbe    c0001cc7 <dlcalloc+0x8a>
c0001ca6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001cad:	83 f8 23             	cmp    eax,0x23
c0001cb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001cb7:	76 0e                	jbe    c0001cc7 <dlcalloc+0x8a>
c0001cb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001cc0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001cc7:	83 c4 08             	add    esp,0x8
c0001cca:	89 d8                	mov    eax,ebx
c0001ccc:	5b                   	pop    ebx
c0001ccd:	c3                   	ret    

c0001cce <dlcfree>:
c0001cce:	e9 6a f2 ff ff       	jmp    c0000f3d <dlfree>

c0001cd3 <dlindependent_calloc>:
c0001cd3:	83 ec 28             	sub    esp,0x28
c0001cd6:	b9 03 00 00 00       	mov    ecx,0x3
c0001cdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001cdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001ce3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001ce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001ceb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001cef:	e8 99 fa ff ff       	call   c000178d <iALLOc>
c0001cf4:	83 c4 2c             	add    esp,0x2c
c0001cf7:	c3                   	ret    

c0001cf8 <dlindependent_comalloc>:
c0001cf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001cfc:	31 c9                	xor    ecx,ecx
c0001cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001d02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001d0a:	e9 7e fa ff ff       	jmp    c000178d <iALLOc>

c0001d0f <dlvalloc>:
c0001d0f:	83 ec 0c             	sub    esp,0xc
c0001d12:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001d19:	75 0a                	jne    c0001d25 <dlvalloc+0x16>
c0001d1b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d20:	e8 31 f1 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d25:	50                   	push   eax
c0001d26:	50                   	push   eax
c0001d27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001d2b:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001d31:	e8 e4 fd ff ff       	call   c0001b1a <dlmemalign>
c0001d36:	83 c4 1c             	add    esp,0x1c
c0001d39:	c3                   	ret    

c0001d3a <dlpvalloc>:
c0001d3a:	83 ec 0c             	sub    esp,0xc
c0001d3d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001d44:	75 0a                	jne    c0001d50 <dlpvalloc+0x16>
c0001d46:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d4b:	e8 06 f1 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d50:	52                   	push   edx
c0001d51:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001d56:	52                   	push   edx
c0001d57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001d5b:	89 c1                	mov    ecx,eax
c0001d5d:	f7 d9                	neg    ecx
c0001d5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001d63:	21 ca                	and    edx,ecx
c0001d65:	52                   	push   edx
c0001d66:	50                   	push   eax
c0001d67:	e8 ae fd ff ff       	call   c0001b1a <dlmemalign>
c0001d6c:	83 c4 1c             	add    esp,0x1c
c0001d6f:	c3                   	ret    

c0001d70 <dlmalloc_trim>:
c0001d70:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d75:	e8 dc f0 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d7a:	31 c0                	xor    eax,eax
c0001d7c:	c3                   	ret    

c0001d7d <dlmalloc_usable_size>:
c0001d7d:	53                   	push   ebx
c0001d7e:	31 c0                	xor    eax,eax
c0001d80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001d84:	85 c9                	test   ecx,ecx
c0001d86:	74 24                	je     c0001dac <dlmalloc_usable_size+0x2f>
c0001d88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001d8b:	f6 c2 02             	test   dl,0x2
c0001d8e:	74 08                	je     c0001d98 <dlmalloc_usable_size+0x1b>
c0001d90:	83 e2 fc             	and    edx,0xfffffffc
c0001d93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001d96:	eb 14                	jmp    c0001dac <dlmalloc_usable_size+0x2f>
c0001d98:	89 d3                	mov    ebx,edx
c0001d9a:	31 c0                	xor    eax,eax
c0001d9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001d9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001da4:	74 06                	je     c0001dac <dlmalloc_usable_size+0x2f>
c0001da6:	83 e2 fc             	and    edx,0xfffffffc
c0001da9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001dac:	5b                   	pop    ebx
c0001dad:	c3                   	ret    

c0001dae <dlmallinfo>:
c0001dae:	55                   	push   ebp
c0001daf:	57                   	push   edi
c0001db0:	56                   	push   esi
c0001db1:	53                   	push   ebx
c0001db2:	83 ec 08             	sub    esp,0x8
c0001db5:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001dbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001dc0:	75 0a                	jne    c0001dcc <dlmallinfo+0x1e>
c0001dc2:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001dc7:	e8 8a f0 ff ff       	call   c0000e56 <malloc_consolidate>
c0001dcc:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001dd1:	31 ed                	xor    ebp,ebp
c0001dd3:	31 c9                	xor    ecx,ecx
c0001dd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001dd8:	83 e0 fc             	and    eax,0xfffffffc
c0001ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ddf:	31 c0                	xor    eax,eax
c0001de1:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001de8:	85 d2                	test   edx,edx
c0001dea:	74 0e                	je     c0001dfa <dlmallinfo+0x4c>
c0001dec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001def:	45                   	inc    ebp
c0001df0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001df3:	83 e6 fc             	and    esi,0xfffffffc
c0001df6:	01 f1                	add    ecx,esi
c0001df8:	eb ee                	jmp    c0001de8 <dlmallinfo+0x3a>
c0001dfa:	40                   	inc    eax
c0001dfb:	83 f8 0a             	cmp    eax,0xa
c0001dfe:	75 e1                	jne    c0001de1 <dlmallinfo+0x33>
c0001e00:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001e0e:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001e13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001e16:	39 f0                	cmp    eax,esi
c0001e18:	74 10                	je     c0001e2a <dlmallinfo+0x7c>
c0001e1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001e1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001e20:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001e23:	83 e7 fc             	and    edi,0xfffffffc
c0001e26:	01 fa                	add    edx,edi
c0001e28:	eb ec                	jmp    c0001e16 <dlmallinfo+0x68>
c0001e2a:	83 c0 08             	add    eax,0x8
c0001e2d:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001e32:	75 df                	jne    c0001e13 <dlmallinfo+0x65>
c0001e34:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001e3a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001e3d:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001e42:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001e45:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001e48:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001e4b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001e4e:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001e54:	89 03                	mov    DWORD PTR [ebx],eax
c0001e56:	29 d0                	sub    eax,edx
c0001e58:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001e5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e5f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001e62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001e65:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001e6b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001e6e:	89 d8                	mov    eax,ebx
c0001e70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001e73:	83 c4 08             	add    esp,0x8
c0001e76:	5b                   	pop    ebx
c0001e77:	5e                   	pop    esi
c0001e78:	5f                   	pop    edi
c0001e79:	5d                   	pop    ebp
c0001e7a:	c2 04 00             	ret    0x4

c0001e7d <dlmalloc_stats>:
c0001e7d:	83 ec 30             	sub    esp,0x30
c0001e80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001e84:	50                   	push   eax
c0001e85:	e8 24 ff ff ff       	call   c0001dae <dlmallinfo>
c0001e8a:	83 c4 30             	add    esp,0x30
c0001e8d:	c3                   	ret    

c0001e8e <dlmallopt>:
c0001e8e:	56                   	push   esi
c0001e8f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001e94:	53                   	push   ebx
c0001e95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001e99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001e9d:	e8 b4 ef ff ff       	call   c0000e56 <malloc_consolidate>
c0001ea2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ea5:	83 f8 05             	cmp    eax,0x5
c0001ea8:	77 5d                	ja     c0001f07 <dlmallopt+0x79>
c0001eaa:	ff 24 85 20 fa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd05e0]
c0001eb1:	83 fb 50             	cmp    ebx,0x50
c0001eb4:	77 51                	ja     c0001f07 <dlmallopt+0x79>
c0001eb6:	85 db                	test   ebx,ebx
c0001eb8:	ba 08 00 00 00       	mov    edx,0x8
c0001ebd:	74 12                	je     c0001ed1 <dlmallopt+0x43>
c0001ebf:	83 c3 0b             	add    ebx,0xb
c0001ec2:	ba 10 00 00 00       	mov    edx,0x10
c0001ec7:	83 fb 0f             	cmp    ebx,0xf
c0001eca:	76 05                	jbe    c0001ed1 <dlmallopt+0x43>
c0001ecc:	89 da                	mov    edx,ebx
c0001ece:	83 e2 f8             	and    edx,0xfffffff8
c0001ed1:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001ed6:	83 e0 03             	and    eax,0x3
c0001ed9:	09 d0                	or     eax,edx
c0001edb:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001ee0:	eb 27                	jmp    c0001f09 <dlmallopt+0x7b>
c0001ee2:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001ee8:	eb 16                	jmp    c0001f00 <dlmallopt+0x72>
c0001eea:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001ef0:	eb 0e                	jmp    c0001f00 <dlmallopt+0x72>
c0001ef2:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001ef8:	eb 06                	jmp    c0001f00 <dlmallopt+0x72>
c0001efa:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c0001f00:	be 01 00 00 00       	mov    esi,0x1
c0001f05:	eb 02                	jmp    c0001f09 <dlmallopt+0x7b>
c0001f07:	31 f6                	xor    esi,esi
c0001f09:	5b                   	pop    ebx
c0001f0a:	89 f0                	mov    eax,esi
c0001f0c:	5e                   	pop    esi
c0001f0d:	c3                   	ret    
c0001f0e:	66 90                	xchg   ax,ax

c0001f10 <isblank>:
c0001f10:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f15:	74 09                	je     c0001f20 <isblank+0x10>
c0001f17:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f1c:	75 0a                	jne    c0001f28 <isblank+0x18>
c0001f1e:	66 90                	xchg   ax,ax
c0001f20:	b8 01 00 00 00       	mov    eax,0x1
c0001f25:	c3                   	ret    
c0001f26:	66 90                	xchg   ax,ax
c0001f28:	b8 00 00 00 00       	mov    eax,0x0
c0001f2d:	c3                   	ret    
c0001f2e:	66 90                	xchg   ax,ax

c0001f30 <iscntrl>:
c0001f30:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001f35:	7e 09                	jle    c0001f40 <iscntrl+0x10>
c0001f37:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001f3c:	75 0a                	jne    c0001f48 <iscntrl+0x18>
c0001f3e:	66 90                	xchg   ax,ax
c0001f40:	b8 01 00 00 00       	mov    eax,0x1
c0001f45:	c3                   	ret    
c0001f46:	66 90                	xchg   ax,ax
c0001f48:	b8 00 00 00 00       	mov    eax,0x0
c0001f4d:	c3                   	ret    
c0001f4e:	66 90                	xchg   ax,ax

c0001f50 <isdigit>:
c0001f50:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001f55:	7e 0d                	jle    c0001f64 <isdigit+0x14>
c0001f57:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001f5c:	7f 06                	jg     c0001f64 <isdigit+0x14>
c0001f5e:	b8 01 00 00 00       	mov    eax,0x1
c0001f63:	c3                   	ret    
c0001f64:	b8 00 00 00 00       	mov    eax,0x0
c0001f69:	c3                   	ret    
c0001f6a:	66 90                	xchg   ax,ax

c0001f6c <islower>:
c0001f6c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f71:	7e 0d                	jle    c0001f80 <islower+0x14>
c0001f73:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001f78:	7f 06                	jg     c0001f80 <islower+0x14>
c0001f7a:	b8 01 00 00 00       	mov    eax,0x1
c0001f7f:	c3                   	ret    
c0001f80:	b8 00 00 00 00       	mov    eax,0x0
c0001f85:	c3                   	ret    
c0001f86:	66 90                	xchg   ax,ax

c0001f88 <isspace>:
c0001f88:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f8d:	7c 19                	jl     c0001fa8 <isspace+0x20>
c0001f8f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001f94:	7e 0a                	jle    c0001fa0 <isspace+0x18>
c0001f96:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f9b:	75 0b                	jne    c0001fa8 <isspace+0x20>
c0001f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0001fa0:	b8 01 00 00 00       	mov    eax,0x1
c0001fa5:	c3                   	ret    
c0001fa6:	66 90                	xchg   ax,ax
c0001fa8:	b8 00 00 00 00       	mov    eax,0x0
c0001fad:	c3                   	ret    
c0001fae:	66 90                	xchg   ax,ax

c0001fb0 <isupper>:
c0001fb0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001fb5:	7e 0d                	jle    c0001fc4 <isupper+0x14>
c0001fb7:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001fbc:	7f 06                	jg     c0001fc4 <isupper+0x14>
c0001fbe:	b8 01 00 00 00       	mov    eax,0x1
c0001fc3:	c3                   	ret    
c0001fc4:	b8 00 00 00 00       	mov    eax,0x0
c0001fc9:	c3                   	ret    
c0001fca:	66 90                	xchg   ax,ax

c0001fcc <isalpha>:
c0001fcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fd0:	e8 db ff ff ff       	call   c0001fb0 <isupper>
c0001fd5:	83 c4 04             	add    esp,0x4
c0001fd8:	85 c0                	test   eax,eax
c0001fda:	75 10                	jne    c0001fec <isalpha+0x20>
c0001fdc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fe0:	e8 87 ff ff ff       	call   c0001f6c <islower>
c0001fe5:	83 c4 04             	add    esp,0x4
c0001fe8:	85 c0                	test   eax,eax
c0001fea:	74 08                	je     c0001ff4 <isalpha+0x28>
c0001fec:	b8 01 00 00 00       	mov    eax,0x1
c0001ff1:	c3                   	ret    
c0001ff2:	66 90                	xchg   ax,ax
c0001ff4:	b8 00 00 00 00       	mov    eax,0x0
c0001ff9:	c3                   	ret    
c0001ffa:	66 90                	xchg   ax,ax

c0001ffc <isalnum>:
c0001ffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002000:	e8 c7 ff ff ff       	call   c0001fcc <isalpha>
c0002005:	83 c4 04             	add    esp,0x4
c0002008:	85 c0                	test   eax,eax
c000200a:	75 10                	jne    c000201c <isalnum+0x20>
c000200c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002010:	e8 3b ff ff ff       	call   c0001f50 <isdigit>
c0002015:	83 c4 04             	add    esp,0x4
c0002018:	85 c0                	test   eax,eax
c000201a:	74 08                	je     c0002024 <isalnum+0x28>
c000201c:	b8 01 00 00 00       	mov    eax,0x1
c0002021:	c3                   	ret    
c0002022:	66 90                	xchg   ax,ax
c0002024:	b8 00 00 00 00       	mov    eax,0x0
c0002029:	c3                   	ret    
c000202a:	66 90                	xchg   ax,ax

c000202c <ispunct>:
c000202c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002030:	e8 c7 ff ff ff       	call   c0001ffc <isalnum>
c0002035:	83 c4 04             	add    esp,0x4
c0002038:	85 c0                	test   eax,eax
c000203a:	75 28                	jne    c0002064 <ispunct+0x38>
c000203c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002040:	e8 43 ff ff ff       	call   c0001f88 <isspace>
c0002045:	83 c4 04             	add    esp,0x4
c0002048:	85 c0                	test   eax,eax
c000204a:	75 18                	jne    c0002064 <ispunct+0x38>
c000204c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002050:	e8 db fe ff ff       	call   c0001f30 <iscntrl>
c0002055:	83 c4 04             	add    esp,0x4
c0002058:	85 c0                	test   eax,eax
c000205a:	75 08                	jne    c0002064 <ispunct+0x38>
c000205c:	b8 01 00 00 00       	mov    eax,0x1
c0002061:	c3                   	ret    
c0002062:	66 90                	xchg   ax,ax
c0002064:	b8 00 00 00 00       	mov    eax,0x0
c0002069:	c3                   	ret    
c000206a:	66 90                	xchg   ax,ax

c000206c <isgraph>:
c000206c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002070:	e8 87 ff ff ff       	call   c0001ffc <isalnum>
c0002075:	83 c4 04             	add    esp,0x4
c0002078:	85 c0                	test   eax,eax
c000207a:	75 10                	jne    c000208c <isgraph+0x20>
c000207c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002080:	e8 a7 ff ff ff       	call   c000202c <ispunct>
c0002085:	83 c4 04             	add    esp,0x4
c0002088:	85 c0                	test   eax,eax
c000208a:	74 08                	je     c0002094 <isgraph+0x28>
c000208c:	b8 01 00 00 00       	mov    eax,0x1
c0002091:	c3                   	ret    
c0002092:	66 90                	xchg   ax,ax
c0002094:	b8 00 00 00 00       	mov    eax,0x0
c0002099:	c3                   	ret    
c000209a:	66 90                	xchg   ax,ax

c000209c <isprint>:
c000209c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00020a0:	e8 c7 ff ff ff       	call   c000206c <isgraph>
c00020a5:	83 c4 04             	add    esp,0x4
c00020a8:	85 c0                	test   eax,eax
c00020aa:	75 08                	jne    c00020b4 <isprint+0x18>
c00020ac:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c00020b1:	75 09                	jne    c00020bc <isprint+0x20>
c00020b3:	90                   	nop
c00020b4:	b8 01 00 00 00       	mov    eax,0x1
c00020b9:	c3                   	ret    
c00020ba:	66 90                	xchg   ax,ax
c00020bc:	b8 00 00 00 00       	mov    eax,0x0
c00020c1:	c3                   	ret    
c00020c2:	66 90                	xchg   ax,ax

c00020c4 <isxdigit>:
c00020c4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00020c8:	e8 83 fe ff ff       	call   c0001f50 <isdigit>
c00020cd:	83 c4 04             	add    esp,0x4
c00020d0:	85 c0                	test   eax,eax
c00020d2:	75 20                	jne    c00020f4 <isxdigit+0x30>
c00020d4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c00020d9:	7e 09                	jle    c00020e4 <isxdigit+0x20>
c00020db:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c00020e0:	7e 12                	jle    c00020f4 <isxdigit+0x30>
c00020e2:	66 90                	xchg   ax,ax
c00020e4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c00020e9:	7e 11                	jle    c00020fc <isxdigit+0x38>
c00020eb:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c00020f0:	7f 0a                	jg     c00020fc <isxdigit+0x38>
c00020f2:	66 90                	xchg   ax,ax
c00020f4:	b8 01 00 00 00       	mov    eax,0x1
c00020f9:	c3                   	ret    
c00020fa:	66 90                	xchg   ax,ax
c00020fc:	b8 00 00 00 00       	mov    eax,0x0
c0002101:	c3                   	ret    

c0002102 <disk_status>:
c0002102:	31 c0                	xor    eax,eax
c0002104:	c3                   	ret    

c0002105 <disk_initialize>:
c0002105:	31 c0                	xor    eax,eax
c0002107:	c3                   	ret    

c0002108 <disk_read>:
c0002108:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000210d:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0002115:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002119:	e9 e2 6c 02 00       	jmp    c0028e00 <fatWrapperReadDisk>

c000211e <disk_write>:
c000211e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002123:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c000212b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000212f:	e9 0c 6d 02 00       	jmp    c0028e40 <fatWrapperWriteDisk>

c0002134 <disk_ioctl>:
c0002134:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002139:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000213d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002142:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c000214a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000214e:	e9 2d 6d 02 00       	jmp    c0028e80 <fatWrapperIoctl>

c0002153 <ld_word>:
c0002153:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002157:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000215a:	c1 e2 08             	shl    edx,0x8
c000215d:	09 d0                	or     eax,edx
c000215f:	c3                   	ret    

c0002160 <ld_dword>:
c0002160:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002164:	89 d1                	mov    ecx,edx
c0002166:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000216a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000216d:	c1 e1 08             	shl    ecx,0x8
c0002170:	09 ca                	or     edx,ecx
c0002172:	c1 e2 08             	shl    edx,0x8
c0002175:	09 d0                	or     eax,edx
c0002177:	c3                   	ret    

c0002178 <st_word>:
c0002178:	66 89 10             	mov    WORD PTR [eax],dx
c000217b:	c3                   	ret    

c000217c <st_dword>:
c000217c:	89 10                	mov    DWORD PTR [eax],edx
c000217e:	c3                   	ret    

c000217f <mem_cpy>:
c000217f:	85 c9                	test   ecx,ecx
c0002181:	74 10                	je     c0002193 <mem_cpy+0x14>
c0002183:	57                   	push   edi
c0002184:	01 c1                	add    ecx,eax
c0002186:	56                   	push   esi
c0002187:	89 c7                	mov    edi,eax
c0002189:	89 d6                	mov    esi,edx
c000218b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000218c:	39 f9                	cmp    ecx,edi
c000218e:	75 fb                	jne    c000218b <mem_cpy+0xc>
c0002190:	5e                   	pop    esi
c0002191:	5f                   	pop    edi
c0002192:	c3                   	ret    
c0002193:	c3                   	ret    

c0002194 <mem_set>:
c0002194:	01 c1                	add    ecx,eax
c0002196:	88 10                	mov    BYTE PTR [eax],dl
c0002198:	40                   	inc    eax
c0002199:	39 c8                	cmp    eax,ecx
c000219b:	75 f9                	jne    c0002196 <mem_set+0x2>
c000219d:	c3                   	ret    

c000219e <mem_cmp>:
c000219e:	57                   	push   edi
c000219f:	56                   	push   esi
c00021a0:	89 c6                	mov    esi,eax
c00021a2:	53                   	push   ebx
c00021a3:	46                   	inc    esi
c00021a4:	42                   	inc    edx
c00021a5:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c00021a9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c00021ad:	29 fb                	sub    ebx,edi
c00021af:	89 cf                	mov    edi,ecx
c00021b1:	29 f7                	sub    edi,esi
c00021b3:	01 c7                	add    edi,eax
c00021b5:	74 04                	je     c00021bb <mem_cmp+0x1d>
c00021b7:	85 db                	test   ebx,ebx
c00021b9:	74 e8                	je     c00021a3 <mem_cmp+0x5>
c00021bb:	89 d8                	mov    eax,ebx
c00021bd:	5b                   	pop    ebx
c00021be:	5e                   	pop    esi
c00021bf:	5f                   	pop    edi
c00021c0:	c3                   	ret    

c00021c1 <chk_chr>:
c00021c1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00021c4:	85 c9                	test   ecx,ecx
c00021c6:	74 07                	je     c00021cf <chk_chr+0xe>
c00021c8:	39 d1                	cmp    ecx,edx
c00021ca:	74 03                	je     c00021cf <chk_chr+0xe>
c00021cc:	40                   	inc    eax
c00021cd:	eb f2                	jmp    c00021c1 <chk_chr>
c00021cf:	89 c8                	mov    eax,ecx
c00021d1:	c3                   	ret    

c00021d2 <dbc_1st>:
c00021d2:	31 c0                	xor    eax,eax
c00021d4:	c3                   	ret    

c00021d5 <dbc_2nd>:
c00021d5:	31 c0                	xor    eax,eax
c00021d7:	c3                   	ret    

c00021d8 <tchar2uni>:
c00021d8:	57                   	push   edi
c00021d9:	56                   	push   esi
c00021da:	53                   	push   ebx
c00021db:	8b 18                	mov    ebx,DWORD PTR [eax]
c00021dd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00021df:	8d 73 01             	lea    esi,[ebx+0x1]
c00021e2:	f6 c1 80             	test   cl,0x80
c00021e5:	75 0a                	jne    c00021f1 <tchar2uni+0x19>
c00021e7:	0f b6 d1             	movzx  edx,cl
c00021ea:	89 f3                	mov    ebx,esi
c00021ec:	e9 b2 00 00 00       	jmp    c00022a3 <tchar2uni+0xcb>
c00021f1:	89 ca                	mov    edx,ecx
c00021f3:	81 e2 e0 00 00 00    	and    edx,0xe0
c00021f9:	81 fa c0 00 00 00    	cmp    edx,0xc0
c00021ff:	89 ca                	mov    edx,ecx
c0002201:	75 0a                	jne    c000220d <tchar2uni+0x35>
c0002203:	83 e2 1f             	and    edx,0x1f
c0002206:	b9 01 00 00 00       	mov    ecx,0x1
c000220b:	eb 37                	jmp    c0002244 <tchar2uni+0x6c>
c000220d:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002213:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002219:	75 0c                	jne    c0002227 <tchar2uni+0x4f>
c000221b:	89 ca                	mov    edx,ecx
c000221d:	b9 02 00 00 00       	mov    ecx,0x2
c0002222:	83 e2 0f             	and    edx,0xf
c0002225:	eb 1d                	jmp    c0002244 <tchar2uni+0x6c>
c0002227:	89 cf                	mov    edi,ecx
c0002229:	83 ca ff             	or     edx,0xffffffff
c000222c:	81 e7 f8 00 00 00    	and    edi,0xf8
c0002232:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002238:	75 70                	jne    c00022aa <tchar2uni+0xd2>
c000223a:	89 ca                	mov    edx,ecx
c000223c:	b9 03 00 00 00       	mov    ecx,0x3
c0002241:	83 e2 07             	and    edx,0x7
c0002244:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002248:	46                   	inc    esi
c0002249:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c000224c:	89 cf                	mov    edi,ecx
c000224e:	81 e7 c0 00 00 00    	and    edi,0xc0
c0002254:	83 c7 80             	add    edi,0xffffff80
c0002257:	75 4e                	jne    c00022a7 <tchar2uni+0xcf>
c0002259:	c1 e2 06             	shl    edx,0x6
c000225c:	83 e1 3f             	and    ecx,0x3f
c000225f:	09 ca                	or     edx,ecx
c0002261:	39 de                	cmp    esi,ebx
c0002263:	75 e3                	jne    c0002248 <tchar2uni+0x70>
c0002265:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c000226b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002271:	76 34                	jbe    c00022a7 <tchar2uni+0xcf>
c0002273:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002276:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c000227c:	77 29                	ja     c00022a7 <tchar2uni+0xcf>
c000227e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002284:	76 1d                	jbe    c00022a3 <tchar2uni+0xcb>
c0002286:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c000228c:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002292:	c1 e1 06             	shl    ecx,0x6
c0002295:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000229b:	09 ca                	or     edx,ecx
c000229d:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c00022a3:	89 18                	mov    DWORD PTR [eax],ebx
c00022a5:	eb 03                	jmp    c00022aa <tchar2uni+0xd2>
c00022a7:	83 ca ff             	or     edx,0xffffffff
c00022aa:	5b                   	pop    ebx
c00022ab:	89 d0                	mov    eax,edx
c00022ad:	5e                   	pop    esi
c00022ae:	5f                   	pop    edi
c00022af:	c3                   	ret    

c00022b0 <put_utf>:
c00022b0:	53                   	push   ebx
c00022b1:	83 f8 7f             	cmp    eax,0x7f
c00022b4:	89 c3                	mov    ebx,eax
c00022b6:	b0 00                	mov    al,0x0
c00022b8:	77 11                	ja     c00022cb <put_utf+0x1b>
c00022ba:	85 c9                	test   ecx,ecx
c00022bc:	0f 84 e5 00 00 00    	je     c00023a7 <put_utf+0xf7>
c00022c2:	88 1a                	mov    BYTE PTR [edx],bl
c00022c4:	b0 01                	mov    al,0x1
c00022c6:	e9 dc 00 00 00       	jmp    c00023a7 <put_utf+0xf7>
c00022cb:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00022d1:	77 23                	ja     c00022f6 <put_utf+0x46>
c00022d3:	83 f9 01             	cmp    ecx,0x1
c00022d6:	0f 86 cb 00 00 00    	jbe    c00023a7 <put_utf+0xf7>
c00022dc:	89 d8                	mov    eax,ebx
c00022de:	83 e3 3f             	and    ebx,0x3f
c00022e1:	c1 e8 06             	shr    eax,0x6
c00022e4:	83 cb 80             	or     ebx,0xffffff80
c00022e7:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00022ea:	83 c8 c0             	or     eax,0xffffffc0
c00022ed:	88 02                	mov    BYTE PTR [edx],al
c00022ef:	b0 02                	mov    al,0x2
c00022f1:	e9 b1 00 00 00       	jmp    c00023a7 <put_utf+0xf7>
c00022f6:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00022fc:	77 40                	ja     c000233e <put_utf+0x8e>
c00022fe:	83 f9 02             	cmp    ecx,0x2
c0002301:	0f 86 a0 00 00 00    	jbe    c00023a7 <put_utf+0xf7>
c0002307:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000230d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002313:	0f 86 8e 00 00 00    	jbe    c00023a7 <put_utf+0xf7>
c0002319:	89 d8                	mov    eax,ebx
c000231b:	c1 e8 0c             	shr    eax,0xc
c000231e:	83 c8 e0             	or     eax,0xffffffe0
c0002321:	88 02                	mov    BYTE PTR [edx],al
c0002323:	89 d8                	mov    eax,ebx
c0002325:	83 e3 3f             	and    ebx,0x3f
c0002328:	c1 e8 06             	shr    eax,0x6
c000232b:	83 cb 80             	or     ebx,0xffffff80
c000232e:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0002331:	83 e0 3f             	and    eax,0x3f
c0002334:	83 c8 80             	or     eax,0xffffff80
c0002337:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000233a:	b0 03                	mov    al,0x3
c000233c:	eb 69                	jmp    c00023a7 <put_utf+0xf7>
c000233e:	83 f9 03             	cmp    ecx,0x3
c0002341:	76 64                	jbe    c00023a7 <put_utf+0xf7>
c0002343:	89 d9                	mov    ecx,ebx
c0002345:	0f b7 c3             	movzx  eax,bx
c0002348:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000234e:	66 31 c9             	xor    cx,cx
c0002351:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002357:	c1 e9 06             	shr    ecx,0x6
c000235a:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002360:	77 43                	ja     c00023a5 <put_utf+0xf5>
c0002362:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002368:	77 3b                	ja     c00023a5 <put_utf+0xf5>
c000236a:	09 cb                	or     ebx,ecx
c000236c:	81 c3 00 00 01 00    	add    ebx,0x10000
c0002372:	89 d8                	mov    eax,ebx
c0002374:	c1 e8 12             	shr    eax,0x12
c0002377:	83 c8 f0             	or     eax,0xfffffff0
c000237a:	88 02                	mov    BYTE PTR [edx],al
c000237c:	89 d8                	mov    eax,ebx
c000237e:	c1 e8 0c             	shr    eax,0xc
c0002381:	83 e0 3f             	and    eax,0x3f
c0002384:	83 c8 80             	or     eax,0xffffff80
c0002387:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000238a:	89 d8                	mov    eax,ebx
c000238c:	83 e3 3f             	and    ebx,0x3f
c000238f:	c1 e8 06             	shr    eax,0x6
c0002392:	83 cb 80             	or     ebx,0xffffff80
c0002395:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002398:	83 e0 3f             	and    eax,0x3f
c000239b:	83 c8 80             	or     eax,0xffffff80
c000239e:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c00023a1:	b0 04                	mov    al,0x4
c00023a3:	eb 02                	jmp    c00023a7 <put_utf+0xf7>
c00023a5:	31 c0                	xor    eax,eax
c00023a7:	5b                   	pop    ebx
c00023a8:	c3                   	ret    

c00023a9 <clst2sect>:
c00023a9:	8d 4a fe             	lea    ecx,[edx-0x2]
c00023ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00023af:	83 ea 02             	sub    edx,0x2
c00023b2:	39 ca                	cmp    edx,ecx
c00023b4:	76 0d                	jbe    c00023c3 <clst2sect+0x1a>
c00023b6:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00023ba:	0f af d1             	imul   edx,ecx
c00023bd:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c00023c0:	89 d0                	mov    eax,edx
c00023c2:	c3                   	ret    
c00023c3:	31 c0                	xor    eax,eax
c00023c5:	c3                   	ret    

c00023c6 <pick_lfn>:
c00023c6:	55                   	push   ebp
c00023c7:	57                   	push   edi
c00023c8:	89 c7                	mov    edi,eax
c00023ca:	56                   	push   esi
c00023cb:	53                   	push   ebx
c00023cc:	89 d3                	mov    ebx,edx
c00023ce:	8d 42 1a             	lea    eax,[edx+0x1a]
c00023d1:	e8 7d fd ff ff       	call   c0002153 <ld_word>
c00023d6:	66 85 c0             	test   ax,ax
c00023d9:	74 04                	je     c00023df <pick_lfn+0x19>
c00023db:	31 c0                	xor    eax,eax
c00023dd:	eb 62                	jmp    c0002441 <pick_lfn+0x7b>
c00023df:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00023e2:	bd 01 00 00 00       	mov    ebp,0x1
c00023e7:	31 f6                	xor    esi,esi
c00023e9:	83 e1 bf             	and    ecx,0xffffffbf
c00023ec:	49                   	dec    ecx
c00023ed:	6b c9 0d             	imul   ecx,ecx,0xd
c00023f0:	0f b6 86 80 fb 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0480]
c00023f7:	01 d8                	add    eax,ebx
c00023f9:	e8 55 fd ff ff       	call   c0002153 <ld_word>
c00023fe:	66 85 ed             	test   bp,bp
c0002401:	74 11                	je     c0002414 <pick_lfn+0x4e>
c0002403:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002409:	77 d0                	ja     c00023db <pick_lfn+0x15>
c000240b:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000240f:	89 c5                	mov    ebp,eax
c0002411:	41                   	inc    ecx
c0002412:	eb 0a                	jmp    c000241e <pick_lfn+0x58>
c0002414:	0f b7 c0             	movzx  eax,ax
c0002417:	3d ff ff 00 00       	cmp    eax,0xffff
c000241c:	75 bd                	jne    c00023db <pick_lfn+0x15>
c000241e:	46                   	inc    esi
c000241f:	83 fe 0d             	cmp    esi,0xd
c0002422:	75 cc                	jne    c00023f0 <pick_lfn+0x2a>
c0002424:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002427:	74 13                	je     c000243c <pick_lfn+0x76>
c0002429:	66 85 ed             	test   bp,bp
c000242c:	74 0e                	je     c000243c <pick_lfn+0x76>
c000242e:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002434:	77 a5                	ja     c00023db <pick_lfn+0x15>
c0002436:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c000243c:	b8 01 00 00 00       	mov    eax,0x1
c0002441:	5b                   	pop    ebx
c0002442:	5e                   	pop    esi
c0002443:	5f                   	pop    edi
c0002444:	5d                   	pop    ebp
c0002445:	c3                   	ret    

c0002446 <put_lfn>:
c0002446:	55                   	push   ebp
c0002447:	57                   	push   edi
c0002448:	89 d7                	mov    edi,edx
c000244a:	56                   	push   esi
c000244b:	31 f6                	xor    esi,esi
c000244d:	53                   	push   ebx
c000244e:	83 ec 0c             	sub    esp,0xc
c0002451:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002455:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002459:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000245f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002463:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002466:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002469:	31 d2                	xor    edx,edx
c000246b:	e8 08 fd ff ff       	call   c0002178 <st_word>
c0002470:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002477:	0f b6 d9             	movzx  ebx,cl
c000247a:	4b                   	dec    ebx
c000247b:	6b db 0d             	imul   ebx,ebx,0xd
c000247e:	0f b7 c6             	movzx  eax,si
c0002481:	3d ff ff 00 00       	cmp    eax,0xffff
c0002486:	74 09                	je     c0002491 <put_lfn+0x4b>
c0002488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000248c:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002490:	43                   	inc    ebx
c0002491:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002494:	0f b7 ee             	movzx  ebp,si
c0002497:	89 ea                	mov    edx,ebp
c0002499:	0f b6 80 80 fb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0480]
c00024a0:	01 f8                	add    eax,edi
c00024a2:	e8 d1 fc ff ff       	call   c0002178 <st_word>
c00024a7:	85 ed                	test   ebp,ebp
c00024a9:	75 05                	jne    c00024b0 <put_lfn+0x6a>
c00024ab:	be ff ff 00 00       	mov    esi,0xffff
c00024b0:	ff 04 24             	inc    DWORD PTR [esp]
c00024b3:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c00024b7:	75 c5                	jne    c000247e <put_lfn+0x38>
c00024b9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00024bf:	74 0b                	je     c00024cc <put_lfn+0x86>
c00024c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00024c5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00024ca:	75 07                	jne    c00024d3 <put_lfn+0x8d>
c00024cc:	83 c9 40             	or     ecx,0x40
c00024cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00024d3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00024d7:	88 07                	mov    BYTE PTR [edi],al
c00024d9:	83 c4 0c             	add    esp,0xc
c00024dc:	5b                   	pop    ebx
c00024dd:	5e                   	pop    esi
c00024de:	5f                   	pop    edi
c00024df:	5d                   	pop    ebp
c00024e0:	c3                   	ret    

c00024e1 <gen_numname>:
c00024e1:	57                   	push   edi
c00024e2:	89 cf                	mov    edi,ecx
c00024e4:	56                   	push   esi
c00024e5:	b9 0b 00 00 00       	mov    ecx,0xb
c00024ea:	53                   	push   ebx
c00024eb:	89 c6                	mov    esi,eax
c00024ed:	83 ec 10             	sub    esp,0x10
c00024f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00024f4:	e8 86 fc ff ff       	call   c000217f <mem_cpy>
c00024f9:	83 fb 05             	cmp    ebx,0x5
c00024fc:	76 30                	jbe    c000252e <gen_numname+0x4d>
c00024fe:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002501:	66 85 c0             	test   ax,ax
c0002504:	74 28                	je     c000252e <gen_numname+0x4d>
c0002506:	83 c7 02             	add    edi,0x2
c0002509:	ba 10 00 00 00       	mov    edx,0x10
c000250e:	89 c1                	mov    ecx,eax
c0002510:	01 db                	add    ebx,ebx
c0002512:	c1 e0 10             	shl    eax,0x10
c0002515:	83 e1 01             	and    ecx,0x1
c0002518:	c1 e8 11             	shr    eax,0x11
c000251b:	01 cb                	add    ebx,ecx
c000251d:	0f ba e3 10          	bt     ebx,0x10
c0002521:	73 06                	jae    c0002529 <gen_numname+0x48>
c0002523:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002529:	4a                   	dec    edx
c000252a:	75 e2                	jne    c000250e <gen_numname+0x2d>
c000252c:	eb d0                	jmp    c00024fe <gen_numname+0x1d>
c000252e:	b8 07 00 00 00       	mov    eax,0x7
c0002533:	89 d9                	mov    ecx,ebx
c0002535:	83 e1 0f             	and    ecx,0xf
c0002538:	8d 79 30             	lea    edi,[ecx+0x30]
c000253b:	83 ff 39             	cmp    edi,0x39
c000253e:	89 fa                	mov    edx,edi
c0002540:	76 03                	jbe    c0002545 <gen_numname+0x64>
c0002542:	8d 51 37             	lea    edx,[ecx+0x37]
c0002545:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002548:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000254c:	89 da                	mov    edx,ebx
c000254e:	c1 ea 04             	shr    edx,0x4
c0002551:	83 fb 0f             	cmp    ebx,0xf
c0002554:	76 06                	jbe    c000255c <gen_numname+0x7b>
c0002556:	89 c8                	mov    eax,ecx
c0002558:	89 d3                	mov    ebx,edx
c000255a:	eb d7                	jmp    c0002533 <gen_numname+0x52>
c000255c:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002561:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002564:	31 d2                	xor    edx,edx
c0002566:	8d 04 16             	lea    eax,[esi+edx*1]
c0002569:	39 ca                	cmp    edx,ecx
c000256b:	73 19                	jae    c0002586 <gen_numname+0xa5>
c000256d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002570:	83 f8 20             	cmp    eax,0x20
c0002573:	74 11                	je     c0002586 <gen_numname+0xa5>
c0002575:	e8 58 fc ff ff       	call   c00021d2 <dbc_1st>
c000257a:	85 c0                	test   eax,eax
c000257c:	74 05                	je     c0002583 <gen_numname+0xa2>
c000257e:	39 d3                	cmp    ebx,edx
c0002580:	74 04                	je     c0002586 <gen_numname+0xa5>
c0002582:	42                   	inc    edx
c0002583:	42                   	inc    edx
c0002584:	eb e0                	jmp    c0002566 <gen_numname+0x85>
c0002586:	83 f9 07             	cmp    ecx,0x7
c0002589:	b0 20                	mov    al,0x20
c000258b:	77 05                	ja     c0002592 <gen_numname+0xb1>
c000258d:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002591:	41                   	inc    ecx
c0002592:	42                   	inc    edx
c0002593:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002597:	83 fa 07             	cmp    edx,0x7
c000259a:	76 ea                	jbe    c0002586 <gen_numname+0xa5>
c000259c:	83 c4 10             	add    esp,0x10
c000259f:	5b                   	pop    ebx
c00025a0:	5e                   	pop    esi
c00025a1:	5f                   	pop    edi
c00025a2:	c3                   	ret    

c00025a3 <sum_sfn>:
c00025a3:	53                   	push   ebx
c00025a4:	31 c9                	xor    ecx,ecx
c00025a6:	31 db                	xor    ebx,ebx
c00025a8:	0f b6 d1             	movzx  edx,cl
c00025ab:	d1 ea                	shr    edx,1
c00025ad:	c1 e1 07             	shl    ecx,0x7
c00025b0:	09 ca                	or     edx,ecx
c00025b2:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c00025b5:	43                   	inc    ebx
c00025b6:	01 ca                	add    edx,ecx
c00025b8:	83 fb 0b             	cmp    ebx,0xb
c00025bb:	88 d1                	mov    cl,dl
c00025bd:	75 e9                	jne    c00025a8 <sum_sfn+0x5>
c00025bf:	5b                   	pop    ebx
c00025c0:	88 d0                	mov    al,dl
c00025c2:	c3                   	ret    

c00025c3 <get_ldnumber>:
c00025c3:	55                   	push   ebp
c00025c4:	57                   	push   edi
c00025c5:	56                   	push   esi
c00025c6:	83 ce ff             	or     esi,0xffffffff
c00025c9:	53                   	push   ebx
c00025ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00025cc:	85 d2                	test   edx,edx
c00025ce:	74 38                	je     c0002608 <get_ldnumber+0x45>
c00025d0:	89 c5                	mov    ebp,eax
c00025d2:	89 d1                	mov    ecx,edx
c00025d4:	41                   	inc    ecx
c00025d5:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c00025d9:	80 fb 1f             	cmp    bl,0x1f
c00025dc:	76 05                	jbe    c00025e3 <get_ldnumber+0x20>
c00025de:	83 fb 3a             	cmp    ebx,0x3a
c00025e1:	75 f1                	jne    c00025d4 <get_ldnumber+0x11>
c00025e3:	31 f6                	xor    esi,esi
c00025e5:	83 fb 3a             	cmp    ebx,0x3a
c00025e8:	75 1e                	jne    c0002608 <get_ldnumber+0x45>
c00025ea:	8a 1a                	mov    bl,BYTE PTR [edx]
c00025ec:	83 ce ff             	or     esi,0xffffffff
c00025ef:	8d 7b d0             	lea    edi,[ebx-0x30]
c00025f2:	89 f8                	mov    eax,edi
c00025f4:	3c 09                	cmp    al,0x9
c00025f6:	77 10                	ja     c0002608 <get_ldnumber+0x45>
c00025f8:	83 c2 02             	add    edx,0x2
c00025fb:	39 d1                	cmp    ecx,edx
c00025fd:	75 09                	jne    c0002608 <get_ldnumber+0x45>
c00025ff:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0002602:	0f be f3             	movsx  esi,bl
c0002605:	83 ee 30             	sub    esi,0x30
c0002608:	5b                   	pop    ebx
c0002609:	89 f0                	mov    eax,esi
c000260b:	5e                   	pop    esi
c000260c:	5f                   	pop    edi
c000260d:	5d                   	pop    ebp
c000260e:	c3                   	ret    

c000260f <validate>:
c000260f:	56                   	push   esi
c0002610:	85 c0                	test   eax,eax
c0002612:	53                   	push   ebx
c0002613:	89 d6                	mov    esi,edx
c0002615:	51                   	push   ecx
c0002616:	75 09                	jne    c0002621 <validate+0x12>
c0002618:	b8 09 00 00 00       	mov    eax,0x9
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	eb 2e                	jmp    c000264f <validate+0x40>
c0002621:	89 c3                	mov    ebx,eax
c0002623:	8b 00                	mov    eax,DWORD PTR [eax]
c0002625:	85 c0                	test   eax,eax
c0002627:	74 ef                	je     c0002618 <validate+0x9>
c0002629:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000262c:	74 ea                	je     c0002618 <validate+0x9>
c000262e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002631:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c0002635:	75 e1                	jne    c0002618 <validate+0x9>
c0002637:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000263b:	83 ec 0c             	sub    esp,0xc
c000263e:	50                   	push   eax
c000263f:	e8 be fa ff ff       	call   c0002102 <disk_status>
c0002644:	83 c4 10             	add    esp,0x10
c0002647:	a8 01                	test   al,0x1
c0002649:	75 cd                	jne    c0002618 <validate+0x9>
c000264b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000264d:	31 c0                	xor    eax,eax
c000264f:	89 0e                	mov    DWORD PTR [esi],ecx
c0002651:	5a                   	pop    edx
c0002652:	5b                   	pop    ebx
c0002653:	5e                   	pop    esi
c0002654:	c3                   	ret    

c0002655 <sync_window>:
c0002655:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002659:	74 58                	je     c00026b3 <sync_window+0x5e>
c000265b:	56                   	push   esi
c000265c:	53                   	push   ebx
c000265d:	89 c3                	mov    ebx,eax
c000265f:	51                   	push   ecx
c0002660:	6a 01                	push   0x1
c0002662:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002665:	8d 70 34             	lea    esi,[eax+0x34]
c0002668:	56                   	push   esi
c0002669:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000266d:	50                   	push   eax
c000266e:	e8 ab fa ff ff       	call   c000211e <disk_write>
c0002673:	83 c4 10             	add    esp,0x10
c0002676:	ba 01 00 00 00       	mov    edx,0x1
c000267b:	85 c0                	test   eax,eax
c000267d:	75 2e                	jne    c00026ad <sync_window+0x58>
c000267f:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002683:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002686:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002689:	89 c1                	mov    ecx,eax
c000268b:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000268e:	39 d1                	cmp    ecx,edx
c0002690:	73 19                	jae    c00026ab <sync_window+0x56>
c0002692:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002696:	75 13                	jne    c00026ab <sync_window+0x56>
c0002698:	6a 01                	push   0x1
c000269a:	01 d0                	add    eax,edx
c000269c:	50                   	push   eax
c000269d:	56                   	push   esi
c000269e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026a2:	50                   	push   eax
c00026a3:	e8 76 fa ff ff       	call   c000211e <disk_write>
c00026a8:	83 c4 10             	add    esp,0x10
c00026ab:	31 d2                	xor    edx,edx
c00026ad:	89 d0                	mov    eax,edx
c00026af:	5a                   	pop    edx
c00026b0:	5b                   	pop    ebx
c00026b1:	5e                   	pop    esi
c00026b2:	c3                   	ret    
c00026b3:	31 d2                	xor    edx,edx
c00026b5:	89 d0                	mov    eax,edx
c00026b7:	c3                   	ret    

c00026b8 <move_window>:
c00026b8:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00026bb:	74 3a                	je     c00026f7 <move_window+0x3f>
c00026bd:	56                   	push   esi
c00026be:	89 d6                	mov    esi,edx
c00026c0:	53                   	push   ebx
c00026c1:	89 c3                	mov    ebx,eax
c00026c3:	51                   	push   ecx
c00026c4:	e8 8c ff ff ff       	call   c0002655 <sync_window>
c00026c9:	85 c0                	test   eax,eax
c00026cb:	75 2d                	jne    c00026fa <move_window+0x42>
c00026cd:	6a 01                	push   0x1
c00026cf:	56                   	push   esi
c00026d0:	8d 43 34             	lea    eax,[ebx+0x34]
c00026d3:	50                   	push   eax
c00026d4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026d8:	50                   	push   eax
c00026d9:	e8 2a fa ff ff       	call   c0002108 <disk_read>
c00026de:	83 c4 10             	add    esp,0x10
c00026e1:	89 c2                	mov    edx,eax
c00026e3:	31 c0                	xor    eax,eax
c00026e5:	85 d2                	test   edx,edx
c00026e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00026ec:	0f 45 f2             	cmovne esi,edx
c00026ef:	0f 95 c0             	setne  al
c00026f2:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00026f5:	eb 03                	jmp    c00026fa <move_window+0x42>
c00026f7:	31 c0                	xor    eax,eax
c00026f9:	c3                   	ret    
c00026fa:	5a                   	pop    edx
c00026fb:	5b                   	pop    ebx
c00026fc:	5e                   	pop    esi
c00026fd:	c3                   	ret    

c00026fe <check_fs>:
c00026fe:	53                   	push   ebx
c00026ff:	89 c3                	mov    ebx,eax
c0002701:	83 ec 08             	sub    esp,0x8
c0002704:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002708:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000270f:	e8 a4 ff ff ff       	call   c00026b8 <move_window>
c0002714:	ba 04 00 00 00       	mov    edx,0x4
c0002719:	85 c0                	test   eax,eax
c000271b:	75 68                	jne    c0002785 <check_fs+0x87>
c000271d:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002723:	e8 2b fa ff ff       	call   c0002153 <ld_word>
c0002728:	ba 03 00 00 00       	mov    edx,0x3
c000272d:	66 3d 55 aa          	cmp    ax,0xaa55
c0002731:	75 52                	jne    c0002785 <check_fs+0x87>
c0002733:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002736:	8d 50 18             	lea    edx,[eax+0x18]
c0002739:	80 fa 01             	cmp    dl,0x1
c000273c:	76 09                	jbe    c0002747 <check_fs+0x49>
c000273e:	3c eb                	cmp    al,0xeb
c0002740:	ba 02 00 00 00       	mov    edx,0x2
c0002745:	75 3e                	jne    c0002785 <check_fs+0x87>
c0002747:	ba dc 39 03 c0       	mov    edx,0xc00339dc
c000274c:	b9 03 00 00 00       	mov    ecx,0x3
c0002751:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002754:	e8 45 fa ff ff       	call   c000219e <mem_cmp>
c0002759:	31 d2                	xor    edx,edx
c000275b:	85 c0                	test   eax,eax
c000275d:	74 26                	je     c0002785 <check_fs+0x87>
c000275f:	ba 38 fa 02 c0       	mov    edx,0xc002fa38
c0002764:	b9 05 00 00 00       	mov    ecx,0x5
c0002769:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000276f:	e8 2a fa ff ff       	call   c000219e <mem_cmp>
c0002774:	31 d2                	xor    edx,edx
c0002776:	85 c0                	test   eax,eax
c0002778:	74 0b                	je     c0002785 <check_fs+0x87>
c000277a:	31 d2                	xor    edx,edx
c000277c:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002780:	0f 95 c2             	setne  dl
c0002783:	01 d2                	add    edx,edx
c0002785:	83 c4 08             	add    esp,0x8
c0002788:	89 d0                	mov    eax,edx
c000278a:	5b                   	pop    ebx
c000278b:	c3                   	ret    

c000278c <find_volume>:
c000278c:	55                   	push   ebp
c000278d:	57                   	push   edi
c000278e:	56                   	push   esi
c000278f:	89 c6                	mov    esi,eax
c0002791:	53                   	push   ebx
c0002792:	89 d3                	mov    ebx,edx
c0002794:	83 ec 2c             	sub    esp,0x2c
c0002797:	31 d2                	xor    edx,edx
c0002799:	e8 60 ff ff ff       	call   c00026fe <check_fs>
c000279e:	85 db                	test   ebx,ebx
c00027a0:	0f 94 c2             	sete   dl
c00027a3:	83 f8 02             	cmp    eax,0x2
c00027a6:	74 07                	je     c00027af <find_volume+0x23>
c00027a8:	77 63                	ja     c000280d <find_volume+0x81>
c00027aa:	f6 c2 01             	test   dl,0x1
c00027ad:	75 5e                	jne    c000280d <find_volume+0x81>
c00027af:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c00027b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027b9:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c00027bf:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00027c3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00027c7:	89 f8                	mov    eax,edi
c00027c9:	83 c7 10             	add    edi,0x10
c00027cc:	e8 8f f9 ff ff       	call   c0002160 <ld_dword>
c00027d1:	83 c5 04             	add    ebp,0x4
c00027d4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00027d8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00027db:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00027df:	75 e2                	jne    c00027c3 <find_volume+0x37>
c00027e1:	83 fb 01             	cmp    ebx,0x1
c00027e4:	0f b6 fa             	movzx  edi,dl
c00027e7:	83 d3 ff             	adc    ebx,0xffffffff
c00027ea:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00027ee:	b8 03 00 00 00       	mov    eax,0x3
c00027f3:	85 d2                	test   edx,edx
c00027f5:	74 07                	je     c00027fe <find_volume+0x72>
c00027f7:	89 f0                	mov    eax,esi
c00027f9:	e8 00 ff ff ff       	call   c00026fe <check_fs>
c00027fe:	83 f8 01             	cmp    eax,0x1
c0002801:	76 0a                	jbe    c000280d <find_volume+0x81>
c0002803:	85 ff                	test   edi,edi
c0002805:	74 06                	je     c000280d <find_volume+0x81>
c0002807:	43                   	inc    ebx
c0002808:	83 fb 03             	cmp    ebx,0x3
c000280b:	76 dd                	jbe    c00027ea <find_volume+0x5e>
c000280d:	83 c4 2c             	add    esp,0x2c
c0002810:	5b                   	pop    ebx
c0002811:	5e                   	pop    esi
c0002812:	5f                   	pop    edi
c0002813:	5d                   	pop    ebp
c0002814:	c3                   	ret    

c0002815 <mount_volume>:
c0002815:	55                   	push   ebp
c0002816:	89 d5                	mov    ebp,edx
c0002818:	57                   	push   edi
c0002819:	89 cf                	mov    edi,ecx
c000281b:	56                   	push   esi
c000281c:	53                   	push   ebx
c000281d:	bb 0b 00 00 00       	mov    ebx,0xb
c0002822:	83 ec 2c             	sub    esp,0x2c
c0002825:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000282b:	e8 93 fd ff ff       	call   c00025c3 <get_ldnumber>
c0002830:	85 c0                	test   eax,eax
c0002832:	0f 88 d0 02 00 00    	js     c0002b08 <mount_volume+0x2f3>
c0002838:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c000283f:	89 c2                	mov    edx,eax
c0002841:	bb 0c 00 00 00       	mov    ebx,0xc
c0002846:	85 f6                	test   esi,esi
c0002848:	0f 84 ba 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c000284e:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002851:	83 e7 fe             	and    edi,0xfffffffe
c0002854:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002857:	74 3c                	je     c0002895 <mount_volume+0x80>
c0002859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000285d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002861:	83 ec 0c             	sub    esp,0xc
c0002864:	50                   	push   eax
c0002865:	e8 98 f8 ff ff       	call   c0002102 <disk_status>
c000286a:	83 c4 10             	add    esp,0x10
c000286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002871:	a8 01                	test   al,0x1
c0002873:	75 20                	jne    c0002895 <mount_volume+0x80>
c0002875:	31 db                	xor    ebx,ebx
c0002877:	81 e7 fe 00 00 00    	and    edi,0xfe
c000287d:	0f 84 85 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c0002883:	a8 04                	test   al,0x4
c0002885:	0f 84 7d 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c000288b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002890:	e9 73 02 00 00       	jmp    c0002b08 <mount_volume+0x2f3>
c0002895:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002898:	83 ec 0c             	sub    esp,0xc
c000289b:	0f b6 c2             	movzx  eax,dl
c000289e:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c00028a1:	bb 03 00 00 00       	mov    ebx,0x3
c00028a6:	50                   	push   eax
c00028a7:	e8 59 f8 ff ff       	call   c0002105 <disk_initialize>
c00028ac:	83 c4 10             	add    esp,0x10
c00028af:	a8 01                	test   al,0x1
c00028b1:	0f 85 51 02 00 00    	jne    c0002b08 <mount_volume+0x2f3>
c00028b7:	81 e7 fe 00 00 00    	and    edi,0xfe
c00028bd:	74 04                	je     c00028c3 <mount_volume+0xae>
c00028bf:	a8 04                	test   al,0x4
c00028c1:	75 c8                	jne    c000288b <mount_volume+0x76>
c00028c3:	31 d2                	xor    edx,edx
c00028c5:	89 f0                	mov    eax,esi
c00028c7:	e8 c0 fe ff ff       	call   c000278c <find_volume>
c00028cc:	bb 01 00 00 00       	mov    ebx,0x1
c00028d1:	83 f8 04             	cmp    eax,0x4
c00028d4:	0f 84 2e 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c00028da:	83 f8 01             	cmp    eax,0x1
c00028dd:	76 0a                	jbe    c00028e9 <mount_volume+0xd4>
c00028df:	bb 0d 00 00 00       	mov    ebx,0xd
c00028e4:	e9 1f 02 00 00       	jmp    c0002b08 <mount_volume+0x2f3>
c00028e9:	8d 46 3f             	lea    eax,[esi+0x3f]
c00028ec:	e8 62 f8 ff ff       	call   c0002153 <ld_word>
c00028f1:	66 3d 00 02          	cmp    ax,0x200
c00028f5:	75 e8                	jne    c00028df <mount_volume+0xca>
c00028f7:	8d 46 4a             	lea    eax,[esi+0x4a]
c00028fa:	e8 54 f8 ff ff       	call   c0002153 <ld_word>
c00028ff:	0f b7 c0             	movzx  eax,ax
c0002902:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002906:	85 c0                	test   eax,eax
c0002908:	75 0c                	jne    c0002916 <mount_volume+0x101>
c000290a:	8d 46 58             	lea    eax,[esi+0x58]
c000290d:	e8 4e f8 ff ff       	call   c0002160 <ld_dword>
c0002912:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002916:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002919:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000291c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002924:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002927:	89 e8                	mov    eax,ebp
c0002929:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000292c:	8d 45 ff             	lea    eax,[ebp-0x1]
c000292f:	3c 01                	cmp    al,0x1
c0002931:	77 ac                	ja     c00028df <mount_volume+0xca>
c0002933:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0002937:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c000293b:	66 85 c0             	test   ax,ax
c000293e:	89 c3                	mov    ebx,eax
c0002940:	74 9d                	je     c00028df <mount_volume+0xca>
c0002942:	8d 40 ff             	lea    eax,[eax-0x1]
c0002945:	85 d8                	test   eax,ebx
c0002947:	75 96                	jne    c00028df <mount_volume+0xca>
c0002949:	8d 46 45             	lea    eax,[esi+0x45]
c000294c:	e8 02 f8 ff ff       	call   c0002153 <ld_word>
c0002951:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002955:	a8 0f                	test   al,0xf
c0002957:	89 c7                	mov    edi,eax
c0002959:	75 84                	jne    c00028df <mount_volume+0xca>
c000295b:	8d 46 47             	lea    eax,[esi+0x47]
c000295e:	e8 f0 f7 ff ff       	call   c0002153 <ld_word>
c0002963:	0f b7 d0             	movzx  edx,ax
c0002966:	85 d2                	test   edx,edx
c0002968:	75 0a                	jne    c0002974 <mount_volume+0x15f>
c000296a:	8d 46 54             	lea    eax,[esi+0x54]
c000296d:	e8 ee f7 ff ff       	call   c0002160 <ld_dword>
c0002972:	89 c2                	mov    edx,eax
c0002974:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002978:	8d 46 42             	lea    eax,[esi+0x42]
c000297b:	e8 d3 f7 ff ff       	call   c0002153 <ld_word>
c0002980:	0f b7 c8             	movzx  ecx,ax
c0002983:	85 c9                	test   ecx,ecx
c0002985:	0f 84 54 ff ff ff    	je     c00028df <mount_volume+0xca>
c000298b:	89 e8                	mov    eax,ebp
c000298d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002991:	0f b6 e8             	movzx  ebp,al
c0002994:	0f b7 c7             	movzx  eax,di
c0002997:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c000299c:	c1 e8 04             	shr    eax,0x4
c000299f:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00029a3:	01 e8                	add    eax,ebp
c00029a5:	01 c8                	add    eax,ecx
c00029a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00029ab:	39 c2                	cmp    edx,eax
c00029ad:	0f 82 2c ff ff ff    	jb     c00028df <mount_volume+0xca>
c00029b3:	29 c2                	sub    edx,eax
c00029b5:	89 d5                	mov    ebp,edx
c00029b7:	89 d0                	mov    eax,edx
c00029b9:	31 d2                	xor    edx,edx
c00029bb:	f7 f3                	div    ebx
c00029bd:	39 dd                	cmp    ebp,ebx
c00029bf:	0f 82 1a ff ff ff    	jb     c00028df <mount_volume+0xca>
c00029c5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00029ca:	0f 87 0f ff ff ff    	ja     c00028df <mount_volume+0xca>
c00029d0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00029d5:	0f 86 1e 01 00 00    	jbe    c0002af9 <mount_volume+0x2e4>
c00029db:	bb 03 00 00 00       	mov    ebx,0x3
c00029e0:	8d 68 02             	lea    ebp,[eax+0x2]
c00029e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e7:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00029ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00029ee:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00029f2:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00029f5:	01 c8                	add    eax,ecx
c00029f7:	83 fb 03             	cmp    ebx,0x3
c00029fa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00029fd:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002a00:	75 23                	jne    c0002a25 <mount_volume+0x210>
c0002a02:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002a05:	e8 49 f7 ff ff       	call   c0002153 <ld_word>
c0002a0a:	09 c7                	or     edi,eax
c0002a0c:	66 85 ff             	test   di,di
c0002a0f:	0f 85 ca fe ff ff    	jne    c00028df <mount_volume+0xca>
c0002a15:	8d 46 60             	lea    eax,[esi+0x60]
c0002a18:	e8 43 f7 ff ff       	call   c0002160 <ld_dword>
c0002a1d:	c1 e5 02             	shl    ebp,0x2
c0002a20:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002a23:	eb 25                	jmp    c0002a4a <mount_volume+0x235>
c0002a25:	66 85 ff             	test   di,di
c0002a28:	0f 84 b1 fe ff ff    	je     c00028df <mount_volume+0xca>
c0002a2e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002a32:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c0002a36:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c0002a3a:	83 e5 01             	and    ebp,0x1
c0002a3d:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002a40:	d1 ea                	shr    edx,1
c0002a42:	01 d5                	add    ebp,edx
c0002a44:	83 fb 02             	cmp    ebx,0x2
c0002a47:	0f 44 ef             	cmove  ebp,edi
c0002a4a:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002a50:	c1 ed 09             	shr    ebp,0x9
c0002a53:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a57:	0f 87 82 fe ff ff    	ja     c00028df <mount_volume+0xca>
c0002a5d:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002a64:	83 fb 03             	cmp    ebx,0x3
c0002a67:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002a6e:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002a72:	75 6e                	jne    c0002ae2 <mount_volume+0x2cd>
c0002a74:	8d 46 64             	lea    eax,[esi+0x64]
c0002a77:	e8 d7 f6 ff ff       	call   c0002153 <ld_word>
c0002a7c:	66 48                	dec    ax
c0002a7e:	75 62                	jne    c0002ae2 <mount_volume+0x2cd>
c0002a80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002a84:	89 f0                	mov    eax,esi
c0002a86:	42                   	inc    edx
c0002a87:	e8 2c fc ff ff       	call   c00026b8 <move_window>
c0002a8c:	85 c0                	test   eax,eax
c0002a8e:	75 52                	jne    c0002ae2 <mount_volume+0x2cd>
c0002a90:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002a94:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002a9a:	e8 b4 f6 ff ff       	call   c0002153 <ld_word>
c0002a9f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002aa3:	75 3d                	jne    c0002ae2 <mount_volume+0x2cd>
c0002aa5:	8d 46 34             	lea    eax,[esi+0x34]
c0002aa8:	e8 b3 f6 ff ff       	call   c0002160 <ld_dword>
c0002aad:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002ab2:	75 2e                	jne    c0002ae2 <mount_volume+0x2cd>
c0002ab4:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002aba:	e8 a1 f6 ff ff       	call   c0002160 <ld_dword>
c0002abf:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002ac4:	75 1c                	jne    c0002ae2 <mount_volume+0x2cd>
c0002ac6:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002acc:	e8 8f f6 ff ff       	call   c0002160 <ld_dword>
c0002ad1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002ad4:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002ada:	e8 81 f6 ff ff       	call   c0002160 <ld_dword>
c0002adf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002ae2:	88 1e                	mov    BYTE PTR [esi],bl
c0002ae4:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c0002aea:	31 db                	xor    ebx,ebx
c0002aec:	40                   	inc    eax
c0002aed:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002af3:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002af7:	eb 0f                	jmp    c0002b08 <mount_volume+0x2f3>
c0002af9:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002afe:	19 db                	sbb    ebx,ebx
c0002b00:	83 c3 02             	add    ebx,0x2
c0002b03:	e9 d8 fe ff ff       	jmp    c00029e0 <mount_volume+0x1cb>
c0002b08:	83 c4 2c             	add    esp,0x2c
c0002b0b:	89 d8                	mov    eax,ebx
c0002b0d:	5b                   	pop    ebx
c0002b0e:	5e                   	pop    esi
c0002b0f:	5f                   	pop    edi
c0002b10:	5d                   	pop    ebp
c0002b11:	c3                   	ret    

c0002b12 <put_fat>:
c0002b12:	55                   	push   ebp
c0002b13:	bd 02 00 00 00       	mov    ebp,0x2
c0002b18:	57                   	push   edi
c0002b19:	56                   	push   esi
c0002b1a:	53                   	push   ebx
c0002b1b:	83 ec 1c             	sub    esp,0x1c
c0002b1e:	83 fa 01             	cmp    edx,0x1
c0002b21:	0f 86 38 01 00 00    	jbe    c0002c5f <put_fat+0x14d>
c0002b27:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002b2a:	0f 86 2f 01 00 00    	jbe    c0002c5f <put_fat+0x14d>
c0002b30:	89 c6                	mov    esi,eax
c0002b32:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002b35:	89 cf                	mov    edi,ecx
c0002b37:	89 d3                	mov    ebx,edx
c0002b39:	83 f8 02             	cmp    eax,0x2
c0002b3c:	0f 84 b1 00 00 00    	je     c0002bf3 <put_fat+0xe1>
c0002b42:	83 f8 03             	cmp    eax,0x3
c0002b45:	0f 84 d5 00 00 00    	je     c0002c20 <put_fat+0x10e>
c0002b4b:	48                   	dec    eax
c0002b4c:	0f 85 0d 01 00 00    	jne    c0002c5f <put_fat+0x14d>
c0002b52:	89 d1                	mov    ecx,edx
c0002b54:	89 f0                	mov    eax,esi
c0002b56:	d1 e9                	shr    ecx,1
c0002b58:	01 d1                	add    ecx,edx
c0002b5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5e:	89 ca                	mov    edx,ecx
c0002b60:	c1 ea 09             	shr    edx,0x9
c0002b63:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b66:	e8 4d fb ff ff       	call   c00026b8 <move_window>
c0002b6b:	85 c0                	test   eax,eax
c0002b6d:	89 c5                	mov    ebp,eax
c0002b6f:	0f 85 ea 00 00 00    	jne    c0002c5f <put_fat+0x14d>
c0002b75:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b79:	8d 46 34             	lea    eax,[esi+0x34]
c0002b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b80:	8d 41 01             	lea    eax,[ecx+0x1]
c0002b83:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002b89:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b8d:	83 e3 01             	and    ebx,0x1
c0002b90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b94:	89 f8                	mov    eax,edi
c0002b96:	74 11                	je     c0002ba9 <put_fat+0x97>
c0002b98:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002b9a:	89 f8                	mov    eax,edi
c0002b9c:	c1 e0 04             	shl    eax,0x4
c0002b9f:	25 f0 0f 00 00       	and    eax,0xff0
c0002ba4:	83 e2 0f             	and    edx,0xf
c0002ba7:	09 d0                	or     eax,edx
c0002ba9:	88 01                	mov    BYTE PTR [ecx],al
c0002bab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002baf:	89 f0                	mov    eax,esi
c0002bb1:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bb5:	c1 ea 09             	shr    edx,0x9
c0002bb8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bbb:	e8 f8 fa ff ff       	call   c00026b8 <move_window>
c0002bc0:	85 c0                	test   eax,eax
c0002bc2:	89 c5                	mov    ebp,eax
c0002bc4:	0f 85 95 00 00 00    	jne    c0002c5f <put_fat+0x14d>
c0002bca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bce:	25 ff 01 00 00       	and    eax,0x1ff
c0002bd3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002bd7:	85 db                	test   ebx,ebx
c0002bd9:	74 07                	je     c0002be2 <put_fat+0xd0>
c0002bdb:	c1 ef 04             	shr    edi,0x4
c0002bde:	89 f9                	mov    ecx,edi
c0002be0:	eb 0d                	jmp    c0002bef <put_fat+0xdd>
c0002be2:	8a 08                	mov    cl,BYTE PTR [eax]
c0002be4:	c1 ef 08             	shr    edi,0x8
c0002be7:	83 e7 0f             	and    edi,0xf
c0002bea:	83 e1 f0             	and    ecx,0xfffffff0
c0002bed:	09 f9                	or     ecx,edi
c0002bef:	88 08                	mov    BYTE PTR [eax],cl
c0002bf1:	eb 27                	jmp    c0002c1a <put_fat+0x108>
c0002bf3:	c1 ea 08             	shr    edx,0x8
c0002bf6:	89 f0                	mov    eax,esi
c0002bf8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bfb:	e8 b8 fa ff ff       	call   c00026b8 <move_window>
c0002c00:	85 c0                	test   eax,eax
c0002c02:	89 c5                	mov    ebp,eax
c0002c04:	75 59                	jne    c0002c5f <put_fat+0x14d>
c0002c06:	01 db                	add    ebx,ebx
c0002c08:	0f b7 d7             	movzx  edx,di
c0002c0b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c11:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002c15:	e8 5e f5 ff ff       	call   c0002178 <st_word>
c0002c1a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1e:	eb 3f                	jmp    c0002c5f <put_fat+0x14d>
c0002c20:	c1 ea 07             	shr    edx,0x7
c0002c23:	89 f0                	mov    eax,esi
c0002c25:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002c28:	e8 8b fa ff ff       	call   c00026b8 <move_window>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	89 c5                	mov    ebp,eax
c0002c31:	75 2c                	jne    c0002c5f <put_fat+0x14d>
c0002c33:	c1 e3 02             	shl    ebx,0x2
c0002c36:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c3c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c42:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002c46:	89 d8                	mov    eax,ebx
c0002c48:	e8 13 f5 ff ff       	call   c0002160 <ld_dword>
c0002c4d:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c52:	09 f8                	or     eax,edi
c0002c54:	89 c2                	mov    edx,eax
c0002c56:	89 d8                	mov    eax,ebx
c0002c58:	e8 1f f5 ff ff       	call   c000217c <st_dword>
c0002c5d:	eb bb                	jmp    c0002c1a <put_fat+0x108>
c0002c5f:	83 c4 1c             	add    esp,0x1c
c0002c62:	89 e8                	mov    eax,ebp
c0002c64:	5b                   	pop    ebx
c0002c65:	5e                   	pop    esi
c0002c66:	5f                   	pop    edi
c0002c67:	5d                   	pop    ebp
c0002c68:	c3                   	ret    

c0002c69 <dir_clear>:
c0002c69:	55                   	push   ebp
c0002c6a:	57                   	push   edi
c0002c6b:	56                   	push   esi
c0002c6c:	89 c6                	mov    esi,eax
c0002c6e:	53                   	push   ebx
c0002c6f:	83 ec 1c             	sub    esp,0x1c
c0002c72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002c76:	e8 da f9 ff ff       	call   c0002655 <sync_window>
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	0f 85 c1 00 00 00    	jne    c0002d44 <dir_clear+0xdb>
c0002c83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c87:	89 f0                	mov    eax,esi
c0002c89:	e8 1b f7 ff ff       	call   c00023a9 <clst2sect>
c0002c8e:	31 d2                	xor    edx,edx
c0002c90:	b9 00 02 00 00       	mov    ecx,0x200
c0002c95:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002c98:	89 c5                	mov    ebp,eax
c0002c9a:	8d 46 34             	lea    eax,[esi+0x34]
c0002c9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ca1:	e8 ee f4 ff ff       	call   c0002194 <mem_set>
c0002ca6:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002caa:	b8 00 80 00 00       	mov    eax,0x8000
c0002caf:	c1 e3 09             	shl    ebx,0x9
c0002cb2:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002cb8:	0f 47 d8             	cmova  ebx,eax
c0002cbb:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cc1:	76 16                	jbe    c0002cd9 <dir_clear+0x70>
c0002cc3:	83 ec 0c             	sub    esp,0xc
c0002cc6:	53                   	push   ebx
c0002cc7:	e8 cc 32 00 00       	call   c0005f98 <ff_memalloc>
c0002ccc:	83 c4 10             	add    esp,0x10
c0002ccf:	85 c0                	test   eax,eax
c0002cd1:	89 c7                	mov    edi,eax
c0002cd3:	75 76                	jne    c0002d4b <dir_clear+0xe2>
c0002cd5:	d1 eb                	shr    ebx,1
c0002cd7:	eb e2                	jmp    c0002cbb <dir_clear+0x52>
c0002cd9:	31 db                	xor    ebx,ebx
c0002cdb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002cdf:	39 d8                	cmp    eax,ebx
c0002ce1:	76 53                	jbe    c0002d36 <dir_clear+0xcd>
c0002ce3:	6a 01                	push   0x1
c0002ce5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ce8:	50                   	push   eax
c0002ce9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002cf1:	50                   	push   eax
c0002cf2:	e8 27 f4 ff ff       	call   c000211e <disk_write>
c0002cf7:	83 c4 10             	add    esp,0x10
c0002cfa:	85 c0                	test   eax,eax
c0002cfc:	75 38                	jne    c0002d36 <dir_clear+0xcd>
c0002cfe:	43                   	inc    ebx
c0002cff:	eb da                	jmp    c0002cdb <dir_clear+0x72>
c0002d01:	52                   	push   edx
c0002d02:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002d05:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002d09:	50                   	push   eax
c0002d0a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002d0e:	57                   	push   edi
c0002d0f:	50                   	push   eax
c0002d10:	e8 09 f4 ff ff       	call   c000211e <disk_write>
c0002d15:	83 c4 10             	add    esp,0x10
c0002d18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d1c:	85 c0                	test   eax,eax
c0002d1e:	75 0a                	jne    c0002d2a <dir_clear+0xc1>
c0002d20:	01 d3                	add    ebx,edx
c0002d22:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002d26:	39 d8                	cmp    eax,ebx
c0002d28:	77 d7                	ja     c0002d01 <dir_clear+0x98>
c0002d2a:	83 ec 0c             	sub    esp,0xc
c0002d2d:	57                   	push   edi
c0002d2e:	e8 7d 32 00 00       	call   c0005fb0 <ff_memfree>
c0002d33:	83 c4 10             	add    esp,0x10
c0002d36:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002d3a:	39 d8                	cmp    eax,ebx
c0002d3c:	0f 95 c0             	setne  al
c0002d3f:	0f b6 c0             	movzx  eax,al
c0002d42:	eb 19                	jmp    c0002d5d <dir_clear+0xf4>
c0002d44:	b8 01 00 00 00       	mov    eax,0x1
c0002d49:	eb 12                	jmp    c0002d5d <dir_clear+0xf4>
c0002d4b:	89 d9                	mov    ecx,ebx
c0002d4d:	31 d2                	xor    edx,edx
c0002d4f:	e8 40 f4 ff ff       	call   c0002194 <mem_set>
c0002d54:	89 da                	mov    edx,ebx
c0002d56:	31 db                	xor    ebx,ebx
c0002d58:	c1 ea 09             	shr    edx,0x9
c0002d5b:	eb c5                	jmp    c0002d22 <dir_clear+0xb9>
c0002d5d:	83 c4 1c             	add    esp,0x1c
c0002d60:	5b                   	pop    ebx
c0002d61:	5e                   	pop    esi
c0002d62:	5f                   	pop    edi
c0002d63:	5d                   	pop    ebp
c0002d64:	c3                   	ret    

c0002d65 <create_name>:
c0002d65:	55                   	push   ebp
c0002d66:	89 c5                	mov    ebp,eax
c0002d68:	57                   	push   edi
c0002d69:	89 d7                	mov    edi,edx
c0002d6b:	56                   	push   esi
c0002d6c:	31 f6                	xor    esi,esi
c0002d6e:	53                   	push   ebx
c0002d6f:	83 ec 3c             	sub    esp,0x3c
c0002d72:	8b 02                	mov    eax,DWORD PTR [edx]
c0002d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002d78:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002d7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d82:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002d86:	e8 4d f4 ff ff       	call   c00021d8 <tchar2uni>
c0002d8b:	83 f8 ff             	cmp    eax,0xffffffff
c0002d8e:	89 c3                	mov    ebx,eax
c0002d90:	75 0a                	jne    c0002d9c <create_name+0x37>
c0002d92:	b8 06 00 00 00       	mov    eax,0x6
c0002d97:	e9 7c 02 00 00       	jmp    c0003018 <create_name+0x2b3>
c0002d9c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002da1:	76 0c                	jbe    c0002daf <create_name+0x4a>
c0002da3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002da7:	c1 e8 10             	shr    eax,0x10
c0002daa:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002dae:	46                   	inc    esi
c0002daf:	0f b7 d3             	movzx  edx,bx
c0002db2:	89 d8                	mov    eax,ebx
c0002db4:	83 fa 1f             	cmp    edx,0x1f
c0002db7:	76 30                	jbe    c0002de9 <create_name+0x84>
c0002db9:	83 fa 2f             	cmp    edx,0x2f
c0002dbc:	74 2b                	je     c0002de9 <create_name+0x84>
c0002dbe:	83 fa 5c             	cmp    edx,0x5c
c0002dc1:	74 35                	je     c0002df8 <create_name+0x93>
c0002dc3:	83 fa 7f             	cmp    edx,0x7f
c0002dc6:	77 0e                	ja     c0002dd6 <create_name+0x71>
c0002dc8:	b8 3e fa 02 c0       	mov    eax,0xc002fa3e
c0002dcd:	e8 ef f3 ff ff       	call   c00021c1 <chk_chr>
c0002dd2:	85 c0                	test   eax,eax
c0002dd4:	75 bc                	jne    c0002d92 <create_name+0x2d>
c0002dd6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002ddc:	77 b4                	ja     c0002d92 <create_name+0x2d>
c0002dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002de2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002de6:	46                   	inc    esi
c0002de7:	eb 99                	jmp    c0002d82 <create_name+0x1d>
c0002de9:	66 83 f8 1f          	cmp    ax,0x1f
c0002ded:	b3 04                	mov    bl,0x4
c0002def:	76 1a                	jbe    c0002e0b <create_name+0xa6>
c0002df1:	eb 05                	jmp    c0002df8 <create_name+0x93>
c0002df3:	40                   	inc    eax
c0002df4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002df8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002dfc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002dff:	83 fa 2f             	cmp    edx,0x2f
c0002e02:	74 ef                	je     c0002df3 <create_name+0x8e>
c0002e04:	83 fa 5c             	cmp    edx,0x5c
c0002e07:	74 ea                	je     c0002df3 <create_name+0x8e>
c0002e09:	31 db                	xor    ebx,ebx
c0002e0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e0f:	89 07                	mov    DWORD PTR [edi],eax
c0002e11:	85 f6                	test   esi,esi
c0002e13:	74 16                	je     c0002e2b <create_name+0xc6>
c0002e15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e19:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002e1e:	83 f8 20             	cmp    eax,0x20
c0002e21:	74 05                	je     c0002e28 <create_name+0xc3>
c0002e23:	83 f8 2e             	cmp    eax,0x2e
c0002e26:	75 03                	jne    c0002e2b <create_name+0xc6>
c0002e28:	4e                   	dec    esi
c0002e29:	eb e6                	jmp    c0002e11 <create_name+0xac>
c0002e2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e2f:	31 ff                	xor    edi,edi
c0002e31:	85 f6                	test   esi,esi
c0002e33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002e39:	0f 84 53 ff ff ff    	je     c0002d92 <create_name+0x2d>
c0002e3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e43:	8d 57 01             	lea    edx,[edi+0x1]
c0002e46:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e4a:	83 f8 20             	cmp    eax,0x20
c0002e4d:	75 04                	jne    c0002e53 <create_name+0xee>
c0002e4f:	89 d7                	mov    edi,edx
c0002e51:	eb ec                	jmp    c0002e3f <create_name+0xda>
c0002e53:	85 ff                	test   edi,edi
c0002e55:	75 05                	jne    c0002e5c <create_name+0xf7>
c0002e57:	83 f8 2e             	cmp    eax,0x2e
c0002e5a:	75 08                	jne    c0002e64 <create_name+0xff>
c0002e5c:	83 cb 03             	or     ebx,0x3
c0002e5f:	eb 03                	jmp    c0002e64 <create_name+0xff>
c0002e61:	4e                   	dec    esi
c0002e62:	74 0c                	je     c0002e70 <create_name+0x10b>
c0002e64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e68:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002e6e:	75 f1                	jne    c0002e61 <create_name+0xfc>
c0002e70:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e75:	ba 20 00 00 00       	mov    edx,0x20
c0002e7a:	8d 45 20             	lea    eax,[ebp+0x20]
c0002e7d:	e8 12 f3 ff ff       	call   c0002194 <mem_set>
c0002e82:	31 c9                	xor    ecx,ecx
c0002e84:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002e8c:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002e91:	8d 47 01             	lea    eax,[edi+0x1]
c0002e94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e9c:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ea0:	85 c0                	test   eax,eax
c0002ea2:	89 c7                	mov    edi,eax
c0002ea4:	0f 84 1d 01 00 00    	je     c0002fc7 <create_name+0x262>
c0002eaa:	83 f8 20             	cmp    eax,0x20
c0002ead:	74 0b                	je     c0002eba <create_name+0x155>
c0002eaf:	83 f8 2e             	cmp    eax,0x2e
c0002eb2:	75 0f                	jne    c0002ec3 <create_name+0x15e>
c0002eb4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002eb8:	74 09                	je     c0002ec3 <create_name+0x15e>
c0002eba:	83 cb 03             	or     ebx,0x3
c0002ebd:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002ec1:	eb ce                	jmp    c0002e91 <create_name+0x12c>
c0002ec3:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002ec7:	73 06                	jae    c0002ecf <create_name+0x16a>
c0002ec9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ecd:	75 3a                	jne    c0002f09 <create_name+0x1a4>
c0002ecf:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002ed4:	75 08                	jne    c0002ede <create_name+0x179>
c0002ed6:	83 cb 03             	or     ebx,0x3
c0002ed9:	e9 e9 00 00 00       	jmp    c0002fc7 <create_name+0x262>
c0002ede:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ee2:	74 0d                	je     c0002ef1 <create_name+0x18c>
c0002ee4:	83 cb 03             	or     ebx,0x3
c0002ee7:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002eeb:	0f 87 d6 00 00 00    	ja     c0002fc7 <create_name+0x262>
c0002ef1:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002ef6:	b9 08 00 00 00       	mov    ecx,0x8
c0002efb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002eff:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002f07:	eb b4                	jmp    c0002ebd <create_name+0x158>
c0002f09:	0f b7 c7             	movzx  eax,di
c0002f0c:	83 f8 7f             	cmp    eax,0x7f
c0002f0f:	76 66                	jbe    c0002f77 <create_name+0x212>
c0002f11:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002f15:	89 d9                	mov    ecx,ebx
c0002f17:	83 c9 02             	or     ecx,0x2
c0002f1a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f1e:	52                   	push   edx
c0002f1f:	52                   	push   edx
c0002f20:	68 b5 01 00 00       	push   0x1b5
c0002f25:	50                   	push   eax
c0002f26:	e8 9d 30 00 00       	call   c0005fc8 <ff_uni2oem>
c0002f2b:	83 c4 10             	add    esp,0x10
c0002f2e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002f32:	a8 80                	test   al,0x80
c0002f34:	89 c7                	mov    edi,eax
c0002f36:	74 0c                	je     c0002f44 <create_name+0x1df>
c0002f38:	83 e7 7f             	and    edi,0x7f
c0002f3b:	0f b6 bf 00 fb 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0500]
c0002f42:	eb 2a                	jmp    c0002f6e <create_name+0x209>
c0002f44:	0f b7 c0             	movzx  eax,ax
c0002f47:	3d ff 00 00 00       	cmp    eax,0xff
c0002f4c:	76 20                	jbe    c0002f6e <create_name+0x209>
c0002f4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002f52:	4a                   	dec    edx
c0002f53:	39 ca                	cmp    edx,ecx
c0002f55:	77 0c                	ja     c0002f63 <create_name+0x1fe>
c0002f57:	83 cb 03             	or     ebx,0x3
c0002f5a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002f5e:	e9 5a ff ff ff       	jmp    c0002ebd <create_name+0x158>
c0002f63:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002f67:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f6b:	41                   	inc    ecx
c0002f6c:	eb 4d                	jmp    c0002fbb <create_name+0x256>
c0002f6e:	66 85 ff             	test   di,di
c0002f71:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f75:	74 19                	je     c0002f90 <create_name+0x22b>
c0002f77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f7b:	0f b7 d7             	movzx  edx,di
c0002f7e:	b8 47 fa 02 c0       	mov    eax,0xc002fa47
c0002f83:	e8 39 f2 ff ff       	call   c00021c1 <chk_chr>
c0002f88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002f8c:	85 c0                	test   eax,eax
c0002f8e:	74 0a                	je     c0002f9a <create_name+0x235>
c0002f90:	83 cb 03             	or     ebx,0x3
c0002f93:	bf 5f 00 00 00       	mov    edi,0x5f
c0002f98:	eb 21                	jmp    c0002fbb <create_name+0x256>
c0002f9a:	8d 47 bf             	lea    eax,[edi-0x41]
c0002f9d:	66 83 f8 19          	cmp    ax,0x19
c0002fa1:	77 07                	ja     c0002faa <create_name+0x245>
c0002fa3:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002fa8:	eb 11                	jmp    c0002fbb <create_name+0x256>
c0002faa:	8d 47 9f             	lea    eax,[edi-0x61]
c0002fad:	66 83 f8 19          	cmp    ax,0x19
c0002fb1:	77 08                	ja     c0002fbb <create_name+0x256>
c0002fb3:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002fb8:	83 ef 20             	sub    edi,0x20
c0002fbb:	89 f8                	mov    eax,edi
c0002fbd:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002fc1:	41                   	inc    ecx
c0002fc2:	e9 f6 fe ff ff       	jmp    c0002ebd <create_name+0x158>
c0002fc7:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002fcb:	75 04                	jne    c0002fd1 <create_name+0x26c>
c0002fcd:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002fd1:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002fd6:	75 05                	jne    c0002fdd <create_name+0x278>
c0002fd8:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002fdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fe1:	83 e0 0c             	and    eax,0xc
c0002fe4:	83 f8 0c             	cmp    eax,0xc
c0002fe7:	74 0c                	je     c0002ff5 <create_name+0x290>
c0002fe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fed:	83 e0 03             	and    eax,0x3
c0002ff0:	83 f8 03             	cmp    eax,0x3
c0002ff3:	75 05                	jne    c0002ffa <create_name+0x295>
c0002ff5:	83 cb 02             	or     ebx,0x2
c0002ff8:	eb 19                	jmp    c0003013 <create_name+0x2ae>
c0002ffa:	f6 c3 02             	test   bl,0x2
c0002ffd:	75 14                	jne    c0003013 <create_name+0x2ae>
c0002fff:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0003004:	74 03                	je     c0003009 <create_name+0x2a4>
c0003006:	83 cb 10             	or     ebx,0x10
c0003009:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c000300e:	74 03                	je     c0003013 <create_name+0x2ae>
c0003010:	83 cb 08             	or     ebx,0x8
c0003013:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0003016:	31 c0                	xor    eax,eax
c0003018:	83 c4 3c             	add    esp,0x3c
c000301b:	5b                   	pop    ebx
c000301c:	5e                   	pop    esi
c000301d:	5f                   	pop    edi
c000301e:	5d                   	pop    ebp
c000301f:	c3                   	ret    

c0003020 <cmp_lfn>:
c0003020:	55                   	push   ebp
c0003021:	57                   	push   edi
c0003022:	89 d7                	mov    edi,edx
c0003024:	56                   	push   esi
c0003025:	53                   	push   ebx
c0003026:	83 ec 1c             	sub    esp,0x1c
c0003029:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000302d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003030:	e8 1e f1 ff ff       	call   c0002153 <ld_word>
c0003035:	66 85 c0             	test   ax,ax
c0003038:	74 07                	je     c0003041 <cmp_lfn+0x21>
c000303a:	31 c0                	xor    eax,eax
c000303c:	e9 a4 00 00 00       	jmp    c00030e5 <cmp_lfn+0xc5>
c0003041:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003043:	bd 01 00 00 00       	mov    ebp,0x1
c0003048:	31 c9                	xor    ecx,ecx
c000304a:	83 e3 3f             	and    ebx,0x3f
c000304d:	4b                   	dec    ebx
c000304e:	6b db 0d             	imul   ebx,ebx,0xd
c0003051:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003055:	0f b6 81 80 fb 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd0480]
c000305c:	01 f8                	add    eax,edi
c000305e:	e8 f0 f0 ff ff       	call   c0002153 <ld_word>
c0003063:	66 85 ed             	test   bp,bp
c0003066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000306a:	0f b7 f0             	movzx  esi,ax
c000306d:	74 44                	je     c00030b3 <cmp_lfn+0x93>
c000306f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003073:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003079:	77 bf                	ja     c000303a <cmp_lfn+0x1a>
c000307b:	83 ec 0c             	sub    esp,0xc
c000307e:	0f b7 c6             	movzx  eax,si
c0003081:	50                   	push   eax
c0003082:	e8 55 30 00 00       	call   c00060dc <ff_wtoupper>
c0003087:	89 c5                	mov    ebp,eax
c0003089:	8d 43 01             	lea    eax,[ebx+0x1]
c000308c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003094:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003098:	89 04 24             	mov    DWORD PTR [esp],eax
c000309b:	e8 3c 30 00 00       	call   c00060dc <ff_wtoupper>
c00030a0:	83 c4 10             	add    esp,0x10
c00030a3:	39 c5                	cmp    ebp,eax
c00030a5:	75 93                	jne    c000303a <cmp_lfn+0x1a>
c00030a7:	89 f5                	mov    ebp,esi
c00030a9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00030ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030b1:	eb 0c                	jmp    c00030bf <cmp_lfn+0x9f>
c00030b3:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00030b9:	0f 85 7b ff ff ff    	jne    c000303a <cmp_lfn+0x1a>
c00030bf:	41                   	inc    ecx
c00030c0:	83 f9 0d             	cmp    ecx,0xd
c00030c3:	75 8c                	jne    c0003051 <cmp_lfn+0x31>
c00030c5:	f6 07 40             	test   BYTE PTR [edi],0x40
c00030c8:	74 16                	je     c00030e0 <cmp_lfn+0xc0>
c00030ca:	66 85 ed             	test   bp,bp
c00030cd:	74 11                	je     c00030e0 <cmp_lfn+0xc0>
c00030cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00030d3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00030d8:	0f 94 c0             	sete   al
c00030db:	0f b6 c0             	movzx  eax,al
c00030de:	eb 05                	jmp    c00030e5 <cmp_lfn+0xc5>
c00030e0:	b8 01 00 00 00       	mov    eax,0x1
c00030e5:	83 c4 1c             	add    esp,0x1c
c00030e8:	5b                   	pop    ebx
c00030e9:	5e                   	pop    esi
c00030ea:	5f                   	pop    edi
c00030eb:	5d                   	pop    ebp
c00030ec:	c3                   	ret    

c00030ed <sync_fs>:
c00030ed:	56                   	push   esi
c00030ee:	53                   	push   ebx
c00030ef:	53                   	push   ebx
c00030f0:	89 c3                	mov    ebx,eax
c00030f2:	e8 5e f5 ff ff       	call   c0002655 <sync_window>
c00030f7:	85 c0                	test   eax,eax
c00030f9:	0f 85 9a 00 00 00    	jne    c0003199 <sync_fs+0xac>
c00030ff:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0003102:	75 7b                	jne    c000317f <sync_fs+0x92>
c0003104:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0003108:	75 75                	jne    c000317f <sync_fs+0x92>
c000310a:	8d 73 34             	lea    esi,[ebx+0x34]
c000310d:	b9 00 02 00 00       	mov    ecx,0x200
c0003112:	31 d2                	xor    edx,edx
c0003114:	89 f0                	mov    eax,esi
c0003116:	e8 79 f0 ff ff       	call   c0002194 <mem_set>
c000311b:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0003121:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003126:	e8 4d f0 ff ff       	call   c0002178 <st_word>
c000312b:	ba 52 52 61 41       	mov    edx,0x41615252
c0003130:	89 f0                	mov    eax,esi
c0003132:	e8 45 f0 ff ff       	call   c000217c <st_dword>
c0003137:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c000313d:	ba 72 72 41 61       	mov    edx,0x61417272
c0003142:	e8 35 f0 ff ff       	call   c000217c <st_dword>
c0003147:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000314a:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0003150:	e8 27 f0 ff ff       	call   c000217c <st_dword>
c0003155:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003158:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c000315e:	e8 19 f0 ff ff       	call   c000217c <st_dword>
c0003163:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003166:	6a 01                	push   0x1
c0003168:	40                   	inc    eax
c0003169:	50                   	push   eax
c000316a:	56                   	push   esi
c000316b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000316e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003172:	50                   	push   eax
c0003173:	e8 a6 ef ff ff       	call   c000211e <disk_write>
c0003178:	83 c4 10             	add    esp,0x10
c000317b:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000317f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003183:	51                   	push   ecx
c0003184:	6a 00                	push   0x0
c0003186:	6a 00                	push   0x0
c0003188:	50                   	push   eax
c0003189:	e8 a6 ef ff ff       	call   c0002134 <disk_ioctl>
c000318e:	83 c4 10             	add    esp,0x10
c0003191:	85 c0                	test   eax,eax
c0003193:	0f 95 c0             	setne  al
c0003196:	0f b6 c0             	movzx  eax,al
c0003199:	5a                   	pop    edx
c000319a:	5b                   	pop    ebx
c000319b:	5e                   	pop    esi
c000319c:	c3                   	ret    

c000319d <create_partition>:
c000319d:	55                   	push   ebp
c000319e:	0f b6 c0             	movzx  eax,al
c00031a1:	57                   	push   edi
c00031a2:	56                   	push   esi
c00031a3:	53                   	push   ebx
c00031a4:	83 ec 40             	sub    esp,0x40
c00031a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00031ab:	8d 44 24 30          	lea    eax,[esp+0x30]
c00031af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00031b3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00031b7:	50                   	push   eax
c00031b8:	6a 01                	push   0x1
c00031ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031be:	e8 71 ef ff ff       	call   c0002134 <disk_ioctl>
c00031c3:	83 c4 10             	add    esp,0x10
c00031c6:	85 c0                	test   eax,eax
c00031c8:	0f 85 68 01 00 00    	jne    c0003336 <create_partition+0x199>
c00031ce:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00031d2:	b9 05 00 00 00       	mov    ecx,0x5
c00031d7:	be 08 00 00 00       	mov    esi,0x8
c00031dc:	89 f0                	mov    eax,esi
c00031de:	31 d2                	xor    edx,edx
c00031e0:	0f b6 d8             	movzx  ebx,al
c00031e3:	89 e8                	mov    eax,ebp
c00031e5:	f7 f3                	div    ebx
c00031e7:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00031ec:	76 0a                	jbe    c00031f8 <create_partition+0x5b>
c00031ee:	d1 e6                	shl    esi,1
c00031f0:	49                   	dec    ecx
c00031f1:	75 e9                	jne    c00031dc <create_partition+0x3f>
c00031f3:	be ff ff ff ff       	mov    esi,0xffffffff
c00031f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031fc:	b9 00 02 00 00       	mov    ecx,0x200
c0003201:	31 d2                	xor    edx,edx
c0003203:	e8 8c ef ff ff       	call   c0002194 <mem_set>
c0003208:	b9 64 00 00 00       	mov    ecx,0x64
c000320d:	89 e8                	mov    eax,ebp
c000320f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003217:	31 d2                	xor    edx,edx
c0003219:	f7 f1                	div    ecx
c000321b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003220:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003224:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003228:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c000322e:	89 f0                	mov    eax,esi
c0003230:	0f b6 c0             	movzx  eax,al
c0003233:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003237:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000323c:	0f 96 c0             	setbe  al
c000323f:	31 d2                	xor    edx,edx
c0003241:	85 c9                	test   ecx,ecx
c0003243:	0f 95 c2             	setne  dl
c0003246:	85 c2                	test   edx,eax
c0003248:	0f 84 b7 00 00 00    	je     c0003305 <create_partition+0x168>
c000324e:	39 e9                	cmp    ecx,ebp
c0003250:	0f 83 af 00 00 00    	jae    c0003305 <create_partition+0x168>
c0003256:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000325a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000325e:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0003261:	83 fe 64             	cmp    esi,0x64
c0003264:	77 0b                	ja     c0003271 <create_partition+0xd4>
c0003266:	74 07                	je     c000326f <create_partition+0xd2>
c0003268:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000326d:	eb 02                	jmp    c0003271 <create_partition+0xd4>
c000326f:	89 ee                	mov    esi,ebp
c0003271:	89 ca                	mov    edx,ecx
c0003273:	31 c0                	xor    eax,eax
c0003275:	01 f2                	add    edx,esi
c0003277:	0f 92 c0             	setb   al
c000327a:	39 ea                	cmp    edx,ebp
c000327c:	77 04                	ja     c0003282 <create_partition+0xe5>
c000327e:	85 c0                	test   eax,eax
c0003280:	74 06                	je     c0003288 <create_partition+0xeb>
c0003282:	89 ee                	mov    esi,ebp
c0003284:	29 ce                	sub    esi,ecx
c0003286:	eb 04                	jmp    c000328c <create_partition+0xef>
c0003288:	85 f6                	test   esi,esi
c000328a:	74 79                	je     c0003305 <create_partition+0x168>
c000328c:	89 ca                	mov    edx,ecx
c000328e:	89 d8                	mov    eax,ebx
c0003290:	e8 e7 ee ff ff       	call   c000217c <st_dword>
c0003295:	8d 43 04             	lea    eax,[ebx+0x4]
c0003298:	89 f2                	mov    edx,esi
c000329a:	e8 dd ee ff ff       	call   c000217c <st_dword>
c000329f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00032a3:	bf 3f 00 00 00       	mov    edi,0x3f
c00032a8:	31 d2                	xor    edx,edx
c00032aa:	83 c3 10             	add    ebx,0x10
c00032ad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00032b1:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c00032b4:	89 c8                	mov    eax,ecx
c00032b6:	01 f1                	add    ecx,esi
c00032b8:	f7 f7                	div    edi
c00032ba:	89 d7                	mov    edi,edx
c00032bc:	31 d2                	xor    edx,edx
c00032be:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032c2:	47                   	inc    edi
c00032c3:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c00032c6:	89 c2                	mov    edx,eax
c00032c8:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c00032cb:	c1 ea 02             	shr    edx,0x2
c00032ce:	8d 41 ff             	lea    eax,[ecx-0x1]
c00032d1:	83 e2 c0             	and    edx,0xffffffc0
c00032d4:	09 fa                	or     edx,edi
c00032d6:	bf 3f 00 00 00       	mov    edi,0x3f
c00032db:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c00032de:	31 d2                	xor    edx,edx
c00032e0:	f7 f7                	div    edi
c00032e2:	89 d6                	mov    esi,edx
c00032e4:	31 d2                	xor    edx,edx
c00032e6:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032ea:	46                   	inc    esi
c00032eb:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00032ee:	89 c7                	mov    edi,eax
c00032f0:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00032f3:	c1 ef 02             	shr    edi,0x2
c00032f6:	83 e7 c0             	and    edi,0xffffffc0
c00032f9:	09 fe                	or     esi,edi
c00032fb:	89 f2                	mov    edx,esi
c00032fd:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003300:	e9 32 ff ff ff       	jmp    c0003237 <create_partition+0x9a>
c0003305:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003309:	ba 55 aa 00 00       	mov    edx,0xaa55
c000330e:	05 fe 01 00 00       	add    eax,0x1fe
c0003313:	e8 60 ee ff ff       	call   c0002178 <st_word>
c0003318:	6a 01                	push   0x1
c000331a:	6a 00                	push   0x0
c000331c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003320:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003324:	e8 f5 ed ff ff       	call   c000211e <disk_write>
c0003329:	83 c4 10             	add    esp,0x10
c000332c:	85 c0                	test   eax,eax
c000332e:	0f 95 c0             	setne  al
c0003331:	0f b6 c0             	movzx  eax,al
c0003334:	eb 05                	jmp    c000333b <create_partition+0x19e>
c0003336:	b8 01 00 00 00       	mov    eax,0x1
c000333b:	83 c4 3c             	add    esp,0x3c
c000333e:	5b                   	pop    ebx
c000333f:	5e                   	pop    esi
c0003340:	5f                   	pop    edi
c0003341:	5d                   	pop    ebp
c0003342:	c3                   	ret    

c0003343 <get_fileinfo>:
c0003343:	55                   	push   ebp
c0003344:	57                   	push   edi
c0003345:	56                   	push   esi
c0003346:	53                   	push   ebx
c0003347:	83 ec 1c             	sub    esp,0x1c
c000334a:	8b 30                	mov    esi,DWORD PTR [eax]
c000334c:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003350:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003354:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003358:	0f 84 de 01 00 00    	je     c000353c <get_fileinfo+0x1f9>
c000335e:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003362:	89 d3                	mov    ebx,edx
c0003364:	89 c6                	mov    esi,eax
c0003366:	74 7d                	je     c00033e5 <get_fileinfo+0xa2>
c0003368:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003370:	31 ff                	xor    edi,edi
c0003372:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000337d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003381:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003384:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003388:	85 c0                	test   eax,eax
c000338a:	89 c2                	mov    edx,eax
c000338c:	74 44                	je     c00033d2 <get_fileinfo+0x8f>
c000338e:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003393:	85 ed                	test   ebp,ebp
c0003395:	75 0d                	jne    c00033a4 <get_fileinfo+0x61>
c0003397:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000339d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c00033a2:	76 20                	jbe    c00033c4 <get_fileinfo+0x81>
c00033a4:	c1 e5 10             	shl    ebp,0x10
c00033a7:	b9 ff 00 00 00       	mov    ecx,0xff
c00033ac:	29 f9                	sub    ecx,edi
c00033ae:	09 e8                	or     eax,ebp
c00033b0:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00033b4:	e8 f7 ee ff ff       	call   c00022b0 <put_utf>
c00033b9:	0f b6 c0             	movzx  eax,al
c00033bc:	85 c0                	test   eax,eax
c00033be:	74 10                	je     c00033d0 <get_fileinfo+0x8d>
c00033c0:	01 c7                	add    edi,eax
c00033c2:	31 d2                	xor    edx,edx
c00033c4:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c00033c9:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c00033ce:	eb a9                	jmp    c0003379 <get_fileinfo+0x36>
c00033d0:	31 ff                	xor    edi,edi
c00033d2:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c00033d8:	b8 00 00 00 00       	mov    eax,0x0
c00033dd:	0f 45 f8             	cmovne edi,eax
c00033e0:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00033e5:	31 ff                	xor    edi,edi
c00033e7:	31 c9                	xor    ecx,ecx
c00033e9:	83 f9 0a             	cmp    ecx,0xa
c00033ec:	0f 87 ac 00 00 00    	ja     c000349e <get_fileinfo+0x15b>
c00033f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033f5:	8d 69 01             	lea    ebp,[ecx+0x1]
c00033f8:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00033fc:	83 f8 20             	cmp    eax,0x20
c00033ff:	89 c2                	mov    edx,eax
c0003401:	0f 84 90 00 00 00    	je     c0003497 <get_fileinfo+0x154>
c0003407:	83 f8 05             	cmp    eax,0x5
c000340a:	75 05                	jne    c0003411 <get_fileinfo+0xce>
c000340c:	ba e5 00 00 00       	mov    edx,0xe5
c0003411:	83 fd 09             	cmp    ebp,0x9
c0003414:	75 0b                	jne    c0003421 <get_fileinfo+0xde>
c0003416:	83 ff 0b             	cmp    edi,0xb
c0003419:	77 06                	ja     c0003421 <get_fileinfo+0xde>
c000341b:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003420:	47                   	inc    edi
c0003421:	0f b7 c2             	movzx  eax,dx
c0003424:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003428:	e8 a5 ed ff ff       	call   c00021d2 <dbc_1st>
c000342d:	85 c0                	test   eax,eax
c000342f:	74 2f                	je     c0003460 <get_fileinfo+0x11d>
c0003431:	83 fd 08             	cmp    ebp,0x8
c0003434:	74 2a                	je     c0003460 <get_fileinfo+0x11d>
c0003436:	83 fd 0b             	cmp    ebp,0xb
c0003439:	74 25                	je     c0003460 <get_fileinfo+0x11d>
c000343b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000343e:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003442:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003446:	e8 8a ed ff ff       	call   c00021d5 <dbc_2nd>
c000344b:	85 c0                	test   eax,eax
c000344d:	74 11                	je     c0003460 <get_fileinfo+0x11d>
c000344f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003453:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003456:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c000345b:	c1 e0 08             	shl    eax,0x8
c000345e:	09 c2                	or     edx,eax
c0003460:	50                   	push   eax
c0003461:	0f b7 d2             	movzx  edx,dx
c0003464:	50                   	push   eax
c0003465:	68 b5 01 00 00       	push   0x1b5
c000346a:	52                   	push   edx
c000346b:	e8 f4 2b 00 00       	call   c0006064 <ff_oem2uni>
c0003470:	83 c4 10             	add    esp,0x10
c0003473:	0f b7 c0             	movzx  eax,ax
c0003476:	85 c0                	test   eax,eax
c0003478:	75 04                	jne    c000347e <get_fileinfo+0x13b>
c000347a:	31 ff                	xor    edi,edi
c000347c:	eb 20                	jmp    c000349e <get_fileinfo+0x15b>
c000347e:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003482:	b9 0c 00 00 00       	mov    ecx,0xc
c0003487:	29 f9                	sub    ecx,edi
c0003489:	e8 22 ee ff ff       	call   c00022b0 <put_utf>
c000348e:	0f b6 c0             	movzx  eax,al
c0003491:	85 c0                	test   eax,eax
c0003493:	74 e5                	je     c000347a <get_fileinfo+0x137>
c0003495:	01 c7                	add    edi,eax
c0003497:	89 e9                	mov    ecx,ebp
c0003499:	e9 4b ff ff ff       	jmp    c00033e9 <get_fileinfo+0xa6>
c000349e:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00034a3:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00034a7:	75 5f                	jne    c0003508 <get_fileinfo+0x1c5>
c00034a9:	85 ff                	test   edi,edi
c00034ab:	75 0b                	jne    c00034b8 <get_fileinfo+0x175>
c00034ad:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00034b1:	ba 01 00 00 00       	mov    edx,0x1
c00034b6:	eb 3e                	jmp    c00034f6 <get_fileinfo+0x1b3>
c00034b8:	bf 08 00 00 00       	mov    edi,0x8
c00034bd:	31 d2                	xor    edx,edx
c00034bf:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c00034c5:	84 c0                	test   al,al
c00034c7:	74 2d                	je     c00034f6 <get_fileinfo+0x1b3>
c00034c9:	66 83 f8 2e          	cmp    ax,0x2e
c00034cd:	74 1b                	je     c00034ea <get_fileinfo+0x1a7>
c00034cf:	8d 48 bf             	lea    ecx,[eax-0x41]
c00034d2:	66 83 f9 19          	cmp    cx,0x19
c00034d6:	77 17                	ja     c00034ef <get_fileinfo+0x1ac>
c00034d8:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00034db:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c00034de:	21 f9                	and    ecx,edi
c00034e0:	80 e1 18             	and    cl,0x18
c00034e3:	74 0a                	je     c00034ef <get_fileinfo+0x1ac>
c00034e5:	83 c0 20             	add    eax,0x20
c00034e8:	eb 05                	jmp    c00034ef <get_fileinfo+0x1ac>
c00034ea:	bf 10 00 00 00       	mov    edi,0x10
c00034ef:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00034f3:	42                   	inc    edx
c00034f4:	eb c9                	jmp    c00034bf <get_fileinfo+0x17c>
c00034f6:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00034fb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034fe:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003502:	75 04                	jne    c0003508 <get_fileinfo+0x1c5>
c0003504:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003508:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000350b:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000350e:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003511:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003514:	83 c0 1c             	add    eax,0x1c
c0003517:	e8 44 ec ff ff       	call   c0002160 <ld_dword>
c000351c:	89 03                	mov    DWORD PTR [ebx],eax
c000351e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003521:	83 c0 16             	add    eax,0x16
c0003524:	e8 2a ec ff ff       	call   c0002153 <ld_word>
c0003529:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000352d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003530:	83 c0 18             	add    eax,0x18
c0003533:	e8 1b ec ff ff       	call   c0002153 <ld_word>
c0003538:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000353c:	83 c4 1c             	add    esp,0x1c
c000353f:	5b                   	pop    ebx
c0003540:	5e                   	pop    esi
c0003541:	5f                   	pop    edi
c0003542:	5d                   	pop    ebp
c0003543:	c3                   	ret    

c0003544 <ld_clust.isra.0>:
c0003544:	56                   	push   esi
c0003545:	89 c6                	mov    esi,eax
c0003547:	53                   	push   ebx
c0003548:	89 d3                	mov    ebx,edx
c000354a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000354d:	e8 01 ec ff ff       	call   c0002153 <ld_word>
c0003552:	0f b7 c8             	movzx  ecx,ax
c0003555:	89 f0                	mov    eax,esi
c0003557:	3c 03                	cmp    al,0x3
c0003559:	75 0d                	jne    c0003568 <ld_clust.isra.0+0x24>
c000355b:	8d 43 14             	lea    eax,[ebx+0x14]
c000355e:	e8 f0 eb ff ff       	call   c0002153 <ld_word>
c0003563:	c1 e0 10             	shl    eax,0x10
c0003566:	09 c1                	or     ecx,eax
c0003568:	5b                   	pop    ebx
c0003569:	89 c8                	mov    eax,ecx
c000356b:	5e                   	pop    esi
c000356c:	c3                   	ret    

c000356d <st_clust.isra.1>:
c000356d:	56                   	push   esi
c000356e:	89 c6                	mov    esi,eax
c0003570:	53                   	push   ebx
c0003571:	89 d3                	mov    ebx,edx
c0003573:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003576:	0f b7 d1             	movzx  edx,cx
c0003579:	e8 fa eb ff ff       	call   c0002178 <st_word>
c000357e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003581:	75 0f                	jne    c0003592 <st_clust.isra.1+0x25>
c0003583:	8d 43 14             	lea    eax,[ebx+0x14]
c0003586:	5b                   	pop    ebx
c0003587:	c1 e9 10             	shr    ecx,0x10
c000358a:	89 ca                	mov    edx,ecx
c000358c:	5e                   	pop    esi
c000358d:	e9 e6 eb ff ff       	jmp    c0002178 <st_word>
c0003592:	5b                   	pop    ebx
c0003593:	5e                   	pop    esi
c0003594:	c3                   	ret    

c0003595 <get_fat.isra.2>:
c0003595:	83 fa 01             	cmp    edx,0x1
c0003598:	b9 01 00 00 00       	mov    ecx,0x1
c000359d:	0f 86 f4 00 00 00    	jbe    c0003697 <get_fat.isra.2+0x102>
c00035a3:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00035a6:	0f 83 eb 00 00 00    	jae    c0003697 <get_fat.isra.2+0x102>
c00035ac:	55                   	push   ebp
c00035ad:	57                   	push   edi
c00035ae:	56                   	push   esi
c00035af:	89 c6                	mov    esi,eax
c00035b1:	53                   	push   ebx
c00035b2:	89 d3                	mov    ebx,edx
c00035b4:	83 ec 0c             	sub    esp,0xc
c00035b7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00035ba:	83 f8 02             	cmp    eax,0x2
c00035bd:	74 79                	je     c0003638 <get_fat.isra.2+0xa3>
c00035bf:	83 f8 03             	cmp    eax,0x3
c00035c2:	0f 84 97 00 00 00    	je     c000365f <get_fat.isra.2+0xca>
c00035c8:	48                   	dec    eax
c00035c9:	0f 85 be 00 00 00    	jne    c000368d <get_fat.isra.2+0xf8>
c00035cf:	89 d7                	mov    edi,edx
c00035d1:	89 f0                	mov    eax,esi
c00035d3:	d1 ef                	shr    edi,1
c00035d5:	01 d7                	add    edi,edx
c00035d7:	89 fa                	mov    edx,edi
c00035d9:	c1 ea 09             	shr    edx,0x9
c00035dc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00035df:	e8 d4 f0 ff ff       	call   c00026b8 <move_window>
c00035e4:	85 c0                	test   eax,eax
c00035e6:	74 08                	je     c00035f0 <get_fat.isra.2+0x5b>
c00035e8:	83 c9 ff             	or     ecx,0xffffffff
c00035eb:	e9 9d 00 00 00       	jmp    c000368d <get_fat.isra.2+0xf8>
c00035f0:	8d 6f 01             	lea    ebp,[edi+0x1]
c00035f3:	89 f0                	mov    eax,esi
c00035f5:	89 ea                	mov    edx,ebp
c00035f7:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00035fd:	c1 ea 09             	shr    edx,0x9
c0003600:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c0003605:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003608:	e8 ab f0 ff ff       	call   c00026b8 <move_window>
c000360d:	85 c0                	test   eax,eax
c000360f:	75 d7                	jne    c00035e8 <get_fat.isra.2+0x53>
c0003611:	89 f8                	mov    eax,edi
c0003613:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003619:	0f b6 f8             	movzx  edi,al
c000361c:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c0003621:	c1 e0 08             	shl    eax,0x8
c0003624:	09 f8                	or     eax,edi
c0003626:	89 c1                	mov    ecx,eax
c0003628:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000362e:	80 e3 01             	and    bl,0x1
c0003631:	74 5a                	je     c000368d <get_fat.isra.2+0xf8>
c0003633:	c1 e8 04             	shr    eax,0x4
c0003636:	eb 53                	jmp    c000368b <get_fat.isra.2+0xf6>
c0003638:	c1 ea 08             	shr    edx,0x8
c000363b:	89 f0                	mov    eax,esi
c000363d:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003640:	e8 73 f0 ff ff       	call   c00026b8 <move_window>
c0003645:	85 c0                	test   eax,eax
c0003647:	75 9f                	jne    c00035e8 <get_fat.isra.2+0x53>
c0003649:	01 db                	add    ebx,ebx
c000364b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0003651:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003655:	e8 f9 ea ff ff       	call   c0002153 <ld_word>
c000365a:	0f b7 c8             	movzx  ecx,ax
c000365d:	eb 2e                	jmp    c000368d <get_fat.isra.2+0xf8>
c000365f:	c1 ea 07             	shr    edx,0x7
c0003662:	89 f0                	mov    eax,esi
c0003664:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003667:	e8 4c f0 ff ff       	call   c00026b8 <move_window>
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 74 ff ff ff    	jne    c00035e8 <get_fat.isra.2+0x53>
c0003674:	c1 e3 02             	shl    ebx,0x2
c0003677:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000367d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003681:	e8 da ea ff ff       	call   c0002160 <ld_dword>
c0003686:	25 ff ff ff 0f       	and    eax,0xfffffff
c000368b:	89 c1                	mov    ecx,eax
c000368d:	83 c4 0c             	add    esp,0xc
c0003690:	89 c8                	mov    eax,ecx
c0003692:	5b                   	pop    ebx
c0003693:	5e                   	pop    esi
c0003694:	5f                   	pop    edi
c0003695:	5d                   	pop    ebp
c0003696:	c3                   	ret    
c0003697:	89 c8                	mov    eax,ecx
c0003699:	c3                   	ret    

c000369a <dir_sdi>:
c000369a:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00036a0:	0f 87 b6 00 00 00    	ja     c000375c <dir_sdi+0xc2>
c00036a6:	55                   	push   ebp
c00036a7:	57                   	push   edi
c00036a8:	56                   	push   esi
c00036a9:	53                   	push   ebx
c00036aa:	89 d3                	mov    ebx,edx
c00036ac:	83 ec 1c             	sub    esp,0x1c
c00036af:	f6 c2 1f             	test   dl,0x1f
c00036b2:	74 0a                	je     c00036be <dir_sdi+0x24>
c00036b4:	b8 02 00 00 00       	mov    eax,0x2
c00036b9:	e9 96 00 00 00       	jmp    c0003754 <dir_sdi+0xba>
c00036be:	89 c6                	mov    esi,eax
c00036c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036c2:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00036c5:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00036c8:	85 ff                	test   edi,edi
c00036ca:	75 21                	jne    c00036ed <dir_sdi+0x53>
c00036cc:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c00036d0:	76 07                	jbe    c00036d9 <dir_sdi+0x3f>
c00036d2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00036d5:	85 c0                	test   eax,eax
c00036d7:	75 12                	jne    c00036eb <dir_sdi+0x51>
c00036d9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00036dd:	89 da                	mov    edx,ebx
c00036df:	c1 ea 05             	shr    edx,0x5
c00036e2:	39 c2                	cmp    edx,eax
c00036e4:	73 ce                	jae    c00036b4 <dir_sdi+0x1a>
c00036e6:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00036e9:	eb 3c                	jmp    c0003727 <dir_sdi+0x8d>
c00036eb:	89 c7                	mov    edi,eax
c00036ed:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00036f1:	c1 e1 09             	shl    ecx,0x9
c00036f4:	39 cb                	cmp    ebx,ecx
c00036f6:	72 26                	jb     c000371e <dir_sdi+0x84>
c00036f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00036fe:	89 fa                	mov    edx,edi
c0003700:	e8 90 fe ff ff       	call   c0003595 <get_fat.isra.2>
c0003705:	83 f8 ff             	cmp    eax,0xffffffff
c0003708:	89 c7                	mov    edi,eax
c000370a:	74 43                	je     c000374f <dir_sdi+0xb5>
c000370c:	83 f8 01             	cmp    eax,0x1
c000370f:	76 a3                	jbe    c00036b4 <dir_sdi+0x1a>
c0003711:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003714:	76 9e                	jbe    c00036b4 <dir_sdi+0x1a>
c0003716:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000371a:	29 cb                	sub    ebx,ecx
c000371c:	eb d6                	jmp    c00036f4 <dir_sdi+0x5a>
c000371e:	89 fa                	mov    edx,edi
c0003720:	89 e8                	mov    eax,ebp
c0003722:	e8 82 ec ff ff       	call   c00023a9 <clst2sect>
c0003727:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000372a:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c000372d:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003730:	85 d2                	test   edx,edx
c0003732:	74 80                	je     c00036b4 <dir_sdi+0x1a>
c0003734:	89 d8                	mov    eax,ebx
c0003736:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000373c:	c1 e8 09             	shr    eax,0x9
c000373f:	01 d0                	add    eax,edx
c0003741:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003744:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003748:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000374b:	31 c0                	xor    eax,eax
c000374d:	eb 05                	jmp    c0003754 <dir_sdi+0xba>
c000374f:	b8 01 00 00 00       	mov    eax,0x1
c0003754:	83 c4 1c             	add    esp,0x1c
c0003757:	5b                   	pop    ebx
c0003758:	5e                   	pop    esi
c0003759:	5f                   	pop    edi
c000375a:	5d                   	pop    ebp
c000375b:	c3                   	ret    
c000375c:	b8 02 00 00 00       	mov    eax,0x2
c0003761:	c3                   	ret    

c0003762 <create_chain>:
c0003762:	55                   	push   ebp
c0003763:	89 c5                	mov    ebp,eax
c0003765:	57                   	push   edi
c0003766:	89 d7                	mov    edi,edx
c0003768:	56                   	push   esi
c0003769:	53                   	push   ebx
c000376a:	83 ec 1c             	sub    esp,0x1c
c000376d:	85 d2                	test   edx,edx
c000376f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003771:	75 0e                	jne    c0003781 <create_chain+0x1f>
c0003773:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003776:	85 c9                	test   ecx,ecx
c0003778:	74 32                	je     c00037ac <create_chain+0x4a>
c000377a:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000377d:	77 32                	ja     c00037b1 <create_chain+0x4f>
c000377f:	eb 2b                	jmp    c00037ac <create_chain+0x4a>
c0003781:	89 d8                	mov    eax,ebx
c0003783:	e8 0d fe ff ff       	call   c0003595 <get_fat.isra.2>
c0003788:	83 f8 01             	cmp    eax,0x1
c000378b:	77 0a                	ja     c0003797 <create_chain+0x35>
c000378d:	b8 01 00 00 00       	mov    eax,0x1
c0003792:	e9 fd 00 00 00       	jmp    c0003894 <create_chain+0x132>
c0003797:	83 f8 ff             	cmp    eax,0xffffffff
c000379a:	0f 84 f1 00 00 00    	je     c0003891 <create_chain+0x12f>
c00037a0:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00037a3:	89 f9                	mov    ecx,edi
c00037a5:	76 0a                	jbe    c00037b1 <create_chain+0x4f>
c00037a7:	e9 e8 00 00 00       	jmp    c0003894 <create_chain+0x132>
c00037ac:	b9 01 00 00 00       	mov    ecx,0x1
c00037b1:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00037b5:	75 07                	jne    c00037be <create_chain+0x5c>
c00037b7:	31 c0                	xor    eax,eax
c00037b9:	e9 d6 00 00 00       	jmp    c0003894 <create_chain+0x132>
c00037be:	39 f9                	cmp    ecx,edi
c00037c0:	75 49                	jne    c000380b <create_chain+0xa9>
c00037c2:	8d 71 01             	lea    esi,[ecx+0x1]
c00037c5:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00037c8:	77 05                	ja     c00037cf <create_chain+0x6d>
c00037ca:	be 02 00 00 00       	mov    esi,0x2
c00037cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037d6:	89 f2                	mov    edx,esi
c00037d8:	e8 b8 fd ff ff       	call   c0003595 <get_fat.isra.2>
c00037dd:	83 f8 01             	cmp    eax,0x1
c00037e0:	0f 84 ae 00 00 00    	je     c0003894 <create_chain+0x132>
c00037e6:	83 f8 ff             	cmp    eax,0xffffffff
c00037e9:	0f 84 a5 00 00 00    	je     c0003894 <create_chain+0x132>
c00037ef:	85 c0                	test   eax,eax
c00037f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037f5:	74 10                	je     c0003807 <create_chain+0xa5>
c00037f7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fa:	83 f8 01             	cmp    eax,0x1
c00037fd:	76 0c                	jbe    c000380b <create_chain+0xa9>
c00037ff:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003802:	0f 47 c8             	cmova  ecx,eax
c0003805:	eb 04                	jmp    c000380b <create_chain+0xa9>
c0003807:	85 f6                	test   esi,esi
c0003809:	75 3b                	jne    c0003846 <create_chain+0xe4>
c000380b:	89 ce                	mov    esi,ecx
c000380d:	46                   	inc    esi
c000380e:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003811:	77 0a                	ja     c000381d <create_chain+0xbb>
c0003813:	83 f9 01             	cmp    ecx,0x1
c0003816:	76 9f                	jbe    c00037b7 <create_chain+0x55>
c0003818:	be 02 00 00 00       	mov    esi,0x2
c000381d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003821:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003824:	89 f2                	mov    edx,esi
c0003826:	e8 6a fd ff ff       	call   c0003595 <get_fat.isra.2>
c000382b:	85 c0                	test   eax,eax
c000382d:	74 17                	je     c0003846 <create_chain+0xe4>
c000382f:	83 f8 01             	cmp    eax,0x1
c0003832:	74 60                	je     c0003894 <create_chain+0x132>
c0003834:	83 f8 ff             	cmp    eax,0xffffffff
c0003837:	74 5b                	je     c0003894 <create_chain+0x132>
c0003839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000383d:	39 ce                	cmp    esi,ecx
c000383f:	75 cc                	jne    c000380d <create_chain+0xab>
c0003841:	e9 71 ff ff ff       	jmp    c00037b7 <create_chain+0x55>
c0003846:	83 c9 ff             	or     ecx,0xffffffff
c0003849:	89 f2                	mov    edx,esi
c000384b:	89 d8                	mov    eax,ebx
c000384d:	e8 c0 f2 ff ff       	call   c0002b12 <put_fat>
c0003852:	85 c0                	test   eax,eax
c0003854:	75 0f                	jne    c0003865 <create_chain+0x103>
c0003856:	85 ff                	test   edi,edi
c0003858:	74 0b                	je     c0003865 <create_chain+0x103>
c000385a:	89 f1                	mov    ecx,esi
c000385c:	89 fa                	mov    edx,edi
c000385e:	89 d8                	mov    eax,ebx
c0003860:	e8 ad f2 ff ff       	call   c0002b12 <put_fat>
c0003865:	85 c0                	test   eax,eax
c0003867:	75 21                	jne    c000388a <create_chain+0x128>
c0003869:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000386c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000386f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003872:	8d 57 fe             	lea    edx,[edi-0x2]
c0003875:	39 d0                	cmp    eax,edx
c0003877:	77 04                	ja     c000387d <create_chain+0x11b>
c0003879:	48                   	dec    eax
c000387a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000387d:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003880:	83 c8 01             	or     eax,0x1
c0003883:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003886:	89 f0                	mov    eax,esi
c0003888:	eb 0a                	jmp    c0003894 <create_chain+0x132>
c000388a:	48                   	dec    eax
c000388b:	0f 85 fc fe ff ff    	jne    c000378d <create_chain+0x2b>
c0003891:	83 c8 ff             	or     eax,0xffffffff
c0003894:	83 c4 1c             	add    esp,0x1c
c0003897:	5b                   	pop    ebx
c0003898:	5e                   	pop    esi
c0003899:	5f                   	pop    edi
c000389a:	5d                   	pop    ebp
c000389b:	c3                   	ret    

c000389c <remove_chain>:
c000389c:	55                   	push   ebp
c000389d:	57                   	push   edi
c000389e:	56                   	push   esi
c000389f:	89 d6                	mov    esi,edx
c00038a1:	53                   	push   ebx
c00038a2:	83 ec 0c             	sub    esp,0xc
c00038a5:	83 fa 01             	cmp    edx,0x1
c00038a8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00038aa:	76 6a                	jbe    c0003916 <remove_chain+0x7a>
c00038ac:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00038af:	76 65                	jbe    c0003916 <remove_chain+0x7a>
c00038b1:	85 c9                	test   ecx,ecx
c00038b3:	89 c5                	mov    ebp,eax
c00038b5:	89 ca                	mov    edx,ecx
c00038b7:	74 0e                	je     c00038c7 <remove_chain+0x2b>
c00038b9:	83 c9 ff             	or     ecx,0xffffffff
c00038bc:	89 d8                	mov    eax,ebx
c00038be:	e8 4f f2 ff ff       	call   c0002b12 <put_fat>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	75 5b                	jne    c0003922 <remove_chain+0x86>
c00038c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00038ca:	89 f2                	mov    edx,esi
c00038cc:	e8 c4 fc ff ff       	call   c0003595 <get_fat.isra.2>
c00038d1:	85 c0                	test   eax,eax
c00038d3:	89 c7                	mov    edi,eax
c00038d5:	75 04                	jne    c00038db <remove_chain+0x3f>
c00038d7:	31 c0                	xor    eax,eax
c00038d9:	eb 47                	jmp    c0003922 <remove_chain+0x86>
c00038db:	83 f8 01             	cmp    eax,0x1
c00038de:	74 36                	je     c0003916 <remove_chain+0x7a>
c00038e0:	83 f8 ff             	cmp    eax,0xffffffff
c00038e3:	74 38                	je     c000391d <remove_chain+0x81>
c00038e5:	31 c9                	xor    ecx,ecx
c00038e7:	89 f2                	mov    edx,esi
c00038e9:	89 d8                	mov    eax,ebx
c00038eb:	e8 22 f2 ff ff       	call   c0002b12 <put_fat>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2e                	jne    c0003922 <remove_chain+0x86>
c00038f4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038f7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00038fa:	8d 4a fe             	lea    ecx,[edx-0x2]
c00038fd:	39 c8                	cmp    eax,ecx
c00038ff:	73 0d                	jae    c000390e <remove_chain+0x72>
c0003901:	40                   	inc    eax
c0003902:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003905:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003908:	83 c8 01             	or     eax,0x1
c000390b:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000390e:	39 fa                	cmp    edx,edi
c0003910:	89 fe                	mov    esi,edi
c0003912:	77 b3                	ja     c00038c7 <remove_chain+0x2b>
c0003914:	eb c1                	jmp    c00038d7 <remove_chain+0x3b>
c0003916:	b8 02 00 00 00       	mov    eax,0x2
c000391b:	eb 05                	jmp    c0003922 <remove_chain+0x86>
c000391d:	b8 01 00 00 00       	mov    eax,0x1
c0003922:	83 c4 0c             	add    esp,0xc
c0003925:	5b                   	pop    ebx
c0003926:	5e                   	pop    esi
c0003927:	5f                   	pop    edi
c0003928:	5d                   	pop    ebp
c0003929:	c3                   	ret    

c000392a <dir_next>:
c000392a:	55                   	push   ebp
c000392b:	57                   	push   edi
c000392c:	56                   	push   esi
c000392d:	53                   	push   ebx
c000392e:	83 ec 1c             	sub    esp,0x1c
c0003931:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003934:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003936:	83 c7 20             	add    edi,0x20
c0003939:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c000393f:	76 07                	jbe    c0003948 <dir_next+0x1e>
c0003941:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003948:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000394b:	b9 04 00 00 00       	mov    ecx,0x4
c0003950:	85 f6                	test   esi,esi
c0003952:	0f 84 cd 00 00 00    	je     c0003a25 <dir_next+0xfb>
c0003958:	89 c3                	mov    ebx,eax
c000395a:	89 f8                	mov    eax,edi
c000395c:	25 ff 01 00 00       	and    eax,0x1ff
c0003961:	89 d1                	mov    ecx,edx
c0003963:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003967:	0f 85 a8 00 00 00    	jne    c0003a15 <dir_next+0xeb>
c000396d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003970:	46                   	inc    esi
c0003971:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003974:	85 d2                	test   edx,edx
c0003976:	75 22                	jne    c000399a <dir_next+0x70>
c0003978:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000397c:	89 fa                	mov    edx,edi
c000397e:	c1 ea 05             	shr    edx,0x5
c0003981:	39 c2                	cmp    edx,eax
c0003983:	0f 82 8c 00 00 00    	jb     c0003a15 <dir_next+0xeb>
c0003989:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003990:	b9 04 00 00 00       	mov    ecx,0x4
c0003995:	e9 8b 00 00 00       	jmp    c0003a25 <dir_next+0xfb>
c000399a:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000399e:	89 fe                	mov    esi,edi
c00039a0:	c1 ee 09             	shr    esi,0x9
c00039a3:	48                   	dec    eax
c00039a4:	85 f0                	test   eax,esi
c00039a6:	75 6d                	jne    c0003a15 <dir_next+0xeb>
c00039a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00039ac:	89 e8                	mov    eax,ebp
c00039ae:	e8 e2 fb ff ff       	call   c0003595 <get_fat.isra.2>
c00039b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00039b7:	83 f8 01             	cmp    eax,0x1
c00039ba:	89 c6                	mov    esi,eax
c00039bc:	77 07                	ja     c00039c5 <dir_next+0x9b>
c00039be:	b9 02 00 00 00       	mov    ecx,0x2
c00039c3:	eb 60                	jmp    c0003a25 <dir_next+0xfb>
c00039c5:	83 f8 ff             	cmp    eax,0xffffffff
c00039c8:	75 07                	jne    c00039d1 <dir_next+0xa7>
c00039ca:	b9 01 00 00 00       	mov    ecx,0x1
c00039cf:	eb 54                	jmp    c0003a25 <dir_next+0xfb>
c00039d1:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00039d4:	77 30                	ja     c0003a06 <dir_next+0xdc>
c00039d6:	85 c9                	test   ecx,ecx
c00039d8:	74 af                	je     c0003989 <dir_next+0x5f>
c00039da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00039dd:	89 d8                	mov    eax,ebx
c00039df:	e8 7e fd ff ff       	call   c0003762 <create_chain>
c00039e4:	b9 07 00 00 00       	mov    ecx,0x7
c00039e9:	85 c0                	test   eax,eax
c00039eb:	89 c6                	mov    esi,eax
c00039ed:	74 36                	je     c0003a25 <dir_next+0xfb>
c00039ef:	83 f8 01             	cmp    eax,0x1
c00039f2:	74 ca                	je     c00039be <dir_next+0x94>
c00039f4:	83 f8 ff             	cmp    eax,0xffffffff
c00039f7:	74 d1                	je     c00039ca <dir_next+0xa0>
c00039f9:	89 c2                	mov    edx,eax
c00039fb:	89 e8                	mov    eax,ebp
c00039fd:	e8 67 f2 ff ff       	call   c0002c69 <dir_clear>
c0003a02:	85 c0                	test   eax,eax
c0003a04:	75 c4                	jne    c00039ca <dir_next+0xa0>
c0003a06:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003a09:	89 f2                	mov    edx,esi
c0003a0b:	89 e8                	mov    eax,ebp
c0003a0d:	e8 97 e9 ff ff       	call   c00023a9 <clst2sect>
c0003a12:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003a15:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a1c:	31 c9                	xor    ecx,ecx
c0003a1e:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003a22:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003a25:	83 c4 1c             	add    esp,0x1c
c0003a28:	89 c8                	mov    eax,ecx
c0003a2a:	5b                   	pop    ebx
c0003a2b:	5e                   	pop    esi
c0003a2c:	5f                   	pop    edi
c0003a2d:	5d                   	pop    ebp
c0003a2e:	c3                   	ret    

c0003a2f <dir_alloc>:
c0003a2f:	55                   	push   ebp
c0003a30:	89 c5                	mov    ebp,eax
c0003a32:	57                   	push   edi
c0003a33:	89 d7                	mov    edi,edx
c0003a35:	56                   	push   esi
c0003a36:	31 d2                	xor    edx,edx
c0003a38:	53                   	push   ebx
c0003a39:	83 ec 0c             	sub    esp,0xc
c0003a3c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a3e:	e8 57 fc ff ff       	call   c000369a <dir_sdi>
c0003a43:	85 c0                	test   eax,eax
c0003a45:	75 3b                	jne    c0003a82 <dir_alloc+0x53>
c0003a47:	31 db                	xor    ebx,ebx
c0003a49:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003a4c:	89 f0                	mov    eax,esi
c0003a4e:	e8 65 ec ff ff       	call   c00026b8 <move_window>
c0003a53:	85 c0                	test   eax,eax
c0003a55:	75 2b                	jne    c0003a82 <dir_alloc+0x53>
c0003a57:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003a5a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003a5d:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a63:	74 04                	je     c0003a69 <dir_alloc+0x3a>
c0003a65:	85 d2                	test   edx,edx
c0003a67:	75 07                	jne    c0003a70 <dir_alloc+0x41>
c0003a69:	43                   	inc    ebx
c0003a6a:	39 fb                	cmp    ebx,edi
c0003a6c:	75 04                	jne    c0003a72 <dir_alloc+0x43>
c0003a6e:	eb 1c                	jmp    c0003a8c <dir_alloc+0x5d>
c0003a70:	31 db                	xor    ebx,ebx
c0003a72:	ba 01 00 00 00       	mov    edx,0x1
c0003a77:	89 e8                	mov    eax,ebp
c0003a79:	e8 ac fe ff ff       	call   c000392a <dir_next>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	74 c7                	je     c0003a49 <dir_alloc+0x1a>
c0003a82:	83 f8 04             	cmp    eax,0x4
c0003a85:	75 05                	jne    c0003a8c <dir_alloc+0x5d>
c0003a87:	b8 07 00 00 00       	mov    eax,0x7
c0003a8c:	83 c4 0c             	add    esp,0xc
c0003a8f:	5b                   	pop    ebx
c0003a90:	5e                   	pop    esi
c0003a91:	5f                   	pop    edi
c0003a92:	5d                   	pop    ebp
c0003a93:	c3                   	ret    

c0003a94 <dir_read>:
c0003a94:	55                   	push   ebp
c0003a95:	57                   	push   edi
c0003a96:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a9b:	56                   	push   esi
c0003a9c:	be 04 00 00 00       	mov    esi,0x4
c0003aa1:	53                   	push   ebx
c0003aa2:	89 c3                	mov    ebx,eax
c0003aa4:	83 ec 1c             	sub    esp,0x1c
c0003aa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003aab:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003aad:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003ab2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab5:	85 d2                	test   edx,edx
c0003ab7:	0f 84 e3 00 00 00    	je     c0003ba0 <dir_read+0x10c>
c0003abd:	89 e8                	mov    eax,ebp
c0003abf:	e8 f4 eb ff ff       	call   c00026b8 <move_window>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 dd 00 00 00    	jne    c0003bab <dir_read+0x117>
c0003ace:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ad1:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003ad4:	88 04 24             	mov    BYTE PTR [esp],al
c0003ad7:	85 c0                	test   eax,eax
c0003ad9:	0f 84 c7 00 00 00    	je     c0003ba6 <dir_read+0x112>
c0003adf:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003ae2:	83 e1 3f             	and    ecx,0x3f
c0003ae5:	3d e5 00 00 00       	cmp    eax,0xe5
c0003aea:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003aed:	0f 84 93 00 00 00    	je     c0003b86 <dir_read+0xf2>
c0003af3:	83 f8 2e             	cmp    eax,0x2e
c0003af6:	0f 84 8a 00 00 00    	je     c0003b86 <dir_read+0xf2>
c0003afc:	0f b6 c9             	movzx  ecx,cl
c0003aff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003b03:	83 e1 df             	and    ecx,0xffffffdf
c0003b06:	83 f9 08             	cmp    ecx,0x8
c0003b09:	0f 94 c1             	sete   cl
c0003b0c:	0f b6 c9             	movzx  ecx,cl
c0003b0f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003b13:	75 71                	jne    c0003b86 <dir_read+0xf2>
c0003b15:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003b1a:	75 4a                	jne    c0003b66 <dir_read+0xd2>
c0003b1c:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003b20:	74 16                	je     c0003b38 <dir_read+0xa4>
c0003b22:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003b25:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003b2c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b33:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b36:	eb 0e                	jmp    c0003b46 <dir_read+0xb2>
c0003b38:	89 f9                	mov    ecx,edi
c0003b3a:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b3f:	0f b6 c9             	movzx  ecx,cl
c0003b42:	39 c1                	cmp    ecx,eax
c0003b44:	75 45                	jne    c0003b8b <dir_read+0xf7>
c0003b46:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b4a:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4f:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003b52:	75 37                	jne    c0003b8b <dir_read+0xf7>
c0003b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003b57:	e8 6a e8 ff ff       	call   c00023c6 <pick_lfn>
c0003b5c:	85 c0                	test   eax,eax
c0003b5e:	74 2b                	je     c0003b8b <dir_read+0xf7>
c0003b60:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003b63:	4f                   	dec    edi
c0003b64:	eb 25                	jmp    c0003b8b <dir_read+0xf7>
c0003b66:	89 f8                	mov    eax,edi
c0003b68:	84 c0                	test   al,al
c0003b6a:	75 11                	jne    c0003b7d <dir_read+0xe9>
c0003b6c:	89 d0                	mov    eax,edx
c0003b6e:	e8 30 ea ff ff       	call   c00025a3 <sum_sfn>
c0003b73:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b77:	75 04                	jne    c0003b7d <dir_read+0xe9>
c0003b79:	31 f6                	xor    esi,esi
c0003b7b:	eb 35                	jmp    c0003bb2 <dir_read+0x11e>
c0003b7d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b84:	eb 2c                	jmp    c0003bb2 <dir_read+0x11e>
c0003b86:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b8b:	31 d2                	xor    edx,edx
c0003b8d:	89 d8                	mov    eax,ebx
c0003b8f:	e8 96 fd ff ff       	call   c000392a <dir_next>
c0003b94:	85 c0                	test   eax,eax
c0003b96:	89 c6                	mov    esi,eax
c0003b98:	0f 84 14 ff ff ff    	je     c0003ab2 <dir_read+0x1e>
c0003b9e:	eb 0b                	jmp    c0003bab <dir_read+0x117>
c0003ba0:	85 f6                	test   esi,esi
c0003ba2:	74 d5                	je     c0003b79 <dir_read+0xe5>
c0003ba4:	eb 05                	jmp    c0003bab <dir_read+0x117>
c0003ba6:	be 04 00 00 00       	mov    esi,0x4
c0003bab:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003bb2:	83 c4 1c             	add    esp,0x1c
c0003bb5:	89 f0                	mov    eax,esi
c0003bb7:	5b                   	pop    ebx
c0003bb8:	5e                   	pop    esi
c0003bb9:	5f                   	pop    edi
c0003bba:	5d                   	pop    ebp
c0003bbb:	c3                   	ret    

c0003bbc <dir_remove>:
c0003bbc:	57                   	push   edi
c0003bbd:	56                   	push   esi
c0003bbe:	53                   	push   ebx
c0003bbf:	89 c3                	mov    ebx,eax
c0003bc1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003bc4:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bc6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003bc9:	83 fa ff             	cmp    edx,0xffffffff
c0003bcc:	74 09                	je     c0003bd7 <dir_remove+0x1b>
c0003bce:	e8 c7 fa ff ff       	call   c000369a <dir_sdi>
c0003bd3:	85 c0                	test   eax,eax
c0003bd5:	75 34                	jne    c0003c0b <dir_remove+0x4f>
c0003bd7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bda:	89 f0                	mov    eax,esi
c0003bdc:	e8 d7 ea ff ff       	call   c00026b8 <move_window>
c0003be1:	85 c0                	test   eax,eax
c0003be3:	75 1c                	jne    c0003c01 <dir_remove+0x45>
c0003be5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be8:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003beb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003bef:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003bf2:	73 17                	jae    c0003c0b <dir_remove+0x4f>
c0003bf4:	31 d2                	xor    edx,edx
c0003bf6:	89 d8                	mov    eax,ebx
c0003bf8:	e8 2d fd ff ff       	call   c000392a <dir_next>
c0003bfd:	85 c0                	test   eax,eax
c0003bff:	74 d6                	je     c0003bd7 <dir_remove+0x1b>
c0003c01:	83 f8 04             	cmp    eax,0x4
c0003c04:	75 05                	jne    c0003c0b <dir_remove+0x4f>
c0003c06:	b8 02 00 00 00       	mov    eax,0x2
c0003c0b:	5b                   	pop    ebx
c0003c0c:	5e                   	pop    esi
c0003c0d:	5f                   	pop    edi
c0003c0e:	c3                   	ret    

c0003c0f <dir_find>:
c0003c0f:	55                   	push   ebp
c0003c10:	31 d2                	xor    edx,edx
c0003c12:	57                   	push   edi
c0003c13:	56                   	push   esi
c0003c14:	53                   	push   ebx
c0003c15:	89 c3                	mov    ebx,eax
c0003c17:	83 ec 1c             	sub    esp,0x1c
c0003c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0003c1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c20:	89 d8                	mov    eax,ebx
c0003c22:	e8 73 fa ff ff       	call   c000369a <dir_sdi>
c0003c27:	85 c0                	test   eax,eax
c0003c29:	89 c6                	mov    esi,eax
c0003c2b:	0f 85 22 01 00 00    	jne    c0003d53 <dir_find+0x144>
c0003c31:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003c38:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003c3d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003c42:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c49:	e8 6a ea ff ff       	call   c00026b8 <move_window>
c0003c4e:	85 c0                	test   eax,eax
c0003c50:	89 c6                	mov    esi,eax
c0003c52:	0f 85 fb 00 00 00    	jne    c0003d53 <dir_find+0x144>
c0003c58:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003c5b:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	89 d1                	mov    ecx,edx
c0003c62:	0f 84 e6 00 00 00    	je     c0003d4e <dir_find+0x13f>
c0003c68:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003c6b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c73:	83 e0 3f             	and    eax,0x3f
c0003c76:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003c7c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003c7f:	0f 84 a8 00 00 00    	je     c0003d2d <dir_find+0x11e>
c0003c85:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003c8a:	0f b6 c0             	movzx  eax,al
c0003c8d:	74 0b                	je     c0003c9a <dir_find+0x8b>
c0003c8f:	83 f8 0f             	cmp    eax,0xf
c0003c92:	0f 85 95 00 00 00    	jne    c0003d2d <dir_find+0x11e>
c0003c98:	eb 05                	jmp    c0003c9f <dir_find+0x90>
c0003c9a:	83 f8 0f             	cmp    eax,0xf
c0003c9d:	75 62                	jne    c0003d01 <dir_find+0xf2>
c0003c9f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003ca3:	0f 85 90 00 00 00    	jne    c0003d39 <dir_find+0x12a>
c0003ca9:	f6 c1 40             	test   cl,0x40
c0003cac:	74 15                	je     c0003cc3 <dir_find+0xb4>
c0003cae:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003cb1:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003cb7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003cbb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003cbe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003cc1:	eb 11                	jmp    c0003cd4 <dir_find+0xc5>
c0003cc3:	89 e8                	mov    eax,ebp
c0003cc5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003cca:	0f b6 d0             	movzx  edx,al
c0003ccd:	0f b6 c1             	movzx  eax,cl
c0003cd0:	39 c2                	cmp    edx,eax
c0003cd2:	75 65                	jne    c0003d39 <dir_find+0x12a>
c0003cd4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003cd8:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003cdd:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003ce0:	75 57                	jne    c0003d39 <dir_find+0x12a>
c0003ce2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cea:	89 fa                	mov    edx,edi
c0003cec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cef:	e8 2c f3 ff ff       	call   c0003020 <cmp_lfn>
c0003cf4:	85 c0                	test   eax,eax
c0003cf6:	74 41                	je     c0003d39 <dir_find+0x12a>
c0003cf8:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003cfc:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003cff:	eb 38                	jmp    c0003d39 <dir_find+0x12a>
c0003d01:	89 e8                	mov    eax,ebp
c0003d03:	84 c0                	test   al,al
c0003d05:	75 0d                	jne    c0003d14 <dir_find+0x105>
c0003d07:	89 f8                	mov    eax,edi
c0003d09:	e8 95 e8 ff ff       	call   c00025a3 <sum_sfn>
c0003d0e:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003d12:	74 3f                	je     c0003d53 <dir_find+0x144>
c0003d14:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003d18:	75 13                	jne    c0003d2d <dir_find+0x11e>
c0003d1a:	8d 53 20             	lea    edx,[ebx+0x20]
c0003d1d:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d22:	89 f8                	mov    eax,edi
c0003d24:	e8 75 e4 ff ff       	call   c000219e <mem_cmp>
c0003d29:	85 c0                	test   eax,eax
c0003d2b:	74 26                	je     c0003d53 <dir_find+0x144>
c0003d2d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003d34:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003d39:	31 d2                	xor    edx,edx
c0003d3b:	89 d8                	mov    eax,ebx
c0003d3d:	e8 e8 fb ff ff       	call   c000392a <dir_next>
c0003d42:	85 c0                	test   eax,eax
c0003d44:	89 c6                	mov    esi,eax
c0003d46:	0f 84 f6 fe ff ff    	je     c0003c42 <dir_find+0x33>
c0003d4c:	eb 05                	jmp    c0003d53 <dir_find+0x144>
c0003d4e:	be 04 00 00 00       	mov    esi,0x4
c0003d53:	83 c4 1c             	add    esp,0x1c
c0003d56:	89 f0                	mov    eax,esi
c0003d58:	5b                   	pop    ebx
c0003d59:	5e                   	pop    esi
c0003d5a:	5f                   	pop    edi
c0003d5b:	5d                   	pop    ebp
c0003d5c:	c3                   	ret    

c0003d5d <follow_path>:
c0003d5d:	56                   	push   esi
c0003d5e:	53                   	push   ebx
c0003d5f:	89 c3                	mov    ebx,eax
c0003d61:	83 ec 14             	sub    esp,0x14
c0003d64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003d68:	8b 30                	mov    esi,DWORD PTR [eax]
c0003d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d6e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003d71:	83 fa 2f             	cmp    edx,0x2f
c0003d74:	75 07                	jne    c0003d7d <follow_path+0x20>
c0003d76:	40                   	inc    eax
c0003d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d7b:	eb ed                	jmp    c0003d6a <follow_path+0xd>
c0003d7d:	83 fa 5c             	cmp    edx,0x5c
c0003d80:	74 f4                	je     c0003d76 <follow_path+0x19>
c0003d82:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003d89:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003d8c:	77 3e                	ja     c0003dcc <follow_path+0x6f>
c0003d8e:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003d92:	31 d2                	xor    edx,edx
c0003d94:	89 d8                	mov    eax,ebx
c0003d96:	e8 ff f8 ff ff       	call   c000369a <dir_sdi>
c0003d9b:	eb 57                	jmp    c0003df4 <follow_path+0x97>
c0003d9d:	89 d8                	mov    eax,ebx
c0003d9f:	e8 6b fe ff ff       	call   c0003c0f <dir_find>
c0003da4:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003da7:	85 c0                	test   eax,eax
c0003da9:	75 32                	jne    c0003ddd <follow_path+0x80>
c0003dab:	80 e2 04             	and    dl,0x4
c0003dae:	75 44                	jne    c0003df4 <follow_path+0x97>
c0003db0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003db4:	74 39                	je     c0003def <follow_path+0x92>
c0003db6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003db9:	25 ff 01 00 00       	and    eax,0x1ff
c0003dbe:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003dc2:	8a 06                	mov    al,BYTE PTR [esi]
c0003dc4:	e8 7b f7 ff ff       	call   c0003544 <ld_clust.isra.0>
c0003dc9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003dcc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003dd0:	89 d8                	mov    eax,ebx
c0003dd2:	e8 8e ef ff ff       	call   c0002d65 <create_name>
c0003dd7:	85 c0                	test   eax,eax
c0003dd9:	74 c2                	je     c0003d9d <follow_path+0x40>
c0003ddb:	eb 17                	jmp    c0003df4 <follow_path+0x97>
c0003ddd:	83 f8 04             	cmp    eax,0x4
c0003de0:	75 12                	jne    c0003df4 <follow_path+0x97>
c0003de2:	80 e2 04             	and    dl,0x4
c0003de5:	ba 05 00 00 00       	mov    edx,0x5
c0003dea:	0f 44 c2             	cmove  eax,edx
c0003ded:	eb 05                	jmp    c0003df4 <follow_path+0x97>
c0003def:	b8 05 00 00 00       	mov    eax,0x5
c0003df4:	83 c4 14             	add    esp,0x14
c0003df7:	5b                   	pop    ebx
c0003df8:	5e                   	pop    esi
c0003df9:	c3                   	ret    

c0003dfa <dir_register>:
c0003dfa:	55                   	push   ebp
c0003dfb:	57                   	push   edi
c0003dfc:	56                   	push   esi
c0003dfd:	be 06 00 00 00       	mov    esi,0x6
c0003e02:	53                   	push   ebx
c0003e03:	83 ec 2c             	sub    esp,0x2c
c0003e06:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003e09:	80 e2 a0             	and    dl,0xa0
c0003e0c:	0f 85 66 01 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003e12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003e1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003e1c:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003e1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e23:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003e28:	74 06                	je     c0003e30 <dir_register+0x36>
c0003e2a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003e2e:	eb ef                	jmp    c0003e1f <dir_register+0x25>
c0003e30:	89 c3                	mov    ebx,eax
c0003e32:	b9 0c 00 00 00       	mov    ecx,0xc
c0003e37:	8d 40 20             	lea    eax,[eax+0x20]
c0003e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e3e:	89 c2                	mov    edx,eax
c0003e40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003e44:	e8 36 e3 ff ff       	call   c000217f <mem_cpy>
c0003e49:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003e4e:	74 48                	je     c0003e98 <dir_register+0x9e>
c0003e50:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003e54:	bd 01 00 00 00       	mov    ebp,0x1
c0003e59:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003e5c:	55                   	push   ebp
c0003e5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e61:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003e65:	e8 77 e6 ff ff       	call   c00024e1 <gen_numname>
c0003e6a:	58                   	pop    eax
c0003e6b:	89 d8                	mov    eax,ebx
c0003e6d:	e8 9d fd ff ff       	call   c0003c0f <dir_find>
c0003e72:	85 c0                	test   eax,eax
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	75 10                	jne    c0003e88 <dir_register+0x8e>
c0003e78:	45                   	inc    ebp
c0003e79:	83 fd 64             	cmp    ebp,0x64
c0003e7c:	75 db                	jne    c0003e59 <dir_register+0x5f>
c0003e7e:	be 07 00 00 00       	mov    esi,0x7
c0003e83:	e9 f0 00 00 00       	jmp    c0003f78 <dir_register+0x17e>
c0003e88:	83 f8 04             	cmp    eax,0x4
c0003e8b:	0f 85 e7 00 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003e91:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003e95:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003e98:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003e9d:	bd 01 00 00 00       	mov    ebp,0x1
c0003ea2:	74 13                	je     c0003eb7 <dir_register+0xbd>
c0003ea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ea8:	b9 0d 00 00 00       	mov    ecx,0xd
c0003ead:	31 d2                	xor    edx,edx
c0003eaf:	83 c0 0c             	add    eax,0xc
c0003eb2:	f7 f1                	div    ecx
c0003eb4:	8d 68 01             	lea    ebp,[eax+0x1]
c0003eb7:	89 ea                	mov    edx,ebp
c0003eb9:	89 d8                	mov    eax,ebx
c0003ebb:	e8 6f fb ff ff       	call   c0003a2f <dir_alloc>
c0003ec0:	85 c0                	test   eax,eax
c0003ec2:	89 c6                	mov    esi,eax
c0003ec4:	0f 85 ae 00 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003eca:	4d                   	dec    ebp
c0003ecb:	74 6b                	je     c0003f38 <dir_register+0x13e>
c0003ecd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003ed0:	89 e8                	mov    eax,ebp
c0003ed2:	c1 e0 05             	shl    eax,0x5
c0003ed5:	29 c2                	sub    edx,eax
c0003ed7:	89 d8                	mov    eax,ebx
c0003ed9:	e8 bc f7 ff ff       	call   c000369a <dir_sdi>
c0003ede:	85 c0                	test   eax,eax
c0003ee0:	89 c6                	mov    esi,eax
c0003ee2:	0f 85 90 00 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eec:	e8 b2 e6 ff ff       	call   c00025a3 <sum_sfn>
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003efb:	89 f8                	mov    eax,edi
c0003efd:	e8 b6 e7 ff ff       	call   c00026b8 <move_window>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	89 c6                	mov    esi,eax
c0003f06:	75 70                	jne    c0003f78 <dir_register+0x17e>
c0003f08:	83 ec 0c             	sub    esp,0xc
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f10:	0f b6 c8             	movzx  ecx,al
c0003f13:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003f16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003f1a:	e8 27 e5 ff ff       	call   c0002446 <put_lfn>
c0003f1f:	31 d2                	xor    edx,edx
c0003f21:	89 d8                	mov    eax,ebx
c0003f23:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f27:	e8 fe f9 ff ff       	call   c000392a <dir_next>
c0003f2c:	83 c4 10             	add    esp,0x10
c0003f2f:	85 c0                	test   eax,eax
c0003f31:	89 c6                	mov    esi,eax
c0003f33:	75 43                	jne    c0003f78 <dir_register+0x17e>
c0003f35:	4d                   	dec    ebp
c0003f36:	75 c0                	jne    c0003ef8 <dir_register+0xfe>
c0003f38:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f3b:	89 f8                	mov    eax,edi
c0003f3d:	e8 76 e7 ff ff       	call   c00026b8 <move_window>
c0003f42:	85 c0                	test   eax,eax
c0003f44:	89 c6                	mov    esi,eax
c0003f46:	75 30                	jne    c0003f78 <dir_register+0x17e>
c0003f48:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4b:	b9 20 00 00 00       	mov    ecx,0x20
c0003f50:	31 d2                	xor    edx,edx
c0003f52:	e8 3d e2 ff ff       	call   c0002194 <mem_set>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0003f5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f63:	e8 17 e2 ff ff       	call   c000217f <mem_cpy>
c0003f68:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003f6b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f6e:	83 e0 18             	and    eax,0x18
c0003f71:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003f74:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f78:	83 c4 2c             	add    esp,0x2c
c0003f7b:	89 f0                	mov    eax,esi
c0003f7d:	5b                   	pop    ebx
c0003f7e:	5e                   	pop    esi
c0003f7f:	5f                   	pop    edi
c0003f80:	5d                   	pop    ebp
c0003f81:	c3                   	ret    

c0003f82 <f_mount>:
c0003f82:	53                   	push   ebx
c0003f83:	83 ec 18             	sub    esp,0x18
c0003f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003f8a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003f8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003f96:	e8 28 e6 ff ff       	call   c00025c3 <get_ldnumber>
c0003f9b:	89 c2                	mov    edx,eax
c0003f9d:	b8 0b 00 00 00       	mov    eax,0xb
c0003fa2:	85 d2                	test   edx,edx
c0003fa4:	78 39                	js     c0003fdf <f_mount+0x5d>
c0003fa6:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003fad:	85 c0                	test   eax,eax
c0003faf:	74 03                	je     c0003fb4 <f_mount+0x32>
c0003fb1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003fb8:	85 c0                	test   eax,eax
c0003fba:	74 03                	je     c0003fbf <f_mount+0x3d>
c0003fbc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003fc3:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003fca:	31 c0                	xor    eax,eax
c0003fcc:	84 db                	test   bl,bl
c0003fce:	74 0f                	je     c0003fdf <f_mount+0x5d>
c0003fd0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003fd4:	31 c9                	xor    ecx,ecx
c0003fd6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003fda:	e8 36 e8 ff ff       	call   c0002815 <mount_volume>
c0003fdf:	83 c4 18             	add    esp,0x18
c0003fe2:	5b                   	pop    ebx
c0003fe3:	c3                   	ret    

c0003fe4 <f_open>:
c0003fe4:	55                   	push   ebp
c0003fe5:	b8 09 00 00 00       	mov    eax,0x9
c0003fea:	57                   	push   edi
c0003feb:	56                   	push   esi
c0003fec:	53                   	push   ebx
c0003fed:	83 ec 5c             	sub    esp,0x5c
c0003ff0:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003ff4:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003ff8:	85 db                	test   ebx,ebx
c0003ffa:	0f 84 9f 02 00 00    	je     c000429f <f_open+0x2bb>
c0004000:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004004:	89 fd                	mov    ebp,edi
c0004006:	83 e5 3f             	and    ebp,0x3f
c0004009:	89 e8                	mov    eax,ebp
c000400b:	89 ee                	mov    esi,ebp
c000400d:	0f b6 c8             	movzx  ecx,al
c0004010:	8d 44 24 74          	lea    eax,[esp+0x74]
c0004014:	e8 fc e7 ff ff       	call   c0002815 <mount_volume>
c0004019:	85 c0                	test   eax,eax
c000401b:	0f 85 78 02 00 00    	jne    c0004299 <f_open+0x2b5>
c0004021:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004025:	83 ec 0c             	sub    esp,0xc
c0004028:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000402c:	68 00 02 00 00       	push   0x200
c0004031:	e8 62 1f 00 00       	call   c0005f98 <ff_memalloc>
c0004036:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000403a:	83 c4 10             	add    esp,0x10
c000403d:	b8 11 00 00 00       	mov    eax,0x11
c0004042:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0004047:	0f 84 52 02 00 00    	je     c000429f <f_open+0x2bb>
c000404d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004051:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004055:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004059:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000405c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004060:	e8 f8 fc ff ff       	call   c0003d5d <follow_path>
c0004065:	85 c0                	test   eax,eax
c0004067:	75 0d                	jne    c0004076 <f_open+0x92>
c0004069:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c000406e:	ba 06 00 00 00       	mov    edx,0x6
c0004073:	0f 45 c2             	cmovne eax,edx
c0004076:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000407c:	0f 84 d5 00 00 00    	je     c0004157 <f_open+0x173>
c0004082:	85 c0                	test   eax,eax
c0004084:	74 21                	je     c00040a7 <f_open+0xc3>
c0004086:	83 f8 04             	cmp    eax,0x4
c0004089:	0f 85 ef 01 00 00    	jne    c000427e <f_open+0x29a>
c000408f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004093:	e8 62 fd ff ff       	call   c0003dfa <dir_register>
c0004098:	85 c0                	test   eax,eax
c000409a:	0f 85 de 01 00 00    	jne    c000427e <f_open+0x29a>
c00040a0:	83 cd 08             	or     ebp,0x8
c00040a3:	89 ee                	mov    esi,ebp
c00040a5:	eb 2c                	jmp    c00040d3 <f_open+0xef>
c00040a7:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c00040ab:	b8 07 00 00 00       	mov    eax,0x7
c00040b0:	80 e2 11             	and    dl,0x11
c00040b3:	0f 85 c5 01 00 00    	jne    c000427e <f_open+0x29a>
c00040b9:	f7 c7 04 00 00 00    	test   edi,0x4
c00040bf:	b8 08 00 00 00       	mov    eax,0x8
c00040c4:	0f 85 b4 01 00 00    	jne    c000427e <f_open+0x29a>
c00040ca:	83 e7 08             	and    edi,0x8
c00040cd:	0f 84 b1 00 00 00    	je     c0004184 <f_open+0x1a0>
c00040d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040d7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00040db:	8a 00                	mov    al,BYTE PTR [eax]
c00040dd:	89 ea                	mov    edx,ebp
c00040df:	e8 60 f4 ff ff       	call   c0003544 <ld_clust.isra.0>
c00040e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00040e9:	89 c7                	mov    edi,eax
c00040eb:	8d 45 0e             	lea    eax,[ebp+0xe]
c00040ee:	e8 89 e0 ff ff       	call   c000217c <st_dword>
c00040f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040f7:	31 c9                	xor    ecx,ecx
c00040f9:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00040fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004101:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004105:	e8 63 f4 ff ff       	call   c000356d <st_clust.isra.1>
c000410a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000410e:	31 d2                	xor    edx,edx
c0004110:	83 c0 1c             	add    eax,0x1c
c0004113:	e8 64 e0 ff ff       	call   c000217c <st_dword>
c0004118:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000411c:	85 ff                	test   edi,edi
c000411e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004122:	74 60                	je     c0004184 <f_open+0x1a0>
c0004124:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004128:	31 c9                	xor    ecx,ecx
c000412a:	89 fa                	mov    edx,edi
c000412c:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c000412f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004133:	e8 64 f7 ff ff       	call   c000389c <remove_chain>
c0004138:	85 c0                	test   eax,eax
c000413a:	0f 85 3e 01 00 00    	jne    c000427e <f_open+0x29a>
c0004140:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004144:	89 ea                	mov    edx,ebp
c0004146:	4f                   	dec    edi
c0004147:	e8 6c e5 ff ff       	call   c00026b8 <move_window>
c000414c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004150:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0004153:	85 c0                	test   eax,eax
c0004155:	eb 27                	jmp    c000417e <f_open+0x19a>
c0004157:	85 c0                	test   eax,eax
c0004159:	0f 85 1f 01 00 00    	jne    c000427e <f_open+0x29a>
c000415f:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004163:	b8 04 00 00 00       	mov    eax,0x4
c0004168:	f6 c2 10             	test   dl,0x10
c000416b:	0f 85 0d 01 00 00    	jne    c000427e <f_open+0x29a>
c0004171:	83 e7 02             	and    edi,0x2
c0004174:	74 0e                	je     c0004184 <f_open+0x1a0>
c0004176:	b8 07 00 00 00       	mov    eax,0x7
c000417b:	80 e2 01             	and    dl,0x1
c000417e:	0f 85 fa 00 00 00    	jne    c000427e <f_open+0x29a>
c0004184:	f7 c6 08 00 00 00    	test   esi,0x8
c000418a:	74 03                	je     c000418f <f_open+0x1ab>
c000418c:	83 ce 40             	or     esi,0x40
c000418f:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004193:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004197:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000419a:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000419d:	89 fa                	mov    edx,edi
c000419f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00041a2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00041a5:	e8 9a f3 ff ff       	call   c0003544 <ld_clust.isra.0>
c00041aa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041ad:	8d 47 1c             	lea    eax,[edi+0x1c]
c00041b0:	e8 ab df ff ff       	call   c0002160 <ld_dword>
c00041b5:	8d 7b 28             	lea    edi,[ebx+0x28]
c00041b8:	31 d2                	xor    edx,edx
c00041ba:	89 2b                	mov    DWORD PTR [ebx],ebp
c00041bc:	b9 00 02 00 00       	mov    ecx,0x200
c00041c1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00041c4:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c00041c8:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c00041cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00041d3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00041da:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00041de:	89 f0                	mov    eax,esi
c00041e0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00041e3:	89 f8                	mov    eax,edi
c00041e5:	e8 aa df ff ff       	call   c0002194 <mem_set>
c00041ea:	83 e6 20             	and    esi,0x20
c00041ed:	75 07                	jne    c00041f6 <f_open+0x212>
c00041ef:	31 c0                	xor    eax,eax
c00041f1:	e9 88 00 00 00       	jmp    c000427e <f_open+0x29a>
c00041f6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00041f9:	85 f6                	test   esi,esi
c00041fb:	74 f2                	je     c00041ef <f_open+0x20b>
c00041fd:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004200:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004204:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004207:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000420b:	31 c0                	xor    eax,eax
c000420d:	c1 e5 09             	shl    ebp,0x9
c0004210:	85 c0                	test   eax,eax
c0004212:	75 23                	jne    c0004237 <f_open+0x253>
c0004214:	39 ee                	cmp    esi,ebp
c0004216:	76 1f                	jbe    c0004237 <f_open+0x253>
c0004218:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421a:	e8 76 f3 ff ff       	call   c0003595 <get_fat.isra.2>
c000421f:	89 c2                	mov    edx,eax
c0004221:	b8 02 00 00 00       	mov    eax,0x2
c0004226:	83 fa 01             	cmp    edx,0x1
c0004229:	76 08                	jbe    c0004233 <f_open+0x24f>
c000422b:	31 c0                	xor    eax,eax
c000422d:	83 fa ff             	cmp    edx,0xffffffff
c0004230:	0f 94 c0             	sete   al
c0004233:	29 ee                	sub    esi,ebp
c0004235:	eb d9                	jmp    c0004210 <f_open+0x22c>
c0004237:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000423a:	85 c0                	test   eax,eax
c000423c:	75 40                	jne    c000427e <f_open+0x29a>
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	74 a9                	je     c00041ef <f_open+0x20b>
c0004246:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000424a:	89 e8                	mov    eax,ebp
c000424c:	e8 58 e1 ff ff       	call   c00023a9 <clst2sect>
c0004251:	89 c2                	mov    edx,eax
c0004253:	b8 02 00 00 00       	mov    eax,0x2
c0004258:	85 d2                	test   edx,edx
c000425a:	74 22                	je     c000427e <f_open+0x29a>
c000425c:	c1 ee 09             	shr    esi,0x9
c000425f:	8d 04 16             	lea    eax,[esi+edx*1]
c0004262:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004265:	6a 01                	push   0x1
c0004267:	50                   	push   eax
c0004268:	57                   	push   edi
c0004269:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000426d:	50                   	push   eax
c000426e:	e8 95 de ff ff       	call   c0002108 <disk_read>
c0004273:	83 c4 10             	add    esp,0x10
c0004276:	85 c0                	test   eax,eax
c0004278:	0f 95 c0             	setne  al
c000427b:	0f b6 c0             	movzx  eax,al
c000427e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004282:	83 ec 0c             	sub    esp,0xc
c0004285:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004289:	e8 22 1d 00 00       	call   c0005fb0 <ff_memfree>
c000428e:	83 c4 10             	add    esp,0x10
c0004291:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004295:	85 c0                	test   eax,eax
c0004297:	74 06                	je     c000429f <f_open+0x2bb>
c0004299:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000429f:	83 c4 5c             	add    esp,0x5c
c00042a2:	5b                   	pop    ebx
c00042a3:	5e                   	pop    esi
c00042a4:	5f                   	pop    edi
c00042a5:	5d                   	pop    ebp
c00042a6:	c3                   	ret    

c00042a7 <f_read>:
c00042a7:	55                   	push   ebp
c00042a8:	57                   	push   edi
c00042a9:	56                   	push   esi
c00042aa:	53                   	push   ebx
c00042ab:	83 ec 2c             	sub    esp,0x2c
c00042ae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00042b2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042b6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042ba:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00042be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00042c4:	89 d8                	mov    eax,ebx
c00042c6:	e8 44 e3 ff ff       	call   c000260f <validate>
c00042cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 a5 01 00 00    	jne    c000447c <f_read+0x1d5>
c00042d7:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c00042db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042df:	85 c0                	test   eax,eax
c00042e1:	0f 85 95 01 00 00    	jne    c000447c <f_read+0x1d5>
c00042e7:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00042eb:	0f 84 83 01 00 00    	je     c0004474 <f_read+0x1cd>
c00042f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00042f4:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00042f7:	39 f8                	cmp    eax,edi
c00042f9:	0f 46 f8             	cmovbe edi,eax
c00042fc:	85 ff                	test   edi,edi
c00042fe:	0f 84 78 01 00 00    	je     c000447c <f_read+0x1d5>
c0004304:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004307:	a9 ff 01 00 00       	test   eax,0x1ff
c000430c:	0f 85 2b 01 00 00    	jne    c000443d <f_read+0x196>
c0004312:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004316:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c000431a:	89 c2                	mov    edx,eax
c000431c:	c1 ea 09             	shr    edx,0x9
c000431f:	4d                   	dec    ebp
c0004320:	21 d5                	and    ebp,edx
c0004322:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004326:	75 42                	jne    c000436a <f_read+0xc3>
c0004328:	85 c0                	test   eax,eax
c000432a:	75 05                	jne    c0004331 <f_read+0x8a>
c000432c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000432f:	eb 0a                	jmp    c000433b <f_read+0x94>
c0004331:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004334:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004336:	e8 5a f2 ff ff       	call   c0003595 <get_fat.isra.2>
c000433b:	83 f8 01             	cmp    eax,0x1
c000433e:	77 11                	ja     c0004351 <f_read+0xaa>
c0004340:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004344:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000434c:	e9 2b 01 00 00       	jmp    c000447c <f_read+0x1d5>
c0004351:	83 f8 ff             	cmp    eax,0xffffffff
c0004354:	75 11                	jne    c0004367 <f_read+0xc0>
c0004356:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000435a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0004362:	e9 15 01 00 00       	jmp    c000447c <f_read+0x1d5>
c0004367:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000436a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000436e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004371:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004375:	89 c8                	mov    eax,ecx
c0004377:	e8 2d e0 ff ff       	call   c00023a9 <clst2sect>
c000437c:	85 c0                	test   eax,eax
c000437e:	74 c0                	je     c0004340 <f_read+0x99>
c0004380:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004384:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c000438a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000438d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004391:	76 58                	jbe    c00043eb <f_read+0x144>
c0004393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004397:	89 fe                	mov    esi,edi
c0004399:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000439d:	c1 ee 09             	shr    esi,0x9
c00043a0:	01 f2                	add    edx,esi
c00043a2:	39 c2                	cmp    edx,eax
c00043a4:	76 06                	jbe    c00043ac <f_read+0x105>
c00043a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043aa:	89 c6                	mov    esi,eax
c00043ac:	56                   	push   esi
c00043ad:	55                   	push   ebp
c00043ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043b6:	50                   	push   eax
c00043b7:	e8 4c dd ff ff       	call   c0002108 <disk_read>
c00043bc:	83 c4 10             	add    esp,0x10
c00043bf:	85 c0                	test   eax,eax
c00043c1:	75 93                	jne    c0004356 <f_read+0xaf>
c00043c3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043c7:	74 1d                	je     c00043e6 <f_read+0x13f>
c00043c9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043cc:	29 e8                	sub    eax,ebp
c00043ce:	39 f0                	cmp    eax,esi
c00043d0:	73 14                	jae    c00043e6 <f_read+0x13f>
c00043d2:	c1 e0 09             	shl    eax,0x9
c00043d5:	b9 00 02 00 00       	mov    ecx,0x200
c00043da:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00043de:	8d 53 28             	lea    edx,[ebx+0x28]
c00043e1:	e8 99 dd ff ff       	call   c000217f <mem_cpy>
c00043e6:	c1 e6 09             	shl    esi,0x9
c00043e9:	eb 75                	jmp    c0004460 <f_read+0x1b9>
c00043eb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043ee:	39 e8                	cmp    eax,ebp
c00043f0:	74 48                	je     c000443a <f_read+0x193>
c00043f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043f6:	8d 73 28             	lea    esi,[ebx+0x28]
c00043f9:	74 22                	je     c000441d <f_read+0x176>
c00043fb:	6a 01                	push   0x1
c00043fd:	50                   	push   eax
c00043fe:	56                   	push   esi
c00043ff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004403:	50                   	push   eax
c0004404:	e8 15 dd ff ff       	call   c000211e <disk_write>
c0004409:	83 c4 10             	add    esp,0x10
c000440c:	85 c0                	test   eax,eax
c000440e:	0f 85 42 ff ff ff    	jne    c0004356 <f_read+0xaf>
c0004414:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004417:	83 e0 7f             	and    eax,0x7f
c000441a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000441d:	6a 01                	push   0x1
c000441f:	55                   	push   ebp
c0004420:	56                   	push   esi
c0004421:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004425:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004429:	50                   	push   eax
c000442a:	e8 d9 dc ff ff       	call   c0002108 <disk_read>
c000442f:	83 c4 10             	add    esp,0x10
c0004432:	85 c0                	test   eax,eax
c0004434:	0f 85 1c ff ff ff    	jne    c0004356 <f_read+0xaf>
c000443a:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000443d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004440:	be 00 02 00 00       	mov    esi,0x200
c0004445:	25 ff 01 00 00       	and    eax,0x1ff
c000444a:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000444e:	29 c6                	sub    esi,eax
c0004450:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004454:	39 f7                	cmp    edi,esi
c0004456:	0f 46 f7             	cmovbe esi,edi
c0004459:	89 f1                	mov    ecx,esi
c000445b:	e8 1f dd ff ff       	call   c000217f <mem_cpy>
c0004460:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004464:	29 f7                	sub    edi,esi
c0004466:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000446a:	01 30                	add    DWORD PTR [eax],esi
c000446c:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000446f:	e9 88 fe ff ff       	jmp    c00042fc <f_read+0x55>
c0004474:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c000447c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004480:	83 c4 2c             	add    esp,0x2c
c0004483:	5b                   	pop    ebx
c0004484:	5e                   	pop    esi
c0004485:	5f                   	pop    edi
c0004486:	5d                   	pop    ebp
c0004487:	c3                   	ret    

c0004488 <f_write>:
c0004488:	55                   	push   ebp
c0004489:	57                   	push   edi
c000448a:	56                   	push   esi
c000448b:	53                   	push   ebx
c000448c:	83 ec 2c             	sub    esp,0x2c
c000448f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004493:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004497:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000449b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00044a1:	89 d8                	mov    eax,ebx
c00044a3:	e8 67 e1 ff ff       	call   c000260f <validate>
c00044a8:	85 c0                	test   eax,eax
c00044aa:	89 c7                	mov    edi,eax
c00044ac:	0f 85 13 02 00 00    	jne    c00046c5 <f_write+0x23d>
c00044b2:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c00044b6:	85 ff                	test   edi,edi
c00044b8:	0f 85 07 02 00 00    	jne    c00046c5 <f_write+0x23d>
c00044be:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044c2:	0f 84 f8 01 00 00    	je     c00046c0 <f_write+0x238>
c00044c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044cb:	89 c1                	mov    ecx,eax
c00044cd:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00044d1:	0f 83 ed 00 00 00    	jae    c00045c4 <f_write+0x13c>
c00044d7:	f7 d0                	not    eax
c00044d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00044dd:	e9 e2 00 00 00       	jmp    c00045c4 <f_write+0x13c>
c00044e2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e5:	a9 ff 01 00 00       	test   eax,0x1ff
c00044ea:	0f 85 9b 01 00 00    	jne    c000468b <f_write+0x203>
c00044f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044f4:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00044f8:	89 c2                	mov    edx,eax
c00044fa:	c1 ea 09             	shr    edx,0x9
c00044fd:	4d                   	dec    ebp
c00044fe:	21 d5                	and    ebp,edx
c0004500:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004504:	0f 84 c7 00 00 00    	je     c00045d1 <f_write+0x149>
c000450a:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000450e:	0f 85 23 01 00 00    	jne    c0004637 <f_write+0x1af>
c0004514:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004518:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000451b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000451f:	89 c8                	mov    eax,ecx
c0004521:	e8 83 de ff ff       	call   c00023a9 <clst2sect>
c0004526:	85 c0                	test   eax,eax
c0004528:	0f 84 d3 00 00 00    	je     c0004601 <f_write+0x179>
c000452e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004532:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000453a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000453d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004541:	0f 86 1c 01 00 00    	jbe    c0004663 <f_write+0x1db>
c0004547:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000454b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004553:	c1 ee 09             	shr    esi,0x9
c0004556:	01 f2                	add    edx,esi
c0004558:	39 c2                	cmp    edx,eax
c000455a:	76 06                	jbe    c0004562 <f_write+0xda>
c000455c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004560:	89 c6                	mov    esi,eax
c0004562:	56                   	push   esi
c0004563:	55                   	push   ebp
c0004564:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004568:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000456c:	50                   	push   eax
c000456d:	e8 ac db ff ff       	call   c000211e <disk_write>
c0004572:	83 c4 10             	add    esp,0x10
c0004575:	85 c0                	test   eax,eax
c0004577:	0f 85 97 00 00 00    	jne    c0004614 <f_write+0x18c>
c000457d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004580:	29 ea                	sub    edx,ebp
c0004582:	39 f2                	cmp    edx,esi
c0004584:	73 1d                	jae    c00045a3 <f_write+0x11b>
c0004586:	c1 e2 09             	shl    edx,0x9
c0004589:	b9 00 02 00 00       	mov    ecx,0x200
c000458e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004592:	8d 43 28             	lea    eax,[ebx+0x28]
c0004595:	e8 e5 db ff ff       	call   c000217f <mem_cpy>
c000459a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000459d:	83 e0 7f             	and    eax,0x7f
c00045a0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a3:	c1 e6 09             	shl    esi,0x9
c00045a6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00045aa:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00045ae:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00045b2:	01 30                	add    DWORD PTR [eax],esi
c00045b4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00045b7:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c00045ba:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00045bd:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c00045c1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00045c4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00045c9:	0f 85 13 ff ff ff    	jne    c00044e2 <f_write+0x5a>
c00045cf:	eb 1d                	jmp    c00045ee <f_write+0x166>
c00045d1:	85 c0                	test   eax,eax
c00045d3:	75 0b                	jne    c00045e0 <f_write+0x158>
c00045d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045d8:	31 d2                	xor    edx,edx
c00045da:	85 c0                	test   eax,eax
c00045dc:	75 1e                	jne    c00045fc <f_write+0x174>
c00045de:	eb 03                	jmp    c00045e3 <f_write+0x15b>
c00045e0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 78 f1 ff ff       	call   c0003762 <create_chain>
c00045ea:	85 c0                	test   eax,eax
c00045ec:	75 0e                	jne    c00045fc <f_write+0x174>
c00045ee:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045f1:	83 c8 40             	or     eax,0x40
c00045f4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045f7:	e9 c9 00 00 00       	jmp    c00046c5 <f_write+0x23d>
c00045fc:	83 f8 01             	cmp    eax,0x1
c00045ff:	75 0e                	jne    c000460f <f_write+0x187>
c0004601:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004605:	bf 02 00 00 00       	mov    edi,0x2
c000460a:	e9 b6 00 00 00       	jmp    c00046c5 <f_write+0x23d>
c000460f:	83 f8 ff             	cmp    eax,0xffffffff
c0004612:	75 0e                	jne    c0004622 <f_write+0x19a>
c0004614:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004618:	bf 01 00 00 00       	mov    edi,0x1
c000461d:	e9 a3 00 00 00       	jmp    c00046c5 <f_write+0x23d>
c0004622:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004626:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004629:	0f 85 db fe ff ff    	jne    c000450a <f_write+0x82>
c000462f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004632:	e9 d3 fe ff ff       	jmp    c000450a <f_write+0x82>
c0004637:	6a 01                	push   0x1
c0004639:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000463c:	8d 43 28             	lea    eax,[ebx+0x28]
c000463f:	50                   	push   eax
c0004640:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004644:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004648:	50                   	push   eax
c0004649:	e8 d0 da ff ff       	call   c000211e <disk_write>
c000464e:	83 c4 10             	add    esp,0x10
c0004651:	85 c0                	test   eax,eax
c0004653:	75 bf                	jne    c0004614 <f_write+0x18c>
c0004655:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004658:	83 e0 7f             	and    eax,0x7f
c000465b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000465e:	e9 b1 fe ff ff       	jmp    c0004514 <f_write+0x8c>
c0004663:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004666:	74 20                	je     c0004688 <f_write+0x200>
c0004668:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000466b:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000466e:	76 18                	jbe    c0004688 <f_write+0x200>
c0004670:	6a 01                	push   0x1
c0004672:	55                   	push   ebp
c0004673:	8d 43 28             	lea    eax,[ebx+0x28]
c0004676:	50                   	push   eax
c0004677:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000467b:	50                   	push   eax
c000467c:	e8 87 da ff ff       	call   c0002108 <disk_read>
c0004681:	83 c4 10             	add    esp,0x10
c0004684:	85 c0                	test   eax,eax
c0004686:	75 8c                	jne    c0004614 <f_write+0x18c>
c0004688:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000468b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000468e:	be 00 02 00 00       	mov    esi,0x200
c0004693:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004697:	25 ff 01 00 00       	and    eax,0x1ff
c000469c:	29 c6                	sub    esi,eax
c000469e:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c00046a2:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00046a6:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c00046ab:	89 f1                	mov    ecx,esi
c00046ad:	e8 cd da ff ff       	call   c000217f <mem_cpy>
c00046b2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00046b5:	83 c8 80             	or     eax,0xffffff80
c00046b8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00046bb:	e9 e6 fe ff ff       	jmp    c00045a6 <f_write+0x11e>
c00046c0:	bf 07 00 00 00       	mov    edi,0x7
c00046c5:	83 c4 2c             	add    esp,0x2c
c00046c8:	89 f8                	mov    eax,edi
c00046ca:	5b                   	pop    ebx
c00046cb:	5e                   	pop    esi
c00046cc:	5f                   	pop    edi
c00046cd:	5d                   	pop    ebp
c00046ce:	c3                   	ret    

c00046cf <f_sync>:
c00046cf:	56                   	push   esi
c00046d0:	53                   	push   ebx
c00046d1:	83 ec 14             	sub    esp,0x14
c00046d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046d8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046dc:	89 d8                	mov    eax,ebx
c00046de:	e8 2c df ff ff       	call   c000260f <validate>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	0f 85 a3 00 00 00    	jne    c000478e <f_sync+0xbf>
c00046eb:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046ee:	f6 c2 40             	test   dl,0x40
c00046f1:	0f 84 97 00 00 00    	je     c000478e <f_sync+0xbf>
c00046f7:	80 e2 80             	and    dl,0x80
c00046fa:	74 2e                	je     c000472a <f_sync+0x5b>
c00046fc:	6a 01                	push   0x1
c00046fe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004701:	8d 43 28             	lea    eax,[ebx+0x28]
c0004704:	50                   	push   eax
c0004705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004709:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000470d:	50                   	push   eax
c000470e:	e8 0b da ff ff       	call   c000211e <disk_write>
c0004713:	83 c4 10             	add    esp,0x10
c0004716:	89 c2                	mov    edx,eax
c0004718:	b8 01 00 00 00       	mov    eax,0x1
c000471d:	85 d2                	test   edx,edx
c000471f:	75 6d                	jne    c000478e <f_sync+0xbf>
c0004721:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004724:	83 e0 7f             	and    eax,0x7f
c0004727:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000472a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000472d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004731:	e8 82 df ff ff       	call   c00026b8 <move_window>
c0004736:	85 c0                	test   eax,eax
c0004738:	75 54                	jne    c000478e <f_sync+0xbf>
c000473a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000473d:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004740:	89 f2                	mov    edx,esi
c0004742:	83 c8 20             	or     eax,0x20
c0004745:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004748:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000474b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474d:	e8 1b ee ff ff       	call   c000356d <st_clust.isra.1>
c0004752:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004755:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004758:	e8 1f da ff ff       	call   c000217c <st_dword>
c000475d:	8d 46 16             	lea    eax,[esi+0x16]
c0004760:	ba 00 00 21 50       	mov    edx,0x50210000
c0004765:	e8 12 da ff ff       	call   c000217c <st_dword>
c000476a:	8d 46 12             	lea    eax,[esi+0x12]
c000476d:	31 d2                	xor    edx,edx
c000476f:	e8 04 da ff ff       	call   c0002178 <st_word>
c0004774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004778:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000477c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004780:	e8 68 e9 ff ff       	call   c00030ed <sync_fs>
c0004785:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004788:	83 e2 bf             	and    edx,0xffffffbf
c000478b:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478e:	83 c4 14             	add    esp,0x14
c0004791:	5b                   	pop    ebx
c0004792:	5e                   	pop    esi
c0004793:	c3                   	ret    

c0004794 <f_close>:
c0004794:	53                   	push   ebx
c0004795:	83 ec 24             	sub    esp,0x24
c0004798:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000479c:	53                   	push   ebx
c000479d:	e8 2d ff ff ff       	call   c00046cf <f_sync>
c00047a2:	83 c4 10             	add    esp,0x10
c00047a5:	85 c0                	test   eax,eax
c00047a7:	75 15                	jne    c00047be <f_close+0x2a>
c00047a9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047ad:	89 d8                	mov    eax,ebx
c00047af:	e8 5b de ff ff       	call   c000260f <validate>
c00047b4:	85 c0                	test   eax,eax
c00047b6:	75 06                	jne    c00047be <f_close+0x2a>
c00047b8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047be:	83 c4 18             	add    esp,0x18
c00047c1:	5b                   	pop    ebx
c00047c2:	c3                   	ret    

c00047c3 <f_lseek>:
c00047c3:	55                   	push   ebp
c00047c4:	57                   	push   edi
c00047c5:	56                   	push   esi
c00047c6:	53                   	push   ebx
c00047c7:	83 ec 2c             	sub    esp,0x2c
c00047ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00047ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	e8 32 de ff ff       	call   c000260f <validate>
c00047dd:	85 c0                	test   eax,eax
c00047df:	89 c5                	mov    ebp,eax
c00047e1:	0f 85 82 01 00 00    	jne    c0004969 <f_lseek+0x1a6>
c00047e7:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00047eb:	85 ed                	test   ebp,ebp
c00047ed:	0f 85 76 01 00 00    	jne    c0004969 <f_lseek+0x1a6>
c00047f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00047f6:	39 f0                	cmp    eax,esi
c00047f8:	73 07                	jae    c0004801 <f_lseek+0x3e>
c00047fa:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047fe:	0f 44 f0             	cmove  esi,eax
c0004801:	85 f6                	test   esi,esi
c0004803:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004806:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000480d:	75 07                	jne    c0004816 <f_lseek+0x53>
c000480f:	31 f6                	xor    esi,esi
c0004811:	e9 e2 00 00 00       	jmp    c00048f8 <f_lseek+0x135>
c0004816:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000481a:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000481e:	c1 e7 09             	shl    edi,0x9
c0004821:	85 c9                	test   ecx,ecx
c0004823:	74 28                	je     c000484d <f_lseek+0x8a>
c0004825:	31 d2                	xor    edx,edx
c0004827:	49                   	dec    ecx
c0004828:	8d 46 ff             	lea    eax,[esi-0x1]
c000482b:	f7 f7                	div    edi
c000482d:	31 d2                	xor    edx,edx
c000482f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004833:	89 c8                	mov    eax,ecx
c0004835:	f7 f7                	div    edi
c0004837:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000483b:	72 10                	jb     c000484d <f_lseek+0x8a>
c000483d:	89 f8                	mov    eax,edi
c000483f:	f7 d8                	neg    eax
c0004841:	21 c1                	and    ecx,eax
c0004843:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004846:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004849:	29 ce                	sub    esi,ecx
c000484b:	eb 3c                	jmp    c0004889 <f_lseek+0xc6>
c000484d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004850:	85 c0                	test   eax,eax
c0004852:	75 32                	jne    c0004886 <f_lseek+0xc3>
c0004854:	31 d2                	xor    edx,edx
c0004856:	89 d8                	mov    eax,ebx
c0004858:	e8 05 ef ff ff       	call   c0003762 <create_chain>
c000485d:	83 f8 01             	cmp    eax,0x1
c0004860:	75 0e                	jne    c0004870 <f_lseek+0xad>
c0004862:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004866:	bd 02 00 00 00       	mov    ebp,0x2
c000486b:	e9 f9 00 00 00       	jmp    c0004969 <f_lseek+0x1a6>
c0004870:	83 f8 ff             	cmp    eax,0xffffffff
c0004873:	75 0e                	jne    c0004883 <f_lseek+0xc0>
c0004875:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004879:	bd 01 00 00 00       	mov    ebp,0x1
c000487e:	e9 e6 00 00 00       	jmp    c0004969 <f_lseek+0x1a6>
c0004883:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004886:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004889:	85 c0                	test   eax,eax
c000488b:	74 82                	je     c000480f <f_lseek+0x4c>
c000488d:	39 fe                	cmp    esi,edi
c000488f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004892:	76 3d                	jbe    c00048d1 <f_lseek+0x10e>
c0004894:	01 fa                	add    edx,edi
c0004896:	29 fe                	sub    esi,edi
c0004898:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000489c:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000489f:	89 c2                	mov    edx,eax
c00048a1:	74 0d                	je     c00048b0 <f_lseek+0xed>
c00048a3:	89 d8                	mov    eax,ebx
c00048a5:	e8 b8 ee ff ff       	call   c0003762 <create_chain>
c00048aa:	85 c0                	test   eax,eax
c00048ac:	75 09                	jne    c00048b7 <f_lseek+0xf4>
c00048ae:	eb 1f                	jmp    c00048cf <f_lseek+0x10c>
c00048b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00048b2:	e8 de ec ff ff       	call   c0003595 <get_fat.isra.2>
c00048b7:	83 f8 ff             	cmp    eax,0xffffffff
c00048ba:	74 b9                	je     c0004875 <f_lseek+0xb2>
c00048bc:	83 f8 01             	cmp    eax,0x1
c00048bf:	76 a1                	jbe    c0004862 <f_lseek+0x9f>
c00048c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00048c5:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00048c8:	76 98                	jbe    c0004862 <f_lseek+0x9f>
c00048ca:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00048cd:	eb be                	jmp    c000488d <f_lseek+0xca>
c00048cf:	31 f6                	xor    esi,esi
c00048d1:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00048d4:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00048da:	0f 84 2f ff ff ff    	je     c000480f <f_lseek+0x4c>
c00048e0:	89 c2                	mov    edx,eax
c00048e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048e6:	e8 be da ff ff       	call   c00023a9 <clst2sect>
c00048eb:	85 c0                	test   eax,eax
c00048ed:	0f 84 6f ff ff ff    	je     c0004862 <f_lseek+0x9f>
c00048f3:	c1 ee 09             	shr    esi,0x9
c00048f6:	01 c6                	add    esi,eax
c00048f8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048fb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048fe:	76 0c                	jbe    c000490c <f_lseek+0x149>
c0004900:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004903:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004906:	83 ca 40             	or     edx,0x40
c0004909:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000490c:	a9 ff 01 00 00       	test   eax,0x1ff
c0004911:	74 56                	je     c0004969 <f_lseek+0x1a6>
c0004913:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004916:	39 f0                	cmp    eax,esi
c0004918:	74 4f                	je     c0004969 <f_lseek+0x1a6>
c000491a:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000491e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004921:	74 26                	je     c0004949 <f_lseek+0x186>
c0004923:	6a 01                	push   0x1
c0004925:	50                   	push   eax
c0004926:	57                   	push   edi
c0004927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000492b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000492f:	50                   	push   eax
c0004930:	e8 e9 d7 ff ff       	call   c000211e <disk_write>
c0004935:	83 c4 10             	add    esp,0x10
c0004938:	85 c0                	test   eax,eax
c000493a:	0f 85 35 ff ff ff    	jne    c0004875 <f_lseek+0xb2>
c0004940:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004943:	83 e0 7f             	and    eax,0x7f
c0004946:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004949:	6a 01                	push   0x1
c000494b:	56                   	push   esi
c000494c:	57                   	push   edi
c000494d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004951:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004955:	50                   	push   eax
c0004956:	e8 ad d7 ff ff       	call   c0002108 <disk_read>
c000495b:	83 c4 10             	add    esp,0x10
c000495e:	85 c0                	test   eax,eax
c0004960:	0f 85 0f ff ff ff    	jne    c0004875 <f_lseek+0xb2>
c0004966:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004969:	83 c4 2c             	add    esp,0x2c
c000496c:	89 e8                	mov    eax,ebp
c000496e:	5b                   	pop    ebx
c000496f:	5e                   	pop    esi
c0004970:	5f                   	pop    edi
c0004971:	5d                   	pop    ebp
c0004972:	c3                   	ret    

c0004973 <f_opendir>:
c0004973:	56                   	push   esi
c0004974:	b8 09 00 00 00       	mov    eax,0x9
c0004979:	53                   	push   ebx
c000497a:	83 ec 24             	sub    esp,0x24
c000497d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004981:	85 db                	test   ebx,ebx
c0004983:	0f 84 af 00 00 00    	je     c0004a38 <f_opendir+0xc5>
c0004989:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000498d:	31 c9                	xor    ecx,ecx
c000498f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004993:	e8 7d de ff ff       	call   c0002815 <mount_volume>
c0004998:	85 c0                	test   eax,eax
c000499a:	0f 85 92 00 00 00    	jne    c0004a32 <f_opendir+0xbf>
c00049a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049a4:	83 ec 0c             	sub    esp,0xc
c00049a7:	89 03                	mov    DWORD PTR [ebx],eax
c00049a9:	68 00 02 00 00       	push   0x200
c00049ae:	e8 e5 15 00 00       	call   c0005f98 <ff_memalloc>
c00049b3:	83 c4 10             	add    esp,0x10
c00049b6:	89 c6                	mov    esi,eax
c00049b8:	b8 11 00 00 00       	mov    eax,0x11
c00049bd:	85 f6                	test   esi,esi
c00049bf:	74 77                	je     c0004a38 <f_opendir+0xc5>
c00049c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00049c9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049cc:	89 d8                	mov    eax,ebx
c00049ce:	e8 8a f3 ff ff       	call   c0003d5d <follow_path>
c00049d3:	85 c0                	test   eax,eax
c00049d5:	75 37                	jne    c0004a0e <f_opendir+0x9b>
c00049d7:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c00049db:	75 1c                	jne    c00049f9 <f_opendir+0x86>
c00049dd:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00049e1:	b8 05 00 00 00       	mov    eax,0x5
c00049e6:	74 26                	je     c0004a0e <f_opendir+0x9b>
c00049e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049ec:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00049ef:	8a 00                	mov    al,BYTE PTR [eax]
c00049f1:	e8 4e eb ff ff       	call   c0003544 <ld_clust.isra.0>
c00049f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00049f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004a03:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004a07:	89 d8                	mov    eax,ebx
c0004a09:	e8 8c ec ff ff       	call   c000369a <dir_sdi>
c0004a0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a12:	83 ec 0c             	sub    esp,0xc
c0004a15:	56                   	push   esi
c0004a16:	e8 95 15 00 00       	call   c0005fb0 <ff_memfree>
c0004a1b:	83 c4 10             	add    esp,0x10
c0004a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a22:	83 f8 04             	cmp    eax,0x4
c0004a25:	74 06                	je     c0004a2d <f_opendir+0xba>
c0004a27:	85 c0                	test   eax,eax
c0004a29:	74 0d                	je     c0004a38 <f_opendir+0xc5>
c0004a2b:	eb 05                	jmp    c0004a32 <f_opendir+0xbf>
c0004a2d:	b8 05 00 00 00       	mov    eax,0x5
c0004a32:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a38:	83 c4 24             	add    esp,0x24
c0004a3b:	5b                   	pop    ebx
c0004a3c:	5e                   	pop    esi
c0004a3d:	c3                   	ret    

c0004a3e <f_closedir>:
c0004a3e:	53                   	push   ebx
c0004a3f:	83 ec 18             	sub    esp,0x18
c0004a42:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a46:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a4a:	89 d8                	mov    eax,ebx
c0004a4c:	e8 be db ff ff       	call   c000260f <validate>
c0004a51:	85 c0                	test   eax,eax
c0004a53:	75 06                	jne    c0004a5b <f_closedir+0x1d>
c0004a55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a5b:	83 c4 18             	add    esp,0x18
c0004a5e:	5b                   	pop    ebx
c0004a5f:	c3                   	ret    

c0004a60 <f_readdir>:
c0004a60:	57                   	push   edi
c0004a61:	56                   	push   esi
c0004a62:	53                   	push   ebx
c0004a63:	83 ec 20             	sub    esp,0x20
c0004a66:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004a6a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a6e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004a72:	89 d8                	mov    eax,ebx
c0004a74:	e8 96 db ff ff       	call   c000260f <validate>
c0004a79:	85 c0                	test   eax,eax
c0004a7b:	75 6e                	jne    c0004aeb <f_readdir+0x8b>
c0004a7d:	85 ff                	test   edi,edi
c0004a7f:	75 0b                	jne    c0004a8c <f_readdir+0x2c>
c0004a81:	31 d2                	xor    edx,edx
c0004a83:	89 d8                	mov    eax,ebx
c0004a85:	e8 10 ec ff ff       	call   c000369a <dir_sdi>
c0004a8a:	eb 5f                	jmp    c0004aeb <f_readdir+0x8b>
c0004a8c:	83 ec 0c             	sub    esp,0xc
c0004a8f:	68 00 02 00 00       	push   0x200
c0004a94:	e8 ff 14 00 00       	call   c0005f98 <ff_memalloc>
c0004a99:	83 c4 10             	add    esp,0x10
c0004a9c:	89 c6                	mov    esi,eax
c0004a9e:	b8 11 00 00 00       	mov    eax,0x11
c0004aa3:	85 f6                	test   esi,esi
c0004aa5:	74 44                	je     c0004aeb <f_readdir+0x8b>
c0004aa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004aab:	31 d2                	xor    edx,edx
c0004aad:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ab0:	89 d8                	mov    eax,ebx
c0004ab2:	e8 dd ef ff ff       	call   c0003a94 <dir_read>
c0004ab7:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004abc:	75 19                	jne    c0004ad7 <f_readdir+0x77>
c0004abe:	89 fa                	mov    edx,edi
c0004ac0:	89 d8                	mov    eax,ebx
c0004ac2:	e8 7c e8 ff ff       	call   c0003343 <get_fileinfo>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	89 d8                	mov    eax,ebx
c0004acb:	e8 5a ee ff ff       	call   c000392a <dir_next>
c0004ad0:	83 f8 04             	cmp    eax,0x4
c0004ad3:	75 02                	jne    c0004ad7 <f_readdir+0x77>
c0004ad5:	31 c0                	xor    eax,eax
c0004ad7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004adb:	83 ec 0c             	sub    esp,0xc
c0004ade:	56                   	push   esi
c0004adf:	e8 cc 14 00 00       	call   c0005fb0 <ff_memfree>
c0004ae4:	83 c4 10             	add    esp,0x10
c0004ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aeb:	83 c4 20             	add    esp,0x20
c0004aee:	5b                   	pop    ebx
c0004aef:	5e                   	pop    esi
c0004af0:	5f                   	pop    edi
c0004af1:	c3                   	ret    

c0004af2 <f_stat>:
c0004af2:	57                   	push   edi
c0004af3:	31 c9                	xor    ecx,ecx
c0004af5:	56                   	push   esi
c0004af6:	53                   	push   ebx
c0004af7:	83 ec 30             	sub    esp,0x30
c0004afa:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afe:	89 e2                	mov    edx,esp
c0004b00:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004b04:	e8 0c dd ff ff       	call   c0002815 <mount_volume>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	89 c3                	mov    ebx,eax
c0004b0d:	75 59                	jne    c0004b68 <f_stat+0x76>
c0004b0f:	83 ec 0c             	sub    esp,0xc
c0004b12:	bb 11 00 00 00       	mov    ebx,0x11
c0004b17:	68 00 02 00 00       	push   0x200
c0004b1c:	e8 77 14 00 00       	call   c0005f98 <ff_memalloc>
c0004b21:	83 c4 10             	add    esp,0x10
c0004b24:	85 c0                	test   eax,eax
c0004b26:	89 c6                	mov    esi,eax
c0004b28:	74 3e                	je     c0004b68 <f_stat+0x76>
c0004b2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b2d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004b31:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b34:	89 e0                	mov    eax,esp
c0004b36:	e8 22 f2 ff ff       	call   c0003d5d <follow_path>
c0004b3b:	85 c0                	test   eax,eax
c0004b3d:	89 c3                	mov    ebx,eax
c0004b3f:	75 1b                	jne    c0004b5c <f_stat+0x6a>
c0004b41:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004b46:	75 0f                	jne    c0004b57 <f_stat+0x65>
c0004b48:	85 ff                	test   edi,edi
c0004b4a:	74 10                	je     c0004b5c <f_stat+0x6a>
c0004b4c:	89 fa                	mov    edx,edi
c0004b4e:	89 e0                	mov    eax,esp
c0004b50:	e8 ee e7 ff ff       	call   c0003343 <get_fileinfo>
c0004b55:	eb 05                	jmp    c0004b5c <f_stat+0x6a>
c0004b57:	bb 06 00 00 00       	mov    ebx,0x6
c0004b5c:	83 ec 0c             	sub    esp,0xc
c0004b5f:	56                   	push   esi
c0004b60:	e8 4b 14 00 00       	call   c0005fb0 <ff_memfree>
c0004b65:	83 c4 10             	add    esp,0x10
c0004b68:	83 c4 30             	add    esp,0x30
c0004b6b:	89 d8                	mov    eax,ebx
c0004b6d:	5b                   	pop    ebx
c0004b6e:	5e                   	pop    esi
c0004b6f:	5f                   	pop    edi
c0004b70:	c3                   	ret    

c0004b71 <f_getfree>:
c0004b71:	55                   	push   ebp
c0004b72:	31 c9                	xor    ecx,ecx
c0004b74:	57                   	push   edi
c0004b75:	56                   	push   esi
c0004b76:	53                   	push   ebx
c0004b77:	83 ec 2c             	sub    esp,0x2c
c0004b7a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b7e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b82:	e8 8e dc ff ff       	call   c0002815 <mount_volume>
c0004b87:	85 c0                	test   eax,eax
c0004b89:	89 c6                	mov    esi,eax
c0004b8b:	0f 85 df 00 00 00    	jne    c0004c70 <f_getfree+0xff>
c0004b91:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004b95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004b99:	89 18                	mov    DWORD PTR [eax],ebx
c0004b9b:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004b9e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004ba1:	8d 57 fe             	lea    edx,[edi-0x2]
c0004ba4:	39 d0                	cmp    eax,edx
c0004ba6:	77 0b                	ja     c0004bb3 <f_getfree+0x42>
c0004ba8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004bac:	89 01                	mov    DWORD PTR [ecx],eax
c0004bae:	e9 bd 00 00 00       	jmp    c0004c70 <f_getfree+0xff>
c0004bb3:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004bb6:	75 29                	jne    c0004be1 <f_getfree+0x70>
c0004bb8:	bf 02 00 00 00       	mov    edi,0x2
c0004bbd:	31 ed                	xor    ebp,ebp
c0004bbf:	89 fa                	mov    edx,edi
c0004bc1:	89 d8                	mov    eax,ebx
c0004bc3:	e8 cd e9 ff ff       	call   c0003595 <get_fat.isra.2>
c0004bc8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bcb:	74 7d                	je     c0004c4a <f_getfree+0xd9>
c0004bcd:	83 f8 01             	cmp    eax,0x1
c0004bd0:	74 7f                	je     c0004c51 <f_getfree+0xe0>
c0004bd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd6:	83 d5 00             	adc    ebp,0x0
c0004bd9:	47                   	inc    edi
c0004bda:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004bdd:	77 e0                	ja     c0004bbf <f_getfree+0x4e>
c0004bdf:	eb 79                	jmp    c0004c5a <f_getfree+0xe9>
c0004be1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 db                	xor    ebx,ebx
c0004be8:	85 db                	test   ebx,ebx
c0004bea:	75 18                	jne    c0004c04 <f_getfree+0x93>
c0004bec:	8d 42 01             	lea    eax,[edx+0x1]
c0004bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bf7:	e8 bc da ff ff       	call   c00026b8 <move_window>
c0004bfc:	85 c0                	test   eax,eax
c0004bfe:	75 58                	jne    c0004c58 <f_getfree+0xe7>
c0004c00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004c0c:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004c0f:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004c13:	75 13                	jne    c0004c28 <f_getfree+0xb7>
c0004c15:	e8 39 d5 ff ff       	call   c0002153 <ld_word>
c0004c1a:	0f b7 c0             	movzx  eax,ax
c0004c1d:	83 f8 01             	cmp    eax,0x1
c0004c20:	83 d5 00             	adc    ebp,0x0
c0004c23:	83 c3 02             	add    ebx,0x2
c0004c26:	eb 13                	jmp    c0004c3b <f_getfree+0xca>
c0004c28:	e8 33 d5 ff ff       	call   c0002160 <ld_dword>
c0004c2d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004c32:	83 f8 01             	cmp    eax,0x1
c0004c35:	83 d5 00             	adc    ebp,0x0
c0004c38:	83 c3 04             	add    ebx,0x4
c0004c3b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004c41:	4f                   	dec    edi
c0004c42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c46:	75 a0                	jne    c0004be8 <f_getfree+0x77>
c0004c48:	eb 10                	jmp    c0004c5a <f_getfree+0xe9>
c0004c4a:	be 01 00 00 00       	mov    esi,0x1
c0004c4f:	eb 09                	jmp    c0004c5a <f_getfree+0xe9>
c0004c51:	be 02 00 00 00       	mov    esi,0x2
c0004c56:	eb 02                	jmp    c0004c5a <f_getfree+0xe9>
c0004c58:	89 c6                	mov    esi,eax
c0004c5a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004c5e:	89 28                	mov    DWORD PTR [eax],ebp
c0004c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c64:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004c67:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004c6a:	83 ca 01             	or     edx,0x1
c0004c6d:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004c70:	83 c4 2c             	add    esp,0x2c
c0004c73:	89 f0                	mov    eax,esi
c0004c75:	5b                   	pop    ebx
c0004c76:	5e                   	pop    esi
c0004c77:	5f                   	pop    edi
c0004c78:	5d                   	pop    ebp
c0004c79:	c3                   	ret    

c0004c7a <f_truncate>:
c0004c7a:	56                   	push   esi
c0004c7b:	53                   	push   ebx
c0004c7c:	83 ec 14             	sub    esp,0x14
c0004c7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004c83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c87:	89 d8                	mov    eax,ebx
c0004c89:	e8 81 d9 ff ff       	call   c000260f <validate>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	89 c6                	mov    esi,eax
c0004c92:	0f 85 c4 00 00 00    	jne    c0004d5c <f_truncate+0xe2>
c0004c98:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004c9c:	85 f6                	test   esi,esi
c0004c9e:	0f 85 b8 00 00 00    	jne    c0004d5c <f_truncate+0xe2>
c0004ca4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004ca8:	0f 84 a9 00 00 00    	je     c0004d57 <f_truncate+0xdd>
c0004cae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004cb1:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004cb4:	0f 83 a2 00 00 00    	jae    c0004d5c <f_truncate+0xe2>
c0004cba:	85 c0                	test   eax,eax
c0004cbc:	75 15                	jne    c0004cd3 <f_truncate+0x59>
c0004cbe:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004cc1:	31 c9                	xor    ecx,ecx
c0004cc3:	89 d8                	mov    eax,ebx
c0004cc5:	e8 d2 eb ff ff       	call   c000389c <remove_chain>
c0004cca:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004cd1:	eb 35                	jmp    c0004d08 <f_truncate+0x8e>
c0004cd3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004cd8:	e8 b8 e8 ff ff       	call   c0003595 <get_fat.isra.2>
c0004cdd:	89 c2                	mov    edx,eax
c0004cdf:	b8 01 00 00 00       	mov    eax,0x1
c0004ce4:	83 fa ff             	cmp    edx,0xffffffff
c0004ce7:	74 1f                	je     c0004d08 <f_truncate+0x8e>
c0004ce9:	83 fa 01             	cmp    edx,0x1
c0004cec:	b8 02 00 00 00       	mov    eax,0x2
c0004cf1:	74 15                	je     c0004d08 <f_truncate+0x8e>
c0004cf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004cf7:	31 c0                	xor    eax,eax
c0004cf9:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004cfc:	76 0a                	jbe    c0004d08 <f_truncate+0x8e>
c0004cfe:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004d01:	89 d8                	mov    eax,ebx
c0004d03:	e8 94 eb ff ff       	call   c000389c <remove_chain>
c0004d08:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004d0b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004d0e:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004d11:	83 ca 40             	or     edx,0x40
c0004d14:	85 c0                	test   eax,eax
c0004d16:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004d19:	75 35                	jne    c0004d50 <f_truncate+0xd6>
c0004d1b:	80 e2 80             	and    dl,0x80
c0004d1e:	74 3c                	je     c0004d5c <f_truncate+0xe2>
c0004d20:	6a 01                	push   0x1
c0004d22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004d25:	8d 43 28             	lea    eax,[ebx+0x28]
c0004d28:	50                   	push   eax
c0004d29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004d2d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004d31:	50                   	push   eax
c0004d32:	e8 e7 d3 ff ff       	call   c000211e <disk_write>
c0004d37:	83 c4 10             	add    esp,0x10
c0004d3a:	85 c0                	test   eax,eax
c0004d3c:	75 0d                	jne    c0004d4b <f_truncate+0xd1>
c0004d3e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004d41:	31 f6                	xor    esi,esi
c0004d43:	83 e0 7f             	and    eax,0x7f
c0004d46:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004d49:	eb 11                	jmp    c0004d5c <f_truncate+0xe2>
c0004d4b:	b8 01 00 00 00       	mov    eax,0x1
c0004d50:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004d53:	89 c6                	mov    esi,eax
c0004d55:	eb 05                	jmp    c0004d5c <f_truncate+0xe2>
c0004d57:	be 07 00 00 00       	mov    esi,0x7
c0004d5c:	83 c4 14             	add    esp,0x14
c0004d5f:	89 f0                	mov    eax,esi
c0004d61:	5b                   	pop    ebx
c0004d62:	5e                   	pop    esi
c0004d63:	c3                   	ret    

c0004d64 <f_unlink>:
c0004d64:	55                   	push   ebp
c0004d65:	b9 02 00 00 00       	mov    ecx,0x2
c0004d6a:	57                   	push   edi
c0004d6b:	56                   	push   esi
c0004d6c:	53                   	push   ebx
c0004d6d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004d73:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d77:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004d7e:	e8 92 da ff ff       	call   c0002815 <mount_volume>
c0004d83:	85 c0                	test   eax,eax
c0004d85:	0f 85 ee 00 00 00    	jne    c0004e79 <f_unlink+0x115>
c0004d8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d96:	68 00 02 00 00       	push   0x200
c0004d9b:	e8 f8 11 00 00       	call   c0005f98 <ff_memalloc>
c0004da0:	83 c4 10             	add    esp,0x10
c0004da3:	89 c3                	mov    ebx,eax
c0004da5:	b8 11 00 00 00       	mov    eax,0x11
c0004daa:	85 db                	test   ebx,ebx
c0004dac:	0f 84 c7 00 00 00    	je     c0004e79 <f_unlink+0x115>
c0004db2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004db6:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004dbd:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004dc0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dc4:	e8 94 ef ff ff       	call   c0003d5d <follow_path>
c0004dc9:	85 c0                	test   eax,eax
c0004dcb:	0f 85 94 00 00 00    	jne    c0004e65 <f_unlink+0x101>
c0004dd1:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004dd6:	b8 06 00 00 00       	mov    eax,0x6
c0004ddb:	0f 85 84 00 00 00    	jne    c0004e65 <f_unlink+0x101>
c0004de1:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004de6:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004dec:	74 07                	je     c0004df5 <f_unlink+0x91>
c0004dee:	b8 07 00 00 00       	mov    eax,0x7
c0004df3:	eb 70                	jmp    c0004e65 <f_unlink+0x101>
c0004df5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004dfd:	8a 07                	mov    al,BYTE PTR [edi]
c0004dff:	e8 40 e7 ff ff       	call   c0003544 <ld_clust.isra.0>
c0004e04:	83 e5 10             	and    ebp,0x10
c0004e07:	89 c6                	mov    esi,eax
c0004e09:	75 20                	jne    c0004e2b <f_unlink+0xc7>
c0004e0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e0f:	e8 a8 ed ff ff       	call   c0003bbc <dir_remove>
c0004e14:	85 c0                	test   eax,eax
c0004e16:	75 40                	jne    c0004e58 <f_unlink+0xf4>
c0004e18:	85 f6                	test   esi,esi
c0004e1a:	74 3c                	je     c0004e58 <f_unlink+0xf4>
c0004e1c:	31 c9                	xor    ecx,ecx
c0004e1e:	89 f2                	mov    edx,esi
c0004e20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e24:	e8 73 ea ff ff       	call   c000389c <remove_chain>
c0004e29:	eb 2d                	jmp    c0004e58 <f_unlink+0xf4>
c0004e2b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004e2f:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e33:	31 d2                	xor    edx,edx
c0004e35:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004e39:	e8 5c e8 ff ff       	call   c000369a <dir_sdi>
c0004e3e:	85 c0                	test   eax,eax
c0004e40:	75 23                	jne    c0004e65 <f_unlink+0x101>
c0004e42:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e46:	31 d2                	xor    edx,edx
c0004e48:	e8 47 ec ff ff       	call   c0003a94 <dir_read>
c0004e4d:	85 c0                	test   eax,eax
c0004e4f:	74 9d                	je     c0004dee <f_unlink+0x8a>
c0004e51:	83 f8 04             	cmp    eax,0x4
c0004e54:	75 0f                	jne    c0004e65 <f_unlink+0x101>
c0004e56:	eb b3                	jmp    c0004e0b <f_unlink+0xa7>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 09                	jne    c0004e65 <f_unlink+0x101>
c0004e5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e60:	e8 88 e2 ff ff       	call   c00030ed <sync_fs>
c0004e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e69:	83 ec 0c             	sub    esp,0xc
c0004e6c:	53                   	push   ebx
c0004e6d:	e8 3e 11 00 00       	call   c0005fb0 <ff_memfree>
c0004e72:	83 c4 10             	add    esp,0x10
c0004e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e79:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004e7f:	5b                   	pop    ebx
c0004e80:	5e                   	pop    esi
c0004e81:	5f                   	pop    edi
c0004e82:	5d                   	pop    ebp
c0004e83:	c3                   	ret    

c0004e84 <f_mkdir>:
c0004e84:	57                   	push   edi
c0004e85:	b9 02 00 00 00       	mov    ecx,0x2
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 50             	sub    esp,0x50
c0004e8f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004e93:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e97:	e8 79 d9 ff ff       	call   c0002815 <mount_volume>
c0004e9c:	85 c0                	test   eax,eax
c0004e9e:	89 c3                	mov    ebx,eax
c0004ea0:	0f 85 70 01 00 00    	jne    c0005016 <f_mkdir+0x192>
c0004ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004eaa:	83 ec 0c             	sub    esp,0xc
c0004ead:	bb 11 00 00 00       	mov    ebx,0x11
c0004eb2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004eb6:	68 00 02 00 00       	push   0x200
c0004ebb:	e8 d8 10 00 00       	call   c0005f98 <ff_memalloc>
c0004ec0:	83 c4 10             	add    esp,0x10
c0004ec3:	85 c0                	test   eax,eax
c0004ec5:	89 c7                	mov    edi,eax
c0004ec7:	0f 84 49 01 00 00    	je     c0005016 <f_mkdir+0x192>
c0004ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ed5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ed8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004edc:	e8 7c ee ff ff       	call   c0003d5d <follow_path>
c0004ee1:	85 c0                	test   eax,eax
c0004ee3:	89 c3                	mov    ebx,eax
c0004ee5:	74 3e                	je     c0004f25 <f_mkdir+0xa1>
c0004ee7:	83 f8 04             	cmp    eax,0x4
c0004eea:	75 3e                	jne    c0004f2a <f_mkdir+0xa6>
c0004eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ef0:	31 d2                	xor    edx,edx
c0004ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004ef6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004efa:	e8 63 e8 ff ff       	call   c0003762 <create_chain>
c0004eff:	85 c0                	test   eax,eax
c0004f01:	89 c6                	mov    esi,eax
c0004f03:	74 0c                	je     c0004f11 <f_mkdir+0x8d>
c0004f05:	83 f8 01             	cmp    eax,0x1
c0004f08:	bb 02 00 00 00       	mov    ebx,0x2
c0004f0d:	74 07                	je     c0004f16 <f_mkdir+0x92>
c0004f0f:	eb 2a                	jmp    c0004f3b <f_mkdir+0xb7>
c0004f11:	bb 07 00 00 00       	mov    ebx,0x7
c0004f16:	31 c9                	xor    ecx,ecx
c0004f18:	89 f2                	mov    edx,esi
c0004f1a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004f1e:	e8 79 e9 ff ff       	call   c000389c <remove_chain>
c0004f23:	eb 05                	jmp    c0004f2a <f_mkdir+0xa6>
c0004f25:	bb 08 00 00 00       	mov    ebx,0x8
c0004f2a:	83 ec 0c             	sub    esp,0xc
c0004f2d:	57                   	push   edi
c0004f2e:	e8 7d 10 00 00       	call   c0005fb0 <ff_memfree>
c0004f33:	83 c4 10             	add    esp,0x10
c0004f36:	e9 db 00 00 00       	jmp    c0005016 <f_mkdir+0x192>
c0004f3b:	83 f8 ff             	cmp    eax,0xffffffff
c0004f3e:	bb 01 00 00 00       	mov    ebx,0x1
c0004f43:	74 d1                	je     c0004f16 <f_mkdir+0x92>
c0004f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f49:	89 f2                	mov    edx,esi
c0004f4b:	e8 19 dd ff ff       	call   c0002c69 <dir_clear>
c0004f50:	85 c0                	test   eax,eax
c0004f52:	89 c3                	mov    ebx,eax
c0004f54:	75 c0                	jne    c0004f16 <f_mkdir+0x92>
c0004f56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f5f:	ba 20 00 00 00       	mov    edx,0x20
c0004f64:	83 c0 34             	add    eax,0x34
c0004f67:	e8 28 d2 ff ff       	call   c0002194 <mem_set>
c0004f6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f75:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004f79:	83 c0 4a             	add    eax,0x4a
c0004f7c:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004f80:	e8 f7 d1 ff ff       	call   c000217c <st_dword>
c0004f85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f89:	89 f1                	mov    ecx,esi
c0004f8b:	8d 50 34             	lea    edx,[eax+0x34]
c0004f8e:	e8 da e5 ff ff       	call   c000356d <st_clust.isra.1>
c0004f93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f97:	b9 20 00 00 00       	mov    ecx,0x20
c0004f9c:	8d 50 34             	lea    edx,[eax+0x34]
c0004f9f:	83 c0 54             	add    eax,0x54
c0004fa2:	e8 d8 d1 ff ff       	call   c000217f <mem_cpy>
c0004fa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004faf:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004fb3:	8d 50 54             	lea    edx,[eax+0x54]
c0004fb6:	e8 b2 e5 ff ff       	call   c000356d <st_clust.isra.1>
c0004fbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fbf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fc3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fc7:	e8 2e ee ff ff       	call   c0003dfa <dir_register>
c0004fcc:	85 c0                	test   eax,eax
c0004fce:	89 c3                	mov    ebx,eax
c0004fd0:	0f 85 40 ff ff ff    	jne    c0004f16 <f_mkdir+0x92>
c0004fd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fda:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdf:	83 c0 16             	add    eax,0x16
c0004fe2:	e8 95 d1 ff ff       	call   c000217c <st_dword>
c0004fe7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004feb:	89 f1                	mov    ecx,esi
c0004fed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ff1:	e8 77 e5 ff ff       	call   c000356d <st_clust.isra.1>
c0004ff6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ffa:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005002:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000500a:	e8 de e0 ff ff       	call   c00030ed <sync_fs>
c000500f:	89 c3                	mov    ebx,eax
c0005011:	e9 14 ff ff ff       	jmp    c0004f2a <f_mkdir+0xa6>
c0005016:	83 c4 50             	add    esp,0x50
c0005019:	89 d8                	mov    eax,ebx
c000501b:	5b                   	pop    ebx
c000501c:	5e                   	pop    esi
c000501d:	5f                   	pop    edi
c000501e:	c3                   	ret    

c000501f <f_rename>:
c000501f:	57                   	push   edi
c0005020:	56                   	push   esi
c0005021:	53                   	push   ebx
c0005022:	81 ec a0 00 00 00    	sub    esp,0xa0
c0005028:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c000502f:	e8 8f d5 ff ff       	call   c00025c3 <get_ldnumber>
c0005034:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005038:	b9 02 00 00 00       	mov    ecx,0x2
c000503d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0005044:	e8 cc d7 ff ff       	call   c0002815 <mount_volume>
c0005049:	85 c0                	test   eax,eax
c000504b:	0f 85 7c 01 00 00    	jne    c00051cd <f_rename+0x1ae>
c0005051:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005055:	83 ec 0c             	sub    esp,0xc
c0005058:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000505c:	68 00 02 00 00       	push   0x200
c0005061:	e8 32 0f 00 00       	call   c0005f98 <ff_memalloc>
c0005066:	83 c4 10             	add    esp,0x10
c0005069:	89 c6                	mov    esi,eax
c000506b:	b8 11 00 00 00       	mov    eax,0x11
c0005070:	85 f6                	test   esi,esi
c0005072:	0f 84 55 01 00 00    	je     c00051cd <f_rename+0x1ae>
c0005078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000507c:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0005083:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005086:	8d 44 24 40          	lea    eax,[esp+0x40]
c000508a:	e8 ce ec ff ff       	call   c0003d5d <follow_path>
c000508f:	85 c0                	test   eax,eax
c0005091:	0f 85 22 01 00 00    	jne    c00051b9 <f_rename+0x19a>
c0005097:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c000509b:	b8 06 00 00 00       	mov    eax,0x6
c00050a0:	80 e2 a0             	and    dl,0xa0
c00050a3:	0f 85 10 01 00 00    	jne    c00051b9 <f_rename+0x19a>
c00050a9:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00050ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b1:	b9 20 00 00 00       	mov    ecx,0x20
c00050b6:	e8 c4 d0 ff ff       	call   c000217f <mem_cpy>
c00050bb:	8d 54 24 40          	lea    edx,[esp+0x40]
c00050bf:	b9 30 00 00 00       	mov    ecx,0x30
c00050c4:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050c8:	e8 b2 d0 ff ff       	call   c000217f <mem_cpy>
c00050cd:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c00050d4:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050d8:	e8 80 ec ff ff       	call   c0003d5d <follow_path>
c00050dd:	85 c0                	test   eax,eax
c00050df:	75 20                	jne    c0005101 <f_rename+0xe2>
c00050e1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00050e5:	b8 08 00 00 00       	mov    eax,0x8
c00050ea:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c00050ee:	0f 85 c5 00 00 00    	jne    c00051b9 <f_rename+0x19a>
c00050f4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00050f8:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c00050ff:	eb 03                	jmp    c0005104 <f_rename+0xe5>
c0005101:	83 f8 04             	cmp    eax,0x4
c0005104:	0f 85 af 00 00 00    	jne    c00051b9 <f_rename+0x19a>
c000510a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000510e:	e8 e7 ec ff ff       	call   c0003dfa <dir_register>
c0005113:	85 c0                	test   eax,eax
c0005115:	0f 85 9e 00 00 00    	jne    c00051b9 <f_rename+0x19a>
c000511b:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0005122:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0005126:	b9 13 00 00 00       	mov    ecx,0x13
c000512b:	8d 43 0d             	lea    eax,[ebx+0xd]
c000512e:	e8 4c d0 ff ff       	call   c000217f <mem_cpy>
c0005133:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0005137:	a8 10                	test   al,0x10
c0005139:	75 03                	jne    c000513e <f_rename+0x11f>
c000513b:	83 c8 20             	or     eax,0x20
c000513e:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0005141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005145:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005149:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c000514d:	74 54                	je     c00051a3 <f_rename+0x184>
c000514f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005153:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0005157:	74 4a                	je     c00051a3 <f_rename+0x184>
c0005159:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000515d:	89 da                	mov    edx,ebx
c000515f:	8a 07                	mov    al,BYTE PTR [edi]
c0005161:	e8 de e3 ff ff       	call   c0003544 <ld_clust.isra.0>
c0005166:	89 c2                	mov    edx,eax
c0005168:	89 f8                	mov    eax,edi
c000516a:	e8 3a d2 ff ff       	call   c00023a9 <clst2sect>
c000516f:	89 c2                	mov    edx,eax
c0005171:	b8 02 00 00 00       	mov    eax,0x2
c0005176:	85 d2                	test   edx,edx
c0005178:	74 3f                	je     c00051b9 <f_rename+0x19a>
c000517a:	89 f8                	mov    eax,edi
c000517c:	e8 37 d5 ff ff       	call   c00026b8 <move_window>
c0005181:	85 c0                	test   eax,eax
c0005183:	75 34                	jne    c00051b9 <f_rename+0x19a>
c0005185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005189:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000518d:	75 14                	jne    c00051a3 <f_rename+0x184>
c000518f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005193:	8d 50 54             	lea    edx,[eax+0x54]
c0005196:	e8 d2 e3 ff ff       	call   c000356d <st_clust.isra.1>
c000519b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000519f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051a3:	8d 44 24 40          	lea    eax,[esp+0x40]
c00051a7:	e8 10 ea ff ff       	call   c0003bbc <dir_remove>
c00051ac:	85 c0                	test   eax,eax
c00051ae:	75 09                	jne    c00051b9 <f_rename+0x19a>
c00051b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b4:	e8 34 df ff ff       	call   c00030ed <sync_fs>
c00051b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051bd:	83 ec 0c             	sub    esp,0xc
c00051c0:	56                   	push   esi
c00051c1:	e8 ea 0d 00 00       	call   c0005fb0 <ff_memfree>
c00051c6:	83 c4 10             	add    esp,0x10
c00051c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cd:	81 c4 a0 00 00 00    	add    esp,0xa0
c00051d3:	5b                   	pop    ebx
c00051d4:	5e                   	pop    esi
c00051d5:	5f                   	pop    edi
c00051d6:	c3                   	ret    

c00051d7 <f_chmod>:
c00051d7:	57                   	push   edi
c00051d8:	b9 02 00 00 00       	mov    ecx,0x2
c00051dd:	56                   	push   esi
c00051de:	53                   	push   ebx
c00051df:	83 ec 50             	sub    esp,0x50
c00051e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e6:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00051ea:	8d 44 24 60          	lea    eax,[esp+0x60]
c00051ee:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00051f2:	e8 1e d6 ff ff       	call   c0002815 <mount_volume>
c00051f7:	85 c0                	test   eax,eax
c00051f9:	0f 85 81 00 00 00    	jne    c0005280 <f_chmod+0xa9>
c00051ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005203:	83 ec 0c             	sub    esp,0xc
c0005206:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000520a:	68 00 02 00 00       	push   0x200
c000520f:	e8 84 0d 00 00       	call   c0005f98 <ff_memalloc>
c0005214:	83 c4 10             	add    esp,0x10
c0005217:	89 c6                	mov    esi,eax
c0005219:	b8 11 00 00 00       	mov    eax,0x11
c000521e:	85 f6                	test   esi,esi
c0005220:	74 5e                	je     c0005280 <f_chmod+0xa9>
c0005222:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005226:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000522a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000522d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005231:	e8 27 eb ff ff       	call   c0003d5d <follow_path>
c0005236:	85 c0                	test   eax,eax
c0005238:	75 32                	jne    c000526c <f_chmod+0x95>
c000523a:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000523e:	b8 06 00 00 00       	mov    eax,0x6
c0005243:	80 e2 a0             	and    dl,0xa0
c0005246:	75 24                	jne    c000526c <f_chmod+0x95>
c0005248:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524c:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c000524f:	31 d7                	xor    edi,edx
c0005251:	21 fb                	and    ebx,edi
c0005253:	83 e3 27             	and    ebx,0x27
c0005256:	31 d3                	xor    ebx,edx
c0005258:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c000525b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005263:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005267:	e8 81 de ff ff       	call   c00030ed <sync_fs>
c000526c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005270:	83 ec 0c             	sub    esp,0xc
c0005273:	56                   	push   esi
c0005274:	e8 37 0d 00 00       	call   c0005fb0 <ff_memfree>
c0005279:	83 c4 10             	add    esp,0x10
c000527c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005280:	83 c4 50             	add    esp,0x50
c0005283:	5b                   	pop    ebx
c0005284:	5e                   	pop    esi
c0005285:	5f                   	pop    edi
c0005286:	c3                   	ret    

c0005287 <f_utime>:
c0005287:	56                   	push   esi
c0005288:	b9 02 00 00 00       	mov    ecx,0x2
c000528d:	53                   	push   ebx
c000528e:	83 ec 54             	sub    esp,0x54
c0005291:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005295:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005299:	8d 44 24 60          	lea    eax,[esp+0x60]
c000529d:	e8 73 d5 ff ff       	call   c0002815 <mount_volume>
c00052a2:	85 c0                	test   eax,eax
c00052a4:	0f 85 87 00 00 00    	jne    c0005331 <f_utime+0xaa>
c00052aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052ae:	83 ec 0c             	sub    esp,0xc
c00052b1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00052b5:	68 00 02 00 00       	push   0x200
c00052ba:	e8 d9 0c 00 00       	call   c0005f98 <ff_memalloc>
c00052bf:	83 c4 10             	add    esp,0x10
c00052c2:	89 c3                	mov    ebx,eax
c00052c4:	b8 11 00 00 00       	mov    eax,0x11
c00052c9:	85 db                	test   ebx,ebx
c00052cb:	74 64                	je     c0005331 <f_utime+0xaa>
c00052cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052d1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00052d5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00052d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052dc:	e8 7c ea ff ff       	call   c0003d5d <follow_path>
c00052e1:	85 c0                	test   eax,eax
c00052e3:	75 38                	jne    c000531d <f_utime+0x96>
c00052e5:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00052e9:	b8 06 00 00 00       	mov    eax,0x6
c00052ee:	80 e2 a0             	and    dl,0xa0
c00052f1:	75 2a                	jne    c000531d <f_utime+0x96>
c00052f3:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00052f7:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00052fb:	c1 e2 10             	shl    edx,0x10
c00052fe:	09 c2                	or     edx,eax
c0005300:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005304:	83 c0 16             	add    eax,0x16
c0005307:	e8 70 ce ff ff       	call   c000217c <st_dword>
c000530c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005310:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005318:	e8 d0 dd ff ff       	call   c00030ed <sync_fs>
c000531d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005321:	83 ec 0c             	sub    esp,0xc
c0005324:	53                   	push   ebx
c0005325:	e8 86 0c 00 00       	call   c0005fb0 <ff_memfree>
c000532a:	83 c4 10             	add    esp,0x10
c000532d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005331:	83 c4 54             	add    esp,0x54
c0005334:	5b                   	pop    ebx
c0005335:	5e                   	pop    esi
c0005336:	c3                   	ret    

c0005337 <f_getlabel>:
c0005337:	55                   	push   ebp
c0005338:	31 c9                	xor    ecx,ecx
c000533a:	57                   	push   edi
c000533b:	56                   	push   esi
c000533c:	53                   	push   ebx
c000533d:	83 ec 5c             	sub    esp,0x5c
c0005340:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005344:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005348:	8d 44 24 70          	lea    eax,[esp+0x70]
c000534c:	e8 c4 d4 ff ff       	call   c0002815 <mount_volume>
c0005351:	85 c0                	test   eax,eax
c0005353:	89 c3                	mov    ebx,eax
c0005355:	0f 85 d9 00 00 00    	jne    c0005434 <f_getlabel+0xfd>
c000535b:	85 ff                	test   edi,edi
c000535d:	0f 84 d1 00 00 00    	je     c0005434 <f_getlabel+0xfd>
c0005363:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000536b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000536f:	31 d2                	xor    edx,edx
c0005371:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005375:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005379:	e8 1c e3 ff ff       	call   c000369a <dir_sdi>
c000537e:	85 c0                	test   eax,eax
c0005380:	89 c3                	mov    ebx,eax
c0005382:	0f 85 a2 00 00 00    	jne    c000542a <f_getlabel+0xf3>
c0005388:	8d 44 24 20          	lea    eax,[esp+0x20]
c000538c:	ba 01 00 00 00       	mov    edx,0x1
c0005391:	e8 fe e6 ff ff       	call   c0003a94 <dir_read>
c0005396:	85 c0                	test   eax,eax
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 8a 00 00 00    	jne    c000542a <f_getlabel+0xf3>
c00053a0:	31 f6                	xor    esi,esi
c00053a2:	31 d2                	xor    edx,edx
c00053a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053a8:	8d 6a 01             	lea    ebp,[edx+0x1]
c00053ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00053af:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c00053b3:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c00053b8:	89 c8                	mov    eax,ecx
c00053ba:	e8 13 ce ff ff       	call   c00021d2 <dbc_1st>
c00053bf:	85 c0                	test   eax,eax
c00053c1:	74 19                	je     c00053dc <f_getlabel+0xa5>
c00053c3:	83 fd 0b             	cmp    ebp,0xb
c00053c6:	74 14                	je     c00053dc <f_getlabel+0xa5>
c00053c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00053cc:	c1 e1 08             	shl    ecx,0x8
c00053cf:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00053d3:	8d 6a 02             	lea    ebp,[edx+0x2]
c00053d6:	09 c1                	or     ecx,eax
c00053d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00053dc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00053e1:	52                   	push   edx
c00053e2:	52                   	push   edx
c00053e3:	68 b5 01 00 00       	push   0x1b5
c00053e8:	50                   	push   eax
c00053e9:	e8 76 0c 00 00       	call   c0006064 <ff_oem2uni>
c00053ee:	83 c4 10             	add    esp,0x10
c00053f1:	0f b7 c0             	movzx  eax,ax
c00053f4:	85 c0                	test   eax,eax
c00053f6:	74 1f                	je     c0005417 <f_getlabel+0xe0>
c00053f8:	8d 14 37             	lea    edx,[edi+esi*1]
c00053fb:	b9 04 00 00 00       	mov    ecx,0x4
c0005400:	e8 ab ce ff ff       	call   c00022b0 <put_utf>
c0005405:	0f b6 c0             	movzx  eax,al
c0005408:	85 c0                	test   eax,eax
c000540a:	74 0b                	je     c0005417 <f_getlabel+0xe0>
c000540c:	01 c6                	add    esi,eax
c000540e:	83 fd 0b             	cmp    ebp,0xb
c0005411:	74 06                	je     c0005419 <f_getlabel+0xe2>
c0005413:	89 ea                	mov    edx,ebp
c0005415:	eb 8d                	jmp    c00053a4 <f_getlabel+0x6d>
c0005417:	31 f6                	xor    esi,esi
c0005419:	01 fe                	add    esi,edi
c000541b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000541e:	39 f7                	cmp    edi,esi
c0005420:	74 12                	je     c0005434 <f_getlabel+0xfd>
c0005422:	4e                   	dec    esi
c0005423:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0005426:	74 f3                	je     c000541b <f_getlabel+0xe4>
c0005428:	eb 0a                	jmp    c0005434 <f_getlabel+0xfd>
c000542a:	83 fb 04             	cmp    ebx,0x4
c000542d:	75 05                	jne    c0005434 <f_getlabel+0xfd>
c000542f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0005432:	31 db                	xor    ebx,ebx
c0005434:	85 db                	test   ebx,ebx
c0005436:	75 49                	jne    c0005481 <f_getlabel+0x14a>
c0005438:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c000543d:	74 42                	je     c0005481 <f_getlabel+0x14a>
c000543f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005443:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005446:	e8 6d d2 ff ff       	call   c00026b8 <move_window>
c000544b:	85 c0                	test   eax,eax
c000544d:	89 c3                	mov    ebx,eax
c000544f:	75 30                	jne    c0005481 <f_getlabel+0x14a>
c0005451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005455:	b8 43 00 00 00       	mov    eax,0x43
c000545a:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c000545d:	83 f9 03             	cmp    ecx,0x3
c0005460:	74 10                	je     c0005472 <f_getlabel+0x13b>
c0005462:	83 f9 04             	cmp    ecx,0x4
c0005465:	b8 64 00 00 00       	mov    eax,0x64
c000546a:	b9 27 00 00 00       	mov    ecx,0x27
c000546f:	0f 45 c1             	cmovne eax,ecx
c0005472:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005476:	e8 e5 cc ff ff       	call   c0002160 <ld_dword>
c000547b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000547f:	89 07                	mov    DWORD PTR [edi],eax
c0005481:	83 c4 5c             	add    esp,0x5c
c0005484:	89 d8                	mov    eax,ebx
c0005486:	5b                   	pop    ebx
c0005487:	5e                   	pop    esi
c0005488:	5f                   	pop    edi
c0005489:	5d                   	pop    ebp
c000548a:	c3                   	ret    

c000548b <f_setlabel>:
c000548b:	57                   	push   edi
c000548c:	b9 02 00 00 00       	mov    ecx,0x2
c0005491:	56                   	push   esi
c0005492:	53                   	push   ebx
c0005493:	83 ec 50             	sub    esp,0x50
c0005496:	8d 54 24 04          	lea    edx,[esp+0x4]
c000549a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000549e:	e8 72 d3 ff ff       	call   c0002815 <mount_volume>
c00054a3:	85 c0                	test   eax,eax
c00054a5:	89 c6                	mov    esi,eax
c00054a7:	0f 85 65 01 00 00    	jne    c0005612 <f_setlabel+0x187>
c00054ad:	b9 0b 00 00 00       	mov    ecx,0xb
c00054b2:	ba 20 00 00 00       	mov    edx,0x20
c00054b7:	8d 44 24 0a          	lea    eax,[esp+0xa]
c00054bb:	31 db                	xor    ebx,ebx
c00054bd:	e8 d2 cc ff ff       	call   c0002194 <mem_set>
c00054c2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00054c6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00054c9:	76 5d                	jbe    c0005528 <f_setlabel+0x9d>
c00054cb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00054cf:	e8 04 cd ff ff       	call   c00021d8 <tchar2uni>
c00054d4:	3d ff ff 00 00       	cmp    eax,0xffff
c00054d9:	76 0a                	jbe    c00054e5 <f_setlabel+0x5a>
c00054db:	be 06 00 00 00       	mov    esi,0x6
c00054e0:	e9 2d 01 00 00       	jmp    c0005612 <f_setlabel+0x187>
c00054e5:	83 ec 0c             	sub    esp,0xc
c00054e8:	50                   	push   eax
c00054e9:	e8 ee 0b 00 00       	call   c00060dc <ff_wtoupper>
c00054ee:	5a                   	pop    edx
c00054ef:	59                   	pop    ecx
c00054f0:	68 b5 01 00 00       	push   0x1b5
c00054f5:	50                   	push   eax
c00054f6:	e8 cd 0a 00 00       	call   c0005fc8 <ff_uni2oem>
c00054fb:	83 c4 10             	add    esp,0x10
c00054fe:	0f b7 f0             	movzx  esi,ax
c0005501:	85 f6                	test   esi,esi
c0005503:	89 f7                	mov    edi,esi
c0005505:	74 d4                	je     c00054db <f_setlabel+0x50>
c0005507:	89 f2                	mov    edx,esi
c0005509:	b8 d0 fa 02 c0       	mov    eax,0xc002fad0
c000550e:	e8 ae cc ff ff       	call   c00021c1 <chk_chr>
c0005513:	85 c0                	test   eax,eax
c0005515:	75 c4                	jne    c00054db <f_setlabel+0x50>
c0005517:	81 fe ff 00 00 00    	cmp    esi,0xff
c000551d:	0f 87 c9 00 00 00    	ja     c00055ec <f_setlabel+0x161>
c0005523:	e9 e0 00 00 00       	jmp    c0005608 <f_setlabel+0x17d>
c0005528:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000552d:	74 ac                	je     c00054db <f_setlabel+0x50>
c000552f:	85 db                	test   ebx,ebx
c0005531:	74 0e                	je     c0005541 <f_setlabel+0xb6>
c0005533:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005538:	8d 43 ff             	lea    eax,[ebx-0x1]
c000553b:	75 04                	jne    c0005541 <f_setlabel+0xb6>
c000553d:	89 c3                	mov    ebx,eax
c000553f:	eb ee                	jmp    c000552f <f_setlabel+0xa4>
c0005541:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000554d:	31 d2                	xor    edx,edx
c000554f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005553:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005557:	e8 3e e1 ff ff       	call   c000369a <dir_sdi>
c000555c:	85 c0                	test   eax,eax
c000555e:	89 c6                	mov    esi,eax
c0005560:	0f 85 ac 00 00 00    	jne    c0005612 <f_setlabel+0x187>
c0005566:	8d 44 24 20          	lea    eax,[esp+0x20]
c000556a:	ba 01 00 00 00       	mov    edx,0x1
c000556f:	e8 20 e5 ff ff       	call   c0003a94 <dir_read>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 18                	jne    c0005590 <f_setlabel+0x105>
c0005578:	85 db                	test   ebx,ebx
c000557a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000557e:	74 0b                	je     c000558b <f_setlabel+0x100>
c0005580:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005584:	b9 0b 00 00 00       	mov    ecx,0xb
c0005589:	eb 47                	jmp    c00055d2 <f_setlabel+0x147>
c000558b:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000558e:	eb 47                	jmp    c00055d7 <f_setlabel+0x14c>
c0005590:	83 f8 04             	cmp    eax,0x4
c0005593:	75 53                	jne    c00055e8 <f_setlabel+0x15d>
c0005595:	85 db                	test   ebx,ebx
c0005597:	74 79                	je     c0005612 <f_setlabel+0x187>
c0005599:	8d 44 24 20          	lea    eax,[esp+0x20]
c000559d:	ba 01 00 00 00       	mov    edx,0x1
c00055a2:	e8 88 e4 ff ff       	call   c0003a2f <dir_alloc>
c00055a7:	85 c0                	test   eax,eax
c00055a9:	89 c6                	mov    esi,eax
c00055ab:	75 65                	jne    c0005612 <f_setlabel+0x187>
c00055ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055b1:	b9 20 00 00 00       	mov    ecx,0x20
c00055b6:	31 d2                	xor    edx,edx
c00055b8:	e8 d7 cb ff ff       	call   c0002194 <mem_set>
c00055bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00055c6:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00055ca:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00055ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055d2:	e8 a8 cb ff ff       	call   c000217f <mem_cpy>
c00055d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055db:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00055df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055e3:	e8 05 db ff ff       	call   c00030ed <sync_fs>
c00055e8:	89 c6                	mov    esi,eax
c00055ea:	eb 26                	jmp    c0005612 <f_setlabel+0x187>
c00055ec:	83 fb 09             	cmp    ebx,0x9
c00055ef:	0f 87 e6 fe ff ff    	ja     c00054db <f_setlabel+0x50>
c00055f5:	89 f0                	mov    eax,esi
c00055f7:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00055fb:	43                   	inc    ebx
c00055fc:	89 f8                	mov    eax,edi
c00055fe:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005602:	43                   	inc    ebx
c0005603:	e9 ba fe ff ff       	jmp    c00054c2 <f_setlabel+0x37>
c0005608:	83 fb 0a             	cmp    ebx,0xa
c000560b:	76 ef                	jbe    c00055fc <f_setlabel+0x171>
c000560d:	e9 c9 fe ff ff       	jmp    c00054db <f_setlabel+0x50>
c0005612:	83 c4 50             	add    esp,0x50
c0005615:	89 f0                	mov    eax,esi
c0005617:	5b                   	pop    ebx
c0005618:	5e                   	pop    esi
c0005619:	5f                   	pop    edi
c000561a:	c3                   	ret    

c000561b <f_expand>:
c000561b:	55                   	push   ebp
c000561c:	57                   	push   edi
c000561d:	56                   	push   esi
c000561e:	53                   	push   ebx
c000561f:	83 ec 2c             	sub    esp,0x2c
c0005622:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005626:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000562e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005632:	89 d8                	mov    eax,ebx
c0005634:	e8 d6 cf ff ff       	call   c000260f <validate>
c0005639:	85 c0                	test   eax,eax
c000563b:	89 c6                	mov    esi,eax
c000563d:	0f 85 3b 01 00 00    	jne    c000577e <f_expand+0x163>
c0005643:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005647:	85 f6                	test   esi,esi
c0005649:	0f 85 2f 01 00 00    	jne    c000577e <f_expand+0x163>
c000564f:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005654:	75 0a                	jne    c0005660 <f_expand+0x45>
c0005656:	be 07 00 00 00       	mov    esi,0x7
c000565b:	e9 1e 01 00 00       	jmp    c000577e <f_expand+0x163>
c0005660:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005664:	75 f0                	jne    c0005656 <f_expand+0x3b>
c0005666:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000566a:	74 ea                	je     c0005656 <f_expand+0x3b>
c000566c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005670:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005674:	c1 e7 09             	shl    edi,0x9
c0005677:	8d 47 ff             	lea    eax,[edi-0x1]
c000567a:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000567e:	0f 95 c0             	setne  al
c0005681:	31 d2                	xor    edx,edx
c0005683:	0f b6 c0             	movzx  eax,al
c0005686:	89 c5                	mov    ebp,eax
c0005688:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000568c:	f7 f7                	div    edi
c000568e:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005691:	01 e8                	add    eax,ebp
c0005693:	83 ff 01             	cmp    edi,0x1
c0005696:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000569a:	76 05                	jbe    c00056a1 <f_expand+0x86>
c000569c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000569f:	77 05                	ja     c00056a6 <f_expand+0x8b>
c00056a1:	bf 02 00 00 00       	mov    edi,0x2
c00056a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00056a9:	89 fd                	mov    ebp,edi
c00056ab:	31 c9                	xor    ecx,ecx
c00056ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00056b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00056b3:	89 ea                	mov    edx,ebp
c00056b5:	45                   	inc    ebp
c00056b6:	e8 da de ff ff       	call   c0003595 <get_fat.isra.2>
c00056bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00056bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00056c3:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00056c6:	77 05                	ja     c00056cd <f_expand+0xb2>
c00056c8:	bd 02 00 00 00       	mov    ebp,0x2
c00056cd:	83 f8 01             	cmp    eax,0x1
c00056d0:	74 20                	je     c00056f2 <f_expand+0xd7>
c00056d2:	83 f8 ff             	cmp    eax,0xffffffff
c00056d5:	74 25                	je     c00056fc <f_expand+0xe1>
c00056d7:	85 c0                	test   eax,eax
c00056d9:	75 09                	jne    c00056e4 <f_expand+0xc9>
c00056db:	41                   	inc    ecx
c00056dc:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00056e0:	75 07                	jne    c00056e9 <f_expand+0xce>
c00056e2:	eb 1f                	jmp    c0005703 <f_expand+0xe8>
c00056e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00056e7:	31 c9                	xor    ecx,ecx
c00056e9:	39 fd                	cmp    ebp,edi
c00056eb:	75 c0                	jne    c00056ad <f_expand+0x92>
c00056ed:	e9 64 ff ff ff       	jmp    c0005656 <f_expand+0x3b>
c00056f2:	be 02 00 00 00       	mov    esi,0x2
c00056f7:	e9 82 00 00 00       	jmp    c000577e <f_expand+0x163>
c00056fc:	be 01 00 00 00       	mov    esi,0x1
c0005701:	eb 7b                	jmp    c000577e <f_expand+0x163>
c0005703:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005708:	74 2b                	je     c0005735 <f_expand+0x11a>
c000570a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000570d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005711:	85 ed                	test   ebp,ebp
c0005713:	74 24                	je     c0005739 <f_expand+0x11e>
c0005715:	83 c9 ff             	or     ecx,0xffffffff
c0005718:	83 fd 01             	cmp    ebp,0x1
c000571b:	74 03                	je     c0005720 <f_expand+0x105>
c000571d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005724:	89 fa                	mov    edx,edi
c0005726:	e8 e7 d3 ff ff       	call   c0002b12 <put_fat>
c000572b:	85 c0                	test   eax,eax
c000572d:	75 4d                	jne    c000577c <f_expand+0x161>
c000572f:	89 f8                	mov    eax,edi
c0005731:	4d                   	dec    ebp
c0005732:	47                   	inc    edi
c0005733:	eb dc                	jmp    c0005711 <f_expand+0xf6>
c0005735:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005738:	48                   	dec    eax
c0005739:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000573d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005742:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005745:	74 37                	je     c000577e <f_expand+0x163>
c0005747:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000574a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000574d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005751:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005754:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005757:	83 c8 40             	or     eax,0x40
c000575a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000575d:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005760:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005763:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005766:	39 c8                	cmp    eax,ecx
c0005768:	77 14                	ja     c000577e <f_expand+0x163>
c000576a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000576e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005771:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005774:	83 c8 01             	or     eax,0x1
c0005777:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000577a:	eb 02                	jmp    c000577e <f_expand+0x163>
c000577c:	89 c6                	mov    esi,eax
c000577e:	83 c4 2c             	add    esp,0x2c
c0005781:	89 f0                	mov    eax,esi
c0005783:	5b                   	pop    ebx
c0005784:	5e                   	pop    esi
c0005785:	5f                   	pop    edi
c0005786:	5d                   	pop    ebp
c0005787:	c3                   	ret    

c0005788 <f_mkfs>:
c0005788:	55                   	push   ebp
c0005789:	57                   	push   edi
c000578a:	56                   	push   esi
c000578b:	be 0b 00 00 00       	mov    esi,0xb
c0005790:	53                   	push   ebx
c0005791:	83 ec 5c             	sub    esp,0x5c
c0005794:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005798:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000579c:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c00057a0:	e8 1e ce ff ff       	call   c00025c3 <get_ldnumber>
c00057a5:	85 c0                	test   eax,eax
c00057a7:	0f 88 e0 07 00 00    	js     c0005f8d <f_mkfs+0x805>
c00057ad:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c00057b4:	85 d2                	test   edx,edx
c00057b6:	74 03                	je     c00057bb <f_mkfs+0x33>
c00057b8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00057bb:	85 db                	test   ebx,ebx
c00057bd:	75 05                	jne    c00057c4 <f_mkfs+0x3c>
c00057bf:	bb c0 fa 02 c0       	mov    ebx,0xc002fac0
c00057c4:	0f b6 c0             	movzx  eax,al
c00057c7:	83 ec 0c             	sub    esp,0xc
c00057ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057ce:	be 03 00 00 00       	mov    esi,0x3
c00057d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057d7:	e8 29 c9 ff ff       	call   c0002105 <disk_initialize>
c00057dc:	83 c4 10             	add    esp,0x10
c00057df:	a8 01                	test   al,0x1
c00057e1:	0f 85 a6 07 00 00    	jne    c0005f8d <f_mkfs+0x805>
c00057e7:	a8 04                	test   al,0x4
c00057e9:	be 0a 00 00 00       	mov    esi,0xa
c00057ee:	0f 85 99 07 00 00    	jne    c0005f8d <f_mkfs+0x805>
c00057f4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00057f7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00057fb:	85 c0                	test   eax,eax
c00057fd:	75 20                	jne    c000581f <f_mkfs+0x97>
c00057ff:	51                   	push   ecx
c0005800:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005804:	50                   	push   eax
c0005805:	6a 03                	push   0x3
c0005807:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000580b:	e8 24 c9 ff ff       	call   c0002134 <disk_ioctl>
c0005810:	83 c4 10             	add    esp,0x10
c0005813:	85 c0                	test   eax,eax
c0005815:	74 08                	je     c000581f <f_mkfs+0x97>
c0005817:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000581f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005823:	8d 42 ff             	lea    eax,[edx-0x1]
c0005826:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000582b:	77 04                	ja     c0005831 <f_mkfs+0xa9>
c000582d:	85 c2                	test   edx,eax
c000582f:	74 08                	je     c0005839 <f_mkfs+0xb1>
c0005831:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005839:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000583c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005840:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005844:	48                   	dec    eax
c0005845:	3c 01                	cmp    al,0x1
c0005847:	76 05                	jbe    c000584e <f_mkfs+0xc6>
c0005849:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000584e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005851:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005855:	48                   	dec    eax
c0005856:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000585b:	77 15                	ja     c0005872 <f_mkfs+0xea>
c000585d:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c0005862:	b8 00 02 00 00       	mov    eax,0x200
c0005867:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c000586c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005870:	eb 08                	jmp    c000587a <f_mkfs+0xf2>
c0005872:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c000587a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000587d:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005883:	77 0f                	ja     c0005894 <f_mkfs+0x10c>
c0005885:	8d 47 ff             	lea    eax,[edi-0x1]
c0005888:	85 f8                	test   eax,edi
c000588a:	b8 00 00 00 00       	mov    eax,0x0
c000588f:	0f 45 f8             	cmovne edi,eax
c0005892:	eb 02                	jmp    c0005896 <f_mkfs+0x10e>
c0005894:	31 ff                	xor    edi,edi
c0005896:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000589e:	77 0a                	ja     c00058aa <f_mkfs+0x122>
c00058a0:	be 11 00 00 00       	mov    esi,0x11
c00058a5:	e9 e3 06 00 00       	jmp    c0005f8d <f_mkfs+0x805>
c00058aa:	85 ed                	test   ebp,ebp
c00058ac:	8b 33                	mov    esi,DWORD PTR [ebx]
c00058ae:	89 eb                	mov    ebx,ebp
c00058b0:	75 1e                	jne    c00058d0 <f_mkfs+0x148>
c00058b2:	83 ec 0c             	sub    esp,0xc
c00058b5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00058bc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00058c1:	50                   	push   eax
c00058c2:	e8 d1 06 00 00       	call   c0005f98 <ff_memalloc>
c00058c7:	83 c4 10             	add    esp,0x10
c00058ca:	85 c0                	test   eax,eax
c00058cc:	89 c3                	mov    ebx,eax
c00058ce:	74 d0                	je     c00058a0 <f_mkfs+0x118>
c00058d0:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c00058d8:	52                   	push   edx
c00058d9:	8d 44 24 48          	lea    eax,[esp+0x48]
c00058dd:	50                   	push   eax
c00058de:	6a 01                	push   0x1
c00058e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00058e4:	e8 4b c8 ff ff       	call   c0002134 <disk_ioctl>
c00058e9:	83 c4 10             	add    esp,0x10
c00058ec:	85 c0                	test   eax,eax
c00058ee:	0f 85 42 06 00 00    	jne    c0005f36 <f_mkfs+0x7ae>
c00058f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00058fc:	89 f0                	mov    eax,esi
c00058fe:	83 e0 08             	and    eax,0x8
c0005901:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005905:	75 18                	jne    c000591f <f_mkfs+0x197>
c0005907:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000590b:	83 f8 3f             	cmp    eax,0x3f
c000590e:	76 0f                	jbe    c000591f <f_mkfs+0x197>
c0005910:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c0005918:	83 e8 3f             	sub    eax,0x3f
c000591b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000591f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005923:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005927:	83 f8 7f             	cmp    eax,0x7f
c000592a:	0f 86 5f 02 00 00    	jbe    c0005b8f <f_mkfs+0x407>
c0005930:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005936:	b9 80 00 00 00       	mov    ecx,0x80
c000593b:	77 05                	ja     c0005942 <f_mkfs+0x1ba>
c000593d:	c1 ef 09             	shr    edi,0x9
c0005940:	89 f9                	mov    ecx,edi
c0005942:	89 f0                	mov    eax,esi
c0005944:	89 f7                	mov    edi,esi
c0005946:	83 e0 01             	and    eax,0x1
c0005949:	83 e7 02             	and    edi,0x2
c000594c:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005950:	0f b6 c0             	movzx  eax,al
c0005953:	74 0a                	je     c000595f <f_mkfs+0x1d7>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 84 53 01 00 00    	je     c0005ab0 <f_mkfs+0x328>
c000595d:	eb 37                	jmp    c0005996 <f_mkfs+0x20e>
c000595f:	85 c0                	test   eax,eax
c0005961:	be 13 00 00 00       	mov    esi,0x13
c0005966:	75 2e                	jne    c0005996 <f_mkfs+0x20e>
c0005968:	e9 e0 05 00 00       	jmp    c0005f4d <f_mkfs+0x7c5>
c000596d:	83 f8 02             	cmp    eax,0x2
c0005970:	0f 85 11 02 00 00    	jne    c0005b87 <f_mkfs+0x3ff>
c0005976:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c000597c:	0f 86 e8 01 00 00    	jbe    c0005b6a <f_mkfs+0x3e2>
c0005982:	85 c9                	test   ecx,ecx
c0005984:	0f 85 d5 05 00 00    	jne    c0005f5f <f_mkfs+0x7d7>
c000598a:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000598d:	83 f9 40             	cmp    ecx,0x40
c0005990:	0f 87 d9 05 00 00    	ja     c0005f6f <f_mkfs+0x7e7>
c0005996:	85 c9                	test   ecx,ecx
c0005998:	89 cf                	mov    edi,ecx
c000599a:	75 1c                	jne    c00059b8 <f_mkfs+0x230>
c000599c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00059a0:	b8 a0 fa 02 c0       	mov    eax,0xc002faa0
c00059a5:	bf 01 00 00 00       	mov    edi,0x1
c00059aa:	c1 ee 0c             	shr    esi,0xc
c00059ad:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	0f 85 67 01 00 00    	jne    c0005b1f <f_mkfs+0x397>
c00059b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00059bc:	31 d2                	xor    edx,edx
c00059be:	f7 f7                	div    edi
c00059c0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00059c5:	0f 86 66 01 00 00    	jbe    c0005b31 <f_mkfs+0x3a9>
c00059cb:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c00059d0:	83 c0 02             	add    eax,0x2
c00059d3:	01 c0                	add    eax,eax
c00059d5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00059dd:	05 ff 01 00 00       	add    eax,0x1ff
c00059e2:	c1 e8 09             	shr    eax,0x9
c00059e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ed:	c1 e0 05             	shl    eax,0x5
c00059f0:	c1 e8 09             	shr    eax,0x9
c00059f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00059f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00059fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005a08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005a0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a10:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005a15:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005a19:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005a1d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005a21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005a25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005a29:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005a2d:	f7 d8                	neg    eax
c0005a2f:	21 c6                	and    esi,eax
c0005a31:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a36:	29 d6                	sub    esi,edx
c0005a38:	83 f8 03             	cmp    eax,0x3
c0005a3b:	0f 85 03 01 00 00    	jne    c0005b44 <f_mkfs+0x3bc>
c0005a41:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005a45:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005a49:	89 f8                	mov    eax,edi
c0005a4b:	c1 e0 04             	shl    eax,0x4
c0005a4e:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c0005a52:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005a56:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005a5a:	0f 82 2f 01 00 00    	jb     c0005b8f <f_mkfs+0x407>
c0005a60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a64:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005a68:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005a6c:	89 c2                	mov    edx,eax
c0005a6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a72:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005a77:	29 c2                	sub    edx,eax
c0005a79:	89 d0                	mov    eax,edx
c0005a7b:	31 d2                	xor    edx,edx
c0005a7d:	f7 f7                	div    edi
c0005a7f:	89 c6                	mov    esi,eax
c0005a81:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a86:	83 f8 03             	cmp    eax,0x3
c0005a89:	0f 85 de fe ff ff    	jne    c000596d <f_mkfs+0x1e5>
c0005a8f:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005a95:	0f 87 03 01 00 00    	ja     c0005b9e <f_mkfs+0x416>
c0005a9b:	85 c9                	test   ecx,ecx
c0005a9d:	0f 85 ec 00 00 00    	jne    c0005b8f <f_mkfs+0x407>
c0005aa3:	83 ff 01             	cmp    edi,0x1
c0005aa6:	0f 86 e3 00 00 00    	jbe    c0005b8f <f_mkfs+0x407>
c0005aac:	d1 ef                	shr    edi,1
c0005aae:	89 f9                	mov    ecx,edi
c0005ab0:	85 c9                	test   ecx,ecx
c0005ab2:	89 ce                	mov    esi,ecx
c0005ab4:	75 25                	jne    c0005adb <f_mkfs+0x353>
c0005ab6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005aba:	b8 b0 fa 02 c0       	mov    eax,0xc002fab0
c0005abf:	b9 01 00 00 00       	mov    ecx,0x1
c0005ac4:	c1 ee 11             	shr    esi,0x11
c0005ac7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005aca:	85 d2                	test   edx,edx
c0005acc:	74 0b                	je     c0005ad9 <f_mkfs+0x351>
c0005ace:	83 c0 02             	add    eax,0x2
c0005ad1:	39 f2                	cmp    edx,esi
c0005ad3:	77 04                	ja     c0005ad9 <f_mkfs+0x351>
c0005ad5:	01 c9                	add    ecx,ecx
c0005ad7:	eb ee                	jmp    c0005ac7 <f_mkfs+0x33f>
c0005ad9:	31 f6                	xor    esi,esi
c0005adb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005adf:	31 d2                	xor    edx,edx
c0005ae1:	f7 f1                	div    ecx
c0005ae3:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005aea:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005aef:	c1 ea 09             	shr    edx,0x9
c0005af2:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005af7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005afb:	0f 87 8e 00 00 00    	ja     c0005b8f <f_mkfs+0x407>
c0005b01:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005b09:	89 cf                	mov    edi,ecx
c0005b0b:	89 f1                	mov    ecx,esi
c0005b0d:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005b15:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005b1a:	e9 d8 fe ff ff       	jmp    c00059f7 <f_mkfs+0x26f>
c0005b1f:	83 c0 02             	add    eax,0x2
c0005b22:	39 f2                	cmp    edx,esi
c0005b24:	0f 87 8e fe ff ff    	ja     c00059b8 <f_mkfs+0x230>
c0005b2a:	01 ff                	add    edi,edi
c0005b2c:	e9 7c fe ff ff       	jmp    c00059ad <f_mkfs+0x225>
c0005b31:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b36:	8d 04 40             	lea    eax,[eax+eax*2]
c0005b39:	40                   	inc    eax
c0005b3a:	d1 e8                	shr    eax,1
c0005b3c:	83 c0 03             	add    eax,0x3
c0005b3f:	e9 91 fe ff ff       	jmp    c00059d5 <f_mkfs+0x24d>
c0005b44:	31 d2                	xor    edx,edx
c0005b46:	89 f0                	mov    eax,esi
c0005b48:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b4c:	85 d2                	test   edx,edx
c0005b4e:	74 09                	je     c0005b59 <f_mkfs+0x3d1>
c0005b50:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005b54:	4e                   	dec    esi
c0005b55:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005b59:	89 f0                	mov    eax,esi
c0005b5b:	31 d2                	xor    edx,edx
c0005b5d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b61:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005b65:	e9 df fe ff ff       	jmp    c0005a49 <f_mkfs+0x2c1>
c0005b6a:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b70:	77 2c                	ja     c0005b9e <f_mkfs+0x416>
c0005b72:	85 c9                	test   ecx,ecx
c0005b74:	75 19                	jne    c0005b8f <f_mkfs+0x407>
c0005b76:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005b79:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b7f:	0f 86 11 fe ff ff    	jbe    c0005996 <f_mkfs+0x20e>
c0005b85:	eb 08                	jmp    c0005b8f <f_mkfs+0x407>
c0005b87:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b8d:	76 0a                	jbe    c0005b99 <f_mkfs+0x411>
c0005b8f:	be 0e 00 00 00       	mov    esi,0xe
c0005b94:	e9 b4 03 00 00       	jmp    c0005f4d <f_mkfs+0x7c5>
c0005b99:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b9e:	31 d2                	xor    edx,edx
c0005ba0:	b9 00 02 00 00       	mov    ecx,0x200
c0005ba5:	89 d8                	mov    eax,ebx
c0005ba7:	e8 e8 c5 ff ff       	call   c0002194 <mem_set>
c0005bac:	b9 0b 00 00 00       	mov    ecx,0xb
c0005bb1:	ba 4e fa 02 c0       	mov    edx,0xc002fa4e
c0005bb6:	89 d8                	mov    eax,ebx
c0005bb8:	e8 c2 c5 ff ff       	call   c000217f <mem_cpy>
c0005bbd:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005bc0:	ba 00 02 00 00       	mov    edx,0x200
c0005bc5:	e8 ae c5 ff ff       	call   c0002178 <st_word>
c0005bca:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005bcf:	89 f8                	mov    eax,edi
c0005bd1:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005bd4:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005bd7:	e8 9c c5 ff ff       	call   c0002178 <st_word>
c0005bdc:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005be0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005be3:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005be8:	83 f8 03             	cmp    eax,0x3
c0005beb:	b8 00 00 00 00       	mov    eax,0x0
c0005bf0:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bf9:	8d 43 11             	lea    eax,[ebx+0x11]
c0005bfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005c00:	e8 73 c5 ff ff       	call   c0002178 <st_word>
c0005c05:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005c09:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005c0f:	77 0a                	ja     c0005c1b <f_mkfs+0x493>
c0005c11:	8d 43 13             	lea    eax,[ebx+0x13]
c0005c14:	e8 5f c5 ff ff       	call   c0002178 <st_word>
c0005c19:	eb 08                	jmp    c0005c23 <f_mkfs+0x49b>
c0005c1b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005c1e:	e8 59 c5 ff ff       	call   c000217c <st_dword>
c0005c23:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005c27:	8d 43 18             	lea    eax,[ebx+0x18]
c0005c2a:	ba 3f 00 00 00       	mov    edx,0x3f
c0005c2f:	e8 44 c5 ff ff       	call   c0002178 <st_word>
c0005c34:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005c37:	ba ff 00 00 00       	mov    edx,0xff
c0005c3c:	e8 37 c5 ff ff       	call   c0002178 <st_word>
c0005c41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c45:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005c48:	e8 2f c5 ff ff       	call   c000217c <st_dword>
c0005c4d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c52:	83 f8 03             	cmp    eax,0x3
c0005c55:	75 57                	jne    c0005cae <f_mkfs+0x526>
c0005c57:	8d 43 43             	lea    eax,[ebx+0x43]
c0005c5a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c5f:	e8 18 c5 ff ff       	call   c000217c <st_dword>
c0005c64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005c68:	8d 43 24             	lea    eax,[ebx+0x24]
c0005c6b:	e8 0c c5 ff ff       	call   c000217c <st_dword>
c0005c70:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005c73:	ba 02 00 00 00       	mov    edx,0x2
c0005c78:	e8 ff c4 ff ff       	call   c000217c <st_dword>
c0005c7d:	8d 43 30             	lea    eax,[ebx+0x30]
c0005c80:	ba 01 00 00 00       	mov    edx,0x1
c0005c85:	e8 ee c4 ff ff       	call   c0002178 <st_word>
c0005c8a:	8d 43 32             	lea    eax,[ebx+0x32]
c0005c8d:	ba 06 00 00 00       	mov    edx,0x6
c0005c92:	e8 e1 c4 ff ff       	call   c0002178 <st_word>
c0005c97:	8d 43 47             	lea    eax,[ebx+0x47]
c0005c9a:	b9 13 00 00 00       	mov    ecx,0x13
c0005c9f:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005ca3:	ba 5a fa 02 c0       	mov    edx,0xc002fa5a
c0005ca8:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005cac:	eb 2f                	jmp    c0005cdd <f_mkfs+0x555>
c0005cae:	8d 43 27             	lea    eax,[ebx+0x27]
c0005cb1:	ba 00 00 21 50       	mov    edx,0x50210000
c0005cb6:	e8 c1 c4 ff ff       	call   c000217c <st_dword>
c0005cbb:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005cc0:	8d 43 16             	lea    eax,[ebx+0x16]
c0005cc3:	e8 b0 c4 ff ff       	call   c0002178 <st_word>
c0005cc8:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005ccb:	b9 13 00 00 00       	mov    ecx,0x13
c0005cd0:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005cd4:	ba 6e fa 02 c0       	mov    edx,0xc002fa6e
c0005cd9:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005cdd:	e8 9d c4 ff ff       	call   c000217f <mem_cpy>
c0005ce2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005ce8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005ced:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cf1:	e8 82 c4 ff ff       	call   c0002178 <st_word>
c0005cf6:	6a 01                	push   0x1
c0005cf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cfc:	53                   	push   ebx
c0005cfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d01:	e8 18 c4 ff ff       	call   c000211e <disk_write>
c0005d06:	83 c4 10             	add    esp,0x10
c0005d09:	85 c0                	test   eax,eax
c0005d0b:	0f 85 25 02 00 00    	jne    c0005f36 <f_mkfs+0x7ae>
c0005d11:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d16:	83 f8 03             	cmp    eax,0x3
c0005d19:	0f 85 98 00 00 00    	jne    c0005db7 <f_mkfs+0x62f>
c0005d1f:	6a 01                	push   0x1
c0005d21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d25:	83 c0 06             	add    eax,0x6
c0005d28:	50                   	push   eax
c0005d29:	53                   	push   ebx
c0005d2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d2e:	e8 eb c3 ff ff       	call   c000211e <disk_write>
c0005d33:	b9 00 02 00 00       	mov    ecx,0x200
c0005d38:	31 d2                	xor    edx,edx
c0005d3a:	89 d8                	mov    eax,ebx
c0005d3c:	e8 53 c4 ff ff       	call   c0002194 <mem_set>
c0005d41:	ba 52 52 61 41       	mov    edx,0x41615252
c0005d46:	89 d8                	mov    eax,ebx
c0005d48:	e8 2f c4 ff ff       	call   c000217c <st_dword>
c0005d4d:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005d53:	ba 72 72 41 61       	mov    edx,0x61417272
c0005d58:	e8 1f c4 ff ff       	call   c000217c <st_dword>
c0005d5d:	8d 56 ff             	lea    edx,[esi-0x1]
c0005d60:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005d66:	e8 11 c4 ff ff       	call   c000217c <st_dword>
c0005d6b:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005d71:	ba 02 00 00 00       	mov    edx,0x2
c0005d76:	e8 01 c4 ff ff       	call   c000217c <st_dword>
c0005d7b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005d81:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005d86:	e8 ed c3 ff ff       	call   c0002178 <st_word>
c0005d8b:	6a 01                	push   0x1
c0005d8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005d91:	83 c0 07             	add    eax,0x7
c0005d94:	50                   	push   eax
c0005d95:	53                   	push   ebx
c0005d96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005d9a:	e8 7f c3 ff ff       	call   c000211e <disk_write>
c0005d9f:	83 c4 20             	add    esp,0x20
c0005da2:	6a 01                	push   0x1
c0005da4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005da8:	40                   	inc    eax
c0005da9:	50                   	push   eax
c0005daa:	53                   	push   ebx
c0005dab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005daf:	e8 6a c3 ff ff       	call   c000211e <disk_write>
c0005db4:	83 c4 10             	add    esp,0x10
c0005db7:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005dbb:	31 d2                	xor    edx,edx
c0005dbd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005dc1:	c1 e8 09             	shr    eax,0x9
c0005dc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc8:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005dce:	89 d8                	mov    eax,ebx
c0005dd0:	e8 bf c3 ff ff       	call   c0002194 <mem_set>
c0005dd5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005dda:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005ddf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005de7:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005dec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005df0:	83 f8 01             	cmp    eax,0x1
c0005df3:	0f 44 d1             	cmove  edx,ecx
c0005df6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005dfa:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005dff:	75 21                	jne    c0005e22 <f_mkfs+0x69a>
c0005e01:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005e06:	89 d8                	mov    eax,ebx
c0005e08:	e8 6f c3 ff ff       	call   c000217c <st_dword>
c0005e0d:	8d 43 04             	lea    eax,[ebx+0x4]
c0005e10:	83 ca ff             	or     edx,0xffffffff
c0005e13:	e8 64 c3 ff ff       	call   c000217c <st_dword>
c0005e18:	8d 43 08             	lea    eax,[ebx+0x8]
c0005e1b:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005e20:	eb 06                	jmp    c0005e28 <f_mkfs+0x6a0>
c0005e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005e26:	89 d8                	mov    eax,ebx
c0005e28:	e8 4f c3 ff ff       	call   c000217c <st_dword>
c0005e2d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e35:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005e39:	0f 46 c6             	cmovbe eax,esi
c0005e3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005e40:	50                   	push   eax
c0005e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e45:	53                   	push   ebx
c0005e46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e4a:	e8 cf c2 ff ff       	call   c000211e <disk_write>
c0005e4f:	83 c4 10             	add    esp,0x10
c0005e52:	85 c0                	test   eax,eax
c0005e54:	0f 85 dc 00 00 00    	jne    c0005f36 <f_mkfs+0x7ae>
c0005e5a:	b9 00 02 00 00       	mov    ecx,0x200
c0005e5f:	31 d2                	xor    edx,edx
c0005e61:	89 d8                	mov    eax,ebx
c0005e63:	e8 2c c3 ff ff       	call   c0002194 <mem_set>
c0005e68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005e6c:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005e70:	29 ce                	sub    esi,ecx
c0005e72:	75 bd                	jne    c0005e31 <f_mkfs+0x6a9>
c0005e74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e78:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005e80:	40                   	inc    eax
c0005e81:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005e85:	0f 87 6f ff ff ff    	ja     c0005dfa <f_mkfs+0x672>
c0005e8b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e90:	83 f8 03             	cmp    eax,0x3
c0005e93:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005e98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e9c:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005ea0:	0f 46 f7             	cmovbe esi,edi
c0005ea3:	56                   	push   esi
c0005ea4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ea8:	53                   	push   ebx
c0005ea9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ead:	e8 6c c2 ff ff       	call   c000211e <disk_write>
c0005eb2:	83 c4 10             	add    esp,0x10
c0005eb5:	85 c0                	test   eax,eax
c0005eb7:	75 7d                	jne    c0005f36 <f_mkfs+0x7ae>
c0005eb9:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005ebd:	29 f7                	sub    edi,esi
c0005ebf:	75 d7                	jne    c0005e98 <f_mkfs+0x710>
c0005ec1:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ec6:	b9 0c 00 00 00       	mov    ecx,0xc
c0005ecb:	83 f8 03             	cmp    eax,0x3
c0005ece:	74 1e                	je     c0005eee <f_mkfs+0x766>
c0005ed0:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005ed8:	b9 06 00 00 00       	mov    ecx,0x6
c0005edd:	77 0f                	ja     c0005eee <f_mkfs+0x766>
c0005edf:	83 f8 02             	cmp    eax,0x2
c0005ee2:	b9 04 00 00 00       	mov    ecx,0x4
c0005ee7:	74 05                	je     c0005eee <f_mkfs+0x766>
c0005ee9:	b9 01 00 00 00       	mov    ecx,0x1
c0005eee:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005ef3:	75 2a                	jne    c0005f1f <f_mkfs+0x797>
c0005ef5:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005efd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005f01:	83 ec 0c             	sub    esp,0xc
c0005f04:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005f08:	53                   	push   ebx
c0005f09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f0d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005f11:	e8 87 d2 ff ff       	call   c000319d <create_partition>
c0005f16:	83 c4 10             	add    esp,0x10
c0005f19:	85 c0                	test   eax,eax
c0005f1b:	89 c6                	mov    esi,eax
c0005f1d:	75 2e                	jne    c0005f4d <f_mkfs+0x7c5>
c0005f1f:	50                   	push   eax
c0005f20:	31 f6                	xor    esi,esi
c0005f22:	6a 00                	push   0x0
c0005f24:	6a 00                	push   0x0
c0005f26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005f2a:	e8 05 c2 ff ff       	call   c0002134 <disk_ioctl>
c0005f2f:	83 c4 10             	add    esp,0x10
c0005f32:	85 c0                	test   eax,eax
c0005f34:	74 17                	je     c0005f4d <f_mkfs+0x7c5>
c0005f36:	85 ed                	test   ebp,ebp
c0005f38:	75 0c                	jne    c0005f46 <f_mkfs+0x7be>
c0005f3a:	83 ec 0c             	sub    esp,0xc
c0005f3d:	53                   	push   ebx
c0005f3e:	e8 6d 00 00 00       	call   c0005fb0 <ff_memfree>
c0005f43:	83 c4 10             	add    esp,0x10
c0005f46:	be 01 00 00 00       	mov    esi,0x1
c0005f4b:	eb 40                	jmp    c0005f8d <f_mkfs+0x805>
c0005f4d:	85 ed                	test   ebp,ebp
c0005f4f:	75 3c                	jne    c0005f8d <f_mkfs+0x805>
c0005f51:	83 ec 0c             	sub    esp,0xc
c0005f54:	53                   	push   ebx
c0005f55:	e8 56 00 00 00       	call   c0005fb0 <ff_memfree>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	eb 2e                	jmp    c0005f8d <f_mkfs+0x805>
c0005f5f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f64:	0f 85 46 fb ff ff    	jne    c0005ab0 <f_mkfs+0x328>
c0005f6a:	e9 20 fc ff ff       	jmp    c0005b8f <f_mkfs+0x407>
c0005f6f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f74:	0f 85 3c fb ff ff    	jne    c0005ab6 <f_mkfs+0x32e>
c0005f7a:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005f80:	89 cf                	mov    edi,ecx
c0005f82:	0f 86 30 fa ff ff    	jbe    c00059b8 <f_mkfs+0x230>
c0005f88:	e9 02 fc ff ff       	jmp    c0005b8f <f_mkfs+0x407>
c0005f8d:	83 c4 5c             	add    esp,0x5c
c0005f90:	89 f0                	mov    eax,esi
c0005f92:	5b                   	pop    ebx
c0005f93:	5e                   	pop    esi
c0005f94:	5f                   	pop    edi
c0005f95:	5d                   	pop    ebp
c0005f96:	c3                   	ret    
c0005f97:	90                   	nop

c0005f98 <ff_memalloc>:
c0005f98:	83 ec 0c             	sub    esp,0xc
c0005f9b:	83 ec 0c             	sub    esp,0xc
c0005f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fa2:	e8 f5 06 01 00       	call   c001669c <malloc>
c0005fa7:	83 c4 10             	add    esp,0x10
c0005faa:	83 c4 0c             	add    esp,0xc
c0005fad:	c3                   	ret    
c0005fae:	66 90                	xchg   ax,ax

c0005fb0 <ff_memfree>:
c0005fb0:	83 ec 0c             	sub    esp,0xc
c0005fb3:	83 ec 0c             	sub    esp,0xc
c0005fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fba:	e8 ed 06 01 00       	call   c00166ac <free>
c0005fbf:	83 c4 10             	add    esp,0x10
c0005fc2:	90                   	nop
c0005fc3:	83 c4 0c             	add    esp,0xc
c0005fc6:	c3                   	ret    
c0005fc7:	90                   	nop

c0005fc8 <ff_uni2oem>:
c0005fc8:	83 ec 14             	sub    esp,0x14
c0005fcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fcf:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005fd3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fda:	c7 44 24 0c a0 fe 02 c0 	mov    DWORD PTR [esp+0xc],0xc002fea0
c0005fe2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005fe7:	77 0b                	ja     c0005ff4 <ff_uni2oem+0x2c>
c0005fe9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ff2:	eb 64                	jmp    c0006058 <ff_uni2oem+0x90>
c0005ff4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ffc:	77 5a                	ja     c0006058 <ff_uni2oem+0x90>
c0005ffe:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0006002:	3d b5 01 00 00       	cmp    eax,0x1b5
c0006007:	75 4f                	jne    c0006058 <ff_uni2oem+0x90>
c0006009:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0006010:	eb 12                	jmp    c0006024 <ff_uni2oem+0x5c>
c0006012:	66 90                	xchg   ax,ax
c0006014:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006019:	83 c0 01             	add    eax,0x1
c000601c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006021:	8d 76 00             	lea    esi,[esi+0x0]
c0006024:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006029:	83 f8 7f             	cmp    eax,0x7f
c000602c:	77 1a                	ja     c0006048 <ff_uni2oem+0x80>
c000602e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006033:	8d 14 00             	lea    edx,[eax+eax*1]
c0006036:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000603a:	01 d0                	add    eax,edx
c000603c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000603f:	0f b7 c0             	movzx  eax,ax
c0006042:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006046:	75 cc                	jne    c0006014 <ff_uni2oem+0x4c>
c0006048:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000604d:	83 e8 80             	sub    eax,0xffffff80
c0006050:	0f b6 c0             	movzx  eax,al
c0006053:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006058:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000605d:	83 c4 14             	add    esp,0x14
c0006060:	c3                   	ret    
c0006061:	8d 76 00             	lea    esi,[esi+0x0]

c0006064 <ff_oem2uni>:
c0006064:	83 ec 18             	sub    esp,0x18
c0006067:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000606b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000606f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0006074:	66 89 04 24          	mov    WORD PTR [esp],ax
c0006078:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000607f:	c7 44 24 10 a0 fe 02 c0 	mov    DWORD PTR [esp+0x10],0xc002fea0
c0006087:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000608c:	83 f8 7f             	cmp    eax,0x7f
c000608f:	77 0b                	ja     c000609c <ff_oem2uni+0x38>
c0006091:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006095:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000609a:	eb 34                	jmp    c00060d0 <ff_oem2uni+0x6c>
c000609c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00060a0:	3d b5 01 00 00       	cmp    eax,0x1b5
c00060a5:	75 29                	jne    c00060d0 <ff_oem2uni+0x6c>
c00060a7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060ac:	3d ff 00 00 00       	cmp    eax,0xff
c00060b1:	77 1d                	ja     c00060d0 <ff_oem2uni+0x6c>
c00060b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060b8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00060bd:	8d 14 00             	lea    edx,[eax+eax*1]
c00060c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060c4:	01 d0                	add    eax,edx
c00060c6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060c9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00060ce:	66 90                	xchg   ax,ax
c00060d0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00060d5:	83 c4 18             	add    esp,0x18
c00060d8:	c3                   	ret    
c00060d9:	8d 76 00             	lea    esi,[esi+0x0]

c00060dc <ff_wtoupper>:
c00060dc:	83 ec 10             	sub    esp,0x10
c00060df:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00060e7:	0f 87 a7 01 00 00    	ja     c0006294 <ff_wtoupper+0x1b8>
c00060ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060f1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060f6:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060fb:	3d ff 0f 00 00       	cmp    eax,0xfff
c0006100:	77 0a                	ja     c000610c <ff_wtoupper+0x30>
c0006102:	b8 a0 fc 02 c0       	mov    eax,0xc002fca0
c0006107:	eb 0b                	jmp    c0006114 <ff_wtoupper+0x38>
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	b8 e0 fb 02 c0       	mov    eax,0xc002fbe0
c0006111:	8d 76 00             	lea    esi,[esi+0x0]
c0006114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000611c:	8d 50 02             	lea    edx,[eax+0x2]
c000611f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006123:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006126:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000612b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006130:	85 c0                	test   eax,eax
c0006132:	0f 84 50 01 00 00    	je     c0006288 <ff_wtoupper+0x1ac>
c0006138:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000613d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006142:	39 c2                	cmp    edx,eax
c0006144:	0f 82 3e 01 00 00    	jb     c0006288 <ff_wtoupper+0x1ac>
c000614a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000614e:	8d 50 02             	lea    edx,[eax+0x2]
c0006151:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006155:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006158:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000615d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006162:	c1 e8 08             	shr    eax,0x8
c0006165:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000616a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000616f:	0f b6 c0             	movzx  eax,al
c0006172:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006177:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000617c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0006181:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006186:	01 ca                	add    edx,ecx
c0006188:	39 d0                	cmp    eax,edx
c000618a:	0f 8d d4 00 00 00    	jge    c0006264 <ff_wtoupper+0x188>
c0006190:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006195:	83 f8 08             	cmp    eax,0x8
c0006198:	0f 87 e6 00 00 00    	ja     c0006284 <ff_wtoupper+0x1a8>
c000619e:	8b 04 85 a0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0460]
c00061a5:	ff e0                	jmp    eax
c00061a7:	90                   	nop
c00061a8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00061ad:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00061b2:	29 c2                	sub    edx,eax
c00061b4:	89 d0                	mov    eax,edx
c00061b6:	8d 14 00             	lea    edx,[eax+eax*1]
c00061b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061bd:	01 d0                	add    eax,edx
c00061bf:	66 8b 00             	mov    ax,WORD PTR [eax]
c00061c2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061c7:	e9 94 00 00 00       	jmp    c0006260 <ff_wtoupper+0x184>
c00061cc:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00061d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061d5:	89 d1                	mov    ecx,edx
c00061d7:	29 c1                	sub    ecx,eax
c00061d9:	89 c8                	mov    eax,ecx
c00061db:	83 e0 01             	and    eax,0x1
c00061de:	89 c2                	mov    edx,eax
c00061e0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061e5:	29 d0                	sub    eax,edx
c00061e7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061ec:	eb 72                	jmp    c0006260 <ff_wtoupper+0x184>
c00061ee:	66 90                	xchg   ax,ax
c00061f0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061f5:	83 e8 10             	sub    eax,0x10
c00061f8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061fd:	eb 61                	jmp    c0006260 <ff_wtoupper+0x184>
c00061ff:	90                   	nop
c0006200:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006205:	83 e8 20             	sub    eax,0x20
c0006208:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000620d:	eb 51                	jmp    c0006260 <ff_wtoupper+0x184>
c000620f:	90                   	nop
c0006210:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006215:	83 e8 30             	sub    eax,0x30
c0006218:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000621d:	eb 41                	jmp    c0006260 <ff_wtoupper+0x184>
c000621f:	90                   	nop
c0006220:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006225:	83 e8 1a             	sub    eax,0x1a
c0006228:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000622d:	eb 31                	jmp    c0006260 <ff_wtoupper+0x184>
c000622f:	90                   	nop
c0006230:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006235:	83 c0 08             	add    eax,0x8
c0006238:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000623d:	eb 21                	jmp    c0006260 <ff_wtoupper+0x184>
c000623f:	90                   	nop
c0006240:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006245:	83 e8 50             	sub    eax,0x50
c0006248:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000624d:	eb 11                	jmp    c0006260 <ff_wtoupper+0x184>
c000624f:	90                   	nop
c0006250:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006255:	2d 60 1c 00 00       	sub    eax,0x1c60
c000625a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000625f:	90                   	nop
c0006260:	eb 22                	jmp    c0006284 <ff_wtoupper+0x1a8>
c0006262:	66 90                	xchg   ax,ax
c0006264:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006269:	85 c0                	test   eax,eax
c000626b:	0f 85 a7 fe ff ff    	jne    c0006118 <ff_wtoupper+0x3c>
c0006271:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006276:	d1 e0                	shl    eax,1
c0006278:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000627c:	e9 97 fe ff ff       	jmp    c0006118 <ff_wtoupper+0x3c>
c0006281:	8d 76 00             	lea    esi,[esi+0x0]
c0006284:	90                   	nop
c0006285:	8d 76 00             	lea    esi,[esi+0x0]
c0006288:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000628d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006291:	8d 76 00             	lea    esi,[esi+0x0]
c0006294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006298:	83 c4 10             	add    esp,0x10
c000629b:	c3                   	ret    

c000629c <utf2ucs>:
c000629c:	57                   	push   edi
c000629d:	31 c9                	xor    ecx,ecx
c000629f:	56                   	push   esi
c00062a0:	89 d7                	mov    edi,edx
c00062a2:	53                   	push   ebx
c00062a3:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c00062a7:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c00062ab:	89 de                	mov    esi,ebx
c00062ad:	c1 fe 08             	sar    esi,0x8
c00062b0:	89 f2                	mov    edx,esi
c00062b2:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c00062b5:	41                   	inc    ecx
c00062b6:	85 db                	test   ebx,ebx
c00062b8:	75 e9                	jne    c00062a3 <utf2ucs+0x7>
c00062ba:	5b                   	pop    ebx
c00062bb:	5e                   	pop    esi
c00062bc:	5f                   	pop    edi
c00062bd:	c3                   	ret    

c00062be <ucs2utfn>:
c00062be:	83 e1 fe             	and    ecx,0xfffffffe
c00062c1:	01 d1                	add    ecx,edx
c00062c3:	39 d1                	cmp    ecx,edx
c00062c5:	75 04                	jne    c00062cb <ucs2utfn+0xd>
c00062c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00062ca:	c3                   	ret    
c00062cb:	57                   	push   edi
c00062cc:	56                   	push   esi
c00062cd:	53                   	push   ebx
c00062ce:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c00062d1:	83 c2 02             	add    edx,0x2
c00062d4:	89 de                	mov    esi,ebx
c00062d6:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c00062da:	c1 e6 08             	shl    esi,0x8
c00062dd:	09 f3                	or     ebx,esi
c00062df:	83 fb 3b             	cmp    ebx,0x3b
c00062e2:	74 50                	je     c0006334 <ucs2utfn+0x76>
c00062e4:	83 fb 7f             	cmp    ebx,0x7f
c00062e7:	7f 05                	jg     c00062ee <ucs2utfn+0x30>
c00062e9:	88 18                	mov    BYTE PTR [eax],bl
c00062eb:	40                   	inc    eax
c00062ec:	eb 42                	jmp    c0006330 <ucs2utfn+0x72>
c00062ee:	89 df                	mov    edi,ebx
c00062f0:	89 de                	mov    esi,ebx
c00062f2:	c1 fe 06             	sar    esi,0x6
c00062f5:	83 e7 3f             	and    edi,0x3f
c00062f8:	83 cf 80             	or     edi,0xffffff80
c00062fb:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006301:	7f 12                	jg     c0006315 <ucs2utfn+0x57>
c0006303:	83 ce c0             	or     esi,0xffffffc0
c0006306:	83 c0 02             	add    eax,0x2
c0006309:	89 f3                	mov    ebx,esi
c000630b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000630e:	89 fb                	mov    ebx,edi
c0006310:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006313:	eb 1b                	jmp    c0006330 <ucs2utfn+0x72>
c0006315:	c1 fb 0c             	sar    ebx,0xc
c0006318:	83 e6 3f             	and    esi,0x3f
c000631b:	83 cb e0             	or     ebx,0xffffffe0
c000631e:	83 ce 80             	or     esi,0xffffff80
c0006321:	88 18                	mov    BYTE PTR [eax],bl
c0006323:	89 f3                	mov    ebx,esi
c0006325:	83 c0 03             	add    eax,0x3
c0006328:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000632b:	89 fb                	mov    ebx,edi
c000632d:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006330:	39 d1                	cmp    ecx,edx
c0006332:	75 9a                	jne    c00062ce <ucs2utfn+0x10>
c0006334:	5b                   	pop    ebx
c0006335:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006338:	5e                   	pop    esi
c0006339:	5f                   	pop    edi
c000633a:	c3                   	ret    

c000633b <isjoliet>:
c000633b:	31 d2                	xor    edx,edx
c000633d:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0006340:	75 26                	jne    c0006368 <isjoliet+0x2d>
c0006342:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006346:	75 20                	jne    c0006368 <isjoliet+0x2d>
c0006348:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c000634c:	ba 02 00 00 00       	mov    edx,0x2
c0006351:	83 f8 43             	cmp    eax,0x43
c0006354:	74 12                	je     c0006368 <isjoliet+0x2d>
c0006356:	83 f8 45             	cmp    eax,0x45
c0006359:	ba 03 00 00 00       	mov    edx,0x3
c000635e:	74 08                	je     c0006368 <isjoliet+0x2d>
c0006360:	31 d2                	xor    edx,edx
c0006362:	83 f8 40             	cmp    eax,0x40
c0006365:	0f 94 c2             	sete   dl
c0006368:	89 d0                	mov    eax,edx
c000636a:	c3                   	ret    

c000636b <htohl_32>:
c000636b:	8b 00                	mov    eax,DWORD PTR [eax]
c000636d:	c3                   	ret    

c000636e <iso_733>:
c000636e:	eb fb                	jmp    c000636b <htohl_32>

c0006370 <bgrad_cache>:
c0006370:	83 fa 0e             	cmp    edx,0xe
c0006373:	77 16                	ja     c000638b <bgrad_cache+0x1b>
c0006375:	53                   	push   ebx
c0006376:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006379:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000637d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006380:	42                   	inc    edx
c0006381:	83 fa 0f             	cmp    edx,0xf
c0006384:	75 f3                	jne    c0006379 <bgrad_cache+0x9>
c0006386:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006389:	5b                   	pop    ebx
c000638a:	c3                   	ret    
c000638b:	c3                   	ret    

c000638c <ucscompare>:
c000638c:	55                   	push   ebp
c000638d:	57                   	push   edi
c000638e:	89 c7                	mov    edi,eax
c0006390:	56                   	push   esi
c0006391:	89 d6                	mov    esi,edx
c0006393:	53                   	push   ebx
c0006394:	31 d2                	xor    edx,edx
c0006396:	83 ec 1c             	sub    esp,0x1c
c0006399:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000639d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c00063a2:	c1 e3 08             	shl    ebx,0x8
c00063a5:	09 c3                	or     ebx,eax
c00063a7:	39 ca                	cmp    edx,ecx
c00063a9:	7d 42                	jge    c00063ed <ucscompare+0x61>
c00063ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00063af:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c00063b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00063b7:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c00063bc:	c1 e0 08             	shl    eax,0x8
c00063bf:	09 e8                	or     eax,ebp
c00063c1:	83 f8 3b             	cmp    eax,0x3b
c00063c4:	74 27                	je     c00063ed <ucscompare+0x61>
c00063c6:	83 ec 0c             	sub    esp,0xc
c00063c9:	50                   	push   eax
c00063ca:	e8 b1 a5 ff ff       	call   c0000980 <tolower>
c00063cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00063d2:	89 c5                	mov    ebp,eax
c00063d4:	e8 a7 a5 ff ff       	call   c0000980 <tolower>
c00063d9:	83 c4 10             	add    esp,0x10
c00063dc:	39 c5                	cmp    ebp,eax
c00063de:	75 20                	jne    c0006400 <ucscompare+0x74>
c00063e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00063e8:	83 c2 02             	add    edx,0x2
c00063eb:	eb ac                	jmp    c0006399 <ucscompare+0xd>
c00063ed:	83 fb 2f             	cmp    ebx,0x2f
c00063f0:	0f 95 c2             	setne  dl
c00063f3:	31 c0                	xor    eax,eax
c00063f5:	85 db                	test   ebx,ebx
c00063f7:	0f 95 c0             	setne  al
c00063fa:	21 d0                	and    eax,edx
c00063fc:	f7 d8                	neg    eax
c00063fe:	eb 03                	jmp    c0006403 <ucscompare+0x77>
c0006400:	83 c8 ff             	or     eax,0xffffffff
c0006403:	83 c4 1c             	add    esp,0x1c
c0006406:	5b                   	pop    ebx
c0006407:	5e                   	pop    esi
c0006408:	5f                   	pop    edi
c0006409:	5d                   	pop    ebp
c000640a:	c3                   	ret    

c000640b <fncompare>:
c000640b:	55                   	push   ebp
c000640c:	57                   	push   edi
c000640d:	89 c7                	mov    edi,eax
c000640f:	56                   	push   esi
c0006410:	89 ce                	mov    esi,ecx
c0006412:	53                   	push   ebx
c0006413:	31 db                	xor    ebx,ebx
c0006415:	83 ec 1c             	sub    esp,0x1c
c0006418:	39 d3                	cmp    ebx,edx
c000641a:	7d 45                	jge    c0006461 <fncompare+0x56>
c000641c:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006420:	83 f8 3b             	cmp    eax,0x3b
c0006423:	74 3c                	je     c0006461 <fncompare+0x56>
c0006425:	83 f8 2e             	cmp    eax,0x2e
c0006428:	75 0e                	jne    c0006438 <fncompare+0x2d>
c000642a:	8d 4a ff             	lea    ecx,[edx-0x1]
c000642d:	39 d9                	cmp    ecx,ebx
c000642f:	74 30                	je     c0006461 <fncompare+0x56>
c0006431:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006436:	74 29                	je     c0006461 <fncompare+0x56>
c0006438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000643c:	83 ec 0c             	sub    esp,0xc
c000643f:	50                   	push   eax
c0006440:	e8 3b a5 ff ff       	call   c0000980 <tolower>
c0006445:	89 c5                	mov    ebp,eax
c0006447:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c000644b:	89 04 24             	mov    DWORD PTR [esp],eax
c000644e:	e8 2d a5 ff ff       	call   c0000980 <tolower>
c0006453:	83 c4 10             	add    esp,0x10
c0006456:	39 c5                	cmp    ebp,eax
c0006458:	75 1e                	jne    c0006478 <fncompare+0x6d>
c000645a:	43                   	inc    ebx
c000645b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645f:	eb b7                	jmp    c0006418 <fncompare+0xd>
c0006461:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006465:	83 fa 2f             	cmp    edx,0x2f
c0006468:	0f 95 c1             	setne  cl
c000646b:	31 c0                	xor    eax,eax
c000646d:	85 d2                	test   edx,edx
c000646f:	0f 95 c0             	setne  al
c0006472:	21 c8                	and    eax,ecx
c0006474:	f7 d8                	neg    eax
c0006476:	eb 03                	jmp    c000647b <fncompare+0x70>
c0006478:	83 c8 ff             	or     eax,0xffffffff
c000647b:	83 c4 1c             	add    esp,0x1c
c000647e:	5b                   	pop    ebx
c000647f:	5e                   	pop    esi
c0006480:	5f                   	pop    edi
c0006481:	5d                   	pop    ebp
c0006482:	c3                   	ret    

c0006483 <bclear_cache>:
c0006483:	83 ec 18             	sub    esp,0x18
c0006486:	68 a0 ff 02 c0       	push   0xc002ffa0
c000648b:	e8 14 33 02 00       	call   c00297a4 <iso_kprintf>
c0006490:	83 c4 10             	add    esp,0x10
c0006493:	31 c0                	xor    eax,eax
c0006495:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c000649c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00064a2:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c00064a9:	40                   	inc    eax
c00064aa:	83 f8 10             	cmp    eax,0x10
c00064ad:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00064b3:	75 e0                	jne    c0006495 <bclear_cache+0x12>
c00064b5:	83 c4 0c             	add    esp,0xc
c00064b8:	c3                   	ret    

c00064b9 <bclear>:
c00064b9:	eb c8                	jmp    c0006483 <bclear_cache>

c00064bb <iso_break_all>:
c00064bb:	83 ec 18             	sub    esp,0x18
c00064be:	68 ae ff 02 c0       	push   0xc002ffae
c00064c3:	e8 dc 32 02 00       	call   c00297a4 <iso_kprintf>
c00064c8:	83 c4 10             	add    esp,0x10
c00064cb:	31 c0                	xor    eax,eax
c00064cd:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c00064d7:	05 94 00 00 00       	add    eax,0x94
c00064dc:	3d 40 09 00 00       	cmp    eax,0x940
c00064e1:	75 ea                	jne    c00064cd <iso_break_all+0x12>
c00064e3:	83 c4 0c             	add    esp,0xc
c00064e6:	c3                   	ret    

c00064e7 <isoReadDiscSector>:
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c00064f1:	50                   	push   eax
c00064f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064fe:	e8 45 32 02 00       	call   c0029748 <isoReadDiscSectorHelper>
c0006503:	83 c4 1c             	add    esp,0x1c
c0006506:	c3                   	ret    

c0006507 <bread_cache>:
c0006507:	55                   	push   ebp
c0006508:	57                   	push   edi
c0006509:	89 d7                	mov    edi,edx
c000650b:	56                   	push   esi
c000650c:	ba 0f 00 00 00       	mov    edx,0xf
c0006511:	53                   	push   ebx
c0006512:	89 c6                	mov    esi,eax
c0006514:	83 ec 0c             	sub    esp,0xc
c0006517:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000651a:	39 38                	cmp    DWORD PTR [eax],edi
c000651c:	74 3c                	je     c000655a <bread_cache+0x53>
c000651e:	4a                   	dec    edx
c000651f:	83 fa ff             	cmp    edx,0xffffffff
c0006522:	75 f3                	jne    c0006517 <bread_cache+0x10>
c0006524:	31 db                	xor    ebx,ebx
c0006526:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006529:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000652c:	74 08                	je     c0006536 <bread_cache+0x2f>
c000652e:	43                   	inc    ebx
c000652f:	83 fb 10             	cmp    ebx,0x10
c0006532:	75 f2                	jne    c0006526 <bread_cache+0x1f>
c0006534:	31 db                	xor    ebx,ebx
c0006536:	50                   	push   eax
c0006537:	6a 01                	push   0x1
c0006539:	57                   	push   edi
c000653a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000653d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006540:	83 c0 04             	add    eax,0x4
c0006543:	50                   	push   eax
c0006544:	e8 9e ff ff ff       	call   c00064e7 <isoReadDiscSector>
c0006549:	83 c4 10             	add    esp,0x10
c000654c:	83 c9 ff             	or     ecx,0xffffffff
c000654f:	85 c0                	test   eax,eax
c0006551:	78 13                	js     c0006566 <bread_cache+0x5f>
c0006553:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006556:	89 da                	mov    edx,ebx
c0006558:	89 38                	mov    DWORD PTR [eax],edi
c000655a:	89 f0                	mov    eax,esi
c000655c:	e8 0f fe ff ff       	call   c0006370 <bgrad_cache>
c0006561:	b9 0f 00 00 00       	mov    ecx,0xf
c0006566:	83 c4 0c             	add    esp,0xc
c0006569:	89 c8                	mov    eax,ecx
c000656b:	5b                   	pop    ebx
c000656c:	5e                   	pop    esi
c000656d:	5f                   	pop    edi
c000656e:	5d                   	pop    ebp
c000656f:	c3                   	ret    

c0006570 <biread>:
c0006570:	89 c2                	mov    edx,eax
c0006572:	b8 80 60 03 c0       	mov    eax,0xc0036080
c0006577:	eb 8e                	jmp    c0006507 <bread_cache>

c0006579 <bdread>:
c0006579:	89 c2                	mov    edx,eax
c000657b:	b8 20 60 03 c0       	mov    eax,0xc0036020
c0006580:	eb 85                	jmp    c0006507 <bread_cache>

c0006582 <strnicmp>:
c0006582:	55                   	push   ebp
c0006583:	57                   	push   edi
c0006584:	31 ff                	xor    edi,edi
c0006586:	56                   	push   esi
c0006587:	53                   	push   ebx
c0006588:	83 ec 0c             	sub    esp,0xc
c000658b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000658f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006593:	74 43                	je     c00065d8 <strnicmp+0x56>
c0006595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006599:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000659d:	85 c0                	test   eax,eax
c000659f:	74 37                	je     c00065d8 <strnicmp+0x56>
c00065a1:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c00065a5:	85 d2                	test   edx,edx
c00065a7:	74 2f                	je     c00065d8 <strnicmp+0x56>
c00065a9:	8d 6f 01             	lea    ebp,[edi+0x1]
c00065ac:	39 d0                	cmp    eax,edx
c00065ae:	75 04                	jne    c00065b4 <strnicmp+0x32>
c00065b0:	89 ef                	mov    edi,ebp
c00065b2:	eb db                	jmp    c000658f <strnicmp+0xd>
c00065b4:	83 ec 0c             	sub    esp,0xc
c00065b7:	50                   	push   eax
c00065b8:	e8 c3 a3 ff ff       	call   c0000980 <tolower>
c00065bd:	89 c3                	mov    ebx,eax
c00065bf:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c00065c3:	89 ef                	mov    edi,ebp
c00065c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00065c8:	e8 b3 a3 ff ff       	call   c0000980 <tolower>
c00065cd:	83 c4 10             	add    esp,0x10
c00065d0:	29 c3                	sub    ebx,eax
c00065d2:	89 d8                	mov    eax,ebx
c00065d4:	74 b9                	je     c000658f <strnicmp+0xd>
c00065d6:	eb 02                	jmp    c00065da <strnicmp+0x58>
c00065d8:	31 c0                	xor    eax,eax
c00065da:	83 c4 0c             	add    esp,0xc
c00065dd:	5b                   	pop    ebx
c00065de:	5e                   	pop    esi
c00065df:	5f                   	pop    edi
c00065e0:	5d                   	pop    ebp
c00065e1:	c3                   	ret    

c00065e2 <find_object>:
c00065e2:	55                   	push   ebp
c00065e3:	57                   	push   edi
c00065e4:	89 c7                	mov    edi,eax
c00065e6:	56                   	push   esi
c00065e7:	53                   	push   ebx
c00065e8:	89 d3                	mov    ebx,edx
c00065ea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00065f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00065f4:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00065fb:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006602:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006606:	74 0b                	je     c0006613 <find_object+0x31>
c0006608:	8d 44 24 20          	lea    eax,[esp+0x20]
c000660c:	89 fa                	mov    edx,edi
c000660e:	e8 89 fc ff ff       	call   c000629c <utf2ucs>
c0006613:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006616:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000661a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000661f:	7e 11                	jle    c0006632 <find_object+0x50>
c0006621:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006625:	e8 46 ff ff ff       	call   c0006570 <biread>
c000662a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000662e:	85 c0                	test   eax,eax
c0006630:	79 07                	jns    c0006639 <find_object+0x57>
c0006632:	31 db                	xor    ebx,ebx
c0006634:	e9 47 01 00 00       	jmp    c0006780 <find_object+0x19e>
c0006639:	31 ed                	xor    ebp,ebp
c000663b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000663f:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006646:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c000664a:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c000664d:	85 f6                	test   esi,esi
c000664f:	75 0e                	jne    c000665f <find_object+0x7d>
c0006651:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006655:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c000665d:	eb bb                	jmp    c000661a <find_object+0x38>
c000665f:	8b 0d 94 76 03 c0    	mov    ecx,DWORD PTR ds:0xc0037694
c0006665:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006669:	85 c9                	test   ecx,ecx
c000666b:	89 d0                	mov    eax,edx
c000666d:	74 2b                	je     c000669a <find_object+0xb8>
c000666f:	8d 43 21             	lea    eax,[ebx+0x21]
c0006672:	89 d1                	mov    ecx,edx
c0006674:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006678:	e8 0f fd ff ff       	call   c000638c <ucscompare>
c000667d:	85 c0                	test   eax,eax
c000667f:	0f 84 cd 00 00 00    	je     c0006752 <find_object+0x170>
c0006685:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006688:	01 c5                	add    ebp,eax
c000668a:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c0006690:	7f bf                	jg     c0006651 <find_object+0x6f>
c0006692:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006696:	7f a3                	jg     c000663b <find_object+0x59>
c0006698:	eb b7                	jmp    c0006651 <find_object+0x6f>
c000669a:	29 d6                	sub    esi,edx
c000669c:	a8 01                	test   al,0x1
c000669e:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c00066a2:	74 05                	je     c00066a9 <find_object+0xc7>
c00066a4:	83 ee 21             	sub    esi,0x21
c00066a7:	eb 6a                	jmp    c0006713 <find_object+0x131>
c00066a9:	42                   	inc    edx
c00066aa:	83 ee 22             	sub    esi,0x22
c00066ad:	eb 64                	jmp    c0006713 <find_object+0x131>
c00066af:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00066b2:	48                   	dec    eax
c00066b3:	3c 01                	cmp    al,0x1
c00066b5:	77 61                	ja     c0006718 <find_object+0x136>
c00066b7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00066bb:	50                   	push   eax
c00066bc:	6a 02                	push   0x2
c00066be:	68 bd ff 02 c0       	push   0xc002ffbd
c00066c3:	52                   	push   edx
c00066c4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00066c8:	e8 43 a1 ff ff       	call   c0000810 <strncmp>
c00066cd:	83 c4 10             	add    esp,0x10
c00066d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00066d4:	85 c0                	test   eax,eax
c00066d6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00066da:	75 2f                	jne    c000670b <find_object+0x129>
c00066dc:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c00066e0:	50                   	push   eax
c00066e1:	8d 42 05             	lea    eax,[edx+0x5]
c00066e4:	83 e9 05             	sub    ecx,0x5
c00066e7:	51                   	push   ecx
c00066e8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00066ec:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00066f0:	50                   	push   eax
c00066f1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00066f5:	50                   	push   eax
c00066f6:	e8 95 9f ff ff       	call   c0000690 <strncpy>
c00066fb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00066ff:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c0006704:	83 c4 10             	add    esp,0x10
c0006707:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000670b:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000670f:	29 c6                	sub    esi,eax
c0006711:	01 c2                	add    edx,eax
c0006713:	83 fe 03             	cmp    esi,0x3
c0006716:	7f 97                	jg     c00066af <find_object+0xcd>
c0006718:	85 c9                	test   ecx,ecx
c000671a:	7e 40                	jle    c000675c <find_object+0x17a>
c000671c:	51                   	push   ecx
c000671d:	51                   	push   ecx
c000671e:	6a 2f                	push   0x2f
c0006720:	57                   	push   edi
c0006721:	e8 aa a0 ff ff       	call   c00007d0 <strchr>
c0006726:	83 c4 10             	add    esp,0x10
c0006729:	85 c0                	test   eax,eax
c000672b:	74 04                	je     c0006731 <find_object+0x14f>
c000672d:	29 f8                	sub    eax,edi
c000672f:	eb 0c                	jmp    c000673d <find_object+0x15b>
c0006731:	83 ec 0c             	sub    esp,0xc
c0006734:	57                   	push   edi
c0006735:	e8 46 9e ff ff       	call   c0000580 <strlen>
c000673a:	83 c4 10             	add    esp,0x10
c000673d:	52                   	push   edx
c000673e:	50                   	push   eax
c000673f:	57                   	push   edi
c0006740:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006744:	50                   	push   eax
c0006745:	e8 38 fe ff ff       	call   c0006582 <strnicmp>
c000674a:	83 c4 10             	add    esp,0x10
c000674d:	e9 2b ff ff ff       	jmp    c000667d <find_object+0x9b>
c0006752:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006756:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000675a:	eb 1e                	jmp    c000677a <find_object+0x198>
c000675c:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006760:	8d 43 21             	lea    eax,[ebx+0x21]
c0006763:	89 f9                	mov    ecx,edi
c0006765:	e8 a1 fc ff ff       	call   c000640b <fncompare>
c000676a:	85 c0                	test   eax,eax
c000676c:	0f 85 13 ff ff ff    	jne    c0006685 <find_object+0xa3>
c0006772:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006776:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000677a:	0f 85 05 ff ff ff    	jne    c0006685 <find_object+0xa3>
c0006780:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006786:	89 d8                	mov    eax,ebx
c0006788:	5b                   	pop    ebx
c0006789:	5e                   	pop    esi
c000678a:	5f                   	pop    edi
c000678b:	5d                   	pop    ebp
c000678c:	c3                   	ret    

c000678d <find_object_path>:
c000678d:	55                   	push   ebp
c000678e:	57                   	push   edi
c000678f:	89 d7                	mov    edi,edx
c0006791:	56                   	push   esi
c0006792:	89 c6                	mov    esi,eax
c0006794:	53                   	push   ebx
c0006795:	89 cb                	mov    ebx,ecx
c0006797:	83 ec 0c             	sub    esp,0xc
c000679a:	50                   	push   eax
c000679b:	50                   	push   eax
c000679c:	6a 2f                	push   0x2f
c000679e:	56                   	push   esi
c000679f:	e8 2c a0 ff ff       	call   c00007d0 <strchr>
c00067a4:	83 c4 10             	add    esp,0x10
c00067a7:	85 c0                	test   eax,eax
c00067a9:	89 c5                	mov    ebp,eax
c00067ab:	74 3a                	je     c00067e7 <find_object_path+0x5a>
c00067ad:	39 ee                	cmp    esi,ebp
c00067af:	74 31                	je     c00067e2 <find_object_path+0x55>
c00067b1:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067b4:	e8 b5 fb ff ff       	call   c000636e <iso_733>
c00067b9:	89 c2                	mov    edx,eax
c00067bb:	8d 43 02             	lea    eax,[ebx+0x2]
c00067be:	e8 ab fb ff ff       	call   c000636e <iso_733>
c00067c3:	83 ec 0c             	sub    esp,0xc
c00067c6:	52                   	push   edx
c00067c7:	89 c1                	mov    ecx,eax
c00067c9:	ba 01 00 00 00       	mov    edx,0x1
c00067ce:	89 f0                	mov    eax,esi
c00067d0:	e8 0d fe ff ff       	call   c00065e2 <find_object>
c00067d5:	83 c4 10             	add    esp,0x10
c00067d8:	85 c0                	test   eax,eax
c00067da:	89 c3                	mov    ebx,eax
c00067dc:	75 04                	jne    c00067e2 <find_object_path+0x55>
c00067de:	31 db                	xor    ebx,ebx
c00067e0:	eb 36                	jmp    c0006818 <find_object_path+0x8b>
c00067e2:	8d 75 01             	lea    esi,[ebp+0x1]
c00067e5:	eb b3                	jmp    c000679a <find_object_path+0xd>
c00067e7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067ea:	74 28                	je     c0006814 <find_object_path+0x87>
c00067ec:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067ef:	e8 7a fb ff ff       	call   c000636e <iso_733>
c00067f4:	89 c2                	mov    edx,eax
c00067f6:	8d 43 02             	lea    eax,[ebx+0x2]
c00067f9:	e8 70 fb ff ff       	call   c000636e <iso_733>
c00067fe:	83 ec 0c             	sub    esp,0xc
c0006801:	52                   	push   edx
c0006802:	89 c1                	mov    ecx,eax
c0006804:	89 fa                	mov    edx,edi
c0006806:	89 f0                	mov    eax,esi
c0006808:	e8 d5 fd ff ff       	call   c00065e2 <find_object>
c000680d:	83 c4 10             	add    esp,0x10
c0006810:	89 c3                	mov    ebx,eax
c0006812:	eb 04                	jmp    c0006818 <find_object_path+0x8b>
c0006814:	85 ff                	test   edi,edi
c0006816:	74 c6                	je     c00067de <find_object_path+0x51>
c0006818:	83 c4 0c             	add    esp,0xc
c000681b:	89 d8                	mov    eax,ebx
c000681d:	5b                   	pop    ebx
c000681e:	5e                   	pop    esi
c000681f:	5f                   	pop    edi
c0006820:	5d                   	pop    ebp
c0006821:	c3                   	ret    

c0006822 <stricmp>:
c0006822:	57                   	push   edi
c0006823:	56                   	push   esi
c0006824:	31 f6                	xor    esi,esi
c0006826:	53                   	push   ebx
c0006827:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682b:	83 ec 0c             	sub    esp,0xc
c000682e:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006832:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006836:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000683a:	46                   	inc    esi
c000683b:	50                   	push   eax
c000683c:	e8 1f a1 ff ff       	call   c0000960 <toupper>
c0006841:	89 04 24             	mov    DWORD PTR [esp],eax
c0006844:	e8 37 a1 ff ff       	call   c0000980 <tolower>
c0006849:	89 3c 24             	mov    DWORD PTR [esp],edi
c000684c:	89 c3                	mov    ebx,eax
c000684e:	e8 0d a1 ff ff       	call   c0000960 <toupper>
c0006853:	89 04 24             	mov    DWORD PTR [esp],eax
c0006856:	e8 25 a1 ff ff       	call   c0000980 <tolower>
c000685b:	83 c4 10             	add    esp,0x10
c000685e:	39 c3                	cmp    ebx,eax
c0006860:	75 04                	jne    c0006866 <stricmp+0x44>
c0006862:	85 db                	test   ebx,ebx
c0006864:	75 c1                	jne    c0006827 <stricmp+0x5>
c0006866:	29 c3                	sub    ebx,eax
c0006868:	89 d8                	mov    eax,ebx
c000686a:	5b                   	pop    ebx
c000686b:	5e                   	pop    esi
c000686c:	5f                   	pop    edi
c000686d:	c3                   	ret    

c000686e <iso_open>:
c000686e:	57                   	push   edi
c000686f:	31 c0                	xor    eax,eax
c0006871:	56                   	push   esi
c0006872:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c0006877:	53                   	push   ebx
c0006878:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000687d:	0f 95 c0             	setne  al
c0006880:	89 c2                	mov    edx,eax
c0006882:	89 c6                	mov    esi,eax
c0006884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006888:	e8 00 ff ff ff       	call   c000678d <find_object_path>
c000688d:	83 ca ff             	or     edx,0xffffffff
c0006890:	85 c0                	test   eax,eax
c0006892:	74 5e                	je     c00068f2 <iso_open+0x84>
c0006894:	89 c1                	mov    ecx,eax
c0006896:	31 d2                	xor    edx,edx
c0006898:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000689e:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c00068a5:	75 42                	jne    c00068e9 <iso_open+0x7b>
c00068a7:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c00068b1:	8d 41 02             	lea    eax,[ecx+0x2]
c00068b4:	e8 b5 fa ff ff       	call   c000636e <iso_733>
c00068b9:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c00068bf:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c00068c9:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c00068cf:	8d 41 0a             	lea    eax,[ecx+0xa]
c00068d2:	e8 97 fa ff ff       	call   c000636e <iso_733>
c00068d7:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c00068e1:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c00068e7:	eb 09                	jmp    c00068f2 <iso_open+0x84>
c00068e9:	42                   	inc    edx
c00068ea:	83 fa 10             	cmp    edx,0x10
c00068ed:	75 a9                	jne    c0006898 <iso_open+0x2a>
c00068ef:	83 ca ff             	or     edx,0xffffffff
c00068f2:	5b                   	pop    ebx
c00068f3:	89 d0                	mov    eax,edx
c00068f5:	5e                   	pop    esi
c00068f6:	5f                   	pop    edi
c00068f7:	c3                   	ret    

c00068f8 <iso_close>:
c00068f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068fc:	83 f8 0f             	cmp    eax,0xf
c00068ff:	7f 10                	jg     c0006911 <iso_close+0x19>
c0006901:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006907:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c0006911:	e9 6d fb ff ff       	jmp    c0006483 <bclear_cache>

c0006916 <iso_read>:
c0006916:	55                   	push   ebp
c0006917:	57                   	push   edi
c0006918:	56                   	push   esi
c0006919:	53                   	push   ebx
c000691a:	83 ec 1c             	sub    esp,0x1c
c000691d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006921:	83 fd 0f             	cmp    ebp,0xf
c0006924:	7e 0a                	jle    c0006930 <iso_read+0x1a>
c0006926:	83 c8 ff             	or     eax,0xffffffff
c0006929:	89 c2                	mov    edx,eax
c000692b:	e9 f4 00 00 00       	jmp    c0006a24 <iso_read+0x10e>
c0006930:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006936:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c000693d:	74 e7                	je     c0006926 <iso_read+0x10>
c000693f:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006945:	85 d2                	test   edx,edx
c0006947:	75 dd                	jne    c0006926 <iso_read+0x10>
c0006949:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000694e:	0f 84 cd 00 00 00    	je     c0006a21 <iso_read+0x10b>
c0006954:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000695a:	8b 9d 2c 6d 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffc92d4]
c0006960:	29 c3                	sub    ebx,eax
c0006962:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006966:	89 d9                	mov    ecx,ebx
c0006968:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c000696d:	85 c9                	test   ecx,ecx
c000696f:	0f 84 ac 00 00 00    	je     c0006a21 <iso_read+0x10b>
c0006975:	89 c6                	mov    esi,eax
c0006977:	bb 00 08 00 00       	mov    ebx,0x800
c000697c:	c1 e8 0b             	shr    eax,0xb
c000697f:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006985:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c000698b:	29 f3                	sub    ebx,esi
c000698d:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006993:	75 3f                	jne    c00069d4 <iso_read+0xbe>
c0006995:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000699b:	7e 37                	jle    c00069d4 <iso_read+0xbe>
c000699d:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00069a3:	be 20 00 00 00       	mov    esi,0x20
c00069a8:	7f 05                	jg     c00069af <iso_read+0x99>
c00069aa:	89 ce                	mov    esi,ecx
c00069ac:	c1 fe 0b             	sar    esi,0xb
c00069af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069b3:	89 f3                	mov    ebx,esi
c00069b5:	52                   	push   edx
c00069b6:	56                   	push   esi
c00069b7:	50                   	push   eax
c00069b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00069bc:	c1 e3 0b             	shl    ebx,0xb
c00069bf:	e8 23 fb ff ff       	call   c00064e7 <isoReadDiscSector>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	7f 3d                	jg     c0006a0c <iso_read+0xf6>
c00069cf:	e9 52 ff ff ff       	jmp    c0006926 <iso_read+0x10>
c00069d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069d8:	39 d9                	cmp    ecx,ebx
c00069da:	0f 4e d9             	cmovle ebx,ecx
c00069dd:	e8 97 fb ff ff       	call   c0006579 <bdread>
c00069e2:	85 c0                	test   eax,eax
c00069e4:	0f 88 3c ff ff ff    	js     c0006926 <iso_read+0x10>
c00069ea:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c00069f1:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00069f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00069fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006a00:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006a04:	89 d9                	mov    ecx,ebx
c0006a06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006a0c:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006a10:	01 da                	add    edx,ebx
c0006a12:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006a18:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006a1c:	e9 28 ff ff ff       	jmp    c0006949 <iso_read+0x33>
c0006a21:	89 d0                	mov    eax,edx
c0006a23:	99                   	cdq    
c0006a24:	83 c4 1c             	add    esp,0x1c
c0006a27:	5b                   	pop    ebx
c0006a28:	5e                   	pop    esi
c0006a29:	5f                   	pop    edi
c0006a2a:	5d                   	pop    ebp
c0006a2b:	c3                   	ret    

c0006a2c <iso_seek>:
c0006a2c:	55                   	push   ebp
c0006a2d:	83 c8 ff             	or     eax,0xffffffff
c0006a30:	57                   	push   edi
c0006a31:	89 c2                	mov    edx,eax
c0006a33:	56                   	push   esi
c0006a34:	53                   	push   ebx
c0006a35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a39:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006a3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006a41:	83 fe 0f             	cmp    esi,0xf
c0006a44:	7f 65                	jg     c0006aab <iso_seek+0x7f>
c0006a46:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006a4c:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006a53:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c0006a59:	74 50                	je     c0006aab <iso_seek+0x7f>
c0006a5b:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006a62:	75 47                	jne    c0006aab <iso_seek+0x7f>
c0006a64:	83 fb 01             	cmp    ebx,0x1
c0006a67:	74 0e                	je     c0006a77 <iso_seek+0x4b>
c0006a69:	83 fb 02             	cmp    ebx,0x2
c0006a6c:	74 0e                	je     c0006a7c <iso_seek+0x50>
c0006a6e:	85 db                	test   ebx,ebx
c0006a70:	75 39                	jne    c0006aab <iso_seek+0x7f>
c0006a72:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006a75:	eb 0d                	jmp    c0006a84 <iso_seek+0x58>
c0006a77:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006a7a:	eb 08                	jmp    c0006a84 <iso_seek+0x58>
c0006a7c:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006a7f:	01 f8                	add    eax,edi
c0006a81:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006a84:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006a8a:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006a90:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006a95:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006a98:	76 03                	jbe    c0006a9d <iso_seek+0x71>
c0006a9a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006a9d:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006aa3:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c0006aa9:	31 d2                	xor    edx,edx
c0006aab:	5b                   	pop    ebx
c0006aac:	5e                   	pop    esi
c0006aad:	5f                   	pop    edi
c0006aae:	5d                   	pop    ebp
c0006aaf:	c3                   	ret    

c0006ab0 <iso_tell>:
c0006ab0:	53                   	push   ebx
c0006ab1:	83 c8 ff             	or     eax,0xffffffff
c0006ab4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006ab8:	89 c2                	mov    edx,eax
c0006aba:	83 f9 0f             	cmp    ecx,0xf
c0006abd:	7f 20                	jg     c0006adf <iso_tell+0x2f>
c0006abf:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006ac5:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006acc:	74 11                	je     c0006adf <iso_tell+0x2f>
c0006ace:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006ad5:	75 08                	jne    c0006adf <iso_tell+0x2f>
c0006ad7:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006add:	31 d2                	xor    edx,edx
c0006adf:	5b                   	pop    ebx
c0006ae0:	c3                   	ret    

c0006ae1 <iso_total>:
c0006ae1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ae5:	83 c8 ff             	or     eax,0xffffffff
c0006ae8:	83 fa 0f             	cmp    edx,0xf
c0006aeb:	7f 1e                	jg     c0006b0b <iso_total+0x2a>
c0006aed:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006af3:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c0006afa:	74 0f                	je     c0006b0b <iso_total+0x2a>
c0006afc:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006b03:	75 06                	jne    c0006b0b <iso_total+0x2a>
c0006b05:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c0006b0b:	c3                   	ret    

c0006b0c <fn_postprocess>:
c0006b0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006b10:	89 d0                	mov    eax,edx
c0006b12:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006b15:	85 c9                	test   ecx,ecx
c0006b17:	74 08                	je     c0006b21 <fn_postprocess+0x15>
c0006b19:	83 f9 3b             	cmp    ecx,0x3b
c0006b1c:	74 03                	je     c0006b21 <fn_postprocess+0x15>
c0006b1e:	40                   	inc    eax
c0006b1f:	eb f1                	jmp    c0006b12 <fn_postprocess+0x6>
c0006b21:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006b24:	39 d0                	cmp    eax,edx
c0006b26:	76 0a                	jbe    c0006b32 <fn_postprocess+0x26>
c0006b28:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c0006b2c:	75 04                	jne    c0006b32 <fn_postprocess+0x26>
c0006b2e:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006b32:	c3                   	ret    

c0006b33 <iso_readdir>:
c0006b33:	55                   	push   ebp
c0006b34:	57                   	push   edi
c0006b35:	56                   	push   esi
c0006b36:	53                   	push   ebx
c0006b37:	83 ec 1c             	sub    esp,0x1c
c0006b3a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006b3e:	83 fb 0f             	cmp    ebx,0xf
c0006b41:	7f 28                	jg     c0006b6b <iso_readdir+0x38>
c0006b43:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b49:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c0006b50:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c0006b56:	74 13                	je     c0006b6b <iso_readdir+0x38>
c0006b58:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006b5c:	74 0d                	je     c0006b6b <iso_readdir+0x38>
c0006b5e:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006b65:	0f 84 b1 00 00 00    	je     c0006c1c <iso_readdir+0xe9>
c0006b6b:	83 ec 0c             	sub    esp,0xc
c0006b6e:	68 c0 ff 02 c0       	push   0xc002ffc0
c0006b73:	e8 2c 2c 02 00       	call   c00297a4 <iso_kprintf>
c0006b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b7b:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b81:	e8 3a 2c 02 00       	call   c00297c0 <iso_kprintfd>
c0006b86:	c7 04 24 c5 ff 02 c0 	mov    DWORD PTR [esp],0xc002ffc5
c0006b8d:	e8 12 2c 02 00       	call   c00297a4 <iso_kprintf>
c0006b92:	58                   	pop    eax
c0006b93:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006b99:	e8 22 2c 02 00       	call   c00297c0 <iso_kprintfd>
c0006b9e:	c7 04 24 cb ff 02 c0 	mov    DWORD PTR [esp],0xc002ffcb
c0006ba5:	e8 fa 2b 02 00       	call   c00297a4 <iso_kprintf>
c0006baa:	58                   	pop    eax
c0006bab:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006bb1:	e8 0a 2c 02 00       	call   c00297c0 <iso_kprintfd>
c0006bb6:	c7 04 24 d1 ff 02 c0 	mov    DWORD PTR [esp],0xc002ffd1
c0006bbd:	e8 e2 2b 02 00       	call   c00297a4 <iso_kprintf>
c0006bc2:	58                   	pop    eax
c0006bc3:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006bc9:	e8 f2 2b 02 00       	call   c00297c0 <iso_kprintfd>
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	eb 42                	jmp    c0006c15 <iso_readdir+0xe2>
c0006bd3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006bd6:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006bdd:	89 d1                	mov    ecx,edx
c0006bdf:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006be5:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006be9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006bec:	75 35                	jne    c0006c23 <iso_readdir+0xf0>
c0006bee:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006bf4:	81 c2 00 08 00 00    	add    edx,0x800
c0006bfa:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006bfd:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006c00:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006c03:	73 1e                	jae    c0006c23 <iso_readdir+0xf0>
c0006c05:	8b 07                	mov    eax,DWORD PTR [edi]
c0006c07:	c1 ea 0b             	shr    edx,0xb
c0006c0a:	01 d0                	add    eax,edx
c0006c0c:	e8 5f f9 ff ff       	call   c0006570 <biread>
c0006c11:	85 c0                	test   eax,eax
c0006c13:	79 be                	jns    c0006bd3 <iso_readdir+0xa0>
c0006c15:	31 c0                	xor    eax,eax
c0006c17:	e9 6a 01 00 00       	jmp    c0006d86 <iso_readdir+0x253>
c0006c1c:	31 f6                	xor    esi,esi
c0006c1e:	83 c8 ff             	or     eax,0xffffffff
c0006c21:	eb da                	jmp    c0006bfd <iso_readdir+0xca>
c0006c23:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006c29:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006c2f:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006c35:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006c38:	73 db                	jae    c0006c15 <iso_readdir+0xe2>
c0006c3a:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006c3e:	75 34                	jne    c0006c74 <iso_readdir+0x141>
c0006c40:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006c44:	75 2e                	jne    c0006c74 <iso_readdir+0x141>
c0006c46:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006c49:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006c50:	01 f9                	add    ecx,edi
c0006c52:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006c55:	89 c8                	mov    eax,ecx
c0006c57:	25 ff 07 00 00       	and    eax,0x7ff
c0006c5c:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006c61:	01 c8                	add    eax,ecx
c0006c63:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006c66:	25 ff 07 00 00       	and    eax,0x7ff
c0006c6b:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006c6f:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006c72:	74 a1                	je     c0006c15 <iso_readdir+0xe2>
c0006c74:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006c7a:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006c7e:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c85:	8d 56 21             	lea    edx,[esi+0x21]
c0006c88:	8d af 38 6d 03 c0    	lea    ebp,[edi-0x3ffc92c8]
c0006c8e:	74 0c                	je     c0006c9c <iso_readdir+0x169>
c0006c90:	89 e8                	mov    eax,ebp
c0006c92:	e8 27 f6 ff ff       	call   c00062be <ucs2utfn>
c0006c97:	e9 b1 00 00 00       	jmp    c0006d4d <iso_readdir+0x21a>
c0006c9c:	50                   	push   eax
c0006c9d:	51                   	push   ecx
c0006c9e:	52                   	push   edx
c0006c9f:	55                   	push   ebp
c0006ca0:	e8 eb 99 ff ff       	call   c0000690 <strncpy>
c0006ca5:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006ca9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006cac:	c6 84 07 38 6d 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffc92c8],0x0
c0006cb4:	e8 53 fe ff ff       	call   c0006b0c <fn_postprocess>
c0006cb9:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006cbd:	83 c4 10             	add    esp,0x10
c0006cc0:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006cc3:	89 d1                	mov    ecx,edx
c0006cc5:	29 d0                	sub    eax,edx
c0006cc7:	80 e1 01             	and    cl,0x1
c0006cca:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006cce:	74 05                	je     c0006cd5 <iso_readdir+0x1a2>
c0006cd0:	83 e8 21             	sub    eax,0x21
c0006cd3:	eb 04                	jmp    c0006cd9 <iso_readdir+0x1a6>
c0006cd5:	42                   	inc    edx
c0006cd6:	83 e8 22             	sub    eax,0x22
c0006cd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cdd:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006ce3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ce7:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006cec:	7e 5f                	jle    c0006d4d <iso_readdir+0x21a>
c0006cee:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006cf1:	48                   	dec    eax
c0006cf2:	3c 01                	cmp    al,0x1
c0006cf4:	77 57                	ja     c0006d4d <iso_readdir+0x21a>
c0006cf6:	51                   	push   ecx
c0006cf7:	6a 02                	push   0x2
c0006cf9:	68 bd ff 02 c0       	push   0xc002ffbd
c0006cfe:	52                   	push   edx
c0006cff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006d03:	e8 08 9b ff ff       	call   c0000810 <strncmp>
c0006d08:	83 c4 10             	add    esp,0x10
c0006d0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006d0f:	85 c0                	test   eax,eax
c0006d11:	75 2e                	jne    c0006d41 <iso_readdir+0x20e>
c0006d13:	50                   	push   eax
c0006d14:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006d18:	83 e8 05             	sub    eax,0x5
c0006d1b:	50                   	push   eax
c0006d1c:	8d 42 05             	lea    eax,[edx+0x5]
c0006d1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006d23:	50                   	push   eax
c0006d24:	55                   	push   ebp
c0006d25:	e8 66 99 ff ff       	call   c0000690 <strncpy>
c0006d2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006d2e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006d32:	83 c4 10             	add    esp,0x10
c0006d35:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006d39:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006d41:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006d45:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006d49:	01 c2                	add    edx,eax
c0006d4b:	eb 9a                	jmp    c0006ce7 <iso_readdir+0x1b4>
c0006d4d:	83 c8 ff             	or     eax,0xffffffff
c0006d50:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006d54:	89 c2                	mov    edx,eax
c0006d56:	75 0a                	jne    c0006d62 <iso_readdir+0x22f>
c0006d58:	8d 46 0a             	lea    eax,[esi+0xa]
c0006d5b:	e8 0e f6 ff ff       	call   c000636e <iso_733>
c0006d60:	31 d2                	xor    edx,edx
c0006d62:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006d68:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006d6e:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006d74:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006d7a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006d7d:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006d80:	8d 87 30 6d 03 c0    	lea    eax,[edi-0x3ffc92d0]
c0006d86:	83 c4 1c             	add    esp,0x1c
c0006d89:	5b                   	pop    ebx
c0006d8a:	5e                   	pop    esi
c0006d8b:	5f                   	pop    edi
c0006d8c:	5d                   	pop    ebp
c0006d8d:	c3                   	ret    

c0006d8e <iso_reset>:
c0006d8e:	83 ec 18             	sub    esp,0x18
c0006d91:	68 da ff 02 c0       	push   0xc002ffda
c0006d96:	e8 09 2a 02 00       	call   c00297a4 <iso_kprintf>
c0006d9b:	e8 1b f7 ff ff       	call   c00064bb <iso_break_all>
c0006da0:	e8 14 f7 ff ff       	call   c00064b9 <bclear>
c0006da5:	31 c0                	xor    eax,eax
c0006da7:	83 c4 1c             	add    esp,0x1c
c0006daa:	c3                   	ret    

c0006dab <init_percd>:
c0006dab:	57                   	push   edi
c0006dac:	56                   	push   esi
c0006dad:	53                   	push   ebx
c0006dae:	bb 01 00 00 00       	mov    ebx,0x1
c0006db3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006db7:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006dbc:	e8 cd ff ff ff       	call   c0006d8e <iso_reset>
c0006dc1:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006dcb:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006dd0:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006dd4:	e8 97 f7 ff ff       	call   c0006570 <biread>
c0006dd9:	85 c0                	test   eax,eax
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	0f 88 ba 00 00 00    	js     c0006e9d <init_percd+0xf2>
c0006de3:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006dea:	52                   	push   edx
c0006deb:	6a 06                	push   0x6
c0006ded:	68 e5 ff 02 c0       	push   0xc002ffe5
c0006df2:	83 c0 04             	add    eax,0x4
c0006df5:	50                   	push   eax
c0006df6:	e8 85 95 ff ff       	call   c0000380 <memcmp>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	74 08                	je     c0006e0a <init_percd+0x5f>
c0006e02:	43                   	inc    ebx
c0006e03:	83 fb 04             	cmp    ebx,0x4
c0006e06:	75 c3                	jne    c0006dcb <init_percd+0x20>
c0006e08:	eb 1a                	jmp    c0006e24 <init_percd+0x79>
c0006e0a:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006e11:	83 c0 5c             	add    eax,0x5c
c0006e14:	e8 22 f5 ff ff       	call   c000633b <isjoliet>
c0006e19:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006e1e:	85 c0                	test   eax,eax
c0006e20:	74 e0                	je     c0006e02 <init_percd+0x57>
c0006e22:	eb 3e                	jmp    c0006e62 <init_percd+0xb7>
c0006e24:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006e2b:	75 35                	jne    c0006e62 <init_percd+0xb7>
c0006e2d:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006e32:	83 c0 10             	add    eax,0x10
c0006e35:	e8 36 f7 ff ff       	call   c0006570 <biread>
c0006e3a:	85 c0                	test   eax,eax
c0006e3c:	89 c6                	mov    esi,eax
c0006e3e:	78 5f                	js     c0006e9f <init_percd+0xf4>
c0006e40:	50                   	push   eax
c0006e41:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006e48:	83 cb ff             	or     ebx,0xffffffff
c0006e4b:	6a 06                	push   0x6
c0006e4d:	68 ec ff 02 c0       	push   0xc002ffec
c0006e52:	83 c0 04             	add    eax,0x4
c0006e55:	50                   	push   eax
c0006e56:	e8 25 95 ff ff       	call   c0000380 <memcmp>
c0006e5b:	83 c4 10             	add    esp,0x10
c0006e5e:	85 c0                	test   eax,eax
c0006e60:	75 3d                	jne    c0006e9f <init_percd+0xf4>
c0006e62:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006e69:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006e6e:	b9 22 00 00 00       	mov    ecx,0x22
c0006e73:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006e79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006e7b:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006e80:	31 db                	xor    ebx,ebx
c0006e82:	e8 e7 f4 ff ff       	call   c000636e <iso_733>
c0006e87:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006e8c:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006e91:	e8 d8 f4 ff ff       	call   c000636e <iso_733>
c0006e96:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006e9b:	eb 02                	jmp    c0006e9f <init_percd+0xf4>
c0006e9d:	89 c3                	mov    ebx,eax
c0006e9f:	89 d8                	mov    eax,ebx
c0006ea1:	5b                   	pop    ebx
c0006ea2:	5e                   	pop    esi
c0006ea3:	5f                   	pop    edi
c0006ea4:	c3                   	ret    

c0006ea5 <iso_ioctl>:
c0006ea5:	83 ec 18             	sub    esp,0x18
c0006ea8:	68 f3 ff 02 c0       	push   0xc002fff3
c0006ead:	e8 f2 28 02 00       	call   c00297a4 <iso_kprintf>
c0006eb2:	e8 d7 fe ff ff       	call   c0006d8e <iso_reset>
c0006eb7:	31 c0                	xor    eax,eax
c0006eb9:	83 c4 1c             	add    esp,0x1c
c0006ebc:	c3                   	ret    

c0006ebd <fs_iso9660_init>:
c0006ebd:	53                   	push   ebx
c0006ebe:	31 db                	xor    ebx,ebx
c0006ec0:	83 ec 14             	sub    esp,0x14
c0006ec3:	68 fe ff 02 c0       	push   0xc002fffe
c0006ec8:	e8 d7 28 02 00       	call   c00297a4 <iso_kprintf>
c0006ecd:	83 c4 0c             	add    esp,0xc
c0006ed0:	68 40 09 00 00       	push   0x940
c0006ed5:	6a 00                	push   0x0
c0006ed7:	68 20 6d 03 c0       	push   0xc0036d20
c0006edc:	e8 0f 96 ff ff       	call   c00004f0 <memset>
c0006ee1:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006eeb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ef2:	e8 a5 f7 00 00       	call   c001669c <malloc>
c0006ef7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006efe:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006f03:	e8 94 f7 00 00       	call   c001669c <malloc>
c0006f08:	83 c4 10             	add    esp,0x10
c0006f0b:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	68 04 08 00 00       	push   0x804
c0006f18:	e8 7f f7 00 00       	call   c001669c <malloc>
c0006f1d:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006f24:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f2a:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006f31:	e8 66 f7 00 00       	call   c001669c <malloc>
c0006f36:	83 c4 10             	add    esp,0x10
c0006f39:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006f40:	43                   	inc    ebx
c0006f41:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f47:	83 fb 10             	cmp    ebx,0x10
c0006f4a:	75 c4                	jne    c0006f10 <fs_iso9660_init+0x53>
c0006f4c:	83 c4 08             	add    esp,0x8
c0006f4f:	31 c0                	xor    eax,eax
c0006f51:	5b                   	pop    ebx
c0006f52:	c3                   	ret    

c0006f53 <fs_iso9660_shutdown>:
c0006f53:	53                   	push   ebx
c0006f54:	31 db                	xor    ebx,ebx
c0006f56:	83 ec 08             	sub    esp,0x8
c0006f59:	83 ec 0c             	sub    esp,0xc
c0006f5c:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006f63:	e8 44 f7 00 00       	call   c00166ac <free>
c0006f68:	58                   	pop    eax
c0006f69:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006f70:	43                   	inc    ebx
c0006f71:	e8 36 f7 00 00       	call   c00166ac <free>
c0006f76:	83 c4 10             	add    esp,0x10
c0006f79:	83 fb 10             	cmp    ebx,0x10
c0006f7c:	75 db                	jne    c0006f59 <fs_iso9660_shutdown+0x6>
c0006f7e:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006f83:	85 c0                	test   eax,eax
c0006f85:	74 0c                	je     c0006f93 <fs_iso9660_shutdown+0x40>
c0006f87:	83 ec 0c             	sub    esp,0xc
c0006f8a:	50                   	push   eax
c0006f8b:	e8 1c f7 00 00       	call   c00166ac <free>
c0006f90:	83 c4 10             	add    esp,0x10
c0006f93:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006f98:	85 c0                	test   eax,eax
c0006f9a:	74 0c                	je     c0006fa8 <fs_iso9660_shutdown+0x55>
c0006f9c:	83 ec 0c             	sub    esp,0xc
c0006f9f:	50                   	push   eax
c0006fa0:	e8 07 f7 00 00       	call   c00166ac <free>
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006fb2:	31 c0                	xor    eax,eax
c0006fb4:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006fbe:	83 c4 08             	add    esp,0x8
c0006fc1:	5b                   	pop    ebx
c0006fc2:	c3                   	ret    
c0006fc3:	90                   	nop

c0006fc4 <lwip_init>:
c0006fc4:	83 ec 0c             	sub    esp,0xc
c0006fc7:	e8 5c 2c 00 00       	call   c0009c28 <stats_init>
c0006fcc:	e8 ff 9d ff ff       	call   c0000dd0 <sys_init>
c0006fd1:	e8 ae 01 00 00       	call   c0007184 <mem_init>
c0006fd6:	e8 09 0a 00 00       	call   c00079e4 <memp_init>
c0006fdb:	e8 ec 0c 00 00       	call   c0007ccc <netif_init>
c0006fe0:	e8 8b 9c ff ff       	call   c0000c70 <lwip_socket_init>
c0006fe5:	e8 06 9e 00 00       	call   c0010df0 <sys_timeouts_init>
c0006fea:	90                   	nop
c0006feb:	83 c4 0c             	add    esp,0xc
c0006fee:	c3                   	ret    
c0006fef:	90                   	nop

c0006ff0 <plug_holes>:
c0006ff0:	83 ec 1c             	sub    esp,0x1c
c0006ff3:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006ff8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006ffc:	73 16                	jae    c0007014 <plug_holes+0x24>
c0006ffe:	83 ec 08             	sub    esp,0x8
c0007001:	68 0f 00 03 c0       	push   0xc003000f
c0007006:	68 26 00 03 c0       	push   0xc0030026
c000700b:	e8 b4 8e 01 00       	call   c001fec4 <CPrintf>
c0007010:	83 c4 10             	add    esp,0x10
c0007013:	90                   	nop
c0007014:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007019:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000701d:	72 15                	jb     c0007034 <plug_holes+0x44>
c000701f:	83 ec 08             	sub    esp,0x8
c0007022:	68 33 00 03 c0       	push   0xc0030033
c0007027:	68 26 00 03 c0       	push   0xc0030026
c000702c:	e8 93 8e 01 00       	call   c001fec4 <CPrintf>
c0007031:	83 c4 10             	add    esp,0x10
c0007034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007038:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000703b:	0f b6 c0             	movzx  eax,al
c000703e:	85 c0                	test   eax,eax
c0007040:	74 16                	je     c0007058 <plug_holes+0x68>
c0007042:	83 ec 08             	sub    esp,0x8
c0007045:	68 4d 00 03 c0       	push   0xc003004d
c000704a:	68 26 00 03 c0       	push   0xc0030026
c000704f:	e8 70 8e 01 00       	call   c001fec4 <CPrintf>
c0007054:	83 c4 10             	add    esp,0x10
c0007057:	90                   	nop
c0007058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000705c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000705f:	0f b7 c0             	movzx  eax,ax
c0007062:	3d 40 06 00 00       	cmp    eax,0x640
c0007067:	76 17                	jbe    c0007080 <plug_holes+0x90>
c0007069:	83 ec 08             	sub    esp,0x8
c000706c:	68 e0 00 03 c0       	push   0xc00300e0
c0007071:	68 26 00 03 c0       	push   0xc0030026
c0007076:	e8 49 8e 01 00       	call   c001fec4 <CPrintf>
c000707b:	83 c4 10             	add    esp,0x10
c000707e:	66 90                	xchg   ax,ax
c0007080:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000708a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000708d:	0f b7 c0             	movzx  eax,ax
c0007090:	01 d0                	add    eax,edx
c0007092:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000709a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000709e:	74 64                	je     c0007104 <plug_holes+0x114>
c00070a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a4:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00070a7:	0f b6 c0             	movzx  eax,al
c00070aa:	85 c0                	test   eax,eax
c00070ac:	75 56                	jne    c0007104 <plug_holes+0x114>
c00070ae:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070b3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070b7:	74 4b                	je     c0007104 <plug_holes+0x114>
c00070b9:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00070be:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070c2:	75 0c                	jne    c00070d0 <plug_holes+0xe0>
c00070c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070c8:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00070cd:	8d 76 00             	lea    esi,[esi+0x0]
c00070d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d4:	66 8b 10             	mov    dx,WORD PTR [eax]
c00070d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070db:	66 89 10             	mov    WORD PTR [eax],dx
c00070de:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070e7:	89 d1                	mov    ecx,edx
c00070e9:	29 c1                	sub    ecx,eax
c00070eb:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00070f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070f5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070f8:	0f b7 c0             	movzx  eax,ax
c00070fb:	01 d0                	add    eax,edx
c00070fd:	89 ca                	mov    edx,ecx
c00070ff:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0007103:	90                   	nop
c0007104:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000710a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000710e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0007112:	0f b7 c0             	movzx  eax,ax
c0007115:	01 d0                	add    eax,edx
c0007117:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000711b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007123:	74 57                	je     c000717c <plug_holes+0x18c>
c0007125:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007129:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000712c:	0f b6 c0             	movzx  eax,al
c000712f:	85 c0                	test   eax,eax
c0007131:	75 49                	jne    c000717c <plug_holes+0x18c>
c0007133:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007138:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000713c:	75 0a                	jne    c0007148 <plug_holes+0x158>
c000713e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007142:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007147:	90                   	nop
c0007148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000714c:	66 8b 10             	mov    dx,WORD PTR [eax]
c000714f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007153:	66 89 10             	mov    WORD PTR [eax],dx
c0007156:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000715b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000715f:	89 d1                	mov    ecx,edx
c0007161:	29 c1                	sub    ecx,eax
c0007163:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000716d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007170:	0f b7 c0             	movzx  eax,ax
c0007173:	01 d0                	add    eax,edx
c0007175:	89 ca                	mov    edx,ecx
c0007177:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000717b:	90                   	nop
c000717c:	90                   	nop
c000717d:	83 c4 1c             	add    esp,0x1c
c0007180:	c3                   	ret    
c0007181:	8d 76 00             	lea    esi,[esi+0x0]

c0007184 <mem_init>:
c0007184:	83 ec 1c             	sub    esp,0x1c
c0007187:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0007191:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007196:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000719a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000719e:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a7:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c00071ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071b1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00071b5:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071ba:	05 40 06 00 00       	add    eax,0x640
c00071bf:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c00071c4:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071c9:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00071cd:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071d2:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071d7:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071dc:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c00071e2:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071e7:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00071ec:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c00071f5:	83 ec 08             	sub    esp,0x8
c00071f8:	6a 01                	push   0x1
c00071fa:	68 98 76 03 c0       	push   0xc0037698
c00071ff:	e8 9c 9a ff ff       	call   c0000ca0 <sys_sem_new>
c0007204:	83 c4 10             	add    esp,0x10
c0007207:	0f be c0             	movsx  eax,al
c000720a:	85 c0                	test   eax,eax
c000720c:	74 16                	je     c0007224 <mem_init+0xa0>
c000720e:	83 ec 08             	sub    esp,0x8
c0007211:	68 68 00 03 c0       	push   0xc0030068
c0007216:	68 26 00 03 c0       	push   0xc0030026
c000721b:	e8 a4 8c 01 00       	call   c001fec4 <CPrintf>
c0007220:	83 c4 10             	add    esp,0x10
c0007223:	90                   	nop
c0007224:	90                   	nop
c0007225:	83 c4 1c             	add    esp,0x1c
c0007228:	c3                   	ret    
c0007229:	8d 76 00             	lea    esi,[esi+0x0]

c000722c <mem_free>:
c000722c:	83 ec 1c             	sub    esp,0x1c
c000722f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0007234:	0f 84 0e 01 00 00    	je     c0007348 <mem_free+0x11c>
c000723a:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000723f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007243:	72 0b                	jb     c0007250 <mem_free+0x24>
c0007245:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000724a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000724e:	72 18                	jb     c0007268 <mem_free+0x3c>
c0007250:	83 ec 08             	sub    esp,0x8
c0007253:	68 83 00 03 c0       	push   0xc0030083
c0007258:	68 26 00 03 c0       	push   0xc0030026
c000725d:	e8 62 8c 01 00       	call   c001fec4 <CPrintf>
c0007262:	83 c4 10             	add    esp,0x10
c0007265:	8d 76 00             	lea    esi,[esi+0x0]
c0007268:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000726d:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007271:	72 0d                	jb     c0007280 <mem_free+0x54>
c0007273:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007278:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000727c:	72 22                	jb     c00072a0 <mem_free+0x74>
c000727e:	66 90                	xchg   ax,ax
c0007280:	e8 2f 8c 01 00       	call   c001feb4 <CLockScheduler>
c0007285:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000728b:	83 c0 01             	add    eax,0x1
c000728e:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007294:	e8 ff 8b 01 00       	call   c001fe98 <CUnlockScheduler>
c0007299:	e9 ae 00 00 00       	jmp    c000734c <mem_free+0x120>
c000729e:	66 90                	xchg   ax,ax
c00072a0:	83 ec 08             	sub    esp,0x8
c00072a3:	6a 00                	push   0x0
c00072a5:	68 98 76 03 c0       	push   0xc0037698
c00072aa:	e8 49 9a ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c00072af:	83 c4 10             	add    esp,0x10
c00072b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00072b6:	83 e8 06             	sub    eax,0x6
c00072b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072c1:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072c4:	0f b6 c0             	movzx  eax,al
c00072c7:	85 c0                	test   eax,eax
c00072c9:	75 15                	jne    c00072e0 <mem_free+0xb4>
c00072cb:	83 ec 08             	sub    esp,0x8
c00072ce:	68 9a 00 03 c0       	push   0xc003009a
c00072d3:	68 26 00 03 c0       	push   0xc0030026
c00072d8:	e8 e7 8b 01 00       	call   c001fec4 <CPrintf>
c00072dd:	83 c4 10             	add    esp,0x10
c00072e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072e4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072e8:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00072ed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00072f1:	73 09                	jae    c00072fc <mem_free+0xd0>
c00072f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072f7:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00072fc:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c0007303:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007308:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000730c:	29 c1                	sub    ecx,eax
c000730e:	89 c8                	mov    eax,ecx
c0007310:	89 c1                	mov    ecx,eax
c0007312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007316:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007319:	29 c1                	sub    ecx,eax
c000731b:	89 c8                	mov    eax,ecx
c000731d:	01 d0                	add    eax,edx
c000731f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007325:	83 ec 0c             	sub    esp,0xc
c0007328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000732c:	e8 bf fc ff ff       	call   c0006ff0 <plug_holes>
c0007331:	83 c4 10             	add    esp,0x10
c0007334:	83 ec 0c             	sub    esp,0xc
c0007337:	68 98 76 03 c0       	push   0xc0037698
c000733c:	e8 9f 99 ff ff       	call   c0000ce0 <sys_sem_signal>
c0007341:	83 c4 10             	add    esp,0x10
c0007344:	eb 06                	jmp    c000734c <mem_free+0x120>
c0007346:	66 90                	xchg   ax,ax
c0007348:	90                   	nop
c0007349:	8d 76 00             	lea    esi,[esi+0x0]
c000734c:	83 c4 1c             	add    esp,0x1c
c000734f:	c3                   	ret    

c0007350 <mem_trim>:
c0007350:	83 ec 2c             	sub    esp,0x2c
c0007353:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007357:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000735c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007361:	83 f8 0b             	cmp    eax,0xb
c0007364:	77 0a                	ja     c0007370 <mem_trim+0x20>
c0007366:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c000736d:	8d 76 00             	lea    esi,[esi+0x0]
c0007370:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007375:	3d 40 06 00 00       	cmp    eax,0x640
c000737a:	76 0c                	jbe    c0007388 <mem_trim+0x38>
c000737c:	b8 00 00 00 00       	mov    eax,0x0
c0007381:	e9 d6 02 00 00       	jmp    c000765c <mem_trim+0x30c>
c0007386:	66 90                	xchg   ax,ax
c0007388:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000738d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007391:	72 0d                	jb     c00073a0 <mem_trim+0x50>
c0007393:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007398:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000739c:	72 1a                	jb     c00073b8 <mem_trim+0x68>
c000739e:	66 90                	xchg   ax,ax
c00073a0:	83 ec 08             	sub    esp,0x8
c00073a3:	68 ae 00 03 c0       	push   0xc00300ae
c00073a8:	68 26 00 03 c0       	push   0xc0030026
c00073ad:	e8 12 8b 01 00       	call   c001fec4 <CPrintf>
c00073b2:	83 c4 10             	add    esp,0x10
c00073b5:	8d 76 00             	lea    esi,[esi+0x0]
c00073b8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00073bd:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073c1:	72 0d                	jb     c00073d0 <mem_trim+0x80>
c00073c3:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00073c8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073cc:	72 26                	jb     c00073f4 <mem_trim+0xa4>
c00073ce:	66 90                	xchg   ax,ax
c00073d0:	e8 df 8a 01 00       	call   c001feb4 <CLockScheduler>
c00073d5:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00073db:	83 c0 01             	add    eax,0x1
c00073de:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c00073e4:	e8 af 8a 01 00       	call   c001fe98 <CUnlockScheduler>
c00073e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073ed:	e9 6a 02 00 00       	jmp    c000765c <mem_trim+0x30c>
c00073f2:	66 90                	xchg   ax,ax
c00073f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073f8:	83 e8 06             	sub    eax,0x6
c00073fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073ff:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007404:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007408:	29 c2                	sub    edx,eax
c000740a:	89 d0                	mov    eax,edx
c000740c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0007411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007415:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007418:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000741d:	89 d1                	mov    ecx,edx
c000741f:	29 c1                	sub    ecx,eax
c0007421:	89 c8                	mov    eax,ecx
c0007423:	83 e8 06             	sub    eax,0x6
c0007426:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000742b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007430:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007435:	39 c2                	cmp    edx,eax
c0007437:	76 17                	jbe    c0007450 <mem_trim+0x100>
c0007439:	83 ec 08             	sub    esp,0x8
c000743c:	68 0c 01 03 c0       	push   0xc003010c
c0007441:	68 26 00 03 c0       	push   0xc0030026
c0007446:	e8 79 8a 01 00       	call   c001fec4 <CPrintf>
c000744b:	83 c4 10             	add    esp,0x10
c000744e:	66 90                	xchg   ax,ax
c0007450:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007455:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000745a:	39 c2                	cmp    edx,eax
c000745c:	76 0a                	jbe    c0007468 <mem_trim+0x118>
c000745e:	b8 00 00 00 00       	mov    eax,0x0
c0007463:	e9 f4 01 00 00       	jmp    c000765c <mem_trim+0x30c>
c0007468:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000746d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007472:	39 c2                	cmp    edx,eax
c0007474:	75 0a                	jne    c0007480 <mem_trim+0x130>
c0007476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000747a:	e9 dd 01 00 00       	jmp    c000765c <mem_trim+0x30c>
c000747f:	90                   	nop
c0007480:	83 ec 08             	sub    esp,0x8
c0007483:	6a 00                	push   0x0
c0007485:	68 98 76 03 c0       	push   0xc0037698
c000748a:	e8 69 98 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c000748f:	83 c4 10             	add    esp,0x10
c0007492:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000749c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000749f:	0f b7 c0             	movzx  eax,ax
c00074a2:	01 d0                	add    eax,edx
c00074a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00074a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074ac:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00074af:	0f b6 c0             	movzx  eax,al
c00074b2:	85 c0                	test   eax,eax
c00074b4:	0f 85 c6 00 00 00    	jne    c0007580 <mem_trim+0x230>
c00074ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074be:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074c1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00074c6:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00074cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074cf:	01 d0                	add    eax,edx
c00074d1:	83 c0 06             	add    eax,0x6
c00074d4:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00074d9:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00074de:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00074e2:	75 14                	jne    c00074f8 <mem_trim+0x1a8>
c00074e4:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074ea:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074ef:	01 d0                	add    eax,edx
c00074f1:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00074f6:	66 90                	xchg   ax,ax
c00074f8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074fe:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007503:	01 d0                	add    eax,edx
c0007505:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007509:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000750d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007515:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000751a:	66 89 10             	mov    WORD PTR [eax],dx
c000751d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007521:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007526:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000752a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000752e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007532:	66 89 10             	mov    WORD PTR [eax],dx
c0007535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007539:	66 8b 00             	mov    ax,WORD PTR [eax]
c000753c:	0f b7 c0             	movzx  eax,ax
c000753f:	3d 40 06 00 00       	cmp    eax,0x640
c0007544:	74 1a                	je     c0007560 <mem_trim+0x210>
c0007546:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000754c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007550:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007553:	0f b7 c0             	movzx  eax,ax
c0007556:	01 c2                	add    edx,eax
c0007558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000755c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007560:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007566:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000756a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000756e:	29 d1                	sub    ecx,edx
c0007570:	89 ca                	mov    edx,ecx
c0007572:	01 d0                	add    eax,edx
c0007574:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000757a:	e9 c9 00 00 00       	jmp    c0007648 <mem_trim+0x2f8>
c000757f:	90                   	nop
c0007580:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007585:	8d 50 12             	lea    edx,[eax+0x12]
c0007588:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000758d:	39 c2                	cmp    edx,eax
c000758f:	0f 87 b3 00 00 00    	ja     c0007648 <mem_trim+0x2f8>
c0007595:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000759a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759e:	01 d0                	add    eax,edx
c00075a0:	83 c0 06             	add    eax,0x6
c00075a3:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00075a8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075ae:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00075b3:	01 d0                	add    eax,edx
c00075b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00075b9:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075be:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00075c2:	73 0c                	jae    c00075d0 <mem_trim+0x280>
c00075c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075c8:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00075cd:	8d 76 00             	lea    esi,[esi+0x0]
c00075d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075d4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075dc:	66 8b 10             	mov    dx,WORD PTR [eax]
c00075df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075e3:	66 89 10             	mov    WORD PTR [eax],dx
c00075e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075ea:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00075ef:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00075f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075fb:	66 89 10             	mov    WORD PTR [eax],dx
c00075fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007602:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007605:	0f b7 c0             	movzx  eax,ax
c0007608:	3d 40 06 00 00       	cmp    eax,0x640
c000760d:	74 1d                	je     c000762c <mem_trim+0x2dc>
c000760f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007619:	66 8b 00             	mov    ax,WORD PTR [eax]
c000761c:	0f b7 c0             	movzx  eax,ax
c000761f:	01 c2                	add    edx,eax
c0007621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007625:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007629:	8d 76 00             	lea    esi,[esi+0x0]
c000762c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007632:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007636:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000763a:	29 d1                	sub    ecx,edx
c000763c:	89 ca                	mov    edx,ecx
c000763e:	01 d0                	add    eax,edx
c0007640:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007646:	66 90                	xchg   ax,ax
c0007648:	83 ec 0c             	sub    esp,0xc
c000764b:	68 98 76 03 c0       	push   0xc0037698
c0007650:	e8 8b 96 ff ff       	call   c0000ce0 <sys_sem_signal>
c0007655:	83 c4 10             	add    esp,0x10
c0007658:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000765c:	83 c4 2c             	add    esp,0x2c
c000765f:	c3                   	ret    

c0007660 <mem_malloc>:
c0007660:	53                   	push   ebx
c0007661:	83 ec 28             	sub    esp,0x28
c0007664:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007668:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000766d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007672:	85 c0                	test   eax,eax
c0007674:	75 0a                	jne    c0007680 <mem_malloc+0x20>
c0007676:	b8 00 00 00 00       	mov    eax,0x0
c000767b:	e9 f8 02 00 00       	jmp    c0007978 <mem_malloc+0x318>
c0007680:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007685:	83 f8 0b             	cmp    eax,0xb
c0007688:	77 0a                	ja     c0007694 <mem_malloc+0x34>
c000768a:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007691:	8d 76 00             	lea    esi,[esi+0x0]
c0007694:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007699:	3d 40 06 00 00       	cmp    eax,0x640
c000769e:	76 0c                	jbe    c00076ac <mem_malloc+0x4c>
c00076a0:	b8 00 00 00 00       	mov    eax,0x0
c00076a5:	e9 ce 02 00 00       	jmp    c0007978 <mem_malloc+0x318>
c00076aa:	66 90                	xchg   ax,ax
c00076ac:	83 ec 08             	sub    esp,0x8
c00076af:	6a 00                	push   0x0
c00076b1:	68 98 76 03 c0       	push   0xc0037698
c00076b6:	e8 3d 96 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c00076bb:	83 c4 10             	add    esp,0x10
c00076be:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076c4:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00076c9:	29 c2                	sub    edx,eax
c00076cb:	89 d0                	mov    eax,edx
c00076cd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076d2:	e9 61 02 00 00       	jmp    c0007938 <mem_malloc+0x2d8>
c00076d7:	90                   	nop
c00076d8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076de:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076e3:	01 d0                	add    eax,edx
c00076e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00076e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076ed:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076f0:	0f b6 c0             	movzx  eax,al
c00076f3:	85 c0                	test   eax,eax
c00076f5:	0f 85 25 02 00 00    	jne    c0007920 <mem_malloc+0x2c0>
c00076fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076ff:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007702:	0f b7 d0             	movzx  edx,ax
c0007705:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000770a:	29 c2                	sub    edx,eax
c000770c:	89 d0                	mov    eax,edx
c000770e:	8d 50 fa             	lea    edx,[eax-0x6]
c0007711:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007716:	39 c2                	cmp    edx,eax
c0007718:	0f 82 02 02 00 00    	jb     c0007920 <mem_malloc+0x2c0>
c000771e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007722:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007725:	0f b7 d0             	movzx  edx,ax
c0007728:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000772d:	29 c2                	sub    edx,eax
c000772f:	89 d0                	mov    eax,edx
c0007731:	8d 50 fa             	lea    edx,[eax-0x6]
c0007734:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007739:	83 c0 12             	add    eax,0x12
c000773c:	39 c2                	cmp    edx,eax
c000773e:	0f 82 c4 00 00 00    	jb     c0007808 <mem_malloc+0x1a8>
c0007744:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007749:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000774d:	01 d0                	add    eax,edx
c000774f:	83 c0 06             	add    eax,0x6
c0007752:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0007757:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000775d:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0007762:	01 d0                	add    eax,edx
c0007764:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000776c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007770:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007774:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000777b:	66 89 10             	mov    WORD PTR [eax],dx
c000777e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007782:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007787:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000778b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000778f:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0007794:	66 89 10             	mov    WORD PTR [eax],dx
c0007797:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000779b:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000779f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a6:	0f b7 c0             	movzx  eax,ax
c00077a9:	3d 40 06 00 00       	cmp    eax,0x640
c00077ae:	74 1c                	je     c00077cc <mem_malloc+0x16c>
c00077b0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00077b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077ba:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077bd:	0f b7 c0             	movzx  eax,ax
c00077c0:	01 c2                	add    edx,eax
c00077c2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00077c7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00077cb:	90                   	nop
c00077cc:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077d6:	01 d0                	add    eax,edx
c00077d8:	83 c0 06             	add    eax,0x6
c00077db:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00077e1:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00077e8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077ee:	0f b7 d2             	movzx  edx,dx
c00077f1:	0f b7 c0             	movzx  eax,ax
c00077f4:	39 c2                	cmp    edx,eax
c00077f6:	73 64                	jae    c000785c <mem_malloc+0x1fc>
c00077f8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077fe:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007804:	eb 56                	jmp    c000785c <mem_malloc+0x1fc>
c0007806:	66 90                	xchg   ax,ax
c0007808:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000780c:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007810:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c0007817:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000781b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000781e:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0007824:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007828:	29 cb                	sub    ebx,ecx
c000782a:	89 d9                	mov    ecx,ebx
c000782c:	29 c8                	sub    eax,ecx
c000782e:	01 d0                	add    eax,edx
c0007830:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007836:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c000783d:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007843:	0f b7 d2             	movzx  edx,dx
c0007846:	0f b7 c0             	movzx  eax,ax
c0007849:	39 c2                	cmp    edx,eax
c000784b:	73 0f                	jae    c000785c <mem_malloc+0x1fc>
c000784d:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007853:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007859:	8d 76 00             	lea    esi,[esi+0x0]
c000785c:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007861:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0007865:	75 71                	jne    c00078d8 <mem_malloc+0x278>
c0007867:	eb 1b                	jmp    c0007884 <mem_malloc+0x224>
c0007869:	8d 76 00             	lea    esi,[esi+0x0]
c000786c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007872:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007877:	66 8b 00             	mov    ax,WORD PTR [eax]
c000787a:	0f b7 c0             	movzx  eax,ax
c000787d:	01 d0                	add    eax,edx
c000787f:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007884:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007889:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000788c:	0f b6 c0             	movzx  eax,al
c000788f:	85 c0                	test   eax,eax
c0007891:	74 11                	je     c00078a4 <mem_malloc+0x244>
c0007893:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007899:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000789e:	39 c2                	cmp    edx,eax
c00078a0:	75 ca                	jne    c000786c <mem_malloc+0x20c>
c00078a2:	66 90                	xchg   ax,ax
c00078a4:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00078aa:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00078af:	39 c2                	cmp    edx,eax
c00078b1:	74 25                	je     c00078d8 <mem_malloc+0x278>
c00078b3:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00078b8:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00078bb:	0f b6 c0             	movzx  eax,al
c00078be:	85 c0                	test   eax,eax
c00078c0:	74 16                	je     c00078d8 <mem_malloc+0x278>
c00078c2:	83 ec 08             	sub    esp,0x8
c00078c5:	68 c5 00 03 c0       	push   0xc00300c5
c00078ca:	68 26 00 03 c0       	push   0xc0030026
c00078cf:	e8 f0 85 01 00       	call   c001fec4 <CPrintf>
c00078d4:	83 c4 10             	add    esp,0x10
c00078d7:	90                   	nop
c00078d8:	83 ec 0c             	sub    esp,0xc
c00078db:	68 98 76 03 c0       	push   0xc0037698
c00078e0:	e8 fb 93 ff ff       	call   c0000ce0 <sys_sem_signal>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00078ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f1:	01 d0                	add    eax,edx
c00078f3:	8d 50 06             	lea    edx,[eax+0x6]
c00078f6:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00078fb:	39 c2                	cmp    edx,eax
c00078fd:	76 15                	jbe    c0007914 <mem_malloc+0x2b4>
c00078ff:	83 ec 08             	sub    esp,0x8
c0007902:	68 2c 01 03 c0       	push   0xc003012c
c0007907:	68 26 00 03 c0       	push   0xc0030026
c000790c:	e8 b3 85 01 00       	call   c001fec4 <CPrintf>
c0007911:	83 c4 10             	add    esp,0x10
c0007914:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007918:	83 c0 06             	add    eax,0x6
c000791b:	eb 5b                	jmp    c0007978 <mem_malloc+0x318>
c000791d:	8d 76 00             	lea    esi,[esi+0x0]
c0007920:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007926:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000792b:	01 d0                	add    eax,edx
c000792d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007930:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007935:	8d 76 00             	lea    esi,[esi+0x0]
c0007938:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000793d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007942:	b9 40 06 00 00       	mov    ecx,0x640
c0007947:	29 d1                	sub    ecx,edx
c0007949:	89 ca                	mov    edx,ecx
c000794b:	39 d0                	cmp    eax,edx
c000794d:	0f 8c 85 fd ff ff    	jl     c00076d8 <mem_malloc+0x78>
c0007953:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c0007959:	83 c0 01             	add    eax,0x1
c000795c:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c0007962:	83 ec 0c             	sub    esp,0xc
c0007965:	68 98 76 03 c0       	push   0xc0037698
c000796a:	e8 71 93 ff ff       	call   c0000ce0 <sys_sem_signal>
c000796f:	83 c4 10             	add    esp,0x10
c0007972:	b8 00 00 00 00       	mov    eax,0x0
c0007977:	90                   	nop
c0007978:	83 c4 28             	add    esp,0x28
c000797b:	5b                   	pop    ebx
c000797c:	c3                   	ret    
c000797d:	8d 76 00             	lea    esi,[esi+0x0]

c0007980 <mem_calloc>:
c0007980:	83 ec 2c             	sub    esp,0x2c
c0007983:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007987:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000798b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007990:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007995:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000799d:	0f af c2             	imul   eax,edx
c00079a0:	0f b7 c0             	movzx  eax,ax
c00079a3:	83 ec 0c             	sub    esp,0xc
c00079a6:	50                   	push   eax
c00079a7:	e8 b4 fc ff ff       	call   c0007660 <mem_malloc>
c00079ac:	83 c4 10             	add    esp,0x10
c00079af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00079b3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00079b8:	74 22                	je     c00079dc <mem_calloc+0x5c>
c00079ba:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00079bf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00079c4:	0f af c2             	imul   eax,edx
c00079c7:	83 ec 04             	sub    esp,0x4
c00079ca:	50                   	push   eax
c00079cb:	6a 00                	push   0x0
c00079cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079d1:	e8 1a 8b ff ff       	call   c00004f0 <memset>
c00079d6:	83 c4 10             	add    esp,0x10
c00079d9:	8d 76 00             	lea    esi,[esi+0x0]
c00079dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00079e0:	83 c4 2c             	add    esp,0x2c
c00079e3:	c3                   	ret    

c00079e4 <memp_init>:
c00079e4:	83 ec 10             	sub    esp,0x10
c00079e7:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00079ee:	eb 78                	jmp    c0007a68 <memp_init+0x84>
c00079f0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079f5:	89 d0                	mov    eax,edx
c00079f7:	c1 e0 02             	shl    eax,0x2
c00079fa:	01 d0                	add    eax,edx
c00079fc:	d1 e0                	shl    eax,1
c00079fe:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a03:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a08:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a0d:	89 d0                	mov    eax,edx
c0007a0f:	c1 e0 02             	shl    eax,0x2
c0007a12:	01 d0                	add    eax,edx
c0007a14:	d1 e0                	shl    eax,1
c0007a16:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a1b:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a20:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a25:	89 d0                	mov    eax,edx
c0007a27:	c1 e0 02             	shl    eax,0x2
c0007a2a:	01 d0                	add    eax,edx
c0007a2c:	d1 e0                	shl    eax,1
c0007a2e:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a33:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a38:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a3d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a42:	66 8b 8c 00 7c 01 03 c0 	mov    cx,WORD PTR [eax+eax*1-0x3ffcfe84]
c0007a4a:	89 d0                	mov    eax,edx
c0007a4c:	c1 e0 02             	shl    eax,0x2
c0007a4f:	01 d0                	add    eax,edx
c0007a51:	d1 e0                	shl    eax,1
c0007a53:	05 d2 67 03 c0       	add    eax,0xc00367d2
c0007a58:	66 89 08             	mov    WORD PTR [eax],cx
c0007a5b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007a60:	83 c0 01             	add    eax,0x1
c0007a63:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007a68:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a6d:	83 f8 0d             	cmp    eax,0xd
c0007a70:	0f 86 7a ff ff ff    	jbe    c00079f0 <memp_init+0xc>
c0007a76:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c0007a7e:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007a85:	e9 8a 00 00 00       	jmp    c0007b14 <memp_init+0x130>
c0007a8a:	66 90                	xchg   ax,ax
c0007a8c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a91:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007a9c:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007aa3:	eb 47                	jmp    c0007aec <memp_init+0x108>
c0007aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0007aa8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007aad:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ab8:	89 10                	mov    DWORD PTR [eax],edx
c0007aba:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007abf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007ac3:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007aca:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007acf:	66 8b 84 00 98 01 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfe68]
c0007ad7:	0f b7 c0             	movzx  eax,ax
c0007ada:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ae2:	83 c0 01             	add    eax,0x1
c0007ae5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007aea:	66 90                	xchg   ax,ax
c0007aec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007af1:	66 8b 84 00 7c 01 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfe84]
c0007af9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007afe:	0f b7 c0             	movzx  eax,ax
c0007b01:	39 c2                	cmp    edx,eax
c0007b03:	72 a3                	jb     c0007aa8 <memp_init+0xc4>
c0007b05:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007b0a:	83 c0 01             	add    eax,0x1
c0007b0d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007b12:	66 90                	xchg   ax,ax
c0007b14:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007b19:	83 f8 0d             	cmp    eax,0xd
c0007b1c:	0f 86 6a ff ff ff    	jbe    c0007a8c <memp_init+0xa8>
c0007b22:	90                   	nop
c0007b23:	83 c4 10             	add    esp,0x10
c0007b26:	c3                   	ret    
c0007b27:	90                   	nop

c0007b28 <memp_malloc>:
c0007b28:	83 ec 1c             	sub    esp,0x1c
c0007b2b:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c0007b30:	76 22                	jbe    c0007b54 <memp_malloc+0x2c>
c0007b32:	83 ec 08             	sub    esp,0x8
c0007b35:	68 5c 01 03 c0       	push   0xc003015c
c0007b3a:	68 26 00 03 c0       	push   0xc0030026
c0007b3f:	e8 80 83 01 00       	call   c001fec4 <CPrintf>
c0007b44:	83 c4 10             	add    esp,0x10
c0007b47:	b8 00 00 00 00       	mov    eax,0x0
c0007b4c:	e9 ff 00 00 00       	jmp    c0007c50 <memp_malloc+0x128>
c0007b51:	8d 76 00             	lea    esi,[esi+0x0]
c0007b54:	e8 5b 83 01 00       	call   c001feb4 <CLockScheduler>
c0007b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b5d:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c0007b64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b6d:	0f 84 a1 00 00 00    	je     c0007c14 <memp_malloc+0xec>
c0007b73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b77:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b7d:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b88:	89 d0                	mov    eax,edx
c0007b8a:	c1 e0 02             	shl    eax,0x2
c0007b8d:	01 d0                	add    eax,edx
c0007b8f:	d1 e0                	shl    eax,1
c0007b91:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b96:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007b99:	83 c0 01             	add    eax,0x1
c0007b9c:	89 c1                	mov    ecx,eax
c0007b9e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ba2:	89 d0                	mov    eax,edx
c0007ba4:	c1 e0 02             	shl    eax,0x2
c0007ba7:	01 d0                	add    eax,edx
c0007ba9:	d1 e0                	shl    eax,1
c0007bab:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bb0:	66 89 08             	mov    WORD PTR [eax],cx
c0007bb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bb7:	89 d0                	mov    eax,edx
c0007bb9:	c1 e0 02             	shl    eax,0x2
c0007bbc:	01 d0                	add    eax,edx
c0007bbe:	d1 e0                	shl    eax,1
c0007bc0:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007bc5:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007bc8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bcc:	89 d0                	mov    eax,edx
c0007bce:	c1 e0 02             	shl    eax,0x2
c0007bd1:	01 d0                	add    eax,edx
c0007bd3:	d1 e0                	shl    eax,1
c0007bd5:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bda:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007bdd:	0f b7 d1             	movzx  edx,cx
c0007be0:	0f b7 c0             	movzx  eax,ax
c0007be3:	39 c2                	cmp    edx,eax
c0007be5:	73 5d                	jae    c0007c44 <memp_malloc+0x11c>
c0007be7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007beb:	89 d0                	mov    eax,edx
c0007bed:	c1 e0 02             	shl    eax,0x2
c0007bf0:	01 d0                	add    eax,edx
c0007bf2:	d1 e0                	shl    eax,1
c0007bf4:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bf9:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007bfc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c00:	89 d0                	mov    eax,edx
c0007c02:	c1 e0 02             	shl    eax,0x2
c0007c05:	01 d0                	add    eax,edx
c0007c07:	d1 e0                	shl    eax,1
c0007c09:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007c0e:	66 89 08             	mov    WORD PTR [eax],cx
c0007c11:	eb 31                	jmp    c0007c44 <memp_malloc+0x11c>
c0007c13:	90                   	nop
c0007c14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c18:	89 d0                	mov    eax,edx
c0007c1a:	c1 e0 02             	shl    eax,0x2
c0007c1d:	01 d0                	add    eax,edx
c0007c1f:	d1 e0                	shl    eax,1
c0007c21:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c29:	83 c0 01             	add    eax,0x1
c0007c2c:	89 c1                	mov    ecx,eax
c0007c2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c32:	89 d0                	mov    eax,edx
c0007c34:	c1 e0 02             	shl    eax,0x2
c0007c37:	01 d0                	add    eax,edx
c0007c39:	d1 e0                	shl    eax,1
c0007c3b:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c40:	66 89 08             	mov    WORD PTR [eax],cx
c0007c43:	90                   	nop
c0007c44:	e8 4f 82 01 00       	call   c001fe98 <CUnlockScheduler>
c0007c49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0007c50:	83 c4 1c             	add    esp,0x1c
c0007c53:	c3                   	ret    

c0007c54 <memp_free>:
c0007c54:	83 ec 1c             	sub    esp,0x1c
c0007c57:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c5c:	74 66                	je     c0007cc4 <memp_free+0x70>
c0007c5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c66:	e8 49 82 01 00       	call   c001feb4 <CLockScheduler>
c0007c6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c6f:	89 d0                	mov    eax,edx
c0007c71:	c1 e0 02             	shl    eax,0x2
c0007c74:	01 d0                	add    eax,edx
c0007c76:	d1 e0                	shl    eax,1
c0007c78:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c7d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c80:	83 e8 01             	sub    eax,0x1
c0007c83:	89 c1                	mov    ecx,eax
c0007c85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c89:	89 d0                	mov    eax,edx
c0007c8b:	c1 e0 02             	shl    eax,0x2
c0007c8e:	01 d0                	add    eax,edx
c0007c90:	d1 e0                	shl    eax,1
c0007c92:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c97:	66 89 08             	mov    WORD PTR [eax],cx
c0007c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c9e:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007ca5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ca9:	89 10                	mov    DWORD PTR [eax],edx
c0007cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007caf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007cb3:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007cba:	e8 d9 81 01 00       	call   c001fe98 <CUnlockScheduler>
c0007cbf:	eb 07                	jmp    c0007cc8 <memp_free+0x74>
c0007cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc4:	90                   	nop
c0007cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc8:	83 c4 1c             	add    esp,0x1c
c0007ccb:	c3                   	ret    

c0007ccc <netif_init>:
c0007ccc:	90                   	nop
c0007ccd:	c3                   	ret    
c0007cce:	66 90                	xchg   ax,ax

c0007cd0 <netif_find>:
c0007cd0:	83 ec 10             	sub    esp,0x10
c0007cd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007cd8:	75 0a                	jne    c0007ce4 <netif_find+0x14>
c0007cda:	b8 00 00 00 00       	mov    eax,0x0
c0007cdf:	e9 80 00 00 00       	jmp    c0007d64 <netif_find+0x94>
c0007ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ce8:	83 c0 02             	add    eax,0x2
c0007ceb:	8a 00                	mov    al,BYTE PTR [eax]
c0007ced:	83 e8 30             	sub    eax,0x30
c0007cf0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007cf4:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007cf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007cfd:	eb 59                	jmp    c0007d58 <netif_find+0x88>
c0007cff:	90                   	nop
c0007d00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d04:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007d07:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007d0c:	0f b6 c0             	movzx  eax,al
c0007d0f:	39 c2                	cmp    edx,eax
c0007d11:	75 39                	jne    c0007d4c <netif_find+0x7c>
c0007d13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d17:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d1d:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007d20:	0f be d2             	movsx  edx,dl
c0007d23:	0f be c0             	movsx  eax,al
c0007d26:	39 c2                	cmp    edx,eax
c0007d28:	75 22                	jne    c0007d4c <netif_find+0x7c>
c0007d2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d2e:	83 c0 01             	add    eax,0x1
c0007d31:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d37:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007d3a:	0f be d2             	movsx  edx,dl
c0007d3d:	0f be c0             	movsx  eax,al
c0007d40:	39 c2                	cmp    edx,eax
c0007d42:	75 08                	jne    c0007d4c <netif_find+0x7c>
c0007d44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d48:	eb 1a                	jmp    c0007d64 <netif_find+0x94>
c0007d4a:	66 90                	xchg   ax,ax
c0007d4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d50:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d56:	66 90                	xchg   ax,ax
c0007d58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007d5d:	75 a1                	jne    c0007d00 <netif_find+0x30>
c0007d5f:	b8 00 00 00 00       	mov    eax,0x0
c0007d64:	83 c4 10             	add    esp,0x10
c0007d67:	c3                   	ret    

c0007d68 <netif_set_ipaddr>:
c0007d68:	83 ec 1c             	sub    esp,0x1c
c0007d6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007d6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d78:	39 c2                	cmp    edx,eax
c0007d7a:	0f 84 bc 00 00 00    	je     c0007e3c <netif_set_ipaddr+0xd4>
c0007d80:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007d85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d89:	eb 45                	jmp    c0007dd0 <netif_set_ipaddr+0x68>
c0007d8b:	90                   	nop
c0007d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d90:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d99:	39 c2                	cmp    edx,eax
c0007d9b:	75 27                	jne    c0007dc4 <netif_set_ipaddr+0x5c>
c0007d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007da1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007da4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007da8:	83 ec 0c             	sub    esp,0xc
c0007dab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007daf:	e8 8c 36 00 00       	call   c000b440 <tcp_abort>
c0007db4:	83 c4 10             	add    esp,0x10
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007dbf:	eb 0f                	jmp    c0007dd0 <netif_set_ipaddr+0x68>
c0007dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0007dc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007dcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007dcf:	90                   	nop
c0007dd0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007dd5:	75 b5                	jne    c0007d8c <netif_set_ipaddr+0x24>
c0007dd7:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007de0:	eb 52                	jmp    c0007e34 <netif_set_ipaddr+0xcc>
c0007de2:	66 90                	xchg   ax,ax
c0007de4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007de8:	85 c0                	test   eax,eax
c0007dea:	74 3c                	je     c0007e28 <netif_set_ipaddr+0xc0>
c0007dec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007df0:	8b 00                	mov    eax,DWORD PTR [eax]
c0007df2:	85 c0                	test   eax,eax
c0007df4:	74 32                	je     c0007e28 <netif_set_ipaddr+0xc0>
c0007df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0007dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e03:	39 c2                	cmp    edx,eax
c0007e05:	75 21                	jne    c0007e28 <netif_set_ipaddr+0xc0>
c0007e07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e0c:	74 0a                	je     c0007e18 <netif_set_ipaddr+0xb0>
c0007e0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e12:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e14:	eb 0a                	jmp    c0007e20 <netif_set_ipaddr+0xb8>
c0007e16:	66 90                	xchg   ax,ax
c0007e18:	b8 00 00 00 00       	mov    eax,0x0
c0007e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0007e20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e24:	89 02                	mov    DWORD PTR [edx],eax
c0007e26:	66 90                	xchg   ax,ax
c0007e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e33:	90                   	nop
c0007e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e39:	75 a9                	jne    c0007de4 <netif_set_ipaddr+0x7c>
c0007e3b:	90                   	nop
c0007e3c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e41:	74 09                	je     c0007e4c <netif_set_ipaddr+0xe4>
c0007e43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e47:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e49:	eb 09                	jmp    c0007e54 <netif_set_ipaddr+0xec>
c0007e4b:	90                   	nop
c0007e4c:	b8 00 00 00 00       	mov    eax,0x0
c0007e51:	8d 76 00             	lea    esi,[esi+0x0]
c0007e54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007e58:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007e5b:	90                   	nop
c0007e5c:	83 c4 1c             	add    esp,0x1c
c0007e5f:	c3                   	ret    

c0007e60 <netif_set_gw>:
c0007e60:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e65:	74 09                	je     c0007e70 <netif_set_gw+0x10>
c0007e67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e6d:	eb 09                	jmp    c0007e78 <netif_set_gw+0x18>
c0007e6f:	90                   	nop
c0007e70:	b8 00 00 00 00       	mov    eax,0x0
c0007e75:	8d 76 00             	lea    esi,[esi+0x0]
c0007e78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e7c:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007e7f:	90                   	nop
c0007e80:	c3                   	ret    
c0007e81:	8d 76 00             	lea    esi,[esi+0x0]

c0007e84 <netif_set_netmask>:
c0007e84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e89:	74 09                	je     c0007e94 <netif_set_netmask+0x10>
c0007e8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e91:	eb 09                	jmp    c0007e9c <netif_set_netmask+0x18>
c0007e93:	90                   	nop
c0007e94:	b8 00 00 00 00       	mov    eax,0x0
c0007e99:	8d 76 00             	lea    esi,[esi+0x0]
c0007e9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007ea0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007ea3:	90                   	nop
c0007ea4:	c3                   	ret    
c0007ea5:	8d 76 00             	lea    esi,[esi+0x0]

c0007ea8 <netif_set_addr>:
c0007ea8:	83 ec 0c             	sub    esp,0xc
c0007eab:	83 ec 08             	sub    esp,0x8
c0007eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007eb6:	e8 ad fe ff ff       	call   c0007d68 <netif_set_ipaddr>
c0007ebb:	83 c4 10             	add    esp,0x10
c0007ebe:	83 ec 08             	sub    esp,0x8
c0007ec1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007ec5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ec9:	e8 b6 ff ff ff       	call   c0007e84 <netif_set_netmask>
c0007ece:	83 c4 10             	add    esp,0x10
c0007ed1:	83 ec 08             	sub    esp,0x8
c0007ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007edc:	e8 7f ff ff ff       	call   c0007e60 <netif_set_gw>
c0007ee1:	83 c4 10             	add    esp,0x10
c0007ee4:	90                   	nop
c0007ee5:	83 c4 0c             	add    esp,0xc
c0007ee8:	c3                   	ret    
c0007ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0007eec <netif_add>:
c0007eec:	83 ec 0c             	sub    esp,0xc
c0007eef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ef4:	75 16                	jne    c0007f0c <netif_add+0x20>
c0007ef6:	83 ec 08             	sub    esp,0x8
c0007ef9:	68 b4 01 03 c0       	push   0xc00301b4
c0007efe:	68 26 00 03 c0       	push   0xc0030026
c0007f03:	e8 bc 7f 01 00       	call   c001fec4 <CPrintf>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	90                   	nop
c0007f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f1b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f26:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f31:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007f3d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007f40:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007f45:	8d 50 01             	lea    edx,[eax+0x1]
c0007f48:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007f4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f52:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007f5d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f70:	e8 33 ff ff ff       	call   c0007ea8 <netif_set_addr>
c0007f75:	83 c4 10             	add    esp,0x10
c0007f78:	83 ec 0c             	sub    esp,0xc
c0007f7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f83:	ff d0                	call   eax
c0007f85:	83 c4 10             	add    esp,0x10
c0007f88:	0f be c0             	movsx  eax,al
c0007f8b:	85 c0                	test   eax,eax
c0007f8d:	74 09                	je     c0007f98 <netif_add+0xac>
c0007f8f:	b8 00 00 00 00       	mov    eax,0x0
c0007f94:	eb 1e                	jmp    c0007fb4 <netif_add+0xc8>
c0007f96:	66 90                	xchg   ax,ax
c0007f98:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa2:	89 10                	mov    DWORD PTR [eax],edx
c0007fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa8:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0007fb4:	83 c4 0c             	add    esp,0xc
c0007fb7:	c3                   	ret    

c0007fb8 <netif_set_default>:
c0007fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fbc:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007fc1:	90                   	nop
c0007fc2:	c3                   	ret    
c0007fc3:	90                   	nop

c0007fc4 <netif_set_up>:
c0007fc4:	83 ec 0c             	sub    esp,0xc
c0007fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fcb:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fce:	0f b6 c0             	movzx  eax,al
c0007fd1:	83 e0 01             	and    eax,0x1
c0007fd4:	75 4a                	jne    c0008020 <netif_set_up+0x5c>
c0007fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fda:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fdd:	83 c8 01             	or     eax,0x1
c0007fe0:	88 c2                	mov    dl,al
c0007fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe6:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fed:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ff0:	0f b6 c0             	movzx  eax,al
c0007ff3:	83 e0 10             	and    eax,0x10
c0007ff6:	74 28                	je     c0008020 <netif_set_up+0x5c>
c0007ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ffc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fff:	0f b6 c0             	movzx  eax,al
c0008002:	83 e0 20             	and    eax,0x20
c0008005:	74 19                	je     c0008020 <netif_set_up+0x5c>
c0008007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000800b:	83 c0 04             	add    eax,0x4
c000800e:	83 ec 08             	sub    esp,0x8
c0008011:	50                   	push   eax
c0008012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008016:	e8 55 a6 00 00       	call   c0012670 <etharp_request>
c000801b:	83 c4 10             	add    esp,0x10
c000801e:	66 90                	xchg   ax,ax
c0008020:	90                   	nop
c0008021:	83 c4 0c             	add    esp,0xc
c0008024:	c3                   	ret    
c0008025:	8d 76 00             	lea    esi,[esi+0x0]

c0008028 <netif_set_down>:
c0008028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000802c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000802f:	0f b6 c0             	movzx  eax,al
c0008032:	83 e0 01             	and    eax,0x1
c0008035:	74 15                	je     c000804c <netif_set_down+0x24>
c0008037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000803b:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000803e:	83 e0 fe             	and    eax,0xfffffffe
c0008041:	88 c2                	mov    dl,al
c0008043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008047:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c000804a:	66 90                	xchg   ax,ax
c000804c:	90                   	nop
c000804d:	c3                   	ret    
c000804e:	66 90                	xchg   ax,ax

c0008050 <netif_remove>:
c0008050:	83 ec 10             	sub    esp,0x10
c0008053:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008058:	0f 84 92 00 00 00    	je     c00080f0 <netif_remove+0xa0>
c000805e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008062:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008065:	83 e0 01             	and    eax,0x1
c0008068:	0f b6 c0             	movzx  eax,al
c000806b:	85 c0                	test   eax,eax
c000806d:	74 0d                	je     c000807c <netif_remove+0x2c>
c000806f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008073:	e8 b0 ff ff ff       	call   c0008028 <netif_set_down>
c0008078:	83 c4 04             	add    esp,0x4
c000807b:	90                   	nop
c000807c:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0008081:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0008085:	75 0d                	jne    c0008094 <netif_remove+0x44>
c0008087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000808b:	8b 00                	mov    eax,DWORD PTR [eax]
c000808d:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0008092:	eb 44                	jmp    c00080d8 <netif_remove+0x88>
c0008094:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0008099:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000809d:	eb 29                	jmp    c00080c8 <netif_remove+0x78>
c000809f:	90                   	nop
c00080a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00080a6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080aa:	75 10                	jne    c00080bc <netif_remove+0x6c>
c00080ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00080b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00080b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080b6:	89 10                	mov    DWORD PTR [eax],edx
c00080b8:	eb 16                	jmp    c00080d0 <netif_remove+0x80>
c00080ba:	66 90                	xchg   ax,ax
c00080bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00080c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080c6:	66 90                	xchg   ax,ax
c00080c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080cd:	75 d1                	jne    c00080a0 <netif_remove+0x50>
c00080cf:	90                   	nop
c00080d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080d5:	74 1d                	je     c00080f4 <netif_remove+0xa4>
c00080d7:	90                   	nop
c00080d8:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00080dd:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080e1:	75 15                	jne    c00080f8 <netif_remove+0xa8>
c00080e3:	6a 00                	push   0x0
c00080e5:	e8 ce fe ff ff       	call   c0007fb8 <netif_set_default>
c00080ea:	83 c4 04             	add    esp,0x4
c00080ed:	eb 09                	jmp    c00080f8 <netif_remove+0xa8>
c00080ef:	90                   	nop
c00080f0:	90                   	nop
c00080f1:	eb 05                	jmp    c00080f8 <netif_remove+0xa8>
c00080f3:	90                   	nop
c00080f4:	90                   	nop
c00080f5:	8d 76 00             	lea    esi,[esi+0x0]
c00080f8:	83 c4 10             	add    esp,0x10
c00080fb:	c3                   	ret    

c00080fc <netif_set_link_up>:
c00080fc:	83 ec 0c             	sub    esp,0xc
c00080ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008103:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008106:	0f b6 c0             	movzx  eax,al
c0008109:	83 e0 10             	and    eax,0x10
c000810c:	75 4a                	jne    c0008158 <netif_set_link_up+0x5c>
c000810e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008112:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008115:	83 c8 10             	or     eax,0x10
c0008118:	88 c2                	mov    dl,al
c000811a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811e:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008125:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008128:	0f b6 c0             	movzx  eax,al
c000812b:	83 e0 01             	and    eax,0x1
c000812e:	74 28                	je     c0008158 <netif_set_link_up+0x5c>
c0008130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008134:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008137:	0f b6 c0             	movzx  eax,al
c000813a:	83 e0 20             	and    eax,0x20
c000813d:	74 19                	je     c0008158 <netif_set_link_up+0x5c>
c000813f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008143:	83 c0 04             	add    eax,0x4
c0008146:	83 ec 08             	sub    esp,0x8
c0008149:	50                   	push   eax
c000814a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000814e:	e8 1d a5 00 00       	call   c0012670 <etharp_request>
c0008153:	83 c4 10             	add    esp,0x10
c0008156:	66 90                	xchg   ax,ax
c0008158:	90                   	nop
c0008159:	83 c4 0c             	add    esp,0xc
c000815c:	c3                   	ret    
c000815d:	8d 76 00             	lea    esi,[esi+0x0]

c0008160 <netif_set_link_down>:
c0008160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008164:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008167:	0f b6 c0             	movzx  eax,al
c000816a:	83 e0 10             	and    eax,0x10
c000816d:	74 15                	je     c0008184 <netif_set_link_down+0x24>
c000816f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008173:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008176:	83 e0 ef             	and    eax,0xffffffef
c0008179:	88 c2                	mov    dl,al
c000817b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000817f:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008182:	66 90                	xchg   ax,ax
c0008184:	90                   	nop
c0008185:	c3                   	ret    
c0008186:	66 90                	xchg   ax,ax

c0008188 <pbuf_free_ooseq>:
c0008188:	83 ec 1c             	sub    esp,0x1c
c000818b:	e8 24 7d 01 00       	call   c001feb4 <CLockScheduler>
c0008190:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0008197:	e8 fc 7c 01 00       	call   c001fe98 <CUnlockScheduler>
c000819c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c00081a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081a5:	eb 41                	jmp    c00081e8 <pbuf_free_ooseq+0x60>
c00081a7:	90                   	nop
c00081a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081ac:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081b2:	85 c0                	test   eax,eax
c00081b4:	74 26                	je     c00081dc <pbuf_free_ooseq+0x54>
c00081b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081ba:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081c0:	83 ec 0c             	sub    esp,0xc
c00081c3:	50                   	push   eax
c00081c4:	e8 1b 20 00 00       	call   c000a1e4 <tcp_segs_free>
c00081c9:	83 c4 10             	add    esp,0x10
c00081cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081d0:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c00081da:	eb 14                	jmp    c00081f0 <pbuf_free_ooseq+0x68>
c00081dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00081e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081e7:	90                   	nop
c00081e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00081ed:	75 b9                	jne    c00081a8 <pbuf_free_ooseq+0x20>
c00081ef:	90                   	nop
c00081f0:	83 c4 1c             	add    esp,0x1c
c00081f3:	c3                   	ret    

c00081f4 <pbuf_pool_is_empty>:
c00081f4:	83 ec 1c             	sub    esp,0x1c
c00081f7:	e8 b8 7c 01 00       	call   c001feb4 <CLockScheduler>
c00081fc:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0008201:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008205:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c000820c:	e8 87 7c 01 00       	call   c001fe98 <CUnlockScheduler>
c0008211:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008216:	85 c0                	test   eax,eax
c0008218:	75 2e                	jne    c0008248 <pbuf_pool_is_empty+0x54>
c000821a:	83 ec 04             	sub    esp,0x4
c000821d:	6a 00                	push   0x0
c000821f:	6a 00                	push   0x0
c0008221:	68 88 81 00 c0       	push   0xc0008188
c0008226:	e8 5d 8a ff ff       	call   c0000c88 <tcpip_callback_with_block>
c000822b:	83 c4 10             	add    esp,0x10
c000822e:	0f be c0             	movsx  eax,al
c0008231:	85 c0                	test   eax,eax
c0008233:	74 13                	je     c0008248 <pbuf_pool_is_empty+0x54>
c0008235:	e8 7a 7c 01 00       	call   c001feb4 <CLockScheduler>
c000823a:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0008241:	e8 52 7c 01 00       	call   c001fe98 <CUnlockScheduler>
c0008246:	66 90                	xchg   ax,ax
c0008248:	90                   	nop
c0008249:	83 c4 1c             	add    esp,0x1c
c000824c:	c3                   	ret    
c000824d:	8d 76 00             	lea    esi,[esi+0x0]

c0008250 <pbuf_alloced_custom>:
c0008250:	83 ec 2c             	sub    esp,0x2c
c0008253:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008257:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000825b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008260:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008265:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c000826c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008271:	74 29                	je     c000829c <pbuf_alloced_custom+0x4c>
c0008273:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008278:	74 12                	je     c000828c <pbuf_alloced_custom+0x3c>
c000827a:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c000827f:	74 2b                	je     c00082ac <pbuf_alloced_custom+0x5c>
c0008281:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c0008286:	74 54                	je     c00082dc <pbuf_alloced_custom+0x8c>
c0008288:	eb 32                	jmp    c00082bc <pbuf_alloced_custom+0x6c>
c000828a:	66 90                	xchg   ax,ax
c000828c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008291:	83 c0 14             	add    eax,0x14
c0008294:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008299:	8d 76 00             	lea    esi,[esi+0x0]
c000829c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00082a1:	83 c0 14             	add    eax,0x14
c00082a4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00082a9:	8d 76 00             	lea    esi,[esi+0x0]
c00082ac:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00082b1:	83 c0 0e             	add    eax,0xe
c00082b4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00082b9:	eb 25                	jmp    c00082e0 <pbuf_alloced_custom+0x90>
c00082bb:	90                   	nop
c00082bc:	83 ec 08             	sub    esp,0x8
c00082bf:	68 cc 01 03 c0       	push   0xc00301cc
c00082c4:	68 26 00 03 c0       	push   0xc0030026
c00082c9:	e8 f6 7b 01 00       	call   c001fec4 <CPrintf>
c00082ce:	83 c4 10             	add    esp,0x10
c00082d1:	b8 00 00 00 00       	mov    eax,0x0
c00082d6:	e9 95 00 00 00       	jmp    c0008370 <pbuf_alloced_custom+0x120>
c00082db:	90                   	nop
c00082dc:	90                   	nop
c00082dd:	8d 76 00             	lea    esi,[esi+0x0]
c00082e0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082e5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00082ea:	01 c2                	add    edx,eax
c00082ec:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00082f1:	39 c2                	cmp    edx,eax
c00082f3:	7d 07                	jge    c00082fc <pbuf_alloced_custom+0xac>
c00082f5:	b8 00 00 00 00       	mov    eax,0x0
c00082fa:	eb 74                	jmp    c0008370 <pbuf_alloced_custom+0x120>
c00082fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008300:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008306:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000830b:	74 17                	je     c0008324 <pbuf_alloced_custom+0xd4>
c000830d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008312:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008316:	01 c2                	add    edx,eax
c0008318:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000831c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000831f:	eb 0f                	jmp    c0008330 <pbuf_alloced_custom+0xe0>
c0008321:	8d 76 00             	lea    esi,[esi+0x0]
c0008324:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008328:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000832f:	90                   	nop
c0008330:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008334:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c0008338:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000833c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008340:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008344:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008348:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000834b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000834f:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008353:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008357:	88 c2                	mov    dl,al
c0008359:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000835d:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008360:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008364:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000836a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000836e:	66 90                	xchg   ax,ax
c0008370:	83 c4 2c             	add    esp,0x2c
c0008373:	c3                   	ret    

c0008374 <pbuf_header>:
c0008374:	83 ec 2c             	sub    esp,0x2c
c0008377:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000837b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008380:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008385:	75 15                	jne    c000839c <pbuf_header+0x28>
c0008387:	83 ec 08             	sub    esp,0x8
c000838a:	68 56 04 03 c0       	push   0xc0030456
c000838f:	68 26 00 03 c0       	push   0xc0030026
c0008394:	e8 2b 7b 01 00       	call   c001fec4 <CPrintf>
c0008399:	83 c4 10             	add    esp,0x10
c000839c:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00083a1:	85 c0                	test   eax,eax
c00083a3:	74 07                	je     c00083ac <pbuf_header+0x38>
c00083a5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00083aa:	75 08                	jne    c00083b4 <pbuf_header+0x40>
c00083ac:	b0 00                	mov    al,0x0
c00083ae:	e9 5d 01 00 00       	jmp    c0008510 <pbuf_header+0x19c>
c00083b3:	90                   	nop
c00083b4:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00083b9:	85 c0                	test   eax,eax
c00083bb:	79 3b                	jns    c00083f8 <pbuf_header+0x84>
c00083bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c1:	f7 d8                	neg    eax
c00083c3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083cc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00083d0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00083d5:	0f b7 c0             	movzx  eax,ax
c00083d8:	39 c2                	cmp    edx,eax
c00083da:	76 28                	jbe    c0008404 <pbuf_header+0x90>
c00083dc:	83 ec 08             	sub    esp,0x8
c00083df:	68 a7 03 03 c0       	push   0xc00303a7
c00083e4:	68 26 00 03 c0       	push   0xc0030026
c00083e9:	e8 d6 7a 01 00       	call   c001fec4 <CPrintf>
c00083ee:	83 c4 10             	add    esp,0x10
c00083f1:	b0 01                	mov    al,0x1
c00083f3:	e9 18 01 00 00       	jmp    c0008510 <pbuf_header+0x19c>
c00083f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083fc:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008401:	8d 76 00             	lea    esi,[esi+0x0]
c0008404:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008408:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000840b:	0f b6 c0             	movzx  eax,al
c000840e:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0008413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008417:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000841a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000841e:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008423:	85 c0                	test   eax,eax
c0008425:	74 0d                	je     c0008434 <pbuf_header+0xc0>
c0008427:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000842c:	83 f8 03             	cmp    eax,0x3
c000842f:	75 3f                	jne    c0008470 <pbuf_header+0xfc>
c0008431:	8d 76 00             	lea    esi,[esi+0x0]
c0008434:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008438:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000843b:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008440:	f7 da                	neg    edx
c0008442:	01 c2                	add    edx,eax
c0008444:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008448:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000844b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000844f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008452:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008456:	83 c2 10             	add    edx,0x10
c0008459:	39 d0                	cmp    eax,edx
c000845b:	73 7f                	jae    c00084dc <pbuf_header+0x168>
c000845d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008461:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008465:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008468:	b0 01                	mov    al,0x1
c000846a:	e9 a1 00 00 00       	jmp    c0008510 <pbuf_header+0x19c>
c000846f:	90                   	nop
c0008470:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008475:	83 f8 02             	cmp    eax,0x2
c0008478:	74 0a                	je     c0008484 <pbuf_header+0x110>
c000847a:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000847f:	83 f8 01             	cmp    eax,0x1
c0008482:	75 3c                	jne    c00084c0 <pbuf_header+0x14c>
c0008484:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008489:	85 c0                	test   eax,eax
c000848b:	79 2f                	jns    c00084bc <pbuf_header+0x148>
c000848d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008491:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008495:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000849a:	0f b7 c0             	movzx  eax,ax
c000849d:	39 c2                	cmp    edx,eax
c000849f:	77 1b                	ja     c00084bc <pbuf_header+0x148>
c00084a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00084a8:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00084ad:	f7 da                	neg    edx
c00084af:	01 c2                	add    edx,eax
c00084b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00084b8:	eb 22                	jmp    c00084dc <pbuf_header+0x168>
c00084ba:	66 90                	xchg   ax,ax
c00084bc:	b0 01                	mov    al,0x1
c00084be:	eb 50                	jmp    c0008510 <pbuf_header+0x19c>
c00084c0:	83 ec 08             	sub    esp,0x8
c00084c3:	68 c5 03 03 c0       	push   0xc00303c5
c00084c8:	68 26 00 03 c0       	push   0xc0030026
c00084cd:	e8 f2 79 01 00       	call   c001fec4 <CPrintf>
c00084d2:	83 c4 10             	add    esp,0x10
c00084d5:	b0 01                	mov    al,0x1
c00084d7:	eb 37                	jmp    c0008510 <pbuf_header+0x19c>
c00084d9:	8d 76 00             	lea    esi,[esi+0x0]
c00084dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084e0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00084e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084e8:	01 d0                	add    eax,edx
c00084ea:	89 c2                	mov    edx,eax
c00084ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084f0:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00084f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084f8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00084fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ff:	01 d0                	add    eax,edx
c0008501:	89 c2                	mov    edx,eax
c0008503:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008507:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000850b:	b0 00                	mov    al,0x0
c000850d:	8d 76 00             	lea    esi,[esi+0x0]
c0008510:	83 c4 2c             	add    esp,0x2c
c0008513:	c3                   	ret    

c0008514 <pbuf_free>:
c0008514:	83 ec 1c             	sub    esp,0x1c
c0008517:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000851c:	75 26                	jne    c0008544 <pbuf_free+0x30>
c000851e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008523:	75 17                	jne    c000853c <pbuf_free+0x28>
c0008525:	83 ec 08             	sub    esp,0x8
c0008528:	68 56 04 03 c0       	push   0xc0030456
c000852d:	68 26 00 03 c0       	push   0xc0030026
c0008532:	e8 8d 79 01 00       	call   c001fec4 <CPrintf>
c0008537:	83 c4 10             	add    esp,0x10
c000853a:	66 90                	xchg   ax,ax
c000853c:	b0 00                	mov    al,0x0
c000853e:	e9 a9 01 00 00       	jmp    c00086ec <pbuf_free+0x1d8>
c0008543:	90                   	nop
c0008544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008548:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000854b:	0f b6 c0             	movzx  eax,al
c000854e:	85 c0                	test   eax,eax
c0008550:	74 42                	je     c0008594 <pbuf_free+0x80>
c0008552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008556:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008559:	0f b6 c0             	movzx  eax,al
c000855c:	83 f8 01             	cmp    eax,0x1
c000855f:	74 33                	je     c0008594 <pbuf_free+0x80>
c0008561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008565:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008568:	0f b6 c0             	movzx  eax,al
c000856b:	83 f8 02             	cmp    eax,0x2
c000856e:	74 24                	je     c0008594 <pbuf_free+0x80>
c0008570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008574:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008577:	0f b6 c0             	movzx  eax,al
c000857a:	83 f8 03             	cmp    eax,0x3
c000857d:	74 15                	je     c0008594 <pbuf_free+0x80>
c000857f:	83 ec 08             	sub    esp,0x8
c0008582:	68 d3 03 03 c0       	push   0xc00303d3
c0008587:	68 26 00 03 c0       	push   0xc0030026
c000858c:	e8 33 79 01 00       	call   c001fec4 <CPrintf>
c0008591:	83 c4 10             	add    esp,0x10
c0008594:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008599:	e9 3e 01 00 00       	jmp    c00086dc <pbuf_free+0x1c8>
c000859e:	66 90                	xchg   ax,ax
c00085a0:	e8 0f 79 01 00       	call   c001feb4 <CLockScheduler>
c00085a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085a9:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085ad:	0f b7 c0             	movzx  eax,ax
c00085b0:	85 c0                	test   eax,eax
c00085b2:	75 18                	jne    c00085cc <pbuf_free+0xb8>
c00085b4:	83 ec 08             	sub    esp,0x8
c00085b7:	68 e8 03 03 c0       	push   0xc00303e8
c00085bc:	68 26 00 03 c0       	push   0xc0030026
c00085c1:	e8 fe 78 01 00       	call   c001fec4 <CPrintf>
c00085c6:	83 c4 10             	add    esp,0x10
c00085c9:	8d 76 00             	lea    esi,[esi+0x0]
c00085cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085d0:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085d4:	83 e8 01             	sub    eax,0x1
c00085d7:	89 c2                	mov    edx,eax
c00085d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085dd:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c00085e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085e5:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085e9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00085ee:	e8 a5 78 01 00       	call   c001fe98 <CUnlockScheduler>
c00085f3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085f8:	85 c0                	test   eax,eax
c00085fa:	0f 85 d4 00 00 00    	jne    c00086d4 <pbuf_free+0x1c0>
c0008600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008604:	8b 00                	mov    eax,DWORD PTR [eax]
c0008606:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000860a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000860e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008611:	0f b6 c0             	movzx  eax,al
c0008614:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000861d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008620:	0f b6 c0             	movzx  eax,al
c0008623:	83 e0 02             	and    eax,0x2
c0008626:	74 3c                	je     c0008664 <pbuf_free+0x150>
c0008628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000862c:	89 04 24             	mov    DWORD PTR [esp],eax
c000862f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008632:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008635:	85 c0                	test   eax,eax
c0008637:	75 17                	jne    c0008650 <pbuf_free+0x13c>
c0008639:	83 ec 08             	sub    esp,0x8
c000863c:	68 f0 01 03 c0       	push   0xc00301f0
c0008641:	68 26 00 03 c0       	push   0xc0030026
c0008646:	e8 79 78 01 00       	call   c001fec4 <CPrintf>
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	66 90                	xchg   ax,ax
c0008650:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008653:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008656:	83 ec 0c             	sub    esp,0xc
c0008659:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000865d:	ff d0                	call   eax
c000865f:	83 c4 10             	add    esp,0x10
c0008662:	eb 58                	jmp    c00086bc <pbuf_free+0x1a8>
c0008664:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008669:	83 f8 03             	cmp    eax,0x3
c000866c:	75 16                	jne    c0008684 <pbuf_free+0x170>
c000866e:	83 ec 08             	sub    esp,0x8
c0008671:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008675:	6a 0d                	push   0xd
c0008677:	e8 d8 f5 ff ff       	call   c0007c54 <memp_free>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	eb 3b                	jmp    c00086bc <pbuf_free+0x1a8>
c0008681:	8d 76 00             	lea    esi,[esi+0x0]
c0008684:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008689:	83 f8 01             	cmp    eax,0x1
c000868c:	74 0a                	je     c0008698 <pbuf_free+0x184>
c000868e:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008693:	83 f8 02             	cmp    eax,0x2
c0008696:	75 14                	jne    c00086ac <pbuf_free+0x198>
c0008698:	83 ec 08             	sub    esp,0x8
c000869b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000869f:	6a 0c                	push   0xc
c00086a1:	e8 ae f5 ff ff       	call   c0007c54 <memp_free>
c00086a6:	83 c4 10             	add    esp,0x10
c00086a9:	eb 11                	jmp    c00086bc <pbuf_free+0x1a8>
c00086ab:	90                   	nop
c00086ac:	83 ec 0c             	sub    esp,0xc
c00086af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00086b3:	e8 74 eb ff ff       	call   c000722c <mem_free>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	90                   	nop
c00086bc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086c0:	83 c0 01             	add    eax,0x1
c00086c3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00086c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086cf:	eb 0b                	jmp    c00086dc <pbuf_free+0x1c8>
c00086d1:	8d 76 00             	lea    esi,[esi+0x0]
c00086d4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00086dc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00086e1:	0f 85 b9 fe ff ff    	jne    c00085a0 <pbuf_free+0x8c>
c00086e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086eb:	90                   	nop
c00086ec:	83 c4 1c             	add    esp,0x1c
c00086ef:	c3                   	ret    

c00086f0 <pbuf_alloc>:
c00086f0:	83 ec 3c             	sub    esp,0x3c
c00086f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00086f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00086fc:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0008703:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c0008708:	74 2a                	je     c0008734 <pbuf_alloc+0x44>
c000870a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000870f:	74 13                	je     c0008724 <pbuf_alloc+0x34>
c0008711:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c0008716:	74 2c                	je     c0008744 <pbuf_alloc+0x54>
c0008718:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c000871d:	74 55                	je     c0008774 <pbuf_alloc+0x84>
c000871f:	eb 33                	jmp    c0008754 <pbuf_alloc+0x64>
c0008721:	8d 76 00             	lea    esi,[esi+0x0]
c0008724:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008729:	83 c0 14             	add    eax,0x14
c000872c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008739:	83 c0 14             	add    eax,0x14
c000873c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008741:	8d 76 00             	lea    esi,[esi+0x0]
c0008744:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008749:	83 c0 0e             	add    eax,0xe
c000874c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008751:	eb 25                	jmp    c0008778 <pbuf_alloc+0x88>
c0008753:	90                   	nop
c0008754:	83 ec 08             	sub    esp,0x8
c0008757:	68 fe 03 03 c0       	push   0xc00303fe
c000875c:	68 26 00 03 c0       	push   0xc0030026
c0008761:	e8 5e 77 01 00       	call   c001fec4 <CPrintf>
c0008766:	83 c4 10             	add    esp,0x10
c0008769:	b8 00 00 00 00       	mov    eax,0x0
c000876e:	e9 71 03 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008773:	90                   	nop
c0008774:	90                   	nop
c0008775:	8d 76 00             	lea    esi,[esi+0x0]
c0008778:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c000877d:	77 11                	ja     c0008790 <pbuf_alloc+0xa0>
c000877f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008784:	0f 85 c6 02 00 00    	jne    c0008a50 <pbuf_alloc+0x360>
c000878a:	e9 41 02 00 00       	jmp    c00089d0 <pbuf_alloc+0x2e0>
c000878f:	90                   	nop
c0008790:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008795:	0f 85 15 03 00 00    	jne    c0008ab0 <pbuf_alloc+0x3c0>
c000879b:	83 ec 0c             	sub    esp,0xc
c000879e:	6a 0d                	push   0xd
c00087a0:	e8 83 f3 ff ff       	call   c0007b28 <memp_malloc>
c00087a5:	83 c4 10             	add    esp,0x10
c00087a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00087ac:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00087b1:	75 11                	jne    c00087c4 <pbuf_alloc+0xd4>
c00087b3:	e8 3c fa ff ff       	call   c00081f4 <pbuf_pool_is_empty>
c00087b8:	b8 00 00 00 00       	mov    eax,0x0
c00087bd:	e9 22 03 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c00087c2:	66 90                	xchg   ax,ax
c00087c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087c8:	88 c2                	mov    dl,al
c00087ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ce:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087db:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087e0:	8d 50 10             	lea    edx,[eax+0x10]
c00087e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e7:	01 c2                	add    edx,eax
c00087e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00087f8:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00087fc:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008801:	ba 4e 02 00 00       	mov    edx,0x24e
c0008806:	29 c2                	sub    edx,eax
c0008808:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000880d:	39 c2                	cmp    edx,eax
c000880f:	0f 4e c2             	cmovle eax,edx
c0008812:	89 c2                	mov    edx,eax
c0008814:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008818:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000881c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008820:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008823:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008827:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000882b:	0f b7 c0             	movzx  eax,ax
c000882e:	01 c2                	add    edx,eax
c0008830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008834:	05 5e 02 00 00       	add    eax,0x25e
c0008839:	39 c2                	cmp    edx,eax
c000883b:	76 17                	jbe    c0008854 <pbuf_alloc+0x164>
c000883d:	83 ec 08             	sub    esp,0x8
c0008840:	68 14 02 03 c0       	push   0xc0030214
c0008845:	68 26 00 03 c0       	push   0xc0030026
c000884a:	e8 75 76 01 00       	call   c001fec4 <CPrintf>
c000884f:	83 c4 10             	add    esp,0x10
c0008852:	66 90                	xchg   ax,ax
c0008854:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008859:	ba 4e 02 00 00       	mov    edx,0x24e
c000885e:	29 c2                	sub    edx,eax
c0008860:	89 d0                	mov    eax,edx
c0008862:	85 c0                	test   eax,eax
c0008864:	7f 16                	jg     c000887c <pbuf_alloc+0x18c>
c0008866:	83 ec 08             	sub    esp,0x8
c0008869:	68 48 02 03 c0       	push   0xc0030248
c000886e:	68 26 00 03 c0       	push   0xc0030026
c0008873:	e8 4c 76 01 00       	call   c001fec4 <CPrintf>
c0008878:	83 c4 10             	add    esp,0x10
c000887b:	90                   	nop
c000887c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008880:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008886:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000888a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000888e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008893:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008897:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000889b:	0f b7 c0             	movzx  eax,ax
c000889e:	29 c2                	sub    edx,eax
c00088a0:	89 d0                	mov    eax,edx
c00088a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00088a6:	e9 15 01 00 00       	jmp    c00089c0 <pbuf_alloc+0x2d0>
c00088ab:	90                   	nop
c00088ac:	83 ec 0c             	sub    esp,0xc
c00088af:	6a 0d                	push   0xd
c00088b1:	e8 72 f2 ff ff       	call   c0007b28 <memp_malloc>
c00088b6:	83 c4 10             	add    esp,0x10
c00088b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00088bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00088c2:	75 20                	jne    c00088e4 <pbuf_alloc+0x1f4>
c00088c4:	e8 2b f9 ff ff       	call   c00081f4 <pbuf_pool_is_empty>
c00088c9:	83 ec 0c             	sub    esp,0xc
c00088cc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00088d0:	e8 3f fc ff ff       	call   c0008514 <pbuf_free>
c00088d5:	83 c4 10             	add    esp,0x10
c00088d8:	b8 00 00 00 00       	mov    eax,0x0
c00088dd:	e9 02 02 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c00088e2:	66 90                	xchg   ax,ax
c00088e4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088e8:	88 c2                	mov    dl,al
c00088ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088ee:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088f5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00088f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008903:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008907:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000890b:	89 10                	mov    DWORD PTR [eax],edx
c000890d:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c0008915:	7e 15                	jle    c000892c <pbuf_alloc+0x23c>
c0008917:	83 ec 08             	sub    esp,0x8
c000891a:	68 19 04 03 c0       	push   0xc0030419
c000891f:	68 26 00 03 c0       	push   0xc0030026
c0008924:	e8 9b 75 01 00       	call   c001fec4 <CPrintf>
c0008929:	83 c4 10             	add    esp,0x10
c000892c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008930:	89 c2                	mov    edx,eax
c0008932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008936:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000893a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000893e:	0f b7 d0             	movzx  edx,ax
c0008941:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008947:	76 07                	jbe    c0008950 <pbuf_alloc+0x260>
c0008949:	b8 4e 02 00 00       	mov    eax,0x24e
c000894e:	66 90                	xchg   ax,ax
c0008950:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008954:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008958:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000895c:	8d 50 10             	lea    edx,[eax+0x10]
c000895f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008963:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000896a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000896d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008971:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008975:	0f b7 c0             	movzx  eax,ax
c0008978:	01 c2                	add    edx,eax
c000897a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000897e:	05 5e 02 00 00       	add    eax,0x25e
c0008983:	39 c2                	cmp    edx,eax
c0008985:	76 15                	jbe    c000899c <pbuf_alloc+0x2ac>
c0008987:	83 ec 08             	sub    esp,0x8
c000898a:	68 14 02 03 c0       	push   0xc0030214
c000898f:	68 26 00 03 c0       	push   0xc0030026
c0008994:	e8 2b 75 01 00       	call   c001fec4 <CPrintf>
c0008999:	83 c4 10             	add    esp,0x10
c000899c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089a0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00089a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089aa:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089ae:	0f b7 c0             	movzx  eax,ax
c00089b1:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c00089b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00089bd:	8d 76 00             	lea    esi,[esi+0x0]
c00089c0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00089c5:	0f 8f e1 fe ff ff    	jg     c00088ac <pbuf_alloc+0x1bc>
c00089cb:	e9 fc 00 00 00       	jmp    c0008acc <pbuf_alloc+0x3dc>
c00089d0:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c00089d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089d9:	01 d0                	add    eax,edx
c00089db:	83 c0 10             	add    eax,0x10
c00089de:	0f b7 c0             	movzx  eax,ax
c00089e1:	83 ec 0c             	sub    esp,0xc
c00089e4:	50                   	push   eax
c00089e5:	e8 76 ec ff ff       	call   c0007660 <mem_malloc>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00089f1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00089f6:	75 0c                	jne    c0008a04 <pbuf_alloc+0x314>
c00089f8:	b8 00 00 00 00       	mov    eax,0x0
c00089fd:	e9 e2 00 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008a02:	66 90                	xchg   ax,ax
c0008a04:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008a09:	8d 50 10             	lea    edx,[eax+0x10]
c0008a0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a10:	01 c2                	add    edx,eax
c0008a12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a16:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008a19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a21:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a29:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008a2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a30:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008a34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a42:	88 c2                	mov    dl,al
c0008a44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a48:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a4b:	eb 7f                	jmp    c0008acc <pbuf_alloc+0x3dc>
c0008a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0008a50:	83 ec 0c             	sub    esp,0xc
c0008a53:	6a 0c                	push   0xc
c0008a55:	e8 ce f0 ff ff       	call   c0007b28 <memp_malloc>
c0008a5a:	83 c4 10             	add    esp,0x10
c0008a5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008a61:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008a66:	75 08                	jne    c0008a70 <pbuf_alloc+0x380>
c0008a68:	b8 00 00 00 00       	mov    eax,0x0
c0008a6d:	eb 75                	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008a6f:	90                   	nop
c0008a70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a83:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a8b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008a8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a92:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008a96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008aa0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008aa4:	88 c2                	mov    dl,al
c0008aa6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008aaa:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008aad:	eb 1d                	jmp    c0008acc <pbuf_alloc+0x3dc>
c0008aaf:	90                   	nop
c0008ab0:	83 ec 08             	sub    esp,0x8
c0008ab3:	68 2d 04 03 c0       	push   0xc003042d
c0008ab8:	68 26 00 03 c0       	push   0xc0030026
c0008abd:	e8 02 74 01 00       	call   c001fec4 <CPrintf>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	b8 00 00 00 00       	mov    eax,0x0
c0008aca:	eb 18                	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008acc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ad0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008ad6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ada:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ae2:	66 90                	xchg   ax,ax
c0008ae4:	83 c4 3c             	add    esp,0x3c
c0008ae7:	c3                   	ret    

c0008ae8 <pbuf_realloc>:
c0008ae8:	83 ec 2c             	sub    esp,0x2c
c0008aeb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008aef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008af4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008af9:	75 15                	jne    c0008b10 <pbuf_realloc+0x28>
c0008afb:	83 ec 08             	sub    esp,0x8
c0008afe:	68 48 04 03 c0       	push   0xc0030448
c0008b03:	68 26 00 03 c0       	push   0xc0030026
c0008b08:	e8 b7 73 01 00       	call   c001fec4 <CPrintf>
c0008b0d:	83 c4 10             	add    esp,0x10
c0008b10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b14:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b17:	0f b6 c0             	movzx  eax,al
c0008b1a:	83 f8 03             	cmp    eax,0x3
c0008b1d:	74 41                	je     c0008b60 <pbuf_realloc+0x78>
c0008b1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b23:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b26:	0f b6 c0             	movzx  eax,al
c0008b29:	83 f8 01             	cmp    eax,0x1
c0008b2c:	74 32                	je     c0008b60 <pbuf_realloc+0x78>
c0008b2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b32:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b35:	0f b6 c0             	movzx  eax,al
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	74 24                	je     c0008b60 <pbuf_realloc+0x78>
c0008b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b40:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b43:	0f b6 c0             	movzx  eax,al
c0008b46:	83 f8 02             	cmp    eax,0x2
c0008b49:	74 15                	je     c0008b60 <pbuf_realloc+0x78>
c0008b4b:	83 ec 08             	sub    esp,0x8
c0008b4e:	68 60 04 03 c0       	push   0xc0030460
c0008b53:	68 26 00 03 c0       	push   0xc0030026
c0008b58:	e8 67 73 01 00       	call   c001fec4 <CPrintf>
c0008b5d:	83 c4 10             	add    esp,0x10
c0008b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b67:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b6c:	0f b7 c0             	movzx  eax,ax
c0008b6f:	39 c2                	cmp    edx,eax
c0008b71:	0f 83 71 01 00 00    	jae    c0008ce8 <pbuf_realloc+0x200>
c0008b77:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b83:	0f b7 c0             	movzx  eax,ax
c0008b86:	29 c2                	sub    edx,eax
c0008b88:	89 d0                	mov    eax,edx
c0008b8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b92:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b9f:	eb 7b                	jmp    c0008c1c <pbuf_realloc+0x134>
c0008ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0008ba4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ba8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008bac:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008bb1:	89 d1                	mov    ecx,edx
c0008bb3:	29 c1                	sub    ecx,eax
c0008bb5:	89 c8                	mov    eax,ecx
c0008bb7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008bbc:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008bc4:	7e 16                	jle    c0008bdc <pbuf_realloc+0xf4>
c0008bc6:	83 ec 08             	sub    esp,0x8
c0008bc9:	68 7b 04 03 c0       	push   0xc003047b
c0008bce:	68 26 00 03 c0       	push   0xc0030026
c0008bd3:	e8 ec 72 01 00       	call   c001fec4 <CPrintf>
c0008bd8:	83 c4 10             	add    esp,0x10
c0008bdb:	90                   	nop
c0008bdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008be0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008be3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008be7:	01 d0                	add    eax,edx
c0008be9:	89 c2                	mov    edx,eax
c0008beb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bef:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bfd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c02:	75 18                	jne    c0008c1c <pbuf_realloc+0x134>
c0008c04:	83 ec 08             	sub    esp,0x8
c0008c07:	68 8c 04 03 c0       	push   0xc003048c
c0008c0c:	68 26 00 03 c0       	push   0xc0030026
c0008c11:	e8 ae 72 01 00       	call   c001fec4 <CPrintf>
c0008c16:	83 c4 10             	add    esp,0x10
c0008c19:	8d 76 00             	lea    esi,[esi+0x0]
c0008c1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c20:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c24:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c29:	0f b7 c0             	movzx  eax,ax
c0008c2c:	39 c2                	cmp    edx,eax
c0008c2e:	0f 87 70 ff ff ff    	ja     c0008ba4 <pbuf_realloc+0xbc>
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008c3b:	0f b6 c0             	movzx  eax,al
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	75 5e                	jne    c0008ca0 <pbuf_realloc+0x1b8>
c0008c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c46:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c4a:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c4f:	0f b7 c0             	movzx  eax,ax
c0008c52:	39 c2                	cmp    edx,eax
c0008c54:	74 4a                	je     c0008ca0 <pbuf_realloc+0x1b8>
c0008c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008c61:	89 c2                	mov    edx,eax
c0008c63:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c68:	01 d0                	add    eax,edx
c0008c6a:	0f b7 c0             	movzx  eax,ax
c0008c6d:	83 ec 08             	sub    esp,0x8
c0008c70:	50                   	push   eax
c0008c71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c75:	e8 d6 e6 ff ff       	call   c0007350 <mem_trim>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c81:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c86:	75 18                	jne    c0008ca0 <pbuf_realloc+0x1b8>
c0008c88:	83 ec 08             	sub    esp,0x8
c0008c8b:	68 a4 04 03 c0       	push   0xc00304a4
c0008c90:	68 26 00 03 c0       	push   0xc0030026
c0008c95:	e8 2a 72 01 00       	call   c001fec4 <CPrintf>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0008ca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ca4:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008ca9:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008cad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008cb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb9:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008cbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cc3:	85 c0                	test   eax,eax
c0008cc5:	74 15                	je     c0008cdc <pbuf_realloc+0x1f4>
c0008cc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ccd:	83 ec 0c             	sub    esp,0xc
c0008cd0:	50                   	push   eax
c0008cd1:	e8 3e f8 ff ff       	call   c0008514 <pbuf_free>
c0008cd6:	83 c4 10             	add    esp,0x10
c0008cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ce0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ce6:	eb 04                	jmp    c0008cec <pbuf_realloc+0x204>
c0008ce8:	90                   	nop
c0008ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cec:	83 c4 2c             	add    esp,0x2c
c0008cef:	c3                   	ret    

c0008cf0 <pbuf_clen>:
c0008cf0:	83 ec 10             	sub    esp,0x10
c0008cf3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008cf8:	eb 1a                	jmp    c0008d14 <pbuf_clen+0x24>
c0008cfa:	66 90                	xchg   ax,ax
c0008cfc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008d00:	83 c0 01             	add    eax,0x1
c0008d03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008d07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008d11:	8d 76 00             	lea    esi,[esi+0x0]
c0008d14:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008d19:	75 e1                	jne    c0008cfc <pbuf_clen+0xc>
c0008d1b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008d1f:	83 c4 10             	add    esp,0x10
c0008d22:	c3                   	ret    
c0008d23:	90                   	nop

c0008d24 <pbuf_ref>:
c0008d24:	83 ec 0c             	sub    esp,0xc
c0008d27:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008d2c:	74 22                	je     c0008d50 <pbuf_ref+0x2c>
c0008d2e:	e8 81 71 01 00       	call   c001feb4 <CLockScheduler>
c0008d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d37:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008d3b:	83 c0 01             	add    eax,0x1
c0008d3e:	89 c2                	mov    edx,eax
c0008d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d44:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008d48:	e8 4b 71 01 00       	call   c001fe98 <CUnlockScheduler>
c0008d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d50:	90                   	nop
c0008d51:	83 c4 0c             	add    esp,0xc
c0008d54:	c3                   	ret    
c0008d55:	8d 76 00             	lea    esi,[esi+0x0]

c0008d58 <pbuf_cat>:
c0008d58:	83 ec 1c             	sub    esp,0x1c
c0008d5b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d60:	74 0a                	je     c0008d6c <pbuf_cat+0x14>
c0008d62:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d67:	75 1f                	jne    c0008d88 <pbuf_cat+0x30>
c0008d69:	8d 76 00             	lea    esi,[esi+0x0]
c0008d6c:	83 ec 08             	sub    esp,0x8
c0008d6f:	68 7c 02 03 c0       	push   0xc003027c
c0008d74:	68 26 00 03 c0       	push   0xc0030026
c0008d79:	e8 46 71 01 00       	call   c001fec4 <CPrintf>
c0008d7e:	83 c4 10             	add    esp,0x10
c0008d81:	e9 ae 00 00 00       	jmp    c0008e34 <pbuf_cat+0xdc>
c0008d86:	66 90                	xchg   ax,ax
c0008d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d90:	eb 26                	jmp    c0008db8 <pbuf_cat+0x60>
c0008d92:	66 90                	xchg   ax,ax
c0008d94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008da2:	01 d0                	add    eax,edx
c0008da4:	89 c2                	mov    edx,eax
c0008da6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008daa:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008dae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008db2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008db4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0008dbe:	85 c0                	test   eax,eax
c0008dc0:	75 d2                	jne    c0008d94 <pbuf_cat+0x3c>
c0008dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dcd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008dd1:	0f b7 d2             	movzx  edx,dx
c0008dd4:	0f b7 c0             	movzx  eax,ax
c0008dd7:	39 c2                	cmp    edx,eax
c0008dd9:	74 15                	je     c0008df0 <pbuf_cat+0x98>
c0008ddb:	83 ec 08             	sub    esp,0x8
c0008dde:	68 b4 02 03 c0       	push   0xc00302b4
c0008de3:	68 26 00 03 c0       	push   0xc0030026
c0008de8:	e8 d7 70 01 00       	call   c001fec4 <CPrintf>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008df4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008df6:	85 c0                	test   eax,eax
c0008df8:	74 16                	je     c0008e10 <pbuf_cat+0xb8>
c0008dfa:	83 ec 08             	sub    esp,0x8
c0008dfd:	68 c0 04 03 c0       	push   0xc00304c0
c0008e02:	68 26 00 03 c0       	push   0xc0030026
c0008e07:	e8 b8 70 01 00       	call   c001fec4 <CPrintf>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	90                   	nop
c0008e10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e14:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008e17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e1b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e1e:	01 d0                	add    eax,edx
c0008e20:	89 c2                	mov    edx,eax
c0008e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e26:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008e2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e32:	89 10                	mov    DWORD PTR [eax],edx
c0008e34:	83 c4 1c             	add    esp,0x1c
c0008e37:	c3                   	ret    

c0008e38 <pbuf_chain>:
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	83 ec 08             	sub    esp,0x8
c0008e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	e8 0d ff ff ff       	call   c0008d58 <pbuf_cat>
c0008e4b:	83 c4 10             	add    esp,0x10
c0008e4e:	83 ec 0c             	sub    esp,0xc
c0008e51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e55:	e8 ca fe ff ff       	call   c0008d24 <pbuf_ref>
c0008e5a:	83 c4 10             	add    esp,0x10
c0008e5d:	90                   	nop
c0008e5e:	83 c4 0c             	add    esp,0xc
c0008e61:	c3                   	ret    
c0008e62:	66 90                	xchg   ax,ax

c0008e64 <pbuf_dechain>:
c0008e64:	83 ec 1c             	sub    esp,0x1c
c0008e67:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e70:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e76:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008e7b:	0f 84 8b 00 00 00    	je     c0008f0c <pbuf_dechain+0xa8>
c0008e81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e88:	0f b7 d0             	movzx  edx,ax
c0008e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e92:	0f b7 c8             	movzx  ecx,ax
c0008e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e99:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e9d:	0f b7 c0             	movzx  eax,ax
c0008ea0:	29 c1                	sub    ecx,eax
c0008ea2:	89 c8                	mov    eax,ecx
c0008ea4:	39 c2                	cmp    edx,eax
c0008ea6:	74 18                	je     c0008ec0 <pbuf_dechain+0x5c>
c0008ea8:	83 ec 08             	sub    esp,0x8
c0008eab:	68 e4 02 03 c0       	push   0xc00302e4
c0008eb0:	68 26 00 03 c0       	push   0xc0030026
c0008eb5:	e8 0a 70 01 00       	call   c001fec4 <CPrintf>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0008ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ec4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ecb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ecf:	89 d1                	mov    ecx,edx
c0008ed1:	29 c1                	sub    ecx,eax
c0008ed3:	89 c8                	mov    eax,ecx
c0008ed5:	89 c2                	mov    edx,eax
c0008ed7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008edb:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eed:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ef5:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f00:	e8 0f f6 ff ff       	call   c0008514 <pbuf_free>
c0008f05:	83 c4 10             	add    esp,0x10
c0008f08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f10:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f17:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f1b:	0f b7 d2             	movzx  edx,dx
c0008f1e:	0f b7 c0             	movzx  eax,ax
c0008f21:	39 c2                	cmp    edx,eax
c0008f23:	74 17                	je     c0008f3c <pbuf_dechain+0xd8>
c0008f25:	83 ec 08             	sub    esp,0x8
c0008f28:	68 d0 04 03 c0       	push   0xc00304d0
c0008f2d:	68 26 00 03 c0       	push   0xc0030026
c0008f32:	e8 8d 6f 01 00       	call   c001fec4 <CPrintf>
c0008f37:	83 c4 10             	add    esp,0x10
c0008f3a:	66 90                	xchg   ax,ax
c0008f3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008f41:	85 c0                	test   eax,eax
c0008f43:	75 07                	jne    c0008f4c <pbuf_dechain+0xe8>
c0008f45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008f49:	eb 09                	jmp    c0008f54 <pbuf_dechain+0xf0>
c0008f4b:	90                   	nop
c0008f4c:	b8 00 00 00 00       	mov    eax,0x0
c0008f51:	8d 76 00             	lea    esi,[esi+0x0]
c0008f54:	83 c4 1c             	add    esp,0x1c
c0008f57:	c3                   	ret    

c0008f58 <pbuf_copy>:
c0008f58:	53                   	push   ebx
c0008f59:	83 ec 18             	sub    esp,0x18
c0008f5c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f63:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f6a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f6f:	74 1f                	je     c0008f90 <pbuf_copy+0x38>
c0008f71:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f76:	74 18                	je     c0008f90 <pbuf_copy+0x38>
c0008f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f7c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f86:	0f b7 d2             	movzx  edx,dx
c0008f89:	0f b7 c0             	movzx  eax,ax
c0008f8c:	39 c2                	cmp    edx,eax
c0008f8e:	73 1c                	jae    c0008fac <pbuf_copy+0x54>
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	68 08 03 03 c0       	push   0xc0030308
c0008f98:	68 26 00 03 c0       	push   0xc0030026
c0008f9d:	e8 22 6f 01 00       	call   c001fec4 <CPrintf>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	b0 f2                	mov    al,0xf2
c0008fa7:	e9 0c 02 00 00       	jmp    c00091b8 <pbuf_copy+0x260>
c0008fac:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008fb1:	75 15                	jne    c0008fc8 <pbuf_copy+0x70>
c0008fb3:	83 ec 08             	sub    esp,0x8
c0008fb6:	68 e5 04 03 c0       	push   0xc00304e5
c0008fbb:	68 26 00 03 c0       	push   0xc0030026
c0008fc0:	e8 ff 6e 01 00       	call   c001fec4 <CPrintf>
c0008fc5:	83 c4 10             	add    esp,0x10
c0008fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fcc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fd0:	0f b7 d0             	movzx  edx,ax
c0008fd3:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008fd8:	89 d1                	mov    ecx,edx
c0008fda:	29 c1                	sub    ecx,eax
c0008fdc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fe0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fe4:	0f b7 d0             	movzx  edx,ax
c0008fe7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008fec:	29 c2                	sub    edx,eax
c0008fee:	89 d0                	mov    eax,edx
c0008ff0:	39 c1                	cmp    ecx,eax
c0008ff2:	7c 1c                	jl     c0009010 <pbuf_copy+0xb8>
c0008ff4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ff8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009000:	89 d3                	mov    ebx,edx
c0009002:	29 c3                	sub    ebx,eax
c0009004:	89 d8                	mov    eax,ebx
c0009006:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000900b:	eb 1b                	jmp    c0009028 <pbuf_copy+0xd0>
c000900d:	8d 76 00             	lea    esi,[esi+0x0]
c0009010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009014:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009018:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000901d:	89 d3                	mov    ebx,edx
c000901f:	29 c3                	sub    ebx,eax
c0009021:	89 d8                	mov    eax,ebx
c0009023:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0009028:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000902d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009031:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009034:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009039:	01 d1                	add    ecx,edx
c000903b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000903f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0009042:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009047:	01 da                	add    edx,ebx
c0009049:	83 ec 04             	sub    esp,0x4
c000904c:	50                   	push   eax
c000904d:	51                   	push   ecx
c000904e:	52                   	push   edx
c000904f:	e8 26 73 ff ff       	call   c000037a <memcpy>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000905c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009061:	01 d0                	add    eax,edx
c0009063:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000906c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009071:	01 d0                	add    eax,edx
c0009073:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000907c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009080:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009085:	0f b7 c0             	movzx  eax,ax
c0009088:	39 c2                	cmp    edx,eax
c000908a:	76 18                	jbe    c00090a4 <pbuf_copy+0x14c>
c000908c:	83 ec 08             	sub    esp,0x8
c000908f:	68 f2 04 03 c0       	push   0xc00304f2
c0009094:	68 26 00 03 c0       	push   0xc0030026
c0009099:	e8 26 6e 01 00       	call   c001fec4 <CPrintf>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	8d 76 00             	lea    esi,[esi+0x0]
c00090a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090a8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090ac:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00090b1:	0f b7 c0             	movzx  eax,ax
c00090b4:	39 c2                	cmp    edx,eax
c00090b6:	75 14                	jne    c00090cc <pbuf_copy+0x174>
c00090b8:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00090bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	8d 76 00             	lea    esi,[esi+0x0]
c00090cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090d4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090d9:	0f b7 c0             	movzx  eax,ax
c00090dc:	39 c2                	cmp    edx,eax
c00090de:	76 18                	jbe    c00090f8 <pbuf_copy+0x1a0>
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	68 09 05 03 c0       	push   0xc0030509
c00090e8:	68 26 00 03 c0       	push   0xc0030026
c00090ed:	e8 d2 6d 01 00       	call   c001fec4 <CPrintf>
c00090f2:	83 c4 10             	add    esp,0x10
c00090f5:	8d 76 00             	lea    esi,[esi+0x0]
c00090f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090fc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009100:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009105:	0f b7 c0             	movzx  eax,ax
c0009108:	39 c2                	cmp    edx,eax
c000910a:	72 14                	jb     c0009120 <pbuf_copy+0x1c8>
c000910c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0009113:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009117:	8b 00                	mov    eax,DWORD PTR [eax]
c0009119:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000911d:	8d 76 00             	lea    esi,[esi+0x0]
c0009120:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009125:	74 3d                	je     c0009164 <pbuf_copy+0x20c>
c0009127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000912b:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000912f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009133:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009136:	0f b7 d2             	movzx  edx,dx
c0009139:	0f b7 c0             	movzx  eax,ax
c000913c:	39 c2                	cmp    edx,eax
c000913e:	75 24                	jne    c0009164 <pbuf_copy+0x20c>
c0009140:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	85 c0                	test   eax,eax
c0009148:	74 1a                	je     c0009164 <pbuf_copy+0x20c>
c000914a:	83 ec 08             	sub    esp,0x8
c000914d:	68 38 03 03 c0       	push   0xc0030338
c0009152:	68 26 00 03 c0       	push   0xc0030026
c0009157:	e8 68 6d 01 00       	call   c001fec4 <CPrintf>
c000915c:	83 c4 10             	add    esp,0x10
c000915f:	b0 fa                	mov    al,0xfa
c0009161:	eb 55                	jmp    c00091b8 <pbuf_copy+0x260>
c0009163:	90                   	nop
c0009164:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009169:	74 3d                	je     c00091a8 <pbuf_copy+0x250>
c000916b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000916f:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009177:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000917a:	0f b7 d2             	movzx  edx,dx
c000917d:	0f b7 c0             	movzx  eax,ax
c0009180:	39 c2                	cmp    edx,eax
c0009182:	75 24                	jne    c00091a8 <pbuf_copy+0x250>
c0009184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009188:	8b 00                	mov    eax,DWORD PTR [eax]
c000918a:	85 c0                	test   eax,eax
c000918c:	74 1a                	je     c00091a8 <pbuf_copy+0x250>
c000918e:	83 ec 08             	sub    esp,0x8
c0009191:	68 38 03 03 c0       	push   0xc0030338
c0009196:	68 26 00 03 c0       	push   0xc0030026
c000919b:	e8 24 6d 01 00       	call   c001fec4 <CPrintf>
c00091a0:	83 c4 10             	add    esp,0x10
c00091a3:	b0 fa                	mov    al,0xfa
c00091a5:	eb 11                	jmp    c00091b8 <pbuf_copy+0x260>
c00091a7:	90                   	nop
c00091a8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00091ad:	0f 85 f9 fd ff ff    	jne    c0008fac <pbuf_copy+0x54>
c00091b3:	b0 00                	mov    al,0x0
c00091b5:	8d 76 00             	lea    esi,[esi+0x0]
c00091b8:	83 c4 18             	add    esp,0x18
c00091bb:	5b                   	pop    ebx
c00091bc:	c3                   	ret    
c00091bd:	8d 76 00             	lea    esi,[esi+0x0]

c00091c0 <pbuf_copy_partial>:
c00091c0:	53                   	push   ebx
c00091c1:	83 ec 28             	sub    esp,0x28
c00091c4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00091c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00091cc:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00091d1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00091d6:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091dd:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091e2:	75 20                	jne    c0009204 <pbuf_copy_partial+0x44>
c00091e4:	83 ec 08             	sub    esp,0x8
c00091e7:	68 64 03 03 c0       	push   0xc0030364
c00091ec:	68 26 00 03 c0       	push   0xc0030026
c00091f1:	e8 ce 6c 01 00       	call   c001fec4 <CPrintf>
c00091f6:	83 c4 10             	add    esp,0x10
c00091f9:	b8 00 00 00 00       	mov    eax,0x0
c00091fe:	e9 59 01 00 00       	jmp    c000935c <pbuf_copy_partial+0x19c>
c0009203:	90                   	nop
c0009204:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009209:	75 21                	jne    c000922c <pbuf_copy_partial+0x6c>
c000920b:	83 ec 08             	sub    esp,0x8
c000920e:	68 84 03 03 c0       	push   0xc0030384
c0009213:	68 26 00 03 c0       	push   0xc0030026
c0009218:	e8 a7 6c 01 00       	call   c001fec4 <CPrintf>
c000921d:	83 c4 10             	add    esp,0x10
c0009220:	b8 00 00 00 00       	mov    eax,0x0
c0009225:	e9 32 01 00 00       	jmp    c000935c <pbuf_copy_partial+0x19c>
c000922a:	66 90                	xchg   ax,ax
c000922c:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0009233:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009238:	74 0a                	je     c0009244 <pbuf_copy_partial+0x84>
c000923a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000923f:	75 0f                	jne    c0009250 <pbuf_copy_partial+0x90>
c0009241:	8d 76 00             	lea    esi,[esi+0x0]
c0009244:	b8 00 00 00 00       	mov    eax,0x0
c0009249:	e9 0e 01 00 00       	jmp    c000935c <pbuf_copy_partial+0x19c>
c000924e:	66 90                	xchg   ax,ax
c0009250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009258:	e9 e3 00 00 00       	jmp    c0009340 <pbuf_copy_partial+0x180>
c000925d:	8d 76 00             	lea    esi,[esi+0x0]
c0009260:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0009265:	85 c0                	test   eax,eax
c0009267:	74 33                	je     c000929c <pbuf_copy_partial+0xdc>
c0009269:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000926d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009271:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009276:	0f b7 c0             	movzx  eax,ax
c0009279:	39 c2                	cmp    edx,eax
c000927b:	72 1f                	jb     c000929c <pbuf_copy_partial+0xdc>
c000927d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009281:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009285:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009289:	89 d3                	mov    ebx,edx
c000928b:	29 c3                	sub    ebx,eax
c000928d:	89 d8                	mov    eax,ebx
c000928f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009294:	e9 9b 00 00 00       	jmp    c0009334 <pbuf_copy_partial+0x174>
c0009299:	8d 76 00             	lea    esi,[esi+0x0]
c000929c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092a0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00092a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092a8:	89 d1                	mov    ecx,edx
c00092aa:	29 c1                	sub    ecx,eax
c00092ac:	89 c8                	mov    eax,ecx
c00092ae:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092b3:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c00092b8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00092bd:	39 c2                	cmp    edx,eax
c00092bf:	76 0b                	jbe    c00092cc <pbuf_copy_partial+0x10c>
c00092c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092c5:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092ca:	66 90                	xchg   ax,ax
c00092cc:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00092d5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00092d8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00092dd:	01 d1                	add    ecx,edx
c00092df:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c00092e4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00092e8:	01 da                	add    edx,ebx
c00092ea:	83 ec 04             	sub    esp,0x4
c00092ed:	50                   	push   eax
c00092ee:	51                   	push   ecx
c00092ef:	52                   	push   edx
c00092f0:	e8 85 70 ff ff       	call   c000037a <memcpy>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009301:	01 d0                	add    eax,edx
c0009303:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009308:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000930d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009311:	01 d0                	add    eax,edx
c0009313:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009318:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000931c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009320:	89 d3                	mov    ebx,edx
c0009322:	29 c3                	sub    ebx,eax
c0009324:	89 d8                	mov    eax,ebx
c0009326:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000932b:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0009332:	66 90                	xchg   ax,ax
c0009334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009338:	8b 00                	mov    eax,DWORD PTR [eax]
c000933a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000933e:	66 90                	xchg   ax,ax
c0009340:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009345:	85 c0                	test   eax,eax
c0009347:	74 0b                	je     c0009354 <pbuf_copy_partial+0x194>
c0009349:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000934e:	0f 85 0c ff ff ff    	jne    c0009260 <pbuf_copy_partial+0xa0>
c0009354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009359:	8d 76 00             	lea    esi,[esi+0x0]
c000935c:	83 c4 28             	add    esp,0x28
c000935f:	5b                   	pop    ebx
c0009360:	c3                   	ret    
c0009361:	8d 76 00             	lea    esi,[esi+0x0]

c0009364 <pbuf_take>:
c0009364:	83 ec 2c             	sub    esp,0x2c
c0009367:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000936b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009370:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009374:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009379:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009380:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009385:	75 1d                	jne    c00093a4 <pbuf_take+0x40>
c0009387:	83 ec 08             	sub    esp,0x8
c000938a:	68 24 05 03 c0       	push   0xc0030524
c000938f:	68 26 00 03 c0       	push   0xc0030026
c0009394:	e8 2b 6b 01 00       	call   c001fec4 <CPrintf>
c0009399:	83 c4 10             	add    esp,0x10
c000939c:	b0 00                	mov    al,0x0
c000939e:	e9 3d 01 00 00       	jmp    c00094e0 <pbuf_take+0x17c>
c00093a3:	90                   	nop
c00093a4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093a9:	75 1d                	jne    c00093c8 <pbuf_take+0x64>
c00093ab:	83 ec 08             	sub    esp,0x8
c00093ae:	68 3b 05 03 c0       	push   0xc003053b
c00093b3:	68 26 00 03 c0       	push   0xc0030026
c00093b8:	e8 07 6b 01 00       	call   c001fec4 <CPrintf>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	b0 00                	mov    al,0x0
c00093c2:	e9 19 01 00 00       	jmp    c00094e0 <pbuf_take+0x17c>
c00093c7:	90                   	nop
c00093c8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00093cd:	74 1d                	je     c00093ec <pbuf_take+0x88>
c00093cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093d4:	74 16                	je     c00093ec <pbuf_take+0x88>
c00093d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00093dd:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00093e2:	0f b7 c0             	movzx  eax,ax
c00093e5:	39 c2                	cmp    edx,eax
c00093e7:	76 0b                	jbe    c00093f4 <pbuf_take+0x90>
c00093e9:	8d 76 00             	lea    esi,[esi+0x0]
c00093ec:	b0 f2                	mov    al,0xf2
c00093ee:	e9 ed 00 00 00       	jmp    c00094e0 <pbuf_take+0x17c>
c00093f3:	90                   	nop
c00093f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093fc:	e9 9f 00 00 00       	jmp    c00094a0 <pbuf_take+0x13c>
c0009401:	8d 76 00             	lea    esi,[esi+0x0]
c0009404:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009409:	75 15                	jne    c0009420 <pbuf_take+0xbc>
c000940b:	83 ec 08             	sub    esp,0x8
c000940e:	68 56 05 03 c0       	push   0xc0030556
c0009413:	68 26 00 03 c0       	push   0xc0030026
c0009418:	e8 a7 6a 01 00       	call   c001fec4 <CPrintf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009424:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000942d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009431:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009436:	0f b7 c0             	movzx  eax,ax
c0009439:	39 c2                	cmp    edx,eax
c000943b:	76 0f                	jbe    c000944c <pbuf_take+0xe8>
c000943d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009441:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009445:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000944a:	66 90                	xchg   ax,ax
c000944c:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009451:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c0009456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000945a:	01 c1                	add    ecx,eax
c000945c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009463:	83 ec 04             	sub    esp,0x4
c0009466:	52                   	push   edx
c0009467:	51                   	push   ecx
c0009468:	50                   	push   eax
c0009469:	e8 0c 6f ff ff       	call   c000037a <memcpy>
c000946e:	83 c4 10             	add    esp,0x10
c0009471:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009475:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000947a:	89 d1                	mov    ecx,edx
c000947c:	29 c1                	sub    ecx,eax
c000947e:	89 c8                	mov    eax,ecx
c0009480:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009485:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000948a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000948f:	01 d0                	add    eax,edx
c0009491:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000949a:	8b 00                	mov    eax,DWORD PTR [eax]
c000949c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00094a0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00094a5:	85 c0                	test   eax,eax
c00094a7:	0f 85 57 ff ff ff    	jne    c0009404 <pbuf_take+0xa0>
c00094ad:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00094b2:	85 c0                	test   eax,eax
c00094b4:	75 0e                	jne    c00094c4 <pbuf_take+0x160>
c00094b6:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094bb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00094c0:	39 c2                	cmp    edx,eax
c00094c2:	74 18                	je     c00094dc <pbuf_take+0x178>
c00094c4:	83 ec 08             	sub    esp,0x8
c00094c7:	68 6e 05 03 c0       	push   0xc003056e
c00094cc:	68 26 00 03 c0       	push   0xc0030026
c00094d1:	e8 ee 69 01 00       	call   c001fec4 <CPrintf>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	8d 76 00             	lea    esi,[esi+0x0]
c00094dc:	b0 00                	mov    al,0x0
c00094de:	66 90                	xchg   ax,ax
c00094e0:	83 c4 2c             	add    esp,0x2c
c00094e3:	c3                   	ret    

c00094e4 <pbuf_coalesce>:
c00094e4:	83 ec 1c             	sub    esp,0x1c
c00094e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00094ed:	85 c0                	test   eax,eax
c00094ef:	75 07                	jne    c00094f8 <pbuf_coalesce+0x14>
c00094f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f5:	eb 7d                	jmp    c0009574 <pbuf_coalesce+0x90>
c00094f7:	90                   	nop
c00094f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094ff:	0f b7 c0             	movzx  eax,ax
c0009502:	83 ec 04             	sub    esp,0x4
c0009505:	6a 00                	push   0x0
c0009507:	50                   	push   eax
c0009508:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000950c:	e8 df f1 ff ff       	call   c00086f0 <pbuf_alloc>
c0009511:	83 c4 10             	add    esp,0x10
c0009514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009518:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000951d:	75 09                	jne    c0009528 <pbuf_coalesce+0x44>
c000951f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009523:	eb 4f                	jmp    c0009574 <pbuf_coalesce+0x90>
c0009525:	8d 76 00             	lea    esi,[esi+0x0]
c0009528:	83 ec 08             	sub    esp,0x8
c000952b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000952f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009533:	e8 20 fa ff ff       	call   c0008f58 <pbuf_copy>
c0009538:	83 c4 10             	add    esp,0x10
c000953b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000953f:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009544:	85 c0                	test   eax,eax
c0009546:	74 18                	je     c0009560 <pbuf_coalesce+0x7c>
c0009548:	83 ec 08             	sub    esp,0x8
c000954b:	68 84 05 03 c0       	push   0xc0030584
c0009550:	68 26 00 03 c0       	push   0xc0030026
c0009555:	e8 6a 69 01 00       	call   c001fec4 <CPrintf>
c000955a:	83 c4 10             	add    esp,0x10
c000955d:	8d 76 00             	lea    esi,[esi+0x0]
c0009560:	83 ec 0c             	sub    esp,0xc
c0009563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009567:	e8 a8 ef ff ff       	call   c0008514 <pbuf_free>
c000956c:	83 c4 10             	add    esp,0x10
c000956f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009573:	90                   	nop
c0009574:	83 c4 1c             	add    esp,0x1c
c0009577:	c3                   	ret    

c0009578 <pbuf_get_at>:
c0009578:	83 ec 14             	sub    esp,0x14
c000957b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000957f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009583:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009586:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000958b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000958f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009593:	eb 27                	jmp    c00095bc <pbuf_get_at+0x44>
c0009595:	8d 76 00             	lea    esi,[esi+0x0]
c0009598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000959c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095a0:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00095a5:	89 d1                	mov    ecx,edx
c00095a7:	29 c1                	sub    ecx,eax
c00095a9:	89 c8                	mov    eax,ecx
c00095ab:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00095b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00095b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00095ba:	66 90                	xchg   ax,ax
c00095bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095c1:	74 15                	je     c00095d8 <pbuf_get_at+0x60>
c00095c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095c7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095cb:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095d0:	0f b7 c0             	movzx  eax,ax
c00095d3:	39 c2                	cmp    edx,eax
c00095d5:	73 c1                	jae    c0009598 <pbuf_get_at+0x20>
c00095d7:	90                   	nop
c00095d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095dd:	74 29                	je     c0009608 <pbuf_get_at+0x90>
c00095df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095e3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095e7:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095ec:	0f b7 c0             	movzx  eax,ax
c00095ef:	39 c2                	cmp    edx,eax
c00095f1:	73 15                	jae    c0009608 <pbuf_get_at+0x90>
c00095f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095f7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00095fa:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095ff:	01 d0                	add    eax,edx
c0009601:	8a 00                	mov    al,BYTE PTR [eax]
c0009603:	eb 07                	jmp    c000960c <pbuf_get_at+0x94>
c0009605:	8d 76 00             	lea    esi,[esi+0x0]
c0009608:	b0 00                	mov    al,0x0
c000960a:	66 90                	xchg   ax,ax
c000960c:	83 c4 14             	add    esp,0x14
c000960f:	c3                   	ret    

c0009610 <pbuf_memcmp>:
c0009610:	83 ec 18             	sub    esp,0x18
c0009613:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000961b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009620:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009628:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000962d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009631:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009635:	eb 25                	jmp    c000965c <pbuf_memcmp+0x4c>
c0009637:	90                   	nop
c0009638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000963c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009640:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009645:	89 d1                	mov    ecx,edx
c0009647:	29 c1                	sub    ecx,eax
c0009649:	89 c8                	mov    eax,ecx
c000964b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009654:	8b 00                	mov    eax,DWORD PTR [eax]
c0009656:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000965a:	66 90                	xchg   ax,ax
c000965c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009661:	74 15                	je     c0009678 <pbuf_memcmp+0x68>
c0009663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009667:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000966b:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009670:	0f b7 c0             	movzx  eax,ax
c0009673:	39 c2                	cmp    edx,eax
c0009675:	73 c1                	jae    c0009638 <pbuf_memcmp+0x28>
c0009677:	90                   	nop
c0009678:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000967d:	0f 84 8d 00 00 00    	je     c0009710 <pbuf_memcmp+0x100>
c0009683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009687:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000968b:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009690:	0f b7 c0             	movzx  eax,ax
c0009693:	39 c2                	cmp    edx,eax
c0009695:	73 79                	jae    c0009710 <pbuf_memcmp+0x100>
c0009697:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000969e:	eb 5c                	jmp    c00096fc <pbuf_memcmp+0xec>
c00096a0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00096a5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096aa:	01 d0                	add    eax,edx
c00096ac:	0f b7 c0             	movzx  eax,ax
c00096af:	50                   	push   eax
c00096b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b4:	e8 bf fe ff ff       	call   c0009578 <pbuf_get_at>
c00096b9:	83 c4 08             	add    esp,0x8
c00096bc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00096c0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00096c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00096c9:	01 d0                	add    eax,edx
c00096cb:	8a 00                	mov    al,BYTE PTR [eax]
c00096cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00096d1:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c00096d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00096db:	39 c2                	cmp    edx,eax
c00096dd:	74 0d                	je     c00096ec <pbuf_memcmp+0xdc>
c00096df:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096e4:	83 c0 01             	add    eax,0x1
c00096e7:	eb 2f                	jmp    c0009718 <pbuf_memcmp+0x108>
c00096e9:	8d 76 00             	lea    esi,[esi+0x0]
c00096ec:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096f1:	83 c0 01             	add    eax,0x1
c00096f4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096f9:	8d 76 00             	lea    esi,[esi+0x0]
c00096fc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009701:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009705:	39 c2                	cmp    edx,eax
c0009707:	72 97                	jb     c00096a0 <pbuf_memcmp+0x90>
c0009709:	b8 00 00 00 00       	mov    eax,0x0
c000970e:	eb 08                	jmp    c0009718 <pbuf_memcmp+0x108>
c0009710:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009715:	8d 76 00             	lea    esi,[esi+0x0]
c0009718:	83 c4 18             	add    esp,0x18
c000971b:	c3                   	ret    

c000971c <pbuf_memfind>:
c000971c:	83 ec 18             	sub    esp,0x18
c000971f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009723:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009727:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000972c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009730:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009734:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0009737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000973b:	89 d1                	mov    ecx,edx
c000973d:	29 c1                	sub    ecx,eax
c000973f:	89 c8                	mov    eax,ecx
c0009741:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0009746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000974a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000974d:	0f b7 c0             	movzx  eax,ax
c0009750:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009755:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0009759:	01 ca                	add    edx,ecx
c000975b:	39 d0                	cmp    eax,edx
c000975d:	7c 65                	jl     c00097c4 <pbuf_memfind+0xa8>
c000975f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009762:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009767:	eb 4b                	jmp    c00097b4 <pbuf_memfind+0x98>
c0009769:	8d 76 00             	lea    esi,[esi+0x0]
c000976c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009771:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0009776:	52                   	push   edx
c0009777:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000977b:	50                   	push   eax
c000977c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009780:	e8 8b fe ff ff       	call   c0009610 <pbuf_memcmp>
c0009785:	83 c4 10             	add    esp,0x10
c0009788:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000978d:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009792:	85 c0                	test   eax,eax
c0009794:	75 0a                	jne    c00097a0 <pbuf_memfind+0x84>
c0009796:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000979b:	eb 2f                	jmp    c00097cc <pbuf_memfind+0xb0>
c000979d:	8d 76 00             	lea    esi,[esi+0x0]
c00097a0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00097a5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00097aa:	01 d0                	add    eax,edx
c00097ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00097b1:	8d 76 00             	lea    esi,[esi+0x0]
c00097b4:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00097b9:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00097be:	39 c2                	cmp    edx,eax
c00097c0:	76 aa                	jbe    c000976c <pbuf_memfind+0x50>
c00097c2:	66 90                	xchg   ax,ax
c00097c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097c9:	8d 76 00             	lea    esi,[esi+0x0]
c00097cc:	83 c4 18             	add    esp,0x18
c00097cf:	c3                   	ret    

c00097d0 <pbuf_strstr>:
c00097d0:	83 ec 1c             	sub    esp,0x1c
c00097d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00097d8:	74 1e                	je     c00097f8 <pbuf_strstr+0x28>
c00097da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097de:	8a 00                	mov    al,BYTE PTR [eax]
c00097e0:	0f be c0             	movsx  eax,al
c00097e3:	85 c0                	test   eax,eax
c00097e5:	74 11                	je     c00097f8 <pbuf_strstr+0x28>
c00097e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097ee:	0f b7 c0             	movzx  eax,ax
c00097f1:	3d ff ff 00 00       	cmp    eax,0xffff
c00097f6:	75 08                	jne    c0009800 <pbuf_strstr+0x30>
c00097f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097fd:	eb 41                	jmp    c0009840 <pbuf_strstr+0x70>
c00097ff:	90                   	nop
c0009800:	83 ec 0c             	sub    esp,0xc
c0009803:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009807:	e8 74 6d ff ff       	call   c0000580 <strlen>
c000980c:	83 c4 10             	add    esp,0x10
c000980f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009813:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c000981b:	76 07                	jbe    c0009824 <pbuf_strstr+0x54>
c000981d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009822:	eb 1c                	jmp    c0009840 <pbuf_strstr+0x70>
c0009824:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009828:	0f b7 c0             	movzx  eax,ax
c000982b:	6a 00                	push   0x0
c000982d:	50                   	push   eax
c000982e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009832:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009836:	e8 e1 fe ff ff       	call   c000971c <pbuf_memfind>
c000983b:	83 c4 10             	add    esp,0x10
c000983e:	66 90                	xchg   ax,ax
c0009840:	83 c4 1c             	add    esp,0x1c
c0009843:	c3                   	ret    

c0009844 <raw_input>:
c0009844:	83 ec 2c             	sub    esp,0x2c
c0009847:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000984c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009850:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009853:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000985b:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000985e:	0f b6 c0             	movzx  eax,al
c0009861:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009866:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000986e:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009873:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009877:	e9 b8 00 00 00       	jmp    c0009934 <raw_input+0xf0>
c000987c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009880:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009883:	0f b6 d0             	movzx  edx,al
c0009886:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000988b:	39 c2                	cmp    edx,eax
c000988d:	0f 85 8d 00 00 00    	jne    c0009920 <raw_input+0xdc>
c0009893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009897:	85 c0                	test   eax,eax
c0009899:	74 19                	je     c00098b4 <raw_input+0x70>
c000989b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000989f:	8b 00                	mov    eax,DWORD PTR [eax]
c00098a1:	85 c0                	test   eax,eax
c00098a3:	74 0f                	je     c00098b4 <raw_input+0x70>
c00098a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00098ab:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00098b0:	39 c2                	cmp    edx,eax
c00098b2:	75 6c                	jne    c0009920 <raw_input+0xdc>
c00098b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00098bb:	85 c0                	test   eax,eax
c00098bd:	74 61                	je     c0009920 <raw_input+0xdc>
c00098bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098c3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00098c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098ca:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c00098cd:	68 90 68 03 c0       	push   0xc0036890
c00098d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098da:	52                   	push   edx
c00098db:	ff d0                	call   eax
c00098dd:	83 c4 10             	add    esp,0x10
c00098e0:	0f b6 c0             	movzx  eax,al
c00098e3:	85 c0                	test   eax,eax
c00098e5:	74 39                	je     c0009920 <raw_input+0xdc>
c00098e7:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00098ef:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00098f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00098f9:	74 25                	je     c0009920 <raw_input+0xdc>
c00098fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098ff:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009902:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009906:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009909:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c000990f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009913:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009916:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000991a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000991f:	90                   	nop
c0009920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000992c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000992f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009933:	90                   	nop
c0009934:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0009939:	85 c0                	test   eax,eax
c000993b:	75 0b                	jne    c0009948 <raw_input+0x104>
c000993d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009942:	0f 85 34 ff ff ff    	jne    c000987c <raw_input+0x38>
c0009948:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000994c:	83 c4 2c             	add    esp,0x2c
c000994f:	c3                   	ret    

c0009950 <raw_bind>:
c0009950:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009955:	74 09                	je     c0009960 <raw_bind+0x10>
c0009957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000995b:	8b 00                	mov    eax,DWORD PTR [eax]
c000995d:	eb 09                	jmp    c0009968 <raw_bind+0x18>
c000995f:	90                   	nop
c0009960:	b8 00 00 00 00       	mov    eax,0x0
c0009965:	8d 76 00             	lea    esi,[esi+0x0]
c0009968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000996c:	89 02                	mov    DWORD PTR [edx],eax
c000996e:	b0 00                	mov    al,0x0
c0009970:	c3                   	ret    
c0009971:	8d 76 00             	lea    esi,[esi+0x0]

c0009974 <raw_connect>:
c0009974:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009979:	74 09                	je     c0009984 <raw_connect+0x10>
c000997b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000997f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009981:	eb 09                	jmp    c000998c <raw_connect+0x18>
c0009983:	90                   	nop
c0009984:	b8 00 00 00 00       	mov    eax,0x0
c0009989:	8d 76 00             	lea    esi,[esi+0x0]
c000998c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009990:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009993:	b0 00                	mov    al,0x0
c0009995:	c3                   	ret    
c0009996:	66 90                	xchg   ax,ax

c0009998 <raw_recv>:
c0009998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000999c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099a0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00099a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00099ae:	90                   	nop
c00099af:	c3                   	ret    

c00099b0 <raw_sendto>:
c00099b0:	83 ec 1c             	sub    esp,0x1c
c00099b3:	83 ec 08             	sub    esp,0x8
c00099b6:	6a 14                	push   0x14
c00099b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00099bc:	e8 b3 e9 ff ff       	call   c0008374 <pbuf_header>
c00099c1:	83 c4 10             	add    esp,0x10
c00099c4:	0f b6 c0             	movzx  eax,al
c00099c7:	85 c0                	test   eax,eax
c00099c9:	74 49                	je     c0009a14 <raw_sendto+0x64>
c00099cb:	83 ec 04             	sub    esp,0x4
c00099ce:	6a 00                	push   0x0
c00099d0:	6a 00                	push   0x0
c00099d2:	6a 01                	push   0x1
c00099d4:	e8 17 ed ff ff       	call   c00086f0 <pbuf_alloc>
c00099d9:	83 c4 10             	add    esp,0x10
c00099dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00099e5:	75 09                	jne    c00099f0 <raw_sendto+0x40>
c00099e7:	b0 ff                	mov    al,0xff
c00099e9:	e9 2a 01 00 00       	jmp    c0009b18 <raw_sendto+0x168>
c00099ee:	66 90                	xchg   ax,ax
c00099f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00099f7:	0f b7 c0             	movzx  eax,ax
c00099fa:	85 c0                	test   eax,eax
c00099fc:	74 52                	je     c0009a50 <raw_sendto+0xa0>
c00099fe:	83 ec 08             	sub    esp,0x8
c0009a01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a09:	e8 2a f4 ff ff       	call   c0008e38 <pbuf_chain>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	eb 3d                	jmp    c0009a50 <raw_sendto+0xa0>
c0009a13:	90                   	nop
c0009a14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009a18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a1c:	83 ec 08             	sub    esp,0x8
c0009a1f:	6a ec                	push   0xffffffec
c0009a21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a25:	e8 4a e9 ff ff       	call   c0008374 <pbuf_header>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	0f b6 c0             	movzx  eax,al
c0009a30:	85 c0                	test   eax,eax
c0009a32:	74 1c                	je     c0009a50 <raw_sendto+0xa0>
c0009a34:	83 ec 08             	sub    esp,0x8
c0009a37:	68 98 05 03 c0       	push   0xc0030598
c0009a3c:	68 26 00 03 c0       	push   0xc0030026
c0009a41:	e8 7e 64 01 00       	call   c001fec4 <CPrintf>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	b0 ff                	mov    al,0xff
c0009a4b:	e9 c8 00 00 00       	jmp    c0009b18 <raw_sendto+0x168>
c0009a50:	83 ec 0c             	sub    esp,0xc
c0009a53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a57:	e8 00 9e 00 00       	call   c001385c <ip_route>
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a63:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009a68:	75 22                	jne    c0009a8c <raw_sendto+0xdc>
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009a72:	74 10                	je     c0009a84 <raw_sendto+0xd4>
c0009a74:	83 ec 0c             	sub    esp,0xc
c0009a77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a7b:	e8 94 ea ff ff       	call   c0008514 <pbuf_free>
c0009a80:	83 c4 10             	add    esp,0x10
c0009a83:	90                   	nop
c0009a84:	b0 fc                	mov    al,0xfc
c0009a86:	e9 8d 00 00 00       	jmp    c0009b18 <raw_sendto+0x168>
c0009a8b:	90                   	nop
c0009a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a90:	85 c0                	test   eax,eax
c0009a92:	74 0c                	je     c0009aa0 <raw_sendto+0xf0>
c0009a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9a:	85 c0                	test   eax,eax
c0009a9c:	75 12                	jne    c0009ab0 <raw_sendto+0x100>
c0009a9e:	66 90                	xchg   ax,ax
c0009aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aa4:	83 c0 04             	add    eax,0x4
c0009aa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009aab:	eb 0b                	jmp    c0009ab8 <raw_sendto+0x108>
c0009aad:	8d 76 00             	lea    esi,[esi+0x0]
c0009ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ab4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009abc:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009abf:	0f b6 c8             	movzx  ecx,al
c0009ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ac6:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009ac9:	0f b6 d0             	movzx  edx,al
c0009acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ad0:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009ad3:	0f b6 c0             	movzx  eax,al
c0009ad6:	83 ec 04             	sub    esp,0x4
c0009ad9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009add:	51                   	push   ecx
c0009ade:	52                   	push   edx
c0009adf:	50                   	push   eax
c0009ae0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aec:	e8 43 a2 00 00       	call   c0013d34 <ip_output_if>
c0009af1:	83 c4 20             	add    esp,0x20
c0009af4:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009af8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009afc:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009b00:	74 12                	je     c0009b14 <raw_sendto+0x164>
c0009b02:	83 ec 0c             	sub    esp,0xc
c0009b05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b09:	e8 06 ea ff ff       	call   c0008514 <pbuf_free>
c0009b0e:	83 c4 10             	add    esp,0x10
c0009b11:	8d 76 00             	lea    esi,[esi+0x0]
c0009b14:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009b18:	83 c4 1c             	add    esp,0x1c
c0009b1b:	c3                   	ret    

c0009b1c <raw_send>:
c0009b1c:	83 ec 0c             	sub    esp,0xc
c0009b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b23:	83 c0 04             	add    eax,0x4
c0009b26:	83 ec 04             	sub    esp,0x4
c0009b29:	50                   	push   eax
c0009b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b32:	e8 79 fe ff ff       	call   c00099b0 <raw_sendto>
c0009b37:	83 c4 10             	add    esp,0x10
c0009b3a:	83 c4 0c             	add    esp,0xc
c0009b3d:	c3                   	ret    
c0009b3e:	66 90                	xchg   ax,ax

c0009b40 <raw_remove>:
c0009b40:	83 ec 1c             	sub    esp,0x1c
c0009b43:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b48:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b4c:	75 12                	jne    c0009b60 <raw_remove+0x20>
c0009b4e:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b56:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009b5b:	eb 4b                	jmp    c0009ba8 <raw_remove+0x68>
c0009b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b60:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b69:	eb 35                	jmp    c0009ba0 <raw_remove+0x60>
c0009b6b:	90                   	nop
c0009b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b73:	85 c0                	test   eax,eax
c0009b75:	74 1d                	je     c0009b94 <raw_remove+0x54>
c0009b77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b7e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b82:	75 10                	jne    c0009b94 <raw_remove+0x54>
c0009b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b88:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009b8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b92:	66 90                	xchg   ax,ax
c0009b94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b9f:	90                   	nop
c0009ba0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009ba5:	75 c5                	jne    c0009b6c <raw_remove+0x2c>
c0009ba7:	90                   	nop
c0009ba8:	83 ec 08             	sub    esp,0x8
c0009bab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009baf:	6a 00                	push   0x0
c0009bb1:	e8 9e e0 ff ff       	call   c0007c54 <memp_free>
c0009bb6:	83 c4 10             	add    esp,0x10
c0009bb9:	90                   	nop
c0009bba:	83 c4 1c             	add    esp,0x1c
c0009bbd:	c3                   	ret    
c0009bbe:	66 90                	xchg   ax,ax

c0009bc0 <raw_new>:
c0009bc0:	83 ec 2c             	sub    esp,0x2c
c0009bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009bcb:	83 ec 0c             	sub    esp,0xc
c0009bce:	6a 00                	push   0x0
c0009bd0:	e8 53 df ff ff       	call   c0007b28 <memp_malloc>
c0009bd5:	83 c4 10             	add    esp,0x10
c0009bd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bdc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009be1:	74 3d                	je     c0009c20 <raw_new+0x60>
c0009be3:	83 ec 04             	sub    esp,0x4
c0009be6:	6a 1c                	push   0x1c
c0009be8:	6a 00                	push   0x0
c0009bea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009bee:	e8 fd 68 ff ff       	call   c00004f0 <memset>
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bfa:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009bfe:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009c01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c05:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009c09:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009c0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c1a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009c1f:	90                   	nop
c0009c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c24:	83 c4 2c             	add    esp,0x2c
c0009c27:	c3                   	ret    

c0009c28 <stats_init>:
c0009c28:	90                   	nop
c0009c29:	c3                   	ret    
c0009c2a:	66 90                	xchg   ax,ax

c0009c2c <sys_msleep>:
c0009c2c:	83 ec 1c             	sub    esp,0x1c
c0009c2f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009c34:	74 46                	je     c0009c7c <sys_msleep+0x50>
c0009c36:	83 ec 08             	sub    esp,0x8
c0009c39:	6a 00                	push   0x0
c0009c3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c3f:	50                   	push   eax
c0009c40:	e8 5b 70 ff ff       	call   c0000ca0 <sys_sem_new>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c4c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009c51:	85 c0                	test   eax,eax
c0009c53:	75 27                	jne    c0009c7c <sys_msleep+0x50>
c0009c55:	83 ec 08             	sub    esp,0x8
c0009c58:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009c5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c60:	50                   	push   eax
c0009c61:	e8 92 70 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c0009c66:	83 c4 10             	add    esp,0x10
c0009c69:	83 ec 0c             	sub    esp,0xc
c0009c6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c70:	50                   	push   eax
c0009c71:	e8 52 70 ff ff       	call   c0000cc8 <sys_sem_free>
c0009c76:	83 c4 10             	add    esp,0x10
c0009c79:	8d 76 00             	lea    esi,[esi+0x0]
c0009c7c:	90                   	nop
c0009c7d:	83 c4 1c             	add    esp,0x1c
c0009c80:	c3                   	ret    
c0009c81:	66 90                	xchg   ax,ax
c0009c83:	90                   	nop

c0009c84 <tcp_accept_null>:
c0009c84:	83 ec 04             	sub    esp,0x4
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	88 04 24             	mov    BYTE PTR [esp],al
c0009c8e:	b0 f6                	mov    al,0xf6
c0009c90:	83 c4 04             	add    esp,0x4
c0009c93:	c3                   	ret    

c0009c94 <tcp_listen_with_backlog>:
c0009c94:	83 ec 2c             	sub    esp,0x2c
c0009c97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca6:	85 c0                	test   eax,eax
c0009ca8:	74 22                	je     c0009ccc <tcp_listen_with_backlog+0x38>
c0009caa:	83 ec 08             	sub    esp,0x8
c0009cad:	68 c0 05 03 c0       	push   0xc00305c0
c0009cb2:	68 26 00 03 c0       	push   0xc0030026
c0009cb7:	e8 08 62 01 00       	call   c001fec4 <CPrintf>
c0009cbc:	83 c4 10             	add    esp,0x10
c0009cbf:	b8 00 00 00 00       	mov    eax,0x0
c0009cc4:	e9 77 01 00 00       	jmp    c0009e40 <tcp_listen_with_backlog+0x1ac>
c0009cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0009ccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd3:	83 f8 01             	cmp    eax,0x1
c0009cd6:	75 0c                	jne    c0009ce4 <tcp_listen_with_backlog+0x50>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	e9 5f 01 00 00       	jmp    c0009e40 <tcp_listen_with_backlog+0x1ac>
c0009ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0009ce4:	83 ec 0c             	sub    esp,0xc
c0009ce7:	6a 03                	push   0x3
c0009ce9:	e8 3a de ff ff       	call   c0007b28 <memp_malloc>
c0009cee:	83 c4 10             	add    esp,0x10
c0009cf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cf5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009cfa:	75 0c                	jne    c0009d08 <tcp_listen_with_backlog+0x74>
c0009cfc:	b8 00 00 00 00       	mov    eax,0x0
c0009d01:	e9 3a 01 00 00       	jmp    c0009e40 <tcp_listen_with_backlog+0x1ac>
c0009d06:	66 90                	xchg   ax,ax
c0009d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d13:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009d16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d1a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009d1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d21:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009d25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d29:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d34:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009d37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d3b:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009d3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d42:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009d45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d49:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d50:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009d53:	83 c8 02             	or     eax,0x2
c0009d56:	88 c2                	mov    dl,al
c0009d58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d5c:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d63:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009d66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d6a:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d71:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009d74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d78:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009d81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d85:	89 10                	mov    DWORD PTR [eax],edx
c0009d87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009d8e:	0f b7 c0             	movzx  eax,ax
c0009d91:	85 c0                	test   eax,eax
c0009d93:	74 6f                	je     c0009e04 <tcp_listen_with_backlog+0x170>
c0009d95:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d9a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d9e:	75 10                	jne    c0009db0 <tcp_listen_with_backlog+0x11c>
c0009da0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009da5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009da8:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009dad:	eb 49                	jmp    c0009df8 <tcp_listen_with_backlog+0x164>
c0009daf:	90                   	nop
c0009db0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009db5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009dba:	eb 30                	jmp    c0009dec <tcp_listen_with_backlog+0x158>
c0009dbc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009dc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009dc4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009dc8:	75 12                	jne    c0009ddc <tcp_listen_with_backlog+0x148>
c0009dca:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009dcf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009dd3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009dd6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dd9:	eb 1d                	jmp    c0009df8 <tcp_listen_with_backlog+0x164>
c0009ddb:	90                   	nop
c0009ddc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009de1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009de4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009de9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009df1:	85 c0                	test   eax,eax
c0009df3:	75 c7                	jne    c0009dbc <tcp_listen_with_backlog+0x128>
c0009df5:	8d 76 00             	lea    esi,[esi+0x0]
c0009df8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dfc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009e03:	90                   	nop
c0009e04:	83 ec 08             	sub    esp,0x8
c0009e07:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009e0b:	6a 02                	push   0x2
c0009e0d:	e8 42 de ff ff       	call   c0007c54 <memp_free>
c0009e12:	83 c4 10             	add    esp,0x10
c0009e15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e19:	c7 40 1c 84 9c 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009c84
c0009e20:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e31:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009e36:	e8 21 6f 00 00       	call   c0010d5c <tcp_timer_needed>
c0009e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e3f:	90                   	nop
c0009e40:	83 c4 2c             	add    esp,0x2c
c0009e43:	c3                   	ret    

c0009e44 <tcp_update_rcv_ann_wnd>:
c0009e44:	83 ec 1c             	sub    esp,0x1c
c0009e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e4b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e52:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e55:	0f b7 c0             	movzx  eax,ax
c0009e58:	01 d0                	add    eax,edx
c0009e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e62:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009e65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e6c:	0f b7 c8             	movzx  ecx,ax
c0009e6f:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009e75:	76 05                	jbe    c0009e7c <tcp_update_rcv_ann_wnd+0x38>
c0009e77:	b8 30 04 00 00       	mov    eax,0x430
c0009e7c:	0f b7 c0             	movzx  eax,ax
c0009e7f:	01 c2                	add    edx,eax
c0009e81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e85:	29 d0                	sub    eax,edx
c0009e87:	78 23                	js     c0009eac <tcp_update_rcv_ann_wnd+0x68>
c0009e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e8d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0009e90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e94:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e9c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ea3:	29 c2                	sub    edx,eax
c0009ea5:	89 d0                	mov    eax,edx
c0009ea7:	eb 77                	jmp    c0009f20 <tcp_update_rcv_ann_wnd+0xdc>
c0009ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0009eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eb0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eb7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009eba:	29 c2                	sub    edx,eax
c0009ebc:	89 d0                	mov    eax,edx
c0009ebe:	85 c0                	test   eax,eax
c0009ec0:	7e 0e                	jle    c0009ed0 <tcp_update_rcv_ann_wnd+0x8c>
c0009ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ec6:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009ecc:	eb 4a                	jmp    c0009f18 <tcp_update_rcv_ann_wnd+0xd4>
c0009ece:	66 90                	xchg   ax,ax
c0009ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed4:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009edb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009ede:	29 c2                	sub    edx,eax
c0009ee0:	89 d0                	mov    eax,edx
c0009ee2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ee6:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009eee:	76 18                	jbe    c0009f08 <tcp_update_rcv_ann_wnd+0xc4>
c0009ef0:	83 ec 08             	sub    esp,0x8
c0009ef3:	68 f4 07 03 c0       	push   0xc00307f4
c0009ef8:	68 26 00 03 c0       	push   0xc0030026
c0009efd:	e8 c2 5f 01 00       	call   c001fec4 <CPrintf>
c0009f02:	83 c4 10             	add    esp,0x10
c0009f05:	8d 76 00             	lea    esi,[esi+0x0]
c0009f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f0c:	89 c2                	mov    edx,eax
c0009f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f12:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009f16:	66 90                	xchg   ax,ax
c0009f18:	b8 00 00 00 00       	mov    eax,0x0
c0009f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0009f20:	83 c4 1c             	add    esp,0x1c
c0009f23:	c3                   	ret    

c0009f24 <tcp_recved>:
c0009f24:	83 ec 2c             	sub    esp,0x2c
c0009f27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f2b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f30:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f39:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f3c:	0f b7 c0             	movzx  eax,ax
c0009f3f:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009f44:	29 c1                	sub    ecx,eax
c0009f46:	89 c8                	mov    eax,ecx
c0009f48:	39 c2                	cmp    edx,eax
c0009f4a:	7e 18                	jle    c0009f64 <tcp_recved+0x40>
c0009f4c:	83 ec 08             	sub    esp,0x8
c0009f4f:	68 e4 05 03 c0       	push   0xc00305e4
c0009f54:	68 26 00 03 c0       	push   0xc0030026
c0009f59:	e8 66 5f 01 00       	call   c001fec4 <CPrintf>
c0009f5e:	83 c4 10             	add    esp,0x10
c0009f61:	8d 76 00             	lea    esi,[esi+0x0]
c0009f64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f68:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f6f:	01 d0                	add    eax,edx
c0009f71:	89 c2                	mov    edx,eax
c0009f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f77:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c0009f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f7f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f82:	0f b7 c0             	movzx  eax,ax
c0009f85:	3d 60 08 00 00       	cmp    eax,0x860
c0009f8a:	76 0c                	jbe    c0009f98 <tcp_recved+0x74>
c0009f8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f90:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009f96:	66 90                	xchg   ax,ax
c0009f98:	83 ec 0c             	sub    esp,0xc
c0009f9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f9f:	e8 a0 fe ff ff       	call   c0009e44 <tcp_update_rcv_ann_wnd>
c0009fa4:	83 c4 10             	add    esp,0x10
c0009fa7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009fab:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009fb3:	7e 23                	jle    c0009fd8 <tcp_recved+0xb4>
c0009fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fb9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009fbc:	83 c8 02             	or     eax,0x2
c0009fbf:	88 c2                	mov    dl,al
c0009fc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fc5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009fc8:	83 ec 0c             	sub    esp,0xc
c0009fcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fcf:	e8 e0 60 00 00       	call   c00100b4 <tcp_output>
c0009fd4:	83 c4 10             	add    esp,0x10
c0009fd7:	90                   	nop
c0009fd8:	90                   	nop
c0009fd9:	83 c4 2c             	add    esp,0x2c
c0009fdc:	c3                   	ret    
c0009fdd:	8d 76 00             	lea    esi,[esi+0x0]

c0009fe0 <tcp_new_port>:
c0009fe0:	83 ec 10             	sub    esp,0x10
c0009fe3:	90                   	nop
c0009fe4:	66 a1 80 42 03 c0    	mov    ax,ds:0xc0034280
c0009fea:	8d 50 01             	lea    edx,[eax+0x1]
c0009fed:	66 89 15 80 42 03 c0 	mov    WORD PTR ds:0xc0034280,dx
c0009ff4:	0f b7 c0             	movzx  eax,ax
c0009ff7:	3d ff ff 00 00       	cmp    eax,0xffff
c0009ffc:	75 0a                	jne    c000a008 <tcp_new_port+0x28>
c0009ffe:	66 c7 05 80 42 03 c0 00 c0 	mov    WORD PTR ds:0xc0034280,0xc000
c000a007:	90                   	nop
c000a008:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a010:	eb 4a                	jmp    c000a05c <tcp_new_port+0x7c>
c000a012:	66 90                	xchg   ax,ax
c000a014:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a018:	8b 04 85 00 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf700]
c000a01f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a021:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a025:	eb 29                	jmp    c000a050 <tcp_new_port+0x70>
c000a027:	90                   	nop
c000a028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a02c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000a02f:	66 a1 80 42 03 c0    	mov    ax,ds:0xc0034280
c000a035:	0f b7 d2             	movzx  edx,dx
c000a038:	0f b7 c0             	movzx  eax,ax
c000a03b:	39 c2                	cmp    edx,eax
c000a03d:	75 05                	jne    c000a044 <tcp_new_port+0x64>
c000a03f:	eb a3                	jmp    c0009fe4 <tcp_new_port+0x4>
c000a041:	8d 76 00             	lea    esi,[esi+0x0]
c000a044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a048:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a04b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a04f:	90                   	nop
c000a050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000a055:	75 d1                	jne    c000a028 <tcp_new_port+0x48>
c000a057:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000a05c:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c000a061:	7e b1                	jle    c000a014 <tcp_new_port+0x34>
c000a063:	66 a1 80 42 03 c0    	mov    ax,ds:0xc0034280
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	c3                   	ret    
c000a06d:	8d 76 00             	lea    esi,[esi+0x0]

c000a070 <tcp_bind>:
c000a070:	83 ec 2c             	sub    esp,0x2c
c000a073:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a077:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a07c:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000a084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a088:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a08b:	85 c0                	test   eax,eax
c000a08d:	74 1d                	je     c000a0ac <tcp_bind+0x3c>
c000a08f:	83 ec 08             	sub    esp,0x8
c000a092:	68 08 06 03 c0       	push   0xc0030608
c000a097:	68 26 00 03 c0       	push   0xc0030026
c000a09c:	e8 23 5e 01 00       	call   c001fec4 <CPrintf>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	b0 fa                	mov    al,0xfa
c000a0a6:	e9 f1 00 00 00       	jmp    c000a19c <tcp_bind+0x12c>
c000a0ab:	90                   	nop
c000a0ac:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000a0b1:	85 c0                	test   eax,eax
c000a0b3:	75 0b                	jne    c000a0c0 <tcp_bind+0x50>
c000a0b5:	e8 26 ff ff ff       	call   c0009fe0 <tcp_new_port>
c000a0ba:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a0bf:	90                   	nop
c000a0c0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0c8:	eb 7a                	jmp    c000a144 <tcp_bind+0xd4>
c000a0ca:	66 90                	xchg   ax,ax
c000a0cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0d0:	8b 04 85 00 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf700]
c000a0d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0dd:	eb 59                	jmp    c000a138 <tcp_bind+0xc8>
c000a0df:	90                   	nop
c000a0e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a0e7:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000a0ec:	0f b7 c0             	movzx  eax,ax
c000a0ef:	39 c2                	cmp    edx,eax
c000a0f1:	75 39                	jne    c000a12c <tcp_bind+0xbc>
c000a0f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0f7:	85 c0                	test   eax,eax
c000a0f9:	74 2d                	je     c000a128 <tcp_bind+0xb8>
c000a0fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000a101:	85 c0                	test   eax,eax
c000a103:	74 23                	je     c000a128 <tcp_bind+0xb8>
c000a105:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a10a:	74 1c                	je     c000a128 <tcp_bind+0xb8>
c000a10c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a110:	8b 00                	mov    eax,DWORD PTR [eax]
c000a112:	85 c0                	test   eax,eax
c000a114:	74 12                	je     c000a128 <tcp_bind+0xb8>
c000a116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11a:	8b 10                	mov    edx,DWORD PTR [eax]
c000a11c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a120:	8b 00                	mov    eax,DWORD PTR [eax]
c000a122:	39 c2                	cmp    edx,eax
c000a124:	75 06                	jne    c000a12c <tcp_bind+0xbc>
c000a126:	66 90                	xchg   ax,ax
c000a128:	b0 f8                	mov    al,0xf8
c000a12a:	eb 70                	jmp    c000a19c <tcp_bind+0x12c>
c000a12c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a130:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a133:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a137:	90                   	nop
c000a138:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a13d:	75 a1                	jne    c000a0e0 <tcp_bind+0x70>
c000a13f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a144:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a148:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c000a14c:	0f 8c 7a ff ff ff    	jl     c000a0cc <tcp_bind+0x5c>
c000a152:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a157:	74 17                	je     c000a170 <tcp_bind+0x100>
c000a159:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a15d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a15f:	85 c0                	test   eax,eax
c000a161:	74 0d                	je     c000a170 <tcp_bind+0x100>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a16b:	8b 12                	mov    edx,DWORD PTR [edx]
c000a16d:	89 10                	mov    DWORD PTR [eax],edx
c000a16f:	90                   	nop
c000a170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a174:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a178:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000a17c:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c000a182:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a186:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a18d:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000a192:	e8 c5 6b 00 00       	call   c0010d5c <tcp_timer_needed>
c000a197:	b0 00                	mov    al,0x0
c000a199:	8d 76 00             	lea    esi,[esi+0x0]
c000a19c:	83 c4 2c             	add    esp,0x2c
c000a19f:	c3                   	ret    

c000a1a0 <tcp_seg_free>:
c000a1a0:	83 ec 0c             	sub    esp,0xc
c000a1a3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a1a8:	74 32                	je     c000a1dc <tcp_seg_free+0x3c>
c000a1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a1b1:	85 c0                	test   eax,eax
c000a1b3:	74 13                	je     c000a1c8 <tcp_seg_free+0x28>
c000a1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a1bc:	83 ec 0c             	sub    esp,0xc
c000a1bf:	50                   	push   eax
c000a1c0:	e8 4f e3 ff ff       	call   c0008514 <pbuf_free>
c000a1c5:	83 c4 10             	add    esp,0x10
c000a1c8:	83 ec 08             	sub    esp,0x8
c000a1cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a1cf:	6a 04                	push   0x4
c000a1d1:	e8 7e da ff ff       	call   c0007c54 <memp_free>
c000a1d6:	83 c4 10             	add    esp,0x10
c000a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1dc:	90                   	nop
c000a1dd:	83 c4 0c             	add    esp,0xc
c000a1e0:	c3                   	ret    
c000a1e1:	8d 76 00             	lea    esi,[esi+0x0]

c000a1e4 <tcp_segs_free>:
c000a1e4:	83 ec 1c             	sub    esp,0x1c
c000a1e7:	eb 27                	jmp    c000a210 <tcp_segs_free+0x2c>
c000a1e9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a1f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000a1f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1f6:	83 ec 0c             	sub    esp,0xc
c000a1f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1fd:	e8 9e ff ff ff       	call   c000a1a0 <tcp_seg_free>
c000a202:	83 c4 10             	add    esp,0x10
c000a205:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a209:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a20d:	8d 76 00             	lea    esi,[esi+0x0]
c000a210:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a215:	75 d5                	jne    c000a1ec <tcp_segs_free+0x8>
c000a217:	90                   	nop
c000a218:	83 c4 1c             	add    esp,0x1c
c000a21b:	c3                   	ret    

c000a21c <tcp_setprio>:
c000a21c:	83 ec 04             	sub    esp,0x4
c000a21f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a223:	88 04 24             	mov    BYTE PTR [esp],al
c000a226:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a22a:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a22d:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a230:	90                   	nop
c000a231:	83 c4 04             	add    esp,0x4
c000a234:	c3                   	ret    
c000a235:	8d 76 00             	lea    esi,[esi+0x0]

c000a238 <tcp_seg_copy>:
c000a238:	83 ec 1c             	sub    esp,0x1c
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	6a 04                	push   0x4
c000a240:	e8 e3 d8 ff ff       	call   c0007b28 <memp_malloc>
c000a245:	83 c4 10             	add    esp,0x10
c000a248:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a24c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a251:	75 09                	jne    c000a25c <tcp_seg_copy+0x24>
c000a253:	b8 00 00 00 00       	mov    eax,0x0
c000a258:	eb 2e                	jmp    c000a288 <tcp_seg_copy+0x50>
c000a25a:	66 90                	xchg   ax,ax
c000a25c:	83 ec 04             	sub    esp,0x4
c000a25f:	6a 10                	push   0x10
c000a261:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a265:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a269:	e8 0c 61 ff ff       	call   c000037a <memcpy>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a275:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 a3 ea ff ff       	call   c0008d24 <pbuf_ref>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a288:	83 c4 1c             	add    esp,0x1c
c000a28b:	c3                   	ret    

c000a28c <tcp_arg>:
c000a28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a297:	90                   	nop
c000a298:	c3                   	ret    
c000a299:	8d 76 00             	lea    esi,[esi+0x0]

c000a29c <tcp_recv>:
c000a29c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2a4:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a2aa:	90                   	nop
c000a2ab:	c3                   	ret    

c000a2ac <tcp_sent>:
c000a2ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2b4:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a2ba:	90                   	nop
c000a2bb:	c3                   	ret    

c000a2bc <tcp_err>:
c000a2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2c4:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a2ca:	90                   	nop
c000a2cb:	c3                   	ret    

c000a2cc <tcp_accept>:
c000a2cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2d4:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a2d7:	90                   	nop
c000a2d8:	c3                   	ret    
c000a2d9:	8d 76 00             	lea    esi,[esi+0x0]

c000a2dc <tcp_poll>:
c000a2dc:	83 ec 04             	sub    esp,0x4
c000a2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e3:	88 04 24             	mov    BYTE PTR [esp],al
c000a2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2ee:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a2f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2f8:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a2fb:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a2fe:	90                   	nop
c000a2ff:	83 c4 04             	add    esp,0x4
c000a302:	c3                   	ret    
c000a303:	90                   	nop

c000a304 <tcp_pcb_purge>:
c000a304:	83 ec 0c             	sub    esp,0xc
c000a307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a30b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a30e:	85 c0                	test   eax,eax
c000a310:	0f 84 ca 00 00 00    	je     c000a3e0 <tcp_pcb_purge+0xdc>
c000a316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a31a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a31d:	83 f8 0a             	cmp    eax,0xa
c000a320:	0f 84 ba 00 00 00    	je     c000a3e0 <tcp_pcb_purge+0xdc>
c000a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a32a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a32d:	83 f8 01             	cmp    eax,0x1
c000a330:	0f 84 aa 00 00 00    	je     c000a3e0 <tcp_pcb_purge+0xdc>
c000a336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a33a:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a340:	85 c0                	test   eax,eax
c000a342:	74 24                	je     c000a368 <tcp_pcb_purge+0x64>
c000a344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a348:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a34e:	83 ec 0c             	sub    esp,0xc
c000a351:	50                   	push   eax
c000a352:	e8 bd e1 ff ff       	call   c0008514 <pbuf_free>
c000a357:	83 c4 10             	add    esp,0x10
c000a35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a35e:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a36c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a372:	83 ec 0c             	sub    esp,0xc
c000a375:	50                   	push   eax
c000a376:	e8 69 fe ff ff       	call   c000a1e4 <tcp_segs_free>
c000a37b:	83 c4 10             	add    esp,0x10
c000a37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a382:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a390:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a39d:	83 ec 0c             	sub    esp,0xc
c000a3a0:	50                   	push   eax
c000a3a1:	e8 3e fe ff ff       	call   c000a1e4 <tcp_segs_free>
c000a3a6:	83 c4 10             	add    esp,0x10
c000a3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ad:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a3b0:	83 ec 0c             	sub    esp,0xc
c000a3b3:	50                   	push   eax
c000a3b4:	e8 2b fe ff ff       	call   c000a1e4 <tcp_segs_free>
c000a3b9:	83 c4 10             	add    esp,0x10
c000a3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3c0:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3cb:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d2:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a3d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d9:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a3df:	90                   	nop
c000a3e0:	90                   	nop
c000a3e1:	83 c4 0c             	add    esp,0xc
c000a3e4:	c3                   	ret    
c000a3e5:	8d 76 00             	lea    esi,[esi+0x0]

c000a3e8 <tcp_slowtmr>:
c000a3e8:	57                   	push   edi
c000a3e9:	56                   	push   esi
c000a3ea:	53                   	push   ebx
c000a3eb:	83 ec 20             	sub    esp,0x20
c000a3ee:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a3f3:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a3f8:	83 c0 01             	add    eax,0x1
c000a3fb:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a400:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a408:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a40d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a411:	e9 0e 06 00 00       	jmp    c000aa24 <tcp_slowtmr+0x63c>
c000a416:	66 90                	xchg   ax,ax
c000a418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a41c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a41f:	85 c0                	test   eax,eax
c000a421:	75 15                	jne    c000a438 <tcp_slowtmr+0x50>
c000a423:	83 ec 08             	sub    esp,0x8
c000a426:	68 30 06 03 c0       	push   0xc0030630
c000a42b:	68 26 00 03 c0       	push   0xc0030026
c000a430:	e8 8f 5a 01 00       	call   c001fec4 <CPrintf>
c000a435:	83 c4 10             	add    esp,0x10
c000a438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a43c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a43f:	83 f8 01             	cmp    eax,0x1
c000a442:	75 18                	jne    c000a45c <tcp_slowtmr+0x74>
c000a444:	83 ec 08             	sub    esp,0x8
c000a447:	68 5c 06 03 c0       	push   0xc003065c
c000a44c:	68 26 00 03 c0       	push   0xc0030026
c000a451:	e8 6e 5a 01 00       	call   c001fec4 <CPrintf>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	8d 76 00             	lea    esi,[esi+0x0]
c000a45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a460:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a463:	83 f8 0a             	cmp    eax,0xa
c000a466:	75 18                	jne    c000a480 <tcp_slowtmr+0x98>
c000a468:	83 ec 08             	sub    esp,0x8
c000a46b:	68 88 06 03 c0       	push   0xc0030688
c000a470:	68 26 00 03 c0       	push   0xc0030026
c000a475:	e8 4a 5a 01 00       	call   c001fec4 <CPrintf>
c000a47a:	83 c4 10             	add    esp,0x10
c000a47d:	8d 76 00             	lea    esi,[esi+0x0]
c000a480:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a485:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a48a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a48e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a491:	83 f8 02             	cmp    eax,0x2
c000a494:	75 22                	jne    c000a4b8 <tcp_slowtmr+0xd0>
c000a496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a49a:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a49d:	0f b6 c0             	movzx  eax,al
c000a4a0:	83 f8 06             	cmp    eax,0x6
c000a4a3:	75 13                	jne    c000a4b8 <tcp_slowtmr+0xd0>
c000a4a5:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4a9:	83 c0 01             	add    eax,0x1
c000a4ac:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4b0:	e9 eb 01 00 00       	jmp    c000a6a0 <tcp_slowtmr+0x2b8>
c000a4b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a4b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4bc:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a4bf:	0f b6 c0             	movzx  eax,al
c000a4c2:	83 f8 0c             	cmp    eax,0xc
c000a4c5:	75 11                	jne    c000a4d8 <tcp_slowtmr+0xf0>
c000a4c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4cb:	83 c0 01             	add    eax,0x1
c000a4ce:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4d2:	e9 c9 01 00 00       	jmp    c000a6a0 <tcp_slowtmr+0x2b8>
c000a4d7:	90                   	nop
c000a4d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4dc:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4e2:	0f b6 c0             	movzx  eax,al
c000a4e5:	85 c0                	test   eax,eax
c000a4e7:	0f 84 8f 00 00 00    	je     c000a57c <tcp_slowtmr+0x194>
c000a4ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4f1:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a4f7:	8d 50 01             	lea    edx,[eax+0x1]
c000a4fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4fe:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a504:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a508:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a50e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a512:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a518:	0f b6 c0             	movzx  eax,al
c000a51b:	83 e8 01             	sub    eax,0x1
c000a51e:	8a 80 10 09 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf6f0]
c000a524:	0f b6 c0             	movzx  eax,al
c000a527:	39 c2                	cmp    edx,eax
c000a529:	0f 82 71 01 00 00    	jb     c000a6a0 <tcp_slowtmr+0x2b8>
c000a52f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a533:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a53d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a541:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a547:	0f b6 c0             	movzx  eax,al
c000a54a:	83 f8 06             	cmp    eax,0x6
c000a54d:	77 19                	ja     c000a568 <tcp_slowtmr+0x180>
c000a54f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a553:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a559:	83 c0 01             	add    eax,0x1
c000a55c:	88 c2                	mov    dl,al
c000a55e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a562:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a568:	83 ec 0c             	sub    esp,0xc
c000a56b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a56f:	e8 58 64 00 00       	call   c00109cc <tcp_zero_window_probe>
c000a574:	83 c4 10             	add    esp,0x10
c000a577:	e9 24 01 00 00       	jmp    c000a6a0 <tcp_slowtmr+0x2b8>
c000a57c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a580:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a584:	98                   	cwde   
c000a585:	85 c0                	test   eax,eax
c000a587:	78 17                	js     c000a5a0 <tcp_slowtmr+0x1b8>
c000a589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a58d:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a591:	83 c0 01             	add    eax,0x1
c000a594:	89 c2                	mov    edx,eax
c000a596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a59a:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
c000a59e:	66 90                	xchg   ax,ax
c000a5a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a5a7:	85 c0                	test   eax,eax
c000a5a9:	0f 84 f1 00 00 00    	je     c000a6a0 <tcp_slowtmr+0x2b8>
c000a5af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5b3:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a5be:	0f bf d2             	movsx  edx,dx
c000a5c1:	98                   	cwde   
c000a5c2:	39 c2                	cmp    edx,eax
c000a5c4:	0f 8c d6 00 00 00    	jl     c000a6a0 <tcp_slowtmr+0x2b8>
c000a5ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a5d1:	83 f8 02             	cmp    eax,0x2
c000a5d4:	74 3e                	je     c000a614 <tcp_slowtmr+0x22c>
c000a5d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5da:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a5dd:	98                   	cwde   
c000a5de:	c1 f8 03             	sar    eax,0x3
c000a5e1:	0f bf d0             	movsx  edx,ax
c000a5e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e8:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a5ec:	98                   	cwde   
c000a5ed:	01 c2                	add    edx,eax
c000a5ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5f3:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a5f6:	0f b6 c0             	movzx  eax,al
c000a5f9:	8a 80 18 09 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf6e8]
c000a5ff:	0f b6 c0             	movzx  eax,al
c000a602:	88 c1                	mov    cl,al
c000a604:	d3 e2                	shl    edx,cl
c000a606:	89 d0                	mov    eax,edx
c000a608:	89 c2                	mov    edx,eax
c000a60a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60e:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000a612:	66 90                	xchg   ax,ax
c000a614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a618:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a622:	8b 48 60             	mov    ecx,DWORD PTR [eax+0x60]
c000a625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a629:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000a62d:	89 c8                	mov    eax,ecx
c000a62f:	0f b7 d8             	movzx  ebx,ax
c000a632:	0f b7 ca             	movzx  ecx,dx
c000a635:	39 cb                	cmp    ebx,ecx
c000a637:	76 03                	jbe    c000a63c <tcp_slowtmr+0x254>
c000a639:	89 d0                	mov    eax,edx
c000a63b:	90                   	nop
c000a63c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a641:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a646:	d1 e8                	shr    eax,1
c000a648:	89 c2                	mov    edx,eax
c000a64a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a64e:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a652:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a656:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a659:	0f b7 d0             	movzx  edx,ax
c000a65c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a660:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a663:	0f b7 c0             	movzx  eax,ax
c000a666:	d1 e0                	shl    eax,1
c000a668:	39 c2                	cmp    edx,eax
c000a66a:	7d 14                	jge    c000a680 <tcp_slowtmr+0x298>
c000a66c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a670:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a673:	d1 e0                	shl    eax,1
c000a675:	89 c2                	mov    edx,eax
c000a677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a67b:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a67f:	90                   	nop
c000a680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a684:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a68b:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000a68f:	83 ec 0c             	sub    esp,0xc
c000a692:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a696:	e8 21 60 00 00       	call   c00106bc <tcp_rexmit_rto>
c000a69b:	83 c4 10             	add    esp,0x10
c000a69e:	66 90                	xchg   ax,ax
c000a6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6a7:	83 f8 06             	cmp    eax,0x6
c000a6aa:	75 24                	jne    c000a6d0 <tcp_slowtmr+0x2e8>
c000a6ac:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a6b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6b9:	29 c2                	sub    edx,eax
c000a6bb:	89 d0                	mov    eax,edx
c000a6bd:	83 f8 28             	cmp    eax,0x28
c000a6c0:	76 0e                	jbe    c000a6d0 <tcp_slowtmr+0x2e8>
c000a6c2:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6c6:	83 c0 01             	add    eax,0x1
c000a6c9:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6cd:	8d 76 00             	lea    esi,[esi+0x0]
c000a6d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d4:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a6d7:	0f b6 c0             	movzx  eax,al
c000a6da:	83 e0 08             	and    eax,0x8
c000a6dd:	0f 84 cd 00 00 00    	je     c000a7b0 <tcp_slowtmr+0x3c8>
c000a6e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6ea:	83 f8 04             	cmp    eax,0x4
c000a6ed:	74 11                	je     c000a700 <tcp_slowtmr+0x318>
c000a6ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6f6:	83 f8 07             	cmp    eax,0x7
c000a6f9:	0f 85 b1 00 00 00    	jne    c000a7b0 <tcp_slowtmr+0x3c8>
c000a6ff:	90                   	nop
c000a700:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a706:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a70a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a70d:	89 d1                	mov    ecx,edx
c000a70f:	29 c1                	sub    ecx,eax
c000a711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a715:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a71b:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a720:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a725:	f7 e2                	mul    edx
c000a727:	89 d0                	mov    eax,edx
c000a729:	c1 e8 05             	shr    eax,0x5
c000a72c:	39 c1                	cmp    ecx,eax
c000a72e:	76 18                	jbe    c000a748 <tcp_slowtmr+0x360>
c000a730:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a734:	83 c0 01             	add    eax,0x1
c000a737:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a73b:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a73f:	83 c0 01             	add    eax,0x1
c000a742:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a746:	eb 68                	jmp    c000a7b0 <tcp_slowtmr+0x3c8>
c000a748:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a74e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a752:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a755:	89 d1                	mov    ecx,edx
c000a757:	29 c1                	sub    ecx,eax
c000a759:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a75d:	8b 90 9c 00 00 00    	mov    edx,DWORD PTR [eax+0x9c]
c000a763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a767:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a76d:	0f b6 c0             	movzx  eax,al
c000a770:	69 c0 f8 24 01 00    	imul   eax,eax,0x124f8
c000a776:	01 d0                	add    eax,edx
c000a778:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a77d:	f7 e2                	mul    edx
c000a77f:	89 d0                	mov    eax,edx
c000a781:	c1 e8 05             	shr    eax,0x5
c000a784:	39 c1                	cmp    ecx,eax
c000a786:	76 28                	jbe    c000a7b0 <tcp_slowtmr+0x3c8>
c000a788:	83 ec 0c             	sub    esp,0xc
c000a78b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a78f:	e8 6c 61 00 00       	call   c0010900 <tcp_keepalive>
c000a794:	83 c4 10             	add    esp,0x10
c000a797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a79b:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a7a1:	83 c0 01             	add    eax,0x1
c000a7a4:	88 c2                	mov    dl,al
c000a7a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7aa:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a7b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7b4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7ba:	85 c0                	test   eax,eax
c000a7bc:	74 4e                	je     c000a80c <tcp_slowtmr+0x424>
c000a7be:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a7c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7c8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7cb:	89 d1                	mov    ecx,edx
c000a7cd:	29 c1                	sub    ecx,eax
c000a7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d3:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a7d6:	0f bf d0             	movsx  edx,ax
c000a7d9:	89 d0                	mov    eax,edx
c000a7db:	d1 e0                	shl    eax,1
c000a7dd:	01 d0                	add    eax,edx
c000a7df:	d1 e0                	shl    eax,1
c000a7e1:	39 c1                	cmp    ecx,eax
c000a7e3:	72 27                	jb     c000a80c <tcp_slowtmr+0x424>
c000a7e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e9:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7ef:	83 ec 0c             	sub    esp,0xc
c000a7f2:	50                   	push   eax
c000a7f3:	e8 ec f9 ff ff       	call   c000a1e4 <tcp_segs_free>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7ff:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a809:	8d 76 00             	lea    esi,[esi+0x0]
c000a80c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a813:	83 f8 03             	cmp    eax,0x3
c000a816:	75 24                	jne    c000a83c <tcp_slowtmr+0x454>
c000a818:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a81e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a822:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a825:	29 c2                	sub    edx,eax
c000a827:	89 d0                	mov    eax,edx
c000a829:	83 f8 28             	cmp    eax,0x28
c000a82c:	76 0e                	jbe    c000a83c <tcp_slowtmr+0x454>
c000a82e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a832:	83 c0 01             	add    eax,0x1
c000a835:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a839:	8d 76 00             	lea    esi,[esi+0x0]
c000a83c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a840:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a843:	83 f8 09             	cmp    eax,0x9
c000a846:	75 24                	jne    c000a86c <tcp_slowtmr+0x484>
c000a848:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a84e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a852:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a855:	29 c2                	sub    edx,eax
c000a857:	89 d0                	mov    eax,edx
c000a859:	3d f0 00 00 00       	cmp    eax,0xf0
c000a85e:	76 0c                	jbe    c000a86c <tcp_slowtmr+0x484>
c000a860:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a864:	83 c0 01             	add    eax,0x1
c000a867:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a86b:	90                   	nop
c000a86c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a871:	85 c0                	test   eax,eax
c000a873:	0f 84 13 01 00 00    	je     c000a98c <tcp_slowtmr+0x5a4>
c000a879:	83 ec 0c             	sub    esp,0xc
c000a87c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a880:	e8 7f fa ff ff       	call   c000a304 <tcp_pcb_purge>
c000a885:	83 c4 10             	add    esp,0x10
c000a888:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a88d:	74 31                	je     c000a8c0 <tcp_slowtmr+0x4d8>
c000a88f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a894:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a898:	75 16                	jne    c000a8b0 <tcp_slowtmr+0x4c8>
c000a89a:	83 ec 08             	sub    esp,0x8
c000a89d:	68 b8 06 03 c0       	push   0xc00306b8
c000a8a2:	68 26 00 03 c0       	push   0xc0030026
c000a8a7:	e8 18 56 01 00       	call   c001fec4 <CPrintf>
c000a8ac:	83 c4 10             	add    esp,0x10
c000a8af:	90                   	nop
c000a8b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a8b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8bb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a8be:	eb 2c                	jmp    c000a8ec <tcp_slowtmr+0x504>
c000a8c0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a8c5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a8c9:	74 15                	je     c000a8e0 <tcp_slowtmr+0x4f8>
c000a8cb:	83 ec 08             	sub    esp,0x8
c000a8ce:	68 e4 06 03 c0       	push   0xc00306e4
c000a8d3:	68 26 00 03 c0       	push   0xc0030026
c000a8d8:	e8 e7 55 01 00       	call   c001fec4 <CPrintf>
c000a8dd:	83 c4 10             	add    esp,0x10
c000a8e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8e7:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a8ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f0:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8f6:	85 c0                	test   eax,eax
c000a8f8:	74 1e                	je     c000a918 <tcp_slowtmr+0x530>
c000a8fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8fe:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a904:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a908:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a90b:	83 ec 08             	sub    esp,0x8
c000a90e:	6a f6                	push   0xfffffff6
c000a910:	52                   	push   edx
c000a911:	ff d0                	call   eax
c000a913:	83 c4 10             	add    esp,0x10
c000a916:	66 90                	xchg   ax,ax
c000a918:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a91d:	85 c0                	test   eax,eax
c000a91f:	74 3f                	je     c000a960 <tcp_slowtmr+0x578>
c000a921:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a925:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a929:	0f b7 f0             	movzx  esi,ax
c000a92c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a930:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a933:	0f b7 d8             	movzx  ebx,ax
c000a936:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a93a:	8d 78 04             	lea    edi,[eax+0x4]
c000a93d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a945:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a948:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a94c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a94f:	83 ec 08             	sub    esp,0x8
c000a952:	56                   	push   esi
c000a953:	53                   	push   ebx
c000a954:	57                   	push   edi
c000a955:	51                   	push   ecx
c000a956:	52                   	push   edx
c000a957:	50                   	push   eax
c000a958:	e8 e3 5b 00 00       	call   c0010540 <tcp_rst>
c000a95d:	83 c4 20             	add    esp,0x20
c000a960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a96c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a96f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a973:	83 ec 08             	sub    esp,0x8
c000a976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a97a:	6a 02                	push   0x2
c000a97c:	e8 d3 d2 ff ff       	call   c0007c54 <memp_free>
c000a981:	83 c4 10             	add    esp,0x10
c000a984:	e9 9b 00 00 00       	jmp    c000aa24 <tcp_slowtmr+0x63c>
c000a989:	8d 76 00             	lea    esi,[esi+0x0]
c000a98c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a990:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a994:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a998:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a99b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a99f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9a3:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a9a6:	83 c0 01             	add    eax,0x1
c000a9a9:	88 c2                	mov    dl,al
c000a9ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9af:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a9b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9b6:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a9b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9bd:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a9c0:	0f b6 d2             	movzx  edx,dl
c000a9c3:	0f b6 c0             	movzx  eax,al
c000a9c6:	39 c2                	cmp    edx,eax
c000a9c8:	72 5a                	jb     c000aa24 <tcp_slowtmr+0x63c>
c000a9ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9ce:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a9d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9d6:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9dc:	85 c0                	test   eax,eax
c000a9de:	74 24                	je     c000aa04 <tcp_slowtmr+0x61c>
c000a9e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9e4:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a9ee:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a9f1:	83 ec 08             	sub    esp,0x8
c000a9f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9f8:	52                   	push   edx
c000a9f9:	ff d0                	call   eax
c000a9fb:	83 c4 10             	add    esp,0x10
c000a9fe:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000aa02:	eb 08                	jmp    c000aa0c <tcp_slowtmr+0x624>
c000aa04:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000aa09:	8d 76 00             	lea    esi,[esi+0x0]
c000aa0c:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000aa11:	85 c0                	test   eax,eax
c000aa13:	75 0f                	jne    c000aa24 <tcp_slowtmr+0x63c>
c000aa15:	83 ec 0c             	sub    esp,0xc
c000aa18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aa1c:	e8 93 56 00 00       	call   c00100b4 <tcp_output>
c000aa21:	83 c4 10             	add    esp,0x10
c000aa24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000aa29:	0f 85 e9 f9 ff ff    	jne    c000a418 <tcp_slowtmr+0x30>
c000aa2f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aa37:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aa3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa40:	e9 0b 01 00 00       	jmp    c000ab50 <tcp_slowtmr+0x768>
c000aa45:	8d 76 00             	lea    esi,[esi+0x0]
c000aa48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa4c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa4f:	83 f8 0a             	cmp    eax,0xa
c000aa52:	74 18                	je     c000aa6c <tcp_slowtmr+0x684>
c000aa54:	83 ec 08             	sub    esp,0x8
c000aa57:	68 10 07 03 c0       	push   0xc0030710
c000aa5c:	68 26 00 03 c0       	push   0xc0030026
c000aa61:	e8 5e 54 01 00       	call   c001fec4 <CPrintf>
c000aa66:	83 c4 10             	add    esp,0x10
c000aa69:	8d 76 00             	lea    esi,[esi+0x0]
c000aa6c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aa71:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000aa77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa7b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000aa7e:	29 c2                	sub    edx,eax
c000aa80:	89 d0                	mov    eax,edx
c000aa82:	3d f0 00 00 00       	cmp    eax,0xf0
c000aa87:	76 0b                	jbe    c000aa94 <tcp_slowtmr+0x6ac>
c000aa89:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000aa8d:	83 c0 01             	add    eax,0x1
c000aa90:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000aa94:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000aa99:	85 c0                	test   eax,eax
c000aa9b:	0f 84 9b 00 00 00    	je     c000ab3c <tcp_slowtmr+0x754>
c000aaa1:	83 ec 0c             	sub    esp,0xc
c000aaa4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aaa8:	e8 57 f8 ff ff       	call   c000a304 <tcp_pcb_purge>
c000aaad:	83 c4 10             	add    esp,0x10
c000aab0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aab5:	74 31                	je     c000aae8 <tcp_slowtmr+0x700>
c000aab7:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aabc:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aac0:	75 16                	jne    c000aad8 <tcp_slowtmr+0x6f0>
c000aac2:	83 ec 08             	sub    esp,0x8
c000aac5:	68 40 07 03 c0       	push   0xc0030740
c000aaca:	68 26 00 03 c0       	push   0xc0030026
c000aacf:	e8 f0 53 01 00       	call   c001fec4 <CPrintf>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	90                   	nop
c000aad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aadc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000aadf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aae3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aae6:	eb 2c                	jmp    c000ab14 <tcp_slowtmr+0x72c>
c000aae8:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aaed:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aaf1:	74 15                	je     c000ab08 <tcp_slowtmr+0x720>
c000aaf3:	83 ec 08             	sub    esp,0x8
c000aaf6:	68 68 07 03 c0       	push   0xc0030768
c000aafb:	68 26 00 03 c0       	push   0xc0030026
c000ab00:	e8 bf 53 01 00       	call   c001fec4 <CPrintf>
c000ab05:	83 c4 10             	add    esp,0x10
c000ab08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab0f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ab14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab27:	83 ec 08             	sub    esp,0x8
c000ab2a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ab2e:	6a 02                	push   0x2
c000ab30:	e8 1f d1 ff ff       	call   c0007c54 <memp_free>
c000ab35:	83 c4 10             	add    esp,0x10
c000ab38:	eb 16                	jmp    c000ab50 <tcp_slowtmr+0x768>
c000ab3a:	66 90                	xchg   ax,ax
c000ab3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab4f:	90                   	nop
c000ab50:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ab55:	0f 85 ed fe ff ff    	jne    c000aa48 <tcp_slowtmr+0x660>
c000ab5b:	90                   	nop
c000ab5c:	83 c4 20             	add    esp,0x20
c000ab5f:	5b                   	pop    ebx
c000ab60:	5e                   	pop    esi
c000ab61:	5f                   	pop    edi
c000ab62:	c3                   	ret    
c000ab63:	90                   	nop

c000ab64 <tcp_pcb_remove>:
c000ab64:	83 ec 0c             	sub    esp,0xc
c000ab67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab6d:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab71:	75 11                	jne    c000ab84 <tcp_pcb_remove+0x20>
c000ab73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab77:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab79:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ab7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab80:	89 10                	mov    DWORD PTR [eax],edx
c000ab82:	eb 4c                	jmp    c000abd0 <tcp_pcb_remove+0x6c>
c000ab84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab8a:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab8f:	eb 33                	jmp    c000abc4 <tcp_pcb_remove+0x60>
c000ab91:	8d 76 00             	lea    esi,[esi+0x0]
c000ab94:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab99:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab9c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000aba0:	75 12                	jne    c000abb4 <tcp_pcb_remove+0x50>
c000aba2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aba7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000abab:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000abae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abb1:	eb 1d                	jmp    c000abd0 <tcp_pcb_remove+0x6c>
c000abb3:	90                   	nop
c000abb4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abbc:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]
c000abc4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abc9:	85 c0                	test   eax,eax
c000abcb:	75 c7                	jne    c000ab94 <tcp_pcb_remove+0x30>
c000abcd:	8d 76 00             	lea    esi,[esi+0x0]
c000abd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abd4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abe2:	e8 1d f7 ff ff       	call   c000a304 <tcp_pcb_purge>
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abf1:	83 f8 0a             	cmp    eax,0xa
c000abf4:	74 3e                	je     c000ac34 <tcp_pcb_remove+0xd0>
c000abf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abfa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abfd:	83 f8 01             	cmp    eax,0x1
c000ac00:	74 32                	je     c000ac34 <tcp_pcb_remove+0xd0>
c000ac02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ac09:	0f b6 c0             	movzx  eax,al
c000ac0c:	83 e0 01             	and    eax,0x1
c000ac0f:	74 23                	je     c000ac34 <tcp_pcb_remove+0xd0>
c000ac11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac15:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ac18:	83 c8 02             	or     eax,0x2
c000ac1b:	88 c2                	mov    dl,al
c000ac1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac21:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ac2b:	e8 84 54 00 00       	call   c00100b4 <tcp_output>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac38:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac3b:	83 f8 01             	cmp    eax,0x1
c000ac3e:	74 64                	je     c000aca4 <tcp_pcb_remove+0x140>
c000ac40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac44:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ac47:	85 c0                	test   eax,eax
c000ac49:	74 15                	je     c000ac60 <tcp_pcb_remove+0xfc>
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	68 0e 08 03 c0       	push   0xc003080e
c000ac53:	68 26 00 03 c0       	push   0xc0030026
c000ac58:	e8 67 52 01 00       	call   c001fec4 <CPrintf>
c000ac5d:	83 c4 10             	add    esp,0x10
c000ac60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac64:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ac67:	85 c0                	test   eax,eax
c000ac69:	74 15                	je     c000ac80 <tcp_pcb_remove+0x11c>
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	68 26 08 03 c0       	push   0xc0030826
c000ac73:	68 26 00 03 c0       	push   0xc0030026
c000ac78:	e8 47 52 01 00       	call   c001fec4 <CPrintf>
c000ac7d:	83 c4 10             	add    esp,0x10
c000ac80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac84:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ac8a:	85 c0                	test   eax,eax
c000ac8c:	74 16                	je     c000aca4 <tcp_pcb_remove+0x140>
c000ac8e:	83 ec 08             	sub    esp,0x8
c000ac91:	68 3f 08 03 c0       	push   0xc003083f
c000ac96:	68 26 00 03 c0       	push   0xc0030026
c000ac9b:	e8 24 52 01 00       	call   c001fec4 <CPrintf>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	90                   	nop
c000aca4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aca8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000acaf:	90                   	nop
c000acb0:	83 c4 0c             	add    esp,0xc
c000acb3:	c3                   	ret    

c000acb4 <tcp_close_shutdown>:
c000acb4:	57                   	push   edi
c000acb5:	56                   	push   esi
c000acb6:	53                   	push   ebx
c000acb7:	83 ec 20             	sub    esp,0x20
c000acba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000acbe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000acc2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000acc7:	85 c0                	test   eax,eax
c000acc9:	0f 84 41 01 00 00    	je     c000ae10 <tcp_close_shutdown+0x15c>
c000accf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acd3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000acd6:	83 f8 01             	cmp    eax,0x1
c000acd9:	0f 84 31 01 00 00    	je     c000ae10 <tcp_close_shutdown+0x15c>
c000acdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ace3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ace9:	85 c0                	test   eax,eax
c000aceb:	75 17                	jne    c000ad04 <tcp_close_shutdown+0x50>
c000aced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acf1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000acf4:	0f b7 c0             	movzx  eax,ax
c000acf7:	3d 60 08 00 00       	cmp    eax,0x860
c000acfc:	0f 84 0e 01 00 00    	je     c000ae10 <tcp_close_shutdown+0x15c>
c000ad02:	66 90                	xchg   ax,ax
c000ad04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad08:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ad0b:	0f b6 c0             	movzx  eax,al
c000ad0e:	83 e0 10             	and    eax,0x10
c000ad11:	75 15                	jne    c000ad28 <tcp_close_shutdown+0x74>
c000ad13:	83 ec 08             	sub    esp,0x8
c000ad16:	68 56 08 03 c0       	push   0xc0030856
c000ad1b:	68 26 00 03 c0       	push   0xc0030026
c000ad20:	e8 9f 51 01 00       	call   c001fec4 <CPrintf>
c000ad25:	83 c4 10             	add    esp,0x10
c000ad28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad2c:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ad30:	0f b7 f0             	movzx  esi,ax
c000ad33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad37:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad3a:	0f b7 d8             	movzx  ebx,ax
c000ad3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad41:	8d 78 04             	lea    edi,[eax+0x4]
c000ad44:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ad48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad4c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ad4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad53:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ad56:	83 ec 08             	sub    esp,0x8
c000ad59:	56                   	push   esi
c000ad5a:	53                   	push   ebx
c000ad5b:	57                   	push   edi
c000ad5c:	51                   	push   ecx
c000ad5d:	52                   	push   edx
c000ad5e:	50                   	push   eax
c000ad5f:	e8 dc 57 00 00       	call   c0010540 <tcp_rst>
c000ad64:	83 c4 20             	add    esp,0x20
c000ad67:	83 ec 0c             	sub    esp,0xc
c000ad6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad6e:	e8 91 f5 ff ff       	call   c000a304 <tcp_pcb_purge>
c000ad73:	83 c4 10             	add    esp,0x10
c000ad76:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad7b:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad7f:	75 0f                	jne    c000ad90 <tcp_close_shutdown+0xdc>
c000ad81:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad89:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ad8e:	eb 48                	jmp    c000add8 <tcp_close_shutdown+0x124>
c000ad90:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad95:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad9a:	eb 30                	jmp    c000adcc <tcp_close_shutdown+0x118>
c000ad9c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ada1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ada4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ada8:	75 12                	jne    c000adbc <tcp_close_shutdown+0x108>
c000adaa:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000adaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000adb3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000adb6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adb9:	eb 1d                	jmp    c000add8 <tcp_close_shutdown+0x124>
c000adbb:	90                   	nop
c000adbc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000adc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000adc4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000adc9:	8d 76 00             	lea    esi,[esi+0x0]
c000adcc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000add1:	85 c0                	test   eax,eax
c000add3:	75 c7                	jne    c000ad9c <tcp_close_shutdown+0xe8>
c000add5:	8d 76 00             	lea    esi,[esi+0x0]
c000add8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000addc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ade3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ade7:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000adee:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000adf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adff:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ae04:	e8 53 5f 00 00       	call   c0010d5c <tcp_timer_needed>
c000ae09:	b0 00                	mov    al,0x0
c000ae0b:	e9 f4 01 00 00       	jmp    c000b004 <tcp_close_shutdown+0x350>
c000ae10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ae17:	83 f8 07             	cmp    eax,0x7
c000ae1a:	0f 87 a4 01 00 00    	ja     c000afc4 <tcp_close_shutdown+0x310>
c000ae20:	8b 04 85 e0 08 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf720]
c000ae27:	ff e0                	jmp    eax
c000ae29:	8d 76 00             	lea    esi,[esi+0x0]
c000ae2c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ae38:	0f b7 c0             	movzx  eax,ax
c000ae3b:	85 c0                	test   eax,eax
c000ae3d:	74 71                	je     c000aeb0 <tcp_close_shutdown+0x1fc>
c000ae3f:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae44:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae48:	75 12                	jne    c000ae5c <tcp_close_shutdown+0x1a8>
c000ae4a:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae52:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ae57:	eb 4b                	jmp    c000aea4 <tcp_close_shutdown+0x1f0>
c000ae59:	8d 76 00             	lea    esi,[esi+0x0]
c000ae5c:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae61:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae66:	eb 30                	jmp    c000ae98 <tcp_close_shutdown+0x1e4>
c000ae68:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae70:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae74:	75 12                	jne    c000ae88 <tcp_close_shutdown+0x1d4>
c000ae76:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae7b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ae7f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ae82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae85:	eb 1d                	jmp    c000aea4 <tcp_close_shutdown+0x1f0>
c000ae87:	90                   	nop
c000ae88:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae90:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae95:	8d 76 00             	lea    esi,[esi+0x0]
c000ae98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae9d:	85 c0                	test   eax,eax
c000ae9f:	75 c7                	jne    c000ae68 <tcp_close_shutdown+0x1b4>
c000aea1:	8d 76 00             	lea    esi,[esi+0x0]
c000aea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aea8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aeaf:	90                   	nop
c000aeb0:	83 ec 08             	sub    esp,0x8
c000aeb3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aeb7:	6a 02                	push   0x2
c000aeb9:	e8 96 cd ff ff       	call   c0007c54 <memp_free>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000aec9:	e9 12 01 00 00       	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000aece:	66 90                	xchg   ax,ax
c000aed0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aed5:	83 ec 08             	sub    esp,0x8
c000aed8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aedc:	68 78 68 03 c0       	push   0xc0036878
c000aee1:	e8 7e fc ff ff       	call   c000ab64 <tcp_pcb_remove>
c000aee6:	83 c4 10             	add    esp,0x10
c000aee9:	83 ec 08             	sub    esp,0x8
c000aeec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aef0:	6a 03                	push   0x3
c000aef2:	e8 5d cd ff ff       	call   c0007c54 <memp_free>
c000aef7:	83 c4 10             	add    esp,0x10
c000aefa:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af02:	e9 d9 00 00 00       	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000af07:	90                   	nop
c000af08:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af0d:	83 ec 08             	sub    esp,0x8
c000af10:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000af14:	68 70 68 03 c0       	push   0xc0036870
c000af19:	e8 46 fc ff ff       	call   c000ab64 <tcp_pcb_remove>
c000af1e:	83 c4 10             	add    esp,0x10
c000af21:	83 ec 08             	sub    esp,0x8
c000af24:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000af28:	6a 02                	push   0x2
c000af2a:	e8 25 cd ff ff       	call   c0007c54 <memp_free>
c000af2f:	83 c4 10             	add    esp,0x10
c000af32:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af3a:	e9 a1 00 00 00       	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000af3f:	90                   	nop
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af47:	e8 b8 4d 00 00       	call   c000fd04 <tcp_send_fin>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af53:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af58:	85 c0                	test   eax,eax
c000af5a:	75 78                	jne    c000afd4 <tcp_close_shutdown+0x320>
c000af5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af60:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af67:	eb 6b                	jmp    c000afd4 <tcp_close_shutdown+0x320>
c000af69:	8d 76 00             	lea    esi,[esi+0x0]
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af73:	e8 8c 4d 00 00       	call   c000fd04 <tcp_send_fin>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af7f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af84:	85 c0                	test   eax,eax
c000af86:	75 50                	jne    c000afd8 <tcp_close_shutdown+0x324>
c000af88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af8c:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af93:	eb 43                	jmp    c000afd8 <tcp_close_shutdown+0x324>
c000af95:	8d 76 00             	lea    esi,[esi+0x0]
c000af98:	83 ec 0c             	sub    esp,0xc
c000af9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af9f:	e8 60 4d 00 00       	call   c000fd04 <tcp_send_fin>
c000afa4:	83 c4 10             	add    esp,0x10
c000afa7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000afab:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afb0:	85 c0                	test   eax,eax
c000afb2:	75 28                	jne    c000afdc <tcp_close_shutdown+0x328>
c000afb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000afb8:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000afbf:	eb 1b                	jmp    c000afdc <tcp_close_shutdown+0x328>
c000afc1:	8d 76 00             	lea    esi,[esi+0x0]
c000afc4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000afc9:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000afd1:	eb 0d                	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000afd3:	90                   	nop
c000afd4:	90                   	nop
c000afd5:	eb 09                	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000afd7:	90                   	nop
c000afd8:	90                   	nop
c000afd9:	eb 05                	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000afdb:	90                   	nop
c000afdc:	90                   	nop
c000afdd:	8d 76 00             	lea    esi,[esi+0x0]
c000afe0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000afe5:	74 19                	je     c000b000 <tcp_close_shutdown+0x34c>
c000afe7:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afec:	85 c0                	test   eax,eax
c000afee:	75 10                	jne    c000b000 <tcp_close_shutdown+0x34c>
c000aff0:	83 ec 0c             	sub    esp,0xc
c000aff3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aff7:	e8 b8 50 00 00       	call   c00100b4 <tcp_output>
c000affc:	83 c4 10             	add    esp,0x10
c000afff:	90                   	nop
c000b000:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000b004:	83 c4 20             	add    esp,0x20
c000b007:	5b                   	pop    ebx
c000b008:	5e                   	pop    esi
c000b009:	5f                   	pop    edi
c000b00a:	c3                   	ret    
c000b00b:	90                   	nop

c000b00c <tcp_close>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b013:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b016:	83 f8 01             	cmp    eax,0x1
c000b019:	74 15                	je     c000b030 <tcp_close+0x24>
c000b01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b022:	83 c8 10             	or     eax,0x10
c000b025:	88 c2                	mov    dl,al
c000b027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b02e:	66 90                	xchg   ax,ax
c000b030:	83 ec 08             	sub    esp,0x8
c000b033:	6a 01                	push   0x1
c000b035:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b039:	e8 76 fc ff ff       	call   c000acb4 <tcp_close_shutdown>
c000b03e:	83 c4 10             	add    esp,0x10
c000b041:	83 c4 0c             	add    esp,0xc
c000b044:	c3                   	ret    
c000b045:	8d 76 00             	lea    esi,[esi+0x0]

c000b048 <tcp_recv_null>:
c000b048:	83 ec 1c             	sub    esp,0x1c
c000b04b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b04f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b053:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b058:	74 2e                	je     c000b088 <tcp_recv_null+0x40>
c000b05a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b05e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b061:	0f b7 c0             	movzx  eax,ax
c000b064:	83 ec 08             	sub    esp,0x8
c000b067:	50                   	push   eax
c000b068:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b06c:	e8 b3 ee ff ff       	call   c0009f24 <tcp_recved>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b07b:	e8 94 d4 ff ff       	call   c0008514 <pbuf_free>
c000b080:	83 c4 10             	add    esp,0x10
c000b083:	eb 1f                	jmp    c000b0a4 <tcp_recv_null+0x5c>
c000b085:	8d 76 00             	lea    esi,[esi+0x0]
c000b088:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000b08d:	85 c0                	test   eax,eax
c000b08f:	75 13                	jne    c000b0a4 <tcp_recv_null+0x5c>
c000b091:	83 ec 0c             	sub    esp,0xc
c000b094:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b098:	e8 6f ff ff ff       	call   c000b00c <tcp_close>
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	eb 06                	jmp    c000b0a8 <tcp_recv_null+0x60>
c000b0a2:	66 90                	xchg   ax,ax
c000b0a4:	b0 00                	mov    al,0x0
c000b0a6:	66 90                	xchg   ax,ax
c000b0a8:	83 c4 1c             	add    esp,0x1c
c000b0ab:	c3                   	ret    

c000b0ac <tcp_fasttmr>:
c000b0ac:	83 ec 1c             	sub    esp,0x1c
c000b0af:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b0b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b0b8:	e9 03 01 00 00       	jmp    c000b1c0 <tcp_fasttmr+0x114>
c000b0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b0c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b0cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0cf:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0d5:	85 c0                	test   eax,eax
c000b0d7:	0f 84 8f 00 00 00    	je     c000b16c <tcp_fasttmr+0xc0>
c000b0dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0e1:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0e7:	85 c0                	test   eax,eax
c000b0e9:	74 31                	je     c000b11c <tcp_fasttmr+0x70>
c000b0eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0ef:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0f9:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000b0ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b103:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000b106:	6a 00                	push   0x0
c000b108:	51                   	push   ecx
c000b109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b10d:	52                   	push   edx
c000b10e:	ff d0                	call   eax
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b117:	eb 23                	jmp    c000b13c <tcp_fasttmr+0x90>
c000b119:	8d 76 00             	lea    esi,[esi+0x0]
c000b11c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b120:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b126:	6a 00                	push   0x0
c000b128:	50                   	push   eax
c000b129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b12d:	6a 00                	push   0x0
c000b12f:	e8 14 ff ff ff       	call   c000b048 <tcp_recv_null>
c000b134:	83 c4 10             	add    esp,0x10
c000b137:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b13b:	90                   	nop
c000b13c:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b141:	85 c0                	test   eax,eax
c000b143:	75 13                	jne    c000b158 <tcp_fasttmr+0xac>
c000b145:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b149:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b153:	eb 17                	jmp    c000b16c <tcp_fasttmr+0xc0>
c000b155:	8d 76 00             	lea    esi,[esi+0x0]
c000b158:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b15d:	83 f8 f6             	cmp    eax,0xfffffff6
c000b160:	75 0a                	jne    c000b16c <tcp_fasttmr+0xc0>
c000b162:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b16a:	66 90                	xchg   ax,ax
c000b16c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b171:	74 45                	je     c000b1b8 <tcp_fasttmr+0x10c>
c000b173:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b177:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b17a:	0f b6 c0             	movzx  eax,al
c000b17d:	83 e0 01             	and    eax,0x1
c000b180:	74 36                	je     c000b1b8 <tcp_fasttmr+0x10c>
c000b182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b186:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b189:	83 c8 02             	or     eax,0x2
c000b18c:	88 c2                	mov    dl,al
c000b18e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b192:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b195:	83 ec 0c             	sub    esp,0xc
c000b198:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b19c:	e8 13 4f 00 00       	call   c00100b4 <tcp_output>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1a8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b1ab:	83 e0 fc             	and    eax,0xfffffffc
c000b1ae:	88 c2                	mov    dl,al
c000b1b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1b4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b1b7:	90                   	nop
c000b1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b1c5:	0f 85 f5 fe ff ff    	jne    c000b0c0 <tcp_fasttmr+0x14>
c000b1cb:	90                   	nop
c000b1cc:	83 c4 1c             	add    esp,0x1c
c000b1cf:	c3                   	ret    

c000b1d0 <tcp_tmr>:
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	e8 d4 fe ff ff       	call   c000b0ac <tcp_fasttmr>
c000b1d8:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1dd:	83 c0 01             	add    eax,0x1
c000b1e0:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b1e5:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1ea:	0f b6 c0             	movzx  eax,al
c000b1ed:	83 e0 01             	and    eax,0x1
c000b1f0:	74 06                	je     c000b1f8 <tcp_tmr+0x28>
c000b1f2:	e8 f1 f1 ff ff       	call   c000a3e8 <tcp_slowtmr>
c000b1f7:	90                   	nop
c000b1f8:	90                   	nop
c000b1f9:	83 c4 0c             	add    esp,0xc
c000b1fc:	c3                   	ret    
c000b1fd:	8d 76 00             	lea    esi,[esi+0x0]

c000b200 <tcp_shutdown>:
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b207:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b20a:	83 f8 01             	cmp    eax,0x1
c000b20d:	75 09                	jne    c000b218 <tcp_shutdown+0x18>
c000b20f:	b0 f3                	mov    al,0xf3
c000b211:	e9 92 00 00 00       	jmp    c000b2a8 <tcp_shutdown+0xa8>
c000b216:	66 90                	xchg   ax,ax
c000b218:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b21d:	74 49                	je     c000b268 <tcp_shutdown+0x68>
c000b21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b223:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b229:	85 c0                	test   eax,eax
c000b22b:	74 27                	je     c000b254 <tcp_shutdown+0x54>
c000b22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b231:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b237:	83 ec 0c             	sub    esp,0xc
c000b23a:	50                   	push   eax
c000b23b:	e8 d4 d2 ff ff       	call   c0008514 <pbuf_free>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b247:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b251:	8d 76 00             	lea    esi,[esi+0x0]
c000b254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b258:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b25b:	83 c8 10             	or     eax,0x10
c000b25e:	88 c2                	mov    dl,al
c000b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b264:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b267:	90                   	nop
c000b268:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b26d:	74 2d                	je     c000b29c <tcp_shutdown+0x9c>
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b276:	83 f8 03             	cmp    eax,0x3
c000b279:	72 25                	jb     c000b2a0 <tcp_shutdown+0xa0>
c000b27b:	83 f8 04             	cmp    eax,0x4
c000b27e:	76 08                	jbe    c000b288 <tcp_shutdown+0x88>
c000b280:	83 f8 07             	cmp    eax,0x7
c000b283:	75 1b                	jne    c000b2a0 <tcp_shutdown+0xa0>
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	83 ec 08             	sub    esp,0x8
c000b28b:	6a 00                	push   0x0
c000b28d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b291:	e8 1e fa ff ff       	call   c000acb4 <tcp_close_shutdown>
c000b296:	83 c4 10             	add    esp,0x10
c000b299:	eb 0d                	jmp    c000b2a8 <tcp_shutdown+0xa8>
c000b29b:	90                   	nop
c000b29c:	90                   	nop
c000b29d:	eb 05                	jmp    c000b2a4 <tcp_shutdown+0xa4>
c000b29f:	90                   	nop
c000b2a0:	90                   	nop
c000b2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b2a4:	b0 00                	mov    al,0x0
c000b2a6:	66 90                	xchg   ax,ax
c000b2a8:	83 c4 0c             	add    esp,0xc
c000b2ab:	c3                   	ret    

c000b2ac <tcp_abandon>:
c000b2ac:	83 ec 2c             	sub    esp,0x2c
c000b2af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2b6:	83 f8 01             	cmp    eax,0x1
c000b2b9:	75 15                	jne    c000b2d0 <tcp_abandon+0x24>
c000b2bb:	83 ec 08             	sub    esp,0x8
c000b2be:	68 90 07 03 c0       	push   0xc0030790
c000b2c3:	68 26 00 03 c0       	push   0xc0030026
c000b2c8:	e8 f7 4b 01 00       	call   c001fec4 <CPrintf>
c000b2cd:	83 c4 10             	add    esp,0x10
c000b2d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2d7:	83 f8 0a             	cmp    eax,0xa
c000b2da:	75 2c                	jne    c000b308 <tcp_abandon+0x5c>
c000b2dc:	83 ec 08             	sub    esp,0x8
c000b2df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2e3:	68 84 68 03 c0       	push   0xc0036884
c000b2e8:	e8 77 f8 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	83 ec 08             	sub    esp,0x8
c000b2f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2f7:	6a 02                	push   0x2
c000b2f9:	e8 56 c9 ff ff       	call   c0007c54 <memp_free>
c000b2fe:	83 c4 10             	add    esp,0x10
c000b301:	e9 32 01 00 00       	jmp    c000b438 <tcp_abandon+0x18c>
c000b306:	66 90                	xchg   ax,ax
c000b308:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b30c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b30f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b317:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b31a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b31e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b322:	8b 00                	mov    eax,DWORD PTR [eax]
c000b324:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b32c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b32f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b333:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b337:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b33a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b33f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b343:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b347:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b34c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b350:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b356:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b35a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b35e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b361:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b365:	83 ec 08             	sub    esp,0x8
c000b368:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b36c:	68 70 68 03 c0       	push   0xc0036870
c000b371:	e8 ee f7 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000b376:	83 c4 10             	add    esp,0x10
c000b379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b37d:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b380:	85 c0                	test   eax,eax
c000b382:	74 14                	je     c000b398 <tcp_abandon+0xec>
c000b384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b388:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b38b:	83 ec 0c             	sub    esp,0xc
c000b38e:	50                   	push   eax
c000b38f:	e8 50 ee ff ff       	call   c000a1e4 <tcp_segs_free>
c000b394:	83 c4 10             	add    esp,0x10
c000b397:	90                   	nop
c000b398:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b39c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b39f:	85 c0                	test   eax,eax
c000b3a1:	74 15                	je     c000b3b8 <tcp_abandon+0x10c>
c000b3a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3a7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b3aa:	83 ec 0c             	sub    esp,0xc
c000b3ad:	50                   	push   eax
c000b3ae:	e8 31 ee ff ff       	call   c000a1e4 <tcp_segs_free>
c000b3b3:	83 c4 10             	add    esp,0x10
c000b3b6:	66 90                	xchg   ax,ax
c000b3b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3bc:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3c2:	85 c0                	test   eax,eax
c000b3c4:	74 16                	je     c000b3dc <tcp_abandon+0x130>
c000b3c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3ca:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3d0:	83 ec 0c             	sub    esp,0xc
c000b3d3:	50                   	push   eax
c000b3d4:	e8 0b ee ff ff       	call   c000a1e4 <tcp_segs_free>
c000b3d9:	83 c4 10             	add    esp,0x10
c000b3dc:	83 ec 08             	sub    esp,0x8
c000b3df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b3e3:	6a 02                	push   0x2
c000b3e5:	e8 6a c8 ff ff       	call   c0007c54 <memp_free>
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b3f2:	74 14                	je     c000b408 <tcp_abandon+0x15c>
c000b3f4:	83 ec 08             	sub    esp,0x8
c000b3f7:	6a f6                	push   0xfffffff6
c000b3f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b401:	ff d0                	call   eax
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	66 90                	xchg   ax,ax
c000b408:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b40d:	74 29                	je     c000b438 <tcp_abandon+0x18c>
c000b40f:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b414:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b419:	83 ec 08             	sub    esp,0x8
c000b41c:	52                   	push   edx
c000b41d:	50                   	push   eax
c000b41e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b422:	50                   	push   eax
c000b423:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b427:	50                   	push   eax
c000b428:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b42c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b430:	e8 0b 51 00 00       	call   c0010540 <tcp_rst>
c000b435:	83 c4 20             	add    esp,0x20
c000b438:	90                   	nop
c000b439:	83 c4 2c             	add    esp,0x2c
c000b43c:	c3                   	ret    
c000b43d:	8d 76 00             	lea    esi,[esi+0x0]

c000b440 <tcp_abort>:
c000b440:	83 ec 0c             	sub    esp,0xc
c000b443:	83 ec 08             	sub    esp,0x8
c000b446:	6a 01                	push   0x1
c000b448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44c:	e8 5b fe ff ff       	call   c000b2ac <tcp_abandon>
c000b451:	83 c4 10             	add    esp,0x10
c000b454:	90                   	nop
c000b455:	83 c4 0c             	add    esp,0xc
c000b458:	c3                   	ret    
c000b459:	8d 76 00             	lea    esi,[esi+0x0]

c000b45c <tcp_kill_prio>:
c000b45c:	83 ec 2c             	sub    esp,0x2c
c000b45f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b463:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b467:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b46c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b474:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b47c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b481:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b485:	eb 75                	jmp    c000b4fc <tcp_kill_prio+0xa0>
c000b487:	90                   	nop
c000b488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b48f:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b494:	0f b6 c0             	movzx  eax,al
c000b497:	39 c2                	cmp    edx,eax
c000b499:	72 55                	jb     c000b4f0 <tcp_kill_prio+0x94>
c000b49b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b49f:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4a2:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b4a7:	0f b6 c0             	movzx  eax,al
c000b4aa:	39 c2                	cmp    edx,eax
c000b4ac:	72 42                	jb     c000b4f0 <tcp_kill_prio+0x94>
c000b4ae:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b4b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4bb:	29 c2                	sub    edx,eax
c000b4bd:	89 d0                	mov    eax,edx
c000b4bf:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b4c3:	77 2b                	ja     c000b4f0 <tcp_kill_prio+0x94>
c000b4c5:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b4cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4cf:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4d2:	29 c2                	sub    edx,eax
c000b4d4:	89 d0                	mov    eax,edx
c000b4d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4e6:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4e9:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b4fb:	90                   	nop
c000b4fc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b501:	75 85                	jne    c000b488 <tcp_kill_prio+0x2c>
c000b503:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b508:	74 12                	je     c000b51c <tcp_kill_prio+0xc0>
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b511:	e8 2a ff ff ff       	call   c000b440 <tcp_abort>
c000b516:	83 c4 10             	add    esp,0x10
c000b519:	8d 76 00             	lea    esi,[esi+0x0]
c000b51c:	90                   	nop
c000b51d:	83 c4 2c             	add    esp,0x2c
c000b520:	c3                   	ret    
c000b521:	8d 76 00             	lea    esi,[esi+0x0]

c000b524 <tcp_kill_timewait>:
c000b524:	83 ec 1c             	sub    esp,0x1c
c000b527:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b52f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b537:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b53c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b540:	eb 42                	jmp    c000b584 <tcp_kill_timewait+0x60>
c000b542:	66 90                	xchg   ax,ax
c000b544:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b54a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b54e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b551:	29 c2                	sub    edx,eax
c000b553:	89 d0                	mov    eax,edx
c000b555:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b559:	77 1d                	ja     c000b578 <tcp_kill_timewait+0x54>
c000b55b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b565:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b568:	29 c2                	sub    edx,eax
c000b56a:	89 d0                	mov    eax,edx
c000b56c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b574:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b57c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b57f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b583:	90                   	nop
c000b584:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b589:	75 b9                	jne    c000b544 <tcp_kill_timewait+0x20>
c000b58b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b590:	74 12                	je     c000b5a4 <tcp_kill_timewait+0x80>
c000b592:	83 ec 0c             	sub    esp,0xc
c000b595:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b599:	e8 a2 fe ff ff       	call   c000b440 <tcp_abort>
c000b59e:	83 c4 10             	add    esp,0x10
c000b5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5a4:	90                   	nop
c000b5a5:	83 c4 1c             	add    esp,0x1c
c000b5a8:	c3                   	ret    
c000b5a9:	8d 76 00             	lea    esi,[esi+0x0]

c000b5ac <tcp_next_iss>:
c000b5ac:	8b 15 7c 42 03 c0    	mov    edx,DWORD PTR ds:0xc003427c
c000b5b2:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b5b7:	01 d0                	add    eax,edx
c000b5b9:	a3 7c 42 03 c0       	mov    ds:0xc003427c,eax
c000b5be:	a1 7c 42 03 c0       	mov    eax,ds:0xc003427c
c000b5c3:	c3                   	ret    

c000b5c4 <tcp_alloc>:
c000b5c4:	83 ec 2c             	sub    esp,0x2c
c000b5c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b5cf:	83 ec 0c             	sub    esp,0xc
c000b5d2:	6a 02                	push   0x2
c000b5d4:	e8 4f c5 ff ff       	call   c0007b28 <memp_malloc>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5e0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5e5:	75 6d                	jne    c000b654 <tcp_alloc+0x90>
c000b5e7:	e8 38 ff ff ff       	call   c000b524 <tcp_kill_timewait>
c000b5ec:	83 ec 0c             	sub    esp,0xc
c000b5ef:	6a 02                	push   0x2
c000b5f1:	e8 32 c5 ff ff       	call   c0007b28 <memp_malloc>
c000b5f6:	83 c4 10             	add    esp,0x10
c000b5f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b602:	75 38                	jne    c000b63c <tcp_alloc+0x78>
c000b604:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b609:	83 ec 0c             	sub    esp,0xc
c000b60c:	50                   	push   eax
c000b60d:	e8 4a fe ff ff       	call   c000b45c <tcp_kill_prio>
c000b612:	83 c4 10             	add    esp,0x10
c000b615:	83 ec 0c             	sub    esp,0xc
c000b618:	6a 02                	push   0x2
c000b61a:	e8 09 c5 ff ff       	call   c0007b28 <memp_malloc>
c000b61f:	83 c4 10             	add    esp,0x10
c000b622:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b626:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b62b:	74 0f                	je     c000b63c <tcp_alloc+0x78>
c000b62d:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b633:	83 e8 01             	sub    eax,0x1
c000b636:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b63c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b641:	74 11                	je     c000b654 <tcp_alloc+0x90>
c000b643:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b649:	83 e8 01             	sub    eax,0x1
c000b64c:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b652:	66 90                	xchg   ax,ax
c000b654:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b659:	0f 84 09 01 00 00    	je     c000b768 <tcp_alloc+0x1a4>
c000b65f:	83 ec 04             	sub    esp,0x4
c000b662:	68 a8 00 00 00       	push   0xa8
c000b667:	6a 00                	push   0x0
c000b669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b66d:	e8 7e 4e ff ff       	call   c00004f0 <memset>
c000b672:	83 c4 10             	add    esp,0x10
c000b675:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b679:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b67d:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b684:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b68a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b68e:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b694:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b698:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b69e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a2:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b6a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ac:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b6b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6b4:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b6b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6bc:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b6c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6c6:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b6cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d0:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b6d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6da:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b6e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e4:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b6ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ee:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6f4:	e8 b3 fe ff ff       	call   c000b5ac <tcp_next_iss>
c000b6f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b6fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b701:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b705:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b70c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b710:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b713:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b717:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b71b:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b71e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b726:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b729:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b72f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b733:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b73a:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b73e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b742:	c7 80 8c 00 00 00 48 b0 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000b048
c000b74c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b750:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b75a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b75e:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b765:	8d 76 00             	lea    esi,[esi+0x0]
c000b768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b76c:	83 c4 2c             	add    esp,0x2c
c000b76f:	c3                   	ret    

c000b770 <tcp_new>:
c000b770:	83 ec 0c             	sub    esp,0xc
c000b773:	83 ec 0c             	sub    esp,0xc
c000b776:	6a 40                	push   0x40
c000b778:	e8 47 fe ff ff       	call   c000b5c4 <tcp_alloc>
c000b77d:	83 c4 10             	add    esp,0x10
c000b780:	83 c4 0c             	add    esp,0xc
c000b783:	c3                   	ret    

c000b784 <tcp_eff_send_mss>:
c000b784:	53                   	push   ebx
c000b785:	83 ec 28             	sub    esp,0x28
c000b788:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b78c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b791:	83 ec 0c             	sub    esp,0xc
c000b794:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b798:	e8 bf 80 00 00       	call   c001385c <ip_route>
c000b79d:	83 c4 10             	add    esp,0x10
c000b7a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b7a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b7a9:	74 3d                	je     c000b7e8 <tcp_eff_send_mss+0x64>
c000b7ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b7af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b7b2:	0f b7 c0             	movzx  eax,ax
c000b7b5:	85 c0                	test   eax,eax
c000b7b7:	74 2f                	je     c000b7e8 <tcp_eff_send_mss+0x64>
c000b7b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b7bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b7c0:	83 e8 28             	sub    eax,0x28
c000b7c3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b7c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7cc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b7d1:	0f b7 d8             	movzx  ebx,ax
c000b7d4:	0f b7 ca             	movzx  ecx,dx
c000b7d7:	39 cb                	cmp    ebx,ecx
c000b7d9:	76 05                	jbe    c000b7e0 <tcp_eff_send_mss+0x5c>
c000b7db:	89 d0                	mov    eax,edx
c000b7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e0:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7ec:	83 c4 28             	add    esp,0x28
c000b7ef:	5b                   	pop    ebx
c000b7f0:	c3                   	ret    
c000b7f1:	8d 76 00             	lea    esi,[esi+0x0]

c000b7f4 <tcp_connect>:
c000b7f4:	83 ec 2c             	sub    esp,0x2c
c000b7f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b7fb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b800:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b804:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b807:	85 c0                	test   eax,eax
c000b809:	74 1d                	je     c000b828 <tcp_connect+0x34>
c000b80b:	83 ec 08             	sub    esp,0x8
c000b80e:	68 c4 07 03 c0       	push   0xc00307c4
c000b813:	68 26 00 03 c0       	push   0xc0030026
c000b818:	e8 a7 46 01 00       	call   c001fec4 <CPrintf>
c000b81d:	83 c4 10             	add    esp,0x10
c000b820:	b0 f7                	mov    al,0xf7
c000b822:	e9 41 02 00 00       	jmp    c000ba68 <tcp_connect+0x274>
c000b827:	90                   	nop
c000b828:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b82d:	74 25                	je     c000b854 <tcp_connect+0x60>
c000b82f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b833:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b837:	8b 12                	mov    edx,DWORD PTR [edx]
c000b839:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b840:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b844:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000b848:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b84c:	85 c0                	test   eax,eax
c000b84e:	74 18                	je     c000b868 <tcp_connect+0x74>
c000b850:	eb 0a                	jmp    c000b85c <tcp_connect+0x68>
c000b852:	66 90                	xchg   ax,ax
c000b854:	b0 fa                	mov    al,0xfa
c000b856:	e9 0d 02 00 00       	jmp    c000ba68 <tcp_connect+0x274>
c000b85b:	90                   	nop
c000b85c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b860:	8b 00                	mov    eax,DWORD PTR [eax]
c000b862:	85 c0                	test   eax,eax
c000b864:	75 3a                	jne    c000b8a0 <tcp_connect+0xac>
c000b866:	66 90                	xchg   ax,ax
c000b868:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b86c:	83 c0 04             	add    eax,0x4
c000b86f:	83 ec 0c             	sub    esp,0xc
c000b872:	50                   	push   eax
c000b873:	e8 e4 7f 00 00       	call   c001385c <ip_route>
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b87f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b884:	75 0a                	jne    c000b890 <tcp_connect+0x9c>
c000b886:	b0 fc                	mov    al,0xfc
c000b888:	e9 db 01 00 00       	jmp    c000ba68 <tcp_connect+0x274>
c000b88d:	8d 76 00             	lea    esi,[esi+0x0]
c000b890:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b894:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b897:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b89b:	89 10                	mov    DWORD PTR [eax],edx
c000b89d:	8d 76 00             	lea    esi,[esi+0x0]
c000b8a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b8a7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b8ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b8b3:	0f b7 c0             	movzx  eax,ax
c000b8b6:	85 c0                	test   eax,eax
c000b8b8:	75 12                	jne    c000b8cc <tcp_connect+0xd8>
c000b8ba:	e8 21 e7 ff ff       	call   c0009fe0 <tcp_new_port>
c000b8bf:	89 c2                	mov    edx,eax
c000b8c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8c5:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000b8c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b8cc:	e8 db fc ff ff       	call   c000b5ac <tcp_next_iss>
c000b8d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8d9:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b8e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b8e8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b8eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8ef:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8f6:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b8f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8fd:	8d 50 ff             	lea    edx,[eax-0x1]
c000b900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b904:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b907:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b90b:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b911:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b915:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b91b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b91f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b926:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b92d:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b937:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b93d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b941:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b944:	0f b7 c0             	movzx  eax,ax
c000b947:	83 ec 08             	sub    esp,0x8
c000b94a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b94e:	50                   	push   eax
c000b94f:	e8 30 fe ff ff       	call   c000b784 <tcp_eff_send_mss>
c000b954:	83 c4 10             	add    esp,0x10
c000b957:	89 c2                	mov    edx,eax
c000b959:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b95d:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000b961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b965:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b96b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b96f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b972:	89 c2                	mov    edx,eax
c000b974:	c1 e2 02             	shl    edx,0x2
c000b977:	01 d0                	add    eax,edx
c000b979:	d1 e0                	shl    eax,1
c000b97b:	89 c2                	mov    edx,eax
c000b97d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b981:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000b985:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b989:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b98d:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b993:	83 ec 08             	sub    esp,0x8
c000b996:	6a 02                	push   0x2
c000b998:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b99c:	e8 73 40 00 00       	call   c000fa14 <tcp_enqueue_flags>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b9a8:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b9ad:	85 c0                	test   eax,eax
c000b9af:	0f 85 af 00 00 00    	jne    c000ba64 <tcp_connect+0x270>
c000b9b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9b9:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b9c0:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b9c5:	85 c0                	test   eax,eax
c000b9c7:	74 6f                	je     c000ba38 <tcp_connect+0x244>
c000b9c9:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9ce:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9d2:	75 10                	jne    c000b9e4 <tcp_connect+0x1f0>
c000b9d4:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9d9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9dc:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b9e1:	eb 49                	jmp    c000ba2c <tcp_connect+0x238>
c000b9e3:	90                   	nop
c000b9e4:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9e9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b9ee:	eb 30                	jmp    c000ba20 <tcp_connect+0x22c>
c000b9f0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9f8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9fc:	75 12                	jne    c000ba10 <tcp_connect+0x21c>
c000b9fe:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ba03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ba07:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ba0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba0d:	eb 1d                	jmp    c000ba2c <tcp_connect+0x238>
c000ba0f:	90                   	nop
c000ba10:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ba15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba18:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ba1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ba20:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ba25:	85 c0                	test   eax,eax
c000ba27:	75 c7                	jne    c000b9f0 <tcp_connect+0x1fc>
c000ba29:	8d 76 00             	lea    esi,[esi+0x0]
c000ba2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba30:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ba37:	90                   	nop
c000ba38:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000ba3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba49:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ba4e:	e8 09 53 00 00       	call   c0010d5c <tcp_timer_needed>
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ba5a:	e8 55 46 00 00       	call   c00100b4 <tcp_output>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	66 90                	xchg   ax,ax
c000ba64:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000ba68:	83 c4 2c             	add    esp,0x2c
c000ba6b:	c3                   	ret    

c000ba6c <tcp_debug_state_str>:
c000ba6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba70:	8b 04 85 40 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf6c0]
c000ba77:	c3                   	ret    

c000ba78 <tcp_timewait_input>:
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 08             	sub    esp,0x8
c000ba7c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba81:	0f b6 c0             	movzx  eax,al
c000ba84:	83 e0 04             	and    eax,0x4
c000ba87:	74 07                	je     c000ba90 <tcp_timewait_input+0x18>
c000ba89:	b0 00                	mov    al,0x0
c000ba8b:	e9 e8 00 00 00       	jmp    c000bb78 <tcp_timewait_input+0x100>
c000ba90:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba95:	0f b6 c0             	movzx  eax,al
c000ba98:	83 e0 02             	and    eax,0x2
c000ba9b:	0f 84 83 00 00 00    	je     c000bb24 <tcp_timewait_input+0xac>
c000baa1:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000baa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000baae:	29 c2                	sub    edx,eax
c000bab0:	89 d0                	mov    eax,edx
c000bab2:	0f 88 88 00 00 00    	js     c000bb40 <tcp_timewait_input+0xc8>
c000bab8:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000babe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bac2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000bac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bac9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000bacc:	0f b7 c0             	movzx  eax,ax
c000bacf:	01 c8                	add    eax,ecx
c000bad1:	29 c2                	sub    edx,eax
c000bad3:	89 d0                	mov    eax,edx
c000bad5:	85 c0                	test   eax,eax
c000bad7:	7f 67                	jg     c000bb40 <tcp_timewait_input+0xc8>
c000bad9:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bade:	66 8b 00             	mov    ax,WORD PTR [eax]
c000bae1:	0f b7 c8             	movzx  ecx,ax
c000bae4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bae9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000baed:	0f b7 d0             	movzx  edx,ax
c000baf0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000baf6:	0f b7 d8             	movzx  ebx,ax
c000baf9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bafe:	01 c3                	add    ebx,eax
c000bb00:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb05:	83 ec 08             	sub    esp,0x8
c000bb08:	51                   	push   ecx
c000bb09:	52                   	push   edx
c000bb0a:	68 90 68 03 c0       	push   0xc0036890
c000bb0f:	68 98 68 03 c0       	push   0xc0036898
c000bb14:	53                   	push   ebx
c000bb15:	50                   	push   eax
c000bb16:	e8 25 4a 00 00       	call   c0010540 <tcp_rst>
c000bb1b:	83 c4 20             	add    esp,0x20
c000bb1e:	b0 00                	mov    al,0x0
c000bb20:	eb 56                	jmp    c000bb78 <tcp_timewait_input+0x100>
c000bb22:	66 90                	xchg   ax,ax
c000bb24:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bb29:	0f b6 c0             	movzx  eax,al
c000bb2c:	83 e0 01             	and    eax,0x1
c000bb2f:	74 0f                	je     c000bb40 <tcp_timewait_input+0xc8>
c000bb31:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000bb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb3b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000bb3e:	66 90                	xchg   ax,ax
c000bb40:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bb46:	0f b7 c0             	movzx  eax,ax
c000bb49:	85 c0                	test   eax,eax
c000bb4b:	74 27                	je     c000bb74 <tcp_timewait_input+0xfc>
c000bb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb51:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bb54:	83 c8 02             	or     eax,0x2
c000bb57:	88 c2                	mov    dl,al
c000bb59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb5d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bb60:	83 ec 0c             	sub    esp,0xc
c000bb63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb67:	e8 48 45 00 00       	call   c00100b4 <tcp_output>
c000bb6c:	83 c4 10             	add    esp,0x10
c000bb6f:	eb 07                	jmp    c000bb78 <tcp_timewait_input+0x100>
c000bb71:	8d 76 00             	lea    esi,[esi+0x0]
c000bb74:	b0 00                	mov    al,0x0
c000bb76:	66 90                	xchg   ax,ax
c000bb78:	83 c4 08             	add    esp,0x8
c000bb7b:	5b                   	pop    ebx
c000bb7c:	c3                   	ret    
c000bb7d:	8d 76 00             	lea    esi,[esi+0x0]

c000bb80 <tcp_oos_insert_segment>:
c000bb80:	53                   	push   ebx
c000bb81:	83 ec 18             	sub    esp,0x18
c000bb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb8b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb8f:	0f b7 c0             	movzx  eax,ax
c000bb92:	83 ec 0c             	sub    esp,0xc
c000bb95:	50                   	push   eax
c000bb96:	e8 81 50 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bb9b:	83 c4 10             	add    esp,0x10
c000bb9e:	0f b7 c0             	movzx  eax,ax
c000bba1:	83 e0 01             	and    eax,0x1
c000bba4:	0f 84 8e 00 00 00    	je     c000bc38 <tcp_oos_insert_segment+0xb8>
c000bbaa:	83 ec 0c             	sub    esp,0xc
c000bbad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bbb1:	e8 2e e6 ff ff       	call   c000a1e4 <tcp_segs_free>
c000bbb6:	83 c4 10             	add    esp,0x10
c000bbb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000bbc1:	e9 1a 01 00 00       	jmp    c000bce0 <tcp_oos_insert_segment+0x160>
c000bbc6:	66 90                	xchg   ax,ax
c000bbc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbcf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bbd3:	0f b7 c0             	movzx  eax,ax
c000bbd6:	83 ec 0c             	sub    esp,0xc
c000bbd9:	50                   	push   eax
c000bbda:	e8 3d 50 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bbdf:	83 c4 10             	add    esp,0x10
c000bbe2:	0f b7 c0             	movzx  eax,ax
c000bbe5:	83 e0 01             	and    eax,0x1
c000bbe8:	74 2a                	je     c000bc14 <tcp_oos_insert_segment+0x94>
c000bbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbf1:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000bbf5:	83 ec 0c             	sub    esp,0xc
c000bbf8:	6a 01                	push   0x1
c000bbfa:	e8 1d 50 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bbff:	83 c4 10             	add    esp,0x10
c000bc02:	89 c2                	mov    edx,eax
c000bc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc0b:	09 da                	or     edx,ebx
c000bc0d:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000bc11:	8d 76 00             	lea    esi,[esi+0x0]
c000bc14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc20:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bc26:	83 ec 0c             	sub    esp,0xc
c000bc29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc2d:	e8 6e e5 ff ff       	call   c000a1a0 <tcp_seg_free>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	8d 76 00             	lea    esi,[esi+0x0]
c000bc38:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc3d:	74 35                	je     c000bc74 <tcp_oos_insert_segment+0xf4>
c000bc3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc46:	0f b7 d0             	movzx  edx,ax
c000bc49:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc4e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bc51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc58:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bc5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc62:	0f b7 c0             	movzx  eax,ax
c000bc65:	01 d0                	add    eax,edx
c000bc67:	29 c1                	sub    ecx,eax
c000bc69:	89 c8                	mov    eax,ecx
c000bc6b:	0f 89 57 ff ff ff    	jns    c000bbc8 <tcp_oos_insert_segment+0x48>
c000bc71:	8d 76 00             	lea    esi,[esi+0x0]
c000bc74:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc79:	74 65                	je     c000bce0 <tcp_oos_insert_segment+0x160>
c000bc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc82:	0f b7 d0             	movzx  edx,ax
c000bc85:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc8a:	01 c2                	add    edx,eax
c000bc8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc96:	29 c2                	sub    edx,eax
c000bc98:	89 d0                	mov    eax,edx
c000bc9a:	85 c0                	test   eax,eax
c000bc9c:	7e 42                	jle    c000bce0 <tcp_oos_insert_segment+0x160>
c000bc9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bca2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bca5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bca8:	89 c2                	mov    edx,eax
c000bcaa:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bcaf:	89 d3                	mov    ebx,edx
c000bcb1:	29 c3                	sub    ebx,eax
c000bcb3:	89 d8                	mov    eax,ebx
c000bcb5:	89 c2                	mov    edx,eax
c000bcb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcbb:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000bcbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bcc6:	0f b7 d0             	movzx  edx,ax
c000bcc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bccd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bcd0:	83 ec 08             	sub    esp,0x8
c000bcd3:	52                   	push   edx
c000bcd4:	50                   	push   eax
c000bcd5:	e8 0e ce ff ff       	call   c0008ae8 <pbuf_realloc>
c000bcda:	83 c4 10             	add    esp,0x10
c000bcdd:	8d 76 00             	lea    esi,[esi+0x0]
c000bce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bce4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bce8:	89 10                	mov    DWORD PTR [eax],edx
c000bcea:	90                   	nop
c000bceb:	83 c4 18             	add    esp,0x18
c000bcee:	5b                   	pop    ebx
c000bcef:	c3                   	ret    

c000bcf0 <tcp_receive>:
c000bcf0:	57                   	push   edi
c000bcf1:	56                   	push   esi
c000bcf2:	53                   	push   ebx
c000bcf3:	83 ec 30             	sub    esp,0x30
c000bcf6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcfe:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bd03:	0f b6 c0             	movzx  eax,al
c000bd06:	83 e0 10             	and    eax,0x10
c000bd09:	0f 84 f5 07 00 00    	je     c000c504 <tcp_receive+0x814>
c000bd0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd13:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd16:	0f b7 d0             	movzx  edx,ax
c000bd19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1d:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bd20:	01 d0                	add    eax,edx
c000bd22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd2a:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd2d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bd32:	29 c2                	sub    edx,eax
c000bd34:	89 d0                	mov    eax,edx
c000bd36:	78 50                	js     c000bd88 <tcp_receive+0x98>
c000bd38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd3c:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd3f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bd44:	39 c2                	cmp    edx,eax
c000bd46:	75 14                	jne    c000bd5c <tcp_receive+0x6c>
c000bd48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd4c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd4f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd54:	29 c2                	sub    edx,eax
c000bd56:	89 d0                	mov    eax,edx
c000bd58:	78 2e                	js     c000bd88 <tcp_receive+0x98>
c000bd5a:	66 90                	xchg   ax,ax
c000bd5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd60:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd63:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd68:	39 c2                	cmp    edx,eax
c000bd6a:	75 74                	jne    c000bde0 <tcp_receive+0xf0>
c000bd6c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd71:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd79:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd7c:	0f b7 d2             	movzx  edx,dx
c000bd7f:	0f b7 c0             	movzx  eax,ax
c000bd82:	39 c2                	cmp    edx,eax
c000bd84:	76 5a                	jbe    c000bde0 <tcp_receive+0xf0>
c000bd86:	66 90                	xchg   ax,ax
c000bd88:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd8d:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd95:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000bd99:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bd9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda3:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bda6:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bdac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb0:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bdb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bdba:	0f b7 c0             	movzx  eax,ax
c000bdbd:	85 c0                	test   eax,eax
c000bdbf:	74 1f                	je     c000bde0 <tcp_receive+0xf0>
c000bdc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc5:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bdcb:	0f b6 c0             	movzx  eax,al
c000bdce:	85 c0                	test   eax,eax
c000bdd0:	74 0e                	je     c000bde0 <tcp_receive+0xf0>
c000bdd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd6:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bddd:	8d 76 00             	lea    esi,[esi+0x0]
c000bde0:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bde6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdea:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bded:	29 c2                	sub    edx,eax
c000bdef:	89 d0                	mov    eax,edx
c000bdf1:	85 c0                	test   eax,eax
c000bdf3:	0f 8f 03 01 00 00    	jg     c000befc <tcp_receive+0x20c>
c000bdf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfd:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000be03:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000be09:	0f b7 c0             	movzx  eax,ax
c000be0c:	85 c0                	test   eax,eax
c000be0e:	0f 85 d0 00 00 00    	jne    c000bee4 <tcp_receive+0x1f4>
c000be14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be18:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000be1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be1f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000be22:	0f b7 c0             	movzx  eax,ax
c000be25:	01 d0                	add    eax,edx
c000be27:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000be2b:	0f 85 b3 00 00 00    	jne    c000bee4 <tcp_receive+0x1f4>
c000be31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be35:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000be39:	98                   	cwde   
c000be3a:	85 c0                	test   eax,eax
c000be3c:	0f 88 a2 00 00 00    	js     c000bee4 <tcp_receive+0x1f4>
c000be42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be46:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000be49:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000be4e:	39 c2                	cmp    edx,eax
c000be50:	0f 85 8e 00 00 00    	jne    c000bee4 <tcp_receive+0x1f4>
c000be56:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000be5e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be62:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be65:	83 c0 01             	add    eax,0x1
c000be68:	88 c2                	mov    dl,al
c000be6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be6e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000be71:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be75:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be78:	0f b6 c0             	movzx  eax,al
c000be7b:	83 f8 03             	cmp    eax,0x3
c000be7e:	76 44                	jbe    c000bec4 <tcp_receive+0x1d4>
c000be80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be84:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be8f:	01 d0                	add    eax,edx
c000be91:	89 c2                	mov    edx,eax
c000be93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be97:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be9b:	0f b7 d2             	movzx  edx,dx
c000be9e:	0f b7 c0             	movzx  eax,ax
c000bea1:	39 c2                	cmp    edx,eax
c000bea3:	76 3f                	jbe    c000bee4 <tcp_receive+0x1f4>
c000bea5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bead:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000beb4:	01 d0                	add    eax,edx
c000beb6:	89 c2                	mov    edx,eax
c000beb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bebc:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bec0:	eb 22                	jmp    c000bee4 <tcp_receive+0x1f4>
c000bec2:	66 90                	xchg   ax,ax
c000bec4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bec8:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000becb:	0f b6 c0             	movzx  eax,al
c000bece:	83 f8 03             	cmp    eax,0x3
c000bed1:	75 11                	jne    c000bee4 <tcp_receive+0x1f4>
c000bed3:	83 ec 0c             	sub    esp,0xc
c000bed6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000beda:	e8 35 49 00 00       	call   c0010814 <tcp_rexmit_fast>
c000bedf:	83 c4 10             	add    esp,0x10
c000bee2:	66 90                	xchg   ax,ax
c000bee4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bee9:	0f 85 a1 04 00 00    	jne    c000c390 <tcp_receive+0x6a0>
c000beef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef3:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bef7:	e9 94 04 00 00       	jmp    c000c390 <tcp_receive+0x6a0>
c000befc:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bf02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf06:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf09:	29 c2                	sub    edx,eax
c000bf0b:	89 d0                	mov    eax,edx
c000bf0d:	83 e8 01             	sub    eax,0x1
c000bf10:	0f 88 52 03 00 00    	js     c000c268 <tcp_receive+0x578>
c000bf16:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bf1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf20:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bf23:	29 c2                	sub    edx,eax
c000bf25:	89 d0                	mov    eax,edx
c000bf27:	85 c0                	test   eax,eax
c000bf29:	0f 8f 39 03 00 00    	jg     c000c268 <tcp_receive+0x578>
c000bf2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf33:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf36:	0f b6 c0             	movzx  eax,al
c000bf39:	83 e0 04             	and    eax,0x4
c000bf3c:	74 22                	je     c000bf60 <tcp_receive+0x270>
c000bf3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf42:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf45:	83 e0 fb             	and    eax,0xfffffffb
c000bf48:	88 c2                	mov    dl,al
c000bf4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf4e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bf51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf55:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c000bf58:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf5c:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bf60:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf64:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bf68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6c:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bf6f:	98                   	cwde   
c000bf70:	c1 f8 03             	sar    eax,0x3
c000bf73:	89 c2                	mov    edx,eax
c000bf75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf79:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bf7d:	01 d0                	add    eax,edx
c000bf7f:	89 c2                	mov    edx,eax
c000bf81:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf85:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000bf89:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bf8e:	89 c2                	mov    edx,eax
c000bf90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf94:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf97:	89 d7                	mov    edi,edx
c000bf99:	29 c7                	sub    edi,eax
c000bf9b:	89 f8                	mov    eax,edi
c000bf9d:	89 c2                	mov    edx,eax
c000bf9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa3:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bfa7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfab:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bfaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb3:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bfb6:	01 d0                	add    eax,edx
c000bfb8:	89 c2                	mov    edx,eax
c000bfba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbe:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000bfc2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc6:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bfca:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bfd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd4:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bfd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bfde:	83 f8 03             	cmp    eax,0x3
c000bfe1:	0f 86 dd 01 00 00    	jbe    c000c1c4 <tcp_receive+0x4d4>
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff3:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bff6:	0f b7 d2             	movzx  edx,dx
c000bff9:	0f b7 c0             	movzx  eax,ax
c000bffc:	39 c2                	cmp    edx,eax
c000bffe:	73 4c                	jae    c000c04c <tcp_receive+0x35c>
c000c000:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c004:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000c008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c00f:	01 d0                	add    eax,edx
c000c011:	89 c2                	mov    edx,eax
c000c013:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c017:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c01b:	0f b7 d2             	movzx  edx,dx
c000c01e:	0f b7 c0             	movzx  eax,ax
c000c021:	39 c2                	cmp    edx,eax
c000c023:	0f 86 9b 01 00 00    	jbe    c000c1c4 <tcp_receive+0x4d4>
c000c029:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c02d:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000c031:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c035:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c038:	01 d0                	add    eax,edx
c000c03a:	89 c2                	mov    edx,eax
c000c03c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c040:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000c044:	e9 7b 01 00 00       	jmp    c000c1c4 <tcp_receive+0x4d4>
c000c049:	8d 76 00             	lea    esi,[esi+0x0]
c000c04c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c050:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000c054:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c058:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c05b:	0f b7 d0             	movzx  edx,ax
c000c05e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c062:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c065:	0f b7 c0             	movzx  eax,ax
c000c068:	0f af c2             	imul   eax,edx
c000c06b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c06f:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000c073:	0f b7 f2             	movzx  esi,dx
c000c076:	89 c2                	mov    edx,eax
c000c078:	c1 fa 1f             	sar    edx,0x1f
c000c07b:	f7 fe                	idiv   esi
c000c07d:	01 c8                	add    eax,ecx
c000c07f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000c084:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c088:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c08c:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000c091:	0f b7 c0             	movzx  eax,ax
c000c094:	39 c2                	cmp    edx,eax
c000c096:	0f 86 28 01 00 00    	jbe    c000c1c4 <tcp_receive+0x4d4>
c000c09c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0a0:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000c0a5:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000c0a9:	e9 16 01 00 00       	jmp    c000c1c4 <tcp_receive+0x4d4>
c000c0ae:	66 90                	xchg   ax,ax
c000c0b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0b4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bf:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000c0cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0cf:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0d9:	83 ec 0c             	sub    esp,0xc
c000c0dc:	50                   	push   eax
c000c0dd:	e8 0e cc ff ff       	call   c0008cf0 <pbuf_clen>
c000c0e2:	83 c4 10             	add    esp,0x10
c000c0e5:	0f b6 c0             	movzx  eax,al
c000c0e8:	0f b7 d3             	movzx  edx,bx
c000c0eb:	0f b7 c0             	movzx  eax,ax
c000c0ee:	39 c2                	cmp    edx,eax
c000c0f0:	73 16                	jae    c000c108 <tcp_receive+0x418>
c000c0f2:	83 ec 08             	sub    esp,0x8
c000c0f5:	68 6c 09 03 c0       	push   0xc003096c
c000c0fa:	68 26 00 03 c0       	push   0xc0030026
c000c0ff:	e8 c0 3d 01 00       	call   c001fec4 <CPrintf>
c000c104:	83 c4 10             	add    esp,0x10
c000c107:	90                   	nop
c000c108:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c10c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c10f:	0f b7 c0             	movzx  eax,ax
c000c112:	85 c0                	test   eax,eax
c000c114:	74 36                	je     c000c14c <tcp_receive+0x45c>
c000c116:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c11a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c11d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c121:	0f b7 c0             	movzx  eax,ax
c000c124:	83 ec 0c             	sub    esp,0xc
c000c127:	50                   	push   eax
c000c128:	e8 ef 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c12d:	83 c4 10             	add    esp,0x10
c000c130:	0f b7 c0             	movzx  eax,ax
c000c133:	83 e0 01             	and    eax,0x1
c000c136:	74 14                	je     c000c14c <tcp_receive+0x45c>
c000c138:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c13c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c13f:	83 e8 01             	sub    eax,0x1
c000c142:	89 c2                	mov    edx,eax
c000c144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c148:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c14c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c153:	83 ec 0c             	sub    esp,0xc
c000c156:	50                   	push   eax
c000c157:	e8 94 cb ff ff       	call   c0008cf0 <pbuf_clen>
c000c15c:	83 c4 10             	add    esp,0x10
c000c15f:	88 c1                	mov    cl,al
c000c161:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c165:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c168:	0f b6 c1             	movzx  eax,cl
c000c16b:	89 d7                	mov    edi,edx
c000c16d:	29 c7                	sub    edi,eax
c000c16f:	89 f8                	mov    eax,edi
c000c171:	89 c2                	mov    edx,eax
c000c173:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c177:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c17b:	83 ec 0c             	sub    esp,0xc
c000c17e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c182:	e8 19 e0 ff ff       	call   c000a1a0 <tcp_seg_free>
c000c187:	83 c4 10             	add    esp,0x10
c000c18a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18e:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c191:	0f b7 c0             	movzx  eax,ax
c000c194:	85 c0                	test   eax,eax
c000c196:	74 2c                	je     c000c1c4 <tcp_receive+0x4d4>
c000c198:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c19c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c19f:	85 c0                	test   eax,eax
c000c1a1:	75 21                	jne    c000c1c4 <tcp_receive+0x4d4>
c000c1a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1a7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1aa:	85 c0                	test   eax,eax
c000c1ac:	75 16                	jne    c000c1c4 <tcp_receive+0x4d4>
c000c1ae:	83 ec 08             	sub    esp,0x8
c000c1b1:	68 94 09 03 c0       	push   0xc0030994
c000c1b6:	68 26 00 03 c0       	push   0xc0030026
c000c1bb:	e8 04 3d 01 00       	call   c001fec4 <CPrintf>
c000c1c0:	83 c4 10             	add    esp,0x10
c000c1c3:	90                   	nop
c000c1c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1cb:	85 c0                	test   eax,eax
c000c1cd:	74 69                	je     c000c238 <tcp_receive+0x548>
c000c1cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1d3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	50                   	push   eax
c000c1e0:	e8 5b 4a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c1e5:	83 c4 10             	add    esp,0x10
c000c1e8:	89 c3                	mov    ebx,eax
c000c1ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1ee:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1f4:	0f b7 f0             	movzx  esi,ax
c000c1f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1fb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c201:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c205:	0f b7 c0             	movzx  eax,ax
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	50                   	push   eax
c000c20c:	e8 0b 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c211:	83 c4 10             	add    esp,0x10
c000c214:	0f b7 c0             	movzx  eax,ax
c000c217:	83 e0 03             	and    eax,0x3
c000c21a:	0f 95 c0             	setne  al
c000c21d:	0f b6 c0             	movzx  eax,al
c000c220:	01 f0                	add    eax,esi
c000c222:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c225:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c22a:	29 c2                	sub    edx,eax
c000c22c:	89 d0                	mov    eax,edx
c000c22e:	85 c0                	test   eax,eax
c000c230:	0f 8e 7a fe ff ff    	jle    c000c0b0 <tcp_receive+0x3c0>
c000c236:	66 90                	xchg   ax,ax
c000c238:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c23f:	85 c0                	test   eax,eax
c000c241:	75 0d                	jne    c000c250 <tcp_receive+0x560>
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c24d:	eb 0d                	jmp    c000c25c <tcp_receive+0x56c>
c000c24f:	90                   	nop
c000c250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c254:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c25a:	66 90                	xchg   ax,ax
c000c25c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c260:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c264:	eb 0e                	jmp    c000c274 <tcp_receive+0x584>
c000c266:	66 90                	xchg   ax,ax
c000c268:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c26c:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c272:	66 90                	xchg   ax,ax
c000c274:	e9 17 01 00 00       	jmp    c000c390 <tcp_receive+0x6a0>
c000c279:	8d 76 00             	lea    esi,[esi+0x0]
c000c27c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c280:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c283:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c287:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c28b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c28e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c290:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c294:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c29b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c29e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c2a5:	83 ec 0c             	sub    esp,0xc
c000c2a8:	50                   	push   eax
c000c2a9:	e8 42 ca ff ff       	call   c0008cf0 <pbuf_clen>
c000c2ae:	83 c4 10             	add    esp,0x10
c000c2b1:	0f b6 c0             	movzx  eax,al
c000c2b4:	0f b7 d3             	movzx  edx,bx
c000c2b7:	0f b7 c0             	movzx  eax,ax
c000c2ba:	39 c2                	cmp    edx,eax
c000c2bc:	73 16                	jae    c000c2d4 <tcp_receive+0x5e4>
c000c2be:	83 ec 08             	sub    esp,0x8
c000c2c1:	68 6c 09 03 c0       	push   0xc003096c
c000c2c6:	68 26 00 03 c0       	push   0xc0030026
c000c2cb:	e8 f4 3b 01 00       	call   c001fec4 <CPrintf>
c000c2d0:	83 c4 10             	add    esp,0x10
c000c2d3:	90                   	nop
c000c2d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2d8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c2db:	0f b7 c0             	movzx  eax,ax
c000c2de:	85 c0                	test   eax,eax
c000c2e0:	74 36                	je     c000c318 <tcp_receive+0x628>
c000c2e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2e9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c2ed:	0f b7 c0             	movzx  eax,ax
c000c2f0:	83 ec 0c             	sub    esp,0xc
c000c2f3:	50                   	push   eax
c000c2f4:	e8 23 49 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c2f9:	83 c4 10             	add    esp,0x10
c000c2fc:	0f b7 c0             	movzx  eax,ax
c000c2ff:	83 e0 01             	and    eax,0x1
c000c302:	74 14                	je     c000c318 <tcp_receive+0x628>
c000c304:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c308:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c30b:	83 e8 01             	sub    eax,0x1
c000c30e:	89 c2                	mov    edx,eax
c000c310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c314:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c318:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c31c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c31f:	83 ec 0c             	sub    esp,0xc
c000c322:	50                   	push   eax
c000c323:	e8 c8 c9 ff ff       	call   c0008cf0 <pbuf_clen>
c000c328:	83 c4 10             	add    esp,0x10
c000c32b:	88 c1                	mov    cl,al
c000c32d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c331:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c334:	0f b6 c1             	movzx  eax,cl
c000c337:	89 d6                	mov    esi,edx
c000c339:	29 c6                	sub    esi,eax
c000c33b:	89 f0                	mov    eax,esi
c000c33d:	89 c2                	mov    edx,eax
c000c33f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c343:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c347:	83 ec 0c             	sub    esp,0xc
c000c34a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c34e:	e8 4d de ff ff       	call   c000a1a0 <tcp_seg_free>
c000c353:	83 c4 10             	add    esp,0x10
c000c356:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c35a:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c35d:	0f b7 c0             	movzx  eax,ax
c000c360:	85 c0                	test   eax,eax
c000c362:	74 2c                	je     c000c390 <tcp_receive+0x6a0>
c000c364:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c368:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c36b:	85 c0                	test   eax,eax
c000c36d:	75 21                	jne    c000c390 <tcp_receive+0x6a0>
c000c36f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c373:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c376:	85 c0                	test   eax,eax
c000c378:	75 16                	jne    c000c390 <tcp_receive+0x6a0>
c000c37a:	83 ec 08             	sub    esp,0x8
c000c37d:	68 94 09 03 c0       	push   0xc0030994
c000c382:	68 26 00 03 c0       	push   0xc0030026
c000c387:	e8 38 3b 01 00       	call   c001fec4 <CPrintf>
c000c38c:	83 c4 10             	add    esp,0x10
c000c38f:	90                   	nop
c000c390:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c394:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c397:	85 c0                	test   eax,eax
c000c399:	74 7d                	je     c000c418 <tcp_receive+0x728>
c000c39b:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c3a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3a5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c3a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c3ae:	83 ec 0c             	sub    esp,0xc
c000c3b1:	50                   	push   eax
c000c3b2:	e8 89 48 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 c6                	mov    esi,eax
c000c3bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3c0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c3c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c3c6:	0f b7 f8             	movzx  edi,ax
c000c3c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3cd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c3d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3d3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c3d7:	0f b7 c0             	movzx  eax,ax
c000c3da:	83 ec 0c             	sub    esp,0xc
c000c3dd:	50                   	push   eax
c000c3de:	e8 39 48 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c3e3:	83 c4 10             	add    esp,0x10
c000c3e6:	0f b7 c0             	movzx  eax,ax
c000c3e9:	83 e0 03             	and    eax,0x3
c000c3ec:	0f 95 c0             	setne  al
c000c3ef:	0f b6 c0             	movzx  eax,al
c000c3f2:	01 f8                	add    eax,edi
c000c3f4:	01 f0                	add    eax,esi
c000c3f6:	29 c3                	sub    ebx,eax
c000c3f8:	89 d8                	mov    eax,ebx
c000c3fa:	78 1c                	js     c000c418 <tcp_receive+0x728>
c000c3fc:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c402:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c406:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c409:	29 c2                	sub    edx,eax
c000c40b:	89 d0                	mov    eax,edx
c000c40d:	85 c0                	test   eax,eax
c000c40f:	0f 8e 67 fe ff ff    	jle    c000c27c <tcp_receive+0x58c>
c000c415:	8d 76 00             	lea    esi,[esi+0x0]
c000c418:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c41c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c41f:	85 c0                	test   eax,eax
c000c421:	0f 84 dd 00 00 00    	je     c000c504 <tcp_receive+0x814>
c000c427:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c42b:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c42e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c433:	29 c2                	sub    edx,eax
c000c435:	89 d0                	mov    eax,edx
c000c437:	0f 89 c7 00 00 00    	jns    c000c504 <tcp_receive+0x814>
c000c43d:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c442:	89 c2                	mov    edx,eax
c000c444:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c448:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c44b:	89 d7                	mov    edi,edx
c000c44d:	29 c7                	sub    edi,eax
c000c44f:	89 f8                	mov    eax,edi
c000c451:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c456:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c45b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c45f:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c462:	98                   	cwde   
c000c463:	c1 f8 03             	sar    eax,0x3
c000c466:	89 d6                	mov    esi,edx
c000c468:	29 c6                	sub    esi,eax
c000c46a:	89 f0                	mov    eax,esi
c000c46c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c471:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c475:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c478:	89 c2                	mov    edx,eax
c000c47a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c47f:	01 d0                	add    eax,edx
c000c481:	89 c2                	mov    edx,eax
c000c483:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c487:	66 89 50 48          	mov    WORD PTR [eax+0x48],dx
c000c48b:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c490:	85 c0                	test   eax,eax
c000c492:	79 0c                	jns    c000c4a0 <tcp_receive+0x7b0>
c000c494:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c499:	f7 d8                	neg    eax
c000c49b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c4a0:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c4a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a9:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4ad:	98                   	cwde   
c000c4ae:	c1 f8 02             	sar    eax,0x2
c000c4b1:	89 d7                	mov    edi,edx
c000c4b3:	29 c7                	sub    edi,eax
c000c4b5:	89 f8                	mov    eax,edi
c000c4b7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c4bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4c0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4c4:	89 c2                	mov    edx,eax
c000c4c6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c4cb:	01 d0                	add    eax,edx
c000c4cd:	89 c2                	mov    edx,eax
c000c4cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d3:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
c000c4d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4db:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c4de:	98                   	cwde   
c000c4df:	c1 f8 03             	sar    eax,0x3
c000c4e2:	89 c2                	mov    edx,eax
c000c4e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4e8:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4ec:	01 d0                	add    eax,edx
c000c4ee:	89 c2                	mov    edx,eax
c000c4f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4f4:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000c4f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4fc:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c503:	90                   	nop
c000c504:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c50a:	0f b7 c0             	movzx  eax,ax
c000c50d:	85 c0                	test   eax,eax
c000c50f:	0f 84 43 0e 00 00    	je     c000d358 <tcp_receive+0x1668>
c000c515:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c519:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c51c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c521:	29 c2                	sub    edx,eax
c000c523:	89 d0                	mov    eax,edx
c000c525:	83 e8 01             	sub    eax,0x1
c000c528:	0f 88 c6 01 00 00    	js     c000c6f4 <tcp_receive+0xa04>
c000c52e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c532:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c535:	66 8b 15 aa a8 03 c0 	mov    dx,WORD PTR ds:0xc003a8aa
c000c53c:	0f b7 ca             	movzx  ecx,dx
c000c53f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c545:	01 ca                	add    edx,ecx
c000c547:	29 d0                	sub    eax,edx
c000c549:	83 c0 01             	add    eax,0x1
c000c54c:	85 c0                	test   eax,eax
c000c54e:	0f 8f a0 01 00 00    	jg     c000c6f4 <tcp_receive+0xa04>
c000c554:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c558:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c55b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c560:	29 c2                	sub    edx,eax
c000c562:	89 d0                	mov    eax,edx
c000c564:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c568:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c56d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c571:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c576:	85 c0                	test   eax,eax
c000c578:	75 16                	jne    c000c590 <tcp_receive+0x8a0>
c000c57a:	83 ec 08             	sub    esp,0x8
c000c57d:	68 91 0b 03 c0       	push   0xc0030b91
c000c582:	68 26 00 03 c0       	push   0xc0030026
c000c587:	e8 38 39 01 00       	call   c001fec4 <CPrintf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	90                   	nop
c000c590:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c598:	7e 16                	jle    c000c5b0 <tcp_receive+0x8c0>
c000c59a:	83 ec 08             	sub    esp,0x8
c000c59d:	68 a1 0b 03 c0       	push   0xc0030ba1
c000c5a2:	68 26 00 03 c0       	push   0xc0030026
c000c5a7:	e8 18 39 01 00       	call   c001fec4 <CPrintf>
c000c5ac:	83 c4 10             	add    esp,0x10
c000c5af:	90                   	nop
c000c5b0:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5b5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5b9:	0f b7 c0             	movzx  eax,ax
c000c5bc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5c0:	0f 8e b6 00 00 00    	jle    c000c67c <tcp_receive+0x98c>
c000c5c6:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5ce:	0f b7 c0             	movzx  eax,ax
c000c5d1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5d5:	7e 15                	jle    c000c5ec <tcp_receive+0x8fc>
c000c5d7:	83 ec 08             	sub    esp,0x8
c000c5da:	68 b0 0b 03 c0       	push   0xc0030bb0
c000c5df:	68 26 00 03 c0       	push   0xc0030026
c000c5e4:	e8 db 38 01 00       	call   c001fec4 <CPrintf>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5f8:	29 d0                	sub    eax,edx
c000c5fa:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c5ff:	eb 33                	jmp    c000c634 <tcp_receive+0x944>
c000c601:	8d 76 00             	lea    esi,[esi+0x0]
c000c604:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c608:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c60c:	0f b7 c0             	movzx  eax,ax
c000c60f:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c613:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c617:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c61b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000c61f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c623:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c629:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c62d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c62f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c633:	90                   	nop
c000c634:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c638:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c63c:	0f b7 c0             	movzx  eax,ax
c000c63f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c643:	7f bf                	jg     c000c604 <tcp_receive+0x914>
c000c645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c649:	f7 d8                	neg    eax
c000c64b:	98                   	cwde   
c000c64c:	83 ec 08             	sub    esp,0x8
c000c64f:	50                   	push   eax
c000c650:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c654:	e8 1b bd ff ff       	call   c0008374 <pbuf_header>
c000c659:	83 c4 10             	add    esp,0x10
c000c65c:	0f b6 c0             	movzx  eax,al
c000c65f:	85 c0                	test   eax,eax
c000c661:	74 51                	je     c000c6b4 <tcp_receive+0x9c4>
c000c663:	83 ec 08             	sub    esp,0x8
c000c666:	68 c0 0b 03 c0       	push   0xc0030bc0
c000c66b:	68 26 00 03 c0       	push   0xc0030026
c000c670:	e8 4f 38 01 00       	call   c001fec4 <CPrintf>
c000c675:	83 c4 10             	add    esp,0x10
c000c678:	eb 3a                	jmp    c000c6b4 <tcp_receive+0x9c4>
c000c67a:	66 90                	xchg   ax,ax
c000c67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c680:	f7 d8                	neg    eax
c000c682:	0f bf d0             	movsx  edx,ax
c000c685:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c68a:	83 ec 08             	sub    esp,0x8
c000c68d:	52                   	push   edx
c000c68e:	50                   	push   eax
c000c68f:	e8 e0 bc ff ff       	call   c0008374 <pbuf_header>
c000c694:	83 c4 10             	add    esp,0x10
c000c697:	0f b6 c0             	movzx  eax,al
c000c69a:	85 c0                	test   eax,eax
c000c69c:	74 16                	je     c000c6b4 <tcp_receive+0x9c4>
c000c69e:	83 ec 08             	sub    esp,0x8
c000c6a1:	68 c0 0b 03 c0       	push   0xc0030bc0
c000c6a6:	68 26 00 03 c0       	push   0xc0030026
c000c6ab:	e8 14 38 01 00       	call   c001fec4 <CPrintf>
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	90                   	nop
c000c6b4:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000c6ba:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c6bf:	89 c1                	mov    ecx,eax
c000c6c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6c8:	89 ce                	mov    esi,ecx
c000c6ca:	29 c6                	sub    esi,eax
c000c6cc:	89 f0                	mov    eax,esi
c000c6ce:	01 d0                	add    eax,edx
c000c6d0:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c6d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6da:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6dd:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c6e2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6e7:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c6f0:	eb 2a                	jmp    c000c71c <tcp_receive+0xa2c>
c000c6f2:	66 90                	xchg   ax,ax
c000c6f4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c701:	29 c2                	sub    edx,eax
c000c703:	89 d0                	mov    eax,edx
c000c705:	79 15                	jns    c000c71c <tcp_receive+0xa2c>
c000c707:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c70b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c70e:	83 c8 02             	or     eax,0x2
c000c711:	88 c2                	mov    dl,al
c000c713:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c717:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c71a:	66 90                	xchg   ax,ax
c000c71c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c722:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c726:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c729:	29 c2                	sub    edx,eax
c000c72b:	89 d0                	mov    eax,edx
c000c72d:	0f 88 11 0c 00 00    	js     c000d344 <tcp_receive+0x1654>
c000c733:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c739:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c73d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c740:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c744:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c747:	0f b7 c0             	movzx  eax,ax
c000c74a:	01 c8                	add    eax,ecx
c000c74c:	29 c2                	sub    edx,eax
c000c74e:	89 d0                	mov    eax,edx
c000c750:	83 c0 01             	add    eax,0x1
c000c753:	85 c0                	test   eax,eax
c000c755:	0f 8f e9 0b 00 00    	jg     c000d344 <tcp_receive+0x1654>
c000c75b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c762:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c767:	39 c2                	cmp    edx,eax
c000c769:	0f 85 25 07 00 00    	jne    c000ce94 <tcp_receive+0x11a4>
c000c76f:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c775:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c77a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77e:	0f b7 c0             	movzx  eax,ax
c000c781:	83 ec 0c             	sub    esp,0xc
c000c784:	50                   	push   eax
c000c785:	e8 92 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	0f b7 c0             	movzx  eax,ax
c000c790:	83 e0 03             	and    eax,0x3
c000c793:	0f 95 c0             	setne  al
c000c796:	0f b6 c0             	movzx  eax,al
c000c799:	01 d8                	add    eax,ebx
c000c79b:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c7a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7a5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c7a8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c7ae:	0f b7 d2             	movzx  edx,dx
c000c7b1:	0f b7 c0             	movzx  eax,ax
c000c7b4:	39 c2                	cmp    edx,eax
c000c7b6:	0f 83 30 01 00 00    	jae    c000c8ec <tcp_receive+0xbfc>
c000c7bc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7c1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7c5:	0f b7 c0             	movzx  eax,ax
c000c7c8:	83 ec 0c             	sub    esp,0xc
c000c7cb:	50                   	push   eax
c000c7cc:	e8 4b 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	0f b7 c0             	movzx  eax,ax
c000c7d7:	83 e0 01             	and    eax,0x1
c000c7da:	74 48                	je     c000c824 <tcp_receive+0xb34>
c000c7dc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7e1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7e5:	80 e4 c0             	and    ah,0xc0
c000c7e8:	89 c3                	mov    ebx,eax
c000c7ea:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7ef:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7f3:	0f b7 c0             	movzx  eax,ax
c000c7f6:	83 ec 0c             	sub    esp,0xc
c000c7f9:	50                   	push   eax
c000c7fa:	e8 1d 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c7ff:	83 c4 10             	add    esp,0x10
c000c802:	0f b7 c0             	movzx  eax,ax
c000c805:	83 e0 3e             	and    eax,0x3e
c000c808:	83 ec 0c             	sub    esp,0xc
c000c80b:	50                   	push   eax
c000c80c:	e8 0b 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c811:	83 c4 10             	add    esp,0x10
c000c814:	09 d8                	or     eax,ebx
c000c816:	89 c2                	mov    edx,eax
c000c818:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c81d:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c821:	8d 76 00             	lea    esi,[esi+0x0]
c000c824:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c828:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c82b:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c831:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c836:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c83a:	0f b7 c0             	movzx  eax,ax
c000c83d:	83 ec 0c             	sub    esp,0xc
c000c840:	50                   	push   eax
c000c841:	e8 d6 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c846:	83 c4 10             	add    esp,0x10
c000c849:	0f b7 c0             	movzx  eax,ax
c000c84c:	83 e0 02             	and    eax,0x2
c000c84f:	74 0f                	je     c000c860 <tcp_receive+0xb70>
c000c851:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c856:	83 e8 01             	sub    eax,0x1
c000c859:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c85f:	90                   	nop
c000c860:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c865:	0f b7 d0             	movzx  edx,ax
c000c868:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c86d:	83 ec 08             	sub    esp,0x8
c000c870:	52                   	push   edx
c000c871:	50                   	push   eax
c000c872:	e8 71 c2 ff ff       	call   c0008ae8 <pbuf_realloc>
c000c877:	83 c4 10             	add    esp,0x10
c000c87a:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c880:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c885:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c889:	0f b7 c0             	movzx  eax,ax
c000c88c:	83 ec 0c             	sub    esp,0xc
c000c88f:	50                   	push   eax
c000c890:	e8 87 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	0f b7 c0             	movzx  eax,ax
c000c89b:	83 e0 03             	and    eax,0x3
c000c89e:	0f 95 c0             	setne  al
c000c8a1:	0f b6 c0             	movzx  eax,al
c000c8a4:	01 d8                	add    eax,ebx
c000c8a6:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c8ac:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8b2:	0f b7 d0             	movzx  edx,ax
c000c8b5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c8bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8c1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c8c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8c8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c8cb:	0f b7 c0             	movzx  eax,ax
c000c8ce:	01 d0                	add    eax,edx
c000c8d0:	39 c1                	cmp    ecx,eax
c000c8d2:	74 18                	je     c000c8ec <tcp_receive+0xbfc>
c000c8d4:	83 ec 08             	sub    esp,0x8
c000c8d7:	68 b4 09 03 c0       	push   0xc00309b4
c000c8dc:	68 26 00 03 c0       	push   0xc0030026
c000c8e1:	e8 de 35 01 00       	call   c001fec4 <CPrintf>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c8ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8f6:	85 c0                	test   eax,eax
c000c8f8:	0f 84 7e 02 00 00    	je     c000cb7c <tcp_receive+0xe8c>
c000c8fe:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c903:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c907:	0f b7 c0             	movzx  eax,ax
c000c90a:	83 ec 0c             	sub    esp,0xc
c000c90d:	50                   	push   eax
c000c90e:	e8 09 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c913:	83 c4 10             	add    esp,0x10
c000c916:	0f b7 c0             	movzx  eax,ax
c000c919:	83 e0 01             	and    eax,0x1
c000c91c:	74 4a                	je     c000c968 <tcp_receive+0xc78>
c000c91e:	eb 34                	jmp    c000c954 <tcp_receive+0xc64>
c000c920:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c924:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c92a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c92e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c932:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c938:	8b 10                	mov    edx,DWORD PTR [eax]
c000c93a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c93e:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c944:	83 ec 0c             	sub    esp,0xc
c000c947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c94b:	e8 50 d8 ff ff       	call   c000a1a0 <tcp_seg_free>
c000c950:	83 c4 10             	add    esp,0x10
c000c953:	90                   	nop
c000c954:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c958:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c95e:	85 c0                	test   eax,eax
c000c960:	75 be                	jne    c000c920 <tcp_receive+0xc30>
c000c962:	e9 15 02 00 00       	jmp    c000cb7c <tcp_receive+0xe8c>
c000c967:	90                   	nop
c000c968:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c96c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c972:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c976:	e9 bd 00 00 00       	jmp    c000ca38 <tcp_receive+0xd48>
c000c97b:	90                   	nop
c000c97c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c980:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c983:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c987:	0f b7 c0             	movzx  eax,ax
c000c98a:	83 ec 0c             	sub    esp,0xc
c000c98d:	50                   	push   eax
c000c98e:	e8 89 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c993:	83 c4 10             	add    esp,0x10
c000c996:	0f b7 c0             	movzx  eax,ax
c000c999:	83 e0 01             	and    eax,0x1
c000c99c:	74 76                	je     c000ca14 <tcp_receive+0xd24>
c000c99e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9a3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9a7:	0f b7 c0             	movzx  eax,ax
c000c9aa:	83 ec 0c             	sub    esp,0xc
c000c9ad:	50                   	push   eax
c000c9ae:	e8 69 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9b3:	83 c4 10             	add    esp,0x10
c000c9b6:	0f b7 c0             	movzx  eax,ax
c000c9b9:	83 e0 02             	and    eax,0x2
c000c9bc:	75 56                	jne    c000ca14 <tcp_receive+0xd24>
c000c9be:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9c3:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c9c7:	83 ec 0c             	sub    esp,0xc
c000c9ca:	6a 01                	push   0x1
c000c9cc:	e8 4b 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9d1:	83 c4 10             	add    esp,0x10
c000c9d4:	89 c2                	mov    edx,eax
c000c9d6:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9db:	09 da                	or     edx,ebx
c000c9dd:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c9e1:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c9e7:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9ec:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9f0:	0f b7 c0             	movzx  eax,ax
c000c9f3:	83 ec 0c             	sub    esp,0xc
c000c9f6:	50                   	push   eax
c000c9f7:	e8 20 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9fc:	83 c4 10             	add    esp,0x10
c000c9ff:	0f b7 c0             	movzx  eax,ax
c000ca02:	83 e0 03             	and    eax,0x3
c000ca05:	0f 95 c0             	setne  al
c000ca08:	0f b6 c0             	movzx  eax,al
c000ca0b:	01 d8                	add    eax,ebx
c000ca0d:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000ca13:	90                   	nop
c000ca14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca20:	8b 00                	mov    eax,DWORD PTR [eax]
c000ca22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca26:	83 ec 0c             	sub    esp,0xc
c000ca29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca2d:	e8 6e d7 ff ff       	call   c000a1a0 <tcp_seg_free>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	8d 76 00             	lea    esi,[esi+0x0]
c000ca38:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca3d:	74 31                	je     c000ca70 <tcp_receive+0xd80>
c000ca3f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca45:	0f b7 d0             	movzx  edx,ax
c000ca48:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca4d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca57:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca61:	0f b7 c0             	movzx  eax,ax
c000ca64:	01 d0                	add    eax,edx
c000ca66:	29 c1                	sub    ecx,eax
c000ca68:	89 c8                	mov    eax,ecx
c000ca6a:	0f 89 0c ff ff ff    	jns    c000c97c <tcp_receive+0xc8c>
c000ca70:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca75:	0f 84 f1 00 00 00    	je     c000cb6c <tcp_receive+0xe7c>
c000ca7b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca81:	0f b7 d0             	movzx  edx,ax
c000ca84:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca89:	01 c2                	add    edx,eax
c000ca8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca95:	29 c2                	sub    edx,eax
c000ca97:	89 d0                	mov    eax,edx
c000ca99:	85 c0                	test   eax,eax
c000ca9b:	0f 8e cb 00 00 00    	jle    c000cb6c <tcp_receive+0xe7c>
c000caa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000caa5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000caa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000caab:	89 c2                	mov    edx,eax
c000caad:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cab2:	89 d7                	mov    edi,edx
c000cab4:	29 c7                	sub    edi,eax
c000cab6:	89 f8                	mov    eax,edi
c000cab8:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000cabe:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cac3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cac7:	0f b7 c0             	movzx  eax,ax
c000caca:	83 ec 0c             	sub    esp,0xc
c000cacd:	50                   	push   eax
c000cace:	e8 49 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cad3:	83 c4 10             	add    esp,0x10
c000cad6:	0f b7 c0             	movzx  eax,ax
c000cad9:	83 e0 02             	and    eax,0x2
c000cadc:	74 0e                	je     c000caec <tcp_receive+0xdfc>
c000cade:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000cae3:	83 e8 01             	sub    eax,0x1
c000cae6:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000caec:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000caf1:	0f b7 d0             	movzx  edx,ax
c000caf4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000caf9:	83 ec 08             	sub    esp,0x8
c000cafc:	52                   	push   edx
c000cafd:	50                   	push   eax
c000cafe:	e8 e5 bf ff ff       	call   c0008ae8 <pbuf_realloc>
c000cb03:	83 c4 10             	add    esp,0x10
c000cb06:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000cb0c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cb11:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb15:	0f b7 c0             	movzx  eax,ax
c000cb18:	83 ec 0c             	sub    esp,0xc
c000cb1b:	50                   	push   eax
c000cb1c:	e8 fb 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb21:	83 c4 10             	add    esp,0x10
c000cb24:	0f b7 c0             	movzx  eax,ax
c000cb27:	83 e0 03             	and    eax,0x3
c000cb2a:	0f 95 c0             	setne  al
c000cb2d:	0f b6 c0             	movzx  eax,al
c000cb30:	01 d8                	add    eax,ebx
c000cb32:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000cb38:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb3e:	0f b7 d0             	movzx  edx,ax
c000cb41:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cb46:	01 c2                	add    edx,eax
c000cb48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb52:	39 c2                	cmp    edx,eax
c000cb54:	74 16                	je     c000cb6c <tcp_receive+0xe7c>
c000cb56:	83 ec 08             	sub    esp,0x8
c000cb59:	68 ec 09 03 c0       	push   0xc00309ec
c000cb5e:	68 26 00 03 c0       	push   0xc0030026
c000cb63:	e8 5c 33 01 00       	call   c001fec4 <CPrintf>
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	90                   	nop
c000cb6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb70:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb74:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb7a:	66 90                	xchg   ax,ax
c000cb7c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb82:	0f b7 d0             	movzx  edx,ax
c000cb85:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cb8a:	01 c2                	add    edx,eax
c000cb8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb90:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb97:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb9a:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cba0:	0f b7 d2             	movzx  edx,dx
c000cba3:	0f b7 c0             	movzx  eax,ax
c000cba6:	39 c2                	cmp    edx,eax
c000cba8:	73 16                	jae    c000cbc0 <tcp_receive+0xed0>
c000cbaa:	83 ec 08             	sub    esp,0x8
c000cbad:	68 28 0a 03 c0       	push   0xc0030a28
c000cbb2:	68 26 00 03 c0       	push   0xc0030026
c000cbb7:	e8 08 33 01 00       	call   c001fec4 <CPrintf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	90                   	nop
c000cbc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbc4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cbc7:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cbcd:	89 d6                	mov    esi,edx
c000cbcf:	29 c6                	sub    esi,eax
c000cbd1:	89 f0                	mov    eax,esi
c000cbd3:	89 c2                	mov    edx,eax
c000cbd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbd9:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cbdd:	83 ec 0c             	sub    esp,0xc
c000cbe0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbe4:	e8 5b d2 ff ff       	call   c0009e44 <tcp_update_rcv_ann_wnd>
c000cbe9:	83 c4 10             	add    esp,0x10
c000cbec:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cbf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cbf4:	0f b7 c0             	movzx  eax,ax
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	74 15                	je     c000cc10 <tcp_receive+0xf20>
c000cbfb:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cc00:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cc05:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000cc0f:	90                   	nop
c000cc10:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cc15:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc19:	0f b7 c0             	movzx  eax,ax
c000cc1c:	83 ec 0c             	sub    esp,0xc
c000cc1f:	50                   	push   eax
c000cc20:	e8 f7 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cc25:	83 c4 10             	add    esp,0x10
c000cc28:	0f b7 c0             	movzx  eax,ax
c000cc2b:	83 e0 01             	and    eax,0x1
c000cc2e:	0f 84 dc 01 00 00    	je     c000ce10 <tcp_receive+0x1120>
c000cc34:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cc39:	83 c8 20             	or     eax,0x20
c000cc3c:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cc41:	e9 ca 01 00 00       	jmp    c000ce10 <tcp_receive+0x1120>
c000cc46:	66 90                	xchg   ax,ax
c000cc48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc66:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc72:	0f b7 d8             	movzx  ebx,ax
c000cc75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc7c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc80:	0f b7 c0             	movzx  eax,ax
c000cc83:	83 ec 0c             	sub    esp,0xc
c000cc86:	50                   	push   eax
c000cc87:	e8 90 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	0f b7 c0             	movzx  eax,ax
c000cc92:	83 e0 03             	and    eax,0x3
c000cc95:	0f 95 c0             	setne  al
c000cc98:	0f b6 c0             	movzx  eax,al
c000cc9b:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cc9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cca2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cca5:	01 c2                	add    edx,eax
c000cca7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccab:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ccae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccb2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ccb5:	0f b7 d8             	movzx  ebx,ax
c000ccb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccbf:	0f b7 f0             	movzx  esi,ax
c000ccc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cccd:	0f b7 c0             	movzx  eax,ax
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	50                   	push   eax
c000ccd4:	e8 43 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	0f b7 c0             	movzx  eax,ax
c000ccdf:	83 e0 03             	and    eax,0x3
c000cce2:	0f 95 c0             	setne  al
c000cce5:	0f b6 c0             	movzx  eax,al
c000cce8:	01 f0                	add    eax,esi
c000ccea:	39 c3                	cmp    ebx,eax
c000ccec:	7d 16                	jge    c000cd04 <tcp_receive+0x1014>
c000ccee:	83 ec 08             	sub    esp,0x8
c000ccf1:	68 48 0a 03 c0       	push   0xc0030a48
c000ccf6:	68 26 00 03 c0       	push   0xc0030026
c000ccfb:	e8 c4 31 01 00       	call   c001fec4 <CPrintf>
c000cd00:	83 c4 10             	add    esp,0x10
c000cd03:	90                   	nop
c000cd04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd0b:	0f b7 d8             	movzx  ebx,ax
c000cd0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd15:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cd19:	0f b7 c0             	movzx  eax,ax
c000cd1c:	83 ec 0c             	sub    esp,0xc
c000cd1f:	50                   	push   eax
c000cd20:	e8 f7 3e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cd25:	83 c4 10             	add    esp,0x10
c000cd28:	0f b7 c0             	movzx  eax,ax
c000cd2b:	83 e0 03             	and    eax,0x3
c000cd2e:	0f 95 c0             	setne  al
c000cd31:	0f b6 c0             	movzx  eax,al
c000cd34:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cd37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd3b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cd3e:	29 d0                	sub    eax,edx
c000cd40:	89 c2                	mov    edx,eax
c000cd42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd46:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cd4a:	83 ec 0c             	sub    esp,0xc
c000cd4d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd51:	e8 ee d0 ff ff       	call   c0009e44 <tcp_update_rcv_ann_wnd>
c000cd56:	83 c4 10             	add    esp,0x10
c000cd59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd63:	0f b7 c0             	movzx  eax,ax
c000cd66:	85 c0                	test   eax,eax
c000cd68:	74 3e                	je     c000cda8 <tcp_receive+0x10b8>
c000cd6a:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd6f:	85 c0                	test   eax,eax
c000cd71:	74 1d                	je     c000cd90 <tcp_receive+0x10a0>
c000cd73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd77:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd7a:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd7f:	83 ec 08             	sub    esp,0x8
c000cd82:	52                   	push   edx
c000cd83:	50                   	push   eax
c000cd84:	e8 cf bf ff ff       	call   c0008d58 <pbuf_cat>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	eb 0e                	jmp    c000cd9c <tcp_receive+0x10ac>
c000cd8e:	66 90                	xchg   ax,ax
c000cd90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd97:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cd9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cda0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cda7:	90                   	nop
c000cda8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cdac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdaf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cdb3:	0f b7 c0             	movzx  eax,ax
c000cdb6:	83 ec 0c             	sub    esp,0xc
c000cdb9:	50                   	push   eax
c000cdba:	e8 5d 3e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cdbf:	83 c4 10             	add    esp,0x10
c000cdc2:	0f b7 c0             	movzx  eax,ax
c000cdc5:	83 e0 01             	and    eax,0x1
c000cdc8:	74 26                	je     c000cdf0 <tcp_receive+0x1100>
c000cdca:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cdcf:	83 c8 20             	or     eax,0x20
c000cdd2:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cdd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cddb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cdde:	83 f8 04             	cmp    eax,0x4
c000cde1:	75 0d                	jne    c000cdf0 <tcp_receive+0x1100>
c000cde3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cde7:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cdee:	66 90                	xchg   ax,ax
c000cdf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cdf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cdf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdfa:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce00:	83 ec 0c             	sub    esp,0xc
c000ce03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce07:	e8 94 d3 ff ff       	call   c000a1a0 <tcp_seg_free>
c000ce0c:	83 c4 10             	add    esp,0x10
c000ce0f:	90                   	nop
c000ce10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce14:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce1a:	85 c0                	test   eax,eax
c000ce1c:	74 22                	je     c000ce40 <tcp_receive+0x1150>
c000ce1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce22:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce2b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ce2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce32:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ce35:	39 c2                	cmp    edx,eax
c000ce37:	0f 84 0b fe ff ff    	je     c000cc48 <tcp_receive+0xf58>
c000ce3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ce40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce44:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce47:	0f b6 c0             	movzx  eax,al
c000ce4a:	83 e0 01             	and    eax,0x1
c000ce4d:	74 2d                	je     c000ce7c <tcp_receive+0x118c>
c000ce4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce53:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce56:	83 e0 fe             	and    eax,0xfffffffe
c000ce59:	88 c2                	mov    dl,al
c000ce5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce5f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce66:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce69:	83 c8 02             	or     eax,0x2
c000ce6c:	88 c2                	mov    dl,al
c000ce6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce72:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce75:	e9 2e 05 00 00       	jmp    c000d3a8 <tcp_receive+0x16b8>
c000ce7a:	66 90                	xchg   ax,ax
c000ce7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce80:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce83:	83 c8 01             	or     eax,0x1
c000ce86:	88 c2                	mov    dl,al
c000ce88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce8c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce8f:	e9 14 05 00 00       	jmp    c000d3a8 <tcp_receive+0x16b8>
c000ce94:	83 ec 0c             	sub    esp,0xc
c000ce97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce9b:	e8 00 2f 00 00       	call   c000fda0 <tcp_send_empty_ack>
c000cea0:	83 c4 10             	add    esp,0x10
c000cea3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cea7:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cead:	85 c0                	test   eax,eax
c000ceaf:	75 23                	jne    c000ced4 <tcp_receive+0x11e4>
c000ceb1:	83 ec 0c             	sub    esp,0xc
c000ceb4:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ceb9:	e8 7a d3 ff ff       	call   c000a238 <tcp_seg_copy>
c000cebe:	83 c4 10             	add    esp,0x10
c000cec1:	89 c2                	mov    edx,eax
c000cec3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cec7:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cecd:	e9 d6 04 00 00       	jmp    c000d3a8 <tcp_receive+0x16b8>
c000ced2:	66 90                	xchg   ax,ax
c000ced4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cedc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cee0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cee6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ceea:	e9 2d 04 00 00       	jmp    c000d31c <tcp_receive+0x162c>
c000ceef:	90                   	nop
c000cef0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cef7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cefa:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceff:	39 c2                	cmp    edx,eax
c000cf01:	75 75                	jne    c000cf78 <tcp_receive+0x1288>
c000cf03:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cf09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf10:	0f b7 d2             	movzx  edx,dx
c000cf13:	0f b7 c0             	movzx  eax,ax
c000cf16:	39 c2                	cmp    edx,eax
c000cf18:	0f 86 0e 04 00 00    	jbe    c000d32c <tcp_receive+0x163c>
c000cf1e:	83 ec 0c             	sub    esp,0xc
c000cf21:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf26:	e8 0d d3 ff ff       	call   c000a238 <tcp_seg_copy>
c000cf2b:	83 c4 10             	add    esp,0x10
c000cf2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf32:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cf37:	0f 84 f3 03 00 00    	je     c000d330 <tcp_receive+0x1640>
c000cf3d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf42:	74 0c                	je     c000cf50 <tcp_receive+0x1260>
c000cf44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf4c:	89 10                	mov    DWORD PTR [eax],edx
c000cf4e:	eb 10                	jmp    c000cf60 <tcp_receive+0x1270>
c000cf50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf58:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf5e:	66 90                	xchg   ax,ax
c000cf60:	83 ec 08             	sub    esp,0x8
c000cf63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6b:	e8 10 ec ff ff       	call   c000bb80 <tcp_oos_insert_segment>
c000cf70:	83 c4 10             	add    esp,0x10
c000cf73:	e9 b8 03 00 00       	jmp    c000d330 <tcp_receive+0x1640>
c000cf78:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf7d:	75 61                	jne    c000cfe0 <tcp_receive+0x12f0>
c000cf7f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf8f:	29 c2                	sub    edx,eax
c000cf91:	89 d0                	mov    eax,edx
c000cf93:	0f 89 2b 01 00 00    	jns    c000d0c4 <tcp_receive+0x13d4>
c000cf99:	83 ec 0c             	sub    esp,0xc
c000cf9c:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cfa1:	e8 92 d2 ff ff       	call   c000a238 <tcp_seg_copy>
c000cfa6:	83 c4 10             	add    esp,0x10
c000cfa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfad:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cfb2:	0f 84 7c 03 00 00    	je     c000d334 <tcp_receive+0x1644>
c000cfb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cfc0:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cfc6:	83 ec 08             	sub    esp,0x8
c000cfc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd1:	e8 aa eb ff ff       	call   c000bb80 <tcp_oos_insert_segment>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	e9 56 03 00 00       	jmp    c000d334 <tcp_receive+0x1644>
c000cfde:	66 90                	xchg   ax,ax
c000cfe0:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cfe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cff0:	29 c2                	sub    edx,eax
c000cff2:	89 d0                	mov    eax,edx
c000cff4:	83 e8 01             	sub    eax,0x1
c000cff7:	0f 88 c7 00 00 00    	js     c000d0c4 <tcp_receive+0x13d4>
c000cffd:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d003:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d007:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d00a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d00d:	29 c2                	sub    edx,eax
c000d00f:	89 d0                	mov    eax,edx
c000d011:	83 c0 01             	add    eax,0x1
c000d014:	85 c0                	test   eax,eax
c000d016:	0f 8f a8 00 00 00    	jg     c000d0c4 <tcp_receive+0x13d4>
c000d01c:	83 ec 0c             	sub    esp,0xc
c000d01f:	68 c0 a8 03 c0       	push   0xc003a8c0
c000d024:	e8 0f d2 ff ff       	call   c000a238 <tcp_seg_copy>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d030:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d035:	0f 84 fd 02 00 00    	je     c000d338 <tcp_receive+0x1648>
c000d03b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d042:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d045:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d049:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d04c:	0f b7 c0             	movzx  eax,ax
c000d04f:	01 c2                	add    edx,eax
c000d051:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d056:	29 c2                	sub    edx,eax
c000d058:	89 d0                	mov    eax,edx
c000d05a:	85 c0                	test   eax,eax
c000d05c:	7e 42                	jle    c000d0a0 <tcp_receive+0x13b0>
c000d05e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d063:	89 c2                	mov    edx,eax
c000d065:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d069:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d06c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d06f:	89 d7                	mov    edi,edx
c000d071:	29 c7                	sub    edi,eax
c000d073:	89 f8                	mov    eax,edi
c000d075:	89 c2                	mov    edx,eax
c000d077:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d07b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d07f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d083:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d086:	0f b7 d0             	movzx  edx,ax
c000d089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d08d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d090:	83 ec 08             	sub    esp,0x8
c000d093:	52                   	push   edx
c000d094:	50                   	push   eax
c000d095:	e8 4e ba ff ff       	call   c0008ae8 <pbuf_realloc>
c000d09a:	83 c4 10             	add    esp,0x10
c000d09d:	8d 76 00             	lea    esi,[esi+0x0]
c000d0a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d0a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0a8:	89 10                	mov    DWORD PTR [eax],edx
c000d0aa:	83 ec 08             	sub    esp,0x8
c000d0ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b5:	e8 c6 ea ff ff       	call   c000bb80 <tcp_oos_insert_segment>
c000d0ba:	83 c4 10             	add    esp,0x10
c000d0bd:	e9 76 02 00 00       	jmp    c000d338 <tcp_receive+0x1648>
c000d0c2:	66 90                	xchg   ax,ax
c000d0c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0ca:	85 c0                	test   eax,eax
c000d0cc:	0f 85 36 02 00 00    	jne    c000d308 <tcp_receive+0x1618>
c000d0d2:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d0d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d0e2:	29 c2                	sub    edx,eax
c000d0e4:	89 d0                	mov    eax,edx
c000d0e6:	85 c0                	test   eax,eax
c000d0e8:	0f 8e 1a 02 00 00    	jle    c000d308 <tcp_receive+0x1618>
c000d0ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0f5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0f9:	0f b7 c0             	movzx  eax,ax
c000d0fc:	83 ec 0c             	sub    esp,0xc
c000d0ff:	50                   	push   eax
c000d100:	e8 17 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d105:	83 c4 10             	add    esp,0x10
c000d108:	0f b7 c0             	movzx  eax,ax
c000d10b:	83 e0 01             	and    eax,0x1
c000d10e:	0f 85 28 02 00 00    	jne    c000d33c <tcp_receive+0x164c>
c000d114:	83 ec 0c             	sub    esp,0xc
c000d117:	68 c0 a8 03 c0       	push   0xc003a8c0
c000d11c:	e8 17 d1 ff ff       	call   c000a238 <tcp_seg_copy>
c000d121:	83 c4 10             	add    esp,0x10
c000d124:	89 c2                	mov    edx,eax
c000d126:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d12a:	89 10                	mov    DWORD PTR [eax],edx
c000d12c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d130:	8b 00                	mov    eax,DWORD PTR [eax]
c000d132:	85 c0                	test   eax,eax
c000d134:	0f 84 06 02 00 00    	je     c000d340 <tcp_receive+0x1650>
c000d13a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d13e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d141:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d144:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d148:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d14b:	0f b7 c0             	movzx  eax,ax
c000d14e:	01 c2                	add    edx,eax
c000d150:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d155:	29 c2                	sub    edx,eax
c000d157:	89 d0                	mov    eax,edx
c000d159:	85 c0                	test   eax,eax
c000d15b:	7e 3f                	jle    c000d19c <tcp_receive+0x14ac>
c000d15d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d162:	89 c2                	mov    edx,eax
c000d164:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d168:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d16b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d16e:	89 d6                	mov    esi,edx
c000d170:	29 c6                	sub    esi,eax
c000d172:	89 f0                	mov    eax,esi
c000d174:	89 c2                	mov    edx,eax
c000d176:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d17a:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d17e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d182:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d185:	0f b7 d0             	movzx  edx,ax
c000d188:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d18c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d18f:	83 ec 08             	sub    esp,0x8
c000d192:	52                   	push   edx
c000d193:	50                   	push   eax
c000d194:	e8 4f b9 ff ff       	call   c0008ae8 <pbuf_realloc>
c000d199:	83 c4 10             	add    esp,0x10
c000d19c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d1a2:	0f b7 d0             	movzx  edx,ax
c000d1a5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d1aa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d1ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1b1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d1b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1b8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1bb:	0f b7 c0             	movzx  eax,ax
c000d1be:	01 d0                	add    eax,edx
c000d1c0:	39 c1                	cmp    ecx,eax
c000d1c2:	0f 86 78 01 00 00    	jbe    c000d340 <tcp_receive+0x1650>
c000d1c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1d1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1d5:	0f b7 c0             	movzx  eax,ax
c000d1d8:	83 ec 0c             	sub    esp,0xc
c000d1db:	50                   	push   eax
c000d1dc:	e8 3b 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d1e1:	83 c4 10             	add    esp,0x10
c000d1e4:	0f b7 c0             	movzx  eax,ax
c000d1e7:	83 e0 01             	and    eax,0x1
c000d1ea:	74 54                	je     c000d240 <tcp_receive+0x1550>
c000d1ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1f5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1f9:	80 e4 c0             	and    ah,0xc0
c000d1fc:	89 c3                	mov    ebx,eax
c000d1fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d202:	8b 00                	mov    eax,DWORD PTR [eax]
c000d204:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d207:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d20b:	0f b7 c0             	movzx  eax,ax
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	50                   	push   eax
c000d212:	e8 05 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	0f b7 c0             	movzx  eax,ax
c000d21d:	83 e0 3e             	and    eax,0x3e
c000d220:	83 ec 0c             	sub    esp,0xc
c000d223:	50                   	push   eax
c000d224:	e8 f3 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d229:	83 c4 10             	add    esp,0x10
c000d22c:	09 d8                	or     eax,ebx
c000d22e:	89 c2                	mov    edx,eax
c000d230:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d234:	8b 00                	mov    eax,DWORD PTR [eax]
c000d236:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d239:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000d23d:	8d 76 00             	lea    esi,[esi+0x0]
c000d240:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d244:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d247:	89 c2                	mov    edx,eax
c000d249:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d24d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d250:	01 d0                	add    eax,edx
c000d252:	89 c1                	mov    ecx,eax
c000d254:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d259:	89 c2                	mov    edx,eax
c000d25b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d25f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d261:	89 cf                	mov    edi,ecx
c000d263:	29 d7                	sub    edi,edx
c000d265:	89 fa                	mov    edx,edi
c000d267:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d26b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d26f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d271:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d274:	0f b7 d0             	movzx  edx,ax
c000d277:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d27b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d27d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d280:	83 ec 08             	sub    esp,0x8
c000d283:	52                   	push   edx
c000d284:	50                   	push   eax
c000d285:	e8 5e b8 ff ff       	call   c0008ae8 <pbuf_realloc>
c000d28a:	83 c4 10             	add    esp,0x10
c000d28d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d291:	8b 00                	mov    eax,DWORD PTR [eax]
c000d293:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d296:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d29a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d29c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d29f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d2a3:	0f b7 c0             	movzx  eax,ax
c000d2a6:	83 ec 0c             	sub    esp,0xc
c000d2a9:	50                   	push   eax
c000d2aa:	e8 6d 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d2af:	83 c4 10             	add    esp,0x10
c000d2b2:	0f b7 c0             	movzx  eax,ax
c000d2b5:	83 e0 03             	and    eax,0x3
c000d2b8:	0f 95 c0             	setne  al
c000d2bb:	0f b6 c0             	movzx  eax,al
c000d2be:	01 d8                	add    eax,ebx
c000d2c0:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d2c6:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d2cc:	0f b7 d0             	movzx  edx,ax
c000d2cf:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d2d4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d2d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d2db:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d2de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d2e2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d2e5:	0f b7 c0             	movzx  eax,ax
c000d2e8:	01 d0                	add    eax,edx
c000d2ea:	39 c1                	cmp    ecx,eax
c000d2ec:	74 52                	je     c000d340 <tcp_receive+0x1650>
c000d2ee:	83 ec 08             	sub    esp,0x8
c000d2f1:	68 b4 09 03 c0       	push   0xc00309b4
c000d2f6:	68 26 00 03 c0       	push   0xc0030026
c000d2fb:	e8 c4 2b 01 00       	call   c001fec4 <CPrintf>
c000d300:	83 c4 10             	add    esp,0x10
c000d303:	eb 3b                	jmp    c000d340 <tcp_receive+0x1650>
c000d305:	8d 76 00             	lea    esi,[esi+0x0]
c000d308:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d30c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d310:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d314:	8b 00                	mov    eax,DWORD PTR [eax]
c000d316:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d31a:	66 90                	xchg   ax,ax
c000d31c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d321:	0f 85 c9 fb ff ff    	jne    c000cef0 <tcp_receive+0x1200>
c000d327:	eb 7f                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d329:	8d 76 00             	lea    esi,[esi+0x0]
c000d32c:	90                   	nop
c000d32d:	eb 79                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d32f:	90                   	nop
c000d330:	90                   	nop
c000d331:	eb 75                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d333:	90                   	nop
c000d334:	90                   	nop
c000d335:	eb 71                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d337:	90                   	nop
c000d338:	90                   	nop
c000d339:	eb 6d                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d33b:	90                   	nop
c000d33c:	90                   	nop
c000d33d:	eb 69                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d33f:	90                   	nop
c000d340:	90                   	nop
c000d341:	eb 65                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d343:	90                   	nop
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d34b:	e8 50 2a 00 00       	call   c000fda0 <tcp_send_empty_ack>
c000d350:	83 c4 10             	add    esp,0x10
c000d353:	eb 53                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d355:	8d 76 00             	lea    esi,[esi+0x0]
c000d358:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d35e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d362:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d365:	29 c2                	sub    edx,eax
c000d367:	89 d0                	mov    eax,edx
c000d369:	78 25                	js     c000d390 <tcp_receive+0x16a0>
c000d36b:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d371:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d375:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d378:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d37c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d37f:	0f b7 c0             	movzx  eax,ax
c000d382:	01 c8                	add    eax,ecx
c000d384:	29 c2                	sub    edx,eax
c000d386:	89 d0                	mov    eax,edx
c000d388:	83 c0 01             	add    eax,0x1
c000d38b:	85 c0                	test   eax,eax
c000d38d:	7e 19                	jle    c000d3a8 <tcp_receive+0x16b8>
c000d38f:	90                   	nop
c000d390:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d394:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d397:	83 c8 02             	or     eax,0x2
c000d39a:	88 c2                	mov    dl,al
c000d39c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d3a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d3a3:	eb 03                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3a8:	90                   	nop
c000d3a9:	83 c4 30             	add    esp,0x30
c000d3ac:	5b                   	pop    ebx
c000d3ad:	5e                   	pop    esi
c000d3ae:	5f                   	pop    edi
c000d3af:	c3                   	ret    

c000d3b0 <tcp_parseopt>:
c000d3b0:	83 ec 1c             	sub    esp,0x1c
c000d3b3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3b8:	83 c0 14             	add    eax,0x14
c000d3bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3bf:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3c4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d3c8:	0f b7 c0             	movzx  eax,ax
c000d3cb:	83 ec 0c             	sub    esp,0xc
c000d3ce:	50                   	push   eax
c000d3cf:	e8 48 38 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d3d4:	83 c4 10             	add    esp,0x10
c000d3d7:	0f b7 c0             	movzx  eax,ax
c000d3da:	c1 e8 0c             	shr    eax,0xc
c000d3dd:	0f b7 c0             	movzx  eax,ax
c000d3e0:	83 f8 05             	cmp    eax,0x5
c000d3e3:	0f 86 6f 01 00 00    	jbe    c000d558 <tcp_parseopt+0x1a8>
c000d3e9:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3ee:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d3f2:	0f b7 c0             	movzx  eax,ax
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	50                   	push   eax
c000d3f9:	e8 1e 38 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d3fe:	83 c4 10             	add    esp,0x10
c000d401:	0f b7 c0             	movzx  eax,ax
c000d404:	c1 e8 0c             	shr    eax,0xc
c000d407:	83 e8 05             	sub    eax,0x5
c000d40a:	c1 e0 02             	shl    eax,0x2
c000d40d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d412:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d419:	e9 1e 01 00 00       	jmp    c000d53c <tcp_parseopt+0x18c>
c000d41e:	66 90                	xchg   ax,ax
c000d420:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d425:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d429:	01 d0                	add    eax,edx
c000d42b:	8a 00                	mov    al,BYTE PTR [eax]
c000d42d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d431:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d436:	83 f8 01             	cmp    eax,0x1
c000d439:	74 15                	je     c000d450 <tcp_parseopt+0xa0>
c000d43b:	83 f8 02             	cmp    eax,0x2
c000d43e:	74 24                	je     c000d464 <tcp_parseopt+0xb4>
c000d440:	85 c0                	test   eax,eax
c000d442:	0f 85 bc 00 00 00    	jne    c000d504 <tcp_parseopt+0x154>
c000d448:	e9 0b 01 00 00       	jmp    c000d558 <tcp_parseopt+0x1a8>
c000d44d:	8d 76 00             	lea    esi,[esi+0x0]
c000d450:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d455:	83 c0 01             	add    eax,0x1
c000d458:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d45d:	e9 da 00 00 00       	jmp    c000d53c <tcp_parseopt+0x18c>
c000d462:	66 90                	xchg   ax,ax
c000d464:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d469:	8d 50 01             	lea    edx,[eax+0x1]
c000d46c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d470:	01 d0                	add    eax,edx
c000d472:	8a 00                	mov    al,BYTE PTR [eax]
c000d474:	0f b6 c0             	movzx  eax,al
c000d477:	83 f8 04             	cmp    eax,0x4
c000d47a:	0f 85 d0 00 00 00    	jne    c000d550 <tcp_parseopt+0x1a0>
c000d480:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d485:	8d 50 03             	lea    edx,[eax+0x3]
c000d488:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d48d:	39 c2                	cmp    edx,eax
c000d48f:	0f 8d bb 00 00 00    	jge    c000d550 <tcp_parseopt+0x1a0>
c000d495:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d49a:	8d 50 02             	lea    edx,[eax+0x2]
c000d49d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4a1:	01 d0                	add    eax,edx
c000d4a3:	8a 00                	mov    al,BYTE PTR [eax]
c000d4a5:	0f b6 c0             	movzx  eax,al
c000d4a8:	c1 e0 08             	shl    eax,0x8
c000d4ab:	89 c2                	mov    edx,eax
c000d4ad:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4b2:	8d 48 03             	lea    ecx,[eax+0x3]
c000d4b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4b9:	01 c8                	add    eax,ecx
c000d4bb:	8a 00                	mov    al,BYTE PTR [eax]
c000d4bd:	0f b6 c0             	movzx  eax,al
c000d4c0:	09 d0                	or     eax,edx
c000d4c2:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d4c7:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d4cc:	3d 18 02 00 00       	cmp    eax,0x218
c000d4d1:	77 11                	ja     c000d4e4 <tcp_parseopt+0x134>
c000d4d3:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d4d8:	85 c0                	test   eax,eax
c000d4da:	74 08                	je     c000d4e4 <tcp_parseopt+0x134>
c000d4dc:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d4e1:	eb 09                	jmp    c000d4ec <tcp_parseopt+0x13c>
c000d4e3:	90                   	nop
c000d4e4:	b8 18 02 00 00       	mov    eax,0x218
c000d4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d4f0:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d4f4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d4f9:	83 c0 04             	add    eax,0x4
c000d4fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d501:	eb 39                	jmp    c000d53c <tcp_parseopt+0x18c>
c000d503:	90                   	nop
c000d504:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d509:	8d 50 01             	lea    edx,[eax+0x1]
c000d50c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d510:	01 d0                	add    eax,edx
c000d512:	8a 00                	mov    al,BYTE PTR [eax]
c000d514:	0f b6 c0             	movzx  eax,al
c000d517:	85 c0                	test   eax,eax
c000d519:	74 39                	je     c000d554 <tcp_parseopt+0x1a4>
c000d51b:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d520:	8d 50 01             	lea    edx,[eax+0x1]
c000d523:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d527:	01 d0                	add    eax,edx
c000d529:	8a 00                	mov    al,BYTE PTR [eax]
c000d52b:	0f b6 c0             	movzx  eax,al
c000d52e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d533:	01 d0                	add    eax,edx
c000d535:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d53a:	66 90                	xchg   ax,ax
c000d53c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d541:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d546:	39 c2                	cmp    edx,eax
c000d548:	0f 82 d2 fe ff ff    	jb     c000d420 <tcp_parseopt+0x70>
c000d54e:	eb 08                	jmp    c000d558 <tcp_parseopt+0x1a8>
c000d550:	90                   	nop
c000d551:	eb 05                	jmp    c000d558 <tcp_parseopt+0x1a8>
c000d553:	90                   	nop
c000d554:	90                   	nop
c000d555:	8d 76 00             	lea    esi,[esi+0x0]
c000d558:	83 c4 1c             	add    esp,0x1c
c000d55b:	c3                   	ret    

c000d55c <tcp_listen_input>:
c000d55c:	53                   	push   ebx
c000d55d:	83 ec 18             	sub    esp,0x18
c000d560:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d565:	0f b6 c0             	movzx  eax,al
c000d568:	83 e0 10             	and    eax,0x10
c000d56b:	74 53                	je     c000d5c0 <tcp_listen_input+0x64>
c000d56d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d572:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d575:	0f b7 d0             	movzx  edx,ax
c000d578:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d57d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d581:	0f b7 c0             	movzx  eax,ax
c000d584:	66 8b 0d aa a8 03 c0 	mov    cx,WORD PTR ds:0xc003a8aa
c000d58b:	0f b7 d9             	movzx  ebx,cx
c000d58e:	8b 0d b4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b4
c000d594:	01 cb                	add    ebx,ecx
c000d596:	8b 0d b0 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b0
c000d59c:	83 c1 01             	add    ecx,0x1
c000d59f:	83 ec 08             	sub    esp,0x8
c000d5a2:	52                   	push   edx
c000d5a3:	50                   	push   eax
c000d5a4:	68 90 68 03 c0       	push   0xc0036890
c000d5a9:	68 98 68 03 c0       	push   0xc0036898
c000d5ae:	53                   	push   ebx
c000d5af:	51                   	push   ecx
c000d5b0:	e8 8b 2f 00 00       	call   c0010540 <tcp_rst>
c000d5b5:	83 c4 20             	add    esp,0x20
c000d5b8:	e9 a7 01 00 00       	jmp    c000d764 <tcp_listen_input+0x208>
c000d5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d5c5:	0f b6 c0             	movzx  eax,al
c000d5c8:	83 e0 02             	and    eax,0x2
c000d5cb:	0f 84 93 01 00 00    	je     c000d764 <tcp_listen_input+0x208>
c000d5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d5:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d5d8:	0f b6 c0             	movzx  eax,al
c000d5db:	83 ec 0c             	sub    esp,0xc
c000d5de:	50                   	push   eax
c000d5df:	e8 e0 df ff ff       	call   c000b5c4 <tcp_alloc>
c000d5e4:	83 c4 10             	add    esp,0x10
c000d5e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d5f0:	75 16                	jne    c000d608 <tcp_listen_input+0xac>
c000d5f2:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d5f8:	83 c0 01             	add    eax,0x1
c000d5fb:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d601:	b0 ff                	mov    al,0xff
c000d603:	e9 60 01 00 00       	jmp    c000d768 <tcp_listen_input+0x20c>
c000d608:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d60e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d612:	89 10                	mov    DWORD PTR [eax],edx
c000d614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d618:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000d61b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d61f:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000d623:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d629:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d62d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d630:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d635:	66 8b 10             	mov    dx,WORD PTR [eax]
c000d638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d63c:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000d640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d644:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d64b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d650:	8d 50 01             	lea    edx,[eax+0x1]
c000d653:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d657:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d65a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d65e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d665:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d668:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d66d:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d675:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d679:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d67d:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000d680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d684:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d688:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d68d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d694:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d69b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d69e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a9:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d6ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6b0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b7:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d6ba:	83 e0 8c             	and    eax,0xffffff8c
c000d6bd:	88 c2                	mov    dl,al
c000d6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6c3:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d6c6:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d6cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6d0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d6d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6d7:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d6dc:	e8 7b 36 00 00       	call   c0010d5c <tcp_timer_needed>
c000d6e1:	83 ec 0c             	sub    esp,0xc
c000d6e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6e8:	e8 c3 fc ff ff       	call   c000d3b0 <tcp_parseopt>
c000d6ed:	83 c4 10             	add    esp,0x10
c000d6f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6f4:	8d 50 04             	lea    edx,[eax+0x4]
c000d6f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6fe:	0f b7 c0             	movzx  eax,ax
c000d701:	83 ec 08             	sub    esp,0x8
c000d704:	52                   	push   edx
c000d705:	50                   	push   eax
c000d706:	e8 79 e0 ff ff       	call   c000b784 <tcp_eff_send_mss>
c000d70b:	83 c4 10             	add    esp,0x10
c000d70e:	89 c2                	mov    edx,eax
c000d710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d714:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d718:	83 ec 08             	sub    esp,0x8
c000d71b:	6a 12                	push   0x12
c000d71d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d721:	e8 ee 22 00 00       	call   c000fa14 <tcp_enqueue_flags>
c000d726:	83 c4 10             	add    esp,0x10
c000d729:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d72d:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d732:	85 c0                	test   eax,eax
c000d734:	74 1a                	je     c000d750 <tcp_listen_input+0x1f4>
c000d736:	83 ec 08             	sub    esp,0x8
c000d739:	6a 00                	push   0x0
c000d73b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d73f:	e8 68 db ff ff       	call   c000b2ac <tcp_abandon>
c000d744:	83 c4 10             	add    esp,0x10
c000d747:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d74b:	eb 1b                	jmp    c000d768 <tcp_listen_input+0x20c>
c000d74d:	8d 76 00             	lea    esi,[esi+0x0]
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d757:	e8 58 29 00 00       	call   c00100b4 <tcp_output>
c000d75c:	83 c4 10             	add    esp,0x10
c000d75f:	eb 07                	jmp    c000d768 <tcp_listen_input+0x20c>
c000d761:	8d 76 00             	lea    esi,[esi+0x0]
c000d764:	b0 00                	mov    al,0x0
c000d766:	66 90                	xchg   ax,ax
c000d768:	83 c4 18             	add    esp,0x18
c000d76b:	5b                   	pop    ebx
c000d76c:	c3                   	ret    
c000d76d:	8d 76 00             	lea    esi,[esi+0x0]

c000d770 <tcp_process>:
c000d770:	53                   	push   ebx
c000d771:	83 ec 18             	sub    esp,0x18
c000d774:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d779:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d77e:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d783:	0f b6 c0             	movzx  eax,al
c000d786:	83 e0 04             	and    eax,0x4
c000d789:	0f 84 bd 00 00 00    	je     c000d84c <tcp_process+0xdc>
c000d78f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d793:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d796:	83 f8 02             	cmp    eax,0x2
c000d799:	75 19                	jne    c000d7b4 <tcp_process+0x44>
c000d79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79f:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d7a2:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d7a7:	39 c2                	cmp    edx,eax
c000d7a9:	75 45                	jne    c000d7f0 <tcp_process+0x80>
c000d7ab:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d7b0:	eb 3e                	jmp    c000d7f0 <tcp_process+0x80>
c000d7b2:	66 90                	xchg   ax,ax
c000d7b4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7be:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d7c1:	29 c2                	sub    edx,eax
c000d7c3:	89 d0                	mov    eax,edx
c000d7c5:	78 29                	js     c000d7f0 <tcp_process+0x80>
c000d7c7:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d7cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d7db:	0f b7 c0             	movzx  eax,ax
c000d7de:	01 c8                	add    eax,ecx
c000d7e0:	29 c2                	sub    edx,eax
c000d7e2:	89 d0                	mov    eax,edx
c000d7e4:	85 c0                	test   eax,eax
c000d7e6:	7f 08                	jg     c000d7f0 <tcp_process+0x80>
c000d7e8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d7f0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d7f5:	85 c0                	test   eax,eax
c000d7f7:	74 4b                	je     c000d844 <tcp_process+0xd4>
c000d7f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d800:	85 c0                	test   eax,eax
c000d802:	75 18                	jne    c000d81c <tcp_process+0xac>
c000d804:	83 ec 08             	sub    esp,0x8
c000d807:	68 70 0a 03 c0       	push   0xc0030a70
c000d80c:	68 26 00 03 c0       	push   0xc0030026
c000d811:	e8 ae 26 01 00       	call   c001fec4 <CPrintf>
c000d816:	83 c4 10             	add    esp,0x10
c000d819:	8d 76 00             	lea    esi,[esi+0x0]
c000d81c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d821:	83 c8 08             	or     eax,0x8
c000d824:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d830:	83 e0 fe             	and    eax,0xfffffffe
c000d833:	88 c2                	mov    dl,al
c000d835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d839:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d83c:	b0 f5                	mov    al,0xf5
c000d83e:	e9 c9 08 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000d843:	90                   	nop
c000d844:	b0 00                	mov    al,0x0
c000d846:	e9 c1 08 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000d84b:	90                   	nop
c000d84c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d851:	0f b6 c0             	movzx  eax,al
c000d854:	83 e0 02             	and    eax,0x2
c000d857:	74 33                	je     c000d88c <tcp_process+0x11c>
c000d859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d85d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d860:	83 f8 02             	cmp    eax,0x2
c000d863:	74 27                	je     c000d88c <tcp_process+0x11c>
c000d865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d869:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d86c:	83 f8 03             	cmp    eax,0x3
c000d86f:	74 1b                	je     c000d88c <tcp_process+0x11c>
c000d871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d875:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d878:	83 c8 02             	or     eax,0x2
c000d87b:	88 c2                	mov    dl,al
c000d87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d881:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d884:	b0 00                	mov    al,0x0
c000d886:	e9 81 08 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000d88b:	90                   	nop
c000d88c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d890:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d893:	0f b6 c0             	movzx  eax,al
c000d896:	83 e0 10             	and    eax,0x10
c000d899:	75 0d                	jne    c000d8a8 <tcp_process+0x138>
c000d89b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d8a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d8a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ac:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d8b3:	83 ec 0c             	sub    esp,0xc
c000d8b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d8ba:	e8 f1 fa ff ff       	call   c000d3b0 <tcp_parseopt>
c000d8bf:	83 c4 10             	add    esp,0x10
c000d8c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d8c9:	83 f8 09             	cmp    eax,0x9
c000d8cc:	0f 87 16 08 00 00    	ja     c000e0e8 <tcp_process+0x978>
c000d8d2:	8b 04 85 18 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e8]
c000d8d9:	ff e0                	jmp    eax
c000d8db:	90                   	nop
c000d8dc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8e1:	0f b6 c0             	movzx  eax,al
c000d8e4:	83 e0 10             	and    eax,0x10
c000d8e7:	0f 84 07 02 00 00    	je     c000daf4 <tcp_process+0x384>
c000d8ed:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8f2:	0f b6 c0             	movzx  eax,al
c000d8f5:	83 e0 02             	and    eax,0x2
c000d8f8:	0f 84 f6 01 00 00    	je     c000daf4 <tcp_process+0x384>
c000d8fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d902:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d905:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d908:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d90b:	83 ec 0c             	sub    esp,0xc
c000d90e:	50                   	push   eax
c000d90f:	e8 2c 33 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000d914:	83 c4 10             	add    esp,0x10
c000d917:	8d 50 01             	lea    edx,[eax+0x1]
c000d91a:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d91f:	39 c2                	cmp    edx,eax
c000d921:	0f 85 cd 01 00 00    	jne    c000daf4 <tcp_process+0x384>
c000d927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92b:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d92f:	83 c0 01             	add    eax,0x1
c000d932:	89 c2                	mov    edx,eax
c000d934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d938:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000d93c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d941:	8d 50 01             	lea    edx,[eax+0x1]
c000d944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d948:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d94b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d956:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d959:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d963:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d966:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d96b:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d973:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d977:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d97c:	8d 50 ff             	lea    edx,[eax-0x1]
c000d97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d983:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d995:	8d 50 04             	lea    edx,[eax+0x4]
c000d998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d99f:	0f b7 c0             	movzx  eax,ax
c000d9a2:	83 ec 08             	sub    esp,0x8
c000d9a5:	52                   	push   edx
c000d9a6:	50                   	push   eax
c000d9a7:	e8 d8 dd ff ff       	call   c000b784 <tcp_eff_send_mss>
c000d9ac:	83 c4 10             	add    esp,0x10
c000d9af:	89 c2                	mov    edx,eax
c000d9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b5:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9c0:	89 c2                	mov    edx,eax
c000d9c2:	c1 e2 02             	shl    edx,0x2
c000d9c5:	01 d0                	add    eax,edx
c000d9c7:	d1 e0                	shl    eax,1
c000d9c9:	89 c2                	mov    edx,eax
c000d9cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cf:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d7:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d9db:	0f b7 c0             	movzx  eax,ax
c000d9de:	83 f8 01             	cmp    eax,0x1
c000d9e1:	75 0d                	jne    c000d9f0 <tcp_process+0x280>
c000d9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9ea:	d1 e0                	shl    eax,1
c000d9ec:	eb 0a                	jmp    c000d9f8 <tcp_process+0x288>
c000d9ee:	66 90                	xchg   ax,ax
c000d9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9f7:	90                   	nop
c000d9f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9fc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000da00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da04:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000da07:	0f b7 c0             	movzx  eax,ax
c000da0a:	85 c0                	test   eax,eax
c000da0c:	75 16                	jne    c000da24 <tcp_process+0x2b4>
c000da0e:	83 ec 08             	sub    esp,0x8
c000da11:	68 d3 0b 03 c0       	push   0xc0030bd3
c000da16:	68 26 00 03 c0       	push   0xc0030026
c000da1b:	e8 a4 24 01 00       	call   c001fec4 <CPrintf>
c000da20:	83 c4 10             	add    esp,0x10
c000da23:	90                   	nop
c000da24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da28:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000da2b:	83 e8 01             	sub    eax,0x1
c000da2e:	89 c2                	mov    edx,eax
c000da30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da34:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000da38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000da3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da47:	8b 10                	mov    edx,DWORD PTR [eax]
c000da49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4d:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000da50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da54:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000da57:	85 c0                	test   eax,eax
c000da59:	75 0d                	jne    c000da68 <tcp_process+0x2f8>
c000da5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5f:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000da65:	eb 15                	jmp    c000da7c <tcp_process+0x30c>
c000da67:	90                   	nop
c000da68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6c:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000da72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da76:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000da7a:	66 90                	xchg   ax,ax
c000da7c:	83 ec 0c             	sub    esp,0xc
c000da7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da83:	e8 18 c7 ff ff       	call   c000a1a0 <tcp_seg_free>
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8f:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da95:	85 c0                	test   eax,eax
c000da97:	74 27                	je     c000dac0 <tcp_process+0x350>
c000da99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9d:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000daa3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000daa7:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000daaa:	83 ec 04             	sub    esp,0x4
c000daad:	6a 00                	push   0x0
c000daaf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dab3:	52                   	push   edx
c000dab4:	ff d0                	call   eax
c000dab6:	83 c4 10             	add    esp,0x10
c000dab9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dabd:	eb 09                	jmp    c000dac8 <tcp_process+0x358>
c000dabf:	90                   	nop
c000dac0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000dac5:	8d 76 00             	lea    esi,[esi+0x0]
c000dac8:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000dacd:	83 f8 f6             	cmp    eax,0xfffffff6
c000dad0:	75 0a                	jne    c000dadc <tcp_process+0x36c>
c000dad2:	b0 f6                	mov    al,0xf6
c000dad4:	e9 33 06 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000dad9:	8d 76 00             	lea    esi,[esi+0x0]
c000dadc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dae3:	83 c8 02             	or     eax,0x2
c000dae6:	88 c2                	mov    dl,al
c000dae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daec:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000daef:	e9 f8 05 00 00       	jmp    c000e0ec <tcp_process+0x97c>
c000daf4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000daf9:	0f b6 c0             	movzx  eax,al
c000dafc:	83 e0 10             	and    eax,0x10
c000daff:	0f 84 e7 05 00 00    	je     c000e0ec <tcp_process+0x97c>
c000db05:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000db0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000db0d:	0f b7 c8             	movzx  ecx,ax
c000db10:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000db15:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000db19:	0f b7 d0             	movzx  edx,ax
c000db1c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000db22:	0f b7 d8             	movzx  ebx,ax
c000db25:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000db2a:	01 c3                	add    ebx,eax
c000db2c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000db31:	83 ec 08             	sub    esp,0x8
c000db34:	51                   	push   ecx
c000db35:	52                   	push   edx
c000db36:	68 90 68 03 c0       	push   0xc0036890
c000db3b:	68 98 68 03 c0       	push   0xc0036898
c000db40:	53                   	push   ebx
c000db41:	50                   	push   eax
c000db42:	e8 f9 29 00 00       	call   c0010540 <tcp_rst>
c000db47:	83 c4 20             	add    esp,0x20
c000db4a:	e9 9d 05 00 00       	jmp    c000e0ec <tcp_process+0x97c>
c000db4f:	90                   	nop
c000db50:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db55:	0f b6 c0             	movzx  eax,al
c000db58:	83 e0 10             	and    eax,0x10
c000db5b:	0f 84 ab 01 00 00    	je     c000dd0c <tcp_process+0x59c>
c000db61:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000db67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db6b:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000db6e:	29 c2                	sub    edx,eax
c000db70:	89 d0                	mov    eax,edx
c000db72:	83 e8 01             	sub    eax,0x1
c000db75:	0f 88 45 01 00 00    	js     c000dcc0 <tcp_process+0x550>
c000db7b:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000db81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db85:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000db88:	29 c2                	sub    edx,eax
c000db8a:	89 d0                	mov    eax,edx
c000db8c:	85 c0                	test   eax,eax
c000db8e:	0f 8f 2c 01 00 00    	jg     c000dcc0 <tcp_process+0x550>
c000db94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db98:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000db9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000dba6:	85 c0                	test   eax,eax
c000dba8:	75 16                	jne    c000dbc0 <tcp_process+0x450>
c000dbaa:	83 ec 08             	sub    esp,0x8
c000dbad:	68 e9 0b 03 c0       	push   0xc0030be9
c000dbb2:	68 26 00 03 c0       	push   0xc0030026
c000dbb7:	e8 08 23 01 00       	call   c001fec4 <CPrintf>
c000dbbc:	83 c4 10             	add    esp,0x10
c000dbbf:	90                   	nop
c000dbc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000dbc7:	85 c0                	test   eax,eax
c000dbc9:	74 25                	je     c000dbf0 <tcp_process+0x480>
c000dbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbcf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000dbd2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbd6:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000dbd9:	83 ec 04             	sub    esp,0x4
c000dbdc:	6a 00                	push   0x0
c000dbde:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dbe2:	52                   	push   edx
c000dbe3:	ff d0                	call   eax
c000dbe5:	83 c4 10             	add    esp,0x10
c000dbe8:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dbec:	eb 0a                	jmp    c000dbf8 <tcp_process+0x488>
c000dbee:	66 90                	xchg   ax,ax
c000dbf0:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000dbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbf8:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000dbfd:	85 c0                	test   eax,eax
c000dbff:	74 23                	je     c000dc24 <tcp_process+0x4b4>
c000dc01:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000dc06:	83 f8 f6             	cmp    eax,0xfffffff6
c000dc09:	74 11                	je     c000dc1c <tcp_process+0x4ac>
c000dc0b:	83 ec 0c             	sub    esp,0xc
c000dc0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc12:	e8 29 d8 ff ff       	call   c000b440 <tcp_abort>
c000dc17:	83 c4 10             	add    esp,0x10
c000dc1a:	66 90                	xchg   ax,ax
c000dc1c:	b0 f6                	mov    al,0xf6
c000dc1e:	e9 e9 04 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000dc23:	90                   	nop
c000dc24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc28:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000dc2c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000dc31:	83 ec 0c             	sub    esp,0xc
c000dc34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc38:	e8 b3 e0 ff ff       	call   c000bcf0 <tcp_receive>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc44:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dc47:	0f b7 c0             	movzx  eax,ax
c000dc4a:	85 c0                	test   eax,eax
c000dc4c:	74 16                	je     c000dc64 <tcp_process+0x4f4>
c000dc4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc52:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dc55:	83 e8 01             	sub    eax,0x1
c000dc58:	89 c2                	mov    edx,eax
c000dc5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5e:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000dc62:	66 90                	xchg   ax,ax
c000dc64:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dc69:	83 f8 01             	cmp    eax,0x1
c000dc6c:	75 0e                	jne    c000dc7c <tcp_process+0x50c>
c000dc6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc75:	d1 e0                	shl    eax,1
c000dc77:	eb 0b                	jmp    c000dc84 <tcp_process+0x514>
c000dc79:	8d 76 00             	lea    esi,[esi+0x0]
c000dc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc83:	90                   	nop
c000dc84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc88:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000dc8c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc91:	0f b6 c0             	movzx  eax,al
c000dc94:	83 e0 20             	and    eax,0x20
c000dc97:	0f 84 ab 00 00 00    	je     c000dd48 <tcp_process+0x5d8>
c000dc9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dca4:	83 c8 02             	or     eax,0x2
c000dca7:	88 c2                	mov    dl,al
c000dca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcad:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dcb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb4:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dcbb:	e9 88 00 00 00       	jmp    c000dd48 <tcp_process+0x5d8>
c000dcc0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dcc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dcc8:	0f b7 c8             	movzx  ecx,ax
c000dccb:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dcd0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dcd4:	0f b7 d0             	movzx  edx,ax
c000dcd7:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dcdd:	0f b7 d8             	movzx  ebx,ax
c000dce0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dce5:	01 c3                	add    ebx,eax
c000dce7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dcec:	83 ec 08             	sub    esp,0x8
c000dcef:	51                   	push   ecx
c000dcf0:	52                   	push   edx
c000dcf1:	68 90 68 03 c0       	push   0xc0036890
c000dcf6:	68 98 68 03 c0       	push   0xc0036898
c000dcfb:	53                   	push   ebx
c000dcfc:	50                   	push   eax
c000dcfd:	e8 3e 28 00 00       	call   c0010540 <tcp_rst>
c000dd02:	83 c4 20             	add    esp,0x20
c000dd05:	e9 e6 03 00 00       	jmp    c000e0f0 <tcp_process+0x980>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd11:	0f b6 c0             	movzx  eax,al
c000dd14:	83 e0 02             	and    eax,0x2
c000dd17:	0f 84 d3 03 00 00    	je     c000e0f0 <tcp_process+0x980>
c000dd1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd21:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dd24:	8d 50 ff             	lea    edx,[eax-0x1]
c000dd27:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dd2c:	39 c2                	cmp    edx,eax
c000dd2e:	0f 85 bc 03 00 00    	jne    c000e0f0 <tcp_process+0x980>
c000dd34:	83 ec 0c             	sub    esp,0xc
c000dd37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd3b:	e8 0c 2a 00 00       	call   c001074c <tcp_rexmit>
c000dd40:	83 c4 10             	add    esp,0x10
c000dd43:	e9 a8 03 00 00       	jmp    c000e0f0 <tcp_process+0x980>
c000dd48:	90                   	nop
c000dd49:	e9 a2 03 00 00       	jmp    c000e0f0 <tcp_process+0x980>
c000dd4e:	66 90                	xchg   ax,ax
c000dd50:	83 ec 0c             	sub    esp,0xc
c000dd53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd57:	e8 94 df ff ff       	call   c000bcf0 <tcp_receive>
c000dd5c:	83 c4 10             	add    esp,0x10
c000dd5f:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd64:	0f b6 c0             	movzx  eax,al
c000dd67:	83 e0 20             	and    eax,0x20
c000dd6a:	0f 84 84 03 00 00    	je     c000e0f4 <tcp_process+0x984>
c000dd70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd77:	83 c8 02             	or     eax,0x2
c000dd7a:	88 c2                	mov    dl,al
c000dd7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd80:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd87:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dd8e:	e9 61 03 00 00       	jmp    c000e0f4 <tcp_process+0x984>
c000dd93:	90                   	nop
c000dd94:	83 ec 0c             	sub    esp,0xc
c000dd97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd9b:	e8 50 df ff ff       	call   c000bcf0 <tcp_receive>
c000dda0:	83 c4 10             	add    esp,0x10
c000dda3:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dda8:	0f b6 c0             	movzx  eax,al
c000ddab:	83 e0 20             	and    eax,0x20
c000ddae:	0f 84 08 01 00 00    	je     c000debc <tcp_process+0x74c>
c000ddb4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ddb9:	0f b6 c0             	movzx  eax,al
c000ddbc:	83 e0 10             	and    eax,0x10
c000ddbf:	0f 84 d3 00 00 00    	je     c000de98 <tcp_process+0x728>
c000ddc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc9:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ddcc:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ddd1:	39 c2                	cmp    edx,eax
c000ddd3:	0f 85 bf 00 00 00    	jne    c000de98 <tcp_process+0x728>
c000ddd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddd:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dde0:	83 c8 02             	or     eax,0x2
c000dde3:	88 c2                	mov    dl,al
c000dde5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ddec:	83 ec 0c             	sub    esp,0xc
c000ddef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf3:	e8 0c c5 ff ff       	call   c000a304 <tcp_pcb_purge>
c000ddf8:	83 c4 10             	add    esp,0x10
c000ddfb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de00:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de04:	75 12                	jne    c000de18 <tcp_process+0x6a8>
c000de06:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de0e:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000de13:	eb 4b                	jmp    c000de60 <tcp_process+0x6f0>
c000de15:	8d 76 00             	lea    esi,[esi+0x0]
c000de18:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de1d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de22:	eb 30                	jmp    c000de54 <tcp_process+0x6e4>
c000de24:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de2c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de30:	75 12                	jne    c000de44 <tcp_process+0x6d4>
c000de32:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de3b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000de3e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de41:	eb 1d                	jmp    c000de60 <tcp_process+0x6f0>
c000de43:	90                   	nop
c000de44:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de49:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de4c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de51:	8d 76 00             	lea    esi,[esi+0x0]
c000de54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de59:	85 c0                	test   eax,eax
c000de5b:	75 c7                	jne    c000de24 <tcp_process+0x6b4>
c000de5d:	8d 76 00             	lea    esi,[esi+0x0]
c000de60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de64:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de6f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de76:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de80:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de87:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de8c:	e8 cb 2e 00 00       	call   c0010d5c <tcp_timer_needed>
c000de91:	e9 62 02 00 00       	jmp    c000e0f8 <tcp_process+0x988>
c000de96:	66 90                	xchg   ax,ax
c000de98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de9c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de9f:	83 c8 02             	or     eax,0x2
c000dea2:	88 c2                	mov    dl,al
c000dea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000deab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deaf:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000deb6:	e9 3d 02 00 00       	jmp    c000e0f8 <tcp_process+0x988>
c000debb:	90                   	nop
c000debc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dec1:	0f b6 c0             	movzx  eax,al
c000dec4:	83 e0 10             	and    eax,0x10
c000dec7:	0f 84 2b 02 00 00    	je     c000e0f8 <tcp_process+0x988>
c000decd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded1:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ded4:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ded9:	39 c2                	cmp    edx,eax
c000dedb:	0f 85 17 02 00 00    	jne    c000e0f8 <tcp_process+0x988>
c000dee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee5:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000deec:	e9 07 02 00 00       	jmp    c000e0f8 <tcp_process+0x988>
c000def1:	8d 76 00             	lea    esi,[esi+0x0]
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000defb:	e8 f0 dd ff ff       	call   c000bcf0 <tcp_receive>
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000df08:	0f b6 c0             	movzx  eax,al
c000df0b:	83 e0 20             	and    eax,0x20
c000df0e:	0f 84 e8 01 00 00    	je     c000e0fc <tcp_process+0x98c>
c000df14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df18:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000df1b:	83 c8 02             	or     eax,0x2
c000df1e:	88 c2                	mov    dl,al
c000df20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df24:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000df27:	83 ec 0c             	sub    esp,0xc
c000df2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df2e:	e8 d1 c3 ff ff       	call   c000a304 <tcp_pcb_purge>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000df3b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000df3f:	75 0f                	jne    c000df50 <tcp_process+0x7e0>
c000df41:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000df46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df49:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000df4e:	eb 48                	jmp    c000df98 <tcp_process+0x828>
c000df50:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000df55:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000df5a:	eb 30                	jmp    c000df8c <tcp_process+0x81c>
c000df5c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df64:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000df68:	75 12                	jne    c000df7c <tcp_process+0x80c>
c000df6a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df73:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000df76:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df79:	eb 1d                	jmp    c000df98 <tcp_process+0x828>
c000df7b:	90                   	nop
c000df7c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df84:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000df89:	8d 76 00             	lea    esi,[esi+0x0]
c000df8c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df91:	85 c0                	test   eax,eax
c000df93:	75 c7                	jne    c000df5c <tcp_process+0x7ec>
c000df95:	8d 76 00             	lea    esi,[esi+0x0]
c000df98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df9c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dfa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa7:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dfae:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dfb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfb8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dfbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfbf:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dfc4:	e8 93 2d 00 00       	call   c0010d5c <tcp_timer_needed>
c000dfc9:	e9 2e 01 00 00       	jmp    c000e0fc <tcp_process+0x98c>
c000dfce:	66 90                	xchg   ax,ax
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfd7:	e8 14 dd ff ff       	call   c000bcf0 <tcp_receive>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dfe4:	0f b6 c0             	movzx  eax,al
c000dfe7:	83 e0 10             	and    eax,0x10
c000dfea:	0f 84 10 01 00 00    	je     c000e100 <tcp_process+0x990>
c000dff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff4:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dff7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dffc:	39 c2                	cmp    edx,eax
c000dffe:	0f 85 fc 00 00 00    	jne    c000e100 <tcp_process+0x990>
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00b:	e8 f4 c2 ff ff       	call   c000a304 <tcp_pcb_purge>
c000e010:	83 c4 10             	add    esp,0x10
c000e013:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e018:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000e01c:	75 12                	jne    c000e030 <tcp_process+0x8c0>
c000e01e:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e023:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e026:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e02b:	eb 4b                	jmp    c000e078 <tcp_process+0x908>
c000e02d:	8d 76 00             	lea    esi,[esi+0x0]
c000e030:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e035:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000e03a:	eb 30                	jmp    c000e06c <tcp_process+0x8fc>
c000e03c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e041:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e044:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000e048:	75 12                	jne    c000e05c <tcp_process+0x8ec>
c000e04a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e04f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e053:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000e056:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e059:	eb 1d                	jmp    c000e078 <tcp_process+0x908>
c000e05b:	90                   	nop
c000e05c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e061:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e064:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000e069:	8d 76 00             	lea    esi,[esi+0x0]
c000e06c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e071:	85 c0                	test   eax,eax
c000e073:	75 c7                	jne    c000e03c <tcp_process+0x8cc>
c000e075:	8d 76 00             	lea    esi,[esi+0x0]
c000e078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e07c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e087:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000e08e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000e094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e098:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e09b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e09f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000e0a4:	e8 b3 2c 00 00       	call   c0010d5c <tcp_timer_needed>
c000e0a9:	eb 55                	jmp    c000e100 <tcp_process+0x990>
c000e0ab:	90                   	nop
c000e0ac:	83 ec 0c             	sub    esp,0xc
c000e0af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0b3:	e8 38 dc ff ff       	call   c000bcf0 <tcp_receive>
c000e0b8:	83 c4 10             	add    esp,0x10
c000e0bb:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e0c0:	0f b6 c0             	movzx  eax,al
c000e0c3:	83 e0 10             	and    eax,0x10
c000e0c6:	74 3c                	je     c000e104 <tcp_process+0x994>
c000e0c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0cc:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000e0cf:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e0d4:	39 c2                	cmp    edx,eax
c000e0d6:	75 2c                	jne    c000e104 <tcp_process+0x994>
c000e0d8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e0dd:	83 c8 10             	or     eax,0x10
c000e0e0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000e0e5:	eb 1d                	jmp    c000e104 <tcp_process+0x994>
c000e0e7:	90                   	nop
c000e0e8:	90                   	nop
c000e0e9:	eb 1d                	jmp    c000e108 <tcp_process+0x998>
c000e0eb:	90                   	nop
c000e0ec:	90                   	nop
c000e0ed:	eb 19                	jmp    c000e108 <tcp_process+0x998>
c000e0ef:	90                   	nop
c000e0f0:	90                   	nop
c000e0f1:	eb 15                	jmp    c000e108 <tcp_process+0x998>
c000e0f3:	90                   	nop
c000e0f4:	90                   	nop
c000e0f5:	eb 11                	jmp    c000e108 <tcp_process+0x998>
c000e0f7:	90                   	nop
c000e0f8:	90                   	nop
c000e0f9:	eb 0d                	jmp    c000e108 <tcp_process+0x998>
c000e0fb:	90                   	nop
c000e0fc:	90                   	nop
c000e0fd:	eb 09                	jmp    c000e108 <tcp_process+0x998>
c000e0ff:	90                   	nop
c000e100:	90                   	nop
c000e101:	eb 05                	jmp    c000e108 <tcp_process+0x998>
c000e103:	90                   	nop
c000e104:	90                   	nop
c000e105:	8d 76 00             	lea    esi,[esi+0x0]
c000e108:	b0 00                	mov    al,0x0
c000e10a:	66 90                	xchg   ax,ax
c000e10c:	83 c4 18             	add    esp,0x18
c000e10f:	5b                   	pop    ebx
c000e110:	c3                   	ret    
c000e111:	8d 76 00             	lea    esi,[esi+0x0]

c000e114 <tcp_input>:
c000e114:	53                   	push   ebx
c000e115:	83 ec 18             	sub    esp,0x18
c000e118:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000e11e:	83 c0 01             	add    eax,0x1
c000e121:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000e127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e12b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e12e:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000e133:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e137:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000e13a:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e13f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e142:	0f b7 c0             	movzx  eax,ax
c000e145:	83 ec 0c             	sub    esp,0xc
c000e148:	50                   	push   eax
c000e149:	e8 ce 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e14e:	83 c4 10             	add    esp,0x10
c000e151:	0f b7 c0             	movzx  eax,ax
c000e154:	c1 e8 08             	shr    eax,0x8
c000e157:	0f b7 c0             	movzx  eax,ax
c000e15a:	83 e0 0f             	and    eax,0xf
c000e15d:	c1 e0 02             	shl    eax,0x2
c000e160:	01 d8                	add    eax,ebx
c000e162:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000e167:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e16c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e16f:	0f b7 c0             	movzx  eax,ax
c000e172:	83 ec 0c             	sub    esp,0xc
c000e175:	50                   	push   eax
c000e176:	e8 a1 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e17b:	83 c4 10             	add    esp,0x10
c000e17e:	0f b7 c0             	movzx  eax,ax
c000e181:	c1 e8 08             	shr    eax,0x8
c000e184:	83 e0 0f             	and    eax,0xf
c000e187:	c1 e0 02             	shl    eax,0x2
c000e18a:	f7 d8                	neg    eax
c000e18c:	98                   	cwde   
c000e18d:	83 ec 08             	sub    esp,0x8
c000e190:	50                   	push   eax
c000e191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e195:	e8 da a1 ff ff       	call   c0008374 <pbuf_header>
c000e19a:	83 c4 10             	add    esp,0x10
c000e19d:	0f b6 c0             	movzx  eax,al
c000e1a0:	85 c0                	test   eax,eax
c000e1a2:	75 10                	jne    c000e1b4 <tcp_input+0xa0>
c000e1a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e1ab:	0f b7 c0             	movzx  eax,ax
c000e1ae:	83 f8 13             	cmp    eax,0x13
c000e1b1:	77 35                	ja     c000e1e8 <tcp_input+0xd4>
c000e1b3:	90                   	nop
c000e1b4:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e1ba:	83 c0 01             	add    eax,0x1
c000e1bd:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e1c3:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e1c9:	83 c0 01             	add    eax,0x1
c000e1cc:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e1d2:	83 ec 0c             	sub    esp,0xc
c000e1d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1d9:	e8 36 a3 ff ff       	call   c0008514 <pbuf_free>
c000e1de:	83 c4 10             	add    esp,0x10
c000e1e1:	e9 fe 09 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e1e6:	66 90                	xchg   ax,ax
c000e1e8:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e1ed:	83 ec 08             	sub    esp,0x8
c000e1f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1f4:	50                   	push   eax
c000e1f5:	e8 be 5e 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c000e1fa:	83 c4 10             	add    esp,0x10
c000e1fd:	0f b6 c0             	movzx  eax,al
c000e200:	85 c0                	test   eax,eax
c000e202:	75 14                	jne    c000e218 <tcp_input+0x104>
c000e204:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e209:	25 f0 00 00 00       	and    eax,0xf0
c000e20e:	3d e0 00 00 00       	cmp    eax,0xe0
c000e213:	75 37                	jne    c000e24c <tcp_input+0x138>
c000e215:	8d 76 00             	lea    esi,[esi+0x0]
c000e218:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e21e:	83 c0 01             	add    eax,0x1
c000e221:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e227:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e22d:	83 c0 01             	add    eax,0x1
c000e230:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e236:	83 ec 0c             	sub    esp,0xc
c000e239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e23d:	e8 d2 a2 ff ff       	call   c0008514 <pbuf_free>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	e9 9a 09 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e24a:	66 90                	xchg   ax,ax
c000e24c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e250:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e253:	0f b7 c0             	movzx  eax,ax
c000e256:	83 ec 0c             	sub    esp,0xc
c000e259:	50                   	push   eax
c000e25a:	6a 06                	push   0x6
c000e25c:	68 98 68 03 c0       	push   0xc0036898
c000e261:	68 90 68 03 c0       	push   0xc0036890
c000e266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e26a:	e8 61 51 00 00       	call   c00133d0 <inet_chksum_pseudo>
c000e26f:	83 c4 20             	add    esp,0x20
c000e272:	0f b7 c0             	movzx  eax,ax
c000e275:	85 c0                	test   eax,eax
c000e277:	74 33                	je     c000e2ac <tcp_input+0x198>
c000e279:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e27f:	83 c0 01             	add    eax,0x1
c000e282:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e288:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e28e:	83 c0 01             	add    eax,0x1
c000e291:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e297:	83 ec 0c             	sub    esp,0xc
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	e8 71 a2 ff ff       	call   c0008514 <pbuf_free>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	e9 39 09 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e2ab:	90                   	nop
c000e2ac:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2b1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e2b5:	0f b7 c0             	movzx  eax,ax
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	50                   	push   eax
c000e2bc:	e8 5b 29 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	0f b7 c0             	movzx  eax,ax
c000e2c7:	c1 e8 0c             	shr    eax,0xc
c000e2ca:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e2ce:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e2d3:	ba 00 00 00 00       	mov    edx,0x0
c000e2d8:	89 d1                	mov    ecx,edx
c000e2da:	29 c1                	sub    ecx,eax
c000e2dc:	89 c8                	mov    eax,ecx
c000e2de:	c1 e0 02             	shl    eax,0x2
c000e2e1:	98                   	cwde   
c000e2e2:	83 ec 08             	sub    esp,0x8
c000e2e5:	50                   	push   eax
c000e2e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ea:	e8 85 a0 ff ff       	call   c0008374 <pbuf_header>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	0f b6 c0             	movzx  eax,al
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	74 33                	je     c000e32c <tcp_input+0x218>
c000e2f9:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e2ff:	83 c0 01             	add    eax,0x1
c000e302:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e308:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e30e:	83 c0 01             	add    eax,0x1
c000e311:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e317:	83 ec 0c             	sub    esp,0xc
c000e31a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e31e:	e8 f1 a1 ff ff       	call   c0008514 <pbuf_free>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	e9 b9 08 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e32b:	90                   	nop
c000e32c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e331:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e334:	0f b7 c0             	movzx  eax,ax
c000e337:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e33d:	83 ec 0c             	sub    esp,0xc
c000e340:	50                   	push   eax
c000e341:	e8 d6 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e346:	83 c4 10             	add    esp,0x10
c000e349:	66 89 03             	mov    WORD PTR [ebx],ax
c000e34c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e351:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e355:	0f b7 c0             	movzx  eax,ax
c000e358:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e35e:	83 ec 0c             	sub    esp,0xc
c000e361:	50                   	push   eax
c000e362:	e8 b5 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e36e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e373:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e376:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e37c:	83 ec 0c             	sub    esp,0xc
c000e37f:	50                   	push   eax
c000e380:	e8 bb 28 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e385:	83 c4 10             	add    esp,0x10
c000e388:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e38b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e38e:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e393:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e398:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e39b:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e3a1:	83 ec 0c             	sub    esp,0xc
c000e3a4:	50                   	push   eax
c000e3a5:	e8 96 28 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e3aa:	83 c4 10             	add    esp,0x10
c000e3ad:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e3b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e3b3:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e3b8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3bd:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e3c1:	0f b7 c0             	movzx  eax,ax
c000e3c4:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e3ca:	83 ec 0c             	sub    esp,0xc
c000e3cd:	50                   	push   eax
c000e3ce:	e8 49 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e3da:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3df:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e3e3:	0f b7 c0             	movzx  eax,ax
c000e3e6:	83 ec 0c             	sub    esp,0xc
c000e3e9:	50                   	push   eax
c000e3ea:	e8 2d 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	83 e0 3f             	and    eax,0x3f
c000e3f5:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e3fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3fe:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e401:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e406:	0f b6 c0             	movzx  eax,al
c000e409:	83 e0 03             	and    eax,0x3
c000e40c:	0f 95 c0             	setne  al
c000e40f:	0f b6 c0             	movzx  eax,al
c000e412:	01 d0                	add    eax,edx
c000e414:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e41a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e422:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e42b:	e9 50 01 00 00       	jmp    c000e580 <tcp_input+0x46c>
c000e430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e434:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e437:	85 c0                	test   eax,eax
c000e439:	75 15                	jne    c000e450 <tcp_input+0x33c>
c000e43b:	83 ec 08             	sub    esp,0x8
c000e43e:	68 90 0a 03 c0       	push   0xc0030a90
c000e443:	68 26 00 03 c0       	push   0xc0030026
c000e448:	e8 77 1a 01 00       	call   c001fec4 <CPrintf>
c000e44d:	83 c4 10             	add    esp,0x10
c000e450:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e454:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e457:	83 f8 0a             	cmp    eax,0xa
c000e45a:	75 18                	jne    c000e474 <tcp_input+0x360>
c000e45c:	83 ec 08             	sub    esp,0x8
c000e45f:	68 b8 0a 03 c0       	push   0xc0030ab8
c000e464:	68 26 00 03 c0       	push   0xc0030026
c000e469:	e8 56 1a 01 00       	call   c001fec4 <CPrintf>
c000e46e:	83 c4 10             	add    esp,0x10
c000e471:	8d 76 00             	lea    esi,[esi+0x0]
c000e474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e478:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e47b:	83 f8 01             	cmp    eax,0x1
c000e47e:	75 18                	jne    c000e498 <tcp_input+0x384>
c000e480:	83 ec 08             	sub    esp,0x8
c000e483:	68 e4 0a 03 c0       	push   0xc0030ae4
c000e488:	68 26 00 03 c0       	push   0xc0030026
c000e48d:	e8 32 1a 01 00       	call   c001fec4 <CPrintf>
c000e492:	83 c4 10             	add    esp,0x10
c000e495:	8d 76 00             	lea    esi,[esi+0x0]
c000e498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e49c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e4a0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e4a5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e4a8:	0f b7 d2             	movzx  edx,dx
c000e4ab:	0f b7 c0             	movzx  eax,ax
c000e4ae:	39 c2                	cmp    edx,eax
c000e4b0:	0f 85 b6 00 00 00    	jne    c000e56c <tcp_input+0x458>
c000e4b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e4bd:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e4c2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e4c6:	0f b7 d2             	movzx  edx,dx
c000e4c9:	0f b7 c0             	movzx  eax,ax
c000e4cc:	39 c2                	cmp    edx,eax
c000e4ce:	0f 85 98 00 00 00    	jne    c000e56c <tcp_input+0x458>
c000e4d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4db:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e4e0:	39 c2                	cmp    edx,eax
c000e4e2:	0f 85 84 00 00 00    	jne    c000e56c <tcp_input+0x458>
c000e4e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ee:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e4f3:	39 c2                	cmp    edx,eax
c000e4f5:	75 75                	jne    c000e56c <tcp_input+0x458>
c000e4f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4fe:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e502:	75 18                	jne    c000e51c <tcp_input+0x408>
c000e504:	83 ec 08             	sub    esp,0x8
c000e507:	68 0c 0b 03 c0       	push   0xc0030b0c
c000e50c:	68 26 00 03 c0       	push   0xc0030026
c000e511:	e8 ae 19 01 00       	call   c001fec4 <CPrintf>
c000e516:	83 c4 10             	add    esp,0x10
c000e519:	8d 76 00             	lea    esi,[esi+0x0]
c000e51c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e521:	74 25                	je     c000e548 <tcp_input+0x434>
c000e523:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e527:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e52a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e52e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e531:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e53b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e53e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e542:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e547:	90                   	nop
c000e548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e54f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e553:	75 3b                	jne    c000e590 <tcp_input+0x47c>
c000e555:	83 ec 08             	sub    esp,0x8
c000e558:	68 38 0b 03 c0       	push   0xc0030b38
c000e55d:	68 26 00 03 c0       	push   0xc0030026
c000e562:	e8 5d 19 01 00       	call   c001fec4 <CPrintf>
c000e567:	83 c4 10             	add    esp,0x10
c000e56a:	eb 24                	jmp    c000e590 <tcp_input+0x47c>
c000e56c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e570:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e578:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e57b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e57f:	90                   	nop
c000e580:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e585:	0f 85 a5 fe ff ff    	jne    c000e430 <tcp_input+0x31c>
c000e58b:	eb 07                	jmp    c000e594 <tcp_input+0x480>
c000e58d:	8d 76 00             	lea    esi,[esi+0x0]
c000e590:	90                   	nop
c000e591:	8d 76 00             	lea    esi,[esi+0x0]
c000e594:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e599:	0f 85 89 01 00 00    	jne    c000e728 <tcp_input+0x614>
c000e59f:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e5a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5a8:	e9 ab 00 00 00       	jmp    c000e658 <tcp_input+0x544>
c000e5ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e5b7:	83 f8 0a             	cmp    eax,0xa
c000e5ba:	74 18                	je     c000e5d4 <tcp_input+0x4c0>
c000e5bc:	83 ec 08             	sub    esp,0x8
c000e5bf:	68 64 0b 03 c0       	push   0xc0030b64
c000e5c4:	68 26 00 03 c0       	push   0xc0030026
c000e5c9:	e8 f6 18 01 00       	call   c001fec4 <CPrintf>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5d8:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e5dc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e5e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e5e4:	0f b7 d2             	movzx  edx,dx
c000e5e7:	0f b7 c0             	movzx  eax,ax
c000e5ea:	39 c2                	cmp    edx,eax
c000e5ec:	75 5e                	jne    c000e64c <tcp_input+0x538>
c000e5ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e5f5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e5fa:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e5fe:	0f b7 d2             	movzx  edx,dx
c000e601:	0f b7 c0             	movzx  eax,ax
c000e604:	39 c2                	cmp    edx,eax
c000e606:	75 44                	jne    c000e64c <tcp_input+0x538>
c000e608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e60c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e60f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e614:	39 c2                	cmp    edx,eax
c000e616:	75 34                	jne    c000e64c <tcp_input+0x538>
c000e618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e61c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e61e:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e623:	39 c2                	cmp    edx,eax
c000e625:	75 25                	jne    c000e64c <tcp_input+0x538>
c000e627:	83 ec 0c             	sub    esp,0xc
c000e62a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e62e:	e8 45 d4 ff ff       	call   c000ba78 <tcp_timewait_input>
c000e633:	83 c4 10             	add    esp,0x10
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e63d:	e8 d2 9e ff ff       	call   c0008514 <pbuf_free>
c000e642:	83 c4 10             	add    esp,0x10
c000e645:	e9 9a 05 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e64a:	66 90                	xchg   ax,ax
c000e64c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e650:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e657:	90                   	nop
c000e658:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e65d:	0f 85 4d ff ff ff    	jne    c000e5b0 <tcp_input+0x49c>
c000e663:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e66b:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e670:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e674:	eb 52                	jmp    c000e6c8 <tcp_input+0x5b4>
c000e676:	66 90                	xchg   ax,ax
c000e678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e67c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e67f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e684:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e688:	0f b7 d2             	movzx  edx,dx
c000e68b:	0f b7 c0             	movzx  eax,ax
c000e68e:	39 c2                	cmp    edx,eax
c000e690:	75 22                	jne    c000e6b4 <tcp_input+0x5a0>
c000e692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e696:	8b 10                	mov    edx,DWORD PTR [eax]
c000e698:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e69d:	39 c2                	cmp    edx,eax
c000e69f:	74 2f                	je     c000e6d0 <tcp_input+0x5bc>
c000e6a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6a5:	85 c0                	test   eax,eax
c000e6a7:	74 27                	je     c000e6d0 <tcp_input+0x5bc>
c000e6a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6af:	85 c0                	test   eax,eax
c000e6b1:	74 1d                	je     c000e6d0 <tcp_input+0x5bc>
c000e6b3:	90                   	nop
c000e6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e6c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e6c7:	90                   	nop
c000e6c8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e6cd:	75 a9                	jne    c000e678 <tcp_input+0x564>
c000e6cf:	90                   	nop
c000e6d0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e6d5:	74 51                	je     c000e728 <tcp_input+0x614>
c000e6d7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e6dc:	74 26                	je     c000e704 <tcp_input+0x5f0>
c000e6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6e2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e6e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e6e9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6ec:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6f6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6fd:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e702:	66 90                	xchg   ax,ax
c000e704:	83 ec 0c             	sub    esp,0xc
c000e707:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e70b:	e8 4c ee ff ff       	call   c000d55c <tcp_listen_input>
c000e710:	83 c4 10             	add    esp,0x10
c000e713:	83 ec 0c             	sub    esp,0xc
c000e716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e71a:	e8 f5 9d ff ff       	call   c0008514 <pbuf_free>
c000e71f:	83 c4 10             	add    esp,0x10
c000e722:	e9 bd 04 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e727:	90                   	nop
c000e728:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e72d:	0f 84 1d 04 00 00    	je     c000eb50 <tcp_input+0xa3c>
c000e733:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e73d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e741:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e744:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e74a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e74e:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e753:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e758:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e75d:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e767:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e76e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e772:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e778:	85 c0                	test   eax,eax
c000e77a:	0f 84 b4 00 00 00    	je     c000e834 <tcp_input+0x720>
c000e780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e784:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e78a:	85 c0                	test   eax,eax
c000e78c:	74 2e                	je     c000e7bc <tcp_input+0x6a8>
c000e78e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e792:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e798:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e79c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e7a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7a6:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7a9:	6a 00                	push   0x0
c000e7ab:	51                   	push   ecx
c000e7ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7b0:	52                   	push   edx
c000e7b1:	ff d0                	call   eax
c000e7b3:	83 c4 10             	add    esp,0x10
c000e7b6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7ba:	eb 20                	jmp    c000e7dc <tcp_input+0x6c8>
c000e7bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c0:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e7c6:	6a 00                	push   0x0
c000e7c8:	50                   	push   eax
c000e7c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7cd:	6a 00                	push   0x0
c000e7cf:	e8 74 c8 ff ff       	call   c000b048 <tcp_recv_null>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7db:	90                   	nop
c000e7dc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7e1:	85 c0                	test   eax,eax
c000e7e3:	75 13                	jne    c000e7f8 <tcp_input+0x6e4>
c000e7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e9:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e7f3:	eb 3f                	jmp    c000e834 <tcp_input+0x720>
c000e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7fd:	83 f8 f6             	cmp    eax,0xfffffff6
c000e800:	74 0e                	je     c000e810 <tcp_input+0x6fc>
c000e802:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e808:	0f b7 c0             	movzx  eax,ax
c000e80b:	85 c0                	test   eax,eax
c000e80d:	74 25                	je     c000e834 <tcp_input+0x720>
c000e80f:	90                   	nop
c000e810:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e816:	83 c0 01             	add    eax,0x1
c000e819:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e81f:	83 ec 0c             	sub    esp,0xc
c000e822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e826:	e8 e9 9c ff ff       	call   c0008514 <pbuf_free>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	e9 b1 03 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e833:	90                   	nop
c000e834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e838:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e83d:	83 ec 0c             	sub    esp,0xc
c000e840:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e844:	e8 27 ef ff ff       	call   c000d770 <tcp_process>
c000e849:	83 c4 10             	add    esp,0x10
c000e84c:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e850:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e855:	83 f8 f6             	cmp    eax,0xfffffff6
c000e858:	0f 84 9e 02 00 00    	je     c000eafc <tcp_input+0x9e8>
c000e85e:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e863:	0f b6 c0             	movzx  eax,al
c000e866:	83 e0 08             	and    eax,0x8
c000e869:	74 59                	je     c000e8c4 <tcp_input+0x7b0>
c000e86b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86f:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e875:	85 c0                	test   eax,eax
c000e877:	74 1f                	je     c000e898 <tcp_input+0x784>
c000e879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e87d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e883:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e887:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e88a:	83 ec 08             	sub    esp,0x8
c000e88d:	6a f5                	push   0xfffffff5
c000e88f:	52                   	push   edx
c000e890:	ff d0                	call   eax
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	8d 76 00             	lea    esi,[esi+0x0]
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e89f:	68 70 68 03 c0       	push   0xc0036870
c000e8a4:	e8 bb c2 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	83 ec 08             	sub    esp,0x8
c000e8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b3:	6a 02                	push   0x2
c000e8b5:	e8 9a 93 ff ff       	call   c0007c54 <memp_free>
c000e8ba:	83 c4 10             	add    esp,0x10
c000e8bd:	e9 4a 02 00 00       	jmp    c000eb0c <tcp_input+0x9f8>
c000e8c2:	66 90                	xchg   ax,ax
c000e8c4:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e8c9:	0f b6 c0             	movzx  eax,al
c000e8cc:	83 e0 10             	and    eax,0x10
c000e8cf:	74 2b                	je     c000e8fc <tcp_input+0x7e8>
c000e8d1:	83 ec 08             	sub    esp,0x8
c000e8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d8:	68 70 68 03 c0       	push   0xc0036870
c000e8dd:	e8 82 c2 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000e8e2:	83 c4 10             	add    esp,0x10
c000e8e5:	83 ec 08             	sub    esp,0x8
c000e8e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8ec:	6a 02                	push   0x2
c000e8ee:	e8 61 93 ff ff       	call   c0007c54 <memp_free>
c000e8f3:	83 c4 10             	add    esp,0x10
c000e8f6:	e9 11 02 00 00       	jmp    c000eb0c <tcp_input+0x9f8>
c000e8fb:	90                   	nop
c000e8fc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e905:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e908:	0f b7 c0             	movzx  eax,ax
c000e90b:	85 c0                	test   eax,eax
c000e90d:	74 55                	je     c000e964 <tcp_input+0x850>
c000e90f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e913:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e919:	85 c0                	test   eax,eax
c000e91b:	74 2f                	je     c000e94c <tcp_input+0x838>
c000e91d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e921:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e927:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e92b:	8b 52 70             	mov    edx,DWORD PTR [edx+0x70]
c000e92e:	0f b7 ca             	movzx  ecx,dx
c000e931:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e935:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e938:	83 ec 04             	sub    esp,0x4
c000e93b:	51                   	push   ecx
c000e93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e940:	52                   	push   edx
c000e941:	ff d0                	call   eax
c000e943:	83 c4 10             	add    esp,0x10
c000e946:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e94a:	eb 08                	jmp    c000e954 <tcp_input+0x840>
c000e94c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e951:	8d 76 00             	lea    esi,[esi+0x0]
c000e954:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e959:	83 f8 f6             	cmp    eax,0xfffffff6
c000e95c:	0f 84 9e 01 00 00    	je     c000eb00 <tcp_input+0x9ec>
c000e962:	66 90                	xchg   ax,ax
c000e964:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e969:	85 c0                	test   eax,eax
c000e96b:	0f 84 f3 00 00 00    	je     c000ea64 <tcp_input+0x950>
c000e971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e975:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e97b:	85 c0                	test   eax,eax
c000e97d:	74 15                	je     c000e994 <tcp_input+0x880>
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	68 fd 0b 03 c0       	push   0xc0030bfd
c000e987:	68 26 00 03 c0       	push   0xc0030026
c000e98c:	e8 33 15 01 00       	call   c001fec4 <CPrintf>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e998:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e99b:	0f b6 c0             	movzx  eax,al
c000e99e:	83 e0 10             	and    eax,0x10
c000e9a1:	74 25                	je     c000e9c8 <tcp_input+0x8b4>
c000e9a3:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e9a8:	83 ec 0c             	sub    esp,0xc
c000e9ab:	50                   	push   eax
c000e9ac:	e8 63 9b ff ff       	call   c0008514 <pbuf_free>
c000e9b1:	83 c4 10             	add    esp,0x10
c000e9b4:	83 ec 0c             	sub    esp,0xc
c000e9b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9bb:	e8 80 ca ff ff       	call   c000b440 <tcp_abort>
c000e9c0:	83 c4 10             	add    esp,0x10
c000e9c3:	e9 44 01 00 00       	jmp    c000eb0c <tcp_input+0x9f8>
c000e9c8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e9cd:	0f b6 c0             	movzx  eax,al
c000e9d0:	83 e0 08             	and    eax,0x8
c000e9d3:	74 13                	je     c000e9e8 <tcp_input+0x8d4>
c000e9d5:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e9da:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e9dd:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e9e2:	83 ca 01             	or     edx,0x1
c000e9e5:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e9e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ec:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e9f2:	85 c0                	test   eax,eax
c000e9f4:	74 2a                	je     c000ea20 <tcp_input+0x90c>
c000e9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9fa:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea00:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000ea06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea0a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ea0d:	6a 00                	push   0x0
c000ea0f:	51                   	push   ecx
c000ea10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea14:	52                   	push   edx
c000ea15:	ff d0                	call   eax
c000ea17:	83 c4 10             	add    esp,0x10
c000ea1a:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea1e:	eb 1c                	jmp    c000ea3c <tcp_input+0x928>
c000ea20:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000ea25:	6a 00                	push   0x0
c000ea27:	50                   	push   eax
c000ea28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea2c:	6a 00                	push   0x0
c000ea2e:	e8 15 c6 ff ff       	call   c000b048 <tcp_recv_null>
c000ea33:	83 c4 10             	add    esp,0x10
c000ea36:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea3a:	66 90                	xchg   ax,ax
c000ea3c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea41:	83 f8 f6             	cmp    eax,0xfffffff6
c000ea44:	0f 84 ba 00 00 00    	je     c000eb04 <tcp_input+0x9f0>
c000ea4a:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea4f:	85 c0                	test   eax,eax
c000ea51:	74 11                	je     c000ea64 <tcp_input+0x950>
c000ea53:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000ea59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea5d:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000ea63:	90                   	nop
c000ea64:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000ea69:	0f b6 c0             	movzx  eax,al
c000ea6c:	83 e0 20             	and    eax,0x20
c000ea6f:	74 6f                	je     c000eae0 <tcp_input+0x9cc>
c000ea71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea75:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea78:	0f b7 c0             	movzx  eax,ax
c000ea7b:	3d 60 08 00 00       	cmp    eax,0x860
c000ea80:	74 16                	je     c000ea98 <tcp_input+0x984>
c000ea82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea86:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea89:	83 c0 01             	add    eax,0x1
c000ea8c:	89 c2                	mov    edx,eax
c000ea8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea92:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000ea96:	66 90                	xchg   ax,ax
c000ea98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000eaa2:	85 c0                	test   eax,eax
c000eaa4:	74 26                	je     c000eacc <tcp_input+0x9b8>
c000eaa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaaa:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000eab0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eab4:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000eab7:	6a 00                	push   0x0
c000eab9:	6a 00                	push   0x0
c000eabb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eabf:	52                   	push   edx
c000eac0:	ff d0                	call   eax
c000eac2:	83 c4 10             	add    esp,0x10
c000eac5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000eac9:	eb 09                	jmp    c000ead4 <tcp_input+0x9c0>
c000eacb:	90                   	nop
c000eacc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000ead1:	8d 76 00             	lea    esi,[esi+0x0]
c000ead4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ead9:	83 f8 f6             	cmp    eax,0xfffffff6
c000eadc:	74 2a                	je     c000eb08 <tcp_input+0x9f4>
c000eade:	66 90                	xchg   ax,ax
c000eae0:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000eaea:	83 ec 0c             	sub    esp,0xc
c000eaed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eaf1:	e8 be 15 00 00       	call   c00100b4 <tcp_output>
c000eaf6:	83 c4 10             	add    esp,0x10
c000eaf9:	eb 11                	jmp    c000eb0c <tcp_input+0x9f8>
c000eafb:	90                   	nop
c000eafc:	90                   	nop
c000eafd:	eb 0d                	jmp    c000eb0c <tcp_input+0x9f8>
c000eaff:	90                   	nop
c000eb00:	90                   	nop
c000eb01:	eb 09                	jmp    c000eb0c <tcp_input+0x9f8>
c000eb03:	90                   	nop
c000eb04:	90                   	nop
c000eb05:	eb 05                	jmp    c000eb0c <tcp_input+0x9f8>
c000eb07:	90                   	nop
c000eb08:	90                   	nop
c000eb09:	8d 76 00             	lea    esi,[esi+0x0]
c000eb0c:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000eb16:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000eb20:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eb25:	85 c0                	test   eax,eax
c000eb27:	0f 84 b7 00 00 00    	je     c000ebe4 <tcp_input+0xad0>
c000eb2d:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eb32:	83 ec 0c             	sub    esp,0xc
c000eb35:	50                   	push   eax
c000eb36:	e8 d9 99 ff ff       	call   c0008514 <pbuf_free>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000eb48:	e9 97 00 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000eb4d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb50:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb55:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000eb59:	0f b7 c0             	movzx  eax,ax
c000eb5c:	83 ec 0c             	sub    esp,0xc
c000eb5f:	50                   	push   eax
c000eb60:	e8 b7 20 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eb65:	83 c4 10             	add    esp,0x10
c000eb68:	0f b7 c0             	movzx  eax,ax
c000eb6b:	83 e0 04             	and    eax,0x4
c000eb6e:	75 64                	jne    c000ebd4 <tcp_input+0xac0>
c000eb70:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000eb76:	83 c0 01             	add    eax,0x1
c000eb79:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000eb7f:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000eb85:	83 c0 01             	add    eax,0x1
c000eb88:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000eb8e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb93:	66 8b 00             	mov    ax,WORD PTR [eax]
c000eb96:	0f b7 c8             	movzx  ecx,ax
c000eb99:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb9e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000eba2:	0f b7 d0             	movzx  edx,ax
c000eba5:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ebab:	0f b7 d8             	movzx  ebx,ax
c000ebae:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ebb3:	01 c3                	add    ebx,eax
c000ebb5:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ebba:	83 ec 08             	sub    esp,0x8
c000ebbd:	51                   	push   ecx
c000ebbe:	52                   	push   edx
c000ebbf:	68 90 68 03 c0       	push   0xc0036890
c000ebc4:	68 98 68 03 c0       	push   0xc0036898
c000ebc9:	53                   	push   ebx
c000ebca:	50                   	push   eax
c000ebcb:	e8 70 19 00 00       	call   c0010540 <tcp_rst>
c000ebd0:	83 c4 20             	add    esp,0x20
c000ebd3:	90                   	nop
c000ebd4:	83 ec 0c             	sub    esp,0xc
c000ebd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebdb:	e8 34 99 ff ff       	call   c0008514 <pbuf_free>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	90                   	nop
c000ebe4:	83 c4 18             	add    esp,0x18
c000ebe7:	5b                   	pop    ebx
c000ebe8:	c3                   	ret    
c000ebe9:	66 90                	xchg   ax,ax
c000ebeb:	90                   	nop

c000ebec <tcp_output_alloc_header>:
c000ebec:	83 ec 2c             	sub    esp,0x2c
c000ebef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebf7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ebfc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ec01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec09:	01 d0                	add    eax,edx
c000ec0b:	83 c0 14             	add    eax,0x14
c000ec0e:	0f b7 c0             	movzx  eax,ax
c000ec11:	83 ec 04             	sub    esp,0x4
c000ec14:	6a 00                	push   0x0
c000ec16:	50                   	push   eax
c000ec17:	6a 01                	push   0x1
c000ec19:	e8 d2 9a ff ff       	call   c00086f0 <pbuf_alloc>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec25:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ec2a:	0f 84 18 01 00 00    	je     c000ed48 <tcp_output_alloc_header+0x15c>
c000ec30:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ec35:	8d 50 13             	lea    edx,[eax+0x13]
c000ec38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ec3c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ec40:	0f b7 c0             	movzx  eax,ax
c000ec43:	39 c2                	cmp    edx,eax
c000ec45:	7c 15                	jl     c000ec5c <tcp_output_alloc_header+0x70>
c000ec47:	83 ec 08             	sub    esp,0x8
c000ec4a:	68 40 0c 03 c0       	push   0xc0030c40
c000ec4f:	68 26 00 03 c0       	push   0xc0030026
c000ec54:	e8 6b 12 01 00       	call   c001fec4 <CPrintf>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ec60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ec6e:	0f b7 c0             	movzx  eax,ax
c000ec71:	83 ec 0c             	sub    esp,0xc
c000ec74:	50                   	push   eax
c000ec75:	e8 a2 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec7a:	83 c4 10             	add    esp,0x10
c000ec7d:	89 c2                	mov    edx,eax
c000ec7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec83:	66 89 10             	mov    WORD PTR [eax],dx
c000ec86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec8a:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec8e:	0f b7 c0             	movzx  eax,ax
c000ec91:	83 ec 0c             	sub    esp,0xc
c000ec94:	50                   	push   eax
c000ec95:	e8 82 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec9a:	83 c4 10             	add    esp,0x10
c000ec9d:	89 c2                	mov    edx,eax
c000ec9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000eca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ecaf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ecb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ecb9:	83 ec 0c             	sub    esp,0xc
c000ecbc:	50                   	push   eax
c000ecbd:	e8 7e 1f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ecc2:	83 c4 10             	add    esp,0x10
c000ecc5:	89 c2                	mov    edx,eax
c000ecc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eccb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ecce:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ecd3:	c1 e8 02             	shr    eax,0x2
c000ecd6:	83 c0 05             	add    eax,0x5
c000ecd9:	c1 e0 0c             	shl    eax,0xc
c000ecdc:	83 c8 10             	or     eax,0x10
c000ecdf:	0f b7 c0             	movzx  eax,ax
c000ece2:	83 ec 0c             	sub    esp,0xc
c000ece5:	50                   	push   eax
c000ece6:	e8 31 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eceb:	83 c4 10             	add    esp,0x10
c000ecee:	89 c2                	mov    edx,eax
c000ecf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecf4:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000ecf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecfc:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ed00:	0f b7 c0             	movzx  eax,ax
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	50                   	push   eax
c000ed07:	e8 10 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ed0c:	83 c4 10             	add    esp,0x10
c000ed0f:	89 c2                	mov    edx,eax
c000ed11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed15:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c000ed19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed1d:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ed23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed27:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ed2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed31:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ed34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed38:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ed3c:	0f b7 c0             	movzx  eax,ax
c000ed3f:	01 c2                	add    edx,eax
c000ed41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed45:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ed48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ed4c:	83 c4 2c             	add    esp,0x2c
c000ed4f:	c3                   	ret    

c000ed50 <tcp_create_segment>:
c000ed50:	53                   	push   ebx
c000ed51:	83 ec 28             	sub    esp,0x28
c000ed54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed58:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed5c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed60:	88 d0                	mov    al,dl
c000ed62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ed66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ed6b:	c1 e0 02             	shl    eax,0x2
c000ed6e:	83 e0 04             	and    eax,0x4
c000ed71:	88 c2                	mov    dl,al
c000ed73:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ed78:	83 e0 02             	and    eax,0x2
c000ed7b:	74 07                	je     c000ed84 <tcp_create_segment+0x34>
c000ed7d:	b0 0c                	mov    al,0xc
c000ed7f:	eb 07                	jmp    c000ed88 <tcp_create_segment+0x38>
c000ed81:	8d 76 00             	lea    esi,[esi+0x0]
c000ed84:	b0 00                	mov    al,0x0
c000ed86:	66 90                	xchg   ax,ax
c000ed88:	01 d0                	add    eax,edx
c000ed8a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ed8e:	83 ec 0c             	sub    esp,0xc
c000ed91:	6a 04                	push   0x4
c000ed93:	e8 90 8d ff ff       	call   c0007b28 <memp_malloc>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed9f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eda4:	75 1a                	jne    c000edc0 <tcp_create_segment+0x70>
c000eda6:	83 ec 0c             	sub    esp,0xc
c000eda9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000edad:	e8 62 97 ff ff       	call   c0008514 <pbuf_free>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	b8 00 00 00 00       	mov    eax,0x0
c000edba:	e9 31 01 00 00       	jmp    c000eef0 <tcp_create_segment+0x1a0>
c000edbf:	90                   	nop
c000edc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc4:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000edc8:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000edcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ede0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ede4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ede7:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000edec:	89 d1                	mov    ecx,edx
c000edee:	29 c1                	sub    ecx,eax
c000edf0:	89 c8                	mov    eax,ecx
c000edf2:	89 c2                	mov    edx,eax
c000edf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edf8:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000edfc:	83 ec 08             	sub    esp,0x8
c000edff:	6a 14                	push   0x14
c000ee01:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ee05:	e8 6a 95 ff ff       	call   c0008374 <pbuf_header>
c000ee0a:	83 c4 10             	add    esp,0x10
c000ee0d:	0f b6 c0             	movzx  eax,al
c000ee10:	85 c0                	test   eax,eax
c000ee12:	74 28                	je     c000ee3c <tcp_create_segment+0xec>
c000ee14:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ee1a:	83 c0 01             	add    eax,0x1
c000ee1d:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000ee23:	83 ec 0c             	sub    esp,0xc
c000ee26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ee2a:	e8 71 b3 ff ff       	call   c000a1a0 <tcp_seg_free>
c000ee2f:	83 c4 10             	add    esp,0x10
c000ee32:	b8 00 00 00 00       	mov    eax,0x0
c000ee37:	e9 b4 00 00 00       	jmp    c000eef0 <tcp_create_segment+0x1a0>
c000ee3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ee46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee4a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ee4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ee54:	0f b7 c0             	movzx  eax,ax
c000ee57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee5b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee5e:	83 ec 0c             	sub    esp,0xc
c000ee61:	50                   	push   eax
c000ee62:	e8 b5 1d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ee67:	83 c4 10             	add    esp,0x10
c000ee6a:	66 89 03             	mov    WORD PTR [ebx],ax
c000ee6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee71:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ee75:	0f b7 c0             	movzx  eax,ax
c000ee78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee7c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee7f:	83 ec 0c             	sub    esp,0xc
c000ee82:	50                   	push   eax
c000ee83:	e8 94 1d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ee88:	83 c4 10             	add    esp,0x10
c000ee8b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ee8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee93:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee96:	83 ec 0c             	sub    esp,0xc
c000ee99:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ee9d:	e8 9e 1d ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000eea2:	83 c4 10             	add    esp,0x10
c000eea5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000eea8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eead:	c1 e8 02             	shr    eax,0x2
c000eeb0:	0f b6 c0             	movzx  eax,al
c000eeb3:	83 c0 05             	add    eax,0x5
c000eeb6:	c1 e0 0c             	shl    eax,0xc
c000eeb9:	89 c2                	mov    edx,eax
c000eebb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000eec0:	09 d0                	or     eax,edx
c000eec2:	0f b7 c0             	movzx  eax,ax
c000eec5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eec9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000eecc:	83 ec 0c             	sub    esp,0xc
c000eecf:	50                   	push   eax
c000eed0:	e8 47 1d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eed5:	83 c4 10             	add    esp,0x10
c000eed8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000eedc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eee0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eee3:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eee9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eeed:	8d 76 00             	lea    esi,[esi+0x0]
c000eef0:	83 c4 28             	add    esp,0x28
c000eef3:	5b                   	pop    ebx
c000eef4:	c3                   	ret    
c000eef5:	8d 76 00             	lea    esi,[esi+0x0]

c000eef8 <tcp_pbuf_prealloc>:
c000eef8:	53                   	push   ebx
c000eef9:	83 ec 28             	sub    esp,0x28
c000eefc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ef00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef04:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ef08:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ef0c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ef11:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ef16:	88 d8                	mov    al,bl
c000ef18:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ef1c:	88 c8                	mov    al,cl
c000ef1e:	88 04 24             	mov    BYTE PTR [esp],al
c000ef21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef25:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef2a:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ef2f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef34:	39 c2                	cmp    edx,eax
c000ef36:	73 64                	jae    c000ef9c <tcp_pbuf_prealloc+0xa4>
c000ef38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ef3d:	83 e0 02             	and    eax,0x2
c000ef40:	75 2e                	jne    c000ef70 <tcp_pbuf_prealloc+0x78>
c000ef42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef46:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ef49:	0f b6 c0             	movzx  eax,al
c000ef4c:	83 e0 40             	and    eax,0x40
c000ef4f:	75 4b                	jne    c000ef9c <tcp_pbuf_prealloc+0xa4>
c000ef51:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ef55:	85 c0                	test   eax,eax
c000ef57:	74 17                	je     c000ef70 <tcp_pbuf_prealloc+0x78>
c000ef59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef5d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef60:	85 c0                	test   eax,eax
c000ef62:	75 0c                	jne    c000ef70 <tcp_pbuf_prealloc+0x78>
c000ef64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef68:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ef6b:	85 c0                	test   eax,eax
c000ef6d:	74 2d                	je     c000ef9c <tcp_pbuf_prealloc+0xa4>
c000ef6f:	90                   	nop
c000ef70:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ef75:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ef7b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef80:	39 c2                	cmp    edx,eax
c000ef82:	7d 0c                	jge    c000ef90 <tcp_pbuf_prealloc+0x98>
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	05 18 02 00 00       	add    eax,0x218
c000ef8d:	eb 05                	jmp    c000ef94 <tcp_pbuf_prealloc+0x9c>
c000ef8f:	90                   	nop
c000ef90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef94:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef99:	8d 76 00             	lea    esi,[esi+0x0]
c000ef9c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000efa1:	83 ec 04             	sub    esp,0x4
c000efa4:	6a 00                	push   0x0
c000efa6:	50                   	push   eax
c000efa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000efab:	e8 40 97 ff ff       	call   c00086f0 <pbuf_alloc>
c000efb0:	83 c4 10             	add    esp,0x10
c000efb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efb7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efbc:	75 0a                	jne    c000efc8 <tcp_pbuf_prealloc+0xd0>
c000efbe:	b8 00 00 00 00       	mov    eax,0x0
c000efc3:	eb 5f                	jmp    c000f024 <tcp_pbuf_prealloc+0x12c>
c000efc5:	8d 76 00             	lea    esi,[esi+0x0]
c000efc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000efce:	85 c0                	test   eax,eax
c000efd0:	74 16                	je     c000efe8 <tcp_pbuf_prealloc+0xf0>
c000efd2:	83 ec 08             	sub    esp,0x8
c000efd5:	68 c4 0e 03 c0       	push   0xc0030ec4
c000efda:	68 26 00 03 c0       	push   0xc0030026
c000efdf:	e8 e0 0e 01 00       	call   c001fec4 <CPrintf>
c000efe4:	83 c4 10             	add    esp,0x10
c000efe7:	90                   	nop
c000efe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efec:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000eff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eff4:	89 d1                	mov    ecx,edx
c000eff6:	29 c1                	sub    ecx,eax
c000eff8:	89 c8                	mov    eax,ecx
c000effa:	89 c2                	mov    edx,eax
c000effc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f000:	66 89 10             	mov    WORD PTR [eax],dx
c000f003:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f007:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f00b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f00f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f013:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f016:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f01a:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f01e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f022:	66 90                	xchg   ax,ax
c000f024:	83 c4 28             	add    esp,0x28
c000f027:	5b                   	pop    ebx
c000f028:	c3                   	ret    
c000f029:	8d 76 00             	lea    esi,[esi+0x0]

c000f02c <tcp_write_checks>:
c000f02c:	83 ec 1c             	sub    esp,0x1c
c000f02f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f033:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f03f:	83 f8 04             	cmp    eax,0x4
c000f042:	74 2c                	je     c000f070 <tcp_write_checks+0x44>
c000f044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f048:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f04b:	83 f8 07             	cmp    eax,0x7
c000f04e:	74 20                	je     c000f070 <tcp_write_checks+0x44>
c000f050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f057:	83 f8 02             	cmp    eax,0x2
c000f05a:	74 14                	je     c000f070 <tcp_write_checks+0x44>
c000f05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f060:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f063:	83 f8 03             	cmp    eax,0x3
c000f066:	74 08                	je     c000f070 <tcp_write_checks+0x44>
c000f068:	b0 f3                	mov    al,0xf3
c000f06a:	e9 f9 00 00 00       	jmp    c000f168 <tcp_write_checks+0x13c>
c000f06f:	90                   	nop
c000f070:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f075:	85 c0                	test   eax,eax
c000f077:	75 07                	jne    c000f080 <tcp_write_checks+0x54>
c000f079:	b0 00                	mov    al,0x0
c000f07b:	e9 e8 00 00 00       	jmp    c000f168 <tcp_write_checks+0x13c>
c000f080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f084:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f088:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f08d:	0f b7 c0             	movzx  eax,ax
c000f090:	39 c2                	cmp    edx,eax
c000f092:	76 1c                	jbe    c000f0b0 <tcp_write_checks+0x84>
c000f094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f098:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f09b:	83 c8 80             	or     eax,0xffffff80
c000f09e:	88 c2                	mov    dl,al
c000f0a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0a4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f0a7:	b0 ff                	mov    al,0xff
c000f0a9:	e9 ba 00 00 00       	jmp    c000f168 <tcp_write_checks+0x13c>
c000f0ae:	66 90                	xchg   ax,ax
c000f0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0b4:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f0b7:	0f b7 c0             	movzx  eax,ax
c000f0ba:	83 f8 01             	cmp    eax,0x1
c000f0bd:	77 11                	ja     c000f0d0 <tcp_write_checks+0xa4>
c000f0bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0c3:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f0c6:	0f b7 c0             	movzx  eax,ax
c000f0c9:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f0ce:	76 28                	jbe    c000f0f8 <tcp_write_checks+0xcc>
c000f0d0:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f0d6:	83 c0 01             	add    eax,0x1
c000f0d9:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f0df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0e3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f0e6:	83 c8 80             	or     eax,0xffffff80
c000f0e9:	88 c2                	mov    dl,al
c000f0eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0ef:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f0f2:	b0 ff                	mov    al,0xff
c000f0f4:	eb 72                	jmp    c000f168 <tcp_write_checks+0x13c>
c000f0f6:	66 90                	xchg   ax,ax
c000f0f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0fc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f0ff:	0f b7 c0             	movzx  eax,ax
c000f102:	85 c0                	test   eax,eax
c000f104:	74 2e                	je     c000f134 <tcp_write_checks+0x108>
c000f106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f10a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f10d:	85 c0                	test   eax,eax
c000f10f:	75 53                	jne    c000f164 <tcp_write_checks+0x138>
c000f111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f115:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f118:	85 c0                	test   eax,eax
c000f11a:	75 48                	jne    c000f164 <tcp_write_checks+0x138>
c000f11c:	83 ec 08             	sub    esp,0x8
c000f11f:	68 70 0c 03 c0       	push   0xc0030c70
c000f124:	68 26 00 03 c0       	push   0xc0030026
c000f129:	e8 96 0d 01 00       	call   c001fec4 <CPrintf>
c000f12e:	83 c4 10             	add    esp,0x10
c000f131:	eb 31                	jmp    c000f164 <tcp_write_checks+0x138>
c000f133:	90                   	nop
c000f134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f138:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f13b:	85 c0                	test   eax,eax
c000f13d:	75 0d                	jne    c000f14c <tcp_write_checks+0x120>
c000f13f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f143:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f146:	85 c0                	test   eax,eax
c000f148:	74 1a                	je     c000f164 <tcp_write_checks+0x138>
c000f14a:	66 90                	xchg   ax,ax
c000f14c:	83 ec 08             	sub    esp,0x8
c000f14f:	68 ac 0c 03 c0       	push   0xc0030cac
c000f154:	68 26 00 03 c0       	push   0xc0030026
c000f159:	e8 66 0d 01 00       	call   c001fec4 <CPrintf>
c000f15e:	83 c4 10             	add    esp,0x10
c000f161:	8d 76 00             	lea    esi,[esi+0x0]
c000f164:	b0 00                	mov    al,0x0
c000f166:	66 90                	xchg   ax,ax
c000f168:	83 c4 1c             	add    esp,0x1c
c000f16b:	c3                   	ret    

c000f16c <tcp_write>:
c000f16c:	56                   	push   esi
c000f16d:	53                   	push   ebx
c000f16e:	83 ec 54             	sub    esp,0x54
c000f171:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f175:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000f179:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f17e:	88 d0                	mov    al,dl
c000f180:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f184:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f18c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f194:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f19c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f1a4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f1ac:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f1b3:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f1b8:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f1bd:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f1c4:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f1cb:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f1d0:	75 1e                	jne    c000f1f0 <tcp_write+0x84>
c000f1d2:	83 ec 08             	sub    esp,0x8
c000f1d5:	68 e0 0c 03 c0       	push   0xc0030ce0
c000f1da:	68 26 00 03 c0       	push   0xc0030026
c000f1df:	e8 e0 0c 01 00       	call   c001fec4 <CPrintf>
c000f1e4:	83 c4 10             	add    esp,0x10
c000f1e7:	b0 f2                	mov    al,0xf2
c000f1e9:	e9 1e 08 00 00       	jmp    c000fa0c <tcp_write+0x8a0>
c000f1ee:	66 90                	xchg   ax,ax
c000f1f0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f1f5:	83 ec 08             	sub    esp,0x8
c000f1f8:	50                   	push   eax
c000f1f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f1fd:	e8 2a fe ff ff       	call   c000f02c <tcp_write_checks>
c000f202:	83 c4 10             	add    esp,0x10
c000f205:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f209:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f20e:	85 c0                	test   eax,eax
c000f210:	74 0a                	je     c000f21c <tcp_write+0xb0>
c000f212:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f216:	e9 f1 07 00 00       	jmp    c000fa0c <tcp_write+0x8a0>
c000f21b:	90                   	nop
c000f21c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f220:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f223:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f228:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f22c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f22f:	85 c0                	test   eax,eax
c000f231:	0f 84 79 02 00 00    	je     c000f4b0 <tcp_write+0x344>
c000f237:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f23b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f23e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f242:	eb 0c                	jmp    c000f250 <tcp_write+0xe4>
c000f244:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f248:	8b 00                	mov    eax,DWORD PTR [eax]
c000f24a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f24e:	66 90                	xchg   ax,ax
c000f250:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f254:	8b 00                	mov    eax,DWORD PTR [eax]
c000f256:	85 c0                	test   eax,eax
c000f258:	75 ea                	jne    c000f244 <tcp_write+0xd8>
c000f25a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f25e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f261:	0f b6 c0             	movzx  eax,al
c000f264:	c1 e0 02             	shl    eax,0x2
c000f267:	83 e0 04             	and    eax,0x4
c000f26a:	89 c2                	mov    edx,eax
c000f26c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f270:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f273:	0f b6 c0             	movzx  eax,al
c000f276:	83 e0 02             	and    eax,0x2
c000f279:	74 09                	je     c000f284 <tcp_write+0x118>
c000f27b:	b8 0c 00 00 00       	mov    eax,0xc
c000f280:	eb 0a                	jmp    c000f28c <tcp_write+0x120>
c000f282:	66 90                	xchg   ax,ax
c000f284:	b8 00 00 00 00       	mov    eax,0x0
c000f289:	8d 76 00             	lea    esi,[esi+0x0]
c000f28c:	01 d0                	add    eax,edx
c000f28e:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f293:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f297:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f29a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f29e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f2a1:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f2a6:	01 c8                	add    eax,ecx
c000f2a8:	89 d6                	mov    esi,edx
c000f2aa:	29 c6                	sub    esi,eax
c000f2ac:	89 f0                	mov    eax,esi
c000f2ae:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f2b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2b7:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f2bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f2c0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f2c5:	0f b7 c0             	movzx  eax,ax
c000f2c8:	85 c0                	test   eax,eax
c000f2ca:	0f 84 84 00 00 00    	je     c000f354 <tcp_write+0x1e8>
c000f2d0:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f2d5:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f2da:	39 c2                	cmp    edx,eax
c000f2dc:	76 16                	jbe    c000f2f4 <tcp_write+0x188>
c000f2de:	83 ec 08             	sub    esp,0x8
c000f2e1:	68 14 0d 03 c0       	push   0xc0030d14
c000f2e6:	68 26 00 03 c0       	push   0xc0030026
c000f2eb:	e8 d4 0b 01 00       	call   c001fec4 <CPrintf>
c000f2f0:	83 c4 10             	add    esp,0x10
c000f2f3:	90                   	nop
c000f2f4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f2f8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2fc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f305:	0f b7 d8             	movzx  ebx,ax
c000f308:	0f b7 ca             	movzx  ecx,dx
c000f30b:	39 cb                	cmp    ebx,ecx
c000f30d:	76 05                	jbe    c000f314 <tcp_write+0x1a8>
c000f30f:	89 d0                	mov    eax,edx
c000f311:	8d 76 00             	lea    esi,[esi+0x0]
c000f314:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f319:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f31e:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f323:	01 d0                	add    eax,edx
c000f325:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f32a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f32f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f334:	89 d6                	mov    esi,edx
c000f336:	29 c6                	sub    esi,eax
c000f338:	89 f0                	mov    eax,esi
c000f33a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f33f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f343:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f348:	89 d6                	mov    esi,edx
c000f34a:	29 c6                	sub    esi,eax
c000f34c:	89 f0                	mov    eax,esi
c000f34e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f353:	90                   	nop
c000f354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f359:	0f b7 c0             	movzx  eax,ax
c000f35c:	85 c0                	test   eax,eax
c000f35e:	74 24                	je     c000f384 <tcp_write+0x218>
c000f360:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f365:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f36a:	39 c2                	cmp    edx,eax
c000f36c:	74 16                	je     c000f384 <tcp_write+0x218>
c000f36e:	83 ec 08             	sub    esp,0x8
c000f371:	68 d8 0e 03 c0       	push   0xc0030ed8
c000f376:	68 26 00 03 c0       	push   0xc0030026
c000f37b:	e8 44 0b 01 00       	call   c001fec4 <CPrintf>
c000f380:	83 c4 10             	add    esp,0x10
c000f383:	90                   	nop
c000f384:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f389:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f38e:	39 c2                	cmp    edx,eax
c000f390:	0f 83 ca 03 00 00    	jae    c000f760 <tcp_write+0x5f4>
c000f396:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f39b:	85 c0                	test   eax,eax
c000f39d:	0f 84 bd 03 00 00    	je     c000f760 <tcp_write+0x5f4>
c000f3a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f3a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f3aa:	0f b7 c0             	movzx  eax,ax
c000f3ad:	85 c0                	test   eax,eax
c000f3af:	0f 84 ab 03 00 00    	je     c000f760 <tcp_write+0x5f4>
c000f3b5:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f3ba:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f3bf:	29 c2                	sub    edx,eax
c000f3c1:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f3c6:	39 c2                	cmp    edx,eax
c000f3c8:	0f 4e c2             	cmovle eax,edx
c000f3cb:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f3d0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f3d4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f3dd:	83 e0 01             	and    eax,0x1
c000f3e0:	74 62                	je     c000f444 <tcp_write+0x2d8>
c000f3e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f3e7:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f3ec:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f3f1:	83 ec 04             	sub    esp,0x4
c000f3f4:	6a 01                	push   0x1
c000f3f6:	51                   	push   ecx
c000f3f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f3fb:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f3ff:	51                   	push   ecx
c000f400:	52                   	push   edx
c000f401:	50                   	push   eax
c000f402:	6a 03                	push   0x3
c000f404:	e8 ef fa ff ff       	call   c000eef8 <tcp_pbuf_prealloc>
c000f409:	83 c4 20             	add    esp,0x20
c000f40c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f410:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f415:	0f 84 4d 05 00 00    	je     c000f968 <tcp_write+0x7fc>
c000f41b:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f420:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f425:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f429:	01 c1                	add    ecx,eax
c000f42b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f42f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f432:	83 ec 04             	sub    esp,0x4
c000f435:	52                   	push   edx
c000f436:	51                   	push   ecx
c000f437:	50                   	push   eax
c000f438:	e8 3d 0f ff ff       	call   c000037a <memcpy>
c000f43d:	83 c4 10             	add    esp,0x10
c000f440:	eb 3a                	jmp    c000f47c <tcp_write+0x310>
c000f442:	66 90                	xchg   ax,ax
c000f444:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f449:	83 ec 04             	sub    esp,0x4
c000f44c:	6a 01                	push   0x1
c000f44e:	50                   	push   eax
c000f44f:	6a 03                	push   0x3
c000f451:	e8 9a 92 ff ff       	call   c00086f0 <pbuf_alloc>
c000f456:	83 c4 10             	add    esp,0x10
c000f459:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f45d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f462:	0f 84 04 05 00 00    	je     c000f96c <tcp_write+0x800>
c000f468:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f46d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f471:	01 c2                	add    edx,eax
c000f473:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f477:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f47a:	66 90                	xchg   ax,ax
c000f47c:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f481:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f485:	01 d0                	add    eax,edx
c000f487:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f48c:	83 ec 0c             	sub    esp,0xc
c000f48f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f493:	e8 58 98 ff ff       	call   c0008cf0 <pbuf_clen>
c000f498:	83 c4 10             	add    esp,0x10
c000f49b:	0f b6 c0             	movzx  eax,al
c000f49e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f4a2:	01 d0                	add    eax,edx
c000f4a4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f4a9:	e9 b2 02 00 00       	jmp    c000f760 <tcp_write+0x5f4>
c000f4ae:	66 90                	xchg   ax,ax
c000f4b0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4b4:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f4b8:	0f b7 c0             	movzx  eax,ax
c000f4bb:	85 c0                	test   eax,eax
c000f4bd:	0f 84 9d 02 00 00    	je     c000f760 <tcp_write+0x5f4>
c000f4c3:	83 ec 08             	sub    esp,0x8
c000f4c6:	68 34 0d 03 c0       	push   0xc0030d34
c000f4cb:	68 26 00 03 c0       	push   0xc0030026
c000f4d0:	e8 ef 09 01 00       	call   c001fec4 <CPrintf>
c000f4d5:	83 c4 10             	add    esp,0x10
c000f4d8:	e9 83 02 00 00       	jmp    c000f760 <tcp_write+0x5f4>
c000f4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f4e4:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f4e9:	89 d3                	mov    ebx,edx
c000f4eb:	29 c3                	sub    ebx,eax
c000f4ed:	89 d8                	mov    eax,ebx
c000f4ef:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f4f4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4f8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f4fb:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f500:	89 d6                	mov    esi,edx
c000f502:	29 c6                	sub    esi,eax
c000f504:	89 f0                	mov    eax,esi
c000f506:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f50b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f50f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f514:	0f b7 d8             	movzx  ebx,ax
c000f517:	0f b7 ca             	movzx  ecx,dx
c000f51a:	39 cb                	cmp    ebx,ecx
c000f51c:	76 02                	jbe    c000f520 <tcp_write+0x3b4>
c000f51e:	89 d0                	mov    eax,edx
c000f520:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f525:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f52a:	83 e0 01             	and    eax,0x1
c000f52d:	0f 84 b1 00 00 00    	je     c000f5e4 <tcp_write+0x478>
c000f533:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f538:	0f 94 c0             	sete   al
c000f53b:	0f b6 d8             	movzx  ebx,al
c000f53e:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f543:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f547:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f54a:	0f b7 d0             	movzx  edx,ax
c000f54d:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f552:	66 8b 74 24 1e       	mov    si,WORD PTR [esp+0x1e]
c000f557:	01 f0                	add    eax,esi
c000f559:	0f b7 c0             	movzx  eax,ax
c000f55c:	83 ec 04             	sub    esp,0x4
c000f55f:	53                   	push   ebx
c000f560:	51                   	push   ecx
c000f561:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f565:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f569:	51                   	push   ecx
c000f56a:	52                   	push   edx
c000f56b:	50                   	push   eax
c000f56c:	6a 00                	push   0x0
c000f56e:	e8 85 f9 ff ff       	call   c000eef8 <tcp_pbuf_prealloc>
c000f573:	83 c4 20             	add    esp,0x20
c000f576:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f57a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f57f:	0f 84 eb 03 00 00    	je     c000f970 <tcp_write+0x804>
c000f585:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f589:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f58d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f592:	0f b7 c0             	movzx  eax,ax
c000f595:	39 c2                	cmp    edx,eax
c000f597:	76 17                	jbe    c000f5b0 <tcp_write+0x444>
c000f599:	83 ec 08             	sub    esp,0x8
c000f59c:	68 64 0d 03 c0       	push   0xc0030d64
c000f5a1:	68 26 00 03 c0       	push   0xc0030026
c000f5a6:	e8 19 09 01 00       	call   c001fec4 <CPrintf>
c000f5ab:	83 c4 10             	add    esp,0x10
c000f5ae:	66 90                	xchg   ax,ax
c000f5b0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f5b5:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f5ba:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f5be:	01 d1                	add    ecx,edx
c000f5c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f5c4:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f5c7:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f5cc:	01 da                	add    edx,ebx
c000f5ce:	83 ec 04             	sub    esp,0x4
c000f5d1:	50                   	push   eax
c000f5d2:	51                   	push   ecx
c000f5d3:	52                   	push   edx
c000f5d4:	e8 a1 0d ff ff       	call   c000037a <memcpy>
c000f5d9:	83 c4 10             	add    esp,0x10
c000f5dc:	e9 a7 00 00 00       	jmp    c000f688 <tcp_write+0x51c>
c000f5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5e4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f5e9:	0f b7 c0             	movzx  eax,ax
c000f5ec:	85 c0                	test   eax,eax
c000f5ee:	74 18                	je     c000f608 <tcp_write+0x49c>
c000f5f0:	83 ec 08             	sub    esp,0x8
c000f5f3:	68 f6 0e 03 c0       	push   0xc0030ef6
c000f5f8:	68 26 00 03 c0       	push   0xc0030026
c000f5fd:	e8 c2 08 01 00       	call   c001fec4 <CPrintf>
c000f602:	83 c4 10             	add    esp,0x10
c000f605:	8d 76 00             	lea    esi,[esi+0x0]
c000f608:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f60d:	83 ec 04             	sub    esp,0x4
c000f610:	6a 01                	push   0x1
c000f612:	50                   	push   eax
c000f613:	6a 00                	push   0x0
c000f615:	e8 d6 90 ff ff       	call   c00086f0 <pbuf_alloc>
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f621:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f626:	0f 84 48 03 00 00    	je     c000f974 <tcp_write+0x808>
c000f62c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f631:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f635:	01 c2                	add    edx,eax
c000f637:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f63b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f63e:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f643:	83 ec 04             	sub    esp,0x4
c000f646:	6a 00                	push   0x0
c000f648:	50                   	push   eax
c000f649:	6a 00                	push   0x0
c000f64b:	e8 a0 90 ff ff       	call   c00086f0 <pbuf_alloc>
c000f650:	83 c4 10             	add    esp,0x10
c000f653:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f657:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f65c:	75 16                	jne    c000f674 <tcp_write+0x508>
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f665:	e8 aa 8e ff ff       	call   c0008514 <pbuf_free>
c000f66a:	83 c4 10             	add    esp,0x10
c000f66d:	e9 0a 03 00 00       	jmp    c000f97c <tcp_write+0x810>
c000f672:	66 90                	xchg   ax,ax
c000f674:	83 ec 08             	sub    esp,0x8
c000f677:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f67b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f67f:	e8 d4 96 ff ff       	call   c0008d58 <pbuf_cat>
c000f684:	83 c4 10             	add    esp,0x10
c000f687:	90                   	nop
c000f688:	83 ec 0c             	sub    esp,0xc
c000f68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f68f:	e8 5c 96 ff ff       	call   c0008cf0 <pbuf_clen>
c000f694:	83 c4 10             	add    esp,0x10
c000f697:	0f b6 c0             	movzx  eax,al
c000f69a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f69e:	01 d0                	add    eax,edx
c000f6a0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f6a5:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f6aa:	83 f8 02             	cmp    eax,0x2
c000f6ad:	77 0d                	ja     c000f6bc <tcp_write+0x550>
c000f6af:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f6b4:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f6b9:	76 15                	jbe    c000f6d0 <tcp_write+0x564>
c000f6bb:	90                   	nop
c000f6bc:	83 ec 0c             	sub    esp,0xc
c000f6bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f6c3:	e8 4c 8e ff ff       	call   c0008514 <pbuf_free>
c000f6c8:	83 c4 10             	add    esp,0x10
c000f6cb:	e9 ac 02 00 00       	jmp    c000f97c <tcp_write+0x810>
c000f6d0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f6d5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f6d9:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f6dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f6e1:	01 ca                	add    edx,ecx
c000f6e3:	83 ec 0c             	sub    esp,0xc
c000f6e6:	50                   	push   eax
c000f6e7:	52                   	push   edx
c000f6e8:	6a 00                	push   0x0
c000f6ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f6ee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f6f2:	e8 59 f6 ff ff       	call   c000ed50 <tcp_create_segment>
c000f6f7:	83 c4 20             	add    esp,0x20
c000f6fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f6fe:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f703:	0f 84 6f 02 00 00    	je     c000f978 <tcp_write+0x80c>
c000f709:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f70e:	75 0c                	jne    c000f71c <tcp_write+0x5b0>
c000f710:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f714:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f718:	eb 2a                	jmp    c000f744 <tcp_write+0x5d8>
c000f71a:	66 90                	xchg   ax,ax
c000f71c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f721:	75 15                	jne    c000f738 <tcp_write+0x5cc>
c000f723:	83 ec 08             	sub    esp,0x8
c000f726:	68 04 0f 03 c0       	push   0xc0030f04
c000f72b:	68 26 00 03 c0       	push   0xc0030026
c000f730:	e8 8f 07 01 00       	call   c001fec4 <CPrintf>
c000f735:	83 c4 10             	add    esp,0x10
c000f738:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f73c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f740:	89 10                	mov    DWORD PTR [eax],edx
c000f742:	66 90                	xchg   ax,ax
c000f744:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f748:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f74c:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f751:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f756:	01 d0                	add    eax,edx
c000f758:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f75d:	8d 76 00             	lea    esi,[esi+0x0]
c000f760:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f765:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f76a:	39 c2                	cmp    edx,eax
c000f76c:	0f 82 6e fd ff ff    	jb     c000f4e0 <tcp_write+0x374>
c000f772:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f777:	85 c0                	test   eax,eax
c000f779:	0f 84 a1 00 00 00    	je     c000f820 <tcp_write+0x6b4>
c000f77f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f783:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f786:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f78a:	eb 74                	jmp    c000f800 <tcp_write+0x694>
c000f78c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f790:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f793:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f798:	01 d0                	add    eax,edx
c000f79a:	89 c2                	mov    edx,eax
c000f79c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7a0:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f7a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7aa:	85 c0                	test   eax,eax
c000f7ac:	75 46                	jne    c000f7f4 <tcp_write+0x688>
c000f7ae:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f7b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7b7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000f7ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7be:	66 8b 52 0a          	mov    dx,WORD PTR [edx+0xa]
c000f7c2:	0f b7 d2             	movzx  edx,dx
c000f7c5:	01 ca                	add    edx,ecx
c000f7c7:	83 ec 04             	sub    esp,0x4
c000f7ca:	50                   	push   eax
c000f7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f7cf:	52                   	push   edx
c000f7d0:	e8 a5 0b ff ff       	call   c000037a <memcpy>
c000f7d5:	83 c4 10             	add    esp,0x10
c000f7d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f7e0:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f7e5:	01 d0                	add    eax,edx
c000f7e7:	89 c2                	mov    edx,eax
c000f7e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ed:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f7f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f7fe:	66 90                	xchg   ax,ax
c000f800:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f805:	75 85                	jne    c000f78c <tcp_write+0x620>
c000f807:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f80b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f80e:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f813:	01 d0                	add    eax,edx
c000f815:	89 c2                	mov    edx,eax
c000f817:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f81b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f81f:	90                   	nop
c000f820:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f825:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f829:	66 89 50 76          	mov    WORD PTR [eax+0x76],dx
c000f82d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f832:	74 50                	je     c000f884 <tcp_write+0x718>
c000f834:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f839:	75 15                	jne    c000f850 <tcp_write+0x6e4>
c000f83b:	83 ec 08             	sub    esp,0x8
c000f83e:	68 a4 0d 03 c0       	push   0xc0030da4
c000f843:	68 26 00 03 c0       	push   0xc0030026
c000f848:	e8 77 06 01 00       	call   c001fec4 <CPrintf>
c000f84d:	83 c4 10             	add    esp,0x10
c000f850:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f854:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f857:	83 ec 08             	sub    esp,0x8
c000f85a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f85e:	50                   	push   eax
c000f85f:	e8 f4 94 ff ff       	call   c0008d58 <pbuf_cat>
c000f864:	83 c4 10             	add    esp,0x10
c000f867:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f86b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f86e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f872:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f875:	01 d0                	add    eax,edx
c000f877:	89 c2                	mov    edx,eax
c000f879:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f87d:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f881:	8d 76 00             	lea    esi,[esi+0x0]
c000f884:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f889:	75 0d                	jne    c000f898 <tcp_write+0x72c>
c000f88b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f88f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f893:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f896:	eb 0c                	jmp    c000f8a4 <tcp_write+0x738>
c000f898:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f89c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f8a0:	89 10                	mov    DWORD PTR [eax],edx
c000f8a2:	66 90                	xchg   ax,ax
c000f8a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8a8:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f8ab:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f8b0:	01 c2                	add    edx,eax
c000f8b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8b6:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f8b9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8bd:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f8c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8c5:	89 d3                	mov    ebx,edx
c000f8c7:	29 c3                	sub    ebx,eax
c000f8c9:	89 d8                	mov    eax,ebx
c000f8cb:	89 c2                	mov    edx,eax
c000f8cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8d1:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000f8d5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8d9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f8dd:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000f8e1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8e5:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f8e8:	0f b7 c0             	movzx  eax,ax
c000f8eb:	85 c0                	test   eax,eax
c000f8ed:	74 2d                	je     c000f91c <tcp_write+0x7b0>
c000f8ef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8f3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f8f6:	85 c0                	test   eax,eax
c000f8f8:	75 22                	jne    c000f91c <tcp_write+0x7b0>
c000f8fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8fe:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f901:	85 c0                	test   eax,eax
c000f903:	75 17                	jne    c000f91c <tcp_write+0x7b0>
c000f905:	83 ec 08             	sub    esp,0x8
c000f908:	68 15 0f 03 c0       	push   0xc0030f15
c000f90d:	68 26 00 03 c0       	push   0xc0030026
c000f912:	e8 ad 05 01 00       	call   c001fec4 <CPrintf>
c000f917:	83 c4 10             	add    esp,0x10
c000f91a:	66 90                	xchg   ax,ax
c000f91c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f921:	74 3d                	je     c000f960 <tcp_write+0x7f4>
c000f923:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f927:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f92a:	85 c0                	test   eax,eax
c000f92c:	74 32                	je     c000f960 <tcp_write+0x7f4>
c000f92e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f933:	83 e0 02             	and    eax,0x2
c000f936:	75 28                	jne    c000f960 <tcp_write+0x7f4>
c000f938:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f93c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f93f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f943:	83 ec 0c             	sub    esp,0xc
c000f946:	6a 08                	push   0x8
c000f948:	e8 cf 12 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	89 c2                	mov    edx,eax
c000f952:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f959:	09 da                	or     edx,ebx
c000f95b:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000f95f:	90                   	nop
c000f960:	b0 00                	mov    al,0x0
c000f962:	e9 a5 00 00 00       	jmp    c000fa0c <tcp_write+0x8a0>
c000f967:	90                   	nop
c000f968:	90                   	nop
c000f969:	eb 11                	jmp    c000f97c <tcp_write+0x810>
c000f96b:	90                   	nop
c000f96c:	90                   	nop
c000f96d:	eb 0d                	jmp    c000f97c <tcp_write+0x810>
c000f96f:	90                   	nop
c000f970:	90                   	nop
c000f971:	eb 09                	jmp    c000f97c <tcp_write+0x810>
c000f973:	90                   	nop
c000f974:	90                   	nop
c000f975:	eb 05                	jmp    c000f97c <tcp_write+0x810>
c000f977:	90                   	nop
c000f978:	90                   	nop
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f980:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f983:	83 c8 80             	or     eax,0xffffff80
c000f986:	88 c2                	mov    dl,al
c000f988:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f98c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f98f:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f995:	83 c0 01             	add    eax,0x1
c000f998:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f99e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f9a3:	74 0f                	je     c000f9b4 <tcp_write+0x848>
c000f9a5:	83 ec 0c             	sub    esp,0xc
c000f9a8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f9ac:	e8 63 8b ff ff       	call   c0008514 <pbuf_free>
c000f9b1:	83 c4 10             	add    esp,0x10
c000f9b4:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f9b9:	74 11                	je     c000f9cc <tcp_write+0x860>
c000f9bb:	83 ec 0c             	sub    esp,0xc
c000f9be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f9c2:	e8 1d a8 ff ff       	call   c000a1e4 <tcp_segs_free>
c000f9c7:	83 c4 10             	add    esp,0x10
c000f9ca:	66 90                	xchg   ax,ax
c000f9cc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9d0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9d3:	0f b7 c0             	movzx  eax,ax
c000f9d6:	85 c0                	test   eax,eax
c000f9d8:	74 2e                	je     c000fa08 <tcp_write+0x89c>
c000f9da:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9de:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f9e1:	85 c0                	test   eax,eax
c000f9e3:	75 23                	jne    c000fa08 <tcp_write+0x89c>
c000f9e5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9e9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9ec:	85 c0                	test   eax,eax
c000f9ee:	75 18                	jne    c000fa08 <tcp_write+0x89c>
c000f9f0:	83 ec 08             	sub    esp,0x8
c000f9f3:	68 15 0f 03 c0       	push   0xc0030f15
c000f9f8:	68 26 00 03 c0       	push   0xc0030026
c000f9fd:	e8 c2 04 01 00       	call   c001fec4 <CPrintf>
c000fa02:	83 c4 10             	add    esp,0x10
c000fa05:	8d 76 00             	lea    esi,[esi+0x0]
c000fa08:	b0 ff                	mov    al,0xff
c000fa0a:	66 90                	xchg   ax,ax
c000fa0c:	83 c4 54             	add    esp,0x54
c000fa0f:	5b                   	pop    ebx
c000fa10:	5e                   	pop    esi
c000fa11:	c3                   	ret    
c000fa12:	66 90                	xchg   ax,ax

c000fa14 <tcp_enqueue_flags>:
c000fa14:	83 ec 3c             	sub    esp,0x3c
c000fa17:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000fa1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000fa1f:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000fa24:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000fa29:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa2e:	83 e0 03             	and    eax,0x3
c000fa31:	75 15                	jne    c000fa48 <tcp_enqueue_flags+0x34>
c000fa33:	83 ec 08             	sub    esp,0x8
c000fa36:	68 dc 0d 03 c0       	push   0xc0030ddc
c000fa3b:	68 26 00 03 c0       	push   0xc0030026
c000fa40:	e8 7f 04 01 00       	call   c001fec4 <CPrintf>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa4c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fa4f:	0f b7 c0             	movzx  eax,ax
c000fa52:	83 f8 01             	cmp    eax,0x1
c000fa55:	77 11                	ja     c000fa68 <tcp_enqueue_flags+0x54>
c000fa57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa5b:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fa5e:	0f b7 c0             	movzx  eax,ax
c000fa61:	3d fc ff 00 00       	cmp    eax,0xfffc
c000fa66:	76 2c                	jbe    c000fa94 <tcp_enqueue_flags+0x80>
c000fa68:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa6e:	83 c0 01             	add    eax,0x1
c000fa71:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fa77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa7b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa7e:	83 c8 80             	or     eax,0xffffff80
c000fa81:	88 c2                	mov    dl,al
c000fa83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa87:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa8a:	b0 ff                	mov    al,0xff
c000fa8c:	e9 6f 02 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000fa91:	8d 76 00             	lea    esi,[esi+0x0]
c000fa94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa99:	83 e0 02             	and    eax,0x2
c000fa9c:	74 06                	je     c000faa4 <tcp_enqueue_flags+0x90>
c000fa9e:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000faa3:	90                   	nop
c000faa4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000faa9:	c1 e0 02             	shl    eax,0x2
c000faac:	83 e0 04             	and    eax,0x4
c000faaf:	88 c2                	mov    dl,al
c000fab1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fab6:	83 e0 02             	and    eax,0x2
c000fab9:	74 05                	je     c000fac0 <tcp_enqueue_flags+0xac>
c000fabb:	b0 0c                	mov    al,0xc
c000fabd:	eb 05                	jmp    c000fac4 <tcp_enqueue_flags+0xb0>
c000fabf:	90                   	nop
c000fac0:	b0 00                	mov    al,0x0
c000fac2:	66 90                	xchg   ax,ax
c000fac4:	01 d0                	add    eax,edx
c000fac6:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000faca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000face:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fad2:	0f b7 c0             	movzx  eax,ax
c000fad5:	85 c0                	test   eax,eax
c000fad7:	75 17                	jne    c000faf0 <tcp_enqueue_flags+0xdc>
c000fad9:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fadf:	83 c0 01             	add    eax,0x1
c000fae2:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fae8:	b0 ff                	mov    al,0xff
c000faea:	e9 11 02 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000faef:	90                   	nop
c000faf0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000faf5:	83 ec 04             	sub    esp,0x4
c000faf8:	6a 00                	push   0x0
c000fafa:	50                   	push   eax
c000fafb:	6a 00                	push   0x0
c000fafd:	e8 ee 8b ff ff       	call   c00086f0 <pbuf_alloc>
c000fb02:	83 c4 10             	add    esp,0x10
c000fb05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb09:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000fb0e:	75 2c                	jne    c000fb3c <tcp_enqueue_flags+0x128>
c000fb10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb14:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb17:	83 c8 80             	or     eax,0xffffff80
c000fb1a:	88 c2                	mov    dl,al
c000fb1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb20:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb23:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fb29:	83 c0 01             	add    eax,0x1
c000fb2c:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fb32:	b0 ff                	mov    al,0xff
c000fb34:	e9 c7 01 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000fb39:	8d 76 00             	lea    esi,[esi+0x0]
c000fb3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb40:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fb44:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fb49:	0f b7 d2             	movzx  edx,dx
c000fb4c:	0f b7 c0             	movzx  eax,ax
c000fb4f:	39 c2                	cmp    edx,eax
c000fb51:	73 15                	jae    c000fb68 <tcp_enqueue_flags+0x154>
c000fb53:	83 ec 08             	sub    esp,0x8
c000fb56:	68 34 0e 03 c0       	push   0xc0030e34
c000fb5b:	68 26 00 03 c0       	push   0xc0030026
c000fb60:	e8 5f 03 01 00       	call   c001fec4 <CPrintf>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000fb6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb71:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000fb74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fb79:	83 ec 0c             	sub    esp,0xc
c000fb7c:	51                   	push   ecx
c000fb7d:	52                   	push   edx
c000fb7e:	50                   	push   eax
c000fb7f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000fb83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000fb87:	e8 c4 f1 ff ff       	call   c000ed50 <tcp_create_segment>
c000fb8c:	83 c4 20             	add    esp,0x20
c000fb8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb93:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fb98:	75 2a                	jne    c000fbc4 <tcp_enqueue_flags+0x1b0>
c000fb9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb9e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fba1:	83 c8 80             	or     eax,0xffffff80
c000fba4:	88 c2                	mov    dl,al
c000fba6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbaa:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fbad:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fbb3:	83 c0 01             	add    eax,0x1
c000fbb6:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fbbc:	b0 ff                	mov    al,0xff
c000fbbe:	e9 3d 01 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000fbc3:	90                   	nop
c000fbc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbcb:	0f b7 c0             	movzx  eax,ax
c000fbce:	85 c0                	test   eax,eax
c000fbd0:	74 16                	je     c000fbe8 <tcp_enqueue_flags+0x1d4>
c000fbd2:	83 ec 08             	sub    esp,0x8
c000fbd5:	68 70 0e 03 c0       	push   0xc0030e70
c000fbda:	68 26 00 03 c0       	push   0xc0030026
c000fbdf:	e8 e0 02 01 00       	call   c001fec4 <CPrintf>
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	90                   	nop
c000fbe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbec:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fbef:	85 c0                	test   eax,eax
c000fbf1:	75 0d                	jne    c000fc00 <tcp_enqueue_flags+0x1ec>
c000fbf3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fbfb:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fbfe:	eb 30                	jmp    c000fc30 <tcp_enqueue_flags+0x21c>
c000fc00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc04:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc0b:	eb 0f                	jmp    c000fc1c <tcp_enqueue_flags+0x208>
c000fc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc14:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc1a:	66 90                	xchg   ax,ax
c000fc1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc20:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc22:	85 c0                	test   eax,eax
c000fc24:	75 ea                	jne    c000fc10 <tcp_enqueue_flags+0x1fc>
c000fc26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fc2e:	89 10                	mov    DWORD PTR [eax],edx
c000fc30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc34:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fc3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fc3f:	83 e0 02             	and    eax,0x2
c000fc42:	75 0c                	jne    c000fc50 <tcp_enqueue_flags+0x23c>
c000fc44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fc49:	83 e0 01             	and    eax,0x1
c000fc4c:	74 2a                	je     c000fc78 <tcp_enqueue_flags+0x264>
c000fc4e:	66 90                	xchg   ax,ax
c000fc50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc54:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fc57:	8d 50 01             	lea    edx,[eax+0x1]
c000fc5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc5e:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fc61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc65:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fc69:	83 e8 01             	sub    eax,0x1
c000fc6c:	89 c2                	mov    edx,eax
c000fc6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc72:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000fc76:	66 90                	xchg   ax,ax
c000fc78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fc7d:	83 e0 01             	and    eax,0x1
c000fc80:	74 16                	je     c000fc98 <tcp_enqueue_flags+0x284>
c000fc82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc86:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fc89:	83 c8 20             	or     eax,0x20
c000fc8c:	88 c2                	mov    dl,al
c000fc8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc92:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc95:	8d 76 00             	lea    esi,[esi+0x0]
c000fc98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc9f:	83 ec 0c             	sub    esp,0xc
c000fca2:	50                   	push   eax
c000fca3:	e8 48 90 ff ff       	call   c0008cf0 <pbuf_clen>
c000fca8:	83 c4 10             	add    esp,0x10
c000fcab:	88 c1                	mov    cl,al
c000fcad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcb1:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fcb4:	0f b6 c1             	movzx  eax,cl
c000fcb7:	01 d0                	add    eax,edx
c000fcb9:	89 c2                	mov    edx,eax
c000fcbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcbf:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000fcc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcc7:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fcca:	0f b7 c0             	movzx  eax,ax
c000fccd:	85 c0                	test   eax,eax
c000fccf:	74 2b                	je     c000fcfc <tcp_enqueue_flags+0x2e8>
c000fcd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcd5:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fcd8:	85 c0                	test   eax,eax
c000fcda:	75 20                	jne    c000fcfc <tcp_enqueue_flags+0x2e8>
c000fcdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fce0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fce3:	85 c0                	test   eax,eax
c000fce5:	75 15                	jne    c000fcfc <tcp_enqueue_flags+0x2e8>
c000fce7:	83 ec 08             	sub    esp,0x8
c000fcea:	68 9c 0e 03 c0       	push   0xc0030e9c
c000fcef:	68 26 00 03 c0       	push   0xc0030026
c000fcf4:	e8 cb 01 01 00       	call   c001fec4 <CPrintf>
c000fcf9:	83 c4 10             	add    esp,0x10
c000fcfc:	b0 00                	mov    al,0x0
c000fcfe:	66 90                	xchg   ax,ax
c000fd00:	83 c4 3c             	add    esp,0x3c
c000fd03:	c3                   	ret    

c000fd04 <tcp_send_fin>:
c000fd04:	53                   	push   ebx
c000fd05:	83 ec 18             	sub    esp,0x18
c000fd08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd0c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fd0f:	85 c0                	test   eax,eax
c000fd11:	74 71                	je     c000fd84 <tcp_send_fin+0x80>
c000fd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd17:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fd1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd1e:	eb 0c                	jmp    c000fd2c <tcp_send_fin+0x28>
c000fd20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd24:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd2a:	66 90                	xchg   ax,ax
c000fd2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd30:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd32:	85 c0                	test   eax,eax
c000fd34:	75 ea                	jne    c000fd20 <tcp_send_fin+0x1c>
c000fd36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd3d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fd41:	0f b7 c0             	movzx  eax,ax
c000fd44:	83 ec 0c             	sub    esp,0xc
c000fd47:	50                   	push   eax
c000fd48:	e8 cf 0e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fd4d:	83 c4 10             	add    esp,0x10
c000fd50:	0f b7 c0             	movzx  eax,ax
c000fd53:	83 e0 07             	and    eax,0x7
c000fd56:	75 2c                	jne    c000fd84 <tcp_send_fin+0x80>
c000fd58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd5f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fd63:	83 ec 0c             	sub    esp,0xc
c000fd66:	6a 01                	push   0x1
c000fd68:	e8 af 0e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	89 c2                	mov    edx,eax
c000fd72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd79:	09 da                	or     edx,ebx
c000fd7b:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000fd7f:	b0 00                	mov    al,0x0
c000fd81:	eb 15                	jmp    c000fd98 <tcp_send_fin+0x94>
c000fd83:	90                   	nop
c000fd84:	83 ec 08             	sub    esp,0x8
c000fd87:	6a 01                	push   0x1
c000fd89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd8d:	e8 82 fc ff ff       	call   c000fa14 <tcp_enqueue_flags>
c000fd92:	83 c4 10             	add    esp,0x10
c000fd95:	8d 76 00             	lea    esi,[esi+0x0]
c000fd98:	83 c4 18             	add    esp,0x18
c000fd9b:	5b                   	pop    ebx
c000fd9c:	c3                   	ret    
c000fd9d:	8d 76 00             	lea    esi,[esi+0x0]

c000fda0 <tcp_send_empty_ack>:
c000fda0:	53                   	push   ebx
c000fda1:	83 ec 18             	sub    esp,0x18
c000fda4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fda9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdad:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	50                   	push   eax
c000fdb4:	e8 87 0e ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fdb9:	83 c4 10             	add    esp,0x10
c000fdbc:	89 c2                	mov    edx,eax
c000fdbe:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fdc3:	52                   	push   edx
c000fdc4:	6a 00                	push   0x0
c000fdc6:	50                   	push   eax
c000fdc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdcb:	e8 1c ee ff ff       	call   c000ebec <tcp_output_alloc_header>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdd7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fddc:	75 0a                	jne    c000fde8 <tcp_send_empty_ack+0x48>
c000fdde:	b0 fe                	mov    al,0xfe
c000fde0:	e9 9b 00 00 00       	jmp    c000fe80 <tcp_send_empty_ack+0xe0>
c000fde5:	8d 76 00             	lea    esi,[esi+0x0]
c000fde8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fdf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdf7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdfa:	83 e0 fc             	and    eax,0xfffffffc
c000fdfd:	88 c2                	mov    dl,al
c000fdff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe03:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fe06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe0d:	0f b7 d0             	movzx  edx,ax
c000fe10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe14:	8d 48 04             	lea    ecx,[eax+0x4]
c000fe17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe1b:	83 ec 0c             	sub    esp,0xc
c000fe1e:	52                   	push   edx
c000fe1f:	6a 06                	push   0x6
c000fe21:	51                   	push   ecx
c000fe22:	50                   	push   eax
c000fe23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe27:	e8 a4 35 00 00       	call   c00133d0 <inet_chksum_pseudo>
c000fe2c:	83 c4 20             	add    esp,0x20
c000fe2f:	89 c2                	mov    edx,eax
c000fe31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe35:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c000fe39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe3d:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fe40:	0f b6 c8             	movzx  ecx,al
c000fe43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe47:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe4a:	0f b6 d0             	movzx  edx,al
c000fe4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe51:	8d 58 04             	lea    ebx,[eax+0x4]
c000fe54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe58:	83 ec 08             	sub    esp,0x8
c000fe5b:	6a 06                	push   0x6
c000fe5d:	51                   	push   ecx
c000fe5e:	52                   	push   edx
c000fe5f:	53                   	push   ebx
c000fe60:	50                   	push   eax
c000fe61:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe65:	e8 a6 41 00 00       	call   c0014010 <ip_output>
c000fe6a:	83 c4 20             	add    esp,0x20
c000fe6d:	83 ec 0c             	sub    esp,0xc
c000fe70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe74:	e8 9b 86 ff ff       	call   c0008514 <pbuf_free>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	b0 00                	mov    al,0x0
c000fe7e:	66 90                	xchg   ax,ax
c000fe80:	83 c4 18             	add    esp,0x18
c000fe83:	5b                   	pop    ebx
c000fe84:	c3                   	ret    
c000fe85:	8d 76 00             	lea    esi,[esi+0x0]

c000fe88 <tcp_output_segment>:
c000fe88:	56                   	push   esi
c000fe89:	53                   	push   ebx
c000fe8a:	83 ec 14             	sub    esp,0x14
c000fe8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe91:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fe94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe98:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe9b:	83 ec 0c             	sub    esp,0xc
c000fe9e:	50                   	push   eax
c000fe9f:	e8 9c 0d ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000feaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feae:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000feb2:	0f b7 c0             	movzx  eax,ax
c000feb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000feb9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	50                   	push   eax
c000fec0:	e8 57 0d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fecc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fed0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fed3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fed7:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fedb:	0f b7 c0             	movzx  eax,ax
c000fede:	01 c2                	add    edx,eax
c000fee0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feeb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feee:	83 c0 14             	add    eax,0x14
c000fef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fef9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fefc:	0f b6 c0             	movzx  eax,al
c000feff:	83 e0 01             	and    eax,0x1
c000ff02:	74 10                	je     c000ff14 <tcp_output_segment+0x8c>
c000ff04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff08:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000ff0e:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000ff13:	90                   	nop
c000ff14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff18:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000ff1c:	98                   	cwde   
c000ff1d:	83 f8 ff             	cmp    eax,0xffffffff
c000ff20:	75 0a                	jne    c000ff2c <tcp_output_segment+0xa4>
c000ff22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff26:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000ff2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff30:	85 c0                	test   eax,eax
c000ff32:	74 0c                	je     c000ff40 <tcp_output_segment+0xb8>
c000ff34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff38:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff3a:	85 c0                	test   eax,eax
c000ff3c:	75 32                	jne    c000ff70 <tcp_output_segment+0xe8>
c000ff3e:	66 90                	xchg   ax,ax
c000ff40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff44:	83 c0 04             	add    eax,0x4
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	50                   	push   eax
c000ff4b:	e8 0c 39 00 00       	call   c001385c <ip_route>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff57:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ff5c:	0f 84 46 01 00 00    	je     c00100a8 <tcp_output_segment+0x220>
c000ff62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff66:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ff69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff6d:	89 10                	mov    DWORD PTR [eax],edx
c000ff6f:	90                   	nop
c000ff70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff74:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff77:	85 c0                	test   eax,eax
c000ff79:	75 2d                	jne    c000ffa8 <tcp_output_segment+0x120>
c000ff7b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000ff81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff85:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000ff88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	50                   	push   eax
c000ff96:	e8 a5 0c ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	89 c2                	mov    edx,eax
c000ffa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000ffa7:	90                   	nop
c000ffa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffac:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ffaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb9:	29 c2                	sub    edx,eax
c000ffbb:	89 d0                	mov    eax,edx
c000ffbd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000ffc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffc9:	66 8b 48 0a          	mov    cx,WORD PTR [eax+0xa]
c000ffcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffd4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000ffd9:	89 ce                	mov    esi,ecx
c000ffdb:	29 d6                	sub    esi,edx
c000ffdd:	89 f2                	mov    edx,esi
c000ffdf:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000ffe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffe7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffea:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000ffed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fff4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fff9:	89 ce                	mov    esi,ecx
c000fffb:	29 d6                	sub    esi,edx
c000fffd:	89 f2                	mov    edx,esi
c000ffff:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0010003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010007:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001000a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001000e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0010011:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010018:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001001b:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c0010021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010025:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010028:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001002b:	0f b7 c8             	movzx  ecx,ax
c001002e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010032:	8d 70 04             	lea    esi,[eax+0x4]
c0010035:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001003d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010040:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010044:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0010047:	83 ec 0c             	sub    esp,0xc
c001004a:	51                   	push   ecx
c001004b:	6a 06                	push   0x6
c001004d:	56                   	push   esi
c001004e:	52                   	push   edx
c001004f:	50                   	push   eax
c0010050:	e8 7b 33 00 00       	call   c00133d0 <inet_chksum_pseudo>
c0010055:	83 c4 20             	add    esp,0x20
c0010058:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c001005c:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010062:	83 c0 01             	add    eax,0x1
c0010065:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c001006b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001006f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0010072:	0f b6 d8             	movzx  ebx,al
c0010075:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010079:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001007c:	0f b6 c8             	movzx  ecx,al
c001007f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010083:	8d 70 04             	lea    esi,[eax+0x4]
c0010086:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001008a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001008e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010091:	83 ec 08             	sub    esp,0x8
c0010094:	6a 06                	push   0x6
c0010096:	53                   	push   ebx
c0010097:	51                   	push   ecx
c0010098:	56                   	push   esi
c0010099:	52                   	push   edx
c001009a:	50                   	push   eax
c001009b:	e8 70 3f 00 00       	call   c0014010 <ip_output>
c00100a0:	83 c4 20             	add    esp,0x20
c00100a3:	eb 07                	jmp    c00100ac <tcp_output_segment+0x224>
c00100a5:	8d 76 00             	lea    esi,[esi+0x0]
c00100a8:	90                   	nop
c00100a9:	8d 76 00             	lea    esi,[esi+0x0]
c00100ac:	83 c4 14             	add    esp,0x14
c00100af:	5b                   	pop    ebx
c00100b0:	5e                   	pop    esi
c00100b1:	c3                   	ret    
c00100b2:	66 90                	xchg   ax,ax

c00100b4 <tcp_output>:
c00100b4:	56                   	push   esi
c00100b5:	53                   	push   ebx
c00100b6:	83 ec 24             	sub    esp,0x24
c00100b9:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c00100be:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00100c2:	75 08                	jne    c00100cc <tcp_output+0x18>
c00100c4:	b0 00                	mov    al,0x0
c00100c6:	e9 6d 04 00 00       	jmp    c0010538 <tcp_output+0x484>
c00100cb:	90                   	nop
c00100cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d0:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c00100d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d8:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c00100db:	89 c8                	mov    eax,ecx
c00100dd:	0f b7 d8             	movzx  ebx,ax
c00100e0:	0f b7 ca             	movzx  ecx,dx
c00100e3:	39 cb                	cmp    ebx,ecx
c00100e5:	76 05                	jbe    c00100ec <tcp_output+0x38>
c00100e7:	89 d0                	mov    eax,edx
c00100e9:	8d 76 00             	lea    esi,[esi+0x0]
c00100ec:	0f b7 c0             	movzx  eax,ax
c00100ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00100f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100f7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00100fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00100fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010102:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010105:	0f b6 c0             	movzx  eax,al
c0010108:	83 e0 02             	and    eax,0x2
c001010b:	74 4f                	je     c001015c <tcp_output+0xa8>
c001010d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010112:	74 34                	je     c0010148 <tcp_output+0x94>
c0010114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010118:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001011b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001011e:	83 ec 0c             	sub    esp,0xc
c0010121:	50                   	push   eax
c0010122:	e8 19 0b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010127:	83 c4 10             	add    esp,0x10
c001012a:	89 c2                	mov    edx,eax
c001012c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010130:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c0010133:	29 c2                	sub    edx,eax
c0010135:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010139:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001013c:	0f b7 c0             	movzx  eax,ax
c001013f:	01 d0                	add    eax,edx
c0010141:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010145:	73 15                	jae    c001015c <tcp_output+0xa8>
c0010147:	90                   	nop
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001014f:	e8 4c fc ff ff       	call   c000fda0 <tcp_send_empty_ack>
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	e9 dc 03 00 00       	jmp    c0010538 <tcp_output+0x484>
c001015c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010160:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010163:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010167:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001016c:	0f 84 e6 02 00 00    	je     c0010458 <tcp_output+0x3a4>
c0010172:	eb 0c                	jmp    c0010180 <tcp_output+0xcc>
c0010174:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010178:	8b 00                	mov    eax,DWORD PTR [eax]
c001017a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001017e:	66 90                	xchg   ax,ax
c0010180:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010184:	8b 00                	mov    eax,DWORD PTR [eax]
c0010186:	85 c0                	test   eax,eax
c0010188:	75 ea                	jne    c0010174 <tcp_output+0xc0>
c001018a:	e9 c9 02 00 00       	jmp    c0010458 <tcp_output+0x3a4>
c001018f:	90                   	nop
c0010190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010194:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010197:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001019b:	0f b7 c0             	movzx  eax,ax
c001019e:	83 ec 0c             	sub    esp,0xc
c00101a1:	50                   	push   eax
c00101a2:	e8 75 0a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00101a7:	83 c4 10             	add    esp,0x10
c00101aa:	0f b7 c0             	movzx  eax,ax
c00101ad:	83 e0 04             	and    eax,0x4
c00101b0:	74 16                	je     c00101c8 <tcp_output+0x114>
c00101b2:	83 ec 08             	sub    esp,0x8
c00101b5:	68 33 0f 03 c0       	push   0xc0030f33
c00101ba:	68 26 00 03 c0       	push   0xc0030026
c00101bf:	e8 00 fd 00 00       	call   c001fec4 <CPrintf>
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	90                   	nop
c00101c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00101cf:	85 c0                	test   eax,eax
c00101d1:	74 45                	je     c0010218 <tcp_output+0x164>
c00101d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101d7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00101da:	0f b6 c0             	movzx  eax,al
c00101dd:	83 e0 44             	and    eax,0x44
c00101e0:	75 36                	jne    c0010218 <tcp_output+0x164>
c00101e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101e6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00101e9:	85 c0                	test   eax,eax
c00101eb:	74 33                	je     c0010220 <tcp_output+0x16c>
c00101ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00101f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00101f6:	85 c0                	test   eax,eax
c00101f8:	75 1e                	jne    c0010218 <tcp_output+0x164>
c00101fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101fe:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010201:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010208:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001020b:	0f b7 d2             	movzx  edx,dx
c001020e:	0f b7 c0             	movzx  eax,ax
c0010211:	39 c2                	cmp    edx,eax
c0010213:	72 0b                	jb     c0010220 <tcp_output+0x16c>
c0010215:	8d 76 00             	lea    esi,[esi+0x0]
c0010218:	b8 01 00 00 00       	mov    eax,0x1
c001021d:	eb 09                	jmp    c0010228 <tcp_output+0x174>
c001021f:	90                   	nop
c0010220:	b8 00 00 00 00       	mov    eax,0x0
c0010225:	8d 76 00             	lea    esi,[esi+0x0]
c0010228:	85 c0                	test   eax,eax
c001022a:	75 18                	jne    c0010244 <tcp_output+0x190>
c001022c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010230:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010233:	0f b6 c0             	movzx  eax,al
c0010236:	25 a0 00 00 00       	and    eax,0xa0
c001023b:	0f 84 57 02 00 00    	je     c0010498 <tcp_output+0x3e4>
c0010241:	8d 76 00             	lea    esi,[esi+0x0]
c0010244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010248:	8b 10                	mov    edx,DWORD PTR [eax]
c001024a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001024e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010251:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010255:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0010258:	83 f8 02             	cmp    eax,0x2
c001025b:	74 3b                	je     c0010298 <tcp_output+0x1e4>
c001025d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010261:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010264:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c0010268:	83 ec 0c             	sub    esp,0xc
c001026b:	6a 10                	push   0x10
c001026d:	e8 aa 09 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010272:	83 c4 10             	add    esp,0x10
c0010275:	89 c2                	mov    edx,eax
c0010277:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001027b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001027e:	09 da                	or     edx,ebx
c0010280:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010284:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010288:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001028b:	83 e0 fc             	and    eax,0xfffffffc
c001028e:	88 c2                	mov    dl,al
c0010290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010294:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010297:	90                   	nop
c0010298:	83 ec 08             	sub    esp,0x8
c001029b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001029f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00102a3:	e8 e0 fb ff ff       	call   c000fe88 <tcp_output_segment>
c00102a8:	83 c4 10             	add    esp,0x10
c00102ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102b5:	83 ec 0c             	sub    esp,0xc
c00102b8:	50                   	push   eax
c00102b9:	e8 82 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00102be:	83 c4 10             	add    esp,0x10
c00102c1:	89 c3                	mov    ebx,eax
c00102c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102ca:	0f b7 f0             	movzx  esi,ax
c00102cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102d1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102d4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00102d8:	0f b7 c0             	movzx  eax,ax
c00102db:	83 ec 0c             	sub    esp,0xc
c00102de:	50                   	push   eax
c00102df:	e8 38 09 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00102e4:	83 c4 10             	add    esp,0x10
c00102e7:	0f b7 c0             	movzx  eax,ax
c00102ea:	83 e0 03             	and    eax,0x3
c00102ed:	0f 95 c0             	setne  al
c00102f0:	0f b6 c0             	movzx  eax,al
c00102f3:	01 f0                	add    eax,esi
c00102f5:	01 d8                	add    eax,ebx
c00102f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102ff:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010302:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010306:	79 0c                	jns    c0010314 <tcp_output+0x260>
c0010308:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001030c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010310:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010313:	90                   	nop
c0010314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010318:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001031b:	0f b7 d8             	movzx  ebx,ax
c001031e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010322:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010325:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010329:	0f b7 c0             	movzx  eax,ax
c001032c:	83 ec 0c             	sub    esp,0xc
c001032f:	50                   	push   eax
c0010330:	e8 e7 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010335:	83 c4 10             	add    esp,0x10
c0010338:	0f b7 c0             	movzx  eax,ax
c001033b:	83 e0 03             	and    eax,0x3
c001033e:	0f 95 c0             	setne  al
c0010341:	0f b6 c0             	movzx  eax,al
c0010344:	01 d8                	add    eax,ebx
c0010346:	85 c0                	test   eax,eax
c0010348:	0f 8e ee 00 00 00    	jle    c001043c <tcp_output+0x388>
c001034e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010352:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001035c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001035f:	85 c0                	test   eax,eax
c0010361:	75 19                	jne    c001037c <tcp_output+0x2c8>
c0010363:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001036b:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c001036e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010372:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010376:	e9 d1 00 00 00       	jmp    c001044c <tcp_output+0x398>
c001037b:	90                   	nop
c001037c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010380:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010383:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010386:	83 ec 0c             	sub    esp,0xc
c0010389:	50                   	push   eax
c001038a:	e8 b1 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001038f:	83 c4 10             	add    esp,0x10
c0010392:	89 c3                	mov    ebx,eax
c0010394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010398:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001039b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001039e:	83 ec 0c             	sub    esp,0xc
c00103a1:	50                   	push   eax
c00103a2:	e8 99 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103a7:	83 c4 10             	add    esp,0x10
c00103aa:	29 c3                	sub    ebx,eax
c00103ac:	89 d8                	mov    eax,ebx
c00103ae:	79 74                	jns    c0010424 <tcp_output+0x370>
c00103b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103b4:	83 c0 7c             	add    eax,0x7c
c00103b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00103bb:	eb 0f                	jmp    c00103cc <tcp_output+0x318>
c00103bd:	8d 76 00             	lea    esi,[esi+0x0]
c00103c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00103c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00103ca:	66 90                	xchg   ax,ax
c00103cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00103d2:	85 c0                	test   eax,eax
c00103d4:	74 36                	je     c001040c <tcp_output+0x358>
c00103d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103da:	8b 00                	mov    eax,DWORD PTR [eax]
c00103dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103e2:	83 ec 0c             	sub    esp,0xc
c00103e5:	50                   	push   eax
c00103e6:	e8 55 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103eb:	83 c4 10             	add    esp,0x10
c00103ee:	89 c3                	mov    ebx,eax
c00103f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103fa:	83 ec 0c             	sub    esp,0xc
c00103fd:	50                   	push   eax
c00103fe:	e8 3d 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010403:	83 c4 10             	add    esp,0x10
c0010406:	29 c3                	sub    ebx,eax
c0010408:	89 d8                	mov    eax,ebx
c001040a:	78 b4                	js     c00103c0 <tcp_output+0x30c>
c001040c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010410:	8b 10                	mov    edx,DWORD PTR [eax]
c0010412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010416:	89 10                	mov    DWORD PTR [eax],edx
c0010418:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001041c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010420:	89 10                	mov    DWORD PTR [eax],edx
c0010422:	eb 28                	jmp    c001044c <tcp_output+0x398>
c0010424:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010428:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001042c:	89 10                	mov    DWORD PTR [eax],edx
c001042e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010432:	8b 00                	mov    eax,DWORD PTR [eax]
c0010434:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010438:	eb 12                	jmp    c001044c <tcp_output+0x398>
c001043a:	66 90                	xchg   ax,ax
c001043c:	83 ec 0c             	sub    esp,0xc
c001043f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010443:	e8 58 9d ff ff       	call   c000a1a0 <tcp_seg_free>
c0010448:	83 c4 10             	add    esp,0x10
c001044b:	90                   	nop
c001044c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010450:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010457:	90                   	nop
c0010458:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001045d:	74 3d                	je     c001049c <tcp_output+0x3e8>
c001045f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010463:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010469:	83 ec 0c             	sub    esp,0xc
c001046c:	50                   	push   eax
c001046d:	e8 ce 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010472:	83 c4 10             	add    esp,0x10
c0010475:	89 c2                	mov    edx,eax
c0010477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001047b:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001047e:	29 c2                	sub    edx,eax
c0010480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010484:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010487:	0f b7 c0             	movzx  eax,ax
c001048a:	01 d0                	add    eax,edx
c001048c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010490:	0f 83 fa fc ff ff    	jae    c0010190 <tcp_output+0xdc>
c0010496:	eb 04                	jmp    c001049c <tcp_output+0x3e8>
c0010498:	90                   	nop
c0010499:	8d 76 00             	lea    esi,[esi+0x0]
c001049c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104a0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00104a3:	85 c0                	test   eax,eax
c00104a5:	75 0d                	jne    c00104b4 <tcp_output+0x400>
c00104a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104ab:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c00104b1:	8d 76 00             	lea    esi,[esi+0x0]
c00104b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00104b9:	74 65                	je     c0010520 <tcp_output+0x46c>
c00104bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104bf:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c00104c5:	0f b6 c0             	movzx  eax,al
c00104c8:	85 c0                	test   eax,eax
c00104ca:	75 54                	jne    c0010520 <tcp_output+0x46c>
c00104cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00104d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	50                   	push   eax
c00104da:	e8 61 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00104df:	83 c4 10             	add    esp,0x10
c00104e2:	89 c2                	mov    edx,eax
c00104e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104e8:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00104eb:	29 c2                	sub    edx,eax
c00104ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00104f4:	0f b7 c0             	movzx  eax,ax
c00104f7:	01 c2                	add    edx,eax
c00104f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104fd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010500:	0f b7 c0             	movzx  eax,ax
c0010503:	39 c2                	cmp    edx,eax
c0010505:	76 19                	jbe    c0010520 <tcp_output+0x46c>
c0010507:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001050b:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010515:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010519:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010524:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010527:	83 e0 7f             	and    eax,0x7f
c001052a:	88 c2                	mov    dl,al
c001052c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010530:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010533:	b0 00                	mov    al,0x0
c0010535:	8d 76 00             	lea    esi,[esi+0x0]
c0010538:	83 c4 24             	add    esp,0x24
c001053b:	5b                   	pop    ebx
c001053c:	5e                   	pop    esi
c001053d:	c3                   	ret    
c001053e:	66 90                	xchg   ax,ax

c0010540 <tcp_rst>:
c0010540:	83 ec 2c             	sub    esp,0x2c
c0010543:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010547:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001054b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010550:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010555:	83 ec 04             	sub    esp,0x4
c0010558:	6a 00                	push   0x0
c001055a:	6a 14                	push   0x14
c001055c:	6a 01                	push   0x1
c001055e:	e8 8d 81 ff ff       	call   c00086f0 <pbuf_alloc>
c0010563:	83 c4 10             	add    esp,0x10
c0010566:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001056a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001056f:	0f 84 3f 01 00 00    	je     c00106b4 <tcp_rst+0x174>
c0010575:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010579:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001057d:	0f b7 c0             	movzx  eax,ax
c0010580:	83 f8 13             	cmp    eax,0x13
c0010583:	77 17                	ja     c001059c <tcp_rst+0x5c>
c0010585:	83 ec 08             	sub    esp,0x8
c0010588:	68 40 0c 03 c0       	push   0xc0030c40
c001058d:	68 26 00 03 c0       	push   0xc0030026
c0010592:	e8 2d f9 00 00       	call   c001fec4 <CPrintf>
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	66 90                	xchg   ax,ax
c001059c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00105a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105a7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00105ac:	83 ec 0c             	sub    esp,0xc
c00105af:	50                   	push   eax
c00105b0:	e8 67 06 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	89 c2                	mov    edx,eax
c00105ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105be:	66 89 10             	mov    WORD PTR [eax],dx
c00105c1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00105c6:	83 ec 0c             	sub    esp,0xc
c00105c9:	50                   	push   eax
c00105ca:	e8 4d 06 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00105cf:	83 c4 10             	add    esp,0x10
c00105d2:	89 c2                	mov    edx,eax
c00105d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105d8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00105dc:	83 ec 0c             	sub    esp,0xc
c00105df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00105e3:	e8 58 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00105e8:	83 c4 10             	add    esp,0x10
c00105eb:	89 c2                	mov    edx,eax
c00105ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00105f4:	83 ec 0c             	sub    esp,0xc
c00105f7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00105fb:	e8 40 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	89 c2                	mov    edx,eax
c0010605:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010609:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001060c:	83 ec 0c             	sub    esp,0xc
c001060f:	68 14 50 00 00       	push   0x5014
c0010614:	e8 03 06 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010619:	83 c4 10             	add    esp,0x10
c001061c:	89 c2                	mov    edx,eax
c001061e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010622:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001062a:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c0010630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010634:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c001063a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001063e:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c0010644:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010648:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001064b:	0f b7 c0             	movzx  eax,ax
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	50                   	push   eax
c0010652:	6a 06                	push   0x6
c0010654:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010658:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001065c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010660:	e8 6b 2d 00 00       	call   c00133d0 <inet_chksum_pseudo>
c0010665:	83 c4 20             	add    esp,0x20
c0010668:	89 c2                	mov    edx,eax
c001066a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001066e:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010672:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010678:	83 c0 01             	add    eax,0x1
c001067b:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010681:	83 ec 08             	sub    esp,0x8
c0010684:	6a 06                	push   0x6
c0010686:	6a 00                	push   0x0
c0010688:	68 ff 00 00 00       	push   0xff
c001068d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010691:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010695:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010699:	e8 72 39 00 00       	call   c0014010 <ip_output>
c001069e:	83 c4 20             	add    esp,0x20
c00106a1:	83 ec 0c             	sub    esp,0xc
c00106a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00106a8:	e8 67 7e ff ff       	call   c0008514 <pbuf_free>
c00106ad:	83 c4 10             	add    esp,0x10
c00106b0:	eb 06                	jmp    c00106b8 <tcp_rst+0x178>
c00106b2:	66 90                	xchg   ax,ax
c00106b4:	90                   	nop
c00106b5:	8d 76 00             	lea    esi,[esi+0x0]
c00106b8:	83 c4 2c             	add    esp,0x2c
c00106bb:	c3                   	ret    

c00106bc <tcp_rexmit_rto>:
c00106bc:	83 ec 1c             	sub    esp,0x1c
c00106bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106c3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106c6:	85 c0                	test   eax,eax
c00106c8:	74 7a                	je     c0010744 <tcp_rexmit_rto+0x88>
c00106ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106ce:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106d5:	eb 0d                	jmp    c00106e4 <tcp_rexmit_rto+0x28>
c00106d7:	90                   	nop
c00106d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00106de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106e2:	66 90                	xchg   ax,ax
c00106e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00106ea:	85 c0                	test   eax,eax
c00106ec:	75 ea                	jne    c00106d8 <tcp_rexmit_rto+0x1c>
c00106ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106f2:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c00106f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106f9:	89 10                	mov    DWORD PTR [eax],edx
c00106fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106ff:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c0010702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010706:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001070d:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c0010714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010718:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c001071b:	83 c0 01             	add    eax,0x1
c001071e:	88 c2                	mov    dl,al
c0010720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010724:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001072b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010732:	83 ec 0c             	sub    esp,0xc
c0010735:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010739:	e8 76 f9 ff ff       	call   c00100b4 <tcp_output>
c001073e:	83 c4 10             	add    esp,0x10
c0010741:	eb 05                	jmp    c0010748 <tcp_rexmit_rto+0x8c>
c0010743:	90                   	nop
c0010744:	90                   	nop
c0010745:	8d 76 00             	lea    esi,[esi+0x0]
c0010748:	83 c4 1c             	add    esp,0x1c
c001074b:	c3                   	ret    

c001074c <tcp_rexmit>:
c001074c:	53                   	push   ebx
c001074d:	83 ec 18             	sub    esp,0x18
c0010750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010754:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010757:	85 c0                	test   eax,eax
c0010759:	0f 84 a9 00 00 00    	je     c0010808 <tcp_rexmit+0xbc>
c001075f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010763:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010766:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001076a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001076e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010774:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001077b:	83 c0 78             	add    eax,0x78
c001077e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010782:	eb 0c                	jmp    c0010790 <tcp_rexmit+0x44>
c0010784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010788:	8b 00                	mov    eax,DWORD PTR [eax]
c001078a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001078e:	66 90                	xchg   ax,ax
c0010790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010794:	8b 00                	mov    eax,DWORD PTR [eax]
c0010796:	85 c0                	test   eax,eax
c0010798:	74 36                	je     c00107d0 <tcp_rexmit+0x84>
c001079a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001079e:	8b 00                	mov    eax,DWORD PTR [eax]
c00107a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107a6:	83 ec 0c             	sub    esp,0xc
c00107a9:	50                   	push   eax
c00107aa:	e8 91 04 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00107af:	83 c4 10             	add    esp,0x10
c00107b2:	89 c3                	mov    ebx,eax
c00107b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107be:	83 ec 0c             	sub    esp,0xc
c00107c1:	50                   	push   eax
c00107c2:	e8 79 04 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00107c7:	83 c4 10             	add    esp,0x10
c00107ca:	29 c3                	sub    ebx,eax
c00107cc:	89 d8                	mov    eax,ebx
c00107ce:	78 b4                	js     c0010784 <tcp_rexmit+0x38>
c00107d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00107d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107da:	89 10                	mov    DWORD PTR [eax],edx
c00107dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107e4:	89 10                	mov    DWORD PTR [eax],edx
c00107e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107ea:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00107ed:	83 c0 01             	add    eax,0x1
c00107f0:	88 c2                	mov    dl,al
c00107f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107f6:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00107f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107fd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010804:	eb 06                	jmp    c001080c <tcp_rexmit+0xc0>
c0010806:	66 90                	xchg   ax,ax
c0010808:	90                   	nop
c0010809:	8d 76 00             	lea    esi,[esi+0x0]
c001080c:	83 c4 18             	add    esp,0x18
c001080f:	5b                   	pop    ebx
c0010810:	c3                   	ret    
c0010811:	8d 76 00             	lea    esi,[esi+0x0]

c0010814 <tcp_rexmit_fast>:
c0010814:	83 ec 0c             	sub    esp,0xc
c0010817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001081e:	85 c0                	test   eax,eax
c0010820:	0f 84 d2 00 00 00    	je     c00108f8 <tcp_rexmit_fast+0xe4>
c0010826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001082d:	0f b6 c0             	movzx  eax,al
c0010830:	83 e0 04             	and    eax,0x4
c0010833:	0f 85 bf 00 00 00    	jne    c00108f8 <tcp_rexmit_fast+0xe4>
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010840:	e8 07 ff ff ff       	call   c001074c <tcp_rexmit>
c0010845:	83 c4 10             	add    esp,0x10
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010857:	0f b7 d2             	movzx  edx,dx
c001085a:	0f b7 c0             	movzx  eax,ax
c001085d:	39 c2                	cmp    edx,eax
c001085f:	76 1b                	jbe    c001087c <tcp_rexmit_fast+0x68>
c0010861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010865:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010868:	0f b7 c0             	movzx  eax,ax
c001086b:	d1 e8                	shr    eax,1
c001086d:	89 c2                	mov    edx,eax
c001086f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010873:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010877:	eb 1b                	jmp    c0010894 <tcp_rexmit_fast+0x80>
c0010879:	8d 76 00             	lea    esi,[esi+0x0]
c001087c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010880:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010884:	0f b7 c0             	movzx  eax,ax
c0010887:	d1 e8                	shr    eax,1
c0010889:	89 c2                	mov    edx,eax
c001088b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088f:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010893:	90                   	nop
c0010894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010898:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c001089b:	0f b7 d0             	movzx  edx,ax
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108a5:	0f b7 c0             	movzx  eax,ax
c00108a8:	d1 e0                	shl    eax,1
c00108aa:	39 c2                	cmp    edx,eax
c00108ac:	7d 16                	jge    c00108c4 <tcp_rexmit_fast+0xb0>
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108b5:	d1 e0                	shl    eax,1
c00108b7:	89 c2                	mov    edx,eax
c00108b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bd:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c00108c1:	8d 76 00             	lea    esi,[esi+0x0]
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c00108cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108d2:	89 c1                	mov    ecx,eax
c00108d4:	d1 e1                	shl    ecx,1
c00108d6:	01 c8                	add    eax,ecx
c00108d8:	01 d0                	add    eax,edx
c00108da:	89 c2                	mov    edx,eax
c00108dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e0:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c00108e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00108eb:	83 c8 04             	or     eax,0x4
c00108ee:	88 c2                	mov    dl,al
c00108f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00108f7:	90                   	nop
c00108f8:	90                   	nop
c00108f9:	83 c4 0c             	add    esp,0xc
c00108fc:	c3                   	ret    
c00108fd:	8d 76 00             	lea    esi,[esi+0x0]

c0010900 <tcp_keepalive>:
c0010900:	83 ec 1c             	sub    esp,0x1c
c0010903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010907:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001090a:	83 e8 01             	sub    eax,0x1
c001090d:	83 ec 0c             	sub    esp,0xc
c0010910:	50                   	push   eax
c0010911:	e8 2a 03 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010916:	83 c4 10             	add    esp,0x10
c0010919:	50                   	push   eax
c001091a:	6a 00                	push   0x0
c001091c:	6a 00                	push   0x0
c001091e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010922:	e8 c5 e2 ff ff       	call   c000ebec <tcp_output_alloc_header>
c0010927:	83 c4 10             	add    esp,0x10
c001092a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001092e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010933:	0f 84 8b 00 00 00    	je     c00109c4 <tcp_keepalive+0xc4>
c0010939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001093d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010940:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010944:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010948:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001094b:	0f b7 d0             	movzx  edx,ax
c001094e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010952:	8d 48 04             	lea    ecx,[eax+0x4]
c0010955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010959:	83 ec 0c             	sub    esp,0xc
c001095c:	52                   	push   edx
c001095d:	6a 06                	push   0x6
c001095f:	51                   	push   ecx
c0010960:	50                   	push   eax
c0010961:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010965:	e8 66 2a 00 00       	call   c00133d0 <inet_chksum_pseudo>
c001096a:	83 c4 20             	add    esp,0x20
c001096d:	89 c2                	mov    edx,eax
c001096f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010973:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010977:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001097d:	83 c0 01             	add    eax,0x1
c0010980:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001098a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001098d:	0f b6 d0             	movzx  edx,al
c0010990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010994:	8d 48 04             	lea    ecx,[eax+0x4]
c0010997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001099b:	83 ec 08             	sub    esp,0x8
c001099e:	6a 06                	push   0x6
c00109a0:	6a 00                	push   0x0
c00109a2:	52                   	push   edx
c00109a3:	51                   	push   ecx
c00109a4:	50                   	push   eax
c00109a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00109a9:	e8 62 36 00 00       	call   c0014010 <ip_output>
c00109ae:	83 c4 20             	add    esp,0x20
c00109b1:	83 ec 0c             	sub    esp,0xc
c00109b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109b8:	e8 57 7b ff ff       	call   c0008514 <pbuf_free>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	eb 06                	jmp    c00109c8 <tcp_keepalive+0xc8>
c00109c2:	66 90                	xchg   ax,ax
c00109c4:	90                   	nop
c00109c5:	8d 76 00             	lea    esi,[esi+0x0]
c00109c8:	83 c4 1c             	add    esp,0x1c
c00109cb:	c3                   	ret    

c00109cc <tcp_zero_window_probe>:
c00109cc:	53                   	push   ebx
c00109cd:	83 ec 28             	sub    esp,0x28
c00109d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109d4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00109d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109db:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00109e0:	75 0e                	jne    c00109f0 <tcp_zero_window_probe+0x24>
c00109e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109e6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00109e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109ed:	8d 76 00             	lea    esi,[esi+0x0]
c00109f0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00109f5:	0f 84 99 01 00 00    	je     c0010b94 <tcp_zero_window_probe+0x1c8>
c00109fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a02:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a06:	0f b7 c0             	movzx  eax,ax
c0010a09:	83 ec 0c             	sub    esp,0xc
c0010a0c:	50                   	push   eax
c0010a0d:	e8 0a 02 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010a12:	83 c4 10             	add    esp,0x10
c0010a15:	0f b7 c0             	movzx  eax,ax
c0010a18:	83 e0 01             	and    eax,0x1
c0010a1b:	74 17                	je     c0010a34 <tcp_zero_window_probe+0x68>
c0010a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a24:	0f b7 c0             	movzx  eax,ax
c0010a27:	85 c0                	test   eax,eax
c0010a29:	75 09                	jne    c0010a34 <tcp_zero_window_probe+0x68>
c0010a2b:	b8 01 00 00 00       	mov    eax,0x1
c0010a30:	eb 0a                	jmp    c0010a3c <tcp_zero_window_probe+0x70>
c0010a32:	66 90                	xchg   ax,ax
c0010a34:	b8 00 00 00 00       	mov    eax,0x0
c0010a39:	8d 76 00             	lea    esi,[esi+0x0]
c0010a3c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0010a40:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010a45:	85 c0                	test   eax,eax
c0010a47:	0f 94 c0             	sete   al
c0010a4a:	0f b6 c0             	movzx  eax,al
c0010a4d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0010a52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a59:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a5c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010a61:	52                   	push   edx
c0010a62:	50                   	push   eax
c0010a63:	6a 00                	push   0x0
c0010a65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010a69:	e8 7e e1 ff ff       	call   c000ebec <tcp_output_alloc_header>
c0010a6e:	83 c4 10             	add    esp,0x10
c0010a71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010a75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010a7a:	0f 84 18 01 00 00    	je     c0010b98 <tcp_zero_window_probe+0x1cc>
c0010a80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a8b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010a90:	85 c0                	test   eax,eax
c0010a92:	74 28                	je     c0010abc <tcp_zero_window_probe+0xf0>
c0010a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a98:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a9c:	80 e4 c0             	and    ah,0xc0
c0010a9f:	89 c3                	mov    ebx,eax
c0010aa1:	83 ec 0c             	sub    esp,0xc
c0010aa4:	6a 11                	push   0x11
c0010aa6:	e8 71 01 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010aab:	83 c4 10             	add    esp,0x10
c0010aae:	09 d8                	or     eax,ebx
c0010ab0:	89 c2                	mov    edx,eax
c0010ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab6:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010aba:	eb 58                	jmp    c0010b14 <tcp_zero_window_probe+0x148>
c0010abc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ac0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ac3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ad1:	83 c0 14             	add    eax,0x14
c0010ad4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010adc:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010ae0:	0f b7 c0             	movzx  eax,ax
c0010ae3:	83 ec 0c             	sub    esp,0xc
c0010ae6:	50                   	push   eax
c0010ae7:	e8 30 01 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010aec:	83 c4 10             	add    esp,0x10
c0010aef:	0f b7 c0             	movzx  eax,ax
c0010af2:	c1 e8 0c             	shr    eax,0xc
c0010af5:	c1 e0 02             	shl    eax,0x2
c0010af8:	0f b7 d0             	movzx  edx,ax
c0010afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010aff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b02:	52                   	push   edx
c0010b03:	6a 01                	push   0x1
c0010b05:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b09:	50                   	push   eax
c0010b0a:	e8 b1 86 ff ff       	call   c00091c0 <pbuf_copy_partial>
c0010b0f:	83 c4 10             	add    esp,0x10
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010b1b:	0f b7 d0             	movzx  edx,ax
c0010b1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b22:	8d 48 04             	lea    ecx,[eax+0x4]
c0010b25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b29:	83 ec 0c             	sub    esp,0xc
c0010b2c:	52                   	push   edx
c0010b2d:	6a 06                	push   0x6
c0010b2f:	51                   	push   ecx
c0010b30:	50                   	push   eax
c0010b31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b35:	e8 96 28 00 00       	call   c00133d0 <inet_chksum_pseudo>
c0010b3a:	83 c4 20             	add    esp,0x20
c0010b3d:	89 c2                	mov    edx,eax
c0010b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b43:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010b47:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010b4d:	83 c0 01             	add    eax,0x1
c0010b50:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010b56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b5a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010b5d:	0f b6 d0             	movzx  edx,al
c0010b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b64:	8d 48 04             	lea    ecx,[eax+0x4]
c0010b67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b6b:	83 ec 08             	sub    esp,0x8
c0010b6e:	6a 06                	push   0x6
c0010b70:	6a 00                	push   0x0
c0010b72:	52                   	push   edx
c0010b73:	51                   	push   ecx
c0010b74:	50                   	push   eax
c0010b75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b79:	e8 92 34 00 00       	call   c0014010 <ip_output>
c0010b7e:	83 c4 20             	add    esp,0x20
c0010b81:	83 ec 0c             	sub    esp,0xc
c0010b84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b88:	e8 87 79 ff ff       	call   c0008514 <pbuf_free>
c0010b8d:	83 c4 10             	add    esp,0x10
c0010b90:	eb 0a                	jmp    c0010b9c <tcp_zero_window_probe+0x1d0>
c0010b92:	66 90                	xchg   ax,ax
c0010b94:	90                   	nop
c0010b95:	eb 05                	jmp    c0010b9c <tcp_zero_window_probe+0x1d0>
c0010b97:	90                   	nop
c0010b98:	90                   	nop
c0010b99:	8d 76 00             	lea    esi,[esi+0x0]
c0010b9c:	83 c4 28             	add    esp,0x28
c0010b9f:	5b                   	pop    ebx
c0010ba0:	c3                   	ret    
c0010ba1:	66 90                	xchg   ax,ax
c0010ba3:	90                   	nop

c0010ba4 <sys_timeout>:
c0010ba4:	83 ec 1c             	sub    esp,0x1c
c0010ba7:	83 ec 0c             	sub    esp,0xc
c0010baa:	6a 0b                	push   0xb
c0010bac:	e8 77 6f ff ff       	call   c0007b28 <memp_malloc>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010bbd:	75 25                	jne    c0010be4 <sys_timeout+0x40>
c0010bbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010bc4:	0f 85 3e 01 00 00    	jne    c0010d08 <sys_timeout+0x164>
c0010bca:	83 ec 08             	sub    esp,0x8
c0010bcd:	68 4c 0f 03 c0       	push   0xc0030f4c
c0010bd2:	68 26 00 03 c0       	push   0xc0030026
c0010bd7:	e8 e8 f2 00 00       	call   c001fec4 <CPrintf>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	e9 24 01 00 00       	jmp    c0010d08 <sys_timeout+0x164>
c0010be4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bf2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010bf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010bf9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bfd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010c01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c0c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c0f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c14:	85 c0                	test   eax,eax
c0010c16:	75 10                	jne    c0010c28 <sys_timeout+0x84>
c0010c18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c1c:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c21:	e9 e6 00 00 00       	jmp    c0010d0c <sys_timeout+0x168>
c0010c26:	66 90                	xchg   ax,ax
c0010c28:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c30:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010c34:	73 2e                	jae    c0010c64 <sys_timeout+0xc0>
c0010c36:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c3b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c3e:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c43:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010c47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c4a:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c54:	89 10                	mov    DWORD PTR [eax],edx
c0010c56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c5a:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c5f:	e9 a8 00 00 00       	jmp    c0010d0c <sys_timeout+0x168>
c0010c64:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c6d:	e9 86 00 00 00       	jmp    c0010cf8 <sys_timeout+0x154>
c0010c72:	66 90                	xchg   ax,ax
c0010c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c78:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c82:	29 c2                	sub    edx,eax
c0010c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c91:	85 c0                	test   eax,eax
c0010c93:	74 17                	je     c0010cac <sys_timeout+0x108>
c0010c95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c9b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca5:	39 c2                	cmp    edx,eax
c0010ca7:	76 43                	jbe    c0010cec <sys_timeout+0x148>
c0010ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cb2:	85 c0                	test   eax,eax
c0010cb4:	74 1e                	je     c0010cd4 <sys_timeout+0x130>
c0010cb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cbc:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cc3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010cc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ccc:	29 d1                	sub    ecx,edx
c0010cce:	89 ca                	mov    edx,ecx
c0010cd0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cd3:	90                   	nop
c0010cd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ce4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ce8:	89 10                	mov    DWORD PTR [eax],edx
c0010cea:	eb 20                	jmp    c0010d0c <sys_timeout+0x168>
c0010cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cf6:	66 90                	xchg   ax,ax
c0010cf8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010cfd:	0f 85 71 ff ff ff    	jne    c0010c74 <sys_timeout+0xd0>
c0010d03:	eb 07                	jmp    c0010d0c <sys_timeout+0x168>
c0010d05:	8d 76 00             	lea    esi,[esi+0x0]
c0010d08:	90                   	nop
c0010d09:	8d 76 00             	lea    esi,[esi+0x0]
c0010d0c:	83 c4 1c             	add    esp,0x1c
c0010d0f:	c3                   	ret    

c0010d10 <tcpip_tcp_timer>:
c0010d10:	83 ec 0c             	sub    esp,0xc
c0010d13:	e8 b8 a4 ff ff       	call   c000b1d0 <tcp_tmr>
c0010d18:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010d1d:	85 c0                	test   eax,eax
c0010d1f:	75 0b                	jne    c0010d2c <tcpip_tcp_timer+0x1c>
c0010d21:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010d26:	85 c0                	test   eax,eax
c0010d28:	74 1e                	je     c0010d48 <tcpip_tcp_timer+0x38>
c0010d2a:	66 90                	xchg   ax,ax
c0010d2c:	83 ec 04             	sub    esp,0x4
c0010d2f:	6a 00                	push   0x0
c0010d31:	68 10 0d 01 c0       	push   0xc0010d10
c0010d36:	68 fa 00 00 00       	push   0xfa
c0010d3b:	e8 64 fe ff ff       	call   c0010ba4 <sys_timeout>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	eb 0f                	jmp    c0010d54 <tcpip_tcp_timer+0x44>
c0010d45:	8d 76 00             	lea    esi,[esi+0x0]
c0010d48:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010d52:	66 90                	xchg   ax,ax
c0010d54:	90                   	nop
c0010d55:	83 c4 0c             	add    esp,0xc
c0010d58:	c3                   	ret    
c0010d59:	8d 76 00             	lea    esi,[esi+0x0]

c0010d5c <tcp_timer_needed>:
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010d64:	85 c0                	test   eax,eax
c0010d66:	75 38                	jne    c0010da0 <tcp_timer_needed+0x44>
c0010d68:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010d6d:	85 c0                	test   eax,eax
c0010d6f:	75 0b                	jne    c0010d7c <tcp_timer_needed+0x20>
c0010d71:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010d76:	85 c0                	test   eax,eax
c0010d78:	74 26                	je     c0010da0 <tcp_timer_needed+0x44>
c0010d7a:	66 90                	xchg   ax,ax
c0010d7c:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010d86:	83 ec 04             	sub    esp,0x4
c0010d89:	6a 00                	push   0x0
c0010d8b:	68 10 0d 01 c0       	push   0xc0010d10
c0010d90:	68 fa 00 00 00       	push   0xfa
c0010d95:	e8 0a fe ff ff       	call   c0010ba4 <sys_timeout>
c0010d9a:	83 c4 10             	add    esp,0x10
c0010d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010da0:	90                   	nop
c0010da1:	83 c4 0c             	add    esp,0xc
c0010da4:	c3                   	ret    
c0010da5:	8d 76 00             	lea    esi,[esi+0x0]

c0010da8 <ip_reass_timer>:
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	e8 18 3b 00 00       	call   c00148c8 <ip_reass_tmr>
c0010db0:	83 ec 04             	sub    esp,0x4
c0010db3:	6a 00                	push   0x0
c0010db5:	68 a8 0d 01 c0       	push   0xc0010da8
c0010dba:	68 e8 03 00 00       	push   0x3e8
c0010dbf:	e8 e0 fd ff ff       	call   c0010ba4 <sys_timeout>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	90                   	nop
c0010dc8:	83 c4 0c             	add    esp,0xc
c0010dcb:	c3                   	ret    

c0010dcc <arp_timer>:
c0010dcc:	83 ec 0c             	sub    esp,0xc
c0010dcf:	e8 64 0d 00 00       	call   c0011b38 <etharp_tmr>
c0010dd4:	83 ec 04             	sub    esp,0x4
c0010dd7:	6a 00                	push   0x0
c0010dd9:	68 cc 0d 01 c0       	push   0xc0010dcc
c0010dde:	68 88 13 00 00       	push   0x1388
c0010de3:	e8 bc fd ff ff       	call   c0010ba4 <sys_timeout>
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	90                   	nop
c0010dec:	83 c4 0c             	add    esp,0xc
c0010def:	c3                   	ret    

c0010df0 <sys_timeouts_init>:
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	83 ec 04             	sub    esp,0x4
c0010df6:	6a 00                	push   0x0
c0010df8:	68 a8 0d 01 c0       	push   0xc0010da8
c0010dfd:	68 e8 03 00 00       	push   0x3e8
c0010e02:	e8 9d fd ff ff       	call   c0010ba4 <sys_timeout>
c0010e07:	83 c4 10             	add    esp,0x10
c0010e0a:	83 ec 04             	sub    esp,0x4
c0010e0d:	6a 00                	push   0x0
c0010e0f:	68 cc 0d 01 c0       	push   0xc0010dcc
c0010e14:	68 88 13 00 00       	push   0x1388
c0010e19:	e8 86 fd ff ff       	call   c0010ba4 <sys_timeout>
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	90                   	nop
c0010e22:	83 c4 0c             	add    esp,0xc
c0010e25:	c3                   	ret    
c0010e26:	66 90                	xchg   ax,ax

c0010e28 <sys_untimeout>:
c0010e28:	83 ec 1c             	sub    esp,0x1c
c0010e2b:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e30:	85 c0                	test   eax,eax
c0010e32:	0f 84 b4 00 00 00    	je     c0010eec <sys_untimeout+0xc4>
c0010e38:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e49:	e9 8e 00 00 00       	jmp    c0010edc <sys_untimeout+0xb4>
c0010e4e:	66 90                	xchg   ax,ax
c0010e50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010e57:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010e5b:	75 6b                	jne    c0010ec8 <sys_untimeout+0xa0>
c0010e5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e64:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010e68:	75 5e                	jne    c0010ec8 <sys_untimeout+0xa0>
c0010e6a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010e6f:	75 0f                	jne    c0010e80 <sys_untimeout+0x58>
c0010e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e77:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010e7c:	eb 0e                	jmp    c0010e8c <sys_untimeout+0x64>
c0010e7e:	66 90                	xchg   ax,ax
c0010e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e84:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e8a:	89 10                	mov    DWORD PTR [eax],edx
c0010e8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e92:	85 c0                	test   eax,eax
c0010e94:	74 1e                	je     c0010eb4 <sys_untimeout+0x8c>
c0010e96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e9c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010e9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ea3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0010eac:	01 ca                	add    edx,ecx
c0010eae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010eb4:	83 ec 08             	sub    esp,0x8
c0010eb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ebb:	6a 0b                	push   0xb
c0010ebd:	e8 92 6d ff ff       	call   c0007c54 <memp_free>
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	eb 29                	jmp    c0010ef0 <sys_untimeout+0xc8>
c0010ec7:	90                   	nop
c0010ec8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ecc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ed4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eda:	66 90                	xchg   ax,ax
c0010edc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ee1:	0f 85 69 ff ff ff    	jne    c0010e50 <sys_untimeout+0x28>
c0010ee7:	90                   	nop
c0010ee8:	eb 06                	jmp    c0010ef0 <sys_untimeout+0xc8>
c0010eea:	66 90                	xchg   ax,ax
c0010eec:	90                   	nop
c0010eed:	8d 76 00             	lea    esi,[esi+0x0]
c0010ef0:	83 c4 1c             	add    esp,0x1c
c0010ef3:	c3                   	ret    

c0010ef4 <sys_timeouts_mbox_fetch>:
c0010ef4:	83 ec 1c             	sub    esp,0x1c
c0010ef7:	90                   	nop
c0010ef8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010efd:	85 c0                	test   eax,eax
c0010eff:	75 1f                	jne    c0010f20 <sys_timeouts_mbox_fetch+0x2c>
c0010f01:	83 ec 04             	sub    esp,0x4
c0010f04:	6a 00                	push   0x0
c0010f06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f0e:	e8 4d fe fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f1a:	e9 cd 00 00 00       	jmp    c0010fec <sys_timeouts_mbox_fetch+0xf8>
c0010f1f:	90                   	nop
c0010f20:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	74 24                	je     c0010f50 <sys_timeouts_mbox_fetch+0x5c>
c0010f2c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f34:	83 ec 04             	sub    esp,0x4
c0010f37:	50                   	push   eax
c0010f38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f40:	e8 1b fe fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010f45:	83 c4 10             	add    esp,0x10
c0010f48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f4c:	eb 0a                	jmp    c0010f58 <sys_timeouts_mbox_fetch+0x64>
c0010f4e:	66 90                	xchg   ax,ax
c0010f50:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010f58:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010f5d:	75 5d                	jne    c0010fbc <sys_timeouts_mbox_fetch+0xc8>
c0010f5f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f6e:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010f73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f85:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f88:	83 ec 08             	sub    esp,0x8
c0010f8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f8f:	6a 0b                	push   0xb
c0010f91:	e8 be 6c ff ff       	call   c0007c54 <memp_free>
c0010f96:	83 c4 10             	add    esp,0x10
c0010f99:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010f9e:	0f 84 54 ff ff ff    	je     c0010ef8 <sys_timeouts_mbox_fetch+0x4>
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010fab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010faf:	ff d0                	call   eax
c0010fb1:	83 c4 10             	add    esp,0x10
c0010fb4:	e9 3f ff ff ff       	jmp    c0010ef8 <sys_timeouts_mbox_fetch+0x4>
c0010fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fbc:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010fc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010fc8:	73 16                	jae    c0010fe0 <sys_timeouts_mbox_fetch+0xec>
c0010fca:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010fcf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010fd2:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010fd7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010fdb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fde:	eb 0c                	jmp    c0010fec <sys_timeouts_mbox_fetch+0xf8>
c0010fe0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010fe5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fec:	90                   	nop
c0010fed:	83 c4 1c             	add    esp,0x1c
c0010ff0:	c3                   	ret    
c0010ff1:	66 90                	xchg   ax,ax
c0010ff3:	90                   	nop

c0010ff4 <udp_input>:
c0010ff4:	53                   	push   ebx
c0010ff5:	83 ec 28             	sub    esp,0x28
c0010ff8:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010ffe:	83 c0 01             	add    eax,0x1
c0011001:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0011007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001100b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011012:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011016:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011019:	0f b7 d8             	movzx  ebx,ax
c001101c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011020:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011023:	0f b7 c0             	movzx  eax,ax
c0011026:	83 ec 0c             	sub    esp,0xc
c0011029:	50                   	push   eax
c001102a:	e8 ed fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001102f:	83 c4 10             	add    esp,0x10
c0011032:	0f b7 c0             	movzx  eax,ax
c0011035:	c1 e8 08             	shr    eax,0x8
c0011038:	0f b7 c0             	movzx  eax,ax
c001103b:	83 e0 0f             	and    eax,0xf
c001103e:	83 c0 02             	add    eax,0x2
c0011041:	c1 e0 02             	shl    eax,0x2
c0011044:	39 c3                	cmp    ebx,eax
c0011046:	7c 3c                	jl     c0011084 <udp_input+0x90>
c0011048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001104c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001104f:	0f b7 c0             	movzx  eax,ax
c0011052:	83 ec 0c             	sub    esp,0xc
c0011055:	50                   	push   eax
c0011056:	e8 c1 fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001105b:	83 c4 10             	add    esp,0x10
c001105e:	0f b7 c0             	movzx  eax,ax
c0011061:	c1 e8 08             	shr    eax,0x8
c0011064:	83 e0 0f             	and    eax,0xf
c0011067:	c1 e0 02             	shl    eax,0x2
c001106a:	f7 d8                	neg    eax
c001106c:	98                   	cwde   
c001106d:	83 ec 08             	sub    esp,0x8
c0011070:	50                   	push   eax
c0011071:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011075:	e8 fa 72 ff ff       	call   c0008374 <pbuf_header>
c001107a:	83 c4 10             	add    esp,0x10
c001107d:	0f b6 c0             	movzx  eax,al
c0011080:	85 c0                	test   eax,eax
c0011082:	74 34                	je     c00110b8 <udp_input+0xc4>
c0011084:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c001108a:	83 c0 01             	add    eax,0x1
c001108d:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0011093:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011099:	83 c0 01             	add    eax,0x1
c001109c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110a9:	e8 66 74 ff ff       	call   c0008514 <pbuf_free>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	e9 aa 03 00 00       	jmp    c0011460 <udp_input+0x46c>
c00110b6:	66 90                	xchg   ax,ax
c00110b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00110c3:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110cf:	50                   	push   eax
c00110d0:	e8 e3 2f 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c00110d5:	83 c4 10             	add    esp,0x10
c00110d8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00110dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110e0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00110e3:	0f b7 c0             	movzx  eax,ax
c00110e6:	83 ec 0c             	sub    esp,0xc
c00110e9:	50                   	push   eax
c00110ea:	e8 2d fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00110f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110fb:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00110ff:	0f b7 c0             	movzx  eax,ax
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	50                   	push   eax
c0011106:	e8 11 fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001110b:	83 c4 10             	add    esp,0x10
c001110e:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0011113:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001111b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011120:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011128:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001112d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011131:	e9 0a 01 00 00       	jmp    c0011240 <udp_input+0x24c>
c0011136:	66 90                	xchg   ax,ax
c0011138:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001113d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011141:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011145:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001114a:	0f b7 c0             	movzx  eax,ax
c001114d:	39 c2                	cmp    edx,eax
c001114f:	75 57                	jne    c00111a8 <udp_input+0x1b4>
c0011151:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011156:	85 c0                	test   eax,eax
c0011158:	75 12                	jne    c001116c <udp_input+0x178>
c001115a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001115e:	85 c0                	test   eax,eax
c0011160:	74 22                	je     c0011184 <udp_input+0x190>
c0011162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011166:	8b 00                	mov    eax,DWORD PTR [eax]
c0011168:	85 c0                	test   eax,eax
c001116a:	74 18                	je     c0011184 <udp_input+0x190>
c001116c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011170:	8b 10                	mov    edx,DWORD PTR [eax]
c0011172:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011177:	39 c2                	cmp    edx,eax
c0011179:	74 09                	je     c0011184 <udp_input+0x190>
c001117b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011180:	85 c0                	test   eax,eax
c0011182:	74 24                	je     c00111a8 <udp_input+0x1b4>
c0011184:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0011189:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001118e:	75 18                	jne    c00111a8 <udp_input+0x1b4>
c0011190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011194:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011197:	0f b6 c0             	movzx  eax,al
c001119a:	83 e0 04             	and    eax,0x4
c001119d:	75 09                	jne    c00111a8 <udp_input+0x1b4>
c001119f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00111a7:	90                   	nop
c00111a8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00111ad:	85 c0                	test   eax,eax
c00111af:	74 7b                	je     c001122c <udp_input+0x238>
c00111b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111b5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00111b8:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00111bd:	0f b7 c0             	movzx  eax,ax
c00111c0:	39 c2                	cmp    edx,eax
c00111c2:	75 68                	jne    c001122c <udp_input+0x238>
c00111c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111c8:	83 c0 04             	add    eax,0x4
c00111cb:	74 1b                	je     c00111e8 <udp_input+0x1f4>
c00111cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111d4:	85 c0                	test   eax,eax
c00111d6:	74 10                	je     c00111e8 <udp_input+0x1f4>
c00111d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111df:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00111e4:	39 c2                	cmp    edx,eax
c00111e6:	75 44                	jne    c001122c <udp_input+0x238>
c00111e8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00111ed:	74 29                	je     c0011218 <udp_input+0x224>
c00111ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111f3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00111f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00111fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00111fd:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011207:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001120a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001120e:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011213:	eb 37                	jmp    c001124c <udp_input+0x258>
c0011215:	8d 76 00             	lea    esi,[esi+0x0]
c0011218:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c001121e:	83 c0 01             	add    eax,0x1
c0011221:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0011227:	eb 23                	jmp    c001124c <udp_input+0x258>
c0011229:	8d 76 00             	lea    esi,[esi+0x0]
c001122c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011234:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011238:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001123b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001123f:	90                   	nop
c0011240:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011245:	0f 85 ed fe ff ff    	jne    c0011138 <udp_input+0x144>
c001124b:	90                   	nop
c001124c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011251:	75 09                	jne    c001125c <udp_input+0x268>
c0011253:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011257:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001125b:	90                   	nop
c001125c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011261:	75 15                	jne    c0011278 <udp_input+0x284>
c0011263:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011267:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001126a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001126f:	39 c2                	cmp    edx,eax
c0011271:	0f 85 d9 01 00 00    	jne    c0011450 <udp_input+0x45c>
c0011277:	90                   	nop
c0011278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001127c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0011280:	0f b7 c0             	movzx  eax,ax
c0011283:	85 c0                	test   eax,eax
c0011285:	74 61                	je     c00112e8 <udp_input+0x2f4>
c0011287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001128b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001128e:	0f b7 c0             	movzx  eax,ax
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	50                   	push   eax
c0011295:	6a 11                	push   0x11
c0011297:	68 98 68 03 c0       	push   0xc0036898
c001129c:	68 90 68 03 c0       	push   0xc0036890
c00112a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00112a5:	e8 26 21 00 00       	call   c00133d0 <inet_chksum_pseudo>
c00112aa:	83 c4 20             	add    esp,0x20
c00112ad:	0f b7 c0             	movzx  eax,ax
c00112b0:	85 c0                	test   eax,eax
c00112b2:	74 34                	je     c00112e8 <udp_input+0x2f4>
c00112b4:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c00112ba:	83 c0 01             	add    eax,0x1
c00112bd:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c00112c3:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00112c9:	83 c0 01             	add    eax,0x1
c00112cc:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00112d2:	83 ec 0c             	sub    esp,0xc
c00112d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112d9:	e8 36 72 ff ff       	call   c0008514 <pbuf_free>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	e9 7a 01 00 00       	jmp    c0011460 <udp_input+0x46c>
c00112e6:	66 90                	xchg   ax,ax
c00112e8:	83 ec 08             	sub    esp,0x8
c00112eb:	6a f8                	push   0xfffffff8
c00112ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112f1:	e8 7e 70 ff ff       	call   c0008374 <pbuf_header>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	0f b6 c0             	movzx  eax,al
c00112fc:	85 c0                	test   eax,eax
c00112fe:	74 38                	je     c0011338 <udp_input+0x344>
c0011300:	83 ec 08             	sub    esp,0x8
c0011303:	68 89 0f 03 c0       	push   0xc0030f89
c0011308:	68 26 00 03 c0       	push   0xc0030026
c001130d:	e8 b2 eb 00 00       	call   c001fec4 <CPrintf>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001131b:	83 c0 01             	add    eax,0x1
c001131e:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011324:	83 ec 0c             	sub    esp,0xc
c0011327:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001132b:	e8 e4 71 ff ff       	call   c0008514 <pbuf_free>
c0011330:	83 c4 10             	add    esp,0x10
c0011333:	e9 28 01 00 00       	jmp    c0011460 <udp_input+0x46c>
c0011338:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001133d:	74 51                	je     c0011390 <udp_input+0x39c>
c001133f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011343:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011346:	85 c0                	test   eax,eax
c0011348:	74 32                	je     c001137c <udp_input+0x388>
c001134a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011351:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0011356:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001135a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001135d:	83 ec 0c             	sub    esp,0xc
c0011360:	51                   	push   ecx
c0011361:	68 90 68 03 c0       	push   0xc0036890
c0011366:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001136a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001136e:	52                   	push   edx
c001136f:	ff d0                	call   eax
c0011371:	83 c4 20             	add    esp,0x20
c0011374:	e9 e7 00 00 00       	jmp    c0011460 <udp_input+0x46c>
c0011379:	8d 76 00             	lea    esi,[esi+0x0]
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011383:	e8 8c 71 ff ff       	call   c0008514 <pbuf_free>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	e9 d0 00 00 00       	jmp    c0011460 <udp_input+0x46c>
c0011390:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011395:	85 c0                	test   eax,eax
c0011397:	0f 85 83 00 00 00    	jne    c0011420 <udp_input+0x42c>
c001139d:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00113a2:	25 f0 00 00 00       	and    eax,0xf0
c00113a7:	3d e0 00 00 00       	cmp    eax,0xe0
c00113ac:	74 72                	je     c0011420 <udp_input+0x42c>
c00113ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113b2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00113b5:	0f b7 c0             	movzx  eax,ax
c00113b8:	83 ec 0c             	sub    esp,0xc
c00113bb:	50                   	push   eax
c00113bc:	e8 5b f8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	0f b7 c0             	movzx  eax,ax
c00113c7:	c1 e8 08             	shr    eax,0x8
c00113ca:	0f b7 c0             	movzx  eax,ax
c00113cd:	83 e0 0f             	and    eax,0xf
c00113d0:	83 c0 02             	add    eax,0x2
c00113d3:	c1 e0 02             	shl    eax,0x2
c00113d6:	98                   	cwde   
c00113d7:	83 ec 08             	sub    esp,0x8
c00113da:	50                   	push   eax
c00113db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113df:	e8 90 6f ff ff       	call   c0008374 <pbuf_header>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ee:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00113f2:	74 18                	je     c001140c <udp_input+0x418>
c00113f4:	83 ec 08             	sub    esp,0x8
c00113f7:	68 9d 0f 03 c0       	push   0xc0030f9d
c00113fc:	68 26 00 03 c0       	push   0xc0030026
c0011401:	e8 be ea 00 00       	call   c001fec4 <CPrintf>
c0011406:	83 c4 10             	add    esp,0x10
c0011409:	8d 76 00             	lea    esi,[esi+0x0]
c001140c:	83 ec 08             	sub    esp,0x8
c001140f:	6a 03                	push   0x3
c0011411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011415:	e8 76 1e 00 00       	call   c0013290 <icmp_dest_unreach>
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	8d 76 00             	lea    esi,[esi+0x0]
c0011420:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c0011426:	83 c0 01             	add    eax,0x1
c0011429:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c001142f:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011435:	83 c0 01             	add    eax,0x1
c0011438:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011445:	e8 ca 70 ff ff       	call   c0008514 <pbuf_free>
c001144a:	83 c4 10             	add    esp,0x10
c001144d:	eb 11                	jmp    c0011460 <udp_input+0x46c>
c001144f:	90                   	nop
c0011450:	83 ec 0c             	sub    esp,0xc
c0011453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011457:	e8 b8 70 ff ff       	call   c0008514 <pbuf_free>
c001145c:	83 c4 10             	add    esp,0x10
c001145f:	90                   	nop
c0011460:	90                   	nop
c0011461:	83 c4 28             	add    esp,0x28
c0011464:	5b                   	pop    ebx
c0011465:	c3                   	ret    
c0011466:	66 90                	xchg   ax,ax

c0011468 <udp_bind>:
c0011468:	83 ec 2c             	sub    esp,0x2c
c001146b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001146f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011474:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011479:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001147e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011482:	e9 8d 00 00 00       	jmp    c0011514 <udp_bind+0xac>
c0011487:	90                   	nop
c0011488:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001148c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011490:	75 26                	jne    c00114b8 <udp_bind+0x50>
c0011492:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011497:	85 c0                	test   eax,eax
c0011499:	74 15                	je     c00114b0 <udp_bind+0x48>
c001149b:	83 ec 08             	sub    esp,0x8
c001149e:	68 b1 0f 03 c0       	push   0xc0030fb1
c00114a3:	68 26 00 03 c0       	push   0xc0030026
c00114a8:	e8 17 ea 00 00       	call   c001fec4 <CPrintf>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c00114b5:	eb 51                	jmp    c0011508 <udp_bind+0xa0>
c00114b7:	90                   	nop
c00114b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114bc:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00114c0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00114c5:	0f b7 c0             	movzx  eax,ax
c00114c8:	39 c2                	cmp    edx,eax
c00114ca:	75 3c                	jne    c0011508 <udp_bind+0xa0>
c00114cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d0:	85 c0                	test   eax,eax
c00114d2:	74 2c                	je     c0011500 <udp_bind+0x98>
c00114d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00114da:	85 c0                	test   eax,eax
c00114dc:	74 22                	je     c0011500 <udp_bind+0x98>
c00114de:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00114e3:	74 1b                	je     c0011500 <udp_bind+0x98>
c00114e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114eb:	85 c0                	test   eax,eax
c00114ed:	74 11                	je     c0011500 <udp_bind+0x98>
c00114ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00114f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fb:	39 c2                	cmp    edx,eax
c00114fd:	75 09                	jne    c0011508 <udp_bind+0xa0>
c00114ff:	90                   	nop
c0011500:	b0 f8                	mov    al,0xf8
c0011502:	e9 dd 00 00 00       	jmp    c00115e4 <udp_bind+0x17c>
c0011507:	90                   	nop
c0011508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001150c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001150f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011513:	90                   	nop
c0011514:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011519:	0f 85 69 ff ff ff    	jne    c0011488 <udp_bind+0x20>
c001151f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011524:	74 0a                	je     c0011530 <udp_bind+0xc8>
c0011526:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001152a:	8b 00                	mov    eax,DWORD PTR [eax]
c001152c:	eb 0a                	jmp    c0011538 <udp_bind+0xd0>
c001152e:	66 90                	xchg   ax,ax
c0011530:	b8 00 00 00 00       	mov    eax,0x0
c0011535:	8d 76 00             	lea    esi,[esi+0x0]
c0011538:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001153c:	89 02                	mov    DWORD PTR [edx],eax
c001153e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011543:	85 c0                	test   eax,eax
c0011545:	75 6d                	jne    c00115b4 <udp_bind+0x14c>
c0011547:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c001154e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011553:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011557:	eb 3b                	jmp    c0011594 <udp_bind+0x12c>
c0011559:	8d 76 00             	lea    esi,[esi+0x0]
c001155c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011560:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011564:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011569:	0f b7 c0             	movzx  eax,ax
c001156c:	39 c2                	cmp    edx,eax
c001156e:	75 18                	jne    c0011588 <udp_bind+0x120>
c0011570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011574:	83 c0 01             	add    eax,0x1
c0011577:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001157c:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011581:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011585:	eb 0d                	jmp    c0011594 <udp_bind+0x12c>
c0011587:	90                   	nop
c0011588:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001158c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001158f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011593:	90                   	nop
c0011594:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011599:	74 0d                	je     c00115a8 <udp_bind+0x140>
c001159b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00115a0:	3d ff ff 00 00       	cmp    eax,0xffff
c00115a5:	75 b5                	jne    c001155c <udp_bind+0xf4>
c00115a7:	90                   	nop
c00115a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00115ad:	74 05                	je     c00115b4 <udp_bind+0x14c>
c00115af:	b0 f8                	mov    al,0xf8
c00115b1:	eb 31                	jmp    c00115e4 <udp_bind+0x17c>
c00115b3:	90                   	nop
c00115b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115bc:	66 89 50 12          	mov    WORD PTR [eax+0x12],dx
c00115c0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00115c5:	85 c0                	test   eax,eax
c00115c7:	75 17                	jne    c00115e0 <udp_bind+0x178>
c00115c9:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c00115cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00115d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115da:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00115df:	90                   	nop
c00115e0:	b0 00                	mov    al,0x0
c00115e2:	66 90                	xchg   ax,ax
c00115e4:	83 c4 2c             	add    esp,0x2c
c00115e7:	c3                   	ret    

c00115e8 <udp_sendto_if>:
c00115e8:	83 ec 2c             	sub    esp,0x2c
c00115eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115ef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00115f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115f8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00115fc:	0f b7 c0             	movzx  eax,ax
c00115ff:	85 c0                	test   eax,eax
c0011601:	75 39                	jne    c001163c <udp_sendto_if+0x54>
c0011603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011607:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001160b:	0f b7 d0             	movzx  edx,ax
c001160e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011612:	83 ec 04             	sub    esp,0x4
c0011615:	52                   	push   edx
c0011616:	50                   	push   eax
c0011617:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001161b:	e8 48 fe ff ff       	call   c0011468 <udp_bind>
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011627:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c001162c:	85 c0                	test   eax,eax
c001162e:	74 0c                	je     c001163c <udp_sendto_if+0x54>
c0011630:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011634:	e9 2f 02 00 00       	jmp    c0011868 <udp_sendto_if+0x280>
c0011639:	8d 76 00             	lea    esi,[esi+0x0]
c001163c:	83 ec 08             	sub    esp,0x8
c001163f:	6a 08                	push   0x8
c0011641:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011645:	e8 2a 6d ff ff       	call   c0008374 <pbuf_header>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	0f b6 c0             	movzx  eax,al
c0011650:	85 c0                	test   eax,eax
c0011652:	74 48                	je     c001169c <udp_sendto_if+0xb4>
c0011654:	83 ec 04             	sub    esp,0x4
c0011657:	6a 00                	push   0x0
c0011659:	6a 08                	push   0x8
c001165b:	6a 01                	push   0x1
c001165d:	e8 8e 70 ff ff       	call   c00086f0 <pbuf_alloc>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011669:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001166e:	75 08                	jne    c0011678 <udp_sendto_if+0x90>
c0011670:	b0 ff                	mov    al,0xff
c0011672:	e9 f1 01 00 00       	jmp    c0011868 <udp_sendto_if+0x280>
c0011677:	90                   	nop
c0011678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001167c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001167f:	0f b7 c0             	movzx  eax,ax
c0011682:	85 c0                	test   eax,eax
c0011684:	74 1e                	je     c00116a4 <udp_sendto_if+0xbc>
c0011686:	83 ec 08             	sub    esp,0x8
c0011689:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001168d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011691:	e8 a2 77 ff ff       	call   c0008e38 <pbuf_chain>
c0011696:	83 c4 10             	add    esp,0x10
c0011699:	eb 09                	jmp    c00116a4 <udp_sendto_if+0xbc>
c001169b:	90                   	nop
c001169c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00116a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116a8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00116ac:	0f b7 c0             	movzx  eax,ax
c00116af:	83 f8 07             	cmp    eax,0x7
c00116b2:	77 18                	ja     c00116cc <udp_sendto_if+0xe4>
c00116b4:	83 ec 08             	sub    esp,0x8
c00116b7:	68 c0 0f 03 c0       	push   0xc0030fc0
c00116bc:	68 26 00 03 c0       	push   0xc0030026
c00116c1:	e8 fe e7 00 00       	call   c001fec4 <CPrintf>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	8d 76 00             	lea    esi,[esi+0x0]
c00116cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00116d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116db:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116df:	0f b7 c0             	movzx  eax,ax
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	50                   	push   eax
c00116e6:	e8 31 f5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	89 c2                	mov    edx,eax
c00116f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116f4:	66 89 10             	mov    WORD PTR [eax],dx
c00116f7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	50                   	push   eax
c0011700:	e8 17 f5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	89 c2                	mov    edx,eax
c001170a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001170e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0011712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011716:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001171c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011720:	85 c0                	test   eax,eax
c0011722:	74 0c                	je     c0011730 <udp_sendto_if+0x148>
c0011724:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011728:	8b 00                	mov    eax,DWORD PTR [eax]
c001172a:	85 c0                	test   eax,eax
c001172c:	75 12                	jne    c0011740 <udp_sendto_if+0x158>
c001172e:	66 90                	xchg   ax,ax
c0011730:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011734:	83 c0 04             	add    eax,0x4
c0011737:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001173b:	eb 47                	jmp    c0011784 <udp_sendto_if+0x19c>
c001173d:	8d 76 00             	lea    esi,[esi+0x0]
c0011740:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011744:	8b 10                	mov    edx,DWORD PTR [eax]
c0011746:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001174a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001174d:	39 c2                	cmp    edx,eax
c001174f:	74 2b                	je     c001177c <udp_sendto_if+0x194>
c0011751:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011755:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011759:	74 19                	je     c0011774 <udp_sendto_if+0x18c>
c001175b:	83 ec 0c             	sub    esp,0xc
c001175e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011762:	e8 ad 6d ff ff       	call   c0008514 <pbuf_free>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011772:	66 90                	xchg   ax,ax
c0011774:	b0 fa                	mov    al,0xfa
c0011776:	e9 ed 00 00 00       	jmp    c0011868 <udp_sendto_if+0x280>
c001177b:	90                   	nop
c001177c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011780:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011784:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011788:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001178b:	0f b7 c0             	movzx  eax,ax
c001178e:	83 ec 0c             	sub    esp,0xc
c0011791:	50                   	push   eax
c0011792:	e8 85 f4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	89 c2                	mov    edx,eax
c001179c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00117a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117a8:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117ab:	0f b6 c0             	movzx  eax,al
c00117ae:	83 e0 01             	and    eax,0x1
c00117b1:	75 49                	jne    c00117fc <udp_sendto_if+0x214>
c00117b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00117ba:	0f b7 c0             	movzx  eax,ax
c00117bd:	83 ec 0c             	sub    esp,0xc
c00117c0:	50                   	push   eax
c00117c1:	6a 11                	push   0x11
c00117c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00117c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117cf:	e8 fc 1b 00 00       	call   c00133d0 <inet_chksum_pseudo>
c00117d4:	83 c4 20             	add    esp,0x20
c00117d7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00117dc:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00117e1:	85 c0                	test   eax,eax
c00117e3:	75 07                	jne    c00117ec <udp_sendto_if+0x204>
c00117e5:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00117ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117f0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00117f5:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011800:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011803:	0f b6 d0             	movzx  edx,al
c0011806:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001180a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001180d:	0f b6 c0             	movzx  eax,al
c0011810:	83 ec 04             	sub    esp,0x4
c0011813:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011817:	6a 11                	push   0x11
c0011819:	52                   	push   edx
c001181a:	50                   	push   eax
c001181b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001181f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011823:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011827:	e8 08 25 00 00       	call   c0013d34 <ip_output_if>
c001182c:	83 c4 20             	add    esp,0x20
c001182f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011833:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011837:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001183b:	74 17                	je     c0011854 <udp_sendto_if+0x26c>
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011844:	e8 cb 6c ff ff       	call   c0008514 <pbuf_free>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011854:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c001185a:	83 c0 01             	add    eax,0x1
c001185d:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c0011863:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011867:	90                   	nop
c0011868:	83 c4 2c             	add    esp,0x2c
c001186b:	c3                   	ret    

c001186c <udp_sendto>:
c001186c:	83 ec 2c             	sub    esp,0x2c
c001186f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011873:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001187f:	e8 d8 1f 00 00       	call   c001385c <ip_route>
c0011884:	83 c4 10             	add    esp,0x10
c0011887:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001188b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011890:	75 16                	jne    c00118a8 <udp_sendto+0x3c>
c0011892:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c0011898:	83 c0 01             	add    eax,0x1
c001189b:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c00118a1:	b0 fc                	mov    al,0xfc
c00118a3:	eb 27                	jmp    c00118cc <udp_sendto+0x60>
c00118a5:	8d 76 00             	lea    esi,[esi+0x0]
c00118a8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00118ad:	83 ec 0c             	sub    esp,0xc
c00118b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00118b4:	50                   	push   eax
c00118b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118c1:	e8 22 fd ff ff       	call   c00115e8 <udp_sendto_if>
c00118c6:	83 c4 20             	add    esp,0x20
c00118c9:	8d 76 00             	lea    esi,[esi+0x0]
c00118cc:	83 c4 2c             	add    esp,0x2c
c00118cf:	c3                   	ret    

c00118d0 <udp_send>:
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00118da:	0f b7 c0             	movzx  eax,ax
c00118dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00118e1:	83 c2 04             	add    edx,0x4
c00118e4:	50                   	push   eax
c00118e5:	52                   	push   edx
c00118e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ee:	e8 79 ff ff ff       	call   c001186c <udp_sendto>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	83 c4 0c             	add    esp,0xc
c00118f9:	c3                   	ret    
c00118fa:	66 90                	xchg   ax,ax

c00118fc <udp_connect>:
c00118fc:	83 ec 2c             	sub    esp,0x2c
c00118ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011903:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011908:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011910:	0f b7 c0             	movzx  eax,ax
c0011913:	85 c0                	test   eax,eax
c0011915:	75 39                	jne    c0011950 <udp_connect+0x54>
c0011917:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001191f:	0f b7 d0             	movzx  edx,ax
c0011922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011926:	83 ec 04             	sub    esp,0x4
c0011929:	52                   	push   edx
c001192a:	50                   	push   eax
c001192b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001192f:	e8 34 fb ff ff       	call   c0011468 <udp_bind>
c0011934:	83 c4 10             	add    esp,0x10
c0011937:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001193b:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011940:	85 c0                	test   eax,eax
c0011942:	74 0c                	je     c0011950 <udp_connect+0x54>
c0011944:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011948:	e9 8b 00 00 00       	jmp    c00119d8 <udp_connect+0xdc>
c001194d:	8d 76 00             	lea    esi,[esi+0x0]
c0011950:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011955:	74 09                	je     c0011960 <udp_connect+0x64>
c0011957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001195b:	8b 00                	mov    eax,DWORD PTR [eax]
c001195d:	eb 09                	jmp    c0011968 <udp_connect+0x6c>
c001195f:	90                   	nop
c0011960:	b8 00 00 00 00       	mov    eax,0x0
c0011965:	8d 76 00             	lea    esi,[esi+0x0]
c0011968:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001196c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001196f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011973:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011977:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
c001197b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001197f:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011982:	83 c8 04             	or     eax,0x4
c0011985:	88 c2                	mov    dl,al
c0011987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001198b:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c001198e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011993:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011997:	eb 1f                	jmp    c00119b8 <udp_connect+0xbc>
c0011999:	8d 76 00             	lea    esi,[esi+0x0]
c001199c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119a0:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00119a4:	75 06                	jne    c00119ac <udp_connect+0xb0>
c00119a6:	b0 00                	mov    al,0x0
c00119a8:	eb 2e                	jmp    c00119d8 <udp_connect+0xdc>
c00119aa:	66 90                	xchg   ax,ax
c00119ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119b7:	90                   	nop
c00119b8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00119bd:	75 dd                	jne    c001199c <udp_connect+0xa0>
c00119bf:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c00119c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119d0:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00119d5:	b0 00                	mov    al,0x0
c00119d7:	90                   	nop
c00119d8:	83 c4 2c             	add    esp,0x2c
c00119db:	c3                   	ret    

c00119dc <udp_disconnect>:
c00119dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119eb:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00119f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119f5:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00119f8:	83 e0 fb             	and    eax,0xfffffffb
c00119fb:	88 c2                	mov    dl,al
c00119fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a01:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011a04:	90                   	nop
c0011a05:	c3                   	ret    
c0011a06:	66 90                	xchg   ax,ax

c0011a08 <udp_recv>:
c0011a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011a13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a1b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011a1e:	90                   	nop
c0011a1f:	c3                   	ret    

c0011a20 <udp_remove>:
c0011a20:	83 ec 1c             	sub    esp,0x1c
c0011a23:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011a28:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011a2c:	75 12                	jne    c0011a40 <udp_remove+0x20>
c0011a2e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011a33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a36:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011a3b:	eb 4b                	jmp    c0011a88 <udp_remove+0x68>
c0011a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a40:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011a45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a49:	eb 35                	jmp    c0011a80 <udp_remove+0x60>
c0011a4b:	90                   	nop
c0011a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a53:	85 c0                	test   eax,eax
c0011a55:	74 1d                	je     c0011a74 <udp_remove+0x54>
c0011a57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a5e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011a62:	75 10                	jne    c0011a74 <udp_remove+0x54>
c0011a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a68:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011a6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a6f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011a72:	66 90                	xchg   ax,ax
c0011a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a7f:	90                   	nop
c0011a80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011a85:	75 c5                	jne    c0011a4c <udp_remove+0x2c>
c0011a87:	90                   	nop
c0011a88:	83 ec 08             	sub    esp,0x8
c0011a8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011a8f:	6a 01                	push   0x1
c0011a91:	e8 be 61 ff ff       	call   c0007c54 <memp_free>
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	90                   	nop
c0011a9a:	83 c4 1c             	add    esp,0x1c
c0011a9d:	c3                   	ret    
c0011a9e:	66 90                	xchg   ax,ax

c0011aa0 <udp_new>:
c0011aa0:	83 ec 1c             	sub    esp,0x1c
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	6a 01                	push   0x1
c0011aa8:	e8 7b 60 ff ff       	call   c0007b28 <memp_malloc>
c0011aad:	83 c4 10             	add    esp,0x10
c0011ab0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ab4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011ab9:	74 1d                	je     c0011ad8 <udp_new+0x38>
c0011abb:	83 ec 04             	sub    esp,0x4
c0011abe:	6a 20                	push   0x20
c0011ac0:	6a 00                	push   0x0
c0011ac2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ac6:	e8 25 ea fe ff       	call   c00004f0 <memset>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ad2:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011ad6:	66 90                	xchg   ax,ax
c0011ad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011adc:	83 c4 1c             	add    esp,0x1c
c0011adf:	c3                   	ret    

c0011ae0 <free_entry>:
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ae7:	c1 e0 04             	shl    eax,0x4
c0011aea:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011af1:	85 c0                	test   eax,eax
c0011af3:	74 2f                	je     c0011b24 <free_entry+0x44>
c0011af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011af9:	c1 e0 04             	shl    eax,0x4
c0011afc:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b03:	83 ec 0c             	sub    esp,0xc
c0011b06:	50                   	push   eax
c0011b07:	e8 08 6a ff ff       	call   c0008514 <pbuf_free>
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b13:	c1 e0 04             	shl    eax,0x4
c0011b16:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011b1b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011b21:	8d 76 00             	lea    esi,[esi+0x0]
c0011b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b28:	c1 e0 04             	shl    eax,0x4
c0011b2b:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011b30:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011b33:	90                   	nop
c0011b34:	83 c4 0c             	add    esp,0xc
c0011b37:	c3                   	ret    

c0011b38 <etharp_tmr>:
c0011b38:	83 ec 1c             	sub    esp,0x1c
c0011b3b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b40:	e9 a7 00 00 00       	jmp    c0011bec <etharp_tmr+0xb4>
c0011b45:	8d 76 00             	lea    esi,[esi+0x0]
c0011b48:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b4d:	c1 e0 04             	shl    eax,0x4
c0011b50:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011b55:	8a 00                	mov    al,BYTE PTR [eax]
c0011b57:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011b5b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011b60:	85 c0                	test   eax,eax
c0011b62:	74 7c                	je     c0011be0 <etharp_tmr+0xa8>
c0011b64:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b69:	89 c2                	mov    edx,eax
c0011b6b:	c1 e2 04             	shl    edx,0x4
c0011b6e:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011b74:	8a 12                	mov    dl,BYTE PTR [edx]
c0011b76:	83 c2 01             	add    edx,0x1
c0011b79:	c1 e0 04             	shl    eax,0x4
c0011b7c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b81:	88 10                	mov    BYTE PTR [eax],dl
c0011b83:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b88:	c1 e0 04             	shl    eax,0x4
c0011b8b:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b90:	8a 00                	mov    al,BYTE PTR [eax]
c0011b92:	0f b6 c0             	movzx  eax,al
c0011b95:	3d ef 00 00 00       	cmp    eax,0xef
c0011b9a:	77 30                	ja     c0011bcc <etharp_tmr+0x94>
c0011b9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011ba1:	c1 e0 04             	shl    eax,0x4
c0011ba4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ba9:	8a 00                	mov    al,BYTE PTR [eax]
c0011bab:	0f b6 c0             	movzx  eax,al
c0011bae:	83 f8 01             	cmp    eax,0x1
c0011bb1:	75 2d                	jne    c0011be0 <etharp_tmr+0xa8>
c0011bb3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bb8:	c1 e0 04             	shl    eax,0x4
c0011bbb:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011bc0:	8a 00                	mov    al,BYTE PTR [eax]
c0011bc2:	0f b6 c0             	movzx  eax,al
c0011bc5:	83 f8 01             	cmp    eax,0x1
c0011bc8:	76 16                	jbe    c0011be0 <etharp_tmr+0xa8>
c0011bca:	66 90                	xchg   ax,ax
c0011bcc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bd1:	83 ec 0c             	sub    esp,0xc
c0011bd4:	50                   	push   eax
c0011bd5:	e8 06 ff ff ff       	call   c0011ae0 <free_entry>
c0011bda:	83 c4 10             	add    esp,0x10
c0011bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0011be0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011be4:	83 c0 01             	add    eax,0x1
c0011be7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011beb:	90                   	nop
c0011bec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bf1:	83 f8 09             	cmp    eax,0x9
c0011bf4:	0f 86 4e ff ff ff    	jbe    c0011b48 <etharp_tmr+0x10>
c0011bfa:	90                   	nop
c0011bfb:	83 c4 1c             	add    esp,0x1c
c0011bfe:	c3                   	ret    
c0011bff:	90                   	nop

c0011c00 <find_entry>:
c0011c00:	83 ec 2c             	sub    esp,0x2c
c0011c03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011c0b:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011c10:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011c15:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011c1a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011c1f:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011c24:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011c29:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011c2e:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011c33:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011c38:	e9 7f 01 00 00       	jmp    c0011dbc <find_entry+0x1bc>
c0011c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c40:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c45:	c1 e0 04             	shl    eax,0x4
c0011c48:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011c4d:	8a 00                	mov    al,BYTE PTR [eax]
c0011c4f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011c53:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011c58:	83 f8 0a             	cmp    eax,0xa
c0011c5b:	75 17                	jne    c0011c74 <find_entry+0x74>
c0011c5d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c62:	85 c0                	test   eax,eax
c0011c64:	75 0e                	jne    c0011c74 <find_entry+0x74>
c0011c66:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c6a:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011c6e:	e9 3d 01 00 00       	jmp    c0011db0 <find_entry+0x1b0>
c0011c73:	90                   	nop
c0011c74:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c79:	85 c0                	test   eax,eax
c0011c7b:	0f 84 2f 01 00 00    	je     c0011db0 <find_entry+0x1b0>
c0011c81:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c86:	83 f8 01             	cmp    eax,0x1
c0011c89:	74 21                	je     c0011cac <find_entry+0xac>
c0011c8b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c90:	83 f8 02             	cmp    eax,0x2
c0011c93:	74 17                	je     c0011cac <find_entry+0xac>
c0011c95:	83 ec 08             	sub    esp,0x8
c0011c98:	68 f0 0f 03 c0       	push   0xc0030ff0
c0011c9d:	68 26 00 03 c0       	push   0xc0030026
c0011ca2:	e8 1d e2 00 00       	call   c001fec4 <CPrintf>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	66 90                	xchg   ax,ax
c0011cac:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011cb1:	74 25                	je     c0011cd8 <find_entry+0xd8>
c0011cb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cb9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cbe:	c1 e0 04             	shl    eax,0x4
c0011cc1:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc8:	39 c2                	cmp    edx,eax
c0011cca:	75 0c                	jne    c0011cd8 <find_entry+0xd8>
c0011ccc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011cd0:	e9 53 02 00 00       	jmp    c0011f28 <find_entry+0x328>
c0011cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011cdd:	83 f8 01             	cmp    eax,0x1
c0011ce0:	0f 85 8a 00 00 00    	jne    c0011d70 <find_entry+0x170>
c0011ce6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ceb:	c1 e0 04             	shl    eax,0x4
c0011cee:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf5:	85 c0                	test   eax,eax
c0011cf7:	74 3f                	je     c0011d38 <find_entry+0x138>
c0011cf9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cfe:	c1 e0 04             	shl    eax,0x4
c0011d01:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d06:	8a 00                	mov    al,BYTE PTR [eax]
c0011d08:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011d0d:	0f b6 c0             	movzx  eax,al
c0011d10:	39 c2                	cmp    edx,eax
c0011d12:	0f 87 98 00 00 00    	ja     c0011db0 <find_entry+0x1b0>
c0011d18:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d1c:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011d20:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d25:	c1 e0 04             	shl    eax,0x4
c0011d28:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d2d:	8a 00                	mov    al,BYTE PTR [eax]
c0011d2f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011d33:	eb 7b                	jmp    c0011db0 <find_entry+0x1b0>
c0011d35:	8d 76 00             	lea    esi,[esi+0x0]
c0011d38:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d3d:	c1 e0 04             	shl    eax,0x4
c0011d40:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d45:	8a 00                	mov    al,BYTE PTR [eax]
c0011d47:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011d4c:	0f b6 c0             	movzx  eax,al
c0011d4f:	39 c2                	cmp    edx,eax
c0011d51:	77 5d                	ja     c0011db0 <find_entry+0x1b0>
c0011d53:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d57:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011d5b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d60:	c1 e0 04             	shl    eax,0x4
c0011d63:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d68:	8a 00                	mov    al,BYTE PTR [eax]
c0011d6a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011d6e:	eb 40                	jmp    c0011db0 <find_entry+0x1b0>
c0011d70:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011d75:	83 f8 02             	cmp    eax,0x2
c0011d78:	75 36                	jne    c0011db0 <find_entry+0x1b0>
c0011d7a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d7f:	c1 e0 04             	shl    eax,0x4
c0011d82:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d87:	8a 00                	mov    al,BYTE PTR [eax]
c0011d89:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011d8e:	0f b6 c0             	movzx  eax,al
c0011d91:	39 c2                	cmp    edx,eax
c0011d93:	77 1b                	ja     c0011db0 <find_entry+0x1b0>
c0011d95:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d99:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011d9d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011da2:	c1 e0 04             	shl    eax,0x4
c0011da5:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011daa:	8a 00                	mov    al,BYTE PTR [eax]
c0011dac:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011db0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011db4:	83 c0 01             	add    eax,0x1
c0011db7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011dbb:	90                   	nop
c0011dbc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011dc1:	83 f8 09             	cmp    eax,0x9
c0011dc4:	0f 86 76 fe ff ff    	jbe    c0011c40 <find_entry+0x40>
c0011dca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011dcf:	83 e0 02             	and    eax,0x2
c0011dd2:	75 14                	jne    c0011de8 <find_entry+0x1e8>
c0011dd4:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011dd9:	83 f8 0a             	cmp    eax,0xa
c0011ddc:	75 12                	jne    c0011df0 <find_entry+0x1f0>
c0011dde:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011de3:	83 e0 01             	and    eax,0x1
c0011de6:	75 08                	jne    c0011df0 <find_entry+0x1f0>
c0011de8:	b0 ff                	mov    al,0xff
c0011dea:	e9 39 01 00 00       	jmp    c0011f28 <find_entry+0x328>
c0011def:	90                   	nop
c0011df0:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011df5:	83 f8 09             	cmp    eax,0x9
c0011df8:	7f 0e                	jg     c0011e08 <find_entry+0x208>
c0011dfa:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011dfe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e02:	e9 a1 00 00 00       	jmp    c0011ea8 <find_entry+0x2a8>
c0011e07:	90                   	nop
c0011e08:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011e0d:	83 f8 09             	cmp    eax,0x9
c0011e10:	7f 32                	jg     c0011e44 <find_entry+0x244>
c0011e12:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011e16:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e1a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e1f:	c1 e0 04             	shl    eax,0x4
c0011e22:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e29:	85 c0                	test   eax,eax
c0011e2b:	74 47                	je     c0011e74 <find_entry+0x274>
c0011e2d:	83 ec 08             	sub    esp,0x8
c0011e30:	68 69 11 03 c0       	push   0xc0031169
c0011e35:	68 26 00 03 c0       	push   0xc0030026
c0011e3a:	e8 85 e0 00 00       	call   c001fec4 <CPrintf>
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	eb 30                	jmp    c0011e74 <find_entry+0x274>
c0011e44:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e49:	83 f8 09             	cmp    eax,0x9
c0011e4c:	7f 0a                	jg     c0011e58 <find_entry+0x258>
c0011e4e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011e52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e56:	eb 1c                	jmp    c0011e74 <find_entry+0x274>
c0011e58:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011e5d:	83 f8 09             	cmp    eax,0x9
c0011e60:	7f 0a                	jg     c0011e6c <find_entry+0x26c>
c0011e62:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011e66:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e6a:	eb 08                	jmp    c0011e74 <find_entry+0x274>
c0011e6c:	b0 ff                	mov    al,0xff
c0011e6e:	e9 b5 00 00 00       	jmp    c0011f28 <find_entry+0x328>
c0011e73:	90                   	nop
c0011e74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e79:	83 f8 09             	cmp    eax,0x9
c0011e7c:	76 16                	jbe    c0011e94 <find_entry+0x294>
c0011e7e:	83 ec 08             	sub    esp,0x8
c0011e81:	68 80 11 03 c0       	push   0xc0031180
c0011e86:	68 26 00 03 c0       	push   0xc0030026
c0011e8b:	e8 34 e0 00 00       	call   c001fec4 <CPrintf>
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	90                   	nop
c0011e94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e99:	83 ec 0c             	sub    esp,0xc
c0011e9c:	50                   	push   eax
c0011e9d:	e8 3e fc ff ff       	call   c0011ae0 <free_entry>
c0011ea2:	83 c4 10             	add    esp,0x10
c0011ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ea8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ead:	83 f8 09             	cmp    eax,0x9
c0011eb0:	76 16                	jbe    c0011ec8 <find_entry+0x2c8>
c0011eb2:	83 ec 08             	sub    esp,0x8
c0011eb5:	68 80 11 03 c0       	push   0xc0031180
c0011eba:	68 26 00 03 c0       	push   0xc0030026
c0011ebf:	e8 00 e0 00 00       	call   c001fec4 <CPrintf>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	90                   	nop
c0011ec8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ecd:	c1 e0 04             	shl    eax,0x4
c0011ed0:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ed5:	8a 00                	mov    al,BYTE PTR [eax]
c0011ed7:	0f b6 c0             	movzx  eax,al
c0011eda:	85 c0                	test   eax,eax
c0011edc:	74 16                	je     c0011ef4 <find_entry+0x2f4>
c0011ede:	83 ec 08             	sub    esp,0x8
c0011ee1:	68 30 10 03 c0       	push   0xc0031030
c0011ee6:	68 26 00 03 c0       	push   0xc0030026
c0011eeb:	e8 d4 df 00 00       	call   c001fec4 <CPrintf>
c0011ef0:	83 c4 10             	add    esp,0x10
c0011ef3:	90                   	nop
c0011ef4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011ef9:	74 19                	je     c0011f14 <find_entry+0x314>
c0011efb:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011f00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f06:	c1 e2 04             	shl    edx,0x4
c0011f09:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011f0f:	89 02                	mov    DWORD PTR [edx],eax
c0011f11:	8d 76 00             	lea    esi,[esi+0x0]
c0011f14:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011f19:	c1 e0 04             	shl    eax,0x4
c0011f1c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011f21:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011f24:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011f28:	83 c4 2c             	add    esp,0x2c
c0011f2b:	c3                   	ret    

c0011f2c <etharp_send_ip>:
c0011f2c:	83 ec 1c             	sub    esp,0x1c
c0011f2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011f33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f3e:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011f41:	0f b6 c0             	movzx  eax,al
c0011f44:	83 f8 06             	cmp    eax,0x6
c0011f47:	74 17                	je     c0011f60 <etharp_send_ip+0x34>
c0011f49:	83 ec 08             	sub    esp,0x8
c0011f4c:	68 5c 10 03 c0       	push   0xc003105c
c0011f51:	68 26 00 03 c0       	push   0xc0030026
c0011f56:	e8 69 df 00 00       	call   c001fec4 <CPrintf>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	66 90                	xchg   ax,ax
c0011f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f64:	83 ec 04             	sub    esp,0x4
c0011f67:	6a 06                	push   0x6
c0011f69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f6d:	50                   	push   eax
c0011f6e:	e8 07 e4 fe ff       	call   c000037a <memcpy>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f7a:	83 c0 06             	add    eax,0x6
c0011f7d:	83 ec 04             	sub    esp,0x4
c0011f80:	6a 06                	push   0x6
c0011f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011f86:	50                   	push   eax
c0011f87:	e8 ee e3 fe ff       	call   c000037a <memcpy>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f93:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f9d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011fa0:	83 ec 08             	sub    esp,0x8
c0011fa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011fa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011fab:	ff d0                	call   eax
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	83 c4 1c             	add    esp,0x1c
c0011fb3:	c3                   	ret    

c0011fb4 <update_arp_entry>:
c0011fb4:	83 ec 2c             	sub    esp,0x2c
c0011fb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fbb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011fbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fc3:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011fc6:	0f b6 c0             	movzx  eax,al
c0011fc9:	83 f8 06             	cmp    eax,0x6
c0011fcc:	74 16                	je     c0011fe4 <update_arp_entry+0x30>
c0011fce:	83 ec 08             	sub    esp,0x8
c0011fd1:	68 a0 10 03 c0       	push   0xc00310a0
c0011fd6:	68 26 00 03 c0       	push   0xc0030026
c0011fdb:	e8 e4 de 00 00       	call   c001fec4 <CPrintf>
c0011fe0:	83 c4 10             	add    esp,0x10
c0011fe3:	90                   	nop
c0011fe4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011fe9:	74 39                	je     c0012024 <update_arp_entry+0x70>
c0011feb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff1:	85 c0                	test   eax,eax
c0011ff3:	74 2f                	je     c0012024 <update_arp_entry+0x70>
c0011ff5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ffb:	83 ec 08             	sub    esp,0x8
c0011ffe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012002:	50                   	push   eax
c0012003:	e8 b0 20 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0012008:	83 c4 10             	add    esp,0x10
c001200b:	0f b6 c0             	movzx  eax,al
c001200e:	85 c0                	test   eax,eax
c0012010:	75 12                	jne    c0012024 <update_arp_entry+0x70>
c0012012:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012016:	8b 00                	mov    eax,DWORD PTR [eax]
c0012018:	25 f0 00 00 00       	and    eax,0xf0
c001201d:	3d e0 00 00 00       	cmp    eax,0xe0
c0012022:	75 08                	jne    c001202c <update_arp_entry+0x78>
c0012024:	b0 f2                	mov    al,0xf2
c0012026:	e9 d9 00 00 00       	jmp    c0012104 <update_arp_entry+0x150>
c001202b:	90                   	nop
c001202c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0012031:	83 ec 08             	sub    esp,0x8
c0012034:	50                   	push   eax
c0012035:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012039:	e8 c2 fb ff ff       	call   c0011c00 <find_entry>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012045:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001204a:	85 c0                	test   eax,eax
c001204c:	79 0a                	jns    c0012058 <update_arp_entry+0xa4>
c001204e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012052:	e9 ad 00 00 00       	jmp    c0012104 <update_arp_entry+0x150>
c0012057:	90                   	nop
c0012058:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001205d:	c1 e0 04             	shl    eax,0x4
c0012060:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012065:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0012068:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001206d:	c1 e0 04             	shl    eax,0x4
c0012070:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012075:	83 c0 08             	add    eax,0x8
c0012078:	83 ec 04             	sub    esp,0x4
c001207b:	6a 06                	push   0x6
c001207d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012081:	50                   	push   eax
c0012082:	e8 f3 e2 fe ff       	call   c000037a <memcpy>
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001208f:	c1 e0 04             	shl    eax,0x4
c0012092:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0012097:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001209a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001209f:	c1 e0 04             	shl    eax,0x4
c00120a2:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00120a9:	85 c0                	test   eax,eax
c00120ab:	74 53                	je     c0012100 <update_arp_entry+0x14c>
c00120ad:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c00120b2:	c1 e0 04             	shl    eax,0x4
c00120b5:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00120bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120c0:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c00120c5:	c1 e0 04             	shl    eax,0x4
c00120c8:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120d7:	83 c0 23             	add    eax,0x23
c00120da:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00120de:	50                   	push   eax
c00120df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120e7:	e8 40 fe ff ff       	call   c0011f2c <etharp_send_ip>
c00120ec:	83 c4 10             	add    esp,0x10
c00120ef:	83 ec 0c             	sub    esp,0xc
c00120f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00120f6:	e8 19 64 ff ff       	call   c0008514 <pbuf_free>
c00120fb:	83 c4 10             	add    esp,0x10
c00120fe:	66 90                	xchg   ax,ax
c0012100:	b0 00                	mov    al,0x0
c0012102:	66 90                	xchg   ax,ax
c0012104:	83 c4 2c             	add    esp,0x2c
c0012107:	c3                   	ret    

c0012108 <etharp_find_addr>:
c0012108:	83 ec 1c             	sub    esp,0x1c
c001210b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012110:	74 0a                	je     c001211c <etharp_find_addr+0x14>
c0012112:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0012117:	75 1b                	jne    c0012134 <etharp_find_addr+0x2c>
c0012119:	8d 76 00             	lea    esi,[esi+0x0]
c001211c:	83 ec 08             	sub    esp,0x8
c001211f:	68 c8 10 03 c0       	push   0xc00310c8
c0012124:	68 26 00 03 c0       	push   0xc0030026
c0012129:	e8 96 dd 00 00       	call   c001fec4 <CPrintf>
c001212e:	83 c4 10             	add    esp,0x10
c0012131:	8d 76 00             	lea    esi,[esi+0x0]
c0012134:	83 ec 08             	sub    esp,0x8
c0012137:	6a 02                	push   0x2
c0012139:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001213d:	e8 be fa ff ff       	call   c0011c00 <find_entry>
c0012142:	83 c4 10             	add    esp,0x10
c0012145:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012149:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001214e:	85 c0                	test   eax,eax
c0012150:	78 4a                	js     c001219c <etharp_find_addr+0x94>
c0012152:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012157:	c1 e0 04             	shl    eax,0x4
c001215a:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001215f:	8a 00                	mov    al,BYTE PTR [eax]
c0012161:	0f b6 c0             	movzx  eax,al
c0012164:	83 f8 02             	cmp    eax,0x2
c0012167:	75 33                	jne    c001219c <etharp_find_addr+0x94>
c0012169:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001216e:	c1 e0 04             	shl    eax,0x4
c0012171:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012176:	8d 50 08             	lea    edx,[eax+0x8]
c0012179:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001217d:	89 10                	mov    DWORD PTR [eax],edx
c001217f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012184:	c1 e0 04             	shl    eax,0x4
c0012187:	05 00 a9 03 c0       	add    eax,0xc003a900
c001218c:	8d 50 04             	lea    edx,[eax+0x4]
c001218f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012193:	89 10                	mov    DWORD PTR [eax],edx
c0012195:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012199:	eb 05                	jmp    c00121a0 <etharp_find_addr+0x98>
c001219b:	90                   	nop
c001219c:	b0 ff                	mov    al,0xff
c001219e:	66 90                	xchg   ax,ax
c00121a0:	83 c4 1c             	add    esp,0x1c
c00121a3:	c3                   	ret    

c00121a4 <etharp_arp_input>:
c00121a4:	83 ec 2c             	sub    esp,0x2c
c00121a7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00121ac:	75 1a                	jne    c00121c8 <etharp_arp_input+0x24>
c00121ae:	83 ec 08             	sub    esp,0x8
c00121b1:	68 93 11 03 c0       	push   0xc0031193
c00121b6:	68 26 00 03 c0       	push   0xc0030026
c00121bb:	e8 04 dd 00 00       	call   c001fec4 <CPrintf>
c00121c0:	83 c4 10             	add    esp,0x10
c00121c3:	e9 d4 02 00 00       	jmp    c001249c <etharp_arp_input+0x2f8>
c00121c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00121cc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00121d0:	0f b7 c0             	movzx  eax,ax
c00121d3:	83 f8 29             	cmp    eax,0x29
c00121d6:	77 34                	ja     c001220c <etharp_arp_input+0x68>
c00121d8:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c00121de:	83 c0 01             	add    eax,0x1
c00121e1:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c00121e7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00121ed:	83 c0 01             	add    eax,0x1
c00121f0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00121f6:	83 ec 0c             	sub    esp,0xc
c00121f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00121fd:	e8 12 63 ff ff       	call   c0008514 <pbuf_free>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	e9 92 02 00 00       	jmp    c001249c <etharp_arp_input+0x2f8>
c001220a:	66 90                	xchg   ax,ax
c001220c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012210:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012213:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012217:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001221b:	83 c0 0e             	add    eax,0xe
c001221e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012222:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012226:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012229:	0f b7 c0             	movzx  eax,ax
c001222c:	3d 00 01 00 00       	cmp    eax,0x100
c0012231:	75 31                	jne    c0012264 <etharp_arp_input+0xc0>
c0012233:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012237:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c001223a:	0f b6 c0             	movzx  eax,al
c001223d:	83 f8 06             	cmp    eax,0x6
c0012240:	75 22                	jne    c0012264 <etharp_arp_input+0xc0>
c0012242:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012246:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0012249:	0f b6 c0             	movzx  eax,al
c001224c:	83 f8 04             	cmp    eax,0x4
c001224f:	75 13                	jne    c0012264 <etharp_arp_input+0xc0>
c0012251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012255:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012259:	0f b7 c0             	movzx  eax,ax
c001225c:	83 f8 08             	cmp    eax,0x8
c001225f:	74 37                	je     c0012298 <etharp_arp_input+0xf4>
c0012261:	8d 76 00             	lea    esi,[esi+0x0]
c0012264:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c001226a:	83 c0 01             	add    eax,0x1
c001226d:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012273:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012279:	83 c0 01             	add    eax,0x1
c001227c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012289:	e8 86 62 ff ff       	call   c0008514 <pbuf_free>
c001228e:	83 c4 10             	add    esp,0x10
c0012291:	e9 06 02 00 00       	jmp    c001249c <etharp_arp_input+0x2f8>
c0012296:	66 90                	xchg   ax,ax
c0012298:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c001229e:	83 c0 01             	add    eax,0x1
c00122a1:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c00122a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122ab:	83 c0 0e             	add    eax,0xe
c00122ae:	83 ec 04             	sub    esp,0x4
c00122b1:	6a 04                	push   0x4
c00122b3:	50                   	push   eax
c00122b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00122b8:	50                   	push   eax
c00122b9:	e8 bc e0 fe ff       	call   c000037a <memcpy>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122c5:	83 c0 18             	add    eax,0x18
c00122c8:	83 ec 04             	sub    esp,0x4
c00122cb:	6a 04                	push   0x4
c00122cd:	50                   	push   eax
c00122ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00122d2:	50                   	push   eax
c00122d3:	e8 a2 e0 fe ff       	call   c000037a <memcpy>
c00122d8:	83 c4 10             	add    esp,0x10
c00122db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122df:	83 c0 04             	add    eax,0x4
c00122e2:	74 0c                	je     c00122f0 <etharp_arp_input+0x14c>
c00122e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122eb:	85 c0                	test   eax,eax
c00122ed:	75 09                	jne    c00122f8 <etharp_arp_input+0x154>
c00122ef:	90                   	nop
c00122f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00122f5:	eb 15                	jmp    c001230c <etharp_arp_input+0x168>
c00122f7:	90                   	nop
c00122f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012303:	39 c2                	cmp    edx,eax
c0012305:	0f 94 c0             	sete   al
c0012308:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001230c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012311:	85 c0                	test   eax,eax
c0012313:	74 07                	je     c001231c <etharp_arp_input+0x178>
c0012315:	b8 01 00 00 00       	mov    eax,0x1
c001231a:	eb 08                	jmp    c0012324 <etharp_arp_input+0x180>
c001231c:	b8 02 00 00 00       	mov    eax,0x2
c0012321:	8d 76 00             	lea    esi,[esi+0x0]
c0012324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012328:	83 c2 08             	add    edx,0x8
c001232b:	50                   	push   eax
c001232c:	52                   	push   edx
c001232d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012331:	50                   	push   eax
c0012332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012336:	e8 79 fc ff ff       	call   c0011fb4 <update_arp_entry>
c001233b:	83 c4 10             	add    esp,0x10
c001233e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012342:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0012346:	0f b7 c0             	movzx  eax,ax
c0012349:	3d 00 01 00 00       	cmp    eax,0x100
c001234e:	74 10                	je     c0012360 <etharp_arp_input+0x1bc>
c0012350:	3d 00 02 00 00       	cmp    eax,0x200
c0012355:	0f 84 2d 01 00 00    	je     c0012488 <etharp_arp_input+0x2e4>
c001235b:	e9 14 01 00 00       	jmp    c0012474 <etharp_arp_input+0x2d0>
c0012360:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012365:	85 c0                	test   eax,eax
c0012367:	0f 84 fb 00 00 00    	je     c0012468 <etharp_arp_input+0x2c4>
c001236d:	83 ec 0c             	sub    esp,0xc
c0012370:	6a 02                	push   0x2
c0012372:	e8 a5 e8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	89 c2                	mov    edx,eax
c001237c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012380:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0012384:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012388:	8d 50 0e             	lea    edx,[eax+0xe]
c001238b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001238f:	83 c0 18             	add    eax,0x18
c0012392:	83 ec 04             	sub    esp,0x4
c0012395:	6a 04                	push   0x4
c0012397:	52                   	push   edx
c0012398:	50                   	push   eax
c0012399:	e8 dc df fe ff       	call   c000037a <memcpy>
c001239e:	83 c4 10             	add    esp,0x10
c00123a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a5:	8d 50 04             	lea    edx,[eax+0x4]
c00123a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ac:	83 c0 0e             	add    eax,0xe
c00123af:	83 ec 04             	sub    esp,0x4
c00123b2:	6a 04                	push   0x4
c00123b4:	52                   	push   edx
c00123b5:	50                   	push   eax
c00123b6:	e8 bf df fe ff       	call   c000037a <memcpy>
c00123bb:	83 c4 10             	add    esp,0x10
c00123be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123c2:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00123c5:	0f b6 c0             	movzx  eax,al
c00123c8:	83 f8 06             	cmp    eax,0x6
c00123cb:	74 17                	je     c00123e4 <etharp_arp_input+0x240>
c00123cd:	83 ec 08             	sub    esp,0x8
c00123d0:	68 5c 10 03 c0       	push   0xc003105c
c00123d5:	68 26 00 03 c0       	push   0xc0030026
c00123da:	e8 e5 da 00 00       	call   c001fec4 <CPrintf>
c00123df:	83 c4 10             	add    esp,0x10
c00123e2:	66 90                	xchg   ax,ax
c00123e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123e8:	8d 50 08             	lea    edx,[eax+0x8]
c00123eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ef:	83 c0 12             	add    eax,0x12
c00123f2:	83 ec 04             	sub    esp,0x4
c00123f5:	6a 06                	push   0x6
c00123f7:	52                   	push   edx
c00123f8:	50                   	push   eax
c00123f9:	e8 7c df fe ff       	call   c000037a <memcpy>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012405:	8d 50 08             	lea    edx,[eax+0x8]
c0012408:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001240c:	83 ec 04             	sub    esp,0x4
c001240f:	6a 06                	push   0x6
c0012411:	52                   	push   edx
c0012412:	50                   	push   eax
c0012413:	e8 62 df fe ff       	call   c000037a <memcpy>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001241f:	83 c0 08             	add    eax,0x8
c0012422:	83 ec 04             	sub    esp,0x4
c0012425:	6a 06                	push   0x6
c0012427:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001242b:	50                   	push   eax
c001242c:	e8 49 df fe ff       	call   c000037a <memcpy>
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012438:	83 c0 06             	add    eax,0x6
c001243b:	83 ec 04             	sub    esp,0x4
c001243e:	6a 06                	push   0x6
c0012440:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012444:	50                   	push   eax
c0012445:	e8 30 df fe ff       	call   c000037a <memcpy>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012451:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012454:	83 ec 08             	sub    esp,0x8
c0012457:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001245b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001245f:	ff d0                	call   eax
c0012461:	83 c4 10             	add    esp,0x10
c0012464:	eb 26                	jmp    c001248c <etharp_arp_input+0x2e8>
c0012466:	66 90                	xchg   ax,ax
c0012468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001246c:	83 c0 04             	add    eax,0x4
c001246f:	eb 1b                	jmp    c001248c <etharp_arp_input+0x2e8>
c0012471:	8d 76 00             	lea    esi,[esi+0x0]
c0012474:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c001247a:	83 c0 01             	add    eax,0x1
c001247d:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c0012483:	eb 07                	jmp    c001248c <etharp_arp_input+0x2e8>
c0012485:	8d 76 00             	lea    esi,[esi+0x0]
c0012488:	90                   	nop
c0012489:	8d 76 00             	lea    esi,[esi+0x0]
c001248c:	83 ec 0c             	sub    esp,0xc
c001248f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012493:	e8 7c 60 ff ff       	call   c0008514 <pbuf_free>
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	90                   	nop
c001249c:	83 c4 2c             	add    esp,0x2c
c001249f:	c3                   	ret    

c00124a0 <etharp_raw>:
c00124a0:	83 ec 2c             	sub    esp,0x2c
c00124a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00124a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00124ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00124b1:	83 ec 04             	sub    esp,0x4
c00124b4:	6a 00                	push   0x0
c00124b6:	6a 2a                	push   0x2a
c00124b8:	6a 03                	push   0x3
c00124ba:	e8 31 62 ff ff       	call   c00086f0 <pbuf_alloc>
c00124bf:	83 c4 10             	add    esp,0x10
c00124c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124c6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00124cb:	75 17                	jne    c00124e4 <etharp_raw+0x44>
c00124cd:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00124d3:	83 c0 01             	add    eax,0x1
c00124d6:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00124dc:	b0 ff                	mov    al,0xff
c00124de:	e9 89 01 00 00       	jmp    c001266c <etharp_raw+0x1cc>
c00124e3:	90                   	nop
c00124e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124e8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00124ec:	0f b7 c0             	movzx  eax,ax
c00124ef:	83 f8 29             	cmp    eax,0x29
c00124f2:	77 18                	ja     c001250c <etharp_raw+0x6c>
c00124f4:	83 ec 08             	sub    esp,0x8
c00124f7:	68 ec 10 03 c0       	push   0xc00310ec
c00124fc:	68 26 00 03 c0       	push   0xc0030026
c0012501:	e8 be d9 00 00       	call   c001fec4 <CPrintf>
c0012506:	83 c4 10             	add    esp,0x10
c0012509:	8d 76 00             	lea    esi,[esi+0x0]
c001250c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012513:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001251b:	83 c0 0e             	add    eax,0xe
c001251e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012522:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012527:	83 ec 0c             	sub    esp,0xc
c001252a:	50                   	push   eax
c001252b:	e8 ec e6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012530:	83 c4 10             	add    esp,0x10
c0012533:	89 c2                	mov    edx,eax
c0012535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012539:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c001253d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012541:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012544:	0f b6 c0             	movzx  eax,al
c0012547:	83 f8 06             	cmp    eax,0x6
c001254a:	74 18                	je     c0012564 <etharp_raw+0xc4>
c001254c:	83 ec 08             	sub    esp,0x8
c001254f:	68 5c 10 03 c0       	push   0xc003105c
c0012554:	68 26 00 03 c0       	push   0xc0030026
c0012559:	e8 66 d9 00 00       	call   c001fec4 <CPrintf>
c001255e:	83 c4 10             	add    esp,0x10
c0012561:	8d 76 00             	lea    esi,[esi+0x0]
c0012564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012568:	83 c0 08             	add    eax,0x8
c001256b:	83 ec 04             	sub    esp,0x4
c001256e:	6a 06                	push   0x6
c0012570:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012574:	50                   	push   eax
c0012575:	e8 00 de fe ff       	call   c000037a <memcpy>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012581:	83 c0 12             	add    eax,0x12
c0012584:	83 ec 04             	sub    esp,0x4
c0012587:	6a 06                	push   0x6
c0012589:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001258d:	50                   	push   eax
c001258e:	e8 e7 dd fe ff       	call   c000037a <memcpy>
c0012593:	83 c4 10             	add    esp,0x10
c0012596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001259a:	83 ec 04             	sub    esp,0x4
c001259d:	6a 06                	push   0x6
c001259f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125a3:	50                   	push   eax
c00125a4:	e8 d1 dd fe ff       	call   c000037a <memcpy>
c00125a9:	83 c4 10             	add    esp,0x10
c00125ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125b0:	83 c0 06             	add    eax,0x6
c00125b3:	83 ec 04             	sub    esp,0x4
c00125b6:	6a 06                	push   0x6
c00125b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125bc:	50                   	push   eax
c00125bd:	e8 b8 dd fe ff       	call   c000037a <memcpy>
c00125c2:	83 c4 10             	add    esp,0x10
c00125c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c9:	83 c0 0e             	add    eax,0xe
c00125cc:	83 ec 04             	sub    esp,0x4
c00125cf:	6a 04                	push   0x4
c00125d1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00125d5:	50                   	push   eax
c00125d6:	e8 9f dd fe ff       	call   c000037a <memcpy>
c00125db:	83 c4 10             	add    esp,0x10
c00125de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125e2:	83 c0 18             	add    eax,0x18
c00125e5:	83 ec 04             	sub    esp,0x4
c00125e8:	6a 04                	push   0x4
c00125ea:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00125ee:	50                   	push   eax
c00125ef:	e8 86 dd fe ff       	call   c000037a <memcpy>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125fb:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c0012600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012604:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c001260a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001260e:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c0012612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012616:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c001261a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001261e:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012624:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012628:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001262b:	83 ec 08             	sub    esp,0x8
c001262e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012632:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012636:	ff d0                	call   eax
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001263f:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c0012645:	83 c0 01             	add    eax,0x1
c0012648:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012655:	e8 ba 5e ff ff       	call   c0008514 <pbuf_free>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012665:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012669:	8d 76 00             	lea    esi,[esi+0x0]
c001266c:	83 c4 2c             	add    esp,0x2c
c001266f:	c3                   	ret    

c0012670 <etharp_request>:
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012677:	8d 48 04             	lea    ecx,[eax+0x4]
c001267a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001267e:	8d 50 23             	lea    edx,[eax+0x23]
c0012681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012685:	83 c0 23             	add    eax,0x23
c0012688:	6a 01                	push   0x1
c001268a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001268e:	68 bc 11 03 c0       	push   0xc00311bc
c0012693:	51                   	push   ecx
c0012694:	52                   	push   edx
c0012695:	68 c4 11 03 c0       	push   0xc00311c4
c001269a:	50                   	push   eax
c001269b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001269f:	e8 fc fd ff ff       	call   c00124a0 <etharp_raw>
c00126a4:	83 c4 20             	add    esp,0x20
c00126a7:	83 c4 0c             	add    esp,0xc
c00126aa:	c3                   	ret    
c00126ab:	90                   	nop

c00126ac <etharp_query>:
c00126ac:	83 ec 2c             	sub    esp,0x2c
c00126af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b3:	83 c0 23             	add    eax,0x23
c00126b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00126ba:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00126bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00126c5:	83 ec 08             	sub    esp,0x8
c00126c8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00126cc:	50                   	push   eax
c00126cd:	e8 e6 19 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	0f b6 c0             	movzx  eax,al
c00126d8:	85 c0                	test   eax,eax
c00126da:	75 24                	jne    c0012700 <etharp_query+0x54>
c00126dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e2:	25 f0 00 00 00       	and    eax,0xf0
c00126e7:	3d e0 00 00 00       	cmp    eax,0xe0
c00126ec:	74 12                	je     c0012700 <etharp_query+0x54>
c00126ee:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00126f3:	74 0b                	je     c0012700 <etharp_query+0x54>
c00126f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00126fb:	85 c0                	test   eax,eax
c00126fd:	75 09                	jne    c0012708 <etharp_query+0x5c>
c00126ff:	90                   	nop
c0012700:	b0 f2                	mov    al,0xf2
c0012702:	e9 dd 02 00 00       	jmp    c00129e4 <etharp_query+0x338>
c0012707:	90                   	nop
c0012708:	83 ec 08             	sub    esp,0x8
c001270b:	6a 01                	push   0x1
c001270d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012711:	e8 ea f4 ff ff       	call   c0011c00 <find_entry>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001271d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012722:	85 c0                	test   eax,eax
c0012724:	79 22                	jns    c0012748 <etharp_query+0x9c>
c0012726:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001272b:	74 0f                	je     c001273c <etharp_query+0x90>
c001272d:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012733:	83 c0 01             	add    eax,0x1
c0012736:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001273c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012740:	e9 9f 02 00 00       	jmp    c00129e4 <etharp_query+0x338>
c0012745:	8d 76 00             	lea    esi,[esi+0x0]
c0012748:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001274d:	c1 e0 04             	shl    eax,0x4
c0012750:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012755:	8a 00                	mov    al,BYTE PTR [eax]
c0012757:	0f b6 c0             	movzx  eax,al
c001275a:	85 c0                	test   eax,eax
c001275c:	75 12                	jne    c0012770 <etharp_query+0xc4>
c001275e:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012763:	c1 e0 04             	shl    eax,0x4
c0012766:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001276b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001276e:	66 90                	xchg   ax,ax
c0012770:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012775:	c1 e0 04             	shl    eax,0x4
c0012778:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001277d:	8a 00                	mov    al,BYTE PTR [eax]
c001277f:	0f b6 c0             	movzx  eax,al
c0012782:	83 f8 01             	cmp    eax,0x1
c0012785:	74 2d                	je     c00127b4 <etharp_query+0x108>
c0012787:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001278c:	c1 e0 04             	shl    eax,0x4
c001278f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012794:	8a 00                	mov    al,BYTE PTR [eax]
c0012796:	0f b6 c0             	movzx  eax,al
c0012799:	83 f8 02             	cmp    eax,0x2
c001279c:	74 16                	je     c00127b4 <etharp_query+0x108>
c001279e:	83 ec 08             	sub    esp,0x8
c00127a1:	68 20 11 03 c0       	push   0xc0031120
c00127a6:	68 26 00 03 c0       	push   0xc0030026
c00127ab:	e8 14 d7 00 00       	call   c001fec4 <CPrintf>
c00127b0:	83 c4 10             	add    esp,0x10
c00127b3:	90                   	nop
c00127b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127b9:	c1 e0 04             	shl    eax,0x4
c00127bc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00127c1:	8a 00                	mov    al,BYTE PTR [eax]
c00127c3:	0f b6 c0             	movzx  eax,al
c00127c6:	83 f8 01             	cmp    eax,0x1
c00127c9:	74 09                	je     c00127d4 <etharp_query+0x128>
c00127cb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00127d0:	75 2a                	jne    c00127fc <etharp_query+0x150>
c00127d2:	66 90                	xchg   ax,ax
c00127d4:	83 ec 08             	sub    esp,0x8
c00127d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127df:	e8 8c fe ff ff       	call   c0012670 <etharp_request>
c00127e4:	83 c4 10             	add    esp,0x10
c00127e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00127eb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00127f0:	75 0a                	jne    c00127fc <etharp_query+0x150>
c00127f2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00127f6:	e9 e9 01 00 00       	jmp    c00129e4 <etharp_query+0x338>
c00127fb:	90                   	nop
c00127fc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012801:	75 15                	jne    c0012818 <etharp_query+0x16c>
c0012803:	83 ec 08             	sub    esp,0x8
c0012806:	68 9a 04 03 c0       	push   0xc003049a
c001280b:	68 26 00 03 c0       	push   0xc0030026
c0012810:	e8 af d6 00 00       	call   c001fec4 <CPrintf>
c0012815:	83 c4 10             	add    esp,0x10
c0012818:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001281d:	c1 e0 04             	shl    eax,0x4
c0012820:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012825:	8a 00                	mov    al,BYTE PTR [eax]
c0012827:	0f b6 c0             	movzx  eax,al
c001282a:	83 f8 02             	cmp    eax,0x2
c001282d:	75 39                	jne    c0012868 <etharp_query+0x1bc>
c001282f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012833:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c0012838:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001283d:	c1 e0 04             	shl    eax,0x4
c0012840:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012845:	83 c0 08             	add    eax,0x8
c0012848:	50                   	push   eax
c0012849:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001284d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012851:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012855:	e8 d2 f6 ff ff       	call   c0011f2c <etharp_send_ip>
c001285a:	83 c4 10             	add    esp,0x10
c001285d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012861:	e9 7a 01 00 00       	jmp    c00129e0 <etharp_query+0x334>
c0012866:	66 90                	xchg   ax,ax
c0012868:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001286d:	c1 e0 04             	shl    eax,0x4
c0012870:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012875:	8a 00                	mov    al,BYTE PTR [eax]
c0012877:	0f b6 c0             	movzx  eax,al
c001287a:	83 f8 01             	cmp    eax,0x1
c001287d:	0f 85 5d 01 00 00    	jne    c00129e0 <etharp_query+0x334>
c0012883:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001288b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001288f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012893:	eb 63                	jmp    c00128f8 <etharp_query+0x24c>
c0012895:	8d 76 00             	lea    esi,[esi+0x0]
c0012898:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001289c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00128a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a7:	0f b7 d2             	movzx  edx,dx
c00128aa:	0f b7 c0             	movzx  eax,ax
c00128ad:	39 c2                	cmp    edx,eax
c00128af:	75 1f                	jne    c00128d0 <etharp_query+0x224>
c00128b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00128b7:	85 c0                	test   eax,eax
c00128b9:	74 15                	je     c00128d0 <etharp_query+0x224>
c00128bb:	83 ec 08             	sub    esp,0x8
c00128be:	68 a1 11 03 c0       	push   0xc00311a1
c00128c3:	68 26 00 03 c0       	push   0xc0030026
c00128c8:	e8 f7 d5 00 00       	call   c001fec4 <CPrintf>
c00128cd:	83 c4 10             	add    esp,0x10
c00128d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128d4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00128d7:	0f b6 c0             	movzx  eax,al
c00128da:	83 f8 01             	cmp    eax,0x1
c00128dd:	74 0d                	je     c00128ec <etharp_query+0x240>
c00128df:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c00128e7:	eb 17                	jmp    c0012900 <etharp_query+0x254>
c00128e9:	8d 76 00             	lea    esi,[esi+0x0]
c00128ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128f6:	66 90                	xchg   ax,ax
c00128f8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00128fd:	75 99                	jne    c0012898 <etharp_query+0x1ec>
c00128ff:	90                   	nop
c0012900:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012905:	74 59                	je     c0012960 <etharp_query+0x2b4>
c0012907:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001290e:	0f b7 c0             	movzx  eax,ax
c0012911:	83 ec 04             	sub    esp,0x4
c0012914:	6a 00                	push   0x0
c0012916:	50                   	push   eax
c0012917:	6a 03                	push   0x3
c0012919:	e8 d2 5d ff ff       	call   c00086f0 <pbuf_alloc>
c001291e:	83 c4 10             	add    esp,0x10
c0012921:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012925:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001292a:	74 4c                	je     c0012978 <etharp_query+0x2cc>
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012933:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012937:	e8 1c 66 ff ff       	call   c0008f58 <pbuf_copy>
c001293c:	83 c4 10             	add    esp,0x10
c001293f:	0f be c0             	movsx  eax,al
c0012942:	85 c0                	test   eax,eax
c0012944:	74 32                	je     c0012978 <etharp_query+0x2cc>
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001294d:	e8 c2 5b ff ff       	call   c0008514 <pbuf_free>
c0012952:	83 c4 10             	add    esp,0x10
c0012955:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001295d:	eb 19                	jmp    c0012978 <etharp_query+0x2cc>
c001295f:	90                   	nop
c0012960:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001296f:	e8 b0 63 ff ff       	call   c0008d24 <pbuf_ref>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	90                   	nop
c0012978:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001297d:	74 4d                	je     c00129cc <etharp_query+0x320>
c001297f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012984:	c1 e0 04             	shl    eax,0x4
c0012987:	05 00 a9 03 c0       	add    eax,0xc003a900
c001298c:	8b 00                	mov    eax,DWORD PTR [eax]
c001298e:	85 c0                	test   eax,eax
c0012990:	74 1e                	je     c00129b0 <etharp_query+0x304>
c0012992:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012997:	c1 e0 04             	shl    eax,0x4
c001299a:	05 00 a9 03 c0       	add    eax,0xc003a900
c001299f:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a1:	83 ec 0c             	sub    esp,0xc
c00129a4:	50                   	push   eax
c00129a5:	e8 6a 5b ff ff       	call   c0008514 <pbuf_free>
c00129aa:	83 c4 10             	add    esp,0x10
c00129ad:	8d 76 00             	lea    esi,[esi+0x0]
c00129b0:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00129b5:	c1 e0 04             	shl    eax,0x4
c00129b8:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c00129be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129c2:	89 02                	mov    DWORD PTR [edx],eax
c00129c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00129c9:	eb 15                	jmp    c00129e0 <etharp_query+0x334>
c00129cb:	90                   	nop
c00129cc:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00129d2:	83 c0 01             	add    eax,0x1
c00129d5:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00129db:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00129e0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00129e4:	83 c4 2c             	add    esp,0x2c
c00129e7:	c3                   	ret    

c00129e8 <etharp_output>:
c00129e8:	83 ec 1c             	sub    esp,0x1c
c00129eb:	83 ec 08             	sub    esp,0x8
c00129ee:	6a 0e                	push   0xe
c00129f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00129f4:	e8 7b 59 ff ff       	call   c0008374 <pbuf_header>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	0f b6 c0             	movzx  eax,al
c00129ff:	85 c0                	test   eax,eax
c0012a01:	74 19                	je     c0012a1c <etharp_output+0x34>
c0012a03:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c0012a09:	83 c0 01             	add    eax,0x1
c0012a0c:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c0012a12:	b0 fe                	mov    al,0xfe
c0012a14:	e9 8b 01 00 00       	jmp    c0012ba4 <etharp_output+0x1bc>
c0012a19:	8d 76 00             	lea    esi,[esi+0x0]
c0012a1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012a24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a2a:	83 ec 08             	sub    esp,0x8
c0012a2d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012a31:	50                   	push   eax
c0012a32:	e8 81 16 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0012a37:	83 c4 10             	add    esp,0x10
c0012a3a:	0f b6 c0             	movzx  eax,al
c0012a3d:	85 c0                	test   eax,eax
c0012a3f:	74 0f                	je     c0012a50 <etharp_output+0x68>
c0012a41:	c7 44 24 0c c4 11 03 c0 	mov    DWORD PTR [esp+0xc],0xc00311c4
c0012a49:	e9 3a 01 00 00       	jmp    c0012b88 <etharp_output+0x1a0>
c0012a4e:	66 90                	xchg   ax,ax
c0012a50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a56:	25 f0 00 00 00       	and    eax,0xf0
c0012a5b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012a60:	75 42                	jne    c0012aa4 <etharp_output+0xbc>
c0012a62:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0012a67:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0012a6c:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012a71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a75:	83 c0 01             	add    eax,0x1
c0012a78:	8a 00                	mov    al,BYTE PTR [eax]
c0012a7a:	83 e0 7f             	and    eax,0x7f
c0012a7d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012a81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a85:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0012a88:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012a8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a90:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012a93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012a97:	8d 44 24 06          	lea    eax,[esp+0x6]
c0012a9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a9f:	e9 e4 00 00 00       	jmp    c0012b88 <etharp_output+0x1a0>
c0012aa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012aa8:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ab1:	31 c2                	xor    edx,eax
c0012ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012aba:	21 d0                	and    eax,edx
c0012abc:	74 3a                	je     c0012af8 <etharp_output+0x110>
c0012abe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ac4:	0f b7 c0             	movzx  eax,ax
c0012ac7:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012acc:	74 2a                	je     c0012af8 <etharp_output+0x110>
c0012ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad2:	83 c0 0c             	add    eax,0xc
c0012ad5:	74 19                	je     c0012af0 <etharp_output+0x108>
c0012ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012adb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ade:	85 c0                	test   eax,eax
c0012ae0:	74 0e                	je     c0012af0 <etharp_output+0x108>
c0012ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ae6:	83 c0 0c             	add    eax,0xc
c0012ae9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012aed:	eb 09                	jmp    c0012af8 <etharp_output+0x110>
c0012aef:	90                   	nop
c0012af0:	b0 fc                	mov    al,0xfc
c0012af2:	e9 ad 00 00 00       	jmp    c0012ba4 <etharp_output+0x1bc>
c0012af7:	90                   	nop
c0012af8:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012afd:	0f b6 c0             	movzx  eax,al
c0012b00:	c1 e0 04             	shl    eax,0x4
c0012b03:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012b08:	8a 00                	mov    al,BYTE PTR [eax]
c0012b0a:	0f b6 c0             	movzx  eax,al
c0012b0d:	83 f8 02             	cmp    eax,0x2
c0012b10:	75 5a                	jne    c0012b6c <etharp_output+0x184>
c0012b12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b16:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b18:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012b1d:	0f b6 c0             	movzx  eax,al
c0012b20:	c1 e0 04             	shl    eax,0x4
c0012b23:	05 04 a9 03 c0       	add    eax,0xc003a904
c0012b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b2a:	39 c2                	cmp    edx,eax
c0012b2c:	75 3e                	jne    c0012b6c <etharp_output+0x184>
c0012b2e:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c0012b34:	83 c0 01             	add    eax,0x1
c0012b37:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c0012b3d:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012b42:	0f b6 c0             	movzx  eax,al
c0012b45:	c1 e0 04             	shl    eax,0x4
c0012b48:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012b4d:	8d 50 08             	lea    edx,[eax+0x8]
c0012b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b54:	83 c0 23             	add    eax,0x23
c0012b57:	52                   	push   edx
c0012b58:	50                   	push   eax
c0012b59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b61:	e8 c6 f3 ff ff       	call   c0011f2c <etharp_send_ip>
c0012b66:	83 c4 10             	add    esp,0x10
c0012b69:	eb 39                	jmp    c0012ba4 <etharp_output+0x1bc>
c0012b6b:	90                   	nop
c0012b6c:	83 ec 04             	sub    esp,0x4
c0012b6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012b77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b7b:	e8 2c fb ff ff       	call   c00126ac <etharp_query>
c0012b80:	83 c4 10             	add    esp,0x10
c0012b83:	eb 1f                	jmp    c0012ba4 <etharp_output+0x1bc>
c0012b85:	8d 76 00             	lea    esi,[esi+0x0]
c0012b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b8c:	83 c0 23             	add    eax,0x23
c0012b8f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012b93:	50                   	push   eax
c0012b94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b9c:	e8 8b f3 ff ff       	call   c0011f2c <etharp_send_ip>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	83 c4 1c             	add    esp,0x1c
c0012ba7:	c3                   	ret    

c0012ba8 <ethernet_input>:
c0012ba8:	83 ec 1c             	sub    esp,0x1c
c0012bab:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bb6:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012bba:	0f b7 c0             	movzx  eax,ax
c0012bbd:	83 f8 0e             	cmp    eax,0xe
c0012bc0:	77 26                	ja     c0012be8 <ethernet_input+0x40>
c0012bc2:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012bc8:	83 c0 01             	add    eax,0x1
c0012bcb:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012bd1:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012bd7:	83 c0 01             	add    eax,0x1
c0012bda:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012be0:	e9 ef 00 00 00       	jmp    c0012cd4 <ethernet_input+0x12c>
c0012be5:	8d 76 00             	lea    esi,[esi+0x0]
c0012be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bf7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012bfb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012c00:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012c05:	83 f8 08             	cmp    eax,0x8
c0012c08:	74 0e                	je     c0012c18 <ethernet_input+0x70>
c0012c0a:	3d 08 06 00 00       	cmp    eax,0x608
c0012c0f:	74 6b                	je     c0012c7c <ethernet_input+0xd4>
c0012c11:	e9 92 00 00 00       	jmp    c0012ca8 <ethernet_input+0x100>
c0012c16:	66 90                	xchg   ax,ax
c0012c18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c1c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012c1f:	0f b6 c0             	movzx  eax,al
c0012c22:	83 e0 20             	and    eax,0x20
c0012c25:	0f 84 a1 00 00 00    	je     c0012ccc <ethernet_input+0x124>
c0012c2b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012c30:	f7 d8                	neg    eax
c0012c32:	98                   	cwde   
c0012c33:	83 ec 08             	sub    esp,0x8
c0012c36:	50                   	push   eax
c0012c37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c3b:	e8 34 57 ff ff       	call   c0008374 <pbuf_header>
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	0f b6 c0             	movzx  eax,al
c0012c46:	85 c0                	test   eax,eax
c0012c48:	74 1a                	je     c0012c64 <ethernet_input+0xbc>
c0012c4a:	83 ec 08             	sub    esp,0x8
c0012c4d:	68 48 11 03 c0       	push   0xc0031148
c0012c52:	68 26 00 03 c0       	push   0xc0030026
c0012c57:	e8 68 d2 00 00       	call   c001fec4 <CPrintf>
c0012c5c:	83 c4 10             	add    esp,0x10
c0012c5f:	eb 73                	jmp    c0012cd4 <ethernet_input+0x12c>
c0012c61:	8d 76 00             	lea    esi,[esi+0x0]
c0012c64:	83 ec 08             	sub    esp,0x8
c0012c67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c6f:	e8 7c 0c 00 00       	call   c00138f0 <ip_input>
c0012c74:	83 c4 10             	add    esp,0x10
c0012c77:	eb 4f                	jmp    c0012cc8 <ethernet_input+0x120>
c0012c79:	8d 76 00             	lea    esi,[esi+0x0]
c0012c7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c80:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012c83:	0f b6 c0             	movzx  eax,al
c0012c86:	83 e0 20             	and    eax,0x20
c0012c89:	74 45                	je     c0012cd0 <ethernet_input+0x128>
c0012c8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c8f:	83 c0 23             	add    eax,0x23
c0012c92:	83 ec 04             	sub    esp,0x4
c0012c95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012c99:	50                   	push   eax
c0012c9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c9e:	e8 01 f5 ff ff       	call   c00121a4 <etharp_arp_input>
c0012ca3:	83 c4 10             	add    esp,0x10
c0012ca6:	eb 20                	jmp    c0012cc8 <ethernet_input+0x120>
c0012ca8:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012cae:	83 c0 01             	add    eax,0x1
c0012cb1:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012cb7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012cbd:	83 c0 01             	add    eax,0x1
c0012cc0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012cc6:	eb 0c                	jmp    c0012cd4 <ethernet_input+0x12c>
c0012cc8:	b0 00                	mov    al,0x0
c0012cca:	eb 1c                	jmp    c0012ce8 <ethernet_input+0x140>
c0012ccc:	90                   	nop
c0012ccd:	eb 05                	jmp    c0012cd4 <ethernet_input+0x12c>
c0012ccf:	90                   	nop
c0012cd0:	90                   	nop
c0012cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012cdb:	e8 34 58 ff ff       	call   c0008514 <pbuf_free>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	b0 00                	mov    al,0x0
c0012ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ce8:	83 c4 1c             	add    esp,0x1c
c0012ceb:	c3                   	ret    

c0012cec <icmp_input>:
c0012cec:	83 ec 2c             	sub    esp,0x2c
c0012cef:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012cf5:	83 c0 01             	add    eax,0x1
c0012cf8:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012cfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d0d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012d10:	0f b7 c0             	movzx  eax,ax
c0012d13:	83 ec 0c             	sub    esp,0xc
c0012d16:	50                   	push   eax
c0012d17:	e8 00 df fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	0f b7 c0             	movzx  eax,ax
c0012d22:	c1 e8 08             	shr    eax,0x8
c0012d25:	83 e0 0f             	and    eax,0xf
c0012d28:	c1 e0 02             	shl    eax,0x2
c0012d2b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012d30:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012d35:	f7 d8                	neg    eax
c0012d37:	98                   	cwde   
c0012d38:	83 ec 08             	sub    esp,0x8
c0012d3b:	50                   	push   eax
c0012d3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d40:	e8 2f 56 ff ff       	call   c0008374 <pbuf_header>
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	0f b6 c0             	movzx  eax,al
c0012d4b:	85 c0                	test   eax,eax
c0012d4d:	0f 85 b1 03 00 00    	jne    c0013104 <icmp_input+0x418>
c0012d53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d5a:	0f b7 c0             	movzx  eax,ax
c0012d5d:	83 f8 03             	cmp    eax,0x3
c0012d60:	0f 86 9e 03 00 00    	jbe    c0013104 <icmp_input+0x418>
c0012d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d6d:	8a 00                	mov    al,BYTE PTR [eax]
c0012d6f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012d73:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012d78:	85 c0                	test   eax,eax
c0012d7a:	0f 84 6c 03 00 00    	je     c00130ec <icmp_input+0x400>
c0012d80:	83 f8 08             	cmp    eax,0x8
c0012d83:	0f 85 43 03 00 00    	jne    c00130cc <icmp_input+0x3e0>
c0012d89:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012d91:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012d96:	25 f0 00 00 00       	and    eax,0xf0
c0012d9b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012da0:	75 0a                	jne    c0012dac <icmp_input+0xc0>
c0012da2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012daa:	66 90                	xchg   ax,ax
c0012dac:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012db1:	83 ec 08             	sub    esp,0x8
c0012db4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012db8:	50                   	push   eax
c0012db9:	e8 fa 12 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	0f b6 c0             	movzx  eax,al
c0012dc4:	85 c0                	test   eax,eax
c0012dc6:	74 08                	je     c0012dd0 <icmp_input+0xe4>
c0012dc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012dd0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012dd5:	75 25                	jne    c0012dfc <icmp_input+0x110>
c0012dd7:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012ddd:	83 c0 01             	add    eax,0x1
c0012de0:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012de6:	83 ec 0c             	sub    esp,0xc
c0012de9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ded:	e8 22 57 ff ff       	call   c0008514 <pbuf_free>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	e9 56 03 00 00       	jmp    c0013150 <icmp_input+0x464>
c0012dfa:	66 90                	xchg   ax,ax
c0012dfc:	90                   	nop
c0012dfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012e04:	0f b7 c0             	movzx  eax,ax
c0012e07:	83 f8 07             	cmp    eax,0x7
c0012e0a:	0f 86 f8 02 00 00    	jbe    c0013108 <icmp_input+0x41c>
c0012e10:	83 ec 0c             	sub    esp,0xc
c0012e13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e17:	e8 5c 09 00 00       	call   c0013778 <inet_chksum_pbuf>
c0012e1c:	83 c4 10             	add    esp,0x10
c0012e1f:	0f b7 c0             	movzx  eax,ax
c0012e22:	85 c0                	test   eax,eax
c0012e24:	74 26                	je     c0012e4c <icmp_input+0x160>
c0012e26:	83 ec 0c             	sub    esp,0xc
c0012e29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e2d:	e8 e2 56 ff ff       	call   c0008514 <pbuf_free>
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012e3b:	83 c0 01             	add    eax,0x1
c0012e3e:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012e44:	e9 07 03 00 00       	jmp    c0013150 <icmp_input+0x464>
c0012e49:	8d 76 00             	lea    esi,[esi+0x0]
c0012e4c:	83 ec 08             	sub    esp,0x8
c0012e4f:	6a 22                	push   0x22
c0012e51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e55:	e8 1a 55 ff ff       	call   c0008374 <pbuf_header>
c0012e5a:	83 c4 10             	add    esp,0x10
c0012e5d:	0f b6 c0             	movzx  eax,al
c0012e60:	85 c0                	test   eax,eax
c0012e62:	0f 84 24 01 00 00    	je     c0012f8c <icmp_input+0x2a0>
c0012e68:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012e6d:	83 ec 08             	sub    esp,0x8
c0012e70:	50                   	push   eax
c0012e71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e75:	e8 fa 54 ff ff       	call   c0008374 <pbuf_header>
c0012e7a:	83 c4 10             	add    esp,0x10
c0012e7d:	0f b6 c0             	movzx  eax,al
c0012e80:	85 c0                	test   eax,eax
c0012e82:	74 1c                	je     c0012ea0 <icmp_input+0x1b4>
c0012e84:	83 ec 08             	sub    esp,0x8
c0012e87:	68 cc 11 03 c0       	push   0xc00311cc
c0012e8c:	68 26 00 03 c0       	push   0xc0030026
c0012e91:	e8 2e d0 00 00       	call   c001fec4 <CPrintf>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	e9 92 02 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012e9e:	66 90                	xchg   ax,ax
c0012ea0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ea4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ea7:	0f b7 c0             	movzx  eax,ax
c0012eaa:	83 ec 04             	sub    esp,0x4
c0012ead:	6a 00                	push   0x0
c0012eaf:	50                   	push   eax
c0012eb0:	6a 02                	push   0x2
c0012eb2:	e8 39 58 ff ff       	call   c00086f0 <pbuf_alloc>
c0012eb7:	83 c4 10             	add    esp,0x10
c0012eba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ebe:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012ec3:	0f 84 63 02 00 00    	je     c001312c <icmp_input+0x440>
c0012ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012ed1:	0f b7 c0             	movzx  eax,ax
c0012ed4:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012ed9:	83 c2 08             	add    edx,0x8
c0012edc:	39 d0                	cmp    eax,edx
c0012ede:	73 18                	jae    c0012ef8 <icmp_input+0x20c>
c0012ee0:	83 ec 08             	sub    esp,0x8
c0012ee3:	68 00 12 03 c0       	push   0xc0031200
c0012ee8:	68 26 00 03 c0       	push   0xc0030026
c0012eed:	e8 d2 cf 00 00       	call   c001fec4 <CPrintf>
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ef8:	83 ec 08             	sub    esp,0x8
c0012efb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f03:	e8 50 60 ff ff       	call   c0008f58 <pbuf_copy>
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	0f be c0             	movsx  eax,al
c0012f0e:	85 c0                	test   eax,eax
c0012f10:	74 1a                	je     c0012f2c <icmp_input+0x240>
c0012f12:	83 ec 08             	sub    esp,0x8
c0012f15:	68 38 12 03 c0       	push   0xc0031238
c0012f1a:	68 26 00 03 c0       	push   0xc0030026
c0012f1f:	e8 a0 cf 00 00       	call   c001fec4 <CPrintf>
c0012f24:	83 c4 10             	add    esp,0x10
c0012f27:	e9 04 02 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f37:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012f3c:	f7 d8                	neg    eax
c0012f3e:	98                   	cwde   
c0012f3f:	83 ec 08             	sub    esp,0x8
c0012f42:	50                   	push   eax
c0012f43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f47:	e8 28 54 ff ff       	call   c0008374 <pbuf_header>
c0012f4c:	83 c4 10             	add    esp,0x10
c0012f4f:	0f b6 c0             	movzx  eax,al
c0012f52:	85 c0                	test   eax,eax
c0012f54:	74 1a                	je     c0012f70 <icmp_input+0x284>
c0012f56:	83 ec 08             	sub    esp,0x8
c0012f59:	68 60 12 03 c0       	push   0xc0031260
c0012f5e:	68 26 00 03 c0       	push   0xc0030026
c0012f63:	e8 5c cf 00 00       	call   c001fec4 <CPrintf>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	e9 c0 01 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012f70:	83 ec 0c             	sub    esp,0xc
c0012f73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f77:	e8 98 55 ff ff       	call   c0008514 <pbuf_free>
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012f87:	eb 37                	jmp    c0012fc0 <icmp_input+0x2d4>
c0012f89:	8d 76 00             	lea    esi,[esi+0x0]
c0012f8c:	83 ec 08             	sub    esp,0x8
c0012f8f:	6a de                	push   0xffffffde
c0012f91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f95:	e8 da 53 ff ff       	call   c0008374 <pbuf_header>
c0012f9a:	83 c4 10             	add    esp,0x10
c0012f9d:	0f b6 c0             	movzx  eax,al
c0012fa0:	85 c0                	test   eax,eax
c0012fa2:	74 1c                	je     c0012fc0 <icmp_input+0x2d4>
c0012fa4:	83 ec 08             	sub    esp,0x8
c0012fa7:	68 60 12 03 c0       	push   0xc0031260
c0012fac:	68 26 00 03 c0       	push   0xc0030026
c0012fb1:	e8 0e cf 00 00       	call   c001fec4 <CPrintf>
c0012fb6:	83 c4 10             	add    esp,0x10
c0012fb9:	e9 72 01 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012fbe:	66 90                	xchg   ax,ax
c0012fc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012fcb:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fd5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012fd8:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fe2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012fe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ff0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012ff4:	0f b7 c0             	movzx  eax,ax
c0012ff7:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012ffc:	76 1a                	jbe    c0013018 <icmp_input+0x32c>
c0012ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013002:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013006:	83 c0 09             	add    eax,0x9
c0013009:	89 c2                	mov    edx,eax
c001300b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001300f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013013:	eb 1b                	jmp    c0013030 <icmp_input+0x344>
c0013015:	8d 76 00             	lea    esi,[esi+0x0]
c0013018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001301c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013020:	83 c0 08             	add    eax,0x8
c0013023:	89 c2                	mov    edx,eax
c0013025:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013029:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001302d:	8d 76 00             	lea    esi,[esi+0x0]
c0013030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013034:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0013038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001303c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0013042:	83 ec 08             	sub    esp,0x8
c0013045:	6a 14                	push   0x14
c0013047:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001304b:	e8 00 07 00 00       	call   c0013750 <inet_chksum>
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	89 c2                	mov    edx,eax
c0013055:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013059:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c001305d:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0013063:	83 c0 01             	add    eax,0x1
c0013066:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c001306c:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0013071:	83 ec 08             	sub    esp,0x8
c0013074:	50                   	push   eax
c0013075:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013079:	e8 f6 52 ff ff       	call   c0008374 <pbuf_header>
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	0f b6 c0             	movzx  eax,al
c0013084:	85 c0                	test   eax,eax
c0013086:	74 18                	je     c00130a0 <icmp_input+0x3b4>
c0013088:	83 ec 08             	sub    esp,0x8
c001308b:	68 48 11 03 c0       	push   0xc0031148
c0013090:	68 26 00 03 c0       	push   0xc0030026
c0013095:	e8 2a ce 00 00       	call   c001fec4 <CPrintf>
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	eb 51                	jmp    c00130f0 <icmp_input+0x404>
c001309f:	90                   	nop
c00130a0:	83 ec 04             	sub    esp,0x4
c00130a3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00130a7:	6a 01                	push   0x1
c00130a9:	6a 00                	push   0x0
c00130ab:	68 ff 00 00 00       	push   0xff
c00130b0:	6a 00                	push   0x0
c00130b2:	68 98 68 03 c0       	push   0xc0036898
c00130b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00130bb:	e8 74 0c 00 00       	call   c0013d34 <ip_output_if>
c00130c0:	83 c4 20             	add    esp,0x20
c00130c3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00130c7:	eb 27                	jmp    c00130f0 <icmp_input+0x404>
c00130c9:	8d 76 00             	lea    esi,[esi+0x0]
c00130cc:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c00130d2:	83 c0 01             	add    eax,0x1
c00130d5:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c00130db:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c00130e1:	83 c0 01             	add    eax,0x1
c00130e4:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c00130ea:	eb 04                	jmp    c00130f0 <icmp_input+0x404>
c00130ec:	90                   	nop
c00130ed:	8d 76 00             	lea    esi,[esi+0x0]
c00130f0:	83 ec 0c             	sub    esp,0xc
c00130f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00130f7:	e8 18 54 ff ff       	call   c0008514 <pbuf_free>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	eb 4f                	jmp    c0013150 <icmp_input+0x464>
c0013101:	8d 76 00             	lea    esi,[esi+0x0]
c0013104:	90                   	nop
c0013105:	eb 05                	jmp    c001310c <icmp_input+0x420>
c0013107:	90                   	nop
c0013108:	90                   	nop
c0013109:	8d 76 00             	lea    esi,[esi+0x0]
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013113:	e8 fc 53 ff ff       	call   c0008514 <pbuf_free>
c0013118:	83 c4 10             	add    esp,0x10
c001311b:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0013121:	83 c0 01             	add    eax,0x1
c0013124:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c001312a:	eb 24                	jmp    c0013150 <icmp_input+0x464>
c001312c:	90                   	nop
c001312d:	8d 76 00             	lea    esi,[esi+0x0]
c0013130:	83 ec 0c             	sub    esp,0xc
c0013133:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013137:	e8 d8 53 ff ff       	call   c0008514 <pbuf_free>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0013145:	83 c0 01             	add    eax,0x1
c0013148:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c001314e:	90                   	nop
c001314f:	90                   	nop
c0013150:	83 c4 2c             	add    esp,0x2c
c0013153:	c3                   	ret    

c0013154 <icmp_send_response>:
c0013154:	83 ec 2c             	sub    esp,0x2c
c0013157:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001315b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001315f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013163:	88 d0                	mov    al,dl
c0013165:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013169:	83 ec 04             	sub    esp,0x4
c001316c:	6a 00                	push   0x0
c001316e:	6a 24                	push   0x24
c0013170:	6a 01                	push   0x1
c0013172:	e8 79 55 ff ff       	call   c00086f0 <pbuf_alloc>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001317e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013183:	0f 84 ff 00 00 00    	je     c0013288 <icmp_send_response+0x134>
c0013189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001318d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013191:	0f b7 c0             	movzx  eax,ax
c0013194:	83 f8 23             	cmp    eax,0x23
c0013197:	77 17                	ja     c00131b0 <icmp_send_response+0x5c>
c0013199:	83 ec 08             	sub    esp,0x8
c001319c:	68 94 12 03 c0       	push   0xc0031294
c00131a1:	68 26 00 03 c0       	push   0xc0030026
c00131a6:	e8 19 cd 00 00       	call   c001fec4 <CPrintf>
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	66 90                	xchg   ax,ax
c00131b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131ca:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00131ce:	88 10                	mov    BYTE PTR [eax],dl
c00131d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131d4:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00131d8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00131db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131df:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c00131e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131e9:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00131ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131fa:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00131fd:	83 c2 08             	add    edx,0x8
c0013200:	83 ec 04             	sub    esp,0x4
c0013203:	6a 1c                	push   0x1c
c0013205:	50                   	push   eax
c0013206:	52                   	push   edx
c0013207:	e8 6e d1 fe ff       	call   c000037a <memcpy>
c001320c:	83 c4 10             	add    esp,0x10
c001320f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013213:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0013219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001321d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013221:	0f b7 c0             	movzx  eax,ax
c0013224:	83 ec 08             	sub    esp,0x8
c0013227:	50                   	push   eax
c0013228:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001322c:	e8 1f 05 00 00       	call   c0013750 <inet_chksum>
c0013231:	83 c4 10             	add    esp,0x10
c0013234:	89 c2                	mov    edx,eax
c0013236:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001323a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001323e:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0013244:	83 c0 01             	add    eax,0x1
c0013247:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c001324d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013251:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013254:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013258:	83 ec 08             	sub    esp,0x8
c001325b:	6a 01                	push   0x1
c001325d:	6a 00                	push   0x0
c001325f:	68 ff 00 00 00       	push   0xff
c0013264:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013268:	50                   	push   eax
c0013269:	6a 00                	push   0x0
c001326b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001326f:	e8 9c 0d 00 00       	call   c0014010 <ip_output>
c0013274:	83 c4 20             	add    esp,0x20
c0013277:	83 ec 0c             	sub    esp,0xc
c001327a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001327e:	e8 91 52 ff ff       	call   c0008514 <pbuf_free>
c0013283:	83 c4 10             	add    esp,0x10
c0013286:	eb 04                	jmp    c001328c <icmp_send_response+0x138>
c0013288:	90                   	nop
c0013289:	8d 76 00             	lea    esi,[esi+0x0]
c001328c:	83 c4 2c             	add    esp,0x2c
c001328f:	c3                   	ret    

c0013290 <icmp_dest_unreach>:
c0013290:	83 ec 0c             	sub    esp,0xc
c0013293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013297:	0f b6 c0             	movzx  eax,al
c001329a:	83 ec 04             	sub    esp,0x4
c001329d:	50                   	push   eax
c001329e:	6a 03                	push   0x3
c00132a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a4:	e8 ab fe ff ff       	call   c0013154 <icmp_send_response>
c00132a9:	83 c4 10             	add    esp,0x10
c00132ac:	90                   	nop
c00132ad:	83 c4 0c             	add    esp,0xc
c00132b0:	c3                   	ret    
c00132b1:	8d 76 00             	lea    esi,[esi+0x0]

c00132b4 <icmp_time_exceeded>:
c00132b4:	83 ec 0c             	sub    esp,0xc
c00132b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132bb:	0f b6 c0             	movzx  eax,al
c00132be:	83 ec 04             	sub    esp,0x4
c00132c1:	50                   	push   eax
c00132c2:	6a 0b                	push   0xb
c00132c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c8:	e8 87 fe ff ff       	call   c0013154 <icmp_send_response>
c00132cd:	83 c4 10             	add    esp,0x10
c00132d0:	90                   	nop
c00132d1:	83 c4 0c             	add    esp,0xc
c00132d4:	c3                   	ret    
c00132d5:	66 90                	xchg   ax,ax
c00132d7:	90                   	nop

c00132d8 <lwip_standard_chksum>:
c00132d8:	83 ec 2c             	sub    esp,0x2c
c00132db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132e3:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00132ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00132f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f6:	83 e0 01             	and    eax,0x1
c00132f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00132fd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013302:	74 24                	je     c0013328 <lwip_standard_chksum+0x50>
c0013304:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013309:	7e 1d                	jle    c0013328 <lwip_standard_chksum+0x50>
c001330b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001330f:	8d 42 01             	lea    eax,[edx+0x1]
c0013312:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013316:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001331a:	83 c0 01             	add    eax,0x1
c001331d:	8a 12                	mov    dl,BYTE PTR [edx]
c001331f:	88 10                	mov    BYTE PTR [eax],dl
c0013321:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013326:	66 90                	xchg   ax,ax
c0013328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001332c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013330:	eb 1e                	jmp    c0013350 <lwip_standard_chksum+0x78>
c0013332:	66 90                	xchg   ax,ax
c0013334:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013338:	8d 50 02             	lea    edx,[eax+0x2]
c001333b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001333f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013342:	0f b7 c0             	movzx  eax,ax
c0013345:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013349:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001334e:	66 90                	xchg   ax,ax
c0013350:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013355:	7f dd                	jg     c0013334 <lwip_standard_chksum+0x5c>
c0013357:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001335c:	7e 0e                	jle    c001336c <lwip_standard_chksum+0x94>
c001335e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0013362:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013366:	8a 12                	mov    dl,BYTE PTR [edx]
c0013368:	88 10                	mov    BYTE PTR [eax],dl
c001336a:	66 90                	xchg   ax,ax
c001336c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013371:	0f b7 c0             	movzx  eax,ax
c0013374:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001337c:	c1 e8 10             	shr    eax,0x10
c001337f:	89 c2                	mov    edx,eax
c0013381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013385:	0f b7 c0             	movzx  eax,ax
c0013388:	01 d0                	add    eax,edx
c001338a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001338e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013392:	c1 e8 10             	shr    eax,0x10
c0013395:	89 c2                	mov    edx,eax
c0013397:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001339b:	0f b7 c0             	movzx  eax,ax
c001339e:	01 d0                	add    eax,edx
c00133a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133a4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00133a9:	74 1d                	je     c00133c8 <lwip_standard_chksum+0xf0>
c00133ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133af:	0f b7 c0             	movzx  eax,ax
c00133b2:	83 ec 0c             	sub    esp,0xc
c00133b5:	50                   	push   eax
c00133b6:	e8 61 d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	0f b7 c0             	movzx  eax,ax
c00133c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133c5:	8d 76 00             	lea    esi,[esi+0x0]
c00133c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133cc:	83 c4 2c             	add    esp,0x2c
c00133cf:	c3                   	ret    

c00133d0 <inet_chksum_pseudo>:
c00133d0:	83 ec 2c             	sub    esp,0x2c
c00133d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00133d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00133db:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00133df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00133e4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00133ec:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00133f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133f9:	e9 8a 00 00 00       	jmp    c0013488 <inet_chksum_pseudo+0xb8>
c00133fe:	66 90                	xchg   ax,ax
c0013400:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013404:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013408:	0f b7 d0             	movzx  edx,ax
c001340b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001340f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013412:	83 ec 08             	sub    esp,0x8
c0013415:	52                   	push   edx
c0013416:	50                   	push   eax
c0013417:	e8 bc fe ff ff       	call   c00132d8 <lwip_standard_chksum>
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	0f b7 c0             	movzx  eax,ax
c0013422:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001342a:	c1 e8 10             	shr    eax,0x10
c001342d:	89 c2                	mov    edx,eax
c001342f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013433:	0f b7 c0             	movzx  eax,ax
c0013436:	01 d0                	add    eax,edx
c0013438:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001343c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013440:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013444:	83 e0 01             	and    eax,0x1
c0013447:	0f b7 c0             	movzx  eax,ax
c001344a:	85 c0                	test   eax,eax
c001344c:	74 2e                	je     c001347c <inet_chksum_pseudo+0xac>
c001344e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013452:	ba 01 00 00 00       	mov    edx,0x1
c0013457:	29 c2                	sub    edx,eax
c0013459:	89 d0                	mov    eax,edx
c001345b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001345f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013463:	0f b7 c0             	movzx  eax,ax
c0013466:	83 ec 0c             	sub    esp,0xc
c0013469:	50                   	push   eax
c001346a:	e8 ad d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	0f b7 c0             	movzx  eax,ax
c0013475:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013479:	8d 76 00             	lea    esi,[esi+0x0]
c001347c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013480:	8b 00                	mov    eax,DWORD PTR [eax]
c0013482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013486:	66 90                	xchg   ax,ax
c0013488:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001348d:	0f 85 6d ff ff ff    	jne    c0013400 <inet_chksum_pseudo+0x30>
c0013493:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013498:	85 c0                	test   eax,eax
c001349a:	74 1c                	je     c00134b8 <inet_chksum_pseudo+0xe8>
c001349c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a0:	0f b7 c0             	movzx  eax,ax
c00134a3:	83 ec 0c             	sub    esp,0xc
c00134a6:	50                   	push   eax
c00134a7:	e8 70 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00134ac:	83 c4 10             	add    esp,0x10
c00134af:	0f b7 c0             	movzx  eax,ax
c00134b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134b6:	66 90                	xchg   ax,ax
c00134b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00134be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c6:	0f b7 c0             	movzx  eax,ax
c00134c9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d1:	c1 e8 10             	shr    eax,0x10
c00134d4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00134dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00134de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e6:	0f b7 c0             	movzx  eax,ax
c00134e9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f1:	c1 e8 10             	shr    eax,0x10
c00134f4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00134fd:	83 ec 0c             	sub    esp,0xc
c0013500:	50                   	push   eax
c0013501:	e8 16 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	0f b7 c0             	movzx  eax,ax
c001350c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013510:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013515:	83 ec 0c             	sub    esp,0xc
c0013518:	50                   	push   eax
c0013519:	e8 fe d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	0f b7 c0             	movzx  eax,ax
c0013524:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001352c:	c1 e8 10             	shr    eax,0x10
c001352f:	89 c2                	mov    edx,eax
c0013531:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013535:	0f b7 c0             	movzx  eax,ax
c0013538:	01 d0                	add    eax,edx
c001353a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001353e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013542:	c1 e8 10             	shr    eax,0x10
c0013545:	89 c2                	mov    edx,eax
c0013547:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001354b:	0f b7 c0             	movzx  eax,ax
c001354e:	01 d0                	add    eax,edx
c0013550:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013554:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013558:	f7 d0                	not    eax
c001355a:	83 c4 2c             	add    esp,0x2c
c001355d:	c3                   	ret    
c001355e:	66 90                	xchg   ax,ax

c0013560 <inet_chksum_pseudo_partial>:
c0013560:	83 ec 2c             	sub    esp,0x2c
c0013563:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013567:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001356b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001356f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013573:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013578:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001357d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001358a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001358e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013592:	e9 d9 00 00 00       	jmp    c0013670 <inet_chksum_pseudo_partial+0x110>
c0013597:	90                   	nop
c0013598:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001359c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00135a0:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00135a5:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00135aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135af:	39 c2                	cmp    edx,eax
c00135b1:	76 09                	jbe    c00135bc <inet_chksum_pseudo_partial+0x5c>
c00135b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b7:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00135bc:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00135c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135c8:	83 ec 08             	sub    esp,0x8
c00135cb:	52                   	push   edx
c00135cc:	50                   	push   eax
c00135cd:	e8 06 fd ff ff       	call   c00132d8 <lwip_standard_chksum>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	0f b7 c0             	movzx  eax,ax
c00135d8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00135dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00135e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135e4:	89 d1                	mov    ecx,edx
c00135e6:	29 c1                	sub    ecx,eax
c00135e8:	89 c8                	mov    eax,ecx
c00135ea:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00135ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135f4:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00135f9:	76 15                	jbe    c0013610 <inet_chksum_pseudo_partial+0xb0>
c00135fb:	83 ec 08             	sub    esp,0x8
c00135fe:	68 c0 12 03 c0       	push   0xc00312c0
c0013603:	68 26 00 03 c0       	push   0xc0030026
c0013608:	e8 b7 c8 00 00       	call   c001fec4 <CPrintf>
c001360d:	83 c4 10             	add    esp,0x10
c0013610:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013614:	c1 e8 10             	shr    eax,0x10
c0013617:	89 c2                	mov    edx,eax
c0013619:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001361d:	0f b7 c0             	movzx  eax,ax
c0013620:	01 d0                	add    eax,edx
c0013622:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001362a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001362e:	83 e0 01             	and    eax,0x1
c0013631:	0f b7 c0             	movzx  eax,ax
c0013634:	85 c0                	test   eax,eax
c0013636:	74 2c                	je     c0013664 <inet_chksum_pseudo_partial+0x104>
c0013638:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001363c:	ba 01 00 00 00       	mov    edx,0x1
c0013641:	29 c2                	sub    edx,eax
c0013643:	89 d0                	mov    eax,edx
c0013645:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001364d:	0f b7 c0             	movzx  eax,ax
c0013650:	83 ec 0c             	sub    esp,0xc
c0013653:	50                   	push   eax
c0013654:	e8 c3 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013659:	83 c4 10             	add    esp,0x10
c001365c:	0f b7 c0             	movzx  eax,ax
c001365f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013663:	90                   	nop
c0013664:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013668:	8b 00                	mov    eax,DWORD PTR [eax]
c001366a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001366e:	66 90                	xchg   ax,ax
c0013670:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013675:	74 0d                	je     c0013684 <inet_chksum_pseudo_partial+0x124>
c0013677:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001367c:	85 c0                	test   eax,eax
c001367e:	0f 85 14 ff ff ff    	jne    c0013598 <inet_chksum_pseudo_partial+0x38>
c0013684:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013689:	85 c0                	test   eax,eax
c001368b:	74 1b                	je     c00136a8 <inet_chksum_pseudo_partial+0x148>
c001368d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013691:	0f b7 c0             	movzx  eax,ax
c0013694:	83 ec 0c             	sub    esp,0xc
c0013697:	50                   	push   eax
c0013698:	e8 7f d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001369d:	83 c4 10             	add    esp,0x10
c00136a0:	0f b7 c0             	movzx  eax,ax
c00136a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00136a7:	90                   	nop
c00136a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00136ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136b6:	0f b7 c0             	movzx  eax,ax
c00136b9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c1:	c1 e8 10             	shr    eax,0x10
c00136c4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00136cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00136ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d6:	0f b7 c0             	movzx  eax,ax
c00136d9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e1:	c1 e8 10             	shr    eax,0x10
c00136e4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00136ed:	83 ec 0c             	sub    esp,0xc
c00136f0:	50                   	push   eax
c00136f1:	e8 26 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	0f b7 c0             	movzx  eax,ax
c00136fc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013700:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013705:	83 ec 0c             	sub    esp,0xc
c0013708:	50                   	push   eax
c0013709:	e8 0e d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001370e:	83 c4 10             	add    esp,0x10
c0013711:	0f b7 c0             	movzx  eax,ax
c0013714:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001371c:	c1 e8 10             	shr    eax,0x10
c001371f:	89 c2                	mov    edx,eax
c0013721:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013725:	0f b7 c0             	movzx  eax,ax
c0013728:	01 d0                	add    eax,edx
c001372a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001372e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013732:	c1 e8 10             	shr    eax,0x10
c0013735:	89 c2                	mov    edx,eax
c0013737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001373b:	0f b7 c0             	movzx  eax,ax
c001373e:	01 d0                	add    eax,edx
c0013740:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013744:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013748:	f7 d0                	not    eax
c001374a:	83 c4 2c             	add    esp,0x2c
c001374d:	c3                   	ret    
c001374e:	66 90                	xchg   ax,ax

c0013750 <inet_chksum>:
c0013750:	83 ec 1c             	sub    esp,0x1c
c0013753:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013757:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001375c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013761:	83 ec 08             	sub    esp,0x8
c0013764:	50                   	push   eax
c0013765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013769:	e8 6a fb ff ff       	call   c00132d8 <lwip_standard_chksum>
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	f7 d0                	not    eax
c0013773:	83 c4 1c             	add    esp,0x1c
c0013776:	c3                   	ret    
c0013777:	90                   	nop

c0013778 <inet_chksum_pbuf>:
c0013778:	83 ec 1c             	sub    esp,0x1c
c001377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013783:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001378c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013790:	e9 8b 00 00 00       	jmp    c0013820 <inet_chksum_pbuf+0xa8>
c0013795:	8d 76 00             	lea    esi,[esi+0x0]
c0013798:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001379c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00137a0:	0f b7 d0             	movzx  edx,ax
c00137a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137aa:	83 ec 08             	sub    esp,0x8
c00137ad:	52                   	push   edx
c00137ae:	50                   	push   eax
c00137af:	e8 24 fb ff ff       	call   c00132d8 <lwip_standard_chksum>
c00137b4:	83 c4 10             	add    esp,0x10
c00137b7:	0f b7 c0             	movzx  eax,ax
c00137ba:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00137be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137c2:	c1 e8 10             	shr    eax,0x10
c00137c5:	89 c2                	mov    edx,eax
c00137c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137cb:	0f b7 c0             	movzx  eax,ax
c00137ce:	01 d0                	add    eax,edx
c00137d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00137dc:	83 e0 01             	and    eax,0x1
c00137df:	0f b7 c0             	movzx  eax,ax
c00137e2:	85 c0                	test   eax,eax
c00137e4:	74 2e                	je     c0013814 <inet_chksum_pbuf+0x9c>
c00137e6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00137ea:	ba 01 00 00 00       	mov    edx,0x1
c00137ef:	29 c2                	sub    edx,eax
c00137f1:	89 d0                	mov    eax,edx
c00137f3:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00137f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137fb:	0f b7 c0             	movzx  eax,ax
c00137fe:	83 ec 0c             	sub    esp,0xc
c0013801:	50                   	push   eax
c0013802:	e8 15 d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013807:	83 c4 10             	add    esp,0x10
c001380a:	0f b7 c0             	movzx  eax,ax
c001380d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013811:	8d 76 00             	lea    esi,[esi+0x0]
c0013814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013818:	8b 00                	mov    eax,DWORD PTR [eax]
c001381a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001381e:	66 90                	xchg   ax,ax
c0013820:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013825:	0f 85 6d ff ff ff    	jne    c0013798 <inet_chksum_pbuf+0x20>
c001382b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0013830:	85 c0                	test   eax,eax
c0013832:	74 1c                	je     c0013850 <inet_chksum_pbuf+0xd8>
c0013834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013838:	0f b7 c0             	movzx  eax,ax
c001383b:	83 ec 0c             	sub    esp,0xc
c001383e:	50                   	push   eax
c001383f:	e8 d8 d3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	0f b7 c0             	movzx  eax,ax
c001384a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001384e:	66 90                	xchg   ax,ax
c0013850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013854:	f7 d0                	not    eax
c0013856:	83 c4 1c             	add    esp,0x1c
c0013859:	c3                   	ret    
c001385a:	66 90                	xchg   ax,ax

c001385c <ip_route>:
c001385c:	83 ec 10             	sub    esp,0x10
c001385f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013868:	eb 42                	jmp    c00138ac <ip_route+0x50>
c001386a:	66 90                	xchg   ax,ax
c001386c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013870:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013873:	83 e0 01             	and    eax,0x1
c0013876:	0f b6 c0             	movzx  eax,al
c0013879:	85 c0                	test   eax,eax
c001387b:	74 23                	je     c00138a0 <ip_route+0x44>
c001387d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013881:	8b 10                	mov    edx,DWORD PTR [eax]
c0013883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013887:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001388a:	31 c2                	xor    edx,eax
c001388c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013890:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013893:	21 d0                	and    eax,edx
c0013895:	75 09                	jne    c00138a0 <ip_route+0x44>
c0013897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001389b:	eb 4f                	jmp    c00138ec <ip_route+0x90>
c001389d:	8d 76 00             	lea    esi,[esi+0x0]
c00138a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00138a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138aa:	66 90                	xchg   ax,ax
c00138ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00138b1:	75 b9                	jne    c001386c <ip_route+0x10>
c00138b3:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00138b8:	85 c0                	test   eax,eax
c00138ba:	74 10                	je     c00138cc <ip_route+0x70>
c00138bc:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00138c1:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00138c4:	0f b6 c0             	movzx  eax,al
c00138c7:	83 e0 01             	and    eax,0x1
c00138ca:	75 18                	jne    c00138e4 <ip_route+0x88>
c00138cc:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c00138d2:	83 c0 01             	add    eax,0x1
c00138d5:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c00138db:	b8 00 00 00 00       	mov    eax,0x0
c00138e0:	eb 0a                	jmp    c00138ec <ip_route+0x90>
c00138e2:	66 90                	xchg   ax,ax
c00138e4:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00138e9:	8d 76 00             	lea    esi,[esi+0x0]
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	c3                   	ret    

c00138f0 <ip_input>:
c00138f0:	83 ec 1c             	sub    esp,0x1c
c00138f3:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c00138f9:	83 c0 01             	add    eax,0x1
c00138fc:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c0013902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013909:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001390d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013911:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013914:	0f b7 c0             	movzx  eax,ax
c0013917:	83 ec 0c             	sub    esp,0xc
c001391a:	50                   	push   eax
c001391b:	e8 fc d2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	0f b7 c0             	movzx  eax,ax
c0013926:	c1 e8 0c             	shr    eax,0xc
c0013929:	0f b7 c0             	movzx  eax,ax
c001392c:	83 f8 04             	cmp    eax,0x4
c001392f:	74 37                	je     c0013968 <ip_input+0x78>
c0013931:	83 ec 0c             	sub    esp,0xc
c0013934:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013938:	e8 d7 4b ff ff       	call   c0008514 <pbuf_free>
c001393d:	83 c4 10             	add    esp,0x10
c0013940:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013946:	83 c0 01             	add    eax,0x1
c0013949:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c001394f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013955:	83 c0 01             	add    eax,0x1
c0013958:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001395e:	b0 00                	mov    al,0x0
c0013960:	e9 cb 03 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013965:	8d 76 00             	lea    esi,[esi+0x0]
c0013968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001396c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001396f:	0f b7 c0             	movzx  eax,ax
c0013972:	83 ec 0c             	sub    esp,0xc
c0013975:	50                   	push   eax
c0013976:	e8 a1 d2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001397b:	83 c4 10             	add    esp,0x10
c001397e:	0f b7 c0             	movzx  eax,ax
c0013981:	c1 e8 08             	shr    eax,0x8
c0013984:	83 e0 0f             	and    eax,0xf
c0013987:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001398c:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013991:	c1 e0 02             	shl    eax,0x2
c0013994:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013999:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001399d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00139a1:	0f b7 c0             	movzx  eax,ax
c00139a4:	83 ec 0c             	sub    esp,0xc
c00139a7:	50                   	push   eax
c00139a8:	e8 6f d2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00139b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139b8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00139bc:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00139c1:	0f b7 c0             	movzx  eax,ax
c00139c4:	39 c2                	cmp    edx,eax
c00139c6:	77 14                	ja     c00139dc <ip_input+0xec>
c00139c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139cf:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00139d3:	0f b7 c0             	movzx  eax,ax
c00139d6:	39 c2                	cmp    edx,eax
c00139d8:	76 36                	jbe    c0013a10 <ip_input+0x120>
c00139da:	66 90                	xchg   ax,ax
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139e3:	e8 2c 4b ff ff       	call   c0008514 <pbuf_free>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c00139f1:	83 c0 01             	add    eax,0x1
c00139f4:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c00139fa:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013a00:	83 c0 01             	add    eax,0x1
c0013a03:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013a09:	b0 00                	mov    al,0x0
c0013a0b:	e9 20 03 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013a10:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013a15:	83 ec 08             	sub    esp,0x8
c0013a18:	50                   	push   eax
c0013a19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a1d:	e8 2e fd ff ff       	call   c0013750 <inet_chksum>
c0013a22:	83 c4 10             	add    esp,0x10
c0013a25:	0f b7 c0             	movzx  eax,ax
c0013a28:	85 c0                	test   eax,eax
c0013a2a:	74 34                	je     c0013a60 <ip_input+0x170>
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a33:	e8 dc 4a ff ff       	call   c0008514 <pbuf_free>
c0013a38:	83 c4 10             	add    esp,0x10
c0013a3b:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c0013a41:	83 c0 01             	add    eax,0x1
c0013a44:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c0013a4a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013a50:	83 c0 01             	add    eax,0x1
c0013a53:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013a59:	b0 00                	mov    al,0x0
c0013a5b:	e9 d0 02 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013a60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0013a64:	83 ec 08             	sub    esp,0x8
c0013a67:	50                   	push   eax
c0013a68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a6c:	e8 77 50 ff ff       	call   c0008ae8 <pbuf_realloc>
c0013a71:	83 c4 10             	add    esp,0x10
c0013a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a78:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a7b:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c0013a80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013a87:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013a8c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013a94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013aa0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013aa3:	83 e0 01             	and    eax,0x1
c0013aa6:	0f b6 c0             	movzx  eax,al
c0013aa9:	85 c0                	test   eax,eax
c0013aab:	74 43                	je     c0013af0 <ip_input+0x200>
c0013aad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ab1:	83 c0 04             	add    eax,0x4
c0013ab4:	74 3a                	je     c0013af0 <ip_input+0x200>
c0013ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013aba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013abd:	85 c0                	test   eax,eax
c0013abf:	74 2f                	je     c0013af0 <ip_input+0x200>
c0013ac1:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0013ac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ace:	39 c2                	cmp    edx,eax
c0013ad0:	74 66                	je     c0013b38 <ip_input+0x248>
c0013ad2:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013ad7:	83 ec 08             	sub    esp,0x8
c0013ada:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ade:	50                   	push   eax
c0013adf:	e8 d4 05 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0013ae4:	83 c4 10             	add    esp,0x10
c0013ae7:	0f b6 c0             	movzx  eax,al
c0013aea:	85 c0                	test   eax,eax
c0013aec:	75 4a                	jne    c0013b38 <ip_input+0x248>
c0013aee:	66 90                	xchg   ax,ax
c0013af0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013af5:	74 15                	je     c0013b0c <ip_input+0x21c>
c0013af7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013aff:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013b04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b08:	eb 0e                	jmp    c0013b18 <ip_input+0x228>
c0013b0a:	66 90                	xchg   ax,ax
c0013b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b16:	66 90                	xchg   ax,ax
c0013b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b1c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013b20:	75 0a                	jne    c0013b2c <ip_input+0x23c>
c0013b22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013b31:	0f 85 65 ff ff ff    	jne    c0013a9c <ip_input+0x1ac>
c0013b37:	90                   	nop
c0013b38:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013b3d:	83 ec 08             	sub    esp,0x8
c0013b40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b44:	50                   	push   eax
c0013b45:	e8 6e 05 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0013b4a:	83 c4 10             	add    esp,0x10
c0013b4d:	0f b6 c0             	movzx  eax,al
c0013b50:	85 c0                	test   eax,eax
c0013b52:	75 14                	jne    c0013b68 <ip_input+0x278>
c0013b54:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013b59:	25 f0 00 00 00       	and    eax,0xf0
c0013b5e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013b63:	75 2b                	jne    c0013b90 <ip_input+0x2a0>
c0013b65:	8d 76 00             	lea    esi,[esi+0x0]
c0013b68:	83 ec 0c             	sub    esp,0xc
c0013b6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b6f:	e8 a0 49 ff ff       	call   c0008514 <pbuf_free>
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013b7d:	83 c0 01             	add    eax,0x1
c0013b80:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013b86:	b0 00                	mov    al,0x0
c0013b88:	e9 a3 01 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013b95:	75 19                	jne    c0013bb0 <ip_input+0x2c0>
c0013b97:	83 ec 0c             	sub    esp,0xc
c0013b9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9e:	e8 71 49 ff ff       	call   c0008514 <pbuf_free>
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	b0 00                	mov    al,0x0
c0013ba8:	e9 83 01 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013bad:	8d 76 00             	lea    esi,[esi+0x0]
c0013bb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bb4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013bb8:	0f b7 c0             	movzx  eax,ax
c0013bbb:	25 3f ff 00 00       	and    eax,0xff3f
c0013bc0:	74 2e                	je     c0013bf0 <ip_input+0x300>
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bc9:	e8 8a 13 00 00       	call   c0014f58 <ip_reass>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013bd5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013bda:	75 08                	jne    c0013be4 <ip_input+0x2f4>
c0013bdc:	b0 00                	mov    al,0x0
c0013bde:	e9 4d 01 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013be3:	90                   	nop
c0013be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013be8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bef:	90                   	nop
c0013bf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013bf4:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c0013bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bfd:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c0013c02:	83 ec 08             	sub    esp,0x8
c0013c05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c0d:	e8 32 5c ff ff       	call   c0009844 <raw_input>
c0013c12:	83 c4 10             	add    esp,0x10
c0013c15:	0f b6 c0             	movzx  eax,al
c0013c18:	85 c0                	test   eax,eax
c0013c1a:	0f 85 e0 00 00 00    	jne    c0013d00 <ip_input+0x410>
c0013c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c24:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013c27:	0f b6 c0             	movzx  eax,al
c0013c2a:	83 f8 06             	cmp    eax,0x6
c0013c2d:	74 25                	je     c0013c54 <ip_input+0x364>
c0013c2f:	83 f8 11             	cmp    eax,0x11
c0013c32:	74 08                	je     c0013c3c <ip_input+0x34c>
c0013c34:	83 f8 01             	cmp    eax,0x1
c0013c37:	74 33                	je     c0013c6c <ip_input+0x37c>
c0013c39:	eb 49                	jmp    c0013c84 <ip_input+0x394>
c0013c3b:	90                   	nop
c0013c3c:	83 ec 08             	sub    esp,0x8
c0013c3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c47:	e8 a8 d3 ff ff       	call   c0010ff4 <udp_input>
c0013c4c:	83 c4 10             	add    esp,0x10
c0013c4f:	e9 b0 00 00 00       	jmp    c0013d04 <ip_input+0x414>
c0013c54:	83 ec 08             	sub    esp,0x8
c0013c57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c5f:	e8 b0 a4 ff ff       	call   c000e114 <tcp_input>
c0013c64:	83 c4 10             	add    esp,0x10
c0013c67:	e9 98 00 00 00       	jmp    c0013d04 <ip_input+0x414>
c0013c6c:	83 ec 08             	sub    esp,0x8
c0013c6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c77:	e8 70 f0 ff ff       	call   c0012cec <icmp_input>
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	e9 80 00 00 00       	jmp    c0013d04 <ip_input+0x414>
c0013c84:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013c89:	83 ec 08             	sub    esp,0x8
c0013c8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c90:	50                   	push   eax
c0013c91:	e8 22 04 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	0f b6 c0             	movzx  eax,al
c0013c9c:	85 c0                	test   eax,eax
c0013c9e:	75 30                	jne    c0013cd0 <ip_input+0x3e0>
c0013ca0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013ca5:	25 f0 00 00 00       	and    eax,0xf0
c0013caa:	3d e0 00 00 00       	cmp    eax,0xe0
c0013caf:	74 1f                	je     c0013cd0 <ip_input+0x3e0>
c0013cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013cb9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013cbc:	83 ec 08             	sub    esp,0x8
c0013cbf:	6a 02                	push   0x2
c0013cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cc5:	e8 c6 f5 ff ff       	call   c0013290 <icmp_dest_unreach>
c0013cca:	83 c4 10             	add    esp,0x10
c0013ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cd7:	e8 38 48 ff ff       	call   c0008514 <pbuf_free>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013ce5:	83 c0 01             	add    eax,0x1
c0013ce8:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013cee:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013cf4:	83 c0 01             	add    eax,0x1
c0013cf7:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013cfd:	eb 05                	jmp    c0013d04 <ip_input+0x414>
c0013cff:	90                   	nop
c0013d00:	90                   	nop
c0013d01:	8d 76 00             	lea    esi,[esi+0x0]
c0013d04:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013d0e:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013d18:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013d22:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013d2c:	b0 00                	mov    al,0x0
c0013d2e:	66 90                	xchg   ax,ax
c0013d30:	83 c4 1c             	add    esp,0x1c
c0013d33:	c3                   	ret    

c0013d34 <ip_output_if>:
c0013d34:	83 ec 2c             	sub    esp,0x2c
c0013d37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d3b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013d3f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013d43:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013d47:	88 c8                	mov    al,cl
c0013d49:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013d4d:	88 d0                	mov    al,dl
c0013d4f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d53:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d5f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013d63:	0f b7 c0             	movzx  eax,ax
c0013d66:	83 f8 01             	cmp    eax,0x1
c0013d69:	74 15                	je     c0013d80 <ip_output_if+0x4c>
c0013d6b:	83 ec 08             	sub    esp,0x8
c0013d6e:	68 ca 12 03 c0       	push   0xc00312ca
c0013d73:	68 26 00 03 c0       	push   0xc0030026
c0013d78:	e8 47 c1 00 00       	call   c001fec4 <CPrintf>
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013d85:	0f 84 f5 01 00 00    	je     c0013f80 <ip_output_if+0x24c>
c0013d8b:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013d92:	83 ec 08             	sub    esp,0x8
c0013d95:	6a 14                	push   0x14
c0013d97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d9b:	e8 d4 45 ff ff       	call   c0008374 <pbuf_header>
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	0f b6 c0             	movzx  eax,al
c0013da6:	85 c0                	test   eax,eax
c0013da8:	74 16                	je     c0013dc0 <ip_output_if+0x8c>
c0013daa:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013db0:	83 c0 01             	add    eax,0x1
c0013db3:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013db9:	b0 fe                	mov    al,0xfe
c0013dbb:	e9 4c 02 00 00       	jmp    c001400c <ip_output_if+0x2d8>
c0013dc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013dc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013dd3:	0f b7 c0             	movzx  eax,ax
c0013dd6:	83 f8 13             	cmp    eax,0x13
c0013dd9:	77 15                	ja     c0013df0 <ip_output_if+0xbc>
c0013ddb:	83 ec 08             	sub    esp,0x8
c0013dde:	68 d8 12 03 c0       	push   0xc00312d8
c0013de3:	68 26 00 03 c0       	push   0xc0030026
c0013de8:	e8 d7 c0 00 00       	call   c001fec4 <CPrintf>
c0013ded:	83 c4 10             	add    esp,0x10
c0013df0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013df4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013df8:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dff:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013e03:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013e06:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013e0b:	c1 e0 08             	shl    eax,0x8
c0013e0e:	89 c2                	mov    edx,eax
c0013e10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013e15:	09 d0                	or     eax,edx
c0013e17:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e25:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013e28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e2f:	0f b7 c0             	movzx  eax,ax
c0013e32:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e3a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e3d:	c1 e8 10             	shr    eax,0x10
c0013e40:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e44:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013e49:	c1 e8 02             	shr    eax,0x2
c0013e4c:	0f b7 c0             	movzx  eax,ax
c0013e4f:	c1 e0 08             	shl    eax,0x8
c0013e52:	80 cc 40             	or     ah,0x40
c0013e55:	89 c2                	mov    edx,eax
c0013e57:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013e5c:	09 d0                	or     eax,edx
c0013e5e:	0f b7 c0             	movzx  eax,ax
c0013e61:	83 ec 0c             	sub    esp,0xc
c0013e64:	50                   	push   eax
c0013e65:	e8 b2 cd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013e6a:	83 c4 10             	add    esp,0x10
c0013e6d:	89 c2                	mov    edx,eax
c0013e6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e73:	66 89 10             	mov    WORD PTR [eax],dx
c0013e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e7a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013e7d:	0f b7 c0             	movzx  eax,ax
c0013e80:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e8b:	0f b7 c0             	movzx  eax,ax
c0013e8e:	83 ec 0c             	sub    esp,0xc
c0013e91:	50                   	push   eax
c0013e92:	e8 85 cd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013e97:	83 c4 10             	add    esp,0x10
c0013e9a:	89 c2                	mov    edx,eax
c0013e9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea0:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013ea4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013eac:	0f b7 c0             	movzx  eax,ax
c0013eaf:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013eb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013eb7:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013ebd:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013ec3:	0f b7 c0             	movzx  eax,ax
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	50                   	push   eax
c0013eca:	e8 4d cd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013ecf:	83 c4 10             	add    esp,0x10
c0013ed2:	89 c2                	mov    edx,eax
c0013ed4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ed8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013edc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ee0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013ee4:	0f b7 c0             	movzx  eax,ax
c0013ee7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013eeb:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013ef1:	83 c0 01             	add    eax,0x1
c0013ef4:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013efa:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013eff:	74 0b                	je     c0013f0c <ip_output_if+0x1d8>
c0013f01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f05:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f07:	85 c0                	test   eax,eax
c0013f09:	75 11                	jne    c0013f1c <ip_output_if+0x1e8>
c0013f0b:	90                   	nop
c0013f0c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013f10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013f13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f17:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f1a:	eb 10                	jmp    c0013f2c <ip_output_if+0x1f8>
c0013f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f20:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f26:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f29:	8d 76 00             	lea    esi,[esi+0x0]
c0013f2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f33:	0f b7 c0             	movzx  eax,ax
c0013f36:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013f3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f41:	c1 e8 10             	shr    eax,0x10
c0013f44:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013f48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f4c:	c1 e8 10             	shr    eax,0x10
c0013f4f:	89 c2                	mov    edx,eax
c0013f51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f55:	0f b7 c0             	movzx  eax,ax
c0013f58:	01 d0                	add    eax,edx
c0013f5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f62:	c1 e8 10             	shr    eax,0x10
c0013f65:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013f69:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013f6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f71:	89 c2                	mov    edx,eax
c0013f73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f77:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0013f7b:	eb 23                	jmp    c0013fa0 <ip_output_if+0x26c>
c0013f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013f87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013f92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013f96:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013fa6:	83 c0 01             	add    eax,0x1
c0013fa9:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013faf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013fb3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013fb6:	0f b7 c0             	movzx  eax,ax
c0013fb9:	85 c0                	test   eax,eax
c0013fbb:	74 33                	je     c0013ff0 <ip_output_if+0x2bc>
c0013fbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013fc4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013fc8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013fcb:	0f b7 d2             	movzx  edx,dx
c0013fce:	0f b7 c0             	movzx  eax,ax
c0013fd1:	39 c2                	cmp    edx,eax
c0013fd3:	76 1b                	jbe    c0013ff0 <ip_output_if+0x2bc>
c0013fd5:	83 ec 04             	sub    esp,0x4
c0013fd8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fdc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fe4:	e8 37 14 00 00       	call   c0015420 <ip_frag>
c0013fe9:	83 c4 10             	add    esp,0x10
c0013fec:	eb 1e                	jmp    c001400c <ip_output_if+0x2d8>
c0013fee:	66 90                	xchg   ax,ax
c0013ff0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ff4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013ff7:	83 ec 04             	sub    esp,0x4
c0013ffa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013ffe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014002:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014006:	ff d0                	call   eax
c0014008:	83 c4 10             	add    esp,0x10
c001400b:	90                   	nop
c001400c:	83 c4 2c             	add    esp,0x2c
c001400f:	c3                   	ret    

c0014010 <ip_output>:
c0014010:	83 ec 2c             	sub    esp,0x2c
c0014013:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014017:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001401b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001401f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014023:	88 c8                	mov    al,cl
c0014025:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0014029:	88 d0                	mov    al,dl
c001402b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001402f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014033:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014037:	0f b7 c0             	movzx  eax,ax
c001403a:	83 f8 01             	cmp    eax,0x1
c001403d:	74 15                	je     c0014054 <ip_output+0x44>
c001403f:	83 ec 08             	sub    esp,0x8
c0014042:	68 ca 12 03 c0       	push   0xc00312ca
c0014047:	68 26 00 03 c0       	push   0xc0030026
c001404c:	e8 73 be 00 00       	call   c001fec4 <CPrintf>
c0014051:	83 c4 10             	add    esp,0x10
c0014054:	83 ec 0c             	sub    esp,0xc
c0014057:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001405b:	e8 fc f7 ff ff       	call   c001385c <ip_route>
c0014060:	83 c4 10             	add    esp,0x10
c0014063:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014067:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001406c:	75 16                	jne    c0014084 <ip_output+0x74>
c001406e:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0014074:	83 c0 01             	add    eax,0x1
c0014077:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c001407d:	b0 fc                	mov    al,0xfc
c001407f:	eb 33                	jmp    c00140b4 <ip_output+0xa4>
c0014081:	8d 76 00             	lea    esi,[esi+0x0]
c0014084:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0014089:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001408e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014093:	83 ec 04             	sub    esp,0x4
c0014096:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001409a:	51                   	push   ecx
c001409b:	52                   	push   edx
c001409c:	50                   	push   eax
c001409d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00140a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00140a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00140a9:	e8 86 fc ff ff       	call   c0013d34 <ip_output_if>
c00140ae:	83 c4 20             	add    esp,0x20
c00140b1:	8d 76 00             	lea    esi,[esi+0x0]
c00140b4:	83 c4 2c             	add    esp,0x2c
c00140b7:	c3                   	ret    

c00140b8 <ip4_addr_isbroadcast>:
c00140b8:	83 ec 10             	sub    esp,0x10
c00140bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140c3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c00140c8:	74 0a                	je     c00140d4 <ip4_addr_isbroadcast+0x1c>
c00140ca:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00140cf:	75 07                	jne    c00140d8 <ip4_addr_isbroadcast+0x20>
c00140d1:	8d 76 00             	lea    esi,[esi+0x0]
c00140d4:	b0 01                	mov    al,0x1
c00140d6:	eb 64                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c00140d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140dc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00140df:	0f b6 c0             	movzx  eax,al
c00140e2:	83 e0 02             	and    eax,0x2
c00140e5:	75 05                	jne    c00140ec <ip4_addr_isbroadcast+0x34>
c00140e7:	b0 00                	mov    al,0x0
c00140e9:	eb 51                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c00140eb:	90                   	nop
c00140ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140f3:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00140f7:	75 07                	jne    c0014100 <ip4_addr_isbroadcast+0x48>
c00140f9:	b0 00                	mov    al,0x0
c00140fb:	eb 3f                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c00140fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014100:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014104:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001410b:	31 c2                	xor    edx,eax
c001410d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014111:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0014114:	21 d0                	and    eax,edx
c0014116:	75 20                	jne    c0014138 <ip4_addr_isbroadcast+0x80>
c0014118:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001411c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001411f:	f7 d0                	not    eax
c0014121:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0014125:	89 c2                	mov    edx,eax
c0014127:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001412b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001412e:	f7 d0                	not    eax
c0014130:	39 c2                	cmp    edx,eax
c0014132:	75 04                	jne    c0014138 <ip4_addr_isbroadcast+0x80>
c0014134:	b0 01                	mov    al,0x1
c0014136:	eb 04                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c0014138:	b0 00                	mov    al,0x0
c001413a:	66 90                	xchg   ax,ax
c001413c:	83 c4 10             	add    esp,0x10
c001413f:	c3                   	ret    

c0014140 <ip4_addr_netmask_valid>:
c0014140:	83 ec 1c             	sub    esp,0x1c
c0014143:	83 ec 0c             	sub    esp,0xc
c0014146:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001414a:	e8 f1 ca fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001414f:	83 c4 10             	add    esp,0x10
c0014152:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014156:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c001415e:	eb 10                	jmp    c0014170 <ip4_addr_netmask_valid+0x30>
c0014160:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014164:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014168:	74 12                	je     c001417c <ip4_addr_netmask_valid+0x3c>
c001416a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c001416e:	66 90                	xchg   ax,ax
c0014170:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014175:	75 e9                	jne    c0014160 <ip4_addr_netmask_valid+0x20>
c0014177:	eb 1b                	jmp    c0014194 <ip4_addr_netmask_valid+0x54>
c0014179:	8d 76 00             	lea    esi,[esi+0x0]
c001417c:	90                   	nop
c001417d:	eb 15                	jmp    c0014194 <ip4_addr_netmask_valid+0x54>
c001417f:	90                   	nop
c0014180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014184:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014188:	74 06                	je     c0014190 <ip4_addr_netmask_valid+0x50>
c001418a:	b0 00                	mov    al,0x0
c001418c:	eb 12                	jmp    c00141a0 <ip4_addr_netmask_valid+0x60>
c001418e:	66 90                	xchg   ax,ax
c0014190:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0014194:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014199:	75 e5                	jne    c0014180 <ip4_addr_netmask_valid+0x40>
c001419b:	b0 01                	mov    al,0x1
c001419d:	8d 76 00             	lea    esi,[esi+0x0]
c00141a0:	83 c4 1c             	add    esp,0x1c
c00141a3:	c3                   	ret    

c00141a4 <ipaddr_aton>:
c00141a4:	83 ec 2c             	sub    esp,0x2c
c00141a7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00141ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141b3:	8a 00                	mov    al,BYTE PTR [eax]
c00141b5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141b9:	8d 76 00             	lea    esi,[esi+0x0]
c00141bc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141c0:	0f b6 c0             	movzx  eax,al
c00141c3:	83 f8 2f             	cmp    eax,0x2f
c00141c6:	76 0c                	jbe    c00141d4 <ipaddr_aton+0x30>
c00141c8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141cc:	0f b6 c0             	movzx  eax,al
c00141cf:	83 f8 39             	cmp    eax,0x39
c00141d2:	76 0c                	jbe    c00141e0 <ipaddr_aton+0x3c>
c00141d4:	b8 00 00 00 00       	mov    eax,0x0
c00141d9:	e9 f2 02 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c00141de:	66 90                	xchg   ax,ax
c00141e0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00141e8:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c00141ed:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00141f2:	83 f8 30             	cmp    eax,0x30
c00141f5:	75 45                	jne    c001423c <ipaddr_aton+0x98>
c00141f7:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014200:	8a 00                	mov    al,BYTE PTR [eax]
c0014202:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014206:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001420b:	83 f8 78             	cmp    eax,0x78
c001420e:	74 0c                	je     c001421c <ipaddr_aton+0x78>
c0014210:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014215:	83 f8 58             	cmp    eax,0x58
c0014218:	75 1a                	jne    c0014234 <ipaddr_aton+0x90>
c001421a:	66 90                	xchg   ax,ax
c001421c:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014221:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001422a:	8a 00                	mov    al,BYTE PTR [eax]
c001422c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014230:	eb 0a                	jmp    c001423c <ipaddr_aton+0x98>
c0014232:	66 90                	xchg   ax,ax
c0014234:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0014239:	8d 76 00             	lea    esi,[esi+0x0]
c001423c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014240:	0f b6 c0             	movzx  eax,al
c0014243:	83 f8 2f             	cmp    eax,0x2f
c0014246:	76 3c                	jbe    c0014284 <ipaddr_aton+0xe0>
c0014248:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001424c:	0f b6 c0             	movzx  eax,al
c001424f:	83 f8 39             	cmp    eax,0x39
c0014252:	77 30                	ja     c0014284 <ipaddr_aton+0xe0>
c0014254:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014259:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001425e:	89 c2                	mov    edx,eax
c0014260:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014265:	01 d0                	add    eax,edx
c0014267:	83 e8 30             	sub    eax,0x30
c001426a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001426e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014273:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014277:	8a 00                	mov    al,BYTE PTR [eax]
c0014279:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001427d:	e9 ae 00 00 00       	jmp    c0014330 <ipaddr_aton+0x18c>
c0014282:	66 90                	xchg   ax,ax
c0014284:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014289:	83 f8 10             	cmp    eax,0x10
c001428c:	0f 85 a6 00 00 00    	jne    c0014338 <ipaddr_aton+0x194>
c0014292:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014296:	0f b6 c0             	movzx  eax,al
c0014299:	83 f8 2f             	cmp    eax,0x2f
c001429c:	76 0e                	jbe    c00142ac <ipaddr_aton+0x108>
c001429e:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142a2:	0f b6 c0             	movzx  eax,al
c00142a5:	83 f8 39             	cmp    eax,0x39
c00142a8:	76 32                	jbe    c00142dc <ipaddr_aton+0x138>
c00142aa:	66 90                	xchg   ax,ax
c00142ac:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142b0:	0f b6 c0             	movzx  eax,al
c00142b3:	83 f8 60             	cmp    eax,0x60
c00142b6:	76 0c                	jbe    c00142c4 <ipaddr_aton+0x120>
c00142b8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142bc:	0f b6 c0             	movzx  eax,al
c00142bf:	83 f8 66             	cmp    eax,0x66
c00142c2:	76 18                	jbe    c00142dc <ipaddr_aton+0x138>
c00142c4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142c8:	0f b6 c0             	movzx  eax,al
c00142cb:	83 f8 40             	cmp    eax,0x40
c00142ce:	76 68                	jbe    c0014338 <ipaddr_aton+0x194>
c00142d0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142d4:	0f b6 c0             	movzx  eax,al
c00142d7:	83 f8 46             	cmp    eax,0x46
c00142da:	77 5c                	ja     c0014338 <ipaddr_aton+0x194>
c00142dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142e0:	c1 e0 04             	shl    eax,0x4
c00142e3:	89 c2                	mov    edx,eax
c00142e5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142ea:	8d 48 0a             	lea    ecx,[eax+0xa]
c00142ed:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142f1:	0f b6 c0             	movzx  eax,al
c00142f4:	83 f8 60             	cmp    eax,0x60
c00142f7:	76 13                	jbe    c001430c <ipaddr_aton+0x168>
c00142f9:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142fd:	0f b6 c0             	movzx  eax,al
c0014300:	83 f8 7a             	cmp    eax,0x7a
c0014303:	77 07                	ja     c001430c <ipaddr_aton+0x168>
c0014305:	b8 61 00 00 00       	mov    eax,0x61
c001430a:	eb 08                	jmp    c0014314 <ipaddr_aton+0x170>
c001430c:	b8 41 00 00 00       	mov    eax,0x41
c0014311:	8d 76 00             	lea    esi,[esi+0x0]
c0014314:	29 c1                	sub    ecx,eax
c0014316:	89 c8                	mov    eax,ecx
c0014318:	09 d0                	or     eax,edx
c001431a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001431e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014327:	8a 00                	mov    al,BYTE PTR [eax]
c0014329:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001432d:	8d 76 00             	lea    esi,[esi+0x0]
c0014330:	e9 07 ff ff ff       	jmp    c001423c <ipaddr_aton+0x98>
c0014335:	8d 76 00             	lea    esi,[esi+0x0]
c0014338:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001433d:	83 f8 2e             	cmp    eax,0x2e
c0014340:	75 42                	jne    c0014384 <ipaddr_aton+0x1e0>
c0014342:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014346:	83 c0 0c             	add    eax,0xc
c0014349:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c001434d:	72 0d                	jb     c001435c <ipaddr_aton+0x1b8>
c001434f:	b8 00 00 00 00       	mov    eax,0x0
c0014354:	e9 77 01 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014359:	8d 76 00             	lea    esi,[esi+0x0]
c001435c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014360:	8d 50 04             	lea    edx,[eax+0x4]
c0014363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001436b:	89 10                	mov    DWORD PTR [eax],edx
c001436d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014372:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014376:	8a 00                	mov    al,BYTE PTR [eax]
c0014378:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001437c:	e9 3b fe ff ff       	jmp    c00141bc <ipaddr_aton+0x18>
c0014381:	8d 76 00             	lea    esi,[esi+0x0]
c0014384:	90                   	nop
c0014385:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001438a:	85 c0                	test   eax,eax
c001438c:	74 46                	je     c00143d4 <ipaddr_aton+0x230>
c001438e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014393:	83 f8 20             	cmp    eax,0x20
c0014396:	74 3c                	je     c00143d4 <ipaddr_aton+0x230>
c0014398:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001439d:	83 f8 0c             	cmp    eax,0xc
c00143a0:	74 32                	je     c00143d4 <ipaddr_aton+0x230>
c00143a2:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143a7:	83 f8 0a             	cmp    eax,0xa
c00143aa:	74 28                	je     c00143d4 <ipaddr_aton+0x230>
c00143ac:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143b1:	83 f8 0d             	cmp    eax,0xd
c00143b4:	74 1e                	je     c00143d4 <ipaddr_aton+0x230>
c00143b6:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143bb:	83 f8 09             	cmp    eax,0x9
c00143be:	74 14                	je     c00143d4 <ipaddr_aton+0x230>
c00143c0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143c5:	83 f8 0b             	cmp    eax,0xb
c00143c8:	74 0a                	je     c00143d4 <ipaddr_aton+0x230>
c00143ca:	b8 00 00 00 00       	mov    eax,0x0
c00143cf:	e9 fc 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c00143d4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00143d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00143dc:	29 c2                	sub    edx,eax
c00143de:	89 d0                	mov    eax,edx
c00143e0:	c1 f8 02             	sar    eax,0x2
c00143e3:	83 c0 01             	add    eax,0x1
c00143e6:	83 f8 04             	cmp    eax,0x4
c00143e9:	0f 87 9d 00 00 00    	ja     c001448c <ipaddr_aton+0x2e8>
c00143ef:	8b 04 85 10 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcecf0]
c00143f6:	ff e0                	jmp    eax
c00143f8:	b8 00 00 00 00       	mov    eax,0x0
c00143fd:	e9 ce 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014402:	66 90                	xchg   ax,ax
c0014404:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c001440c:	76 0a                	jbe    c0014418 <ipaddr_aton+0x274>
c001440e:	b8 00 00 00 00       	mov    eax,0x0
c0014413:	e9 b8 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001441c:	c1 e0 18             	shl    eax,0x18
c001441f:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014423:	e9 80 00 00 00       	jmp    c00144a8 <ipaddr_aton+0x304>
c0014428:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c0014430:	76 0a                	jbe    c001443c <ipaddr_aton+0x298>
c0014432:	b8 00 00 00 00       	mov    eax,0x0
c0014437:	e9 94 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c001443c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014440:	c1 e0 18             	shl    eax,0x18
c0014443:	89 c2                	mov    edx,eax
c0014445:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014449:	c1 e0 10             	shl    eax,0x10
c001444c:	09 d0                	or     eax,edx
c001444e:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014452:	eb 54                	jmp    c00144a8 <ipaddr_aton+0x304>
c0014454:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c001445c:	76 0a                	jbe    c0014468 <ipaddr_aton+0x2c4>
c001445e:	b8 00 00 00 00       	mov    eax,0x0
c0014463:	eb 6b                	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014465:	8d 76 00             	lea    esi,[esi+0x0]
c0014468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001446c:	c1 e0 18             	shl    eax,0x18
c001446f:	89 c2                	mov    edx,eax
c0014471:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014475:	c1 e0 10             	shl    eax,0x10
c0014478:	09 c2                	or     edx,eax
c001447a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001447e:	c1 e0 08             	shl    eax,0x8
c0014481:	09 d0                	or     eax,edx
c0014483:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014487:	eb 1f                	jmp    c00144a8 <ipaddr_aton+0x304>
c0014489:	8d 76 00             	lea    esi,[esi+0x0]
c001448c:	83 ec 08             	sub    esp,0x8
c001448f:	68 05 13 03 c0       	push   0xc0031305
c0014494:	68 26 00 03 c0       	push   0xc0030026
c0014499:	e8 26 ba 00 00       	call   c001fec4 <CPrintf>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	eb 05                	jmp    c00144a8 <ipaddr_aton+0x304>
c00144a3:	90                   	nop
c00144a4:	90                   	nop
c00144a5:	8d 76 00             	lea    esi,[esi+0x0]
c00144a8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00144ad:	74 19                	je     c00144c8 <ipaddr_aton+0x324>
c00144af:	83 ec 0c             	sub    esp,0xc
c00144b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00144b6:	e8 85 c7 fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	89 c2                	mov    edx,eax
c00144c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00144c4:	89 10                	mov    DWORD PTR [eax],edx
c00144c6:	66 90                	xchg   ax,ax
c00144c8:	b8 01 00 00 00       	mov    eax,0x1
c00144cd:	8d 76 00             	lea    esi,[esi+0x0]
c00144d0:	83 c4 2c             	add    esp,0x2c
c00144d3:	c3                   	ret    

c00144d4 <ipaddr_addr>:
c00144d4:	83 ec 1c             	sub    esp,0x1c
c00144d7:	83 ec 08             	sub    esp,0x8
c00144da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00144de:	50                   	push   eax
c00144df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144e3:	e8 bc fc ff ff       	call   c00141a4 <ipaddr_aton>
c00144e8:	83 c4 10             	add    esp,0x10
c00144eb:	85 c0                	test   eax,eax
c00144ed:	74 09                	je     c00144f8 <ipaddr_addr+0x24>
c00144ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00144f3:	eb 0b                	jmp    c0014500 <ipaddr_addr+0x2c>
c00144f5:	8d 76 00             	lea    esi,[esi+0x0]
c00144f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00144fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014500:	83 c4 1c             	add    esp,0x1c
c0014503:	c3                   	ret    

c0014504 <ipaddr_ntoa_r>:
c0014504:	83 ec 20             	sub    esp,0x20
c0014507:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001450f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014513:	8b 00                	mov    eax,DWORD PTR [eax]
c0014515:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014519:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001451d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014521:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014525:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014529:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001452e:	e9 f9 00 00 00       	jmp    c001462c <ipaddr_ntoa_r+0x128>
c0014533:	90                   	nop
c0014534:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0014539:	8d 76 00             	lea    esi,[esi+0x0]
c001453c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014540:	8a 00                	mov    al,BYTE PTR [eax]
c0014542:	0f b6 c8             	movzx  ecx,al
c0014545:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001454a:	89 c8                	mov    eax,ecx
c001454c:	f7 e2                	mul    edx
c001454e:	c1 ea 03             	shr    edx,0x3
c0014551:	89 d0                	mov    eax,edx
c0014553:	c1 e0 02             	shl    eax,0x2
c0014556:	01 d0                	add    eax,edx
c0014558:	d1 e0                	shl    eax,1
c001455a:	29 c1                	sub    ecx,eax
c001455c:	89 c8                	mov    eax,ecx
c001455e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014562:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014566:	8a 00                	mov    al,BYTE PTR [eax]
c0014568:	0f b6 c0             	movzx  eax,al
c001456b:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014570:	f7 e2                	mul    edx
c0014572:	89 d0                	mov    eax,edx
c0014574:	c1 e8 03             	shr    eax,0x3
c0014577:	88 c2                	mov    dl,al
c0014579:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001457d:	88 10                	mov    BYTE PTR [eax],dl
c001457f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014583:	83 c0 30             	add    eax,0x30
c0014586:	88 c1                	mov    cl,al
c0014588:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c001458c:	8d 50 01             	lea    edx,[eax+0x1]
c001458f:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014593:	0f b6 c0             	movzx  eax,al
c0014596:	88 ca                	mov    dl,cl
c0014598:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c001459c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145a0:	8a 00                	mov    al,BYTE PTR [eax]
c00145a2:	0f b6 c0             	movzx  eax,al
c00145a5:	85 c0                	test   eax,eax
c00145a7:	75 93                	jne    c001453c <ipaddr_ntoa_r+0x38>
c00145a9:	eb 35                	jmp    c00145e0 <ipaddr_ntoa_r+0xdc>
c00145ab:	90                   	nop
c00145ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b0:	8d 50 01             	lea    edx,[eax+0x1]
c00145b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00145b7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00145bb:	7f 0b                	jg     c00145c8 <ipaddr_ntoa_r+0xc4>
c00145bd:	b8 00 00 00 00       	mov    eax,0x0
c00145c2:	e9 85 00 00 00       	jmp    c001464c <ipaddr_ntoa_r+0x148>
c00145c7:	90                   	nop
c00145c8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00145cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00145d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00145d4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00145d8:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c00145dc:	88 10                	mov    BYTE PTR [eax],dl
c00145de:	66 90                	xchg   ax,ax
c00145e0:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00145e4:	8d 50 ff             	lea    edx,[eax-0x1]
c00145e7:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00145eb:	0f b6 c0             	movzx  eax,al
c00145ee:	85 c0                	test   eax,eax
c00145f0:	75 ba                	jne    c00145ac <ipaddr_ntoa_r+0xa8>
c00145f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f6:	8d 50 01             	lea    edx,[eax+0x1]
c00145f9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00145fd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014601:	7f 09                	jg     c001460c <ipaddr_ntoa_r+0x108>
c0014603:	b8 00 00 00 00       	mov    eax,0x0
c0014608:	eb 42                	jmp    c001464c <ipaddr_ntoa_r+0x148>
c001460a:	66 90                	xchg   ax,ax
c001460c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014610:	8d 50 01             	lea    edx,[eax+0x1]
c0014613:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014617:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001461a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001461f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014623:	83 c0 01             	add    eax,0x1
c0014626:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001462a:	66 90                	xchg   ax,ax
c001462c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0014631:	83 f8 03             	cmp    eax,0x3
c0014634:	0f 86 fa fe ff ff    	jbe    c0014534 <ipaddr_ntoa_r+0x30>
c001463a:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c001463f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014643:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014646:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001464a:	66 90                	xchg   ax,ax
c001464c:	83 c4 20             	add    esp,0x20
c001464f:	c3                   	ret    

c0014650 <ipaddr_ntoa>:
c0014650:	6a 10                	push   0x10
c0014652:	68 a4 a9 03 c0       	push   0xc003a9a4
c0014657:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001465b:	e8 a4 fe ff ff       	call   c0014504 <ipaddr_ntoa_r>
c0014660:	83 c4 0c             	add    esp,0xc
c0014663:	c3                   	ret    

c0014664 <ip_reass_dequeue_datagram>:
c0014664:	83 ec 0c             	sub    esp,0xc
c0014667:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001466c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014670:	75 0e                	jne    c0014680 <ip_reass_dequeue_datagram+0x1c>
c0014672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014676:	8b 00                	mov    eax,DWORD PTR [eax]
c0014678:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c001467d:	eb 29                	jmp    c00146a8 <ip_reass_dequeue_datagram+0x44>
c001467f:	90                   	nop
c0014680:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014685:	75 15                	jne    c001469c <ip_reass_dequeue_datagram+0x38>
c0014687:	83 ec 08             	sub    esp,0x8
c001468a:	68 2c 13 03 c0       	push   0xc003132c
c001468f:	68 26 00 03 c0       	push   0xc0030026
c0014694:	e8 2b b8 00 00       	call   c001fec4 <CPrintf>
c0014699:	83 c4 10             	add    esp,0x10
c001469c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00146a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146a6:	89 10                	mov    DWORD PTR [eax],edx
c00146a8:	83 ec 08             	sub    esp,0x8
c00146ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146af:	6a 05                	push   0x5
c00146b1:	e8 9e 35 ff ff       	call   c0007c54 <memp_free>
c00146b6:	83 c4 10             	add    esp,0x10
c00146b9:	90                   	nop
c00146ba:	83 c4 0c             	add    esp,0xc
c00146bd:	c3                   	ret    
c00146be:	66 90                	xchg   ax,ax

c00146c0 <ip_reass_free_complete_datagram>:
c00146c0:	83 ec 2c             	sub    esp,0x2c
c00146c3:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00146ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146ce:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00146d2:	75 18                	jne    c00146ec <ip_reass_free_complete_datagram+0x2c>
c00146d4:	83 ec 08             	sub    esp,0x8
c00146d7:	68 45 13 03 c0       	push   0xc0031345
c00146dc:	68 26 00 03 c0       	push   0xc0030026
c00146e1:	e8 de b7 00 00       	call   c001fec4 <CPrintf>
c00146e6:	83 c4 10             	add    esp,0x10
c00146e9:	8d 76 00             	lea    esi,[esi+0x0]
c00146ec:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00146f1:	74 21                	je     c0014714 <ip_reass_free_complete_datagram+0x54>
c00146f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00146f9:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00146fd:	74 15                	je     c0014714 <ip_reass_free_complete_datagram+0x54>
c00146ff:	83 ec 08             	sub    esp,0x8
c0014702:	68 51 13 03 c0       	push   0xc0031351
c0014707:	68 26 00 03 c0       	push   0xc0030026
c001470c:	e8 b3 b7 00 00       	call   c001fec4 <CPrintf>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014722:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014726:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001472a:	0f b7 c0             	movzx  eax,ax
c001472d:	85 c0                	test   eax,eax
c001472f:	0f 85 a3 00 00 00    	jne    c00147d8 <ip_reass_free_complete_datagram+0x118>
c0014735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014739:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001473c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014740:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014744:	8b 10                	mov    edx,DWORD PTR [eax]
c0014746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001474a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001474d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014751:	8d 50 08             	lea    edx,[eax+0x8]
c0014754:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001475b:	83 ec 04             	sub    esp,0x4
c001475e:	6a 14                	push   0x14
c0014760:	52                   	push   edx
c0014761:	50                   	push   eax
c0014762:	e8 13 bc fe ff       	call   c000037a <memcpy>
c0014767:	83 c4 10             	add    esp,0x10
c001476a:	83 ec 08             	sub    esp,0x8
c001476d:	6a 01                	push   0x1
c001476f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014773:	e8 3c eb ff ff       	call   c00132b4 <icmp_time_exceeded>
c0014778:	83 c4 10             	add    esp,0x10
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014782:	e8 69 45 ff ff       	call   c0008cf0 <pbuf_clen>
c0014787:	83 c4 10             	add    esp,0x10
c001478a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001478e:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014793:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014798:	01 d0                	add    eax,edx
c001479a:	3d ff ff 00 00       	cmp    eax,0xffff
c001479f:	7e 17                	jle    c00147b8 <ip_reass_free_complete_datagram+0xf8>
c00147a1:	83 ec 08             	sub    esp,0x8
c00147a4:	68 63 13 03 c0       	push   0xc0031363
c00147a9:	68 26 00 03 c0       	push   0xc0030026
c00147ae:	e8 11 b7 00 00       	call   c001fec4 <CPrintf>
c00147b3:	83 c4 10             	add    esp,0x10
c00147b6:	66 90                	xchg   ax,ax
c00147b8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00147bd:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00147c2:	01 d0                	add    eax,edx
c00147c4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00147c9:	83 ec 0c             	sub    esp,0xc
c00147cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147d0:	e8 3f 3d ff ff       	call   c0008514 <pbuf_free>
c00147d5:	83 c4 10             	add    esp,0x10
c00147d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00147df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147e3:	eb 7b                	jmp    c0014860 <ip_reass_free_complete_datagram+0x1a0>
c00147e5:	8d 76 00             	lea    esi,[esi+0x0]
c00147e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00147ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0014801:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014805:	83 ec 0c             	sub    esp,0xc
c0014808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001480c:	e8 df 44 ff ff       	call   c0008cf0 <pbuf_clen>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014818:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001481d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014822:	01 d0                	add    eax,edx
c0014824:	3d ff ff 00 00       	cmp    eax,0xffff
c0014829:	7e 15                	jle    c0014840 <ip_reass_free_complete_datagram+0x180>
c001482b:	83 ec 08             	sub    esp,0x8
c001482e:	68 63 13 03 c0       	push   0xc0031363
c0014833:	68 26 00 03 c0       	push   0xc0030026
c0014838:	e8 87 b6 00 00       	call   c001fec4 <CPrintf>
c001483d:	83 c4 10             	add    esp,0x10
c0014840:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014845:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001484a:	01 d0                	add    eax,edx
c001484c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014851:	83 ec 0c             	sub    esp,0xc
c0014854:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014858:	e8 b7 3c ff ff       	call   c0008514 <pbuf_free>
c001485d:	83 c4 10             	add    esp,0x10
c0014860:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014865:	75 81                	jne    c00147e8 <ip_reass_free_complete_datagram+0x128>
c0014867:	83 ec 08             	sub    esp,0x8
c001486a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001486e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014872:	e8 ed fd ff ff       	call   c0014664 <ip_reass_dequeue_datagram>
c0014877:	83 c4 10             	add    esp,0x10
c001487a:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014880:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014885:	0f b7 c0             	movzx  eax,ax
c0014888:	39 c2                	cmp    edx,eax
c001488a:	76 18                	jbe    c00148a4 <ip_reass_free_complete_datagram+0x1e4>
c001488c:	83 ec 08             	sub    esp,0x8
c001488f:	68 80 13 03 c0       	push   0xc0031380
c0014894:	68 26 00 03 c0       	push   0xc0030026
c0014899:	e8 26 b6 00 00       	call   c001fec4 <CPrintf>
c001489e:	83 c4 10             	add    esp,0x10
c00148a1:	8d 76 00             	lea    esi,[esi+0x0]
c00148a4:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c00148ab:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00148b0:	89 d1                	mov    ecx,edx
c00148b2:	29 c1                	sub    ecx,eax
c00148b4:	89 c8                	mov    eax,ecx
c00148b6:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00148bc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00148c1:	83 c4 2c             	add    esp,0x2c
c00148c4:	c3                   	ret    
c00148c5:	8d 76 00             	lea    esi,[esi+0x0]

c00148c8 <ip_reass_tmr>:
c00148c8:	83 ec 1c             	sub    esp,0x1c
c00148cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148d3:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00148d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148dc:	eb 62                	jmp    c0014940 <ip_reass_tmr+0x78>
c00148de:	66 90                	xchg   ax,ax
c00148e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148e4:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00148e7:	0f b6 c0             	movzx  eax,al
c00148ea:	85 c0                	test   eax,eax
c00148ec:	74 2a                	je     c0014918 <ip_reass_tmr+0x50>
c00148ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148f2:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00148f5:	83 e8 01             	sub    eax,0x1
c00148f8:	88 c2                	mov    dl,al
c00148fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148fe:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014905:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014909:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001490d:	8b 00                	mov    eax,DWORD PTR [eax]
c001490f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014913:	eb 2b                	jmp    c0014940 <ip_reass_tmr+0x78>
c0014915:	8d 76 00             	lea    esi,[esi+0x0]
c0014918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001491c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014924:	8b 00                	mov    eax,DWORD PTR [eax]
c0014926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001492a:	83 ec 08             	sub    esp,0x8
c001492d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014931:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014935:	e8 86 fd ff ff       	call   c00146c0 <ip_reass_free_complete_datagram>
c001493a:	83 c4 10             	add    esp,0x10
c001493d:	8d 76 00             	lea    esi,[esi+0x0]
c0014940:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014945:	75 99                	jne    c00148e0 <ip_reass_tmr+0x18>
c0014947:	90                   	nop
c0014948:	83 c4 1c             	add    esp,0x1c
c001494b:	c3                   	ret    

c001494c <ip_reass_remove_oldest_datagram>:
c001494c:	83 ec 2c             	sub    esp,0x2c
c001494f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014957:	90                   	nop
c0014958:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014960:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014968:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014970:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014975:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014979:	e9 9a 00 00 00       	jmp    c0014a18 <ip_reass_remove_oldest_datagram+0xcc>
c001497e:	66 90                	xchg   ax,ax
c0014980:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014984:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001498b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001498e:	39 c2                	cmp    edx,eax
c0014990:	75 2e                	jne    c00149c0 <ip_reass_remove_oldest_datagram+0x74>
c0014992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014996:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001499d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00149a0:	39 c2                	cmp    edx,eax
c00149a2:	75 1c                	jne    c00149c0 <ip_reass_remove_oldest_datagram+0x74>
c00149a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149a8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00149ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149af:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149b3:	0f b7 d2             	movzx  edx,dx
c00149b6:	0f b7 c0             	movzx  eax,ax
c00149b9:	39 c2                	cmp    edx,eax
c00149bb:	74 3b                	je     c00149f8 <ip_reass_remove_oldest_datagram+0xac>
c00149bd:	8d 76 00             	lea    esi,[esi+0x0]
c00149c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00149c5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149ca:	75 0c                	jne    c00149d8 <ip_reass_remove_oldest_datagram+0x8c>
c00149cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149d4:	eb 22                	jmp    c00149f8 <ip_reass_remove_oldest_datagram+0xac>
c00149d6:	66 90                	xchg   ax,ax
c00149d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149dc:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c00149df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149e3:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00149e6:	0f b6 d2             	movzx  edx,dl
c00149e9:	0f b6 c0             	movzx  eax,al
c00149ec:	39 c2                	cmp    edx,eax
c00149ee:	77 08                	ja     c00149f8 <ip_reass_remove_oldest_datagram+0xac>
c00149f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00149fe:	85 c0                	test   eax,eax
c0014a00:	74 0a                	je     c0014a0c <ip_reass_remove_oldest_datagram+0xc0>
c0014a02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a0a:	66 90                	xchg   ax,ax
c0014a0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a16:	66 90                	xchg   ax,ax
c0014a18:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014a1d:	0f 85 5d ff ff ff    	jne    c0014980 <ip_reass_remove_oldest_datagram+0x34>
c0014a23:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a28:	74 22                	je     c0014a4c <ip_reass_remove_oldest_datagram+0x100>
c0014a2a:	83 ec 08             	sub    esp,0x8
c0014a2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a35:	e8 86 fc ff ff       	call   c00146c0 <ip_reass_free_complete_datagram>
c0014a3a:	83 c4 10             	add    esp,0x10
c0014a3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a45:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014a49:	8d 76 00             	lea    esi,[esi+0x0]
c0014a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a50:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014a54:	7d 0e                	jge    c0014a64 <ip_reass_remove_oldest_datagram+0x118>
c0014a56:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c0014a5b:	0f 8f f7 fe ff ff    	jg     c0014958 <ip_reass_remove_oldest_datagram+0xc>
c0014a61:	8d 76 00             	lea    esi,[esi+0x0]
c0014a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a68:	83 c4 2c             	add    esp,0x2c
c0014a6b:	c3                   	ret    

c0014a6c <ip_reass_enqueue_new_datagram>:
c0014a6c:	83 ec 1c             	sub    esp,0x1c
c0014a6f:	83 ec 0c             	sub    esp,0xc
c0014a72:	6a 05                	push   0x5
c0014a74:	e8 af 30 ff ff       	call   c0007b28 <memp_malloc>
c0014a79:	83 c4 10             	add    esp,0x10
c0014a7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014a85:	75 4d                	jne    c0014ad4 <ip_reass_enqueue_new_datagram+0x68>
c0014a87:	83 ec 08             	sub    esp,0x8
c0014a8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a92:	e8 b5 fe ff ff       	call   c001494c <ip_reass_remove_oldest_datagram>
c0014a97:	83 c4 10             	add    esp,0x10
c0014a9a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014a9e:	7f 14                	jg     c0014ab4 <ip_reass_enqueue_new_datagram+0x48>
c0014aa0:	83 ec 0c             	sub    esp,0xc
c0014aa3:	6a 05                	push   0x5
c0014aa5:	e8 7e 30 ff ff       	call   c0007b28 <memp_malloc>
c0014aaa:	83 c4 10             	add    esp,0x10
c0014aad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ab4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014ab9:	75 19                	jne    c0014ad4 <ip_reass_enqueue_new_datagram+0x68>
c0014abb:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014ac1:	83 c0 01             	add    eax,0x1
c0014ac4:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014aca:	b8 00 00 00 00       	mov    eax,0x0
c0014acf:	eb 53                	jmp    c0014b24 <ip_reass_enqueue_new_datagram+0xb8>
c0014ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ad4:	83 ec 04             	sub    esp,0x4
c0014ad7:	6a 20                	push   0x20
c0014ad9:	6a 00                	push   0x0
c0014adb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014adf:	e8 0c ba fe ff       	call   c00004f0 <memset>
c0014ae4:	83 c4 10             	add    esp,0x10
c0014ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014aeb:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014aef:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c0014af5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014af9:	89 10                	mov    DWORD PTR [eax],edx
c0014afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014aff:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014b04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b08:	83 c0 08             	add    eax,0x8
c0014b0b:	83 ec 04             	sub    esp,0x4
c0014b0e:	6a 14                	push   0x14
c0014b10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014b14:	50                   	push   eax
c0014b15:	e8 60 b8 fe ff       	call   c000037a <memcpy>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b21:	8d 76 00             	lea    esi,[esi+0x0]
c0014b24:	83 c4 1c             	add    esp,0x1c
c0014b27:	c3                   	ret    

c0014b28 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014b28:	53                   	push   ebx
c0014b29:	83 ec 28             	sub    esp,0x28
c0014b2c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014b34:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014b3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b4b:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014b4f:	0f b7 c0             	movzx  eax,ax
c0014b52:	83 ec 0c             	sub    esp,0xc
c0014b55:	50                   	push   eax
c0014b56:	e8 c1 c0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014b5b:	83 c4 10             	add    esp,0x10
c0014b5e:	89 c3                	mov    ebx,eax
c0014b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b64:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014b67:	0f b7 c0             	movzx  eax,ax
c0014b6a:	83 ec 0c             	sub    esp,0xc
c0014b6d:	50                   	push   eax
c0014b6e:	e8 a9 c0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014b73:	83 c4 10             	add    esp,0x10
c0014b76:	0f b7 c0             	movzx  eax,ax
c0014b79:	c1 e8 08             	shr    eax,0x8
c0014b7c:	83 e0 0f             	and    eax,0xf
c0014b7f:	c1 e0 02             	shl    eax,0x2
c0014b82:	89 d9                	mov    ecx,ebx
c0014b84:	29 c1                	sub    ecx,eax
c0014b86:	89 c8                	mov    eax,ecx
c0014b88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b91:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b95:	0f b7 c0             	movzx  eax,ax
c0014b98:	83 ec 0c             	sub    esp,0xc
c0014b9b:	50                   	push   eax
c0014b9c:	e8 7b c0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ba9:	c1 e0 03             	shl    eax,0x3
c0014bac:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014bb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014bc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bce:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014bd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bd6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014bdb:	01 d0                	add    eax,edx
c0014bdd:	89 c2                	mov    edx,eax
c0014bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014be3:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0014be7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014beb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bf2:	e9 11 01 00 00       	jmp    c0014d08 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014bf7:	90                   	nop
c0014bf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c07:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014c0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c0f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c13:	0f b7 d2             	movzx  edx,dx
c0014c16:	0f b7 c0             	movzx  eax,ax
c0014c19:	39 c2                	cmp    edx,eax
c0014c1b:	73 6f                	jae    c0014c8c <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014c25:	89 10                	mov    DWORD PTR [eax],edx
c0014c27:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c2c:	74 4e                	je     c0014c7c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c32:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014c36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c3a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014c3e:	0f b7 d2             	movzx  edx,dx
c0014c41:	0f b7 c0             	movzx  eax,ax
c0014c44:	39 c2                	cmp    edx,eax
c0014c46:	0f 82 bc 02 00 00    	jb     c0014f08 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014c4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c50:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c58:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c5c:	0f b7 d2             	movzx  edx,dx
c0014c5f:	0f b7 c0             	movzx  eax,ax
c0014c62:	39 c2                	cmp    edx,eax
c0014c64:	0f 87 9e 02 00 00    	ja     c0014f08 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014c6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c72:	89 10                	mov    DWORD PTR [eax],edx
c0014c74:	e9 9b 00 00 00       	jmp    c0014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014c79:	8d 76 00             	lea    esi,[esi+0x0]
c0014c7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c80:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c84:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014c87:	e9 88 00 00 00       	jmp    c0014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c90:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c98:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c9c:	0f b7 d2             	movzx  edx,dx
c0014c9f:	0f b7 c0             	movzx  eax,ax
c0014ca2:	39 c2                	cmp    edx,eax
c0014ca4:	0f 84 62 02 00 00    	je     c0014f0c <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014caa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cae:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cb6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014cba:	0f b7 d2             	movzx  edx,dx
c0014cbd:	0f b7 c0             	movzx  eax,ax
c0014cc0:	39 c2                	cmp    edx,eax
c0014cc2:	0f 82 48 02 00 00    	jb     c0014f10 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014cc8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ccd:	74 25                	je     c0014cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014ccf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cd3:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cdb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014cdf:	0f b7 d2             	movzx  edx,dx
c0014ce2:	0f b7 c0             	movzx  eax,ax
c0014ce5:	39 c2                	cmp    edx,eax
c0014ce7:	74 0b                	je     c0014cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014ce9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d06:	66 90                	xchg   ax,ax
c0014d08:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d0d:	0f 85 e5 fe ff ff    	jne    c0014bf8 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014d13:	90                   	nop
c0014d14:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d19:	0f 85 95 00 00 00    	jne    c0014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014d1f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014d24:	74 62                	je     c0014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014d26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d2a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d32:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d36:	0f b7 d2             	movzx  edx,dx
c0014d39:	0f b7 c0             	movzx  eax,ax
c0014d3c:	39 c2                	cmp    edx,eax
c0014d3e:	76 18                	jbe    c0014d58 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014d40:	83 ec 08             	sub    esp,0x8
c0014d43:	68 9b 13 03 c0       	push   0xc003139b
c0014d48:	68 26 00 03 c0       	push   0xc0030026
c0014d4d:	e8 72 b1 00 00       	call   c001fec4 <CPrintf>
c0014d52:	83 c4 10             	add    esp,0x10
c0014d55:	8d 76 00             	lea    esi,[esi+0x0]
c0014d58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014d60:	89 10                	mov    DWORD PTR [eax],edx
c0014d62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d66:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d6e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d72:	0f b7 d2             	movzx  edx,dx
c0014d75:	0f b7 c0             	movzx  eax,ax
c0014d78:	39 c2                	cmp    edx,eax
c0014d7a:	74 38                	je     c0014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014d7c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d84:	eb 2e                	jmp    c0014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014d86:	66 90                	xchg   ax,ax
c0014d88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d8f:	85 c0                	test   eax,eax
c0014d91:	74 15                	je     c0014da8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014d93:	83 ec 08             	sub    esp,0x8
c0014d96:	68 dc 13 03 c0       	push   0xc00313dc
c0014d9b:	68 26 00 03 c0       	push   0xc0030026
c0014da0:	e8 1f b1 00 00       	call   c001fec4 <CPrintf>
c0014da5:	83 c4 10             	add    esp,0x10
c0014da8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014db0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014db3:	90                   	nop
c0014db4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014db8:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014dbb:	0f b6 c0             	movzx  eax,al
c0014dbe:	83 e0 01             	and    eax,0x1
c0014dc1:	0f 84 39 01 00 00    	je     c0014f00 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014dc7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014dcc:	0f 84 26 01 00 00    	je     c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014dd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ddc:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014de0:	0f b7 c0             	movzx  eax,ax
c0014de3:	85 c0                	test   eax,eax
c0014de5:	74 0d                	je     c0014df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014de7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014def:	e9 04 01 00 00       	jmp    c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014df4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014df8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e06:	eb 44                	jmp    c0014e4c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014e08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e17:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014e1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e1f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014e23:	0f b7 d2             	movzx  edx,dx
c0014e26:	0f b7 c0             	movzx  eax,ax
c0014e29:	39 c2                	cmp    edx,eax
c0014e2b:	74 0b                	je     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014e2d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014e35:	eb 1d                	jmp    c0014e54 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014e37:	90                   	nop
c0014e38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e4a:	66 90                	xchg   ax,ax
c0014e4c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e51:	75 b5                	jne    c0014e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014e53:	90                   	nop
c0014e54:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e59:	0f 84 99 00 00 00    	je     c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014e5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e66:	85 c0                	test   eax,eax
c0014e68:	75 16                	jne    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014e6a:	83 ec 08             	sub    esp,0x8
c0014e6d:	68 b9 13 03 c0       	push   0xc00313b9
c0014e72:	68 26 00 03 c0       	push   0xc0030026
c0014e77:	e8 48 b0 00 00       	call   c001fec4 <CPrintf>
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	90                   	nop
c0014e80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e8a:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014e8e:	75 18                	jne    c0014ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014e90:	83 ec 08             	sub    esp,0x8
c0014e93:	68 b9 13 03 c0       	push   0xc00313b9
c0014e98:	68 26 00 03 c0       	push   0xc0030026
c0014e9d:	e8 22 b0 00 00       	call   c001fec4 <CPrintf>
c0014ea2:	83 c4 10             	add    esp,0x10
c0014ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ea8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eae:	85 c0                	test   eax,eax
c0014eb0:	74 16                	je     c0014ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014eb2:	83 ec 08             	sub    esp,0x8
c0014eb5:	68 14 14 03 c0       	push   0xc0031414
c0014eba:	68 26 00 03 c0       	push   0xc0030026
c0014ebf:	e8 00 b0 00 00       	call   c001fec4 <CPrintf>
c0014ec4:	83 c4 10             	add    esp,0x10
c0014ec7:	90                   	nop
c0014ec8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ecc:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ed0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ed4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ed7:	0f b7 d2             	movzx  edx,dx
c0014eda:	0f b7 c0             	movzx  eax,ax
c0014edd:	39 c2                	cmp    edx,eax
c0014edf:	74 17                	je     c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014ee1:	83 ec 08             	sub    esp,0x8
c0014ee4:	68 38 14 03 c0       	push   0xc0031438
c0014ee9:	68 26 00 03 c0       	push   0xc0030026
c0014eee:	e8 d1 af 00 00       	call   c001fec4 <CPrintf>
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	66 90                	xchg   ax,ax
c0014ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014efc:	eb 52                	jmp    c0014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014efe:	66 90                	xchg   ax,ax
c0014f00:	b8 00 00 00 00       	mov    eax,0x0
c0014f05:	eb 49                	jmp    c0014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014f07:	90                   	nop
c0014f08:	90                   	nop
c0014f09:	eb 09                	jmp    c0014f14 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014f0b:	90                   	nop
c0014f0c:	90                   	nop
c0014f0d:	eb 05                	jmp    c0014f14 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014f0f:	90                   	nop
c0014f10:	90                   	nop
c0014f11:	8d 76 00             	lea    esi,[esi+0x0]
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014f1b:	e8 d0 3d ff ff       	call   c0008cf0 <pbuf_clen>
c0014f20:	83 c4 10             	add    esp,0x10
c0014f23:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014f2a:	0f b6 c0             	movzx  eax,al
c0014f2d:	89 d3                	mov    ebx,edx
c0014f2f:	29 c3                	sub    ebx,eax
c0014f31:	89 d8                	mov    eax,ebx
c0014f33:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014f39:	83 ec 0c             	sub    esp,0xc
c0014f3c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014f40:	e8 cf 35 ff ff       	call   c0008514 <pbuf_free>
c0014f45:	83 c4 10             	add    esp,0x10
c0014f48:	b8 00 00 00 00       	mov    eax,0x0
c0014f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f50:	83 c4 28             	add    esp,0x28
c0014f53:	5b                   	pop    ebx
c0014f54:	c3                   	ret    
c0014f55:	8d 76 00             	lea    esi,[esi+0x0]

c0014f58 <ip_reass>:
c0014f58:	53                   	push   ebx
c0014f59:	83 ec 28             	sub    esp,0x28
c0014f5c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014f64:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014f6a:	83 c0 01             	add    eax,0x1
c0014f6d:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014f85:	0f b7 c0             	movzx  eax,ax
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	50                   	push   eax
c0014f8c:	e8 8b bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	0f b7 c0             	movzx  eax,ax
c0014f97:	c1 e8 08             	shr    eax,0x8
c0014f9a:	0f b7 c0             	movzx  eax,ax
c0014f9d:	83 e0 0f             	and    eax,0xf
c0014fa0:	c1 e0 02             	shl    eax,0x2
c0014fa3:	83 f8 14             	cmp    eax,0x14
c0014fa6:	74 14                	je     c0014fbc <ip_reass+0x64>
c0014fa8:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014fae:	83 c0 01             	add    eax,0x1
c0014fb1:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014fb7:	e9 70 03 00 00       	jmp    c001532c <ip_reass+0x3d4>
c0014fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fc0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014fc4:	0f b7 c0             	movzx  eax,ax
c0014fc7:	83 ec 0c             	sub    esp,0xc
c0014fca:	50                   	push   eax
c0014fcb:	e8 4c bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014fd0:	83 c4 10             	add    esp,0x10
c0014fd3:	25 ff 1f 00 00       	and    eax,0x1fff
c0014fd8:	c1 e0 03             	shl    eax,0x3
c0014fdb:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe4:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014fe8:	0f b7 c0             	movzx  eax,ax
c0014feb:	83 ec 0c             	sub    esp,0xc
c0014fee:	50                   	push   eax
c0014fef:	e8 28 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014ff4:	83 c4 10             	add    esp,0x10
c0014ff7:	89 c3                	mov    ebx,eax
c0014ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015000:	0f b7 c0             	movzx  eax,ax
c0015003:	83 ec 0c             	sub    esp,0xc
c0015006:	50                   	push   eax
c0015007:	e8 10 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001500c:	83 c4 10             	add    esp,0x10
c001500f:	0f b7 c0             	movzx  eax,ax
c0015012:	c1 e8 08             	shr    eax,0x8
c0015015:	83 e0 0f             	and    eax,0xf
c0015018:	c1 e0 02             	shl    eax,0x2
c001501b:	89 d9                	mov    ecx,ebx
c001501d:	29 c1                	sub    ecx,eax
c001501f:	89 c8                	mov    eax,ecx
c0015021:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015026:	83 ec 0c             	sub    esp,0xc
c0015029:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001502d:	e8 be 3c ff ff       	call   c0008cf0 <pbuf_clen>
c0015032:	83 c4 10             	add    esp,0x10
c0015035:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015039:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c001503f:	0f b7 d0             	movzx  edx,ax
c0015042:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015047:	01 d0                	add    eax,edx
c0015049:	83 f8 0a             	cmp    eax,0xa
c001504c:	7e 42                	jle    c0015090 <ip_reass+0x138>
c001504e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015053:	83 ec 08             	sub    esp,0x8
c0015056:	50                   	push   eax
c0015057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001505b:	e8 ec f8 ff ff       	call   c001494c <ip_reass_remove_oldest_datagram>
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	85 c0                	test   eax,eax
c0015065:	74 15                	je     c001507c <ip_reass+0x124>
c0015067:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c001506d:	0f b7 d0             	movzx  edx,ax
c0015070:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015075:	01 d0                	add    eax,edx
c0015077:	83 f8 0a             	cmp    eax,0xa
c001507a:	7e 14                	jle    c0015090 <ip_reass+0x138>
c001507c:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0015082:	83 c0 01             	add    eax,0x1
c0015085:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c001508b:	e9 9c 02 00 00       	jmp    c001532c <ip_reass+0x3d4>
c0015090:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0015095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015099:	eb 65                	jmp    c0015100 <ip_reass+0x1a8>
c001509b:	90                   	nop
c001509c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150a0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00150a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00150aa:	39 c2                	cmp    edx,eax
c00150ac:	75 3e                	jne    c00150ec <ip_reass+0x194>
c00150ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00150b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00150bc:	39 c2                	cmp    edx,eax
c00150be:	75 2c                	jne    c00150ec <ip_reass+0x194>
c00150c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00150c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150cb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00150cf:	0f b7 d2             	movzx  edx,dx
c00150d2:	0f b7 c0             	movzx  eax,ax
c00150d5:	39 c2                	cmp    edx,eax
c00150d7:	75 13                	jne    c00150ec <ip_reass+0x194>
c00150d9:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c00150df:	83 c0 01             	add    eax,0x1
c00150e2:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c00150e8:	eb 1e                	jmp    c0015108 <ip_reass+0x1b0>
c00150ea:	66 90                	xchg   ax,ax
c00150ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00150f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00150fe:	66 90                	xchg   ax,ax
c0015100:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015105:	75 95                	jne    c001509c <ip_reass+0x144>
c0015107:	90                   	nop
c0015108:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001510d:	75 25                	jne    c0015134 <ip_reass+0x1dc>
c001510f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015114:	83 ec 08             	sub    esp,0x8
c0015117:	50                   	push   eax
c0015118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001511c:	e8 4b f9 ff ff       	call   c0014a6c <ip_reass_enqueue_new_datagram>
c0015121:	83 c4 10             	add    esp,0x10
c0015124:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015128:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001512d:	75 61                	jne    c0015190 <ip_reass+0x238>
c001512f:	e9 f8 01 00 00       	jmp    c001532c <ip_reass+0x3d4>
c0015134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015138:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001513c:	0f b7 c0             	movzx  eax,ax
c001513f:	83 ec 0c             	sub    esp,0xc
c0015142:	50                   	push   eax
c0015143:	e8 d4 ba fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015148:	83 c4 10             	add    esp,0x10
c001514b:	0f b7 c0             	movzx  eax,ax
c001514e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015153:	75 3b                	jne    c0015190 <ip_reass+0x238>
c0015155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015159:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c001515d:	0f b7 c0             	movzx  eax,ax
c0015160:	83 ec 0c             	sub    esp,0xc
c0015163:	50                   	push   eax
c0015164:	e8 b3 ba fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	0f b7 c0             	movzx  eax,ax
c001516f:	25 ff 1f 00 00       	and    eax,0x1fff
c0015174:	74 1a                	je     c0015190 <ip_reass+0x238>
c0015176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001517a:	83 c0 08             	add    eax,0x8
c001517d:	83 ec 04             	sub    esp,0x4
c0015180:	6a 14                	push   0x14
c0015182:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015186:	50                   	push   eax
c0015187:	e8 ee b1 fe ff       	call   c000037a <memcpy>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	90                   	nop
c0015190:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0015195:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c001519b:	01 d0                	add    eax,edx
c001519d:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00151a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151a7:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00151ab:	0f b7 c0             	movzx  eax,ax
c00151ae:	83 e0 20             	and    eax,0x20
c00151b1:	75 29                	jne    c00151dc <ip_reass+0x284>
c00151b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151b7:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c00151ba:	83 c8 01             	or     eax,0x1
c00151bd:	88 c2                	mov    dl,al
c00151bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151c3:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c00151c6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00151cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151cf:	01 d0                	add    eax,edx
c00151d1:	89 c2                	mov    edx,eax
c00151d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151d7:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c00151db:	90                   	nop
c00151dc:	83 ec 08             	sub    esp,0x8
c00151df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00151e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151e7:	e8 3c f9 ff ff       	call   c0014b28 <ip_reass_chain_frag_into_datagram_and_validate>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	85 c0                	test   eax,eax
c00151f1:	0f 84 2d 01 00 00    	je     c0015324 <ip_reass+0x3cc>
c00151f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151fb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00151fe:	83 c0 14             	add    eax,0x14
c0015201:	89 c2                	mov    edx,eax
c0015203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015207:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c001520b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001520f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015215:	8b 00                	mov    eax,DWORD PTR [eax]
c0015217:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001521b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001521f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015225:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015229:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001522d:	83 c0 08             	add    eax,0x8
c0015230:	83 ec 04             	sub    esp,0x4
c0015233:	6a 14                	push   0x14
c0015235:	50                   	push   eax
c0015236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001523a:	e8 3b b1 fe ff       	call   c000037a <memcpy>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015246:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015249:	0f b7 c0             	movzx  eax,ax
c001524c:	83 ec 0c             	sub    esp,0xc
c001524f:	50                   	push   eax
c0015250:	e8 c7 b9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	89 c2                	mov    edx,eax
c001525a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001525e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015266:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001526c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015270:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015276:	83 ec 08             	sub    esp,0x8
c0015279:	6a 14                	push   0x14
c001527b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001527f:	e8 cc e4 ff ff       	call   c0013750 <inet_chksum>
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	89 c2                	mov    edx,eax
c0015289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001528d:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015295:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015298:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001529c:	eb 3e                	jmp    c00152dc <ip_reass+0x384>
c001529e:	66 90                	xchg   ax,ax
c00152a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00152a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152ab:	83 ec 08             	sub    esp,0x8
c00152ae:	6a ec                	push   0xffffffec
c00152b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00152b4:	e8 bb 30 ff ff       	call   c0008374 <pbuf_header>
c00152b9:	83 c4 10             	add    esp,0x10
c00152bc:	83 ec 08             	sub    esp,0x8
c00152bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00152c7:	e8 8c 3a ff ff       	call   c0008d58 <pbuf_cat>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00152d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152d9:	8d 76 00             	lea    esi,[esi+0x0]
c00152dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00152e1:	75 bd                	jne    c00152a0 <ip_reass+0x348>
c00152e3:	83 ec 08             	sub    esp,0x8
c00152e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152ee:	e8 71 f3 ff ff       	call   c0014664 <ip_reass_dequeue_datagram>
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	83 ec 0c             	sub    esp,0xc
c00152f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00152fd:	e8 ee 39 ff ff       	call   c0008cf0 <pbuf_clen>
c0015302:	83 c4 10             	add    esp,0x10
c0015305:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001530c:	0f b6 c0             	movzx  eax,al
c001530f:	89 d3                	mov    ebx,edx
c0015311:	29 c3                	sub    ebx,eax
c0015313:	89 d8                	mov    eax,ebx
c0015315:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c001531b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001531f:	eb 2f                	jmp    c0015350 <ip_reass+0x3f8>
c0015321:	8d 76 00             	lea    esi,[esi+0x0]
c0015324:	b8 00 00 00 00       	mov    eax,0x0
c0015329:	eb 25                	jmp    c0015350 <ip_reass+0x3f8>
c001532b:	90                   	nop
c001532c:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c0015332:	83 c0 01             	add    eax,0x1
c0015335:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c001533b:	83 ec 0c             	sub    esp,0xc
c001533e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015342:	e8 cd 31 ff ff       	call   c0008514 <pbuf_free>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	b8 00 00 00 00       	mov    eax,0x0
c001534f:	90                   	nop
c0015350:	83 c4 28             	add    esp,0x28
c0015353:	5b                   	pop    ebx
c0015354:	c3                   	ret    
c0015355:	8d 76 00             	lea    esi,[esi+0x0]

c0015358 <ip_frag_alloc_pbuf_custom_ref>:
c0015358:	83 ec 0c             	sub    esp,0xc
c001535b:	83 ec 0c             	sub    esp,0xc
c001535e:	6a 06                	push   0x6
c0015360:	e8 c3 27 ff ff       	call   c0007b28 <memp_malloc>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	83 c4 0c             	add    esp,0xc
c001536b:	c3                   	ret    

c001536c <ip_frag_free_pbuf_custom_ref>:
c001536c:	83 ec 0c             	sub    esp,0xc
c001536f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015374:	75 16                	jne    c001538c <ip_frag_free_pbuf_custom_ref+0x20>
c0015376:	83 ec 08             	sub    esp,0x8
c0015379:	68 56 04 03 c0       	push   0xc0030456
c001537e:	68 26 00 03 c0       	push   0xc0030026
c0015383:	e8 3c ab 00 00       	call   c001fec4 <CPrintf>
c0015388:	83 c4 10             	add    esp,0x10
c001538b:	90                   	nop
c001538c:	83 ec 08             	sub    esp,0x8
c001538f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015393:	6a 06                	push   0x6
c0015395:	e8 ba 28 ff ff       	call   c0007c54 <memp_free>
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	90                   	nop
c001539e:	83 c4 0c             	add    esp,0xc
c00153a1:	c3                   	ret    
c00153a2:	66 90                	xchg   ax,ax

c00153a4 <ipfrag_free_pbuf_custom>:
c00153a4:	83 ec 1c             	sub    esp,0x1c
c00153a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153b4:	75 16                	jne    c00153cc <ipfrag_free_pbuf_custom+0x28>
c00153b6:	83 ec 08             	sub    esp,0x8
c00153b9:	68 c6 13 03 c0       	push   0xc00313c6
c00153be:	68 26 00 03 c0       	push   0xc0030026
c00153c3:	e8 fc aa 00 00       	call   c001fec4 <CPrintf>
c00153c8:	83 c4 10             	add    esp,0x10
c00153cb:	90                   	nop
c00153cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153d0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00153d4:	74 16                	je     c00153ec <ipfrag_free_pbuf_custom+0x48>
c00153d6:	83 ec 08             	sub    esp,0x8
c00153d9:	68 d2 13 03 c0       	push   0xc00313d2
c00153de:	68 26 00 03 c0       	push   0xc0030026
c00153e3:	e8 dc aa 00 00       	call   c001fec4 <CPrintf>
c00153e8:	83 c4 10             	add    esp,0x10
c00153eb:	90                   	nop
c00153ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153f3:	85 c0                	test   eax,eax
c00153f5:	74 15                	je     c001540c <ipfrag_free_pbuf_custom+0x68>
c00153f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153fb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153fe:	83 ec 0c             	sub    esp,0xc
c0015401:	50                   	push   eax
c0015402:	e8 0d 31 ff ff       	call   c0008514 <pbuf_free>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	66 90                	xchg   ax,ax
c001540c:	83 ec 0c             	sub    esp,0xc
c001540f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015413:	e8 54 ff ff ff       	call   c001536c <ip_frag_free_pbuf_custom_ref>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	90                   	nop
c001541c:	83 c4 1c             	add    esp,0x1c
c001541f:	c3                   	ret    

c0015420 <ip_frag>:
c0015420:	53                   	push   ebx
c0015421:	83 ec 38             	sub    esp,0x38
c0015424:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015428:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001542b:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c0015430:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c0015437:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c001543e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015445:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015449:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001544d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015455:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015459:	0f b7 c0             	movzx  eax,ax
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	50                   	push   eax
c0015460:	e8 b7 b7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001546d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015471:	25 ff 1f 00 00       	and    eax,0x1fff
c0015476:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001547b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001547f:	25 00 20 00 00       	and    eax,0x2000
c0015484:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015489:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001548d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015490:	83 e8 14             	sub    eax,0x14
c0015493:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015498:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001549d:	83 e8 14             	sub    eax,0x14
c00154a0:	8d 50 07             	lea    edx,[eax+0x7]
c00154a3:	0f 48 c2             	cmovs  eax,edx
c00154a6:	c1 f8 03             	sar    eax,0x3
c00154a9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00154ae:	e9 05 03 00 00       	jmp    c00157b8 <ip_frag+0x398>
c00154b3:	90                   	nop
c00154b4:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00154b9:	8d 50 ed             	lea    edx,[eax-0x13]
c00154bc:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00154c1:	39 c2                	cmp    edx,eax
c00154c3:	0f 9f c0             	setg   al
c00154c6:	0f b6 c0             	movzx  eax,al
c00154c9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00154ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00154d2:	25 ff 1f 00 00       	and    eax,0x1fff
c00154d7:	89 c2                	mov    edx,eax
c00154d9:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00154de:	09 d0                	or     eax,edx
c00154e0:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00154e5:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00154ea:	85 c0                	test   eax,eax
c00154ec:	75 0e                	jne    c00154fc <ip_frag+0xdc>
c00154ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00154f2:	80 cc 20             	or     ah,0x20
c00154f5:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00154fa:	66 90                	xchg   ax,ax
c00154fc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015501:	85 c0                	test   eax,eax
c0015503:	75 0b                	jne    c0015510 <ip_frag+0xf0>
c0015505:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015509:	c1 e0 03             	shl    eax,0x3
c001550c:	eb 0a                	jmp    c0015518 <ip_frag+0xf8>
c001550e:	66 90                	xchg   ax,ax
c0015510:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015515:	8d 76 00             	lea    esi,[esi+0x0]
c0015518:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c001551d:	83 ec 04             	sub    esp,0x4
c0015520:	6a 00                	push   0x0
c0015522:	6a 14                	push   0x14
c0015524:	6a 02                	push   0x2
c0015526:	e8 c5 31 ff ff       	call   c00086f0 <pbuf_alloc>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015532:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015537:	75 07                	jne    c0015540 <ip_frag+0x120>
c0015539:	b0 ff                	mov    al,0xff
c001553b:	e9 88 02 00 00       	jmp    c00157c8 <ip_frag+0x3a8>
c0015540:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015544:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015548:	0f b7 c0             	movzx  eax,ax
c001554b:	83 f8 13             	cmp    eax,0x13
c001554e:	77 18                	ja     c0015568 <ip_frag+0x148>
c0015550:	83 ec 08             	sub    esp,0x8
c0015553:	68 68 14 03 c0       	push   0xc0031468
c0015558:	68 26 00 03 c0       	push   0xc0030026
c001555d:	e8 62 a9 00 00       	call   c001fec4 <CPrintf>
c0015562:	83 c4 10             	add    esp,0x10
c0015565:	8d 76 00             	lea    esi,[esi+0x0]
c0015568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001556c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001556f:	83 ec 04             	sub    esp,0x4
c0015572:	6a 14                	push   0x14
c0015574:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015578:	50                   	push   eax
c0015579:	e8 fc ad fe ff       	call   c000037a <memcpy>
c001557e:	83 c4 10             	add    esp,0x10
c0015581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015585:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015588:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001558c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015590:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015593:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c0015598:	01 c2                	add    edx,eax
c001559a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001559e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00155a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155a5:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00155a9:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c00155ae:	89 d1                	mov    ecx,edx
c00155b0:	29 c1                	sub    ecx,eax
c00155b2:	89 c8                	mov    eax,ecx
c00155b4:	89 c2                	mov    edx,eax
c00155b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155ba:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00155be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155c2:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00155c7:	e9 18 01 00 00       	jmp    c00156e4 <ip_frag+0x2c4>
c00155cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155d0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00155d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00155d8:	0f b7 d8             	movzx  ebx,ax
c00155db:	0f b7 ca             	movzx  ecx,dx
c00155de:	39 cb                	cmp    ebx,ecx
c00155e0:	76 02                	jbe    c00155e4 <ip_frag+0x1c4>
c00155e2:	89 d0                	mov    eax,edx
c00155e4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00155e9:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00155ee:	85 c0                	test   eax,eax
c00155f0:	75 12                	jne    c0015604 <ip_frag+0x1e4>
c00155f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00155fc:	e9 e3 00 00 00       	jmp    c00156e4 <ip_frag+0x2c4>
c0015601:	8d 76 00             	lea    esi,[esi+0x0]
c0015604:	e8 4f fd ff ff       	call   c0015358 <ip_frag_alloc_pbuf_custom_ref>
c0015609:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001560d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015612:	75 18                	jne    c001562c <ip_frag+0x20c>
c0015614:	83 ec 0c             	sub    esp,0xc
c0015617:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001561b:	e8 f4 2e ff ff       	call   c0008514 <pbuf_free>
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	b0 ff                	mov    al,0xff
c0015625:	e9 9e 01 00 00       	jmp    c00157c8 <ip_frag+0x3a8>
c001562a:	66 90                	xchg   ax,ax
c001562c:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c0015631:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015635:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015638:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001563c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015641:	83 ec 08             	sub    esp,0x8
c0015644:	53                   	push   ebx
c0015645:	51                   	push   ecx
c0015646:	52                   	push   edx
c0015647:	6a 02                	push   0x2
c0015649:	50                   	push   eax
c001564a:	6a 03                	push   0x3
c001564c:	e8 ff 2b ff ff       	call   c0008250 <pbuf_alloced_custom>
c0015651:	83 c4 20             	add    esp,0x20
c0015654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015658:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001565d:	75 25                	jne    c0015684 <ip_frag+0x264>
c001565f:	83 ec 0c             	sub    esp,0xc
c0015662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015666:	e8 01 fd ff ff       	call   c001536c <ip_frag_free_pbuf_custom_ref>
c001566b:	83 c4 10             	add    esp,0x10
c001566e:	83 ec 0c             	sub    esp,0xc
c0015671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015675:	e8 9a 2e ff ff       	call   c0008514 <pbuf_free>
c001567a:	83 c4 10             	add    esp,0x10
c001567d:	b0 ff                	mov    al,0xff
c001567f:	e9 44 01 00 00       	jmp    c00157c8 <ip_frag+0x3a8>
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001568b:	e8 94 36 ff ff       	call   c0008d24 <pbuf_ref>
c0015690:	83 c4 10             	add    esp,0x10
c0015693:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015697:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001569b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001569e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156a2:	c7 40 10 a4 53 01 c0 	mov    DWORD PTR [eax+0x10],0xc00153a4
c00156a9:	83 ec 08             	sub    esp,0x8
c00156ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00156b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156b4:	e8 9f 36 ff ff       	call   c0008d58 <pbuf_cat>
c00156b9:	83 c4 10             	add    esp,0x10
c00156bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156c0:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00156c5:	89 d3                	mov    ebx,edx
c00156c7:	29 c3                	sub    ebx,eax
c00156c9:	89 d8                	mov    eax,ebx
c00156cb:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00156d0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00156d5:	85 c0                	test   eax,eax
c00156d7:	74 0b                	je     c00156e4 <ip_frag+0x2c4>
c00156d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00156dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00156e3:	90                   	nop
c00156e4:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00156e9:	85 c0                	test   eax,eax
c00156eb:	0f 85 db fe ff ff    	jne    c00155cc <ip_frag+0x1ac>
c00156f1:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00156f6:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00156fb:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	50                   	push   eax
c0015704:	e8 13 b5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	89 c2                	mov    edx,eax
c001570e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015712:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0015716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571a:	83 c0 14             	add    eax,0x14
c001571d:	0f b7 c0             	movzx  eax,ax
c0015720:	83 ec 0c             	sub    esp,0xc
c0015723:	50                   	push   eax
c0015724:	e8 f3 b4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	89 c2                	mov    edx,eax
c001572e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015732:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001573a:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015740:	83 ec 08             	sub    esp,0x8
c0015743:	6a 14                	push   0x14
c0015745:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015749:	e8 02 e0 ff ff       	call   c0013750 <inet_chksum>
c001574e:	83 c4 10             	add    esp,0x10
c0015751:	89 c2                	mov    edx,eax
c0015753:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015757:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c001575b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001575f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015762:	83 ec 04             	sub    esp,0x4
c0015765:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001576d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015771:	ff d0                	call   eax
c0015773:	83 c4 10             	add    esp,0x10
c0015776:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c001577c:	83 c0 01             	add    eax,0x1
c001577f:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c0015785:	83 ec 0c             	sub    esp,0xc
c0015788:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001578c:	e8 83 2d ff ff       	call   c0008514 <pbuf_free>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001579d:	89 d1                	mov    ecx,edx
c001579f:	29 c1                	sub    ecx,eax
c00157a1:	89 c8                	mov    eax,ecx
c00157a3:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00157a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00157ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157b0:	01 d0                	add    eax,edx
c00157b2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00157b7:	90                   	nop
c00157b8:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00157bd:	85 c0                	test   eax,eax
c00157bf:	0f 85 ef fc ff ff    	jne    c00154b4 <ip_frag+0x94>
c00157c5:	b0 00                	mov    al,0x0
c00157c7:	90                   	nop
c00157c8:	83 c4 38             	add    esp,0x38
c00157cb:	5b                   	pop    ebx
c00157cc:	c3                   	ret    
c00157cd:	90                   	nop

c00157ce <Computer::close(int, int, void*)>:
c00157ce:	53                   	push   ebx
c00157cf:	83 ec 08             	sub    esp,0x8
c00157d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157d6:	e8 7b a5 00 00       	call   c001fd56 <KeExecuteAtexit()>
c00157db:	83 ec 0c             	sub    esp,0xc
c00157de:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00157e4:	50                   	push   eax
c00157e5:	e8 22 61 00 00       	call   c001b90c <Device::closeAll()>
c00157ea:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00157f0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00157f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00157f6:	51                   	push   ecx
c00157f7:	68 0f 27 00 00       	push   0x270f
c00157fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015800:	53                   	push   ebx
c0015801:	50                   	push   eax
c0015802:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015805:	83 c4 14             	add    esp,0x14
c0015808:	68 88 14 03 c0       	push   0xc0031488
c001580d:	e8 84 ad 00 00       	call   c0020596 <KePanic(char const*)>
c0015812:	83 c4 18             	add    esp,0x18
c0015815:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001581a:	5b                   	pop    ebx
c001581b:	c3                   	ret    

c001581c <Krnl::firstTask()>:
c001581c:	53                   	push   ebx
c001581d:	83 ec 14             	sub    esp,0x14
c0015820:	fb                   	sti    
c0015821:	68 9e 14 03 c0       	push   0xc003149e
c0015826:	e8 0a a6 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001582b:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0015832:	e8 65 0e 00 00       	call   c001669c <malloc>
c0015837:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001583e:	89 c3                	mov    ebx,eax
c0015840:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0015845:	50                   	push   eax
c0015846:	68 b7 14 03 c0       	push   0xc00314b7
c001584b:	6a 01                	push   0x1
c001584d:	53                   	push   ebx
c001584e:	e8 25 f9 00 00       	call   c0025178 <Process::Process(bool, char const*, Process*, char**)>
c0015853:	83 c4 20             	add    esp,0x20
c0015856:	68 ff 00 00 00       	push   0xff
c001585b:	6a 00                	push   0x0
c001585d:	68 69 60 01 c0       	push   0xc0016069
c0015862:	53                   	push   ebx
c0015863:	e8 38 fb 00 00       	call   c00253a0 <Process::createThread(void (*)(void*), void*, int)>
c0015868:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c001586e:	6a 7a                	push   0x7a
c0015870:	6a 00                	push   0x0
c0015872:	68 58 5c 02 c0       	push   0xc0025c58
c0015877:	52                   	push   edx
c0015878:	e8 23 fb 00 00       	call   c00253a0 <Process::createThread(void (*)(void*), void*, int)>
c001587d:	83 c4 14             	add    esp,0x14
c0015880:	68 bc 15 03 c0       	push   0xc00315bc
c0015885:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c001588a:	e8 a6 a5 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001588f:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c0015896:	e8 b2 ae 00 00       	call   c002074d <KeInitRand()>
c001589b:	e8 4f 07 01 00       	call   c0025fef <Vm::initialise8086()>
c00158a0:	e8 0f 4b 00 00       	call   c001a3b4 <Fs::initVFS()>
c00158a5:	c7 04 24 c4 14 03 c0 	mov    DWORD PTR [esp],0xc00314c4
c00158ac:	e8 84 a5 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c00158b1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00158b6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00158bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00158be:	6a 00                	push   0x0
c00158c0:	6a 00                	push   0x0
c00158c2:	6a 00                	push   0x0
c00158c4:	50                   	push   eax
c00158c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00158c8:	83 c4 14             	add    esp,0x14
c00158cb:	68 bc 15 03 c0       	push   0xc00315bc
c00158d0:	e8 60 a5 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c00158d5:	e8 74 42 00 00       	call   c0019b4e <KeInitialiseSymlinks()>
c00158da:	e8 ff aa 00 00       	call   c00203de <KeLoadSystemEnv()>
c00158df:	e8 77 ad 00 00       	call   c002065b <KeSetupPowerManager()>
c00158e4:	c7 04 24 de 14 03 c0 	mov    DWORD PTR [esp],0xc00314de
c00158eb:	e8 45 a5 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c00158f0:	e8 eb 56 00 00       	call   c001afe0 <User::loadClockSettings()>
c00158f5:	c7 04 24 e0 15 03 c0 	mov    DWORD PTR [esp],0xc00315e0
c00158fc:	e8 34 a5 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c0015901:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015906:	59                   	pop    ecx
c0015907:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c001590d:	53                   	push   ebx
c001590e:	e8 ad 5e 00 00       	call   c001b7c0 <Device::loadDriversForAll()>
c0015913:	e8 ac 16 ff ff       	call   c0006fc4 <lwip_init>
c0015918:	c7 04 24 f8 14 03 c0 	mov    DWORD PTR [esp],0xc00314f8
c001591f:	e8 11 a5 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c0015924:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001592a:	58                   	pop    eax
c001592b:	5a                   	pop    edx
c001592c:	6a 01                	push   0x1
c001592e:	68 09 15 03 c0       	push   0xc0031509
c0015933:	e8 24 f2 00 00       	call   c0024b5c <Thr::loadDLL(char const*, bool)>
c0015938:	59                   	pop    ecx
c0015939:	5a                   	pop    edx
c001593a:	53                   	push   ebx
c001593b:	50                   	push   eax
c001593c:	e8 7c f4 00 00       	call   c0024dbd <Thr::executeDLL(unsigned long, void*)>
c0015941:	83 c4 10             	add    esp,0x10
c0015944:	83 ec 0c             	sub    esp,0xc
c0015947:	6a 02                	push   0x2
c0015949:	e8 5a fd 00 00       	call   c00256a8 <blockTask(TaskState)>
c001594e:	83 c4 10             	add    esp,0x10
c0015951:	eb f1                	jmp    c0015944 <Krnl::firstTask()+0x128>
c0015953:	90                   	nop

c0015954 <Computer::Computer()>:
c0015954:	83 ec 0c             	sub    esp,0xc
c0015957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001595b:	83 ec 08             	sub    esp,0x8
c001595e:	68 25 15 03 c0       	push   0xc0031525
c0015963:	50                   	push   eax
c0015964:	e8 9d 5e 00 00       	call   c001b806 <Device::Device(char const*)>
c0015969:	83 c4 10             	add    esp,0x10
c001596c:	ba 2c 16 03 c0       	mov    edx,0xc003162c
c0015971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015975:	89 10                	mov    DWORD PTR [eax],edx
c0015977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001597b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0015985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015989:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0015993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015997:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001599d:	83 ca 04             	or     edx,0x4
c00159a0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00159a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00159b0:	0f b6 d0             	movzx  edx,al
c00159b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c00159be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00159c8:	0f b6 d0             	movzx  edx,al
c00159cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159cf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00159d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00159de:	8d 50 01             	lea    edx,[eax+0x1]
c00159e1:	88 d1                	mov    cl,dl
c00159e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159e7:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00159ed:	0f b6 d0             	movzx  edx,al
c00159f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159f4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00159f8:	83 e1 3f             	and    ecx,0x3f
c00159fb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00159ff:	90                   	nop
c0015a00:	83 c4 0c             	add    esp,0xc
c0015a03:	c3                   	ret    

c0015a04 <Computer::setBootMessage(char const*)>:
c0015a04:	c3                   	ret    
c0015a05:	90                   	nop

c0015a06 <Computer::detectFeatures()>:
c0015a06:	55                   	push   ebp
c0015a07:	57                   	push   edi
c0015a08:	56                   	push   esi
c0015a09:	53                   	push   ebx
c0015a0a:	83 ec 1c             	sub    esp,0x1c
c0015a0d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015a11:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0015a17:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0015a1d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0015a23:	e8 d1 a7 fe ff       	call   c00001f9 <detectCPUID>
c0015a28:	31 d2                	xor    edx,edx
c0015a2a:	85 c0                	test   eax,eax
c0015a2c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a32:	0f 95 c2             	setne  dl
c0015a35:	d1 e2                	shl    edx,1
c0015a37:	83 e0 fd             	and    eax,0xfffffffd
c0015a3a:	09 d0                	or     eax,edx
c0015a3c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a42:	a8 02                	test   al,0x2
c0015a44:	75 51                	jne    c0015a97 <Computer::detectFeatures()+0x91>
c0015a46:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c0015a4d:	74 0f                	je     c0015a5e <Computer::detectFeatures()+0x58>
c0015a4f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a55:	83 e0 fb             	and    eax,0xfffffffb
c0015a58:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a5e:	e8 e3 8d 01 00       	call   c002e846 <x87Detect>
c0015a63:	83 e0 01             	and    eax,0x1
c0015a66:	c1 e0 04             	shl    eax,0x4
c0015a69:	89 c2                	mov    edx,eax
c0015a6b:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a71:	83 e0 ef             	and    eax,0xffffffef
c0015a74:	09 d0                	or     eax,edx
c0015a76:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a7c:	a8 10                	test   al,0x10
c0015a7e:	88 c2                	mov    dl,al
c0015a80:	0f 85 33 01 00 00    	jne    c0015bb9 <Computer::detectFeatures()+0x1b3>
c0015a86:	80 e2 80             	and    dl,0x80
c0015a89:	0f 85 4c 01 00 00    	jne    c0015bdb <Computer::detectFeatures()+0x1d5>
c0015a8f:	83 c4 1c             	add    esp,0x1c
c0015a92:	5b                   	pop    ebx
c0015a93:	5e                   	pop    esi
c0015a94:	5f                   	pop    edi
c0015a95:	5d                   	pop    ebp
c0015a96:	c3                   	ret    
c0015a97:	83 ec 0c             	sub    esp,0xc
c0015a9a:	6a 20                	push   0x20
c0015a9c:	e8 cd 97 00 00       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c0015aa1:	83 e0 01             	and    eax,0x1
c0015aa4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015aab:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015ab1:	83 e0 f7             	and    eax,0xfffffff7
c0015ab4:	09 d0                	or     eax,edx
c0015ab6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015abc:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0015ac3:	e8 a6 97 00 00       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c0015ac8:	89 c2                	mov    edx,eax
c0015aca:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015ad0:	83 e2 01             	and    edx,0x1
c0015ad3:	83 e0 fe             	and    eax,0xfffffffe
c0015ad6:	09 d0                	or     eax,edx
c0015ad8:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015ade:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015ae5:	e8 84 97 00 00       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c0015aea:	89 c2                	mov    edx,eax
c0015aec:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015af2:	c1 e2 07             	shl    edx,0x7
c0015af5:	83 e0 7f             	and    eax,0x7f
c0015af8:	09 d0                	or     eax,edx
c0015afa:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015b00:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015b07:	e8 62 97 00 00       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c0015b0c:	83 c4 10             	add    esp,0x10
c0015b0f:	83 e0 01             	and    eax,0x1
c0015b12:	c1 e0 05             	shl    eax,0x5
c0015b15:	89 c2                	mov    edx,eax
c0015b17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b1d:	83 e0 df             	and    eax,0xffffffdf
c0015b20:	09 d0                	or     eax,edx
c0015b22:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c0015b2c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b32:	0f 84 c9 00 00 00    	je     c0015c01 <Computer::detectFeatures()+0x1fb>
c0015b38:	83 e0 fe             	and    eax,0xfffffffe
c0015b3b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b41:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b47:	89 c2                	mov    edx,eax
c0015b49:	83 e2 09             	and    edx,0x9
c0015b4c:	83 fa 01             	cmp    edx,0x1
c0015b4f:	75 09                	jne    c0015b5a <Computer::detectFeatures()+0x154>
c0015b51:	83 e0 fe             	and    eax,0xfffffffe
c0015b54:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b5a:	83 ec 0c             	sub    esp,0xc
c0015b5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015b61:	50                   	push   eax
c0015b62:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015b66:	55                   	push   ebp
c0015b67:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015b6b:	57                   	push   edi
c0015b6c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015b70:	56                   	push   esi
c0015b71:	68 00 00 00 80       	push   0x80000000
c0015b76:	e8 6f 96 00 00       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015b7b:	83 c4 20             	add    esp,0x20
c0015b7e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015b85:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015b89:	0f 86 b7 fe ff ff    	jbe    c0015a46 <Computer::detectFeatures()+0x40>
c0015b8f:	83 ec 0c             	sub    esp,0xc
c0015b92:	50                   	push   eax
c0015b93:	55                   	push   ebp
c0015b94:	57                   	push   edi
c0015b95:	56                   	push   esi
c0015b96:	68 01 00 00 80       	push   0x80000001
c0015b9b:	e8 4a 96 00 00       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015ba0:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015ba6:	83 c4 20             	add    esp,0x20
c0015ba9:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015bae:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015bb4:	e9 8d fe ff ff       	jmp    c0015a46 <Computer::detectFeatures()+0x40>
c0015bb9:	e8 42 8c 01 00       	call   c002e800 <sseDetect>
c0015bbe:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015bc4:	83 e2 7f             	and    edx,0x7f
c0015bc7:	c1 e0 07             	shl    eax,0x7
c0015bca:	09 c2                	or     edx,eax
c0015bcc:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015bd2:	80 e2 80             	and    dl,0x80
c0015bd5:	0f 84 b4 fe ff ff    	je     c0015a8f <Computer::detectFeatures()+0x89>
c0015bdb:	e8 b0 88 01 00       	call   c002e490 <avxDetect>
c0015be0:	83 e0 01             	and    eax,0x1
c0015be3:	c1 e0 05             	shl    eax,0x5
c0015be6:	89 c2                	mov    edx,eax
c0015be8:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015bee:	83 e0 df             	and    eax,0xffffffdf
c0015bf1:	09 d0                	or     eax,edx
c0015bf3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015bf9:	83 c4 1c             	add    esp,0x1c
c0015bfc:	5b                   	pop    ebx
c0015bfd:	5e                   	pop    esi
c0015bfe:	5f                   	pop    edi
c0015bff:	5d                   	pop    ebp
c0015c00:	c3                   	ret    
c0015c01:	83 ec 0c             	sub    esp,0xc
c0015c04:	68 00 02 00 00       	push   0x200
c0015c09:	e8 60 96 00 00       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	89 c2                	mov    edx,eax
c0015c13:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015c19:	83 e2 01             	and    edx,0x1
c0015c1c:	83 e0 fe             	and    eax,0xfffffffe
c0015c1f:	09 d0                	or     eax,edx
c0015c21:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015c27:	e9 15 ff ff ff       	jmp    c0015b41 <Computer::detectFeatures()+0x13b>

c0015c2c <Computer::displayFeatures()>:
c0015c2c:	c3                   	ret    
c0015c2d:	90                   	nop

c0015c2e <Computer::rdmsr(unsigned int)>:
c0015c2e:	83 ec 0c             	sub    esp,0xc
c0015c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c35:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015c3c:	74 0a                	je     c0015c48 <Computer::rdmsr(unsigned int)+0x1a>
c0015c3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c42:	0f 32                	rdmsr  
c0015c44:	83 c4 0c             	add    esp,0xc
c0015c47:	c3                   	ret    
c0015c48:	83 ec 0c             	sub    esp,0xc
c0015c4b:	68 2e 15 03 c0       	push   0xc003152e
c0015c50:	e8 41 a9 00 00       	call   c0020596 <KePanic(char const*)>
c0015c55:	83 c4 10             	add    esp,0x10
c0015c58:	eb e4                	jmp    c0015c3e <Computer::rdmsr(unsigned int)+0x10>

c0015c5a <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015c5a:	57                   	push   edi
c0015c5b:	56                   	push   esi
c0015c5c:	83 ec 04             	sub    esp,0x4
c0015c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c63:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015c67:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015c6b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015c72:	74 10                	je     c0015c84 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015c74:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c78:	89 f0                	mov    eax,esi
c0015c7a:	89 fa                	mov    edx,edi
c0015c7c:	0f 30                	wrmsr  
c0015c7e:	83 c4 04             	add    esp,0x4
c0015c81:	5e                   	pop    esi
c0015c82:	5f                   	pop    edi
c0015c83:	c3                   	ret    
c0015c84:	83 ec 0c             	sub    esp,0xc
c0015c87:	68 34 15 03 c0       	push   0xc0031534
c0015c8c:	e8 05 a9 00 00       	call   c0020596 <KePanic(char const*)>
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	eb de                	jmp    c0015c74 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015c96 <Computer::shutdown()>:
c0015c96:	83 ec 0c             	sub    esp,0xc
c0015c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c9d:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c9f:	6a 00                	push   0x0
c0015ca1:	6a 00                	push   0x0
c0015ca3:	6a 00                	push   0x0
c0015ca5:	50                   	push   eax
c0015ca6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ca9:	83 c4 1c             	add    esp,0x1c
c0015cac:	c3                   	ret    
c0015cad:	90                   	nop

c0015cae <Computer::restart()>:
c0015cae:	83 ec 0c             	sub    esp,0xc
c0015cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cb5:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cb7:	6a 00                	push   0x0
c0015cb9:	6a 00                	push   0x0
c0015cbb:	6a 01                	push   0x1
c0015cbd:	50                   	push   eax
c0015cbe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015cc1:	83 c4 1c             	add    esp,0x1c
c0015cc4:	c3                   	ret    
c0015cc5:	90                   	nop

c0015cc6 <Computer::sleep()>:
c0015cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cca:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015cd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015cd4:	e9 67 90 00 00       	jmp    c001ed40 <ACPI::sleep()>
c0015cd9:	90                   	nop

c0015cda <Computer::nmiEnabled()>:
c0015cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cde:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015ce4:	c3                   	ret    
c0015ce5:	90                   	nop

c0015ce6 <Computer::readCMOS(unsigned char)>:
c0015ce6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015cea:	31 d2                	xor    edx,edx
c0015cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cf0:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015cf7:	75 02                	jne    c0015cfb <Computer::readCMOS(unsigned char)+0x15>
c0015cf9:	b2 80                	mov    dl,0x80
c0015cfb:	09 d0                	or     eax,edx
c0015cfd:	e6 70                	out    0x70,al
c0015cff:	e4 71                	in     al,0x71
c0015d01:	c3                   	ret    

c0015d02 <Computer::enableNMI(bool)>:
c0015d02:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0015d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d0a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015d10:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015d18:	eb cc                	jmp    c0015ce6 <Computer::readCMOS(unsigned char)>

c0015d1a <Computer::open(int, int, void*)>:
c0015d1a:	56                   	push   esi
c0015d1b:	53                   	push   ebx
c0015d1c:	83 ec 10             	sub    esp,0x10
c0015d1f:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015d26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d2a:	68 3a 15 03 c0       	push   0xc003153a
c0015d2f:	0f 94 05 a0 42 03 c0 	sete   BYTE PTR ds:0xc00342a0
c0015d36:	e8 fa a0 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c0015d3b:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015d42:	e8 55 09 00 00       	call   c001669c <malloc>
c0015d47:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d4a:	89 c6                	mov    esi,eax
c0015d4c:	e8 63 8b 00 00       	call   c001e8b4 <ACPI::ACPI()>
c0015d51:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015d57:	58                   	pop    eax
c0015d58:	5a                   	pop    edx
c0015d59:	56                   	push   esi
c0015d5a:	53                   	push   ebx
c0015d5b:	e8 44 59 00 00       	call   c001b6a4 <Device::addChild(Device*)>
c0015d60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d63:	e8 9e fc ff ff       	call   c0015a06 <Computer::detectFeatures()>
c0015d68:	59                   	pop    ecx
c0015d69:	5e                   	pop    esi
c0015d6a:	6a 01                	push   0x1
c0015d6c:	53                   	push   ebx
c0015d6d:	e8 90 ff ff ff       	call   c0015d02 <Computer::enableNMI(bool)>
c0015d72:	c7 04 24 52 15 03 c0 	mov    DWORD PTR [esp],0xc0031552
c0015d79:	e8 b7 a0 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c0015d7e:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015d85:	e8 12 09 00 00       	call   c001669c <malloc>
c0015d8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d8d:	89 c6                	mov    esi,eax
c0015d8f:	e8 92 95 00 00       	call   c001f326 <CPU::CPU()>
c0015d94:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015d9a:	58                   	pop    eax
c0015d9b:	5a                   	pop    edx
c0015d9c:	56                   	push   esi
c0015d9d:	53                   	push   ebx
c0015d9e:	e8 01 59 00 00       	call   c001b6a4 <Device::addChild(Device*)>
c0015da3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015da9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015dad:	8b 10                	mov    edx,DWORD PTR [eax]
c0015daf:	51                   	push   ecx
c0015db0:	6a 00                	push   0x0
c0015db2:	6a 00                	push   0x0
c0015db4:	50                   	push   eax
c0015db5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015db8:	83 c4 14             	add    esp,0x14
c0015dbb:	68 00 16 03 c0       	push   0xc0031600
c0015dc0:	e8 70 a0 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c0015dc5:	e8 43 15 01 00       	call   c002730d <HalInitialiseCoprocessor()>
c0015dca:	c7 04 24 6c 15 03 c0 	mov    DWORD PTR [esp],0xc003156c
c0015dd1:	e8 5f a0 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c0015dd6:	c7 04 24 1c 58 01 c0 	mov    DWORD PTR [esp],0xc001581c
c0015ddd:	e8 e6 f6 00 00       	call   c00254c8 <setupMultitasking(void (*)())>
c0015de2:	83 c4 14             	add    esp,0x14
c0015de5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dea:	5b                   	pop    ebx
c0015deb:	5e                   	pop    esi
c0015dec:	c3                   	ret    
c0015ded:	90                   	nop

c0015dee <Computer::disableNMI()>:
c0015dee:	6a 00                	push   0x0
c0015df0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015df4:	50                   	push   eax
c0015df5:	e8 08 ff ff ff       	call   c0015d02 <Computer::enableNMI(bool)>
c0015dfa:	5a                   	pop    edx
c0015dfb:	59                   	pop    ecx
c0015dfc:	c3                   	ret    
c0015dfd:	90                   	nop

c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015dfe:	53                   	push   ebx
c0015dff:	b2 80                	mov    dl,0x80
c0015e01:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015e05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e0d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0015e14:	74 02                	je     c0015e18 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0015e16:	31 d2                	xor    edx,edx
c0015e18:	09 d0                	or     eax,edx
c0015e1a:	e6 70                	out    0x70,al
c0015e1c:	88 c8                	mov    al,cl
c0015e1e:	e6 71                	out    0x71,al
c0015e20:	5b                   	pop    ebx
c0015e21:	c3                   	ret    

c0015e22 <Computer::handleNMI()>:
c0015e22:	56                   	push   esi
c0015e23:	53                   	push   ebx
c0015e24:	83 ec 10             	sub    esp,0x10
c0015e27:	e4 92                	in     al,0x92
c0015e29:	89 c6                	mov    esi,eax
c0015e2b:	e4 61                	in     al,0x61
c0015e2d:	68 87 15 03 c0       	push   0xc0031587
c0015e32:	88 c3                	mov    bl,al
c0015e34:	e8 99 36 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0015e39:	83 c4 10             	add    esp,0x10
c0015e3c:	83 e6 10             	and    esi,0x10
c0015e3f:	75 10                	jne    c0015e51 <Computer::handleNMI()+0x2f>
c0015e41:	f6 c3 40             	test   bl,0x40
c0015e44:	75 20                	jne    c0015e66 <Computer::handleNMI()+0x44>
c0015e46:	80 e3 80             	and    bl,0x80
c0015e49:	75 30                	jne    c0015e7b <Computer::handleNMI()+0x59>
c0015e4b:	83 c4 04             	add    esp,0x4
c0015e4e:	5b                   	pop    ebx
c0015e4f:	5e                   	pop    esi
c0015e50:	c3                   	ret    
c0015e51:	83 ec 0c             	sub    esp,0xc
c0015e54:	68 98 15 03 c0       	push   0xc0031598
c0015e59:	e8 38 a7 00 00       	call   c0020596 <KePanic(char const*)>
c0015e5e:	83 c4 10             	add    esp,0x10
c0015e61:	f6 c3 40             	test   bl,0x40
c0015e64:	74 e0                	je     c0015e46 <Computer::handleNMI()+0x24>
c0015e66:	83 ec 0c             	sub    esp,0xc
c0015e69:	68 a5 15 03 c0       	push   0xc00315a5
c0015e6e:	e8 23 a7 00 00       	call   c0020596 <KePanic(char const*)>
c0015e73:	83 c4 10             	add    esp,0x10
c0015e76:	80 e3 80             	and    bl,0x80
c0015e79:	74 d0                	je     c0015e4b <Computer::handleNMI()+0x29>
c0015e7b:	c7 44 24 10 af 15 03 c0 	mov    DWORD PTR [esp+0x10],0xc00315af
c0015e83:	83 c4 04             	add    esp,0x4
c0015e86:	5b                   	pop    ebx
c0015e87:	5e                   	pop    esi
c0015e88:	e9 09 a7 00 00       	jmp    c0020596 <KePanic(char const*)>
c0015e8d:	90                   	nop

c0015e8e <GDTEntry::setBase(unsigned int)>:
c0015e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e96:	89 c1                	mov    ecx,eax
c0015e98:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015e9c:	c1 e9 10             	shr    ecx,0x10
c0015e9f:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015ea2:	c1 e8 18             	shr    eax,0x18
c0015ea5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015ea8:	c3                   	ret    
c0015ea9:	90                   	nop

c0015eaa <GDTEntry::setLimit(unsigned int)>:
c0015eaa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015eb2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015eb5:	66 89 01             	mov    WORD PTR [ecx],ax
c0015eb8:	c1 e8 10             	shr    eax,0x10
c0015ebb:	83 e0 0f             	and    eax,0xf
c0015ebe:	83 e2 f0             	and    edx,0xfffffff0
c0015ec1:	09 d0                	or     eax,edx
c0015ec3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015ec6:	c3                   	ret    
c0015ec7:	90                   	nop

c0015ec8 <GDT::GDT()>:
c0015ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ecc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ed6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015edc:	90                   	nop
c0015edd:	c3                   	ret    

c0015ede <GDT::addEntry(GDTEntry)>:
c0015ede:	53                   	push   ebx
c0015edf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ee3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ee7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015eeb:	8b 02                	mov    eax,DWORD PTR [edx]
c0015eed:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015ef1:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ef4:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015ef8:	c1 e0 03             	shl    eax,0x3
c0015efb:	89 0a                	mov    DWORD PTR [edx],ecx
c0015efd:	5b                   	pop    ebx
c0015efe:	c3                   	ret    
c0015eff:	90                   	nop

c0015f00 <GDT::getNumberOfEntries()>:
c0015f00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f06:	c3                   	ret    
c0015f07:	90                   	nop

c0015f08 <GDT::flush()>:
c0015f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f0e:	83 c0 04             	add    eax,0x4
c0015f11:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015f16:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015f1d:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015f24:	e9 31 a4 fe ff       	jmp    c000035a <loadGDT>
c0015f29:	90                   	nop

c0015f2a <GDT::setup()>:
c0015f2a:	57                   	push   edi
c0015f2b:	56                   	push   esi
c0015f2c:	53                   	push   ebx
c0015f2d:	83 ec 30             	sub    esp,0x30
c0015f30:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015f34:	6a 00                	push   0x0
c0015f36:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015f3a:	56                   	push   esi
c0015f3b:	e8 4e ff ff ff       	call   c0015e8e <GDTEntry::setBase(unsigned int)>
c0015f40:	6a 00                	push   0x0
c0015f42:	56                   	push   esi
c0015f43:	e8 62 ff ff ff       	call   c0015eaa <GDTEntry::setLimit(unsigned int)>
c0015f48:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015f50:	6a 00                	push   0x0
c0015f52:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015f56:	56                   	push   esi
c0015f57:	e8 32 ff ff ff       	call   c0015e8e <GDTEntry::setBase(unsigned int)>
c0015f5c:	68 ff ff ff 00       	push   0xffffff
c0015f61:	56                   	push   esi
c0015f62:	e8 43 ff ff ff       	call   c0015eaa <GDTEntry::setLimit(unsigned int)>
c0015f67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015f6b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015f6f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015f74:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015f78:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015f7d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015f81:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015f85:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015f89:	89 f8                	mov    eax,edi
c0015f8b:	89 fa                	mov    edx,edi
c0015f8d:	80 e4 f7             	and    ah,0xf7
c0015f90:	80 ce 60             	or     dh,0x60
c0015f93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015f97:	89 c7                	mov    edi,eax
c0015f99:	80 cc 60             	or     ah,0x60
c0015f9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015fa0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015fa4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015fa8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015fac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015fb0:	83 c4 20             	add    esp,0x20
c0015fb3:	6a 00                	push   0x0
c0015fb5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015fb9:	50                   	push   eax
c0015fba:	e8 cf fe ff ff       	call   c0015e8e <GDTEntry::setBase(unsigned int)>
c0015fbf:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015fc3:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015fc7:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015fcb:	83 e0 3f             	and    eax,0x3f
c0015fce:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015fd2:	6a 00                	push   0x0
c0015fd4:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015fd8:	50                   	push   eax
c0015fd9:	e8 b0 fe ff ff       	call   c0015e8e <GDTEntry::setBase(unsigned int)>
c0015fde:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015fe2:	83 e0 3f             	and    eax,0x3f
c0015fe5:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015fe9:	83 c4 0c             	add    esp,0xc
c0015fec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ff4:	53                   	push   ebx
c0015ff5:	e8 e4 fe ff ff       	call   c0015ede <GDT::addEntry(GDTEntry)>
c0015ffa:	83 c4 0c             	add    esp,0xc
c0015ffd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016001:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016005:	53                   	push   ebx
c0016006:	e8 d3 fe ff ff       	call   c0015ede <GDT::addEntry(GDTEntry)>
c001600b:	83 c4 0c             	add    esp,0xc
c001600e:	57                   	push   edi
c001600f:	56                   	push   esi
c0016010:	53                   	push   ebx
c0016011:	e8 c8 fe ff ff       	call   c0015ede <GDT::addEntry(GDTEntry)>
c0016016:	83 c4 0c             	add    esp,0xc
c0016019:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001601d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0016021:	53                   	push   ebx
c0016022:	e8 b7 fe ff ff       	call   c0015ede <GDT::addEntry(GDTEntry)>
c0016027:	83 c4 0c             	add    esp,0xc
c001602a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001602e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016032:	53                   	push   ebx
c0016033:	e8 a6 fe ff ff       	call   c0015ede <GDT::addEntry(GDTEntry)>
c0016038:	83 c4 0c             	add    esp,0xc
c001603b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001603f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016043:	53                   	push   ebx
c0016044:	e8 95 fe ff ff       	call   c0015ede <GDT::addEntry(GDTEntry)>
c0016049:	83 c4 0c             	add    esp,0xc
c001604c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016050:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016054:	53                   	push   ebx
c0016055:	e8 84 fe ff ff       	call   c0015ede <GDT::addEntry(GDTEntry)>
c001605a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001605d:	e8 a6 fe ff ff       	call   c0015f08 <GDT::flush()>
c0016062:	83 c4 40             	add    esp,0x40
c0016065:	5b                   	pop    ebx
c0016066:	5e                   	pop    esi
c0016067:	5f                   	pop    edi
c0016068:	c3                   	ret    

c0016069 <idleFunction(void*)>:
c0016069:	83 ec 0c             	sub    esp,0xc
c001606c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016071:	48                   	dec    eax
c0016072:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016077:	75 01                	jne    c001607a <idleFunction(void*)+0x11>
c0016079:	fb                   	sti    
c001607a:	e8 5a 0f 01 00       	call   c0026fd9 <HalSystemIdle()>
c001607f:	e8 7e 8d 01 00       	call   c002ee02 <idleCommon()>
c0016084:	eb f4                	jmp    c001607a <idleFunction(void*)+0x11>
c0016086:	66 90                	xchg   ax,ax

c0016088 <IDTEntry::IDTEntry(bool)>:
c0016088:	53                   	push   ebx
c0016089:	83 ec 04             	sub    esp,0x4
c001608c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016090:	88 04 24             	mov    BYTE PTR [esp],al
c0016093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016097:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c001609d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160a1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00160a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160a9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160ac:	83 e2 f0             	and    edx,0xfffffff0
c00160af:	83 ca 0e             	or     edx,0xe
c00160b2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160b9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160bc:	83 e2 ef             	and    edx,0xffffffef
c00160bf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160c2:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00160c6:	85 c0                	test   eax,eax
c00160c8:	74 06                	je     c00160d0 <IDTEntry::IDTEntry(bool)+0x48>
c00160ca:	b2 03                	mov    dl,0x3
c00160cc:	eb 06                	jmp    c00160d4 <IDTEntry::IDTEntry(bool)+0x4c>
c00160ce:	66 90                	xchg   ax,ax
c00160d0:	b2 00                	mov    dl,0x0
c00160d2:	66 90                	xchg   ax,ax
c00160d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160d8:	83 e2 03             	and    edx,0x3
c00160db:	89 d3                	mov    ebx,edx
c00160dd:	c1 e3 05             	shl    ebx,0x5
c00160e0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160e3:	83 e2 9f             	and    edx,0xffffff9f
c00160e6:	88 d1                	mov    cl,dl
c00160e8:	88 da                	mov    dl,bl
c00160ea:	09 ca                	or     edx,ecx
c00160ec:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160f3:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160f6:	83 ca 80             	or     edx,0xffffff80
c00160f9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160fc:	90                   	nop
c00160fd:	83 c4 04             	add    esp,0x4
c0016100:	5b                   	pop    ebx
c0016101:	c3                   	ret    

c0016102 <IDTEntry::setOffset(unsigned int)>:
c0016102:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016106:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001610a:	66 89 02             	mov    WORD PTR [edx],ax
c001610d:	c1 e8 10             	shr    eax,0x10
c0016110:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0016114:	c3                   	ret    
c0016115:	90                   	nop
c0016116:	66 90                	xchg   ax,ax

c0016118 <IDT::IDT()>:
c0016118:	90                   	nop
c0016119:	c3                   	ret    

c001611a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c001611a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001611e:	83 c0 30             	add    eax,0x30
c0016121:	c3                   	ret    

c0016122 <IDT::addEntry(IDTEntry, int)>:
c0016122:	53                   	push   ebx
c0016123:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016127:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001612b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001612f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016133:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0016136:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c001613a:	5b                   	pop    ebx
c001613b:	c3                   	ret    

c001613c <IDT::addEntry(int, void (*)(), bool)>:
c001613c:	53                   	push   ebx
c001613d:	83 ec 10             	sub    esp,0x10
c0016140:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0016145:	50                   	push   eax
c0016146:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001614a:	53                   	push   ebx
c001614b:	e8 38 ff ff ff       	call   c0016088 <IDTEntry::IDTEntry(bool)>
c0016150:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016154:	53                   	push   ebx
c0016155:	e8 a8 ff ff ff       	call   c0016102 <IDTEntry::setOffset(unsigned int)>
c001615a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001615e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016162:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016166:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001616a:	e8 b3 ff ff ff       	call   c0016122 <IDT::addEntry(IDTEntry, int)>
c001616f:	83 c4 30             	add    esp,0x30
c0016172:	5b                   	pop    ebx
c0016173:	c3                   	ret    

c0016174 <IDT::flush()>:
c0016174:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c001617d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016181:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0016186:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c001618d:	c3                   	ret    

c001618e <IDT::setup()>:
c001618e:	57                   	push   edi
c001618f:	56                   	push   esi
c0016190:	53                   	push   ebx
c0016191:	83 ec 10             	sub    esp,0x10
c0016194:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016198:	6a 00                	push   0x0
c001619a:	68 00 e5 02 c0       	push   0xc002e500
c001619f:	6a 00                	push   0x0
c00161a1:	53                   	push   ebx
c00161a2:	e8 95 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00161a7:	6a 00                	push   0x0
c00161a9:	68 10 e5 02 c0       	push   0xc002e510
c00161ae:	6a 01                	push   0x1
c00161b0:	53                   	push   ebx
c00161b1:	e8 86 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00161b6:	83 c4 20             	add    esp,0x20
c00161b9:	6a 00                	push   0x0
c00161bb:	68 1a e5 02 c0       	push   0xc002e51a
c00161c0:	6a 02                	push   0x2
c00161c2:	53                   	push   ebx
c00161c3:	e8 74 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00161c8:	6a 00                	push   0x0
c00161ca:	68 24 e5 02 c0       	push   0xc002e524
c00161cf:	6a 03                	push   0x3
c00161d1:	53                   	push   ebx
c00161d2:	e8 65 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00161d7:	83 c4 20             	add    esp,0x20
c00161da:	6a 00                	push   0x0
c00161dc:	68 2e e5 02 c0       	push   0xc002e52e
c00161e1:	6a 04                	push   0x4
c00161e3:	53                   	push   ebx
c00161e4:	e8 53 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00161e9:	6a 00                	push   0x0
c00161eb:	68 38 e5 02 c0       	push   0xc002e538
c00161f0:	6a 05                	push   0x5
c00161f2:	53                   	push   ebx
c00161f3:	e8 44 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00161f8:	83 c4 20             	add    esp,0x20
c00161fb:	6a 00                	push   0x0
c00161fd:	68 42 e5 02 c0       	push   0xc002e542
c0016202:	6a 06                	push   0x6
c0016204:	53                   	push   ebx
c0016205:	e8 32 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001620a:	6a 00                	push   0x0
c001620c:	68 4c e5 02 c0       	push   0xc002e54c
c0016211:	6a 07                	push   0x7
c0016213:	53                   	push   ebx
c0016214:	e8 23 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016219:	83 c4 20             	add    esp,0x20
c001621c:	6a 00                	push   0x0
c001621e:	68 56 e5 02 c0       	push   0xc002e556
c0016223:	6a 08                	push   0x8
c0016225:	53                   	push   ebx
c0016226:	e8 11 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001622b:	6a 00                	push   0x0
c001622d:	68 5e e5 02 c0       	push   0xc002e55e
c0016232:	6a 09                	push   0x9
c0016234:	53                   	push   ebx
c0016235:	e8 02 ff ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001623a:	83 c4 20             	add    esp,0x20
c001623d:	6a 00                	push   0x0
c001623f:	68 68 e5 02 c0       	push   0xc002e568
c0016244:	6a 0a                	push   0xa
c0016246:	53                   	push   ebx
c0016247:	e8 f0 fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001624c:	6a 00                	push   0x0
c001624e:	68 70 e5 02 c0       	push   0xc002e570
c0016253:	6a 0b                	push   0xb
c0016255:	53                   	push   ebx
c0016256:	e8 e1 fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001625b:	83 c4 20             	add    esp,0x20
c001625e:	6a 00                	push   0x0
c0016260:	68 78 e5 02 c0       	push   0xc002e578
c0016265:	6a 0c                	push   0xc
c0016267:	53                   	push   ebx
c0016268:	e8 cf fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001626d:	6a 00                	push   0x0
c001626f:	68 80 e5 02 c0       	push   0xc002e580
c0016274:	6a 0d                	push   0xd
c0016276:	53                   	push   ebx
c0016277:	e8 c0 fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001627c:	83 c4 20             	add    esp,0x20
c001627f:	6a 00                	push   0x0
c0016281:	68 9a e5 02 c0       	push   0xc002e59a
c0016286:	6a 0e                	push   0xe
c0016288:	53                   	push   ebx
c0016289:	e8 ae fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001628e:	6a 00                	push   0x0
c0016290:	68 a2 e5 02 c0       	push   0xc002e5a2
c0016295:	6a 0f                	push   0xf
c0016297:	53                   	push   ebx
c0016298:	e8 9f fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001629d:	83 c4 20             	add    esp,0x20
c00162a0:	6a 00                	push   0x0
c00162a2:	68 ac e5 02 c0       	push   0xc002e5ac
c00162a7:	6a 10                	push   0x10
c00162a9:	53                   	push   ebx
c00162aa:	e8 8d fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00162af:	6a 00                	push   0x0
c00162b1:	68 b6 e5 02 c0       	push   0xc002e5b6
c00162b6:	6a 11                	push   0x11
c00162b8:	53                   	push   ebx
c00162b9:	e8 7e fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00162be:	83 c4 20             	add    esp,0x20
c00162c1:	6a 00                	push   0x0
c00162c3:	68 c0 e5 02 c0       	push   0xc002e5c0
c00162c8:	6a 12                	push   0x12
c00162ca:	53                   	push   ebx
c00162cb:	e8 6c fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00162d0:	6a 01                	push   0x1
c00162d2:	68 5a e6 02 c0       	push   0xc002e65a
c00162d7:	6a 60                	push   0x60
c00162d9:	53                   	push   ebx
c00162da:	e8 5d fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00162df:	83 c4 20             	add    esp,0x20
c00162e2:	6a 00                	push   0x0
c00162e4:	68 61 e6 02 c0       	push   0xc002e661
c00162e9:	6a 20                	push   0x20
c00162eb:	53                   	push   ebx
c00162ec:	e8 4b fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00162f1:	6a 00                	push   0x0
c00162f3:	68 4c e6 02 c0       	push   0xc002e64c
c00162f8:	6a 21                	push   0x21
c00162fa:	53                   	push   ebx
c00162fb:	e8 3c fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016300:	83 c4 20             	add    esp,0x20
c0016303:	6a 00                	push   0x0
c0016305:	68 53 e6 02 c0       	push   0xc002e653
c001630a:	6a 22                	push   0x22
c001630c:	53                   	push   ebx
c001630d:	e8 2a fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016312:	6a 00                	push   0x0
c0016314:	68 ca e5 02 c0       	push   0xc002e5ca
c0016319:	6a 23                	push   0x23
c001631b:	53                   	push   ebx
c001631c:	e8 1b fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016321:	83 c4 20             	add    esp,0x20
c0016324:	6a 00                	push   0x0
c0016326:	68 d4 e5 02 c0       	push   0xc002e5d4
c001632b:	6a 24                	push   0x24
c001632d:	53                   	push   ebx
c001632e:	e8 09 fe ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016333:	6a 00                	push   0x0
c0016335:	68 de e5 02 c0       	push   0xc002e5de
c001633a:	6a 25                	push   0x25
c001633c:	53                   	push   ebx
c001633d:	e8 fa fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016342:	83 c4 20             	add    esp,0x20
c0016345:	6a 00                	push   0x0
c0016347:	68 e8 e5 02 c0       	push   0xc002e5e8
c001634c:	6a 26                	push   0x26
c001634e:	53                   	push   ebx
c001634f:	e8 e8 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016354:	6a 00                	push   0x0
c0016356:	68 f2 e5 02 c0       	push   0xc002e5f2
c001635b:	6a 27                	push   0x27
c001635d:	53                   	push   ebx
c001635e:	e8 d9 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016363:	83 c4 20             	add    esp,0x20
c0016366:	6a 00                	push   0x0
c0016368:	68 fc e5 02 c0       	push   0xc002e5fc
c001636d:	6a 28                	push   0x28
c001636f:	53                   	push   ebx
c0016370:	e8 c7 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016375:	6a 00                	push   0x0
c0016377:	68 06 e6 02 c0       	push   0xc002e606
c001637c:	6a 29                	push   0x29
c001637e:	53                   	push   ebx
c001637f:	e8 b8 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016384:	83 c4 20             	add    esp,0x20
c0016387:	6a 00                	push   0x0
c0016389:	68 10 e6 02 c0       	push   0xc002e610
c001638e:	6a 2a                	push   0x2a
c0016390:	53                   	push   ebx
c0016391:	e8 a6 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016396:	6a 00                	push   0x0
c0016398:	68 1a e6 02 c0       	push   0xc002e61a
c001639d:	6a 2b                	push   0x2b
c001639f:	53                   	push   ebx
c00163a0:	e8 97 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00163a5:	83 c4 20             	add    esp,0x20
c00163a8:	6a 00                	push   0x0
c00163aa:	68 24 e6 02 c0       	push   0xc002e624
c00163af:	6a 2c                	push   0x2c
c00163b1:	53                   	push   ebx
c00163b2:	e8 85 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00163b7:	6a 00                	push   0x0
c00163b9:	68 2e e6 02 c0       	push   0xc002e62e
c00163be:	6a 2d                	push   0x2d
c00163c0:	53                   	push   ebx
c00163c1:	e8 76 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00163c6:	83 c4 20             	add    esp,0x20
c00163c9:	6a 00                	push   0x0
c00163cb:	68 38 e6 02 c0       	push   0xc002e638
c00163d0:	6a 2e                	push   0x2e
c00163d2:	53                   	push   ebx
c00163d3:	e8 64 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00163d8:	6a 00                	push   0x0
c00163da:	68 42 e6 02 c0       	push   0xc002e642
c00163df:	6a 2f                	push   0x2f
c00163e1:	53                   	push   ebx
c00163e2:	e8 55 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00163e7:	83 c4 20             	add    esp,0x20
c00163ea:	6a 00                	push   0x0
c00163ec:	68 9c e7 02 c0       	push   0xc002e79c
c00163f1:	6a 30                	push   0x30
c00163f3:	53                   	push   ebx
c00163f4:	e8 43 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c00163f9:	6a 00                	push   0x0
c00163fb:	68 a6 e7 02 c0       	push   0xc002e7a6
c0016400:	6a 31                	push   0x31
c0016402:	53                   	push   ebx
c0016403:	e8 34 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016408:	83 c4 20             	add    esp,0x20
c001640b:	6a 00                	push   0x0
c001640d:	68 b0 e7 02 c0       	push   0xc002e7b0
c0016412:	6a 32                	push   0x32
c0016414:	53                   	push   ebx
c0016415:	e8 22 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001641a:	6a 00                	push   0x0
c001641c:	68 ba e7 02 c0       	push   0xc002e7ba
c0016421:	6a 33                	push   0x33
c0016423:	53                   	push   ebx
c0016424:	e8 13 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c0016429:	83 c4 20             	add    esp,0x20
c001642c:	6a 00                	push   0x0
c001642e:	68 c4 e7 02 c0       	push   0xc002e7c4
c0016433:	6a 34                	push   0x34
c0016435:	53                   	push   ebx
c0016436:	e8 01 fd ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001643b:	6a 00                	push   0x0
c001643d:	68 ce e7 02 c0       	push   0xc002e7ce
c0016442:	6a 35                	push   0x35
c0016444:	53                   	push   ebx
c0016445:	e8 f2 fc ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001644a:	83 c4 20             	add    esp,0x20
c001644d:	6a 00                	push   0x0
c001644f:	68 d8 e7 02 c0       	push   0xc002e7d8
c0016454:	6a 36                	push   0x36
c0016456:	53                   	push   ebx
c0016457:	e8 e0 fc ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001645c:	6a 00                	push   0x0
c001645e:	68 e2 e7 02 c0       	push   0xc002e7e2
c0016463:	6a 37                	push   0x37
c0016465:	53                   	push   ebx
c0016466:	e8 d1 fc ff ff       	call   c001613c <IDT::addEntry(int, void (*)(), bool)>
c001646b:	83 c4 1c             	add    esp,0x1c
c001646e:	6a 03                	push   0x3
c0016470:	6a 02                	push   0x2
c0016472:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016478:	e8 51 25 00 00       	call   c00189ce <VAS::allocatePages(int, int)>
c001647d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016484:	89 c6                	mov    esi,eax
c0016486:	e8 11 02 00 00       	call   c001669c <malloc>
c001648b:	81 c6 00 20 00 00    	add    esi,0x2000
c0016491:	89 04 24             	mov    DWORD PTR [esp],eax
c0016494:	89 c7                	mov    edi,eax
c0016496:	e8 59 16 00 00       	call   c0017af4 <TSS::TSS()>
c001649b:	83 c4 0c             	add    esp,0xc
c001649e:	68 56 e5 02 c0       	push   0xc002e556
c00164a3:	56                   	push   esi
c00164a4:	57                   	push   edi
c00164a5:	e8 8e 16 00 00       	call   c0017b38 <TSS::setup(unsigned long, unsigned long)>
c00164aa:	89 c6                	mov    esi,eax
c00164ac:	58                   	pop    eax
c00164ad:	5a                   	pop    edx
c00164ae:	6a 00                	push   0x0
c00164b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00164b4:	50                   	push   eax
c00164b5:	e8 ce fb ff ff       	call   c0016088 <IDTEntry::IDTEntry(bool)>
c00164ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164be:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00164c3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00164ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00164d4:	80 ce 05             	or     dh,0x5
c00164d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00164de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164e2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00164e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164e8:	e8 87 fc ff ff       	call   c0016174 <IDT::flush()>
c00164ed:	83 c4 20             	add    esp,0x20
c00164f0:	5b                   	pop    ebx
c00164f1:	5e                   	pop    esi
c00164f2:	5f                   	pop    edi
c00164f3:	c3                   	ret    

c00164f4 <sbrk>:
c00164f4:	55                   	push   ebp
c00164f5:	57                   	push   edi
c00164f6:	56                   	push   esi
c00164f7:	53                   	push   ebx
c00164f8:	83 ec 1c             	sub    esp,0x1c
c00164fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164ff:	85 c0                	test   eax,eax
c0016501:	74 66                	je     c0016569 <sbrk+0x75>
c0016503:	78 6b                	js     c0016570 <sbrk+0x7c>
c0016505:	8b 15 84 42 03 c0    	mov    edx,DWORD PTR ds:0xc0034284
c001650b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001650f:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c0016515:	05 ff 0f 00 00       	add    eax,0xfff
c001651a:	0f 49 e8             	cmovns ebp,eax
c001651d:	c1 fd 0c             	sar    ebp,0xc
c0016520:	bb 00 00 00 00       	mov    ebx,0x0
c0016525:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c001652b:	8b 3d 84 42 03 c0    	mov    edi,DWORD PTR ds:0xc0034284
c0016531:	e8 75 04 00 00       	call   c00169ab <Phys::allocatePage()>
c0016536:	68 01 04 00 00       	push   0x401
c001653b:	57                   	push   edi
c001653c:	50                   	push   eax
c001653d:	56                   	push   esi
c001653e:	e8 83 23 00 00       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016543:	81 05 84 42 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0034284,0x1000
c001654d:	83 c3 01             	add    ebx,0x1
c0016550:	83 c4 10             	add    esp,0x10
c0016553:	39 dd                	cmp    ebp,ebx
c0016555:	75 ce                	jne    c0016525 <sbrk+0x31>
c0016557:	0f 20 d8             	mov    eax,cr3
c001655a:	0f 22 d8             	mov    cr3,eax
c001655d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016561:	83 c4 1c             	add    esp,0x1c
c0016564:	5b                   	pop    ebx
c0016565:	5e                   	pop    esi
c0016566:	5f                   	pop    edi
c0016567:	5d                   	pop    ebp
c0016568:	c3                   	ret    
c0016569:	a1 84 42 03 c0       	mov    eax,ds:0xc0034284
c001656e:	eb f1                	jmp    c0016561 <sbrk+0x6d>
c0016570:	83 ec 08             	sub    esp,0x8
c0016573:	50                   	push   eax
c0016574:	68 50 16 03 c0       	push   0xc0031650
c0016579:	e8 54 2f 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001657e:	83 c4 10             	add    esp,0x10
c0016581:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016586:	eb d9                	jmp    c0016561 <sbrk+0x6d>

c0016588 <sbrk_thunk>:
c0016588:	83 ec 0c             	sub    esp,0xc
c001658b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001658f:	3d ff bf 00 00       	cmp    eax,0xbfff
c0016594:	7f 10                	jg     c00165a6 <sbrk_thunk+0x1e>
c0016596:	83 ec 0c             	sub    esp,0xc
c0016599:	50                   	push   eax
c001659a:	e8 55 ff ff ff       	call   c00164f4 <sbrk>
c001659f:	83 c4 10             	add    esp,0x10
c00165a2:	83 c4 0c             	add    esp,0xc
c00165a5:	c3                   	ret    
c00165a6:	83 ec 08             	sub    esp,0x8
c00165a9:	50                   	push   eax
c00165aa:	68 80 16 03 c0       	push   0xc0031680
c00165af:	e8 1e 2f 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00165b4:	83 c4 10             	add    esp,0x10
c00165b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165bc:	eb e4                	jmp    c00165a2 <sbrk_thunk+0x1a>

c00165be <mmap>:
c00165be:	55                   	push   ebp
c00165bf:	57                   	push   edi
c00165c0:	56                   	push   esi
c00165c1:	53                   	push   ebx
c00165c2:	83 ec 18             	sub    esp,0x18
c00165c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165c9:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00165cf:	89 fb                	mov    ebx,edi
c00165d1:	c1 eb 0c             	shr    ebx,0xc
c00165d4:	53                   	push   ebx
c00165d5:	e8 e3 1b 00 00       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c00165da:	89 c5                	mov    ebp,eax
c00165dc:	83 c4 10             	add    esp,0x10
c00165df:	85 db                	test   ebx,ebx
c00165e1:	7e 2f                	jle    c0016612 <mmap+0x54>
c00165e3:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c00165e9:	01 c7                	add    edi,eax
c00165eb:	89 c3                	mov    ebx,eax
c00165ed:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c00165f3:	e8 b3 03 00 00       	call   c00169ab <Phys::allocatePage()>
c00165f8:	68 01 04 00 00       	push   0x401
c00165fd:	53                   	push   ebx
c00165fe:	50                   	push   eax
c00165ff:	56                   	push   esi
c0016600:	e8 c1 22 00 00       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016605:	81 c3 00 10 00 00    	add    ebx,0x1000
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	39 fb                	cmp    ebx,edi
c0016610:	75 db                	jne    c00165ed <mmap+0x2f>
c0016612:	89 e8                	mov    eax,ebp
c0016614:	83 c4 0c             	add    esp,0xc
c0016617:	5b                   	pop    ebx
c0016618:	5e                   	pop    esi
c0016619:	5f                   	pop    edi
c001661a:	5d                   	pop    ebp
c001661b:	c3                   	ret    

c001661c <munmap>:
c001661c:	83 ec 18             	sub    esp,0x18
c001661f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016623:	e8 a9 1e 00 00       	call   c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0016628:	b8 00 00 00 00       	mov    eax,0x0
c001662d:	83 c4 1c             	add    esp,0x1c
c0016630:	c3                   	ret    

c0016631 <liballoc_lock()>:
c0016631:	fa                   	cli    
c0016632:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c0016639:	b8 00 00 00 00       	mov    eax,0x0
c001663e:	c3                   	ret    

c001663f <liballoc_unlock()>:
c001663f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016644:	83 e8 01             	sub    eax,0x1
c0016647:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001664c:	75 01                	jne    c001664f <liballoc_unlock()+0x10>
c001664e:	fb                   	sti    
c001664f:	b8 00 00 00 00       	mov    eax,0x0
c0016654:	c3                   	ret    

c0016655 <liballoc_alloc(int)>:
c0016655:	83 ec 10             	sub    esp,0x10
c0016658:	6a 01                	push   0x1
c001665a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001665e:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016664:	e8 65 23 00 00       	call   c00189ce <VAS::allocatePages(int, int)>
c0016669:	83 c4 1c             	add    esp,0x1c
c001666c:	c3                   	ret    

c001666d <liballoc_free(void*, int)>:
c001666d:	83 ec 14             	sub    esp,0x14
c0016670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016674:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001667a:	e8 8f 1f 00 00       	call   c001860e <VAS::freeAllocatedPages(unsigned long)>
c001667f:	b8 00 00 00 00       	mov    eax,0x0
c0016684:	83 c4 1c             	add    esp,0x1c
c0016687:	c3                   	ret    

c0016688 <realloc>:
c0016688:	83 ec 14             	sub    esp,0x14
c001668b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001668f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016693:	e8 a4 b2 fe ff       	call   c000193c <dlrealloc>
c0016698:	83 c4 1c             	add    esp,0x1c
c001669b:	c3                   	ret    

c001669c <malloc>:
c001669c:	83 ec 18             	sub    esp,0x18
c001669f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166a3:	e8 57 ad fe ff       	call   c00013ff <dlmalloc>
c00166a8:	83 c4 1c             	add    esp,0x1c
c00166ab:	c3                   	ret    

c00166ac <free>:
c00166ac:	83 ec 18             	sub    esp,0x18
c00166af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166b3:	e8 85 a8 fe ff       	call   c0000f3d <dlfree>
c00166b8:	83 c4 1c             	add    esp,0x1c
c00166bb:	c3                   	ret    

c00166bc <rfree>:
c00166bc:	83 ec 18             	sub    esp,0x18
c00166bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166c3:	e8 75 a8 fe ff       	call   c0000f3d <dlfree>
c00166c8:	83 c4 1c             	add    esp,0x1c
c00166cb:	c3                   	ret    

c00166cc <calloc>:
c00166cc:	56                   	push   esi
c00166cd:	53                   	push   ebx
c00166ce:	83 ec 10             	sub    esp,0x10
c00166d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00166d5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00166da:	53                   	push   ebx
c00166db:	e8 bc ff ff ff       	call   c001669c <malloc>
c00166e0:	89 c6                	mov    esi,eax
c00166e2:	83 c4 0c             	add    esp,0xc
c00166e5:	53                   	push   ebx
c00166e6:	6a 00                	push   0x0
c00166e8:	50                   	push   eax
c00166e9:	e8 02 9e fe ff       	call   c00004f0 <memset>
c00166ee:	89 f0                	mov    eax,esi
c00166f0:	83 c4 14             	add    esp,0x14
c00166f3:	5b                   	pop    ebx
c00166f4:	5e                   	pop    esi
c00166f5:	c3                   	ret    

c00166f6 <KeEntryPoint>:
c00166f6:	57                   	push   edi
c00166f7:	bf f9 03 00 00       	mov    edi,0x3f9
c00166fc:	56                   	push   esi
c00166fd:	31 f6                	xor    esi,esi
c00166ff:	53                   	push   ebx
c0016700:	89 fa                	mov    edx,edi
c0016702:	83 ec 2c             	sub    esp,0x2c
c0016705:	a1 00 05 00 00       	mov    eax,ds:0x500
c001670a:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c001670f:	89 f0                	mov    eax,esi
c0016711:	ee                   	out    dx,al
c0016712:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016717:	b0 80                	mov    al,0x80
c0016719:	89 da                	mov    edx,ebx
c001671b:	ee                   	out    dx,al
c001671c:	b1 03                	mov    cl,0x3
c001671e:	ba f8 03 00 00       	mov    edx,0x3f8
c0016723:	88 c8                	mov    al,cl
c0016725:	ee                   	out    dx,al
c0016726:	89 f0                	mov    eax,esi
c0016728:	89 fa                	mov    edx,edi
c001672a:	ee                   	out    dx,al
c001672b:	88 c8                	mov    al,cl
c001672d:	89 da                	mov    edx,ebx
c001672f:	ee                   	out    dx,al
c0016730:	b0 c7                	mov    al,0xc7
c0016732:	ba fa 03 00 00       	mov    edx,0x3fa
c0016737:	ee                   	out    dx,al
c0016738:	b0 0b                	mov    al,0xb
c001673a:	ba fc 03 00 00       	mov    edx,0x3fc
c001673f:	ee                   	out    dx,al
c0016740:	68 8f 16 03 c0       	push   0xc003168f
c0016745:	e8 88 2d 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001674a:	e8 6a 96 00 00       	call   c001fdb9 <KeDisplaySplashScreen()>
c001674f:	a1 24 05 00 00       	mov    eax,ds:0x524
c0016754:	05 ff 0f 00 00       	add    eax,0xfff
c0016759:	25 00 f0 ff ff       	and    eax,0xfffff000
c001675e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016761:	e8 b3 03 00 00       	call   c0016b19 <Phys::physicalMemorySetup(unsigned int)>
c0016766:	e8 26 1c 00 00       	call   c0018391 <Virt::virtualMemorySetup()>
c001676b:	e8 93 95 00 00       	call   c001fd03 <KeInitialiseAtexit()>
c0016770:	58                   	pop    eax
c0016771:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0016775:	53                   	push   ebx
c0016776:	e8 13 1f 00 00       	call   c001868e <VAS::VAS()>
c001677b:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c0016781:	e8 14 86 01 00       	call   c002ed9a <_init>
c0016786:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c001678d:	e8 0a ff ff ff       	call   c001669c <malloc>
c0016792:	89 04 24             	mov    DWORD PTR [esp],eax
c0016795:	89 c6                	mov    esi,eax
c0016797:	e8 b8 f1 ff ff       	call   c0015954 <Computer::Computer()>
c001679c:	53                   	push   ebx
c001679d:	6a 00                	push   0x0
c001679f:	6a 00                	push   0x0
c00167a1:	56                   	push   esi
c00167a2:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00167a8:	e8 6d f5 ff ff       	call   c0015d1a <Computer::open(int, int, void*)>
c00167ad:	83 c4 14             	add    esp,0x14
c00167b0:	53                   	push   ebx
c00167b1:	e8 a2 1f 00 00       	call   c0018758 <VAS::~VAS()>
c00167b6:	83 c4 30             	add    esp,0x30
c00167b9:	5b                   	pop    ebx
c00167ba:	5e                   	pop    esi
c00167bb:	5f                   	pop    edi
c00167bc:	c3                   	ret    

c00167bd <Phys::allocateDMA(unsigned long)>:
c00167bd:	55                   	push   ebp
c00167be:	31 ed                	xor    ebp,ebp
c00167c0:	57                   	push   edi
c00167c1:	56                   	push   esi
c00167c2:	31 f6                	xor    esi,esi
c00167c4:	53                   	push   ebx
c00167c5:	31 db                	xor    ebx,ebx
c00167c7:	83 ec 1c             	sub    esp,0x1c
c00167ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167ce:	05 ff 0f 00 00       	add    eax,0xfff
c00167d3:	c1 e8 0c             	shr    eax,0xc
c00167d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167da:	31 c0                	xor    eax,eax
c00167dc:	eb 1b                	jmp    c00167f9 <Phys::allocateDMA(unsigned long)+0x3c>
c00167de:	8d 78 01             	lea    edi,[eax+0x1]
c00167e1:	85 c0                	test   eax,eax
c00167e3:	0f 44 eb             	cmove  ebp,ebx
c00167e6:	0f 44 f3             	cmove  esi,ebx
c00167e9:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00167ed:	74 37                	je     c0016826 <Phys::allocateDMA(unsigned long)+0x69>
c00167ef:	89 f8                	mov    eax,edi
c00167f1:	83 c3 01             	add    ebx,0x1
c00167f4:	83 fb 0f             	cmp    ebx,0xf
c00167f7:	7f 13                	jg     c001680c <Phys::allocateDMA(unsigned long)+0x4f>
c00167f9:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c0016800:	74 dc                	je     c00167de <Phys::allocateDMA(unsigned long)+0x21>
c0016802:	31 c0                	xor    eax,eax
c0016804:	83 c3 01             	add    ebx,0x1
c0016807:	83 fb 0f             	cmp    ebx,0xf
c001680a:	7e ed                	jle    c00167f9 <Phys::allocateDMA(unsigned long)+0x3c>
c001680c:	83 ec 0c             	sub    esp,0xc
c001680f:	68 a8 16 03 c0       	push   0xc00316a8
c0016814:	e8 7d 9d 00 00       	call   c0020596 <KePanic(char const*)>
c0016819:	83 c4 10             	add    esp,0x10
c001681c:	31 c0                	xor    eax,eax
c001681e:	83 c4 1c             	add    esp,0x1c
c0016821:	5b                   	pop    ebx
c0016822:	5e                   	pop    esi
c0016823:	5f                   	pop    edi
c0016824:	5d                   	pop    ebp
c0016825:	c3                   	ret    
c0016826:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001682a:	89 f2                	mov    edx,esi
c001682c:	c1 fa 04             	sar    edx,0x4
c001682f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016833:	01 f1                	add    ecx,esi
c0016835:	8d 51 0e             	lea    edx,[ecx+0xe]
c0016838:	83 e9 01             	sub    ecx,0x1
c001683b:	0f 48 ca             	cmovs  ecx,edx
c001683e:	c1 f9 04             	sar    ecx,0x4
c0016841:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0016845:	74 06                	je     c001684d <Phys::allocateDMA(unsigned long)+0x90>
c0016847:	89 eb                	mov    ebx,ebp
c0016849:	31 c0                	xor    eax,eax
c001684b:	eb b7                	jmp    c0016804 <Phys::allocateDMA(unsigned long)+0x47>
c001684d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016851:	85 d2                	test   edx,edx
c0016853:	74 17                	je     c001686c <Phys::allocateDMA(unsigned long)+0xaf>
c0016855:	8d 96 f0 a9 03 c0    	lea    edx,[esi-0x3ffc5610]
c001685b:	8d 84 06 f1 a9 03 c0 	lea    eax,[esi+eax*1-0x3ffc560f]
c0016862:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016865:	83 c2 01             	add    edx,0x1
c0016868:	39 d0                	cmp    eax,edx
c001686a:	75 f6                	jne    c0016862 <Phys::allocateDMA(unsigned long)+0xa5>
c001686c:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016872:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016876:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001687a:	01 c2                	add    edx,eax
c001687c:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016882:	85 c9                	test   ecx,ecx
c0016884:	74 17                	je     c001689d <Phys::allocateDMA(unsigned long)+0xe0>
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	68 a8 16 03 c0       	push   0xc00316a8
c001688e:	e8 03 9d 00 00       	call   c0020596 <KePanic(char const*)>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	89 f8                	mov    eax,edi
c0016898:	e9 54 ff ff ff       	jmp    c00167f1 <Phys::allocateDMA(unsigned long)+0x34>
c001689d:	c1 e6 0c             	shl    esi,0xc
c00168a0:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c00168a6:	e9 73 ff ff ff       	jmp    c001681e <Phys::allocateDMA(unsigned long)+0x61>

c00168ab <Phys::freeDMA(unsigned long, unsigned long)>:
c00168ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00168af:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00168b5:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00168ba:	c1 ea 0c             	shr    edx,0xc
c00168bd:	29 d0                	sub    eax,edx
c00168bf:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00168c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168c8:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00168cd:	c1 e8 0c             	shr    eax,0xc
c00168d0:	85 d2                	test   edx,edx
c00168d2:	74 11                	je     c00168e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00168d4:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c00168d9:	01 c2                	add    edx,eax
c00168db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00168de:	83 c0 01             	add    eax,0x1
c00168e1:	39 d0                	cmp    eax,edx
c00168e3:	75 f6                	jne    c00168db <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00168e5:	c3                   	ret    

c00168e6 <Phys::setPageState(unsigned long, bool)>:
c00168e6:	57                   	push   edi
c00168e7:	56                   	push   esi
c00168e8:	8b 35 88 42 03 c0    	mov    esi,DWORD PTR ds:0xc0034288
c00168ee:	53                   	push   ebx
c00168ef:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00168f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00168f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00168fc:	89 ca                	mov    edx,ecx
c00168fe:	83 e1 07             	and    ecx,0x7
c0016901:	c1 ea 03             	shr    edx,0x3
c0016904:	0f b6 c0             	movzx  eax,al
c0016907:	d3 c3                	rol    ebx,cl
c0016909:	01 d6                	add    esi,edx
c001690b:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001690e:	d3 e0                	shl    eax,cl
c0016910:	21 fb                	and    ebx,edi
c0016912:	88 1e                	mov    BYTE PTR [esi],bl
c0016914:	8b 1d 88 42 03 c0    	mov    ebx,DWORD PTR ds:0xc0034288
c001691a:	01 da                	add    edx,ebx
c001691c:	8a 0a                	mov    cl,BYTE PTR [edx]
c001691e:	09 c8                	or     eax,ecx
c0016920:	88 02                	mov    BYTE PTR [edx],al
c0016922:	5b                   	pop    ebx
c0016923:	5e                   	pop    esi
c0016924:	5f                   	pop    edi
c0016925:	c3                   	ret    

c0016926 <Phys::getPageState(unsigned long)>:
c0016926:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001692a:	8b 15 88 42 03 c0    	mov    edx,DWORD PTR ds:0xc0034288
c0016930:	89 c8                	mov    eax,ecx
c0016932:	83 e1 07             	and    ecx,0x7
c0016935:	c1 e8 03             	shr    eax,0x3
c0016938:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c001693c:	d3 f8                	sar    eax,cl
c001693e:	83 e0 01             	and    eax,0x1
c0016941:	c3                   	ret    

c0016942 <Phys::freePage(unsigned long)>:
c0016942:	53                   	push   ebx
c0016943:	83 ec 08             	sub    esp,0x8
c0016946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001694a:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0016950:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016956:	76 41                	jbe    c0016999 <Phys::freePage(unsigned long)+0x57>
c0016958:	c1 e8 0c             	shr    eax,0xc
c001695b:	50                   	push   eax
c001695c:	89 c3                	mov    ebx,eax
c001695e:	e8 c3 ff ff ff       	call   c0016926 <Phys::getPageState(unsigned long)>
c0016963:	5a                   	pop    edx
c0016964:	84 c0                	test   al,al
c0016966:	74 20                	je     c0016988 <Phys::freePage(unsigned long)+0x46>
c0016968:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c001696d:	83 ec 08             	sub    esp,0x8
c0016970:	6a 00                	push   0x0
c0016972:	53                   	push   ebx
c0016973:	83 e8 01             	sub    eax,0x1
c0016976:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c001697b:	e8 66 ff ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016980:	83 c4 10             	add    esp,0x10
c0016983:	83 c4 08             	add    esp,0x8
c0016986:	5b                   	pop    ebx
c0016987:	c3                   	ret    
c0016988:	c7 44 24 10 4d 17 03 c0 	mov    DWORD PTR [esp+0x10],0xc003174d
c0016990:	83 c4 08             	add    esp,0x8
c0016993:	5b                   	pop    ebx
c0016994:	e9 fd 9b 00 00       	jmp    c0020596 <KePanic(char const*)>
c0016999:	68 00 10 00 00       	push   0x1000
c001699e:	50                   	push   eax
c001699f:	e8 07 ff ff ff       	call   c00168ab <Phys::freeDMA(unsigned long, unsigned long)>
c00169a4:	59                   	pop    ecx
c00169a5:	5b                   	pop    ebx
c00169a6:	83 c4 08             	add    esp,0x8
c00169a9:	5b                   	pop    ebx
c00169aa:	c3                   	ret    

c00169ab <Phys::allocatePage()>:
c00169ab:	56                   	push   esi
c00169ac:	53                   	push   ebx
c00169ad:	83 ec 14             	sub    esp,0x14
c00169b0:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00169b6:	89 f3                	mov    ebx,esi
c00169b8:	eb 0a                	jmp    c00169c4 <Phys::allocatePage()+0x19>
c00169ba:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00169c0:	39 de                	cmp    esi,ebx
c00169c2:	74 26                	je     c00169ea <Phys::allocatePage()+0x3f>
c00169c4:	53                   	push   ebx
c00169c5:	e8 5c ff ff ff       	call   c0016926 <Phys::getPageState(unsigned long)>
c00169ca:	5a                   	pop    edx
c00169cb:	84 c0                	test   al,al
c00169cd:	74 67                	je     c0016a36 <Phys::allocatePage()+0x8b>
c00169cf:	83 c3 01             	add    ebx,0x1
c00169d2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00169d8:	75 e0                	jne    c00169ba <Phys::allocatePage()+0xf>
c00169da:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c00169e4:	31 db                	xor    ebx,ebx
c00169e6:	39 de                	cmp    esi,ebx
c00169e8:	75 da                	jne    c00169c4 <Phys::allocatePage()+0x19>
c00169ea:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c00169ef:	83 ec 0c             	sub    esp,0xc
c00169f2:	83 f0 01             	xor    eax,0x1
c00169f5:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c00169fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016a02:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016a08:	50                   	push   eax
c0016a09:	e8 78 27 00 00       	call   c0019186 <VAS::scanForEviction()>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	85 c0                	test   eax,eax
c0016a13:	75 48                	jne    c0016a5d <Phys::allocatePage()+0xb2>
c0016a15:	83 ec 0c             	sub    esp,0xc
c0016a18:	68 d0 16 03 c0       	push   0xc00316d0
c0016a1d:	e8 74 9b 00 00       	call   c0020596 <KePanic(char const*)>
c0016a22:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c0016a28:	83 c4 10             	add    esp,0x10
c0016a2b:	53                   	push   ebx
c0016a2c:	e8 f5 fe ff ff       	call   c0016926 <Phys::getPageState(unsigned long)>
c0016a31:	5a                   	pop    edx
c0016a32:	84 c0                	test   al,al
c0016a34:	75 99                	jne    c00169cf <Phys::allocatePage()+0x24>
c0016a36:	6a 01                	push   0x1
c0016a38:	53                   	push   ebx
c0016a39:	e8 a8 fe ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016a3e:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016a44:	59                   	pop    ecx
c0016a45:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016a4a:	5b                   	pop    ebx
c0016a4b:	83 c2 01             	add    edx,0x1
c0016a4e:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016a54:	c1 e0 0c             	shl    eax,0xc
c0016a57:	83 c4 14             	add    esp,0x14
c0016a5a:	5b                   	pop    ebx
c0016a5b:	5e                   	pop    esi
c0016a5c:	c3                   	ret    
c0016a5d:	83 ec 08             	sub    esp,0x8
c0016a60:	89 c2                	mov    edx,eax
c0016a62:	6a 01                	push   0x1
c0016a64:	c1 ea 0c             	shr    edx,0xc
c0016a67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a6b:	52                   	push   edx
c0016a6c:	e8 75 fe ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016a71:	83 c4 10             	add    esp,0x10
c0016a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a78:	eb dd                	jmp    c0016a57 <Phys::allocatePage()+0xac>

c0016a7a <Phys::allocateContiguousPages(int)>:
c0016a7a:	57                   	push   edi
c0016a7b:	56                   	push   esi
c0016a7c:	53                   	push   ebx
c0016a7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a81:	fa                   	cli    
c0016a82:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016a87:	31 db                	xor    ebx,ebx
c0016a89:	83 c0 01             	add    eax,0x1
c0016a8c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016a91:	85 db                	test   ebx,ebx
c0016a93:	75 11                	jne    c0016aa6 <Phys::allocateContiguousPages(int)+0x2c>
c0016a95:	e8 11 ff ff ff       	call   c00169ab <Phys::allocatePage()>
c0016a9a:	83 fe 01             	cmp    esi,0x1
c0016a9d:	89 c7                	mov    edi,eax
c0016a9f:	74 21                	je     c0016ac2 <Phys::allocateContiguousPages(int)+0x48>
c0016aa1:	bb 01 00 00 00       	mov    ebx,0x1
c0016aa6:	e8 00 ff ff ff       	call   c00169ab <Phys::allocatePage()>
c0016aab:	89 da                	mov    edx,ebx
c0016aad:	c1 e2 0c             	shl    edx,0xc
c0016ab0:	01 fa                	add    edx,edi
c0016ab2:	39 c2                	cmp    edx,eax
c0016ab4:	74 22                	je     c0016ad8 <Phys::allocateContiguousPages(int)+0x5e>
c0016ab6:	83 fe 01             	cmp    esi,0x1
c0016ab9:	bb 01 00 00 00       	mov    ebx,0x1
c0016abe:	89 c7                	mov    edi,eax
c0016ac0:	75 e4                	jne    c0016aa6 <Phys::allocateContiguousPages(int)+0x2c>
c0016ac2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016ac7:	83 e8 01             	sub    eax,0x1
c0016aca:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016acf:	75 01                	jne    c0016ad2 <Phys::allocateContiguousPages(int)+0x58>
c0016ad1:	fb                   	sti    
c0016ad2:	5b                   	pop    ebx
c0016ad3:	89 f8                	mov    eax,edi
c0016ad5:	5e                   	pop    esi
c0016ad6:	5f                   	pop    edi
c0016ad7:	c3                   	ret    
c0016ad8:	83 c3 01             	add    ebx,0x1
c0016adb:	39 f3                	cmp    ebx,esi
c0016add:	75 b2                	jne    c0016a91 <Phys::allocateContiguousPages(int)+0x17>
c0016adf:	eb e1                	jmp    c0016ac2 <Phys::allocateContiguousPages(int)+0x48>

c0016ae1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0016ae1:	56                   	push   esi
c0016ae2:	53                   	push   ebx
c0016ae3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ae7:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016aed:	73 06                	jae    c0016af5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016aef:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016af5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016af9:	c1 eb 0c             	shr    ebx,0xc
c0016afc:	c1 e8 0c             	shr    eax,0xc
c0016aff:	39 d8                	cmp    eax,ebx
c0016b01:	73 13                	jae    c0016b16 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016b03:	6a 00                	push   0x0
c0016b05:	50                   	push   eax
c0016b06:	8d 70 01             	lea    esi,[eax+0x1]
c0016b09:	e8 d8 fd ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016b0e:	39 f3                	cmp    ebx,esi
c0016b10:	89 f0                	mov    eax,esi
c0016b12:	5a                   	pop    edx
c0016b13:	59                   	pop    ecx
c0016b14:	75 ed                	jne    c0016b03 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016b16:	5b                   	pop    ebx
c0016b17:	5e                   	pop    esi
c0016b18:	c3                   	ret    

c0016b19 <Phys::physicalMemorySetup(unsigned int)>:
c0016b19:	55                   	push   ebp
c0016b1a:	57                   	push   edi
c0016b1b:	56                   	push   esi
c0016b1c:	53                   	push   ebx
c0016b1d:	31 db                	xor    ebx,ebx
c0016b1f:	83 ec 40             	sub    esp,0x40
c0016b22:	6a 10                	push   0x10
c0016b24:	6a 00                	push   0x0
c0016b26:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016b2b:	e8 c0 99 fe ff       	call   c00004f0 <memset>
c0016b30:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016b34:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016b39:	05 00 10 00 00       	add    eax,0x1000
c0016b3e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016b42:	5a                   	pop    edx
c0016b43:	59                   	pop    ecx
c0016b44:	50                   	push   eax
c0016b45:	68 63 17 03 c0       	push   0xc0031763
c0016b4a:	e8 83 29 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0016b4f:	83 c4 10             	add    esp,0x10
c0016b52:	83 ec 08             	sub    esp,0x8
c0016b55:	6a 01                	push   0x1
c0016b57:	53                   	push   ebx
c0016b58:	83 c3 01             	add    ebx,0x1
c0016b5b:	e8 86 fd ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016b60:	83 c4 10             	add    esp,0x10
c0016b63:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016b69:	75 e7                	jne    c0016b52 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016b6b:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016b72:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016b79:	c1 e0 08             	shl    eax,0x8
c0016b7c:	09 c2                	or     edx,eax
c0016b7e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0016b82:	0f 84 43 01 00 00    	je     c0016ccb <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0016b88:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b90:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016b95:	e9 82 00 00 00       	jmp    c0016c1c <Phys::physicalMemorySetup(unsigned int)+0x103>
c0016b9a:	ba 00 00 08 00       	mov    edx,0x80000
c0016b9f:	89 c1                	mov    ecx,eax
c0016ba1:	39 f2                	cmp    edx,esi
c0016ba3:	19 f9                	sbb    ecx,edi
c0016ba5:	0f 82 c0 00 00 00    	jb     c0016c6b <Phys::physicalMemorySetup(unsigned int)+0x152>
c0016bab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016baf:	89 c5                	mov    ebp,eax
c0016bb1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016bb5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bb9:	19 cd                	sbb    ebp,ecx
c0016bbb:	0f 83 af 00 00 00    	jae    c0016c70 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0016bc1:	89 d6                	mov    esi,edx
c0016bc3:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016bc8:	39 f2                	cmp    edx,esi
c0016bca:	89 cf                	mov    edi,ecx
c0016bcc:	19 c8                	sbb    eax,ecx
c0016bce:	73 07                	jae    c0016bd7 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0016bd0:	be 00 00 0a 00       	mov    esi,0xa0000
c0016bd5:	31 ff                	xor    edi,edi
c0016bd7:	89 f2                	mov    edx,esi
c0016bd9:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0016bde:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0016be4:	89 f9                	mov    ecx,edi
c0016be6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016bea:	83 d1 ff             	adc    ecx,0xffffffff
c0016bed:	39 d0                	cmp    eax,edx
c0016bef:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0016bf3:	b8 00 00 00 00       	mov    eax,0x0
c0016bf8:	19 c8                	sbb    eax,ecx
c0016bfa:	0f 82 9d 01 00 00    	jb     c0016d9d <Phys::physicalMemorySetup(unsigned int)+0x284>
c0016c00:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016c04:	83 c3 18             	add    ebx,0x18
c0016c07:	83 c6 01             	add    esi,0x1
c0016c0a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c12:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0016c16:	0f 84 bf 00 00 00    	je     c0016cdb <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016c1c:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016c1e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c21:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016c24:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016c27:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016c2b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016c2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c32:	01 f0                	add    eax,esi
c0016c34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c38:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016c3c:	55                   	push   ebp
c0016c3d:	11 fa                	adc    edx,edi
c0016c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c43:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c4b:	50                   	push   eax
c0016c4c:	56                   	push   esi
c0016c4d:	68 00 17 03 c0       	push   0xc0031700
c0016c52:	e8 7b 28 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0016c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c5b:	83 c4 10             	add    esp,0x10
c0016c5e:	09 f8                	or     eax,edi
c0016c60:	75 79                	jne    c0016cdb <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016c62:	83 fd 01             	cmp    ebp,0x1
c0016c65:	0f 84 2f ff ff ff    	je     c0016b9a <Phys::physicalMemorySetup(unsigned int)+0x81>
c0016c6b:	83 fd 01             	cmp    ebp,0x1
c0016c6e:	75 90                	jne    c0016c00 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016c70:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016c74:	31 d2                	xor    edx,edx
c0016c76:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0016c7a:	89 c8                	mov    eax,ecx
c0016c7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c80:	19 d1                	sbb    ecx,edx
c0016c82:	0f 82 78 ff ff ff    	jb     c0016c00 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016c88:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0016c8d:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0016c91:	b9 00 00 00 00       	mov    ecx,0x0
c0016c96:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0016c9a:	0f 83 60 ff ff ff    	jae    c0016c00 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016ca0:	39 c6                	cmp    esi,eax
c0016ca2:	19 d7                	sbb    edi,edx
c0016ca4:	0f 83 ff 00 00 00    	jae    c0016da9 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016caa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016cae:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016cb2:	29 c7                	sub    edi,eax
c0016cb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cb8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016cbc:	19 d5                	sbb    ebp,edx
c0016cbe:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016cc2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016cc6:	e9 de 00 00 00       	jmp    c0016da9 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016ccb:	83 ec 0c             	sub    esp,0xc
c0016cce:	68 7b 17 03 c0       	push   0xc003177b
c0016cd3:	e8 be 98 00 00       	call   c0020596 <KePanic(char const*)>
c0016cd8:	83 c4 10             	add    esp,0x10
c0016cdb:	83 ec 08             	sub    esp,0x8
c0016cde:	bb 60 00 00 00       	mov    ebx,0x60
c0016ce3:	6a 00                	push   0x0
c0016ce5:	6a 06                	push   0x6
c0016ce7:	e8 fa fb ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016cec:	58                   	pop    eax
c0016ced:	5a                   	pop    edx
c0016cee:	6a 00                	push   0x0
c0016cf0:	6a 07                	push   0x7
c0016cf2:	e8 ef fb ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016cf7:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	83 c1 02             	add    ecx,0x2
c0016d03:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016d09:	83 ec 08             	sub    esp,0x8
c0016d0c:	6a 00                	push   0x0
c0016d0e:	53                   	push   ebx
c0016d0f:	83 c3 01             	add    ebx,0x1
c0016d12:	e8 cf fb ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016d17:	83 c4 10             	add    esp,0x10
c0016d1a:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016d20:	75 e7                	jne    c0016d09 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0016d22:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016d27:	bb 40 01 00 00       	mov    ebx,0x140
c0016d2c:	83 c0 20             	add    eax,0x20
c0016d2f:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016d34:	eb 26                	jmp    c0016d5c <Phys::physicalMemorySetup(unsigned int)+0x243>
c0016d36:	83 ec 08             	sub    esp,0x8
c0016d39:	6a 00                	push   0x0
c0016d3b:	53                   	push   ebx
c0016d3c:	83 c3 01             	add    ebx,0x1
c0016d3f:	e8 a2 fb ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016d44:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016d49:	83 c4 10             	add    esp,0x10
c0016d4c:	83 c0 01             	add    eax,0x1
c0016d4f:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016d55:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016d5a:	74 07                	je     c0016d63 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0016d5c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016d61:	7e d3                	jle    c0016d36 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c0016d63:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016d68:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016d6d:	7f 26                	jg     c0016d95 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0016d6f:	83 ec 08             	sub    esp,0x8
c0016d72:	6a 00                	push   0x0
c0016d74:	53                   	push   ebx
c0016d75:	83 c3 01             	add    ebx,0x1
c0016d78:	e8 69 fb ff ff       	call   c00168e6 <Phys::setPageState(unsigned long, bool)>
c0016d7d:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016d82:	83 c4 10             	add    esp,0x10
c0016d85:	83 c0 01             	add    eax,0x1
c0016d88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016d8e:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016d93:	75 d3                	jne    c0016d68 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0016d95:	83 c4 3c             	add    esp,0x3c
c0016d98:	5b                   	pop    ebx
c0016d99:	5e                   	pop    esi
c0016d9a:	5f                   	pop    edi
c0016d9b:	5d                   	pop    ebp
c0016d9c:	c3                   	ret    
c0016d9d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0016da1:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0016da9:	83 ec 04             	sub    esp,0x4
c0016dac:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016db0:	56                   	push   esi
c0016db1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016db5:	57                   	push   edi
c0016db6:	68 24 17 03 c0       	push   0xc0031724
c0016dbb:	e8 12 27 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0016dc0:	5d                   	pop    ebp
c0016dc1:	58                   	pop    eax
c0016dc2:	56                   	push   esi
c0016dc3:	57                   	push   edi
c0016dc4:	e8 18 fd ff ff       	call   c0016ae1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016dc9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016dcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016dd1:	83 c4 0c             	add    esp,0xc
c0016dd4:	8b 35 ec a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9ec
c0016dda:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016dde:	01 f0                	add    eax,esi
c0016de0:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016de5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016dec:	52                   	push   edx
c0016ded:	50                   	push   eax
c0016dee:	68 89 17 03 c0       	push   0xc0031789
c0016df3:	e8 da 26 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0016df8:	83 c4 10             	add    esp,0x10
c0016dfb:	e9 00 fe ff ff       	jmp    c0016c00 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c0016e00 <Pipe::isAtty()>:
c0016e00:	31 c0                	xor    eax,eax
c0016e02:	c3                   	ret    
c0016e03:	90                   	nop

c0016e04 <Pipe::~Pipe()>:
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	ba e8 17 03 c0       	mov    edx,0xc00317e8
c0016e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e10:	89 10                	mov    DWORD PTR [eax],edx
c0016e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e16:	83 ec 0c             	sub    esp,0xc
c0016e19:	50                   	push   eax
c0016e1a:	e8 35 11 00 00       	call   c0017f54 <UnixFile::~UnixFile()>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	90                   	nop
c0016e23:	83 c4 0c             	add    esp,0xc
c0016e26:	c3                   	ret    
c0016e27:	90                   	nop

c0016e28 <Pipe::~Pipe()>:
c0016e28:	83 ec 0c             	sub    esp,0xc
c0016e2b:	83 ec 0c             	sub    esp,0xc
c0016e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e32:	e8 cd ff ff ff       	call   c0016e04 <Pipe::~Pipe()>
c0016e37:	83 c4 10             	add    esp,0x10
c0016e3a:	83 ec 08             	sub    esp,0x8
c0016e3d:	6a 20                	push   0x20
c0016e3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e43:	e8 8c 25 00 00       	call   c00193d4 <operator delete(void*, unsigned long)>
c0016e48:	83 c4 10             	add    esp,0x10
c0016e4b:	83 c4 0c             	add    esp,0xc
c0016e4e:	c3                   	ret    
c0016e4f:	90                   	nop

c0016e50 <Pipe::write(unsigned long long, void*, int*)>:
c0016e50:	55                   	push   ebp
c0016e51:	57                   	push   edi
c0016e52:	56                   	push   esi
c0016e53:	53                   	push   ebx
c0016e54:	83 ec 1c             	sub    esp,0x1c
c0016e57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e5b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016e5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e63:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016e66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016e6a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016e6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e70:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016e74:	89 d8                	mov    eax,ebx
c0016e76:	89 d6                	mov    esi,edx
c0016e78:	89 d7                	mov    edi,edx
c0016e7a:	c1 ff 1f             	sar    edi,0x1f
c0016e7d:	03 34 24             	add    esi,DWORD PTR [esp]
c0016e80:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016e84:	c1 f8 1f             	sar    eax,0x1f
c0016e87:	39 f3                	cmp    ebx,esi
c0016e89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e91:	19 f8                	sbb    eax,edi
c0016e93:	b8 01 00 00 00       	mov    eax,0x1
c0016e98:	72 72                	jb     c0016f0c <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0016e9a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016e9d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016ea1:	01 d0                	add    eax,edx
c0016ea3:	99                   	cdq    
c0016ea4:	f7 fb                	idiv   ebx
c0016ea6:	89 d8                	mov    eax,ebx
c0016ea8:	29 d0                	sub    eax,edx
c0016eaa:	89 d6                	mov    esi,edx
c0016eac:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016eaf:	89 c3                	mov    ebx,eax
c0016eb1:	c1 fb 1f             	sar    ebx,0x1f
c0016eb4:	39 c2                	cmp    edx,eax
c0016eb6:	19 df                	sbb    edi,ebx
c0016eb8:	bb 00 00 00 00       	mov    ebx,0x0
c0016ebd:	72 04                	jb     c0016ec3 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0016ebf:	89 d3                	mov    ebx,edx
c0016ec1:	29 c3                	sub    ebx,eax
c0016ec3:	89 d0                	mov    eax,edx
c0016ec5:	29 d8                	sub    eax,ebx
c0016ec7:	74 0d                	je     c0016ed6 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0016ec9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016ecc:	89 c1                	mov    ecx,eax
c0016ece:	01 f7                	add    edi,esi
c0016ed0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016ed4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ed6:	85 db                	test   ebx,ebx
c0016ed8:	74 0d                	je     c0016ee7 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0016eda:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ede:	89 d9                	mov    ecx,ebx
c0016ee0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016ee3:	89 c6                	mov    esi,eax
c0016ee5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ee7:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016eea:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016eef:	75 10                	jne    c0016f01 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0016ef1:	83 ec 0c             	sub    esp,0xc
c0016ef4:	68 a5 17 03 c0       	push   0xc00317a5
c0016ef9:	e8 98 96 00 00       	call   c0020596 <KePanic(char const*)>
c0016efe:	83 c4 10             	add    esp,0x10
c0016f01:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f05:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016f08:	89 08                	mov    DWORD PTR [eax],ecx
c0016f0a:	31 c0                	xor    eax,eax
c0016f0c:	83 c4 1c             	add    esp,0x1c
c0016f0f:	5b                   	pop    ebx
c0016f10:	5e                   	pop    esi
c0016f11:	5f                   	pop    edi
c0016f12:	5d                   	pop    ebp
c0016f13:	c3                   	ret    

c0016f14 <Pipe::read(unsigned long long, void*, int*)>:
c0016f14:	55                   	push   ebp
c0016f15:	57                   	push   edi
c0016f16:	56                   	push   esi
c0016f17:	53                   	push   ebx
c0016f18:	83 ec 1c             	sub    esp,0x1c
c0016f1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016f1f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016f23:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016f27:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016f2a:	89 c8                	mov    eax,ecx
c0016f2c:	99                   	cdq    
c0016f2d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016f31:	74 24                	je     c0016f57 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016f33:	39 f9                	cmp    ecx,edi
c0016f35:	89 d1                	mov    ecx,edx
c0016f37:	19 f1                	sbb    ecx,esi
c0016f39:	73 1c                	jae    c0016f57 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016f3b:	fa                   	cli    
c0016f3c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016f42:	e8 a5 e6 00 00       	call   c00255ec <schedule()>
c0016f47:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016f4c:	48                   	dec    eax
c0016f4d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016f52:	75 d3                	jne    c0016f27 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016f54:	fb                   	sti    
c0016f55:	eb d0                	jmp    c0016f27 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016f57:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016f5b:	39 f8                	cmp    eax,edi
c0016f5d:	89 d1                	mov    ecx,edx
c0016f5f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016f63:	19 f1                	sbb    ecx,esi
c0016f65:	73 08                	jae    c0016f6f <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0016f67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016f6f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016f72:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016f75:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0016f79:	29 f7                	sub    edi,esi
c0016f7b:	89 f8                	mov    eax,edi
c0016f7d:	99                   	cdq    
c0016f7e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016f82:	89 d0                	mov    eax,edx
c0016f84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f88:	19 c2                	sbb    edx,eax
c0016f8a:	89 f8                	mov    eax,edi
c0016f8c:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0016f91:	89 ea                	mov    edx,ebp
c0016f93:	29 c2                	sub    edx,eax
c0016f95:	85 c0                	test   eax,eax
c0016f97:	74 0b                	je     c0016fa4 <Pipe::read(unsigned long long, void*, int*)+0x90>
c0016f99:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016f9c:	89 c1                	mov    ecx,eax
c0016f9e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016fa2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fa4:	85 d2                	test   edx,edx
c0016fa6:	74 0d                	je     c0016fb5 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0016fa8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016fac:	89 d1                	mov    ecx,edx
c0016fae:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016fb1:	89 c7                	mov    edi,eax
c0016fb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fb5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fb8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016fbb:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016fbe:	99                   	cdq    
c0016fbf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016fc3:	89 f7                	mov    edi,esi
c0016fc5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0016fc9:	c1 ff 1f             	sar    edi,0x1f
c0016fcc:	57                   	push   edi
c0016fcd:	56                   	push   esi
c0016fce:	52                   	push   edx
c0016fcf:	50                   	push   eax
c0016fd0:	e8 ab 7c 01 00       	call   c002ec80 <__umoddi3>
c0016fd5:	83 c4 10             	add    esp,0x10
c0016fd8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016fdd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016fe0:	75 10                	jne    c0016ff2 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0016fe2:	83 ec 0c             	sub    esp,0xc
c0016fe5:	68 c2 17 03 c0       	push   0xc00317c2
c0016fea:	e8 a7 95 00 00       	call   c0020596 <KePanic(char const*)>
c0016fef:	83 c4 10             	add    esp,0x10
c0016ff2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ff6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ffa:	89 10                	mov    DWORD PTR [eax],edx
c0016ffc:	83 c4 1c             	add    esp,0x1c
c0016fff:	31 c0                	xor    eax,eax
c0017001:	5b                   	pop    ebx
c0017002:	5e                   	pop    esi
c0017003:	5f                   	pop    edi
c0017004:	5d                   	pop    ebp
c0017005:	c3                   	ret    

c0017006 <Pipe::Pipe(int)>:
c0017006:	83 ec 0c             	sub    esp,0xc
c0017009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001700d:	83 ec 08             	sub    esp,0x8
c0017010:	6a 00                	push   0x0
c0017012:	50                   	push   eax
c0017013:	e8 56 0d 00 00       	call   c0017d6e <UnixFile::UnixFile(int)>
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	ba e8 17 03 c0       	mov    edx,0xc00317e8
c0017020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017024:	89 10                	mov    DWORD PTR [eax],edx
c0017026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001702a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001702e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017035:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001703c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017040:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017047:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001704b:	83 ec 0c             	sub    esp,0xc
c001704e:	50                   	push   eax
c001704f:	e8 48 f6 ff ff       	call   c001669c <malloc>
c0017054:	83 c4 10             	add    esp,0x10
c0017057:	89 c2                	mov    edx,eax
c0017059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001705d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017064:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0017068:	90                   	nop
c0017069:	83 c4 0c             	add    esp,0xc
c001706c:	c3                   	ret    
c001706d:	90                   	nop

c001706e <VgaText::isAtty()>:
c001706e:	b0 01                	mov    al,0x1
c0017070:	c3                   	ret    
c0017071:	90                   	nop

c0017072 <VgaText::~VgaText()>:
c0017072:	83 ec 0c             	sub    esp,0xc
c0017075:	ba 30 18 03 c0       	mov    edx,0xc0031830
c001707a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001707e:	89 10                	mov    DWORD PTR [eax],edx
c0017080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017084:	83 ec 0c             	sub    esp,0xc
c0017087:	50                   	push   eax
c0017088:	e8 c7 0e 00 00       	call   c0017f54 <UnixFile::~UnixFile()>
c001708d:	83 c4 10             	add    esp,0x10
c0017090:	90                   	nop
c0017091:	83 c4 0c             	add    esp,0xc
c0017094:	c3                   	ret    
c0017095:	90                   	nop

c0017096 <VgaText::~VgaText()>:
c0017096:	83 ec 0c             	sub    esp,0xc
c0017099:	83 ec 0c             	sub    esp,0xc
c001709c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170a0:	e8 cd ff ff ff       	call   c0017072 <VgaText::~VgaText()>
c00170a5:	83 c4 10             	add    esp,0x10
c00170a8:	83 ec 08             	sub    esp,0x8
c00170ab:	68 84 01 00 00       	push   0x184
c00170b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170b4:	e8 1b 23 00 00       	call   c00193d4 <operator delete(void*, unsigned long)>
c00170b9:	83 c4 10             	add    esp,0x10
c00170bc:	83 c4 0c             	add    esp,0xc
c00170bf:	c3                   	ret    

c00170c0 <VgaText::read(unsigned long long, void*, int*)>:
c00170c0:	83 ec 10             	sub    esp,0x10
c00170c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00170cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170cf:	e8 be 54 00 00       	call   c001c592 <readKeyboard(VgaText*, char*, unsigned long)>
c00170d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170d8:	89 02                	mov    DWORD PTR [edx],eax
c00170da:	31 c0                	xor    eax,eax
c00170dc:	83 c4 1c             	add    esp,0x1c
c00170df:	c3                   	ret    

c00170e0 <setTerminalScrollLock(bool)>:
c00170e0:	c3                   	ret    

c00170e1 <doTerminalCycle()>:
c00170e1:	c3                   	ret    

c00170e2 <addToTerminalCycle(VgaText*)>:
c00170e2:	c3                   	ret    

c00170e3 <scrollTerminalScrollLock(int)>:
c00170e3:	c3                   	ret    

c00170e4 <VgaText::updateTitle()>:
c00170e4:	c3                   	ret    
c00170e5:	90                   	nop

c00170e6 <VgaText::load()>:
c00170e6:	c3                   	ret    
c00170e7:	90                   	nop

c00170e8 <VgaText::updateCursor()>:
c00170e8:	83 ec 14             	sub    esp,0x14
c00170eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170ef:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00170f2:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00170f5:	e8 d2 10 01 00       	call   c00281cc <HalConsoleCursorUpdate(int, int)>
c00170fa:	83 c4 1c             	add    esp,0x1c
c00170fd:	c3                   	ret    

c00170fe <VgaText::doANSI_SGR(int)>:
c00170fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017106:	85 d2                	test   edx,edx
c0017108:	75 0b                	jne    c0017115 <VgaText::doANSI_SGR(int)+0x17>
c001710a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001710d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017110:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0017113:	eb 59                	jmp    c001716e <VgaText::doANSI_SGR(int)+0x70>
c0017115:	83 fa 07             	cmp    edx,0x7
c0017118:	75 0b                	jne    c0017125 <VgaText::doANSI_SGR(int)+0x27>
c001711a:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001711d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0017120:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0017123:	eb 49                	jmp    c001716e <VgaText::doANSI_SGR(int)+0x70>
c0017125:	83 fa 1b             	cmp    edx,0x1b
c0017128:	74 e0                	je     c001710a <VgaText::doANSI_SGR(int)+0xc>
c001712a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001712d:	83 f9 07             	cmp    ecx,0x7
c0017130:	77 09                	ja     c001713b <VgaText::doANSI_SGR(int)+0x3d>
c0017132:	8b 14 8d c0 42 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcbd40]
c0017139:	eb 20                	jmp    c001715b <VgaText::doANSI_SGR(int)+0x5d>
c001713b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001713e:	83 f9 07             	cmp    ecx,0x7
c0017141:	77 09                	ja     c001714c <VgaText::doANSI_SGR(int)+0x4e>
c0017143:	8b 14 8d c0 42 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcbd40]
c001714a:	eb 22                	jmp    c001716e <VgaText::doANSI_SGR(int)+0x70>
c001714c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001714f:	83 f9 07             	cmp    ecx,0x7
c0017152:	77 0b                	ja     c001715f <VgaText::doANSI_SGR(int)+0x61>
c0017154:	8b 14 95 78 41 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcbe88]
c001715b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001715e:	c3                   	ret    
c001715f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0017162:	83 f9 07             	cmp    ecx,0x7
c0017165:	77 0a                	ja     c0017171 <VgaText::doANSI_SGR(int)+0x73>
c0017167:	8b 14 95 50 41 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcbeb0]
c001716e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0017171:	c3                   	ret    

c0017172 <VgaText::setDefaultBgColour(VgaColour)>:
c0017172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017176:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001717a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001717d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0017180:	c3                   	ret    
c0017181:	90                   	nop

c0017182 <VgaText::setDefaultFgColour(VgaColour)>:
c0017182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017186:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001718a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001718d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017190:	c3                   	ret    
c0017191:	90                   	nop

c0017192 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0017192:	53                   	push   ebx
c0017193:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017197:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001719b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001719f:	51                   	push   ecx
c00171a0:	e8 cd ff ff ff       	call   c0017172 <VgaText::setDefaultBgColour(VgaColour)>
c00171a5:	58                   	pop    eax
c00171a6:	5a                   	pop    edx
c00171a7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00171ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00171af:	5b                   	pop    ebx
c00171b0:	eb d0                	jmp    c0017182 <VgaText::setDefaultFgColour(VgaColour)>

c00171b2 <VgaText::setTitleTextColour(VgaColour)>:
c00171b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00171ba:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00171bd:	c3                   	ret    

c00171be <VgaText::setTitleColour(VgaColour)>:
c00171be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00171c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00171c9:	c3                   	ret    

c00171ca <VgaText::setTitle(char*)>:
c00171ca:	c3                   	ret    
c00171cb:	90                   	nop

c00171cc <VgaText::combineColours(unsigned char, unsigned char)>:
c00171cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171d0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00171d5:	83 e0 0f             	and    eax,0xf
c00171d8:	c1 e2 04             	shl    edx,0x4
c00171db:	09 d0                	or     eax,edx
c00171dd:	c3                   	ret    

c00171de <VgaText::scrollScreen()>:
c00171de:	55                   	push   ebp
c00171df:	57                   	push   edi
c00171e0:	56                   	push   esi
c00171e1:	be 01 00 00 00       	mov    esi,0x1
c00171e6:	53                   	push   ebx
c00171e7:	83 ec 0c             	sub    esp,0xc
c00171ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171ee:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00171f1:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00171f7:	31 ff                	xor    edi,edi
c00171f9:	01 e9                	add    ecx,ebp
c00171fb:	8a 01                	mov    al,BYTE PTR [ecx]
c00171fd:	83 fe 18             	cmp    esi,0x18
c0017200:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0017206:	75 20                	jne    c0017228 <VgaText::scrollScreen()+0x4a>
c0017208:	f7 c7 01 00 00 00    	test   edi,0x1
c001720e:	74 15                	je     c0017225 <VgaText::scrollScreen()+0x47>
c0017210:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017214:	50                   	push   eax
c0017215:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017219:	50                   	push   eax
c001721a:	e8 ad ff ff ff       	call   c00171cc <VgaText::combineColours(unsigned char, unsigned char)>
c001721f:	5a                   	pop    edx
c0017220:	5a                   	pop    edx
c0017221:	88 01                	mov    BYTE PTR [ecx],al
c0017223:	eb 03                	jmp    c0017228 <VgaText::scrollScreen()+0x4a>
c0017225:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0017228:	47                   	inc    edi
c0017229:	41                   	inc    ecx
c001722a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0017230:	75 c9                	jne    c00171fb <VgaText::scrollScreen()+0x1d>
c0017232:	46                   	inc    esi
c0017233:	83 fe 19             	cmp    esi,0x19
c0017236:	75 b9                	jne    c00171f1 <VgaText::scrollScreen()+0x13>
c0017238:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c001723e:	75 1f                	jne    c001725f <VgaText::scrollScreen()+0x81>
c0017240:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0017244:	74 05                	je     c001724b <VgaText::scrollScreen()+0x6d>
c0017246:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0017249:	eb 14                	jmp    c001725f <VgaText::scrollScreen()+0x81>
c001724b:	50                   	push   eax
c001724c:	50                   	push   eax
c001724d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017251:	50                   	push   eax
c0017252:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017256:	50                   	push   eax
c0017257:	e8 04 0e 01 00       	call   c0028060 <HalConsoleScroll(int, int)>
c001725c:	83 c4 10             	add    esp,0x10
c001725f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017263:	83 c4 0c             	add    esp,0xc
c0017266:	5b                   	pop    ebx
c0017267:	5e                   	pop    esi
c0017268:	5f                   	pop    edi
c0017269:	5d                   	pop    ebp
c001726a:	e9 79 fe ff ff       	jmp    c00170e8 <VgaText::updateCursor()>
c001726f:	90                   	nop

c0017270 <VgaText::combineCharAndColour(char, unsigned char)>:
c0017270:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017275:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001727a:	c1 e0 08             	shl    eax,0x8
c001727d:	09 d0                	or     eax,edx
c001727f:	c3                   	ret    

c0017280 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0017280:	55                   	push   ebp
c0017281:	57                   	push   edi
c0017282:	56                   	push   esi
c0017283:	53                   	push   ebx
c0017284:	83 ec 1c             	sub    esp,0x1c
c0017287:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001728b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001728f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017293:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001729b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001729f:	0f b6 c3             	movzx  eax,bl
c00172a2:	50                   	push   eax
c00172a3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00172a8:	50                   	push   eax
c00172a9:	e8 1e ff ff ff       	call   c00171cc <VgaText::combineColours(unsigned char, unsigned char)>
c00172ae:	5a                   	pop    edx
c00172af:	59                   	pop    ecx
c00172b0:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00172b5:	0f b6 c0             	movzx  eax,al
c00172b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172bc:	50                   	push   eax
c00172bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00172c1:	e8 aa ff ff ff       	call   c0017270 <VgaText::combineCharAndColour(char, unsigned char)>
c00172c6:	5a                   	pop    edx
c00172c7:	6b d7 50             	imul   edx,edi,0x50
c00172ca:	59                   	pop    ecx
c00172cb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00172ce:	01 f2                	add    edx,esi
c00172d0:	0f b7 d2             	movzx  edx,dx
c00172d3:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00172d7:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c00172dd:	75 28                	jne    c0017307 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00172df:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00172e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172e7:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00172eb:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00172ef:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172fb:	83 c4 1c             	add    esp,0x1c
c00172fe:	5b                   	pop    ebx
c00172ff:	5e                   	pop    esi
c0017300:	5f                   	pop    edi
c0017301:	5d                   	pop    ebp
c0017302:	e9 61 0e 01 00       	jmp    c0028168 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017307:	83 c4 1c             	add    esp,0x1c
c001730a:	5b                   	pop    ebx
c001730b:	5e                   	pop    esi
c001730c:	5f                   	pop    edi
c001730d:	5d                   	pop    ebp
c001730e:	c3                   	ret    
c001730f:	90                   	nop

c0017310 <VgaText::getCursorX()>:
c0017310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017314:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017317:	c3                   	ret    

c0017318 <VgaText::getCursorY()>:
c0017318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001731c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001731f:	c3                   	ret    

c0017320 <VgaText::setCursor(int, int)>:
c0017320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017324:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017328:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001732b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001732f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017332:	e9 b1 fd ff ff       	jmp    c00170e8 <VgaText::updateCursor()>

c0017337 <setActiveTerminal(VgaText*)>:
c0017337:	53                   	push   ebx
c0017338:	83 ec 08             	sub    esp,0x8
c001733b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001733f:	85 db                	test   ebx,ebx
c0017341:	75 11                	jne    c0017354 <setActiveTerminal(VgaText*)+0x1d>
c0017343:	c7 44 24 10 fc 17 03 c0 	mov    DWORD PTR [esp+0x10],0xc00317fc
c001734b:	83 c4 08             	add    esp,0x8
c001734e:	5b                   	pop    ebx
c001734f:	e9 42 92 00 00       	jmp    c0020596 <KePanic(char const*)>
c0017354:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0017359:	85 c0                	test   eax,eax
c001735b:	74 0c                	je     c0017369 <setActiveTerminal(VgaText*)+0x32>
c001735d:	83 ec 0c             	sub    esp,0xc
c0017360:	50                   	push   eax
c0017361:	e8 82 fd ff ff       	call   c00170e8 <VgaText::updateCursor()>
c0017366:	83 c4 10             	add    esp,0x10
c0017369:	50                   	push   eax
c001736a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001736d:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c0017373:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017376:	53                   	push   ebx
c0017377:	e8 a4 ff ff ff       	call   c0017320 <VgaText::setCursor(int, int)>
c001737c:	83 c4 18             	add    esp,0x18
c001737f:	5b                   	pop    ebx
c0017380:	c3                   	ret    
c0017381:	90                   	nop

c0017382 <VgaText::clearScreen()>:
c0017382:	57                   	push   edi
c0017383:	56                   	push   esi
c0017384:	31 f6                	xor    esi,esi
c0017386:	53                   	push   ebx
c0017387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001738b:	52                   	push   edx
c001738c:	6a 00                	push   0x0
c001738e:	6a 00                	push   0x0
c0017390:	53                   	push   ebx
c0017391:	e8 8a ff ff ff       	call   c0017320 <VgaText::setCursor(int, int)>
c0017396:	83 c4 10             	add    esp,0x10
c0017399:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00173a0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00173a3:	7e 20                	jle    c00173c5 <VgaText::clearScreen()+0x43>
c00173a5:	31 ff                	xor    edi,edi
c00173a7:	50                   	push   eax
c00173a8:	50                   	push   eax
c00173a9:	56                   	push   esi
c00173aa:	57                   	push   edi
c00173ab:	47                   	inc    edi
c00173ac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00173af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00173b2:	6a 20                	push   0x20
c00173b4:	53                   	push   ebx
c00173b5:	e8 c6 fe ff ff       	call   c0017280 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00173ba:	83 c4 20             	add    esp,0x20
c00173bd:	83 ff 50             	cmp    edi,0x50
c00173c0:	75 e5                	jne    c00173a7 <VgaText::clearScreen()+0x25>
c00173c2:	46                   	inc    esi
c00173c3:	eb db                	jmp    c00173a0 <VgaText::clearScreen()+0x1e>
c00173c5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00173cc:	5b                   	pop    ebx
c00173cd:	5e                   	pop    esi
c00173ce:	5f                   	pop    edi
c00173cf:	c3                   	ret    

c00173d0 <VgaText::setCursorX(int)>:
c00173d0:	83 ec 10             	sub    esp,0x10
c00173d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00173da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173de:	50                   	push   eax
c00173df:	e8 3c ff ff ff       	call   c0017320 <VgaText::setCursor(int, int)>
c00173e4:	83 c4 1c             	add    esp,0x1c
c00173e7:	c3                   	ret    

c00173e8 <VgaText::setCursorY(int)>:
c00173e8:	83 ec 10             	sub    esp,0x10
c00173eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00173f6:	50                   	push   eax
c00173f7:	e8 24 ff ff ff       	call   c0017320 <VgaText::setCursor(int, int)>
c00173fc:	83 c4 1c             	add    esp,0x1c
c00173ff:	c3                   	ret    

c0017400 <VgaText::incrementCursor(bool)>:
c0017400:	56                   	push   esi
c0017401:	53                   	push   ebx
c0017402:	51                   	push   ecx
c0017403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001740b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001740e:	40                   	inc    eax
c001740f:	83 f8 50             	cmp    eax,0x50
c0017412:	74 05                	je     c0017419 <VgaText::incrementCursor(bool)+0x19>
c0017414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017417:	eb 24                	jmp    c001743d <VgaText::incrementCursor(bool)+0x3d>
c0017419:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017420:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017423:	8d 50 01             	lea    edx,[eax+0x1]
c0017426:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017429:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001742c:	75 0f                	jne    c001743d <VgaText::incrementCursor(bool)+0x3d>
c001742e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017431:	83 ec 0c             	sub    esp,0xc
c0017434:	53                   	push   ebx
c0017435:	e8 a4 fd ff ff       	call   c00171de <VgaText::scrollScreen()>
c001743a:	83 c4 10             	add    esp,0x10
c001743d:	89 f0                	mov    eax,esi
c001743f:	84 c0                	test   al,al
c0017441:	74 0c                	je     c001744f <VgaText::incrementCursor(bool)+0x4f>
c0017443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017447:	5a                   	pop    edx
c0017448:	5b                   	pop    ebx
c0017449:	5e                   	pop    esi
c001744a:	e9 99 fc ff ff       	jmp    c00170e8 <VgaText::updateCursor()>
c001744f:	58                   	pop    eax
c0017450:	5b                   	pop    ebx
c0017451:	5e                   	pop    esi
c0017452:	c3                   	ret    
c0017453:	90                   	nop

c0017454 <VgaText::decrementCursor(bool)>:
c0017454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001745c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001745f:	85 c0                	test   eax,eax
c0017461:	74 04                	je     c0017467 <VgaText::decrementCursor(bool)+0x13>
c0017463:	48                   	dec    eax
c0017464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017467:	84 c9                	test   cl,cl
c0017469:	74 09                	je     c0017474 <VgaText::decrementCursor(bool)+0x20>
c001746b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001746f:	e9 74 fc ff ff       	jmp    c00170e8 <VgaText::updateCursor()>
c0017474:	c3                   	ret    
c0017475:	90                   	nop

c0017476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0017476:	53                   	push   ebx
c0017477:	83 ec 08             	sub    esp,0x8
c001747a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001747f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017483:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017487:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001748b:	83 f8 07             	cmp    eax,0x7
c001748e:	75 21                	jne    c00174b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0017490:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017498:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00174a0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00174a8:	83 c4 08             	add    esp,0x8
c00174ab:	5b                   	pop    ebx
c00174ac:	e9 d6 3a 00 00       	jmp    c001af87 <Krnl::beep(int, int, bool)>
c00174b1:	83 f8 0d             	cmp    eax,0xd
c00174b4:	75 09                	jne    c00174bf <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00174b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00174bd:	eb 2d                	jmp    c00174ec <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00174bf:	83 f8 0a             	cmp    eax,0xa
c00174c2:	75 31                	jne    c00174f5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00174c4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00174cb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00174ce:	8d 50 01             	lea    edx,[eax+0x1]
c00174d1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00174d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00174d7:	75 0f                	jne    c00174e8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00174d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00174dc:	83 ec 0c             	sub    esp,0xc
c00174df:	53                   	push   ebx
c00174e0:	e8 f9 fc ff ff       	call   c00171de <VgaText::scrollScreen()>
c00174e5:	83 c4 10             	add    esp,0x10
c00174e8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00174ec:	83 c4 08             	add    esp,0x8
c00174ef:	5b                   	pop    ebx
c00174f0:	e9 f3 fb ff ff       	jmp    c00170e8 <VgaText::updateCursor()>
c00174f5:	83 f8 08             	cmp    eax,0x8
c00174f8:	75 25                	jne    c001751f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00174fa:	50                   	push   eax
c00174fb:	50                   	push   eax
c00174fc:	6a 01                	push   0x1
c00174fe:	53                   	push   ebx
c00174ff:	e8 50 ff ff ff       	call   c0017454 <VgaText::decrementCursor(bool)>
c0017504:	5a                   	pop    edx
c0017505:	59                   	pop    ecx
c0017506:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017509:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001750c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001750f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017512:	6a 20                	push   0x20
c0017514:	53                   	push   ebx
c0017515:	e8 66 fd ff ff       	call   c0017280 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001751a:	83 c4 28             	add    esp,0x28
c001751d:	5b                   	pop    ebx
c001751e:	c3                   	ret    
c001751f:	83 ec 08             	sub    esp,0x8
c0017522:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017525:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017528:	51                   	push   ecx
c0017529:	52                   	push   edx
c001752a:	50                   	push   eax
c001752b:	53                   	push   ebx
c001752c:	e8 4f fd ff ff       	call   c0017280 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017531:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017535:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001753d:	83 c4 28             	add    esp,0x28
c0017540:	5b                   	pop    ebx
c0017541:	e9 ba fe ff ff       	jmp    c0017400 <VgaText::incrementCursor(bool)>

c0017546 <VgaText::putchar(char)>:
c0017546:	57                   	push   edi
c0017547:	56                   	push   esi
c0017548:	53                   	push   ebx
c0017549:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001754d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017551:	0f be c2             	movsx  eax,dl
c0017554:	83 f8 5b             	cmp    eax,0x5b
c0017557:	75 18                	jne    c0017571 <VgaText::putchar(char)+0x2b>
c0017559:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001755d:	74 20                	je     c001757f <VgaText::putchar(char)+0x39>
c001755f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017565:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001756c:	e9 b8 00 00 00       	jmp    c0017629 <VgaText::putchar(char)+0xe3>
c0017571:	83 f8 1b             	cmp    eax,0x1b
c0017574:	75 09                	jne    c001757f <VgaText::putchar(char)+0x39>
c0017576:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001757a:	e9 aa 00 00 00       	jmp    c0017629 <VgaText::putchar(char)+0xe3>
c001757f:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0017583:	89 f9                	mov    ecx,edi
c0017585:	84 c9                	test   cl,cl
c0017587:	0f 84 8c 00 00 00    	je     c0017619 <VgaText::putchar(char)+0xd3>
c001758d:	8d 4a c0             	lea    ecx,[edx-0x40]
c0017590:	80 f9 3e             	cmp    cl,0x3e
c0017593:	77 70                	ja     c0017605 <VgaText::putchar(char)+0xbf>
c0017595:	83 f8 6d             	cmp    eax,0x6d
c0017598:	75 3f                	jne    c00175d9 <VgaText::putchar(char)+0x93>
c001759a:	31 f6                	xor    esi,esi
c001759c:	31 d2                	xor    edx,edx
c001759e:	31 c0                	xor    eax,eax
c00175a0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00175a3:	7e 25                	jle    c00175ca <VgaText::putchar(char)+0x84>
c00175a5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00175aa:	83 fa 3b             	cmp    edx,0x3b
c00175ad:	75 0f                	jne    c00175be <VgaText::putchar(char)+0x78>
c00175af:	50                   	push   eax
c00175b0:	53                   	push   ebx
c00175b1:	e8 48 fb ff ff       	call   c00170fe <VgaText::doANSI_SGR(int)>
c00175b6:	31 d2                	xor    edx,edx
c00175b8:	59                   	pop    ecx
c00175b9:	58                   	pop    eax
c00175ba:	31 c0                	xor    eax,eax
c00175bc:	eb 09                	jmp    c00175c7 <VgaText::putchar(char)+0x81>
c00175be:	6b c0 0a             	imul   eax,eax,0xa
c00175c1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00175c5:	89 fa                	mov    edx,edi
c00175c7:	46                   	inc    esi
c00175c8:	eb d6                	jmp    c00175a0 <VgaText::putchar(char)+0x5a>
c00175ca:	84 d2                	test   dl,dl
c00175cc:	74 2f                	je     c00175fd <VgaText::putchar(char)+0xb7>
c00175ce:	50                   	push   eax
c00175cf:	53                   	push   ebx
c00175d0:	e8 29 fb ff ff       	call   c00170fe <VgaText::doANSI_SGR(int)>
c00175d5:	58                   	pop    eax
c00175d6:	5a                   	pop    edx
c00175d7:	eb 24                	jmp    c00175fd <VgaText::putchar(char)+0xb7>
c00175d9:	83 f8 4a             	cmp    eax,0x4a
c00175dc:	75 1f                	jne    c00175fd <VgaText::putchar(char)+0xb7>
c00175de:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00175e2:	75 19                	jne    c00175fd <VgaText::putchar(char)+0xb7>
c00175e4:	83 ec 0c             	sub    esp,0xc
c00175e7:	53                   	push   ebx
c00175e8:	e8 95 fd ff ff       	call   c0017382 <VgaText::clearScreen()>
c00175ed:	83 c4 0c             	add    esp,0xc
c00175f0:	6a 00                	push   0x0
c00175f2:	6a 00                	push   0x0
c00175f4:	53                   	push   ebx
c00175f5:	e8 26 fd ff ff       	call   c0017320 <VgaText::setCursor(int, int)>
c00175fa:	83 c4 10             	add    esp,0x10
c00175fd:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017603:	eb 24                	jmp    c0017629 <VgaText::putchar(char)+0xe3>
c0017605:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017608:	83 f8 0e             	cmp    eax,0xe
c001760b:	7f 1c                	jg     c0017629 <VgaText::putchar(char)+0xe3>
c001760d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017610:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017613:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0017617:	eb 10                	jmp    c0017629 <VgaText::putchar(char)+0xe3>
c0017619:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001761c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001761f:	50                   	push   eax
c0017620:	53                   	push   ebx
c0017621:	e8 50 fe ff ff       	call   c0017476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017626:	83 c4 10             	add    esp,0x10
c0017629:	5b                   	pop    ebx
c001762a:	5e                   	pop    esi
c001762b:	5f                   	pop    edi
c001762c:	c3                   	ret    
c001762d:	90                   	nop

c001762e <VgaText::putx(unsigned int)>:
c001762e:	57                   	push   edi
c001762f:	b9 11 00 00 00       	mov    ecx,0x11
c0017634:	56                   	push   esi
c0017635:	be 0a 18 03 c0       	mov    esi,0xc003180a
c001763a:	53                   	push   ebx
c001763b:	83 ec 20             	sub    esp,0x20
c001763e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017642:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017646:	fc                   	cld    
c0017647:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017649:	be 08 00 00 00       	mov    esi,0x8
c001764e:	50                   	push   eax
c001764f:	50                   	push   eax
c0017650:	89 d8                	mov    eax,ebx
c0017652:	c1 e8 1c             	shr    eax,0x1c
c0017655:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001765a:	c1 e3 04             	shl    ebx,0x4
c001765d:	50                   	push   eax
c001765e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017662:	e8 df fe ff ff       	call   c0017546 <VgaText::putchar(char)>
c0017667:	83 c4 10             	add    esp,0x10
c001766a:	4e                   	dec    esi
c001766b:	75 e1                	jne    c001764e <VgaText::putx(unsigned int)+0x20>
c001766d:	83 c4 20             	add    esp,0x20
c0017670:	5b                   	pop    ebx
c0017671:	5e                   	pop    esi
c0017672:	5f                   	pop    edi
c0017673:	c3                   	ret    

c0017674 <VgaText::puts(char const*)>:
c0017674:	53                   	push   ebx
c0017675:	83 ec 08             	sub    esp,0x8
c0017678:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001767c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001767f:	85 c0                	test   eax,eax
c0017681:	74 12                	je     c0017695 <VgaText::puts(char const*)+0x21>
c0017683:	51                   	push   ecx
c0017684:	43                   	inc    ebx
c0017685:	51                   	push   ecx
c0017686:	50                   	push   eax
c0017687:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001768b:	e8 b6 fe ff ff       	call   c0017546 <VgaText::putchar(char)>
c0017690:	83 c4 10             	add    esp,0x10
c0017693:	eb e7                	jmp    c001767c <VgaText::puts(char const*)+0x8>
c0017695:	83 c4 08             	add    esp,0x8
c0017698:	5b                   	pop    ebx
c0017699:	c3                   	ret    

c001769a <VgaText::write(unsigned long long, void*, int*)>:
c001769a:	55                   	push   ebp
c001769b:	57                   	push   edi
c001769c:	56                   	push   esi
c001769d:	53                   	push   ebx
c001769e:	83 ec 0c             	sub    esp,0xc
c00176a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00176a5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00176a9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00176ad:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00176b4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00176b7:	39 eb                	cmp    ebx,ebp
c00176b9:	74 13                	je     c00176ce <VgaText::write(unsigned long long, void*, int*)+0x34>
c00176bb:	50                   	push   eax
c00176bc:	43                   	inc    ebx
c00176bd:	50                   	push   eax
c00176be:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00176c2:	50                   	push   eax
c00176c3:	56                   	push   esi
c00176c4:	e8 7d fe ff ff       	call   c0017546 <VgaText::putchar(char)>
c00176c9:	83 c4 10             	add    esp,0x10
c00176cc:	eb e9                	jmp    c00176b7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00176ce:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00176d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176d9:	89 38                	mov    DWORD PTR [eax],edi
c00176db:	83 c4 0c             	add    esp,0xc
c00176de:	31 c0                	xor    eax,eax
c00176e0:	5b                   	pop    ebx
c00176e1:	5e                   	pop    esi
c00176e2:	5f                   	pop    edi
c00176e3:	5d                   	pop    ebp
c00176e4:	c3                   	ret    
c00176e5:	90                   	nop

c00176e6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00176e6:	55                   	push   ebp
c00176e7:	57                   	push   edi
c00176e8:	56                   	push   esi
c00176e9:	53                   	push   ebx
c00176ea:	83 ec 0c             	sub    esp,0xc
c00176ed:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00176f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00176f6:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c00176fd:	50                   	push   eax
c00176fe:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017703:	50                   	push   eax
c0017704:	e8 c3 fa ff ff       	call   c00171cc <VgaText::combineColours(unsigned char, unsigned char)>
c0017709:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001770d:	5a                   	pop    edx
c001770e:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017711:	59                   	pop    ecx
c0017712:	0f b6 f8             	movzx  edi,al
c0017715:	0f b7 db             	movzx  ebx,bx
c0017718:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001771c:	01 db                	add    ebx,ebx
c001771e:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017721:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017724:	85 c0                	test   eax,eax
c0017726:	0f 84 ef 00 00 00    	je     c001781b <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001772c:	83 f8 0d             	cmp    eax,0xd
c001772f:	75 0c                	jne    c001773d <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0017731:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017738:	e9 d8 00 00 00       	jmp    c0017815 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001773d:	83 f8 0a             	cmp    eax,0xa
c0017740:	75 44                	jne    c0017786 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0017742:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017749:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001774c:	8d 48 01             	lea    ecx,[eax+0x1]
c001774f:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0017752:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0017755:	75 0f                	jne    c0017766 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017757:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c001775a:	83 ec 0c             	sub    esp,0xc
c001775d:	55                   	push   ebp
c001775e:	e8 7b fa ff ff       	call   c00171de <VgaText::scrollScreen()>
c0017763:	83 c4 10             	add    esp,0x10
c0017766:	83 ec 0c             	sub    esp,0xc
c0017769:	55                   	push   ebp
c001776a:	e8 79 f9 ff ff       	call   c00170e8 <VgaText::updateCursor()>
c001776f:	83 c4 10             	add    esp,0x10
c0017772:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017776:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017779:	0f b7 db             	movzx  ebx,bx
c001777c:	01 db                	add    ebx,ebx
c001777e:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017781:	e9 8f 00 00 00       	jmp    c0017815 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017786:	83 f8 08             	cmp    eax,0x8
c0017789:	75 34                	jne    c00177bf <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001778b:	51                   	push   ecx
c001778c:	51                   	push   ecx
c001778d:	6a 01                	push   0x1
c001778f:	55                   	push   ebp
c0017790:	e8 bf fc ff ff       	call   c0017454 <VgaText::decrementCursor(bool)>
c0017795:	5b                   	pop    ebx
c0017796:	58                   	pop    eax
c0017797:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c001779a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c001779d:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00177a0:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c00177a3:	6a 20                	push   0x20
c00177a5:	55                   	push   ebp
c00177a6:	e8 d5 fa ff ff       	call   c0017280 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00177ab:	83 c4 20             	add    esp,0x20
c00177ae:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00177b2:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00177b5:	0f b7 db             	movzx  ebx,bx
c00177b8:	01 db                	add    ebx,ebx
c00177ba:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00177bd:	eb 56                	jmp    c0017815 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00177bf:	52                   	push   edx
c00177c0:	52                   	push   edx
c00177c1:	57                   	push   edi
c00177c2:	50                   	push   eax
c00177c3:	e8 a8 fa ff ff       	call   c0017270 <VgaText::combineCharAndColour(char, unsigned char)>
c00177c8:	83 c4 10             	add    esp,0x10
c00177cb:	66 89 03             	mov    WORD PTR [ebx],ax
c00177ce:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c00177d4:	75 1d                	jne    c00177f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00177d6:	83 ec 0c             	sub    esp,0xc
c00177d9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00177dc:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00177df:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00177e3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00177e7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00177ea:	50                   	push   eax
c00177eb:	e8 78 09 01 00       	call   c0028168 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00177f0:	83 c4 20             	add    esp,0x20
c00177f3:	50                   	push   eax
c00177f4:	83 c3 02             	add    ebx,0x2
c00177f7:	50                   	push   eax
c00177f8:	6a 00                	push   0x0
c00177fa:	55                   	push   ebp
c00177fb:	e8 00 fc ff ff       	call   c0017400 <VgaText::incrementCursor(bool)>
c0017800:	83 c4 10             	add    esp,0x10
c0017803:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0017807:	75 0c                	jne    c0017815 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017809:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001780d:	0f b7 db             	movzx  ebx,bx
c0017810:	01 db                	add    ebx,ebx
c0017812:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017815:	46                   	inc    esi
c0017816:	e9 06 ff ff ff       	jmp    c0017721 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001781b:	83 ec 0c             	sub    esp,0xc
c001781e:	55                   	push   ebp
c001781f:	e8 c4 f8 ff ff       	call   c00170e8 <VgaText::updateCursor()>
c0017824:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c001782b:	83 c4 1c             	add    esp,0x1c
c001782e:	5b                   	pop    ebx
c001782f:	5e                   	pop    esi
c0017830:	5f                   	pop    edi
c0017831:	5d                   	pop    ebp
c0017832:	c3                   	ret    
c0017833:	90                   	nop

c0017834 <VgaText::VgaText(char const*)>:
c0017834:	56                   	push   esi
c0017835:	53                   	push   ebx
c0017836:	83 ec 04             	sub    esp,0x4
c0017839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001783d:	83 ec 08             	sub    esp,0x8
c0017840:	6a 00                	push   0x0
c0017842:	50                   	push   eax
c0017843:	e8 26 05 00 00       	call   c0017d6e <UnixFile::UnixFile(int)>
c0017848:	83 c4 10             	add    esp,0x10
c001784b:	ba 30 18 03 c0       	mov    edx,0xc0031830
c0017850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017854:	89 10                	mov    DWORD PTR [eax],edx
c0017856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001785a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0017861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017865:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001786c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017870:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0017874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017878:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001787c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017880:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0017887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001788b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0017892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017896:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001789d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00178a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ac:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00178b3:	83 ec 0c             	sub    esp,0xc
c00178b6:	6a 01                	push   0x1
c00178b8:	e8 00 09 00 00       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	89 c2                	mov    edx,eax
c00178c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00178c9:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00178cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00178d6:	89 c6                	mov    esi,eax
c00178d8:	e8 ce f0 ff ff       	call   c00169ab <Phys::allocatePage()>
c00178dd:	68 05 0c 00 00       	push   0xc05
c00178e2:	56                   	push   esi
c00178e3:	50                   	push   eax
c00178e4:	53                   	push   ebx
c00178e5:	e8 dc 0f 00 00       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00178ea:	83 c4 10             	add    esp,0x10
c00178ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00178f4:	83 ec 04             	sub    esp,0x4
c00178f7:	68 a0 0f 00 00       	push   0xfa0
c00178fc:	6a 00                	push   0x0
c00178fe:	50                   	push   eax
c00178ff:	e8 ec 8b fe ff       	call   c00004f0 <memset>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	83 ec 04             	sub    esp,0x4
c001790a:	6a 00                	push   0x0
c001790c:	6a 07                	push   0x7
c001790e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017912:	e8 7b f8 ff ff       	call   c0017192 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017917:	83 c4 10             	add    esp,0x10
c001791a:	83 ec 04             	sub    esp,0x4
c001791d:	6a 00                	push   0x0
c001791f:	6a 00                	push   0x0
c0017921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017925:	e8 f6 f9 ff ff       	call   c0017320 <VgaText::setCursor(int, int)>
c001792a:	83 c4 10             	add    esp,0x10
c001792d:	83 ec 0c             	sub    esp,0xc
c0017930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017934:	e8 49 fa ff ff       	call   c0017382 <VgaText::clearScreen()>
c0017939:	83 c4 10             	add    esp,0x10
c001793c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017940:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017948:	05 82 00 00 00       	add    eax,0x82
c001794d:	83 ec 04             	sub    esp,0x4
c0017950:	68 80 00 00 00       	push   0x80
c0017955:	6a 00                	push   0x0
c0017957:	50                   	push   eax
c0017958:	e8 93 8b fe ff       	call   c00004f0 <memset>
c001795d:	83 c4 10             	add    esp,0x10
c0017960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017964:	05 02 01 00 00       	add    eax,0x102
c0017969:	83 ec 04             	sub    esp,0x4
c001796c:	68 80 00 00 00       	push   0x80
c0017971:	6a 00                	push   0x0
c0017973:	50                   	push   eax
c0017974:	e8 77 8b fe ff       	call   c00004f0 <memset>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	90                   	nop
c001797d:	83 c4 04             	add    esp,0x4
c0017980:	5b                   	pop    ebx
c0017981:	5e                   	pop    esi
c0017982:	c3                   	ret    
c0017983:	90                   	nop

c0017984 <VgaText::receiveKey(unsigned char)>:
c0017984:	55                   	push   ebp
c0017985:	57                   	push   edi
c0017986:	56                   	push   esi
c0017987:	53                   	push   ebx
c0017988:	83 ec 2c             	sub    esp,0x2c
c001798b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001798f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017993:	89 fd                	mov    ebp,edi
c0017995:	81 e5 ff 00 00 00    	and    ebp,0xff
c001799b:	0f 84 48 01 00 00    	je     c0017ae9 <VgaText::receiveKey(unsigned char)+0x165>
c00179a1:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00179a7:	83 fd 08             	cmp    ebp,0x8
c00179aa:	75 6a                	jne    c0017a16 <VgaText::receiveKey(unsigned char)+0x92>
c00179ac:	83 ec 0c             	sub    esp,0xc
c00179af:	56                   	push   esi
c00179b0:	e8 cb 8b fe ff       	call   c0000580 <strlen>
c00179b5:	83 c4 10             	add    esp,0x10
c00179b8:	85 c0                	test   eax,eax
c00179ba:	0f 84 ef 00 00 00    	je     c0017aaf <VgaText::receiveKey(unsigned char)+0x12b>
c00179c0:	50                   	push   eax
c00179c1:	50                   	push   eax
c00179c2:	6a 08                	push   0x8
c00179c4:	53                   	push   ebx
c00179c5:	e8 7c fb ff ff       	call   c0017546 <VgaText::putchar(char)>
c00179ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00179cd:	e8 ae 8b fe ff       	call   c0000580 <strlen>
c00179d2:	83 c4 10             	add    esp,0x10
c00179d5:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00179dd:	83 fa 1f             	cmp    edx,0x1f
c00179e0:	89 d0                	mov    eax,edx
c00179e2:	7f 1c                	jg     c0017a00 <VgaText::receiveKey(unsigned char)+0x7c>
c00179e4:	83 e8 08             	sub    eax,0x8
c00179e7:	3c 02                	cmp    al,0x2
c00179e9:	76 15                	jbe    c0017a00 <VgaText::receiveKey(unsigned char)+0x7c>
c00179eb:	83 fa 0d             	cmp    edx,0xd
c00179ee:	74 10                	je     c0017a00 <VgaText::receiveKey(unsigned char)+0x7c>
c00179f0:	57                   	push   edi
c00179f1:	57                   	push   edi
c00179f2:	68 1b 18 03 c0       	push   0xc003181b
c00179f7:	53                   	push   ebx
c00179f8:	e8 77 fc ff ff       	call   c0017674 <VgaText::puts(char const*)>
c00179fd:	83 c4 10             	add    esp,0x10
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	56                   	push   esi
c0017a04:	e8 77 8b fe ff       	call   c0000580 <strlen>
c0017a09:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017a11:	e9 96 00 00 00       	jmp    c0017aac <VgaText::receiveKey(unsigned char)+0x128>
c0017a16:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017a1c:	83 ec 0c             	sub    esp,0xc
c0017a1f:	50                   	push   eax
c0017a20:	e8 5b 8b fe ff       	call   c0000580 <strlen>
c0017a25:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a2c:	e8 4f 8b fe ff       	call   c0000580 <strlen>
c0017a31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a35:	83 c4 10             	add    esp,0x10
c0017a38:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017a3c:	3d 80 00 00 00       	cmp    eax,0x80
c0017a41:	0f 87 a2 00 00 00    	ja     c0017ae9 <VgaText::receiveKey(unsigned char)+0x165>
c0017a47:	8d 47 ff             	lea    eax,[edi-0x1]
c0017a4a:	3c 1e                	cmp    al,0x1e
c0017a4c:	77 35                	ja     c0017a83 <VgaText::receiveKey(unsigned char)+0xff>
c0017a4e:	8d 47 f7             	lea    eax,[edi-0x9]
c0017a51:	3c 01                	cmp    al,0x1
c0017a53:	76 2e                	jbe    c0017a83 <VgaText::receiveKey(unsigned char)+0xff>
c0017a55:	83 fd 0d             	cmp    ebp,0xd
c0017a58:	74 29                	je     c0017a83 <VgaText::receiveKey(unsigned char)+0xff>
c0017a5a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017a5d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017a60:	68 21 18 03 c0       	push   0xc0031821
c0017a65:	53                   	push   ebx
c0017a66:	e8 7b fc ff ff       	call   c00176e6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017a6b:	8d 47 40             	lea    eax,[edi+0x40]
c0017a6e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017a71:	0f b6 c0             	movzx  eax,al
c0017a74:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017a77:	50                   	push   eax
c0017a78:	53                   	push   ebx
c0017a79:	e8 f8 f9 ff ff       	call   c0017476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017a7e:	83 c4 20             	add    esp,0x20
c0017a81:	eb 11                	jmp    c0017a94 <VgaText::receiveKey(unsigned char)+0x110>
c0017a83:	51                   	push   ecx
c0017a84:	89 f8                	mov    eax,edi
c0017a86:	51                   	push   ecx
c0017a87:	0f be c0             	movsx  eax,al
c0017a8a:	50                   	push   eax
c0017a8b:	53                   	push   ebx
c0017a8c:	e8 b5 fa ff ff       	call   c0017546 <VgaText::putchar(char)>
c0017a91:	83 c4 10             	add    esp,0x10
c0017a94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a99:	89 f8                	mov    eax,edi
c0017a9b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017a9f:	52                   	push   edx
c0017aa0:	52                   	push   edx
c0017aa1:	8d 44 24 26          	lea    eax,[esp+0x26]
c0017aa5:	50                   	push   eax
c0017aa6:	56                   	push   esi
c0017aa7:	e8 c4 8d fe ff       	call   c0000870 <strcat>
c0017aac:	83 c4 10             	add    esp,0x10
c0017aaf:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0017ab6:	75 0f                	jne    c0017ac7 <VgaText::receiveKey(unsigned char)+0x143>
c0017ab8:	83 fd 1c             	cmp    ebp,0x1c
c0017abb:	77 2c                	ja     c0017ae9 <VgaText::receiveKey(unsigned char)+0x165>
c0017abd:	b8 08 04 00 10       	mov    eax,0x10000408
c0017ac2:	0f a3 e8             	bt     eax,ebp
c0017ac5:	73 22                	jae    c0017ae9 <VgaText::receiveKey(unsigned char)+0x165>
c0017ac7:	50                   	push   eax
c0017ac8:	81 c3 02 01 00 00    	add    ebx,0x102
c0017ace:	50                   	push   eax
c0017acf:	56                   	push   esi
c0017ad0:	53                   	push   ebx
c0017ad1:	e8 9a 8d fe ff       	call   c0000870 <strcat>
c0017ad6:	83 c4 0c             	add    esp,0xc
c0017ad9:	68 80 00 00 00       	push   0x80
c0017ade:	6a 00                	push   0x0
c0017ae0:	56                   	push   esi
c0017ae1:	e8 0a 8a fe ff       	call   c00004f0 <memset>
c0017ae6:	83 c4 10             	add    esp,0x10
c0017ae9:	83 c4 2c             	add    esp,0x2c
c0017aec:	5b                   	pop    ebx
c0017aed:	5e                   	pop    esi
c0017aee:	5f                   	pop    edi
c0017aef:	5d                   	pop    ebp
c0017af0:	c3                   	ret    
c0017af1:	90                   	nop

c0017af2 <VgaText::doUpdate()>:
c0017af2:	c3                   	ret    
c0017af3:	90                   	nop

c0017af4 <TSS::TSS()>:
c0017af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017af8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017aff:	90                   	nop
c0017b00:	c3                   	ret    
c0017b01:	90                   	nop
c0017b02:	66 90                	xchg   ax,ax

c0017b04 <TSS::setESP(unsigned long)>:
c0017b04:	55                   	push   ebp
c0017b05:	89 e5                	mov    ebp,esp
c0017b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b0d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b10:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b13:	90                   	nop
c0017b14:	5d                   	pop    ebp
c0017b15:	c3                   	ret    
c0017b16:	66 90                	xchg   ax,ax

c0017b18 <TSS::flush()>:
c0017b18:	55                   	push   ebp
c0017b19:	89 e5                	mov    ebp,esp
c0017b1b:	83 ec 10             	sub    esp,0x10
c0017b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b23:	83 c8 03             	or     eax,0x3
c0017b26:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017b2a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017b2e:	66 89 d0             	mov    ax,dx
c0017b31:	0f 00 d8             	ltr    ax
c0017b34:	90                   	nop
c0017b35:	c9                   	leave  
c0017b36:	c3                   	ret    
c0017b37:	90                   	nop

c0017b38 <TSS::setup(unsigned long, unsigned long)>:
c0017b38:	55                   	push   ebp
c0017b39:	89 e5                	mov    ebp,esp
c0017b3b:	83 ec 18             	sub    esp,0x18
c0017b3e:	83 ec 0c             	sub    esp,0xc
c0017b41:	6a 68                	push   0x68
c0017b43:	e8 54 eb ff ff       	call   c001669c <malloc>
c0017b48:	83 c4 10             	add    esp,0x10
c0017b4b:	89 c2                	mov    edx,eax
c0017b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b50:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b59:	83 ec 04             	sub    esp,0x4
c0017b5c:	6a 68                	push   0x68
c0017b5e:	6a 00                	push   0x0
c0017b60:	50                   	push   eax
c0017b61:	e8 8a 89 fe ff       	call   c00004f0 <memset>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b6f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b7b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b8a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b93:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b9f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ba8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bab:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017bb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bb7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bc3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bcf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bdb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017bde:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017be4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017be7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017bea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bf3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c00:	0f 20 da             	mov    edx,cr3
c0017c03:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017c06:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017c09:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017c0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c12:	83 ec 08             	sub    esp,0x8
c0017c15:	50                   	push   eax
c0017c16:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017c19:	50                   	push   eax
c0017c1a:	e8 6f e2 ff ff       	call   c0015e8e <GDTEntry::setBase(unsigned int)>
c0017c1f:	83 c4 10             	add    esp,0x10
c0017c22:	83 ec 08             	sub    esp,0x8
c0017c25:	6a 68                	push   0x68
c0017c27:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017c2a:	50                   	push   eax
c0017c2b:	e8 7a e2 ff ff       	call   c0015eaa <GDTEntry::setLimit(unsigned int)>
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017c37:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017c3a:	83 e0 0f             	and    eax,0xf
c0017c3d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017c40:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017c43:	83 c8 40             	or     eax,0x40
c0017c46:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017c49:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017c4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c54:	05 78 01 00 00       	add    eax,0x178
c0017c59:	83 ec 04             	sub    esp,0x4
c0017c5c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017c5f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017c62:	50                   	push   eax
c0017c63:	e8 76 e2 ff ff       	call   c0015ede <GDT::addEntry(GDTEntry)>
c0017c68:	83 c4 10             	add    esp,0x10
c0017c6b:	89 c2                	mov    edx,eax
c0017c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c70:	89 10                	mov    DWORD PTR [eax],edx
c0017c72:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017c77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c7d:	05 78 01 00 00       	add    eax,0x178
c0017c82:	83 ec 0c             	sub    esp,0xc
c0017c85:	50                   	push   eax
c0017c86:	e8 7d e2 ff ff       	call   c0015f08 <GDT::flush()>
c0017c8b:	83 c4 10             	add    esp,0x10
c0017c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c93:	c9                   	leave  
c0017c94:	c3                   	ret    
c0017c95:	90                   	nop

c0017c96 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ca1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017ca6:	75 08                	jne    c0017cb0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017ca8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017cae:	eb 38                	jmp    c0017ce8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017cb0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017cb5:	75 17                	jne    c0017cce <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017cb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cbf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0017cc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ccb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017cce:	89 c1                	mov    ecx,eax
c0017cd0:	83 e1 fd             	and    ecx,0xfffffffd
c0017cd3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017cd9:	74 cd                	je     c0017ca8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017cdb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017ce0:	83 e0 ef             	and    eax,0xffffffef
c0017ce3:	83 f8 08             	cmp    eax,0x8
c0017ce6:	76 c0                	jbe    c0017ca8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017ce8:	31 c0                	xor    eax,eax
c0017cea:	c3                   	ret    
c0017ceb:	90                   	nop

c0017cec <ReservedFilename::isAtty()>:
c0017cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017cf3:	31 c0                	xor    eax,eax
c0017cf5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017cfb:	74 09                	je     c0017d06 <ReservedFilename::isAtty()+0x1a>
c0017cfd:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017d03:	0f 94 c0             	sete   al
c0017d06:	c3                   	ret    
c0017d07:	90                   	nop

c0017d08 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017d10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d17:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017d1c:	75 08                	jne    c0017d26 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017d1e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017d24:	eb 3d                	jmp    c0017d63 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017d26:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017d2b:	75 17                	jne    c0017d44 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017d2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0017d3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d41:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017d44:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017d49:	75 04                	jne    c0017d4f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017d4b:	89 0a                	mov    DWORD PTR [edx],ecx
c0017d4d:	eb 14                	jmp    c0017d63 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017d4f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017d54:	74 c8                	je     c0017d1e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017d56:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017d5b:	83 e0 ef             	and    eax,0xffffffef
c0017d5e:	83 f8 08             	cmp    eax,0x8
c0017d61:	76 bb                	jbe    c0017d1e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017d63:	31 c0                	xor    eax,eax
c0017d65:	c3                   	ret    

c0017d66 <UnixFile::getFileDescriptor()>:
c0017d66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d6d:	c3                   	ret    

c0017d6e <UnixFile::UnixFile(int)>:
c0017d6e:	53                   	push   ebx
c0017d6f:	83 ec 28             	sub    esp,0x28
c0017d72:	ba f8 18 03 c0       	mov    edx,0xc00318f8
c0017d77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d7b:	89 10                	mov    DWORD PTR [eax],edx
c0017d7d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017d85:	0f 8f 90 01 00 00    	jg     c0017f1b <UnixFile::UnixFile(int)+0x1ad>
c0017d8b:	a1 00 43 03 c0       	mov    eax,ds:0xc0034300
c0017d90:	8d 50 01             	lea    edx,[eax+0x1]
c0017d93:	89 15 00 43 03 c0    	mov    DWORD PTR ds:0xc0034300,edx
c0017d99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d9d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017da0:	83 ec 08             	sub    esp,0x8
c0017da3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017da7:	68 98 aa 03 c0       	push   0xc003aa98
c0017dac:	e8 b7 70 01 00       	call   c002ee68 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017db1:	83 c4 10             	add    esp,0x10
c0017db4:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017db9:	83 f0 01             	xor    eax,0x1
c0017dbc:	0f b6 c0             	movzx  eax,al
c0017dbf:	85 c0                	test   eax,eax
c0017dc1:	0f 84 55 01 00 00    	je     c0017f1c <UnixFile::UnixFile(int)+0x1ae>
c0017dc7:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017dce:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017dd6:	83 ec 0c             	sub    esp,0xc
c0017dd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ddd:	e8 ba e8 ff ff       	call   c001669c <malloc>
c0017de2:	83 c4 10             	add    esp,0x10
c0017de5:	89 c3                	mov    ebx,eax
c0017de7:	83 ec 08             	sub    esp,0x8
c0017dea:	68 03 ff ff 0f       	push   0xfffff03
c0017def:	53                   	push   ebx
c0017df0:	e8 2d 01 00 00       	call   c0017f22 <ReservedFilename::ReservedFilename(int)>
c0017df5:	83 c4 10             	add    esp,0x10
c0017df8:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017dfe:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017e06:	83 ec 0c             	sub    esp,0xc
c0017e09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e0d:	e8 8a e8 ff ff       	call   c001669c <malloc>
c0017e12:	83 c4 10             	add    esp,0x10
c0017e15:	89 c3                	mov    ebx,eax
c0017e17:	83 ec 08             	sub    esp,0x8
c0017e1a:	68 01 ff ff 0f       	push   0xfffff01
c0017e1f:	53                   	push   ebx
c0017e20:	e8 fd 00 00 00       	call   c0017f22 <ReservedFilename::ReservedFilename(int)>
c0017e25:	83 c4 10             	add    esp,0x10
c0017e28:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017e2e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017e36:	83 ec 0c             	sub    esp,0xc
c0017e39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e3d:	e8 5a e8 ff ff       	call   c001669c <malloc>
c0017e42:	83 c4 10             	add    esp,0x10
c0017e45:	89 c3                	mov    ebx,eax
c0017e47:	83 ec 08             	sub    esp,0x8
c0017e4a:	68 00 ff ff 0f       	push   0xfffff00
c0017e4f:	53                   	push   ebx
c0017e50:	e8 cd 00 00 00       	call   c0017f22 <ReservedFilename::ReservedFilename(int)>
c0017e55:	83 c4 10             	add    esp,0x10
c0017e58:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017e5e:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017e66:	83 ec 0c             	sub    esp,0xc
c0017e69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017e6d:	e8 2a e8 ff ff       	call   c001669c <malloc>
c0017e72:	83 c4 10             	add    esp,0x10
c0017e75:	89 c3                	mov    ebx,eax
c0017e77:	83 ec 08             	sub    esp,0x8
c0017e7a:	68 02 ff ff 0f       	push   0xfffff02
c0017e7f:	53                   	push   ebx
c0017e80:	e8 9d 00 00 00       	call   c0017f22 <ReservedFilename::ReservedFilename(int)>
c0017e85:	83 c4 10             	add    esp,0x10
c0017e88:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017e8e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017e96:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017e9b:	7f 7f                	jg     c0017f1c <UnixFile::UnixFile(int)+0x1ae>
c0017e9d:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017ea5:	83 ec 0c             	sub    esp,0xc
c0017ea8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017eac:	e8 eb e7 ff ff       	call   c001669c <malloc>
c0017eb1:	83 c4 10             	add    esp,0x10
c0017eb4:	89 c3                	mov    ebx,eax
c0017eb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eba:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017ebf:	83 ec 08             	sub    esp,0x8
c0017ec2:	50                   	push   eax
c0017ec3:	53                   	push   ebx
c0017ec4:	e8 59 00 00 00       	call   c0017f22 <ReservedFilename::ReservedFilename(int)>
c0017ec9:	83 c4 10             	add    esp,0x10
c0017ecc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ed0:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017ed7:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017edf:	83 ec 0c             	sub    esp,0xc
c0017ee2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ee6:	e8 b1 e7 ff ff       	call   c001669c <malloc>
c0017eeb:	83 c4 10             	add    esp,0x10
c0017eee:	89 c3                	mov    ebx,eax
c0017ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ef4:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017ef9:	83 ec 08             	sub    esp,0x8
c0017efc:	50                   	push   eax
c0017efd:	53                   	push   ebx
c0017efe:	e8 1f 00 00 00       	call   c0017f22 <ReservedFilename::ReservedFilename(int)>
c0017f03:	83 c4 10             	add    esp,0x10
c0017f06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f0a:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017f11:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017f16:	e9 7b ff ff ff       	jmp    c0017e96 <UnixFile::UnixFile(int)+0x128>
c0017f1b:	90                   	nop
c0017f1c:	83 c4 28             	add    esp,0x28
c0017f1f:	5b                   	pop    ebx
c0017f20:	c3                   	ret    
c0017f21:	90                   	nop

c0017f22 <ReservedFilename::ReservedFilename(int)>:
c0017f22:	83 ec 0c             	sub    esp,0xc
c0017f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f29:	83 ec 08             	sub    esp,0x8
c0017f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f30:	50                   	push   eax
c0017f31:	e8 38 fe ff ff       	call   c0017d6e <UnixFile::UnixFile(int)>
c0017f36:	83 c4 10             	add    esp,0x10
c0017f39:	ba 14 19 03 c0       	mov    edx,0xc0031914
c0017f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f42:	89 10                	mov    DWORD PTR [eax],edx
c0017f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017f4c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017f4f:	90                   	nop
c0017f50:	83 c4 0c             	add    esp,0xc
c0017f53:	c3                   	ret    

c0017f54 <UnixFile::~UnixFile()>:
c0017f54:	83 ec 1c             	sub    esp,0x1c
c0017f57:	ba f8 18 03 c0       	mov    edx,0xc00318f8
c0017f5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f60:	89 10                	mov    DWORD PTR [eax],edx
c0017f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f69:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017f6e:	7f 76                	jg     c0017fe6 <UnixFile::~UnixFile()+0x92>
c0017f70:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f78:	83 ec 0c             	sub    esp,0xc
c0017f7b:	68 98 aa 03 c0       	push   0xc003aa98
c0017f80:	e8 b7 6f 01 00       	call   c002ef3c <LinkedList<UnixFile>::getFirstElement()>
c0017f85:	83 c4 10             	add    esp,0x10
c0017f88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f8c:	83 ec 0c             	sub    esp,0xc
c0017f8f:	68 98 aa 03 c0       	push   0xc003aa98
c0017f94:	e8 ab 6f 01 00       	call   c002ef44 <LinkedList<UnixFile>::removeFirst()>
c0017f99:	83 c4 10             	add    esp,0x10
c0017f9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fa0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017fa4:	74 43                	je     c0017fe9 <UnixFile::~UnixFile()+0x95>
c0017fa6:	83 ec 08             	sub    esp,0x8
c0017fa9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017fad:	68 98 aa 03 c0       	push   0xc003aa98
c0017fb2:	e8 b1 6e 01 00       	call   c002ee68 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017fb7:	83 c4 10             	add    esp,0x10
c0017fba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fbe:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017fc5:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017fca:	0f 94 c0             	sete   al
c0017fcd:	0f b6 c0             	movzx  eax,al
c0017fd0:	85 c0                	test   eax,eax
c0017fd2:	74 a4                	je     c0017f78 <UnixFile::~UnixFile()+0x24>
c0017fd4:	83 ec 0c             	sub    esp,0xc
c0017fd7:	68 d0 18 03 c0       	push   0xc00318d0
c0017fdc:	e8 b5 85 00 00       	call   c0020596 <KePanic(char const*)>
c0017fe1:	83 c4 10             	add    esp,0x10
c0017fe4:	eb 92                	jmp    c0017f78 <UnixFile::~UnixFile()+0x24>
c0017fe6:	90                   	nop
c0017fe7:	eb 01                	jmp    c0017fea <UnixFile::~UnixFile()+0x96>
c0017fe9:	90                   	nop
c0017fea:	90                   	nop
c0017feb:	83 c4 1c             	add    esp,0x1c
c0017fee:	c3                   	ret    
c0017fef:	90                   	nop

c0017ff0 <UnixFile::~UnixFile()>:
c0017ff0:	83 ec 0c             	sub    esp,0xc
c0017ff3:	83 ec 0c             	sub    esp,0xc
c0017ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ffa:	e8 55 ff ff ff       	call   c0017f54 <UnixFile::~UnixFile()>
c0017fff:	83 c4 10             	add    esp,0x10
c0018002:	83 ec 08             	sub    esp,0x8
c0018005:	6a 0c                	push   0xc
c0018007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001800b:	e8 c4 13 00 00       	call   c00193d4 <operator delete(void*, unsigned long)>
c0018010:	83 c4 10             	add    esp,0x10
c0018013:	83 c4 0c             	add    esp,0xc
c0018016:	c3                   	ret    
c0018017:	90                   	nop

c0018018 <ReservedFilename::~ReservedFilename()>:
c0018018:	83 ec 0c             	sub    esp,0xc
c001801b:	ba 14 19 03 c0       	mov    edx,0xc0031914
c0018020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018024:	89 10                	mov    DWORD PTR [eax],edx
c0018026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001802a:	83 ec 0c             	sub    esp,0xc
c001802d:	50                   	push   eax
c001802e:	e8 21 ff ff ff       	call   c0017f54 <UnixFile::~UnixFile()>
c0018033:	83 c4 10             	add    esp,0x10
c0018036:	90                   	nop
c0018037:	83 c4 0c             	add    esp,0xc
c001803a:	c3                   	ret    
c001803b:	90                   	nop

c001803c <ReservedFilename::~ReservedFilename()>:
c001803c:	83 ec 0c             	sub    esp,0xc
c001803f:	83 ec 0c             	sub    esp,0xc
c0018042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018046:	e8 cd ff ff ff       	call   c0018018 <ReservedFilename::~ReservedFilename()>
c001804b:	83 c4 10             	add    esp,0x10
c001804e:	83 ec 08             	sub    esp,0x8
c0018051:	6a 0c                	push   0xc
c0018053:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018057:	e8 78 13 00 00       	call   c00193d4 <operator delete(void*, unsigned long)>
c001805c:	83 c4 10             	add    esp,0x10
c001805f:	83 c4 0c             	add    esp,0xc
c0018062:	c3                   	ret    

c0018063 <KeGetFileFromDescriptor(int)>:
c0018063:	53                   	push   ebx
c0018064:	83 ec 08             	sub    esp,0x8
c0018067:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001806b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0018071:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0018077:	7f 2c                	jg     c00180a5 <KeGetFileFromDescriptor(int)+0x42>
c0018079:	83 ec 0c             	sub    esp,0xc
c001807c:	68 98 aa 03 c0       	push   0xc003aa98
c0018081:	e8 b6 6e 01 00       	call   c002ef3c <LinkedList<UnixFile>::getFirstElement()>
c0018086:	83 c4 10             	add    esp,0x10
c0018089:	85 c0                	test   eax,eax
c001808b:	75 04                	jne    c0018091 <KeGetFileFromDescriptor(int)+0x2e>
c001808d:	31 c0                	xor    eax,eax
c001808f:	eb 6e                	jmp    c00180ff <KeGetFileFromDescriptor(int)+0x9c>
c0018091:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0018094:	74 69                	je     c00180ff <KeGetFileFromDescriptor(int)+0x9c>
c0018096:	52                   	push   edx
c0018097:	52                   	push   edx
c0018098:	50                   	push   eax
c0018099:	68 98 aa 03 c0       	push   0xc003aa98
c001809e:	e8 43 6f 01 00       	call   c002efe6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00180a3:	eb e1                	jmp    c0018086 <KeGetFileFromDescriptor(int)+0x23>
c00180a5:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00180ab:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c00180b0:	74 4d                	je     c00180ff <KeGetFileFromDescriptor(int)+0x9c>
c00180b2:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00180b8:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c00180bd:	74 40                	je     c00180ff <KeGetFileFromDescriptor(int)+0x9c>
c00180bf:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00180c5:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c00180ca:	74 33                	je     c00180ff <KeGetFileFromDescriptor(int)+0x9c>
c00180cc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00180d2:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c00180d7:	74 26                	je     c00180ff <KeGetFileFromDescriptor(int)+0x9c>
c00180d9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00180df:	83 f8 08             	cmp    eax,0x8
c00180e2:	77 09                	ja     c00180ed <KeGetFileFromDescriptor(int)+0x8a>
c00180e4:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c00180eb:	eb 12                	jmp    c00180ff <KeGetFileFromDescriptor(int)+0x9c>
c00180ed:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00180f3:	83 fb 08             	cmp    ebx,0x8
c00180f6:	77 95                	ja     c001808d <KeGetFileFromDescriptor(int)+0x2a>
c00180f8:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c00180ff:	83 c4 08             	add    esp,0x8
c0018102:	5b                   	pop    ebx
c0018103:	c3                   	ret    

c0018104 <__static_initialization_and_destruction_0(int, int)>:
c0018104:	83 ec 0c             	sub    esp,0xc
c0018107:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001810c:	75 34                	jne    c0018142 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001810e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018116:	75 2a                	jne    c0018142 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0018118:	83 ec 0c             	sub    esp,0xc
c001811b:	68 98 aa 03 c0       	push   0xc003aa98
c0018120:	e8 01 6d 01 00       	call   c002ee26 <LinkedList<UnixFile>::LinkedList()>
c0018125:	83 c4 10             	add    esp,0x10
c0018128:	83 ec 04             	sub    esp,0x4
c001812b:	68 78 42 03 c0       	push   0xc0034278
c0018130:	68 98 aa 03 c0       	push   0xc003aa98
c0018135:	68 24 ee 02 c0       	push   0xc002ee24
c001813a:	e8 45 12 00 00       	call   c0019384 <__cxa_atexit>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	90                   	nop
c0018143:	83 c4 0c             	add    esp,0xc
c0018146:	c3                   	ret    

c0018147 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0018147:	83 ec 0c             	sub    esp,0xc
c001814a:	83 ec 08             	sub    esp,0x8
c001814d:	68 ff ff 00 00       	push   0xffff
c0018152:	6a 01                	push   0x1
c0018154:	e8 ab ff ff ff       	call   c0018104 <__static_initialization_and_destruction_0(int, int)>
c0018159:	83 c4 10             	add    esp,0x10
c001815c:	83 c4 0c             	add    esp,0xc
c001815f:	c3                   	ret    

c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0018160:	53                   	push   ebx
c0018161:	8b 15 08 43 03 c0    	mov    edx,DWORD PTR ds:0xc0034308
c0018167:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001816b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001816f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0018175:	89 d8                	mov    eax,ebx
c0018177:	d1 e8                	shr    eax,1
c0018179:	01 d0                	add    eax,edx
c001817b:	80 e3 01             	and    bl,0x1
c001817e:	8a 10                	mov    dl,BYTE PTR [eax]
c0018180:	75 09                	jne    c001818b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0018182:	83 e2 f0             	and    edx,0xfffffff0
c0018185:	09 ca                	or     edx,ecx
c0018187:	88 10                	mov    BYTE PTR [eax],dl
c0018189:	5b                   	pop    ebx
c001818a:	c3                   	ret    
c001818b:	0f b6 c9             	movzx  ecx,cl
c001818e:	83 e2 0f             	and    edx,0xf
c0018191:	c1 e1 04             	shl    ecx,0x4
c0018194:	09 ca                	or     edx,ecx
c0018196:	88 10                	mov    BYTE PTR [eax],dl
c0018198:	5b                   	pop    ebx
c0018199:	c3                   	ret    

c001819a <Virt::getPageState(unsigned long)>:
c001819a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001819e:	8b 0d 08 43 03 c0    	mov    ecx,DWORD PTR ds:0xc0034308
c00181a4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00181aa:	89 d0                	mov    eax,edx
c00181ac:	d1 e8                	shr    eax,1
c00181ae:	80 e2 01             	and    dl,0x1
c00181b1:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00181b4:	74 03                	je     c00181b9 <Virt::getPageState(unsigned long)+0x1f>
c00181b6:	c1 e8 04             	shr    eax,0x4
c00181b9:	83 e0 0f             	and    eax,0xf
c00181bc:	c3                   	ret    

c00181bd <Virt::allocateKernelVirtualPages(int)>:
c00181bd:	55                   	push   ebp
c00181be:	57                   	push   edi
c00181bf:	56                   	push   esi
c00181c0:	31 f6                	xor    esi,esi
c00181c2:	53                   	push   ebx
c00181c3:	31 db                	xor    ebx,ebx
c00181c5:	83 ec 1c             	sub    esp,0x1c
c00181c8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00181cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00181d1:	8b 2d 04 43 03 c0    	mov    ebp,DWORD PTR ds:0xc0034304
c00181d7:	55                   	push   ebp
c00181d8:	e8 bd ff ff ff       	call   c001819a <Virt::getPageState(unsigned long)>
c00181dd:	5a                   	pop    edx
c00181de:	84 c0                	test   al,al
c00181e0:	75 3d                	jne    c001821f <Virt::allocateKernelVirtualPages(int)+0x62>
c00181e2:	85 db                	test   ebx,ebx
c00181e4:	0f 44 f5             	cmove  esi,ebp
c00181e7:	83 c3 01             	add    ebx,0x1
c00181ea:	39 fb                	cmp    ebx,edi
c00181ec:	74 5e                	je     c001824c <Virt::allocateKernelVirtualPages(int)+0x8f>
c00181ee:	83 c5 01             	add    ebp,0x1
c00181f1:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00181f7:	76 33                	jbe    c001822c <Virt::allocateKernelVirtualPages(int)+0x6f>
c00181f9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00181fe:	c7 05 04 43 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0034304,0xc8000
c0018208:	75 2a                	jne    c0018234 <Virt::allocateKernelVirtualPages(int)+0x77>
c001820a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001820f:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0018214:	55                   	push   ebp
c0018215:	e8 80 ff ff ff       	call   c001819a <Virt::getPageState(unsigned long)>
c001821a:	5a                   	pop    edx
c001821b:	84 c0                	test   al,al
c001821d:	74 c3                	je     c00181e2 <Virt::allocateKernelVirtualPages(int)+0x25>
c001821f:	83 c5 01             	add    ebp,0x1
c0018222:	31 db                	xor    ebx,ebx
c0018224:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001822a:	77 cd                	ja     c00181f9 <Virt::allocateKernelVirtualPages(int)+0x3c>
c001822c:	89 2d 04 43 03 c0    	mov    DWORD PTR ds:0xc0034304,ebp
c0018232:	eb a3                	jmp    c00181d7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0018234:	83 ec 0c             	sub    esp,0xc
c0018237:	68 28 19 03 c0       	push   0xc0031928
c001823c:	e8 55 83 00 00       	call   c0020596 <KePanic(char const*)>
c0018241:	8b 2d 04 43 03 c0    	mov    ebp,DWORD PTR ds:0xc0034304
c0018247:	83 c4 10             	add    esp,0x10
c001824a:	eb 8b                	jmp    c00181d7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001824c:	89 35 04 43 03 c0    	mov    DWORD PTR ds:0xc0034304,esi
c0018252:	83 fb 01             	cmp    ebx,0x1
c0018255:	74 63                	je     c00182ba <Virt::allocateKernelVirtualPages(int)+0xfd>
c0018257:	85 ff                	test   edi,edi
c0018259:	74 41                	je     c001829c <Virt::allocateKernelVirtualPages(int)+0xdf>
c001825b:	89 f0                	mov    eax,esi
c001825d:	31 db                	xor    ebx,ebx
c001825f:	8d 6f ff             	lea    ebp,[edi-0x1]
c0018262:	eb 16                	jmp    c001827a <Virt::allocateKernelVirtualPages(int)+0xbd>
c0018264:	6a 01                	push   0x1
c0018266:	83 c3 01             	add    ebx,0x1
c0018269:	50                   	push   eax
c001826a:	e8 f1 fe ff ff       	call   c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001826f:	39 fb                	cmp    ebx,edi
c0018271:	58                   	pop    eax
c0018272:	5a                   	pop    edx
c0018273:	74 27                	je     c001829c <Virt::allocateKernelVirtualPages(int)+0xdf>
c0018275:	a1 04 43 03 c0       	mov    eax,ds:0xc0034304
c001827a:	8d 50 01             	lea    edx,[eax+0x1]
c001827d:	85 db                	test   ebx,ebx
c001827f:	89 15 04 43 03 c0    	mov    DWORD PTR ds:0xc0034304,edx
c0018285:	74 22                	je     c00182a9 <Virt::allocateKernelVirtualPages(int)+0xec>
c0018287:	39 dd                	cmp    ebp,ebx
c0018289:	75 d9                	jne    c0018264 <Virt::allocateKernelVirtualPages(int)+0xa7>
c001828b:	6a 03                	push   0x3
c001828d:	83 c3 01             	add    ebx,0x1
c0018290:	50                   	push   eax
c0018291:	e8 ca fe ff ff       	call   c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018296:	39 fb                	cmp    ebx,edi
c0018298:	59                   	pop    ecx
c0018299:	58                   	pop    eax
c001829a:	75 d9                	jne    c0018275 <Virt::allocateKernelVirtualPages(int)+0xb8>
c001829c:	83 c4 1c             	add    esp,0x1c
c001829f:	89 f0                	mov    eax,esi
c00182a1:	5b                   	pop    ebx
c00182a2:	c1 e0 0c             	shl    eax,0xc
c00182a5:	5e                   	pop    esi
c00182a6:	5f                   	pop    edi
c00182a7:	5d                   	pop    ebp
c00182a8:	c3                   	ret    
c00182a9:	6a 02                	push   0x2
c00182ab:	bb 01 00 00 00       	mov    ebx,0x1
c00182b0:	50                   	push   eax
c00182b1:	e8 aa fe ff ff       	call   c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182b6:	58                   	pop    eax
c00182b7:	5a                   	pop    edx
c00182b8:	eb bb                	jmp    c0018275 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00182ba:	6a 04                	push   0x4
c00182bc:	56                   	push   esi
c00182bd:	8d 46 01             	lea    eax,[esi+0x1]
c00182c0:	a3 04 43 03 c0       	mov    ds:0xc0034304,eax
c00182c5:	e8 96 fe ff ff       	call   c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182ca:	89 f0                	mov    eax,esi
c00182cc:	59                   	pop    ecx
c00182cd:	c1 e0 0c             	shl    eax,0xc
c00182d0:	5b                   	pop    ebx
c00182d1:	83 c4 1c             	add    esp,0x1c
c00182d4:	5b                   	pop    ebx
c00182d5:	5e                   	pop    esi
c00182d6:	5f                   	pop    edi
c00182d7:	5d                   	pop    ebp
c00182d8:	c3                   	ret    

c00182d9 <Virt::freeSwapfilePage(unsigned long)>:
c00182d9:	53                   	push   ebx
c00182da:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c00182e0:	b8 01 00 00 00       	mov    eax,0x1
c00182e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00182e9:	d3 e0                	shl    eax,cl
c00182eb:	89 cb                	mov    ebx,ecx
c00182ed:	c1 eb 05             	shr    ebx,0x5
c00182f0:	f7 d0                	not    eax
c00182f2:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00182f5:	21 c1                	and    ecx,eax
c00182f7:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00182fa:	5b                   	pop    ebx
c00182fb:	c3                   	ret    

c00182fc <Virt::swapIDToSector(unsigned long)>:
c00182fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018300:	8b 15 0c 43 03 c0    	mov    edx,DWORD PTR ds:0xc003430c
c0018306:	8b 0d 14 43 03 c0    	mov    ecx,DWORD PTR ds:0xc0034314
c001830c:	0f af c2             	imul   eax,edx
c001830f:	01 c8                	add    eax,ecx
c0018311:	c3                   	ret    

c0018312 <Virt::allocateSwapfilePage()>:
c0018312:	55                   	push   ebp
c0018313:	31 d2                	xor    edx,edx
c0018315:	57                   	push   edi
c0018316:	56                   	push   esi
c0018317:	53                   	push   ebx
c0018318:	83 ec 0c             	sub    esp,0xc
c001831b:	8b 1d 10 43 03 c0    	mov    ebx,DWORD PTR ds:0xc0034310
c0018321:	8b 0d 0c 43 03 c0    	mov    ecx,DWORD PTR ds:0xc003430c
c0018327:	89 d8                	mov    eax,ebx
c0018329:	f7 f1                	div    ecx
c001832b:	39 cb                	cmp    ebx,ecx
c001832d:	72 2f                	jb     c001835e <Virt::allocateSwapfilePage()+0x4c>
c001832f:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0018335:	8b 16                	mov    edx,DWORD PTR [esi]
c0018337:	f6 c2 01             	test   dl,0x1
c001833a:	74 3e                	je     c001837a <Virt::allocateSwapfilePage()+0x68>
c001833c:	31 c9                	xor    ecx,ecx
c001833e:	bf 01 00 00 00       	mov    edi,0x1
c0018343:	eb 12                	jmp    c0018357 <Virt::allocateSwapfilePage()+0x45>
c0018345:	89 ca                	mov    edx,ecx
c0018347:	89 fd                	mov    ebp,edi
c0018349:	c1 ea 05             	shr    edx,0x5
c001834c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001834f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018351:	d3 e5                	shl    ebp,cl
c0018353:	85 ea                	test   edx,ebp
c0018355:	74 2c                	je     c0018383 <Virt::allocateSwapfilePage()+0x71>
c0018357:	83 c1 01             	add    ecx,0x1
c001835a:	39 c8                	cmp    eax,ecx
c001835c:	77 e7                	ja     c0018345 <Virt::allocateSwapfilePage()+0x33>
c001835e:	83 ec 0c             	sub    esp,0xc
c0018361:	68 bc 1b 03 c0       	push   0xc0031bbc
c0018366:	e8 2b 82 00 00       	call   c0020596 <KePanic(char const*)>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	31 c9                	xor    ecx,ecx
c0018370:	83 c4 0c             	add    esp,0xc
c0018373:	89 c8                	mov    eax,ecx
c0018375:	5b                   	pop    ebx
c0018376:	5e                   	pop    esi
c0018377:	5f                   	pop    edi
c0018378:	5d                   	pop    ebp
c0018379:	c3                   	ret    
c001837a:	89 f3                	mov    ebx,esi
c001837c:	bd 01 00 00 00       	mov    ebp,0x1
c0018381:	31 c9                	xor    ecx,ecx
c0018383:	09 ea                	or     edx,ebp
c0018385:	89 c8                	mov    eax,ecx
c0018387:	89 13                	mov    DWORD PTR [ebx],edx
c0018389:	83 c4 0c             	add    esp,0xc
c001838c:	5b                   	pop    ebx
c001838d:	5e                   	pop    esi
c001838e:	5f                   	pop    edi
c001838f:	5d                   	pop    ebp
c0018390:	c3                   	ret    

c0018391 <Virt::virtualMemorySetup()>:
c0018391:	53                   	push   ebx
c0018392:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018397:	6a 0f                	push   0xf
c0018399:	53                   	push   ebx
c001839a:	83 c3 01             	add    ebx,0x1
c001839d:	e8 be fd ff ff       	call   c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183a2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00183a8:	58                   	pop    eax
c00183a9:	5a                   	pop    edx
c00183aa:	75 eb                	jne    c0018397 <Virt::virtualMemorySetup()+0x6>
c00183ac:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00183b1:	6a 00                	push   0x0
c00183b3:	53                   	push   ebx
c00183b4:	83 c3 01             	add    ebx,0x1
c00183b7:	e8 a4 fd ff ff       	call   c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183bc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00183c2:	59                   	pop    ecx
c00183c3:	58                   	pop    eax
c00183c4:	75 eb                	jne    c00183b1 <Virt::virtualMemorySetup()+0x20>
c00183c6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00183cb:	6a 0f                	push   0xf
c00183cd:	53                   	push   ebx
c00183ce:	83 c3 01             	add    ebx,0x1
c00183d1:	e8 8a fd ff ff       	call   c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183d6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00183dc:	58                   	pop    eax
c00183dd:	5a                   	pop    edx
c00183de:	75 eb                	jne    c00183cb <Virt::virtualMemorySetup()+0x3a>
c00183e0:	5b                   	pop    ebx
c00183e1:	c3                   	ret    

c00183e2 <Virt::setupPageSwapping(int)>:
c00183e2:	53                   	push   ebx
c00183e3:	83 ec 0c             	sub    esp,0xc
c00183e6:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c00183eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00183ef:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00183f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00183f7:	53                   	push   ebx
c00183f8:	68 d3 1b 03 c0       	push   0xc0031bd3
c00183fd:	50                   	push   eax
c00183fe:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0018401:	c1 e3 0b             	shl    ebx,0xb
c0018404:	89 1d 10 43 03 c0    	mov    DWORD PTR ds:0xc0034310,ebx
c001840a:	c1 eb 08             	shr    ebx,0x8
c001840d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018410:	c6 05 18 43 03 c0 43 	mov    BYTE PTR ds:0xc0034318,0x43
c0018417:	c7 05 0c 43 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc003430c,0x8
c0018421:	a3 14 43 03 c0       	mov    ds:0xc0034314,eax
c0018426:	e8 71 e2 ff ff       	call   c001669c <malloc>
c001842b:	31 d2                	xor    edx,edx
c001842d:	83 c4 0c             	add    esp,0xc
c0018430:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c0018435:	89 c1                	mov    ecx,eax
c0018437:	a1 10 43 03 c0       	mov    eax,ds:0xc0034310
c001843c:	f7 35 0c 43 03 c0    	div    DWORD PTR ds:0xc003430c
c0018442:	c1 e8 05             	shr    eax,0x5
c0018445:	50                   	push   eax
c0018446:	6a 00                	push   0x0
c0018448:	51                   	push   ecx
c0018449:	e8 a2 80 fe ff       	call   c00004f0 <memset>
c001844e:	83 c4 18             	add    esp,0x18
c0018451:	5b                   	pop    ebx
c0018452:	c3                   	ret    
c0018453:	90                   	nop

c0018454 <VAS::setCPUSpecific(unsigned long)>:
c0018454:	c3                   	ret    
c0018455:	90                   	nop

c0018456 <VAS::VAS(VAS*)>:
c0018456:	83 ec 0c             	sub    esp,0xc
c0018459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001845d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018468:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001846f:	83 ec 0c             	sub    esp,0xc
c0018472:	68 48 19 03 c0       	push   0xc0031948
c0018477:	e8 1a 81 00 00       	call   c0020596 <KePanic(char const*)>
c001847c:	83 c4 10             	add    esp,0x10
c001847f:	90                   	nop
c0018480:	83 c4 0c             	add    esp,0xc
c0018483:	c3                   	ret    

c0018484 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0018484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018488:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001848d:	89 c2                	mov    edx,eax
c001848f:	c1 ea 16             	shr    edx,0x16
c0018492:	c1 e8 0a             	shr    eax,0xa
c0018495:	83 f9 01             	cmp    ecx,0x1
c0018498:	19 c9                	sbb    ecx,ecx
c001849a:	25 fc 0f 00 00       	and    eax,0xffc
c001849f:	c1 e2 0c             	shl    edx,0xc
c00184a2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00184a8:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00184af:	01 d0                	add    eax,edx
c00184b1:	c3                   	ret    

c00184b2 <VAS::getPageTableEntry(unsigned long)>:
c00184b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00184b6:	89 ca                	mov    edx,ecx
c00184b8:	c1 ea 16             	shr    edx,0x16
c00184bb:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00184c1:	c1 e9 0a             	shr    ecx,0xa
c00184c4:	c1 e0 0c             	shl    eax,0xc
c00184c7:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00184cd:	8d 04 08             	lea    eax,[eax+ecx*1]
c00184d0:	c3                   	ret    

c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>:
c00184d1:	55                   	push   ebp
c00184d2:	57                   	push   edi
c00184d3:	bf 01 00 00 00       	mov    edi,0x1
c00184d8:	56                   	push   esi
c00184d9:	53                   	push   ebx
c00184da:	83 ec 1c             	sub    esp,0x1c
c00184dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00184e1:	c1 ee 0c             	shr    esi,0xc
c00184e4:	eb 48                	jmp    c001852e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00184e6:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00184eb:	83 ec 08             	sub    esp,0x8
c00184ee:	55                   	push   ebp
c00184ef:	50                   	push   eax
c00184f0:	e8 bd ff ff ff       	call   c00184b2 <VAS::getPageTableEntry(unsigned long)>
c00184f5:	83 c4 10             	add    esp,0x10
c00184f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00184fa:	f6 c6 04             	test   dh,0x4
c00184fd:	75 70                	jne    c001856f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00184ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018505:	83 fb 04             	cmp    ebx,0x4
c0018508:	0f 84 8a 00 00 00    	je     c0018598 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001850e:	83 fb 02             	cmp    ebx,0x2
c0018511:	0f 84 9a 00 00 00    	je     c00185b1 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018517:	83 fb 03             	cmp    ebx,0x3
c001851a:	0f 84 be 00 00 00    	je     c00185de <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018520:	83 fb 01             	cmp    ebx,0x1
c0018523:	0f 84 a2 00 00 00    	je     c00185cb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018529:	83 c6 01             	add    esi,0x1
c001852c:	31 ff                	xor    edi,edi
c001852e:	56                   	push   esi
c001852f:	89 f5                	mov    ebp,esi
c0018531:	e8 64 fc ff ff       	call   c001819a <Virt::getPageState(unsigned long)>
c0018536:	c1 e5 0c             	shl    ebp,0xc
c0018539:	5a                   	pop    edx
c001853a:	0f b6 d8             	movzx  ebx,al
c001853d:	85 db                	test   ebx,ebx
c001853f:	75 a5                	jne    c00184e6 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0018541:	83 ec 0c             	sub    esp,0xc
c0018544:	68 ea 1b 03 c0       	push   0xc0031bea
c0018549:	e8 48 80 00 00       	call   c0020596 <KePanic(char const*)>
c001854e:	5a                   	pop    edx
c001854f:	59                   	pop    ecx
c0018550:	55                   	push   ebp
c0018551:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c0018557:	55                   	push   ebp
c0018558:	e8 55 ff ff ff       	call   c00184b2 <VAS::getPageTableEntry(unsigned long)>
c001855d:	83 c4 10             	add    esp,0x10
c0018560:	8b 10                	mov    edx,DWORD PTR [eax]
c0018562:	f6 c6 04             	test   dh,0x4
c0018565:	75 08                	jne    c001856f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018567:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001856d:	eb ba                	jmp    c0018529 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001856f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018573:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0018579:	83 ec 0c             	sub    esp,0xc
c001857c:	52                   	push   edx
c001857d:	e8 c0 e3 ff ff       	call   c0016942 <Phys::freePage(unsigned long)>
c0018582:	83 c4 10             	add    esp,0x10
c0018585:	83 fb 04             	cmp    ebx,0x4
c0018588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001858c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018592:	0f 85 76 ff ff ff    	jne    c001850e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0018598:	83 e7 01             	and    edi,0x1
c001859b:	75 46                	jne    c00185e3 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001859d:	c7 44 24 30 6c 19 03 c0 	mov    DWORD PTR [esp+0x30],0xc003196c
c00185a5:	83 c4 1c             	add    esp,0x1c
c00185a8:	5b                   	pop    ebx
c00185a9:	5e                   	pop    esi
c00185aa:	5f                   	pop    edi
c00185ab:	5d                   	pop    ebp
c00185ac:	e9 e5 7f 00 00       	jmp    c0020596 <KePanic(char const*)>
c00185b1:	83 e7 01             	and    edi,0x1
c00185b4:	75 15                	jne    c00185cb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00185b6:	83 ec 0c             	sub    esp,0xc
c00185b9:	68 06 1c 03 c0       	push   0xc0031c06
c00185be:	e8 d3 7f 00 00       	call   c0020596 <KePanic(char const*)>
c00185c3:	83 c4 10             	add    esp,0x10
c00185c6:	e9 5e ff ff ff       	jmp    c0018529 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00185cb:	83 ec 08             	sub    esp,0x8
c00185ce:	6a 00                	push   0x0
c00185d0:	56                   	push   esi
c00185d1:	e8 8a fb ff ff       	call   c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00185d6:	83 c4 10             	add    esp,0x10
c00185d9:	e9 4b ff ff ff       	jmp    c0018529 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00185de:	83 e7 01             	and    edi,0x1
c00185e1:	75 16                	jne    c00185f9 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00185e3:	83 ec 08             	sub    esp,0x8
c00185e6:	6a 00                	push   0x0
c00185e8:	56                   	push   esi
c00185e9:	e8 72 fb ff ff       	call   c0018160 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00185ee:	83 c4 10             	add    esp,0x10
c00185f1:	83 c4 1c             	add    esp,0x1c
c00185f4:	5b                   	pop    ebx
c00185f5:	5e                   	pop    esi
c00185f6:	5f                   	pop    edi
c00185f7:	5d                   	pop    ebp
c00185f8:	c3                   	ret    
c00185f9:	c7 44 24 30 22 1c 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031c22
c0018601:	83 c4 1c             	add    esp,0x1c
c0018604:	5b                   	pop    ebx
c0018605:	5e                   	pop    esi
c0018606:	5f                   	pop    edi
c0018607:	5d                   	pop    ebp
c0018608:	e9 89 7f 00 00       	jmp    c0020596 <KePanic(char const*)>
c001860d:	90                   	nop

c001860e <VAS::freeAllocatedPages(unsigned long)>:
c001860e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018612:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018616:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001861a:	74 09                	je     c0018625 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001861c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018620:	e9 ac fe ff ff       	jmp    c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0018625:	c7 44 24 04 90 19 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031990
c001862d:	e9 a0 0e 00 00       	jmp    c00194d2 <Dbg::kprintf(char const*, ...)>

c0018632 <VAS::virtualToPhysical(unsigned long)>:
c0018632:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018636:	50                   	push   eax
c0018637:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001863b:	52                   	push   edx
c001863c:	e8 71 fe ff ff       	call   c00184b2 <VAS::getPageTableEntry(unsigned long)>
c0018641:	59                   	pop    ecx
c0018642:	5a                   	pop    edx
c0018643:	8b 00                	mov    eax,DWORD PTR [eax]
c0018645:	25 00 f0 ff ff       	and    eax,0xfffff000
c001864a:	c3                   	ret    
c001864b:	90                   	nop

c001864c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001864c:	55                   	push   ebp
c001864d:	57                   	push   edi
c001864e:	56                   	push   esi
c001864f:	53                   	push   ebx
c0018650:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018654:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0018658:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001865c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018660:	85 db                	test   ebx,ebx
c0018662:	7e 24                	jle    c0018688 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0018664:	c1 e3 0c             	shl    ebx,0xc
c0018667:	01 f3                	add    ebx,esi
c0018669:	56                   	push   esi
c001866a:	81 c6 00 10 00 00    	add    esi,0x1000
c0018670:	55                   	push   ebp
c0018671:	e8 3c fe ff ff       	call   c00184b2 <VAS::getPageTableEntry(unsigned long)>
c0018676:	5a                   	pop    edx
c0018677:	59                   	pop    ecx
c0018678:	8b 08                	mov    ecx,DWORD PTR [eax]
c001867a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001867e:	21 f9                	and    ecx,edi
c0018680:	09 d1                	or     ecx,edx
c0018682:	39 f3                	cmp    ebx,esi
c0018684:	89 08                	mov    DWORD PTR [eax],ecx
c0018686:	75 e1                	jne    c0018669 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0018688:	5b                   	pop    ebx
c0018689:	5e                   	pop    esi
c001868a:	5f                   	pop    edi
c001868b:	5d                   	pop    ebp
c001868c:	c3                   	ret    
c001868d:	90                   	nop

c001868e <VAS::VAS()>:
c001868e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018692:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001869d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00186a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186a8:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c00186ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186b1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00186b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186b9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00186bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186c0:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00186c7:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c00186cc:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00186d1:	29 c2                	sub    edx,eax
c00186d3:	89 d0                	mov    eax,edx
c00186d5:	05 ff 0f 00 00       	add    eax,0xfff
c00186da:	c1 e8 0c             	shr    eax,0xc
c00186dd:	89 c2                	mov    edx,eax
c00186df:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00186e4:	6a 04                	push   0x4
c00186e6:	6a ff                	push   0xffffffff
c00186e8:	52                   	push   edx
c00186e9:	50                   	push   eax
c00186ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00186ee:	e8 59 ff ff ff       	call   c001864c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00186f3:	83 c4 14             	add    esp,0x14
c00186f6:	90                   	nop
c00186f7:	c3                   	ret    

c00186f8 <VAS::setToWriteCombining(unsigned long, int)>:
c00186f8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00186fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018703:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c001870a:	75 01                	jne    c001870d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001870c:	c3                   	ret    
c001870d:	68 80 00 00 00       	push   0x80
c0018712:	6a ff                	push   0xffffffff
c0018714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018718:	50                   	push   eax
c0018719:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001871d:	52                   	push   edx
c001871e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018722:	51                   	push   ecx
c0018723:	e8 24 ff ff ff       	call   c001864c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018728:	83 c4 14             	add    esp,0x14
c001872b:	c3                   	ret    

c001872c <VAS::mapOtherVASIn(bool, VAS*)>:
c001872c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018730:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018737:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001873a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001873f:	83 f8 01             	cmp    eax,0x1
c0018742:	19 c0                	sbb    eax,eax
c0018744:	83 ca 03             	or     edx,0x3
c0018747:	83 e0 fc             	and    eax,0xfffffffc
c001874a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0018751:	0f 20 d8             	mov    eax,cr3
c0018754:	0f 22 d8             	mov    cr3,eax
c0018757:	c3                   	ret    

c0018758 <VAS::~VAS()>:
c0018758:	83 ec 2c             	sub    esp,0x2c
c001875b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018763:	fa                   	cli    
c0018764:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018769:	83 c0 01             	add    eax,0x1
c001876c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018771:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018776:	8b 00                	mov    eax,DWORD PTR [eax]
c0018778:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001877b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018781:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018785:	6a 01                	push   0x1
c0018787:	50                   	push   eax
c0018788:	e8 9f ff ff ff       	call   c001872c <VAS::mapOtherVASIn(bool, VAS*)>
c001878d:	83 c4 0c             	add    esp,0xc
c0018790:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018798:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00187a0:	0f 8f d8 00 00 00    	jg     c001887e <VAS::~VAS()+0x126>
c00187a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00187ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187b1:	c1 e2 02             	shl    edx,0x2
c00187b4:	01 d0                	add    eax,edx
c00187b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00187b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00187bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c0:	83 e0 01             	and    eax,0x1
c00187c3:	0f 84 ab 00 00 00    	je     c0018874 <VAS::~VAS()+0x11c>
c00187c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00187d1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00187d9:	7f 74                	jg     c001884f <VAS::~VAS()+0xf7>
c00187db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187df:	c1 e0 0a             	shl    eax,0xa
c00187e2:	89 c2                	mov    edx,eax
c00187e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187e8:	01 d0                	add    eax,edx
c00187ea:	c1 e0 0c             	shl    eax,0xc
c00187ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187f1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00187f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00187f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00187fb:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018801:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018805:	6a 01                	push   0x1
c0018807:	50                   	push   eax
c0018808:	e8 77 fc ff ff       	call   c0018484 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001880d:	83 c4 0c             	add    esp,0xc
c0018810:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018818:	8b 00                	mov    eax,DWORD PTR [eax]
c001881a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001881e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018822:	25 01 04 00 00       	and    eax,0x401
c0018827:	3d 01 04 00 00       	cmp    eax,0x401
c001882c:	75 1a                	jne    c0018848 <VAS::~VAS()+0xf0>
c001882e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018832:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018837:	83 ec 0c             	sub    esp,0xc
c001883a:	50                   	push   eax
c001883b:	e8 02 e1 ff ff       	call   c0016942 <Phys::freePage(unsigned long)>
c0018840:	83 c4 10             	add    esp,0x10
c0018843:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018848:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c001884d:	eb 82                	jmp    c00187d1 <VAS::~VAS()+0x79>
c001884f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018853:	25 00 04 00 00       	and    eax,0x400
c0018858:	74 1a                	je     c0018874 <VAS::~VAS()+0x11c>
c001885a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001885e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018863:	83 ec 0c             	sub    esp,0xc
c0018866:	50                   	push   eax
c0018867:	e8 d6 e0 ff ff       	call   c0016942 <Phys::freePage(unsigned long)>
c001886c:	83 c4 10             	add    esp,0x10
c001886f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018874:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018879:	e9 1a ff ff ff       	jmp    c0018798 <VAS::~VAS()+0x40>
c001887e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018882:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018885:	83 ec 0c             	sub    esp,0xc
c0018888:	50                   	push   eax
c0018889:	e8 43 fc ff ff       	call   c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>
c001888e:	83 c4 10             	add    esp,0x10
c0018891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018895:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018898:	83 ec 0c             	sub    esp,0xc
c001889b:	50                   	push   eax
c001889c:	e8 a1 e0 ff ff       	call   c0016942 <Phys::freePage(unsigned long)>
c00188a1:	83 c4 10             	add    esp,0x10
c00188a4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00188a9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00188ae:	83 e8 01             	sub    eax,0x1
c00188b1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00188b6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00188bb:	85 c0                	test   eax,eax
c00188bd:	75 01                	jne    c00188c0 <VAS::~VAS()+0x168>
c00188bf:	fb                   	sti    
c00188c0:	90                   	nop
c00188c1:	83 c4 2c             	add    esp,0x2c
c00188c4:	c3                   	ret    
c00188c5:	90                   	nop

c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00188c6:	55                   	push   ebp
c00188c7:	57                   	push   edi
c00188c8:	56                   	push   esi
c00188c9:	53                   	push   ebx
c00188ca:	83 ec 1c             	sub    esp,0x1c
c00188cd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00188d1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00188d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00188d9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00188df:	77 08                	ja     c00188e9 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00188e1:	0f 20 d8             	mov    eax,cr3
c00188e4:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00188e7:	75 43                	jne    c001892c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00188e9:	89 d8                	mov    eax,ebx
c00188eb:	09 f8                	or     eax,edi
c00188ed:	a9 ff 0f 00 00       	test   eax,0xfff
c00188f2:	75 53                	jne    c0018947 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00188f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00188f7:	89 de                	mov    esi,ebx
c00188f9:	c1 ee 16             	shr    esi,0x16
c00188fc:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0018903:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0018907:	74 50                	je     c0018959 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0018909:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001890d:	c1 eb 0a             	shr    ebx,0xa
c0018910:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0018916:	c1 e6 0c             	shl    esi,0xc
c0018919:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001891f:	09 c7                	or     edi,eax
c0018921:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0018924:	83 c4 1c             	add    esp,0x1c
c0018927:	5b                   	pop    ebx
c0018928:	5e                   	pop    esi
c0018929:	5f                   	pop    edi
c001892a:	5d                   	pop    ebp
c001892b:	c3                   	ret    
c001892c:	83 ec 0c             	sub    esp,0xc
c001892f:	68 b4 19 03 c0       	push   0xc00319b4
c0018934:	e8 99 0b 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0018939:	89 d8                	mov    eax,ebx
c001893b:	83 c4 10             	add    esp,0x10
c001893e:	09 f8                	or     eax,edi
c0018940:	a9 ff 0f 00 00       	test   eax,0xfff
c0018945:	74 ad                	je     c00188f4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018947:	83 ec 0c             	sub    esp,0xc
c001894a:	68 1c 1a 03 c0       	push   0xc0031a1c
c001894f:	e8 42 7c 00 00       	call   c0020596 <KePanic(char const*)>
c0018954:	83 c4 10             	add    esp,0x10
c0018957:	eb 9b                	jmp    c00188f4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018959:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001895d:	e8 49 e0 ff ff       	call   c00169ab <Phys::allocatePage()>
c0018962:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018968:	83 ec 0c             	sub    esp,0xc
c001896b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001896f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018973:	6a 01                	push   0x1
c0018975:	e8 43 f8 ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c001897a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018981:	6a 01                	push   0x1
c0018983:	50                   	push   eax
c0018984:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018988:	52                   	push   edx
c0018989:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001898d:	51                   	push   ecx
c001898e:	e8 3d 01 00 00       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018993:	83 c4 1c             	add    esp,0x1c
c0018996:	68 00 10 00 00       	push   0x1000
c001899b:	6a 00                	push   0x0
c001899d:	50                   	push   eax
c001899e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189a2:	e8 49 7b fe ff       	call   c00004f0 <memset>
c00189a7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00189ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00189ae:	e8 1e fb ff ff       	call   c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>
c00189b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00189c1:	0d 07 04 00 00       	or     eax,0x407
c00189c6:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00189c9:	e9 3b ff ff ff       	jmp    c0018909 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00189ce <VAS::allocatePages(int, int)>:
c00189ce:	55                   	push   ebp
c00189cf:	57                   	push   edi
c00189d0:	56                   	push   esi
c00189d1:	53                   	push   ebx
c00189d2:	83 ec 1c             	sub    esp,0x1c
c00189d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189d9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00189dd:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00189e1:	75 75                	jne    c0018a58 <VAS::allocatePages(int, int)+0x8a>
c00189e3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00189e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00189ea:	85 c0                	test   eax,eax
c00189ec:	74 49                	je     c0018a37 <VAS::allocatePages(int, int)+0x69>
c00189ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00189f2:	89 d5                	mov    ebp,edx
c00189f4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00189f8:	c1 e5 0c             	shl    ebp,0xc
c00189fb:	01 dd                	add    ebp,ebx
c00189fd:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018a00:	81 cf 00 04 00 00    	or     edi,0x400
c0018a06:	85 d2                	test   edx,edx
c0018a08:	7e 1b                	jle    c0018a25 <VAS::allocatePages(int, int)+0x57>
c0018a0a:	e8 9c df ff ff       	call   c00169ab <Phys::allocatePage()>
c0018a0f:	57                   	push   edi
c0018a10:	53                   	push   ebx
c0018a11:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018a17:	50                   	push   eax
c0018a18:	56                   	push   esi
c0018a19:	e8 a8 fe ff ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a1e:	83 c4 10             	add    esp,0x10
c0018a21:	39 dd                	cmp    ebp,ebx
c0018a23:	75 e5                	jne    c0018a0a <VAS::allocatePages(int, int)+0x3c>
c0018a25:	0f 20 d8             	mov    eax,cr3
c0018a28:	0f 22 d8             	mov    cr3,eax
c0018a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a2f:	83 c4 1c             	add    esp,0x1c
c0018a32:	5b                   	pop    ebx
c0018a33:	5e                   	pop    esi
c0018a34:	5f                   	pop    edi
c0018a35:	5d                   	pop    ebp
c0018a36:	c3                   	ret    
c0018a37:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018a3b:	83 ec 0c             	sub    esp,0xc
c0018a3e:	68 40 1a 03 c0       	push   0xc0031a40
c0018a43:	e8 4e 7b 00 00       	call   c0020596 <KePanic(char const*)>
c0018a48:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018a4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a4f:	83 c4 10             	add    esp,0x10
c0018a52:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018a56:	eb 96                	jmp    c00189ee <VAS::allocatePages(int, int)+0x20>
c0018a58:	83 ec 0c             	sub    esp,0xc
c0018a5b:	52                   	push   edx
c0018a5c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0018a60:	e8 58 f7 ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c0018a65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a69:	83 c4 10             	add    esp,0x10
c0018a6c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0018a71:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018a75:	77 38                	ja     c0018aaf <VAS::allocatePages(int, int)+0xe1>
c0018a77:	85 d2                	test   edx,edx
c0018a79:	7e aa                	jle    c0018a25 <VAS::allocatePages(int, int)+0x57>
c0018a7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018a7f:	c1 e2 0c             	shl    edx,0xc
c0018a82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018a86:	81 cf 00 04 00 00    	or     edi,0x400
c0018a8c:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0018a8f:	e8 17 df ff ff       	call   c00169ab <Phys::allocatePage()>
c0018a94:	57                   	push   edi
c0018a95:	53                   	push   ebx
c0018a96:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018a9c:	50                   	push   eax
c0018a9d:	56                   	push   esi
c0018a9e:	e8 23 fe ff ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018aa3:	83 c4 10             	add    esp,0x10
c0018aa6:	39 dd                	cmp    ebp,ebx
c0018aa8:	75 e5                	jne    c0018a8f <VAS::allocatePages(int, int)+0xc1>
c0018aaa:	e9 76 ff ff ff       	jmp    c0018a25 <VAS::allocatePages(int, int)+0x57>
c0018aaf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018ab4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018aba:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018ac1:	74 b4                	je     c0018a77 <VAS::allocatePages(int, int)+0xa9>
c0018ac3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ac7:	80 cc 01             	or     ah,0x1
c0018aca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0018ace:	eb a7                	jmp    c0018a77 <VAS::allocatePages(int, int)+0xa9>

c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018ad0:	55                   	push   ebp
c0018ad1:	57                   	push   edi
c0018ad2:	56                   	push   esi
c0018ad3:	53                   	push   ebx
c0018ad4:	83 ec 1c             	sub    esp,0x1c
c0018ad7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018adb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018adf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0018ae3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018ae7:	85 db                	test   ebx,ebx
c0018ae9:	7e 2c                	jle    c0018b17 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0018aeb:	c1 e3 0c             	shl    ebx,0xc
c0018aee:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018af1:	89 f3                	mov    ebx,esi
c0018af3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018af7:	55                   	push   ebp
c0018af8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018afc:	29 f2                	sub    edx,esi
c0018afe:	01 da                	add    edx,ebx
c0018b00:	52                   	push   edx
c0018b01:	53                   	push   ebx
c0018b02:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018b08:	57                   	push   edi
c0018b09:	e8 b8 fd ff ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018b0e:	83 c4 10             	add    esp,0x10
c0018b11:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0018b15:	75 e0                	jne    c0018af7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0018b17:	0f 20 d8             	mov    eax,cr3
c0018b1a:	0f 22 d8             	mov    cr3,eax
c0018b1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b21:	83 c4 1c             	add    esp,0x1c
c0018b24:	5b                   	pop    ebx
c0018b25:	5e                   	pop    esi
c0018b26:	5f                   	pop    edi
c0018b27:	5d                   	pop    ebp
c0018b28:	c3                   	ret    
c0018b29:	90                   	nop

c0018b2a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018b2a:	55                   	push   ebp
c0018b2b:	57                   	push   edi
c0018b2c:	56                   	push   esi
c0018b2d:	53                   	push   ebx
c0018b2e:	83 ec 1c             	sub    esp,0x1c
c0018b31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b35:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018b39:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018b3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018b45:	09 d8                	or     eax,ebx
c0018b47:	a9 ff 0f 00 00       	test   eax,0xfff
c0018b4c:	75 4b                	jne    c0018b99 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018b4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018b51:	89 de                	mov    esi,ebx
c0018b53:	c1 ee 16             	shr    esi,0x16
c0018b56:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0018b5d:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0018b61:	74 48                	je     c0018bab <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0018b63:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0018b68:	c1 eb 0a             	shr    ebx,0xa
c0018b6b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018b6f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0018b73:	83 ff 01             	cmp    edi,0x1
c0018b76:	19 c0                	sbb    eax,eax
c0018b78:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018b7e:	c1 e6 0c             	shl    esi,0xc
c0018b81:	25 00 00 c0 ff       	and    eax,0xffc00000
c0018b86:	01 f3                	add    ebx,esi
c0018b88:	09 ca                	or     edx,ecx
c0018b8a:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0018b91:	83 c4 1c             	add    esp,0x1c
c0018b94:	5b                   	pop    ebx
c0018b95:	5e                   	pop    esi
c0018b96:	5f                   	pop    edi
c0018b97:	5d                   	pop    ebp
c0018b98:	c3                   	ret    
c0018b99:	83 ec 0c             	sub    esp,0xc
c0018b9c:	68 6c 1a 03 c0       	push   0xc0031a6c
c0018ba1:	e8 f0 79 00 00       	call   c0020596 <KePanic(char const*)>
c0018ba6:	83 c4 10             	add    esp,0x10
c0018ba9:	eb a3                	jmp    c0018b4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0018bab:	e8 fb dd ff ff       	call   c00169ab <Phys::allocatePage()>
c0018bb0:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018bb6:	83 ec 0c             	sub    esp,0xc
c0018bb9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0018bbd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018bc1:	6a 01                	push   0x1
c0018bc3:	e8 f5 f5 ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c0018bc8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018bcf:	6a 01                	push   0x1
c0018bd1:	50                   	push   eax
c0018bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bd6:	50                   	push   eax
c0018bd7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018bdb:	51                   	push   ecx
c0018bdc:	e8 ef fe ff ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018be1:	83 c4 1c             	add    esp,0x1c
c0018be4:	68 00 10 00 00       	push   0x1000
c0018be9:	6a 00                	push   0x0
c0018beb:	50                   	push   eax
c0018bec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018bf0:	e8 fb 78 fe ff       	call   c00004f0 <memset>
c0018bf5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018bf9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018bfc:	e8 d0 f8 ff ff       	call   c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0018c01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c05:	83 c4 10             	add    esp,0x10
c0018c08:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018c0b:	81 ca 07 04 00 00    	or     edx,0x407
c0018c11:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0018c14:	e9 4a ff ff ff       	jmp    c0018b63 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0018c19:	90                   	nop

c0018c1a <VAS::VAS(bool)>:
c0018c1a:	53                   	push   ebx
c0018c1b:	83 ec 28             	sub    esp,0x28
c0018c1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018c22:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018c31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c35:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c40:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018c44:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018c47:	e8 5f dd ff ff       	call   c00169ab <Phys::allocatePage()>
c0018c4c:	89 c2                	mov    edx,eax
c0018c4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c52:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018c55:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0018c5b:	83 ec 0c             	sub    esp,0xc
c0018c5e:	6a 01                	push   0x1
c0018c60:	e8 58 f5 ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c0018c65:	83 c4 10             	add    esp,0x10
c0018c68:	89 c2                	mov    edx,eax
c0018c6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018c71:	83 ec 0c             	sub    esp,0xc
c0018c74:	6a 03                	push   0x3
c0018c76:	6a 01                	push   0x1
c0018c78:	52                   	push   edx
c0018c79:	50                   	push   eax
c0018c7a:	53                   	push   ebx
c0018c7b:	e8 50 fe ff ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018c80:	83 c4 20             	add    esp,0x20
c0018c83:	89 c2                	mov    edx,eax
c0018c85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c89:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018c8c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c94:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018c9c:	7f 1d                	jg     c0018cbb <VAS::VAS(bool)+0xa1>
c0018c9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ca2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018ca5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ca9:	c1 e2 02             	shl    edx,0x2
c0018cac:	01 d0                	add    eax,edx
c0018cae:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018cb4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018cb9:	eb d9                	jmp    c0018c94 <VAS::VAS(bool)+0x7a>
c0018cbb:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018cc3:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018ccb:	7f 7e                	jg     c0018d4b <VAS::VAS(bool)+0x131>
c0018ccd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cd1:	2d 00 02 00 00       	sub    eax,0x200
c0018cd6:	c1 e0 0c             	shl    eax,0xc
c0018cd9:	83 c8 05             	or     eax,0x5
c0018cdc:	89 c2                	mov    edx,eax
c0018cde:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018ce3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ce9:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018cef:	83 e0 10             	and    eax,0x10
c0018cf2:	0f b6 c0             	movzx  eax,al
c0018cf5:	85 c0                	test   eax,eax
c0018cf7:	74 07                	je     c0018d00 <VAS::VAS(bool)+0xe6>
c0018cf9:	b8 00 01 00 00       	mov    eax,0x100
c0018cfe:	eb 05                	jmp    c0018d05 <VAS::VAS(bool)+0xeb>
c0018d00:	b8 00 00 00 00       	mov    eax,0x0
c0018d05:	09 d0                	or     eax,edx
c0018d07:	89 c1                	mov    ecx,eax
c0018d09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d14:	c1 e2 02             	shl    edx,0x2
c0018d17:	01 d0                	add    eax,edx
c0018d19:	89 ca                	mov    edx,ecx
c0018d1b:	89 10                	mov    DWORD PTR [eax],edx
c0018d1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d21:	2d 40 03 00 00       	sub    eax,0x340
c0018d26:	83 f8 7f             	cmp    eax,0x7f
c0018d29:	77 16                	ja     c0018d41 <VAS::VAS(bool)+0x127>
c0018d2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d36:	c1 e2 02             	shl    edx,0x2
c0018d39:	01 d0                	add    eax,edx
c0018d3b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018d41:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018d46:	e9 78 ff ff ff       	jmp    c0018cc3 <VAS::VAS(bool)+0xa9>
c0018d4b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d56:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018d5c:	83 e0 10             	and    eax,0x10
c0018d5f:	0f b6 c0             	movzx  eax,al
c0018d62:	85 c0                	test   eax,eax
c0018d64:	74 07                	je     c0018d6d <VAS::VAS(bool)+0x153>
c0018d66:	b8 03 41 00 00       	mov    eax,0x4103
c0018d6b:	eb 05                	jmp    c0018d72 <VAS::VAS(bool)+0x158>
c0018d6d:	b8 03 40 00 00       	mov    eax,0x4003
c0018d72:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d76:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018d79:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018d7f:	89 02                	mov    DWORD PTR [edx],eax
c0018d81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d85:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d88:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d8d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d93:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018d99:	83 e0 10             	and    eax,0x10
c0018d9c:	0f b6 c0             	movzx  eax,al
c0018d9f:	85 c0                	test   eax,eax
c0018da1:	74 07                	je     c0018daa <VAS::VAS(bool)+0x190>
c0018da3:	b8 00 01 00 00       	mov    eax,0x100
c0018da8:	eb 05                	jmp    c0018daf <VAS::VAS(bool)+0x195>
c0018daa:	b8 00 00 00 00       	mov    eax,0x0
c0018daf:	09 c2                	or     edx,eax
c0018db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018db5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018db8:	05 fc 0f 00 00       	add    eax,0xffc
c0018dbd:	83 ca 03             	or     edx,0x3
c0018dc0:	89 10                	mov    DWORD PTR [eax],edx
c0018dc2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018dc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018dcd:	83 ec 0c             	sub    esp,0xc
c0018dd0:	50                   	push   eax
c0018dd1:	e8 2c 2b 00 00       	call   c001b902 <Device::getName()>
c0018dd6:	83 c4 10             	add    esp,0x10
c0018dd9:	83 ec 08             	sub    esp,0x8
c0018ddc:	68 3c 1c 03 c0       	push   0xc0031c3c
c0018de1:	50                   	push   eax
c0018de2:	e8 99 79 fe ff       	call   c0000780 <strcmp>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	85 c0                	test   eax,eax
c0018dec:	0f 94 c0             	sete   al
c0018def:	0f b6 c0             	movzx  eax,al
c0018df2:	85 c0                	test   eax,eax
c0018df4:	74 68                	je     c0018e5e <VAS::VAS(bool)+0x244>
c0018df6:	fa                   	cli    
c0018df7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018dfc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018e02:	05 7c 09 00 00       	add    eax,0x97c
c0018e07:	83 ec 0c             	sub    esp,0xc
c0018e0a:	50                   	push   eax
c0018e0b:	e8 0a d3 ff ff       	call   c001611a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018e10:	83 c4 10             	add    esp,0x10
c0018e13:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018e18:	89 c3                	mov    ebx,eax
c0018e1a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018e1f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018e25:	05 7c 09 00 00       	add    eax,0x97c
c0018e2a:	83 ec 0c             	sub    esp,0xc
c0018e2d:	50                   	push   eax
c0018e2e:	e8 e7 d2 ff ff       	call   c001611a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018e33:	83 c4 10             	add    esp,0x10
c0018e36:	83 ec 08             	sub    esp,0x8
c0018e39:	50                   	push   eax
c0018e3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018e3e:	e8 6f f6 ff ff       	call   c00184b2 <VAS::getPageTableEntry(unsigned long)>
c0018e43:	83 c4 10             	add    esp,0x10
c0018e46:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e48:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018e4d:	6a 11                	push   0x11
c0018e4f:	53                   	push   ebx
c0018e50:	50                   	push   eax
c0018e51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018e55:	e8 6c fa ff ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e5a:	83 c4 10             	add    esp,0x10
c0018e5d:	fb                   	sti    
c0018e5e:	90                   	nop
c0018e5f:	83 c4 28             	add    esp,0x28
c0018e62:	5b                   	pop    ebx
c0018e63:	c3                   	ret    

c0018e64 <VAS::evict(unsigned long)>:
c0018e64:	55                   	push   ebp
c0018e65:	57                   	push   edi
c0018e66:	56                   	push   esi
c0018e67:	53                   	push   ebx
c0018e68:	83 ec 1c             	sub    esp,0x1c
c0018e6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018e6f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018e73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e77:	e8 96 f4 ff ff       	call   c0018312 <Virt::allocateSwapfilePage()>
c0018e7c:	89 c7                	mov    edi,eax
c0018e7e:	a1 0c 43 03 c0       	mov    eax,ds:0xc003430c
c0018e83:	85 c0                	test   eax,eax
c0018e85:	7e 40                	jle    c0018ec7 <VAS::evict(unsigned long)+0x63>
c0018e87:	89 ee                	mov    esi,ebp
c0018e89:	31 db                	xor    ebx,ebx
c0018e8b:	83 ec 0c             	sub    esp,0xc
c0018e8e:	57                   	push   edi
c0018e8f:	e8 68 f4 ff ff       	call   c00182fc <Virt::swapIDToSector(unsigned long)>
c0018e94:	31 d2                	xor    edx,edx
c0018e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0018e99:	81 c6 00 02 00 00    	add    esi,0x200
c0018e9f:	6a 01                	push   0x1
c0018ea1:	52                   	push   edx
c0018ea2:	01 d8                	add    eax,ebx
c0018ea4:	83 c3 01             	add    ebx,0x1
c0018ea7:	50                   	push   eax
c0018ea8:	0f be 05 18 43 03 c0 	movsx  eax,BYTE PTR ds:0xc0034318
c0018eaf:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018eb6:	50                   	push   eax
c0018eb7:	e8 4a 3c 00 00       	call   c001cb06 <LogicalDisk::write(unsigned long long, int, void*)>
c0018ebc:	83 c4 20             	add    esp,0x20
c0018ebf:	39 1d 0c 43 03 c0    	cmp    DWORD PTR ds:0xc003430c,ebx
c0018ec5:	7f c4                	jg     c0018e8b <VAS::evict(unsigned long)+0x27>
c0018ec7:	c1 e7 0c             	shl    edi,0xc
c0018eca:	83 ec 08             	sub    esp,0x8
c0018ecd:	55                   	push   ebp
c0018ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ed2:	50                   	push   eax
c0018ed3:	e8 da f5 ff ff       	call   c00184b2 <VAS::getPageTableEntry(unsigned long)>
c0018ed8:	8b 10                	mov    edx,DWORD PTR [eax]
c0018eda:	89 d3                	mov    ebx,edx
c0018edc:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018ee2:	09 d7                	or     edi,edx
c0018ee4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018eea:	89 38                	mov    DWORD PTR [eax],edi
c0018eec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018eef:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018ef5:	83 c2 01             	add    edx,0x1
c0018ef8:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018efe:	e8 3f da ff ff       	call   c0016942 <Phys::freePage(unsigned long)>
c0018f03:	0f 20 d8             	mov    eax,cr3
c0018f06:	0f 22 d8             	mov    cr3,eax
c0018f09:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018f0f:	51                   	push   ecx
c0018f10:	55                   	push   ebp
c0018f11:	53                   	push   ebx
c0018f12:	68 90 1a 03 c0       	push   0xc0031a90
c0018f17:	e8 b6 05 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0018f1c:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018f21:	c7 44 24 50 4a 1c 03 c0 	mov    DWORD PTR [esp+0x50],0xc0031c4a
c0018f29:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018f2d:	8d 50 01             	lea    edx,[eax+0x1]
c0018f30:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018f36:	83 c4 3c             	add    esp,0x3c
c0018f39:	5b                   	pop    ebx
c0018f3a:	5e                   	pop    esi
c0018f3b:	5f                   	pop    edi
c0018f3c:	5d                   	pop    ebp
c0018f3d:	e9 90 05 00 00       	jmp    c00194d2 <Dbg::kprintf(char const*, ...)>

c0018f42 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018f42:	55                   	push   ebp
c0018f43:	57                   	push   edi
c0018f44:	56                   	push   esi
c0018f45:	53                   	push   ebx
c0018f46:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018f4c:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0018f53:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0018f59:	77 78                	ja     c0018fd3 <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c0018f5b:	83 ec 08             	sub    esp,0x8
c0018f5e:	53                   	push   ebx
c0018f5f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018f65:	68 6d 1c 03 c0       	push   0xc0031c6d
c0018f6a:	e8 63 05 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0018f6f:	58                   	pop    eax
c0018f70:	5a                   	pop    edx
c0018f71:	53                   	push   ebx
c0018f72:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018f79:	51                   	push   ecx
c0018f7a:	e8 33 f5 ff ff       	call   c00184b2 <VAS::getPageTableEntry(unsigned long)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	85 c0                	test   eax,eax
c0018f84:	89 c5                	mov    ebp,eax
c0018f86:	0f 95 c0             	setne  al
c0018f89:	85 db                	test   ebx,ebx
c0018f8b:	0f 95 c2             	setne  dl
c0018f8e:	21 d0                	and    eax,edx
c0018f90:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018f94:	a8 01                	test   al,0x1
c0018f96:	75 0f                	jne    c0018fa7 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0018f98:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018f9c:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018fa2:	5b                   	pop    ebx
c0018fa3:	5e                   	pop    esi
c0018fa4:	5f                   	pop    edi
c0018fa5:	5d                   	pop    ebp
c0018fa6:	c3                   	ret    
c0018fa7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018faa:	f6 c4 02             	test   ah,0x2
c0018fad:	75 39                	jne    c0018fe8 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0018faf:	89 c2                	mov    edx,eax
c0018fb1:	81 e2 01 04 00 00    	and    edx,0x401
c0018fb7:	81 fa 00 04 00 00    	cmp    edx,0x400
c0018fbd:	74 73                	je     c0019032 <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c0018fbf:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018fc4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018fc8:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018fce:	5b                   	pop    ebx
c0018fcf:	5e                   	pop    esi
c0018fd0:	5f                   	pop    edi
c0018fd1:	5d                   	pop    ebp
c0018fd2:	c3                   	ret    
c0018fd3:	83 ec 0c             	sub    esp,0xc
c0018fd6:	68 5b 1c 03 c0       	push   0xc0031c5b
c0018fdb:	e8 b6 75 00 00       	call   c0020596 <KePanic(char const*)>
c0018fe0:	83 c4 10             	add    esp,0x10
c0018fe3:	e9 73 ff ff ff       	jmp    c0018f5b <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0018fe8:	83 ec 0c             	sub    esp,0xc
c0018feb:	89 de                	mov    esi,ebx
c0018fed:	68 c0 1a 03 c0       	push   0xc0031ac0
c0018ff2:	e8 db 04 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0018ff7:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018ffb:	e8 ab d9 ff ff       	call   c00169ab <Phys::allocatePage()>
c0019000:	ba 00 10 00 00       	mov    edx,0x1000
c0019005:	89 d1                	mov    ecx,edx
c0019007:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019009:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001900c:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0019012:	09 c8                	or     eax,ecx
c0019014:	83 c8 02             	or     eax,0x2
c0019017:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001901a:	0f 20 d8             	mov    eax,cr3
c001901d:	0f 22 d8             	mov    cr3,eax
c0019020:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019024:	89 df                	mov    edi,ebx
c0019026:	89 d1                	mov    ecx,edx
c0019028:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001902a:	83 c4 10             	add    esp,0x10
c001902d:	e9 66 ff ff ff       	jmp    c0018f98 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0019032:	c1 e8 0c             	shr    eax,0xc
c0019035:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019039:	e8 6d d9 ff ff       	call   c00169ab <Phys::allocatePage()>
c001903e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019041:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0019047:	09 c2                	or     edx,eax
c0019049:	81 ca 01 08 00 00    	or     edx,0x801
c001904f:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0019052:	a1 0c 43 03 c0       	mov    eax,ds:0xc003430c
c0019057:	85 c0                	test   eax,eax
c0019059:	7e 44                	jle    c001909f <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c001905b:	89 df                	mov    edi,ebx
c001905d:	31 f6                	xor    esi,esi
c001905f:	83 ec 0c             	sub    esp,0xc
c0019062:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019066:	51                   	push   ecx
c0019067:	e8 90 f2 ff ff       	call   c00182fc <Virt::swapIDToSector(unsigned long)>
c001906c:	31 d2                	xor    edx,edx
c001906e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019071:	81 c7 00 02 00 00    	add    edi,0x200
c0019077:	6a 01                	push   0x1
c0019079:	52                   	push   edx
c001907a:	01 f0                	add    eax,esi
c001907c:	83 c6 01             	add    esi,0x1
c001907f:	50                   	push   eax
c0019080:	0f be 05 18 43 03 c0 	movsx  eax,BYTE PTR ds:0xc0034318
c0019087:	8b 2c 85 7c f2 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc0d84]
c001908e:	55                   	push   ebp
c001908f:	e8 06 3a 00 00       	call   c001ca9a <LogicalDisk::read(unsigned long long, int, void*)>
c0019094:	83 c4 20             	add    esp,0x20
c0019097:	39 35 0c 43 03 c0    	cmp    DWORD PTR ds:0xc003430c,esi
c001909d:	7f c0                	jg     c001905f <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c001909f:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c00190a4:	83 ec 04             	sub    esp,0x4
c00190a7:	83 e8 01             	sub    eax,0x1
c00190aa:	50                   	push   eax
c00190ab:	53                   	push   ebx
c00190ac:	68 80 1c 03 c0       	push   0xc0031c80
c00190b1:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c00190b6:	e8 17 04 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00190bb:	58                   	pop    eax
c00190bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00190c0:	52                   	push   edx
c00190c1:	e8 13 f2 ff ff       	call   c00182d9 <Virt::freeSwapfilePage(unsigned long)>
c00190c6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	83 e8 01             	sub    eax,0x1
c00190d1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00190d6:	85 c0                	test   eax,eax
c00190d8:	75 01                	jne    c00190db <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c00190da:	fb                   	sti    
c00190db:	0f 20 d8             	mov    eax,cr3
c00190de:	0f 22 d8             	mov    cr3,eax
c00190e1:	e9 b2 fe ff ff       	jmp    c0018f98 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c00190e6 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00190e6:	55                   	push   ebp
c00190e7:	57                   	push   edi
c00190e8:	56                   	push   esi
c00190e9:	53                   	push   ebx
c00190ea:	83 ec 28             	sub    esp,0x28
c00190ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00190f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00190f5:	50                   	push   eax
c00190f6:	e8 c2 f0 ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c00190fb:	83 c4 0c             	add    esp,0xc
c00190fe:	6a 07                	push   0x7
c0019100:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019104:	52                   	push   edx
c0019105:	89 c5                	mov    ebp,eax
c0019107:	53                   	push   ebx
c0019108:	e8 c1 f8 ff ff       	call   c00189ce <VAS::allocatePages(int, int)>
c001910d:	83 c4 10             	add    esp,0x10
c0019110:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019114:	89 c7                	mov    edi,eax
c0019116:	85 c9                	test   ecx,ecx
c0019118:	74 2f                	je     c0019149 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001911a:	31 f6                	xor    esi,esi
c001911c:	e8 8a d8 ff ff       	call   c00169ab <Phys::allocatePage()>
c0019121:	83 c6 01             	add    esi,0x1
c0019124:	6a 03                	push   0x3
c0019126:	55                   	push   ebp
c0019127:	50                   	push   eax
c0019128:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001912c:	53                   	push   ebx
c001912d:	e8 94 f7 ff ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0019132:	6a 07                	push   0x7
c0019134:	57                   	push   edi
c0019135:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019139:	50                   	push   eax
c001913a:	53                   	push   ebx
c001913b:	e8 86 f7 ff ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0019140:	83 c4 20             	add    esp,0x20
c0019143:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0019147:	75 d3                	jne    c001911c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0019149:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001914d:	89 28                	mov    DWORD PTR [eax],ebp
c001914f:	83 c4 1c             	add    esp,0x1c
c0019152:	89 f8                	mov    eax,edi
c0019154:	5b                   	pop    ebx
c0019155:	5e                   	pop    esi
c0019156:	5f                   	pop    edi
c0019157:	5d                   	pop    ebp
c0019158:	c3                   	ret    
c0019159:	90                   	nop

c001915a <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001915a:	53                   	push   ebx
c001915b:	83 ec 14             	sub    esp,0x14
c001915e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019162:	68 e0 1a 03 c0       	push   0xc0031ae0
c0019167:	e8 66 03 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001916c:	c7 04 24 40 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b40
c0019173:	e8 5a 03 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0019178:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001917c:	83 c4 18             	add    esp,0x18
c001917f:	5b                   	pop    ebx
c0019180:	e9 4c f3 ff ff       	jmp    c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0019185:	90                   	nop

c0019186 <VAS::scanForEviction()>:
c0019186:	57                   	push   edi
c0019187:	56                   	push   esi
c0019188:	31 f6                	xor    esi,esi
c001918a:	53                   	push   ebx
c001918b:	83 ec 10             	sub    esp,0x10
c001918e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019192:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0019195:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001919b:	75 0e                	jne    c00191ab <VAS::scanForEviction()+0x25>
c001919d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00191a0:	89 da                	mov    edx,ebx
c00191a2:	c1 ea 16             	shr    edx,0x16
c00191a5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00191a9:	74 57                	je     c0019202 <VAS::scanForEviction()+0x7c>
c00191ab:	53                   	push   ebx
c00191ac:	57                   	push   edi
c00191ad:	e8 00 f3 ff ff       	call   c00184b2 <VAS::getPageTableEntry(unsigned long)>
c00191b2:	5a                   	pop    edx
c00191b3:	59                   	pop    ecx
c00191b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00191b6:	89 d1                	mov    ecx,edx
c00191b8:	c1 e9 0c             	shr    ecx,0xc
c00191bb:	74 10                	je     c00191cd <VAS::scanForEviction()+0x47>
c00191bd:	89 d1                	mov    ecx,edx
c00191bf:	81 e1 01 08 00 00    	and    ecx,0x801
c00191c5:	81 f9 01 08 00 00    	cmp    ecx,0x801
c00191cb:	74 40                	je     c001920d <VAS::scanForEviction()+0x87>
c00191cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00191d3:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00191d9:	76 2d                	jbe    c0019208 <VAS::scanForEviction()+0x82>
c00191db:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c00191e2:	83 c6 01             	add    esi,0x1
c00191e5:	83 fe 03             	cmp    esi,0x3
c00191e8:	74 32                	je     c001921c <VAS::scanForEviction()+0x96>
c00191ea:	31 db                	xor    ebx,ebx
c00191ec:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00191f2:	75 b7                	jne    c00191ab <VAS::scanForEviction()+0x25>
c00191f4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00191f7:	89 da                	mov    edx,ebx
c00191f9:	c1 ea 16             	shr    edx,0x16
c00191fc:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019200:	75 a9                	jne    c00191ab <VAS::scanForEviction()+0x25>
c0019202:	81 c3 00 00 40 00    	add    ebx,0x400000
c0019208:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001920b:	eb 88                	jmp    c0019195 <VAS::scanForEviction()+0xf>
c001920d:	f6 c2 20             	test   dl,0x20
c0019210:	74 13                	je     c0019225 <VAS::scanForEviction()+0x9f>
c0019212:	83 e2 df             	and    edx,0xffffffdf
c0019215:	89 10                	mov    DWORD PTR [eax],edx
c0019217:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001921a:	eb b1                	jmp    c00191cd <VAS::scanForEviction()+0x47>
c001921c:	83 c4 10             	add    esp,0x10
c001921f:	31 c0                	xor    eax,eax
c0019221:	5b                   	pop    ebx
c0019222:	5e                   	pop    esi
c0019223:	5f                   	pop    edi
c0019224:	c3                   	ret    
c0019225:	89 d0                	mov    eax,edx
c0019227:	83 ec 08             	sub    esp,0x8
c001922a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001922f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019233:	53                   	push   ebx
c0019234:	68 95 1c 03 c0       	push   0xc0031c95
c0019239:	e8 94 02 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001923e:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0019241:	58                   	pop    eax
c0019242:	5a                   	pop    edx
c0019243:	51                   	push   ecx
c0019244:	57                   	push   edi
c0019245:	e8 1a fc ff ff       	call   c0018e64 <VAS::evict(unsigned long)>
c001924a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001924d:	5b                   	pop    ebx
c001924e:	5e                   	pop    esi
c001924f:	50                   	push   eax
c0019250:	68 a9 1c 03 c0       	push   0xc0031ca9
c0019255:	e8 78 02 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001925a:	58                   	pop    eax
c001925b:	5a                   	pop    edx
c001925c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019260:	50                   	push   eax
c0019261:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019265:	68 bc 1c 03 c0       	push   0xc0031cbc
c001926a:	e8 63 02 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001926f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0019272:	83 c4 10             	add    esp,0x10
c0019275:	81 c1 00 10 00 00    	add    ecx,0x1000
c001927b:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c001927e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019282:	83 c4 10             	add    esp,0x10
c0019285:	5b                   	pop    ebx
c0019286:	5e                   	pop    esi
c0019287:	5f                   	pop    edi
c0019288:	c3                   	ret    

c0019289 <mapVASFirstTime>:
c0019289:	55                   	push   ebp
c001928a:	57                   	push   edi
c001928b:	56                   	push   esi
c001928c:	53                   	push   ebx
c001928d:	83 ec 0c             	sub    esp,0xc
c0019290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019295:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0019298:	83 fa 01             	cmp    edx,0x1
c001929b:	0f 84 cb 00 00 00    	je     c001936c <mapVASFirstTime+0xe3>
c00192a1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00192a4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00192a9:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00192ae:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00192b1:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00192b7:	c1 e5 15             	shl    ebp,0x15
c00192ba:	29 eb                	sub    ebx,ebp
c00192bc:	29 ef                	sub    edi,ebp
c00192be:	e8 e8 d6 ff ff       	call   c00169ab <Phys::allocatePage()>
c00192c3:	83 ec 0c             	sub    esp,0xc
c00192c6:	68 03 04 00 00       	push   0x403
c00192cb:	6a 01                	push   0x1
c00192cd:	53                   	push   ebx
c00192ce:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00192d4:	50                   	push   eax
c00192d5:	56                   	push   esi
c00192d6:	e8 f5 f7 ff ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00192db:	83 c4 20             	add    esp,0x20
c00192de:	39 fb                	cmp    ebx,edi
c00192e0:	75 dc                	jne    c00192be <mapVASFirstTime+0x35>
c00192e2:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00192e7:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00192ec:	29 eb                	sub    ebx,ebp
c00192ee:	29 ef                	sub    edi,ebp
c00192f0:	e8 b6 d6 ff ff       	call   c00169ab <Phys::allocatePage()>
c00192f5:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00192f9:	83 fa 01             	cmp    edx,0x1
c00192fc:	19 d2                	sbb    edx,edx
c00192fe:	83 ec 0c             	sub    esp,0xc
c0019301:	83 e2 04             	and    edx,0x4
c0019304:	81 c2 03 04 00 00    	add    edx,0x403
c001930a:	52                   	push   edx
c001930b:	6a 01                	push   0x1
c001930d:	53                   	push   ebx
c001930e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019314:	50                   	push   eax
c0019315:	56                   	push   esi
c0019316:	e8 b5 f7 ff ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001931b:	83 c4 20             	add    esp,0x20
c001931e:	39 df                	cmp    edi,ebx
c0019320:	75 ce                	jne    c00192f0 <mapVASFirstTime+0x67>
c0019322:	83 ec 0c             	sub    esp,0xc
c0019325:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c001932a:	6a 04                	push   0x4
c001932c:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c0019332:	6a ff                	push   0xffffffff
c0019334:	c1 eb 0c             	shr    ebx,0xc
c0019337:	53                   	push   ebx
c0019338:	68 00 50 03 c0       	push   0xc0035000
c001933d:	56                   	push   esi
c001933e:	e8 09 f3 ff ff       	call   c001864c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019343:	83 c4 14             	add    esp,0x14
c0019346:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c001934b:	6a 04                	push   0x4
c001934d:	6a ff                	push   0xffffffff
c001934f:	53                   	push   ebx
c0019350:	68 00 50 03 c0       	push   0xc0035000
c0019355:	50                   	push   eax
c0019356:	e8 f1 f2 ff ff       	call   c001864c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001935b:	0f 20 d8             	mov    eax,cr3
c001935e:	0f 22 d8             	mov    cr3,eax
c0019361:	83 c4 20             	add    esp,0x20
c0019364:	83 c4 0c             	add    esp,0xc
c0019367:	5b                   	pop    ebx
c0019368:	5e                   	pop    esi
c0019369:	5f                   	pop    edi
c001936a:	5d                   	pop    ebp
c001936b:	c3                   	ret    
c001936c:	83 ec 0c             	sub    esp,0xc
c001936f:	68 c9 1c 03 c0       	push   0xc0031cc9
c0019374:	e8 59 01 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0019379:	83 c4 10             	add    esp,0x10
c001937c:	83 c4 0c             	add    esp,0xc
c001937f:	5b                   	pop    ebx
c0019380:	5e                   	pop    esi
c0019381:	5f                   	pop    edi
c0019382:	5d                   	pop    ebp
c0019383:	c3                   	ret    

c0019384 <__cxa_atexit>:
c0019384:	31 c0                	xor    eax,eax
c0019386:	c3                   	ret    

c0019387 <__cxa_finalize>:
c0019387:	c3                   	ret    

c0019388 <__stack_chk_fail>:
c0019388:	55                   	push   ebp
c0019389:	89 e5                	mov    ebp,esp
c001938b:	83 ec 10             	sub    esp,0x10
c001938e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019391:	68 e2 1c 03 c0       	push   0xc0031ce2
c0019396:	e8 37 01 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001939b:	58                   	pop    eax
c001939c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001939f:	5a                   	pop    edx
c00193a0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00193a3:	68 e2 1c 03 c0       	push   0xc0031ce2
c00193a8:	e8 25 01 00 00       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00193ad:	c7 04 24 ea 1c 03 c0 	mov    DWORD PTR [esp],0xc0031cea
c00193b4:	e8 dd 71 00 00       	call   c0020596 <KePanic(char const*)>
c00193b9:	83 c4 10             	add    esp,0x10
c00193bc:	c9                   	leave  
c00193bd:	c3                   	ret    

c00193be <__cxa_pure_virtual>:
c00193be:	83 ec 18             	sub    esp,0x18
c00193c1:	68 02 1d 03 c0       	push   0xc0031d02
c00193c6:	e8 cb 71 00 00       	call   c0020596 <KePanic(char const*)>
c00193cb:	83 c4 1c             	add    esp,0x1c
c00193ce:	c3                   	ret    

c00193cf <operator new[](unsigned long)>:
c00193cf:	e9 c8 d2 ff ff       	jmp    c001669c <malloc>

c00193d4 <operator delete(void*, unsigned long)>:
c00193d4:	e9 e3 d2 ff ff       	jmp    c00166bc <rfree>

c00193d9 <operator delete[](void*)>:
c00193d9:	e9 de d2 ff ff       	jmp    c00166bc <rfree>

c00193de <operator delete[](void*, unsigned long)>:
c00193de:	e9 d9 d2 ff ff       	jmp    c00166bc <rfree>

c00193e3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00193e3:	55                   	push   ebp
c00193e4:	57                   	push   edi
c00193e5:	56                   	push   esi
c00193e6:	53                   	push   ebx
c00193e7:	83 ec 20             	sub    esp,0x20
c00193ea:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00193ee:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c00193f6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00193fa:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0019402:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019406:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c001940e:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0019416:	89 f7                	mov    edi,esi
c0019418:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001941d:	89 eb                	mov    ebx,ebp
c001941f:	eb 02                	jmp    c0019423 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0019421:	89 c7                	mov    edi,eax
c0019423:	31 d2                	xor    edx,edx
c0019425:	89 f8                	mov    eax,edi
c0019427:	f7 f1                	div    ecx
c0019429:	83 c3 01             	add    ebx,0x1
c001942c:	39 cf                	cmp    edi,ecx
c001942e:	73 f1                	jae    c0019421 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0019430:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0019433:	eb 02                	jmp    c0019437 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0019435:	89 c6                	mov    esi,eax
c0019437:	31 d2                	xor    edx,edx
c0019439:	89 f0                	mov    eax,esi
c001943b:	f7 f1                	div    ecx
c001943d:	83 eb 01             	sub    ebx,0x1
c0019440:	39 ce                	cmp    esi,ecx
c0019442:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0019446:	88 13                	mov    BYTE PTR [ebx],dl
c0019448:	73 eb                	jae    c0019435 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c001944a:	83 c4 20             	add    esp,0x20
c001944d:	89 e8                	mov    eax,ebp
c001944f:	5b                   	pop    ebx
c0019450:	5e                   	pop    esi
c0019451:	5f                   	pop    edi
c0019452:	5d                   	pop    ebp
c0019453:	c3                   	ret    

c0019454 <Dbg::logc(char)>:
c0019454:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001945b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001945f:	75 12                	jne    c0019473 <Dbg::logc(char)+0x1f>
c0019461:	ba fd 03 00 00       	mov    edx,0x3fd
c0019466:	ec                   	in     al,dx
c0019467:	a8 20                	test   al,0x20
c0019469:	74 fb                	je     c0019466 <Dbg::logc(char)+0x12>
c001946b:	ba f8 03 00 00       	mov    edx,0x3f8
c0019470:	88 c8                	mov    al,cl
c0019472:	ee                   	out    dx,al
c0019473:	c3                   	ret    

c0019474 <Dbg::logs(char*)>:
c0019474:	53                   	push   ebx
c0019475:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019479:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001947c:	85 c0                	test   eax,eax
c001947e:	74 11                	je     c0019491 <Dbg::logs(char*)+0x1d>
c0019480:	50                   	push   eax
c0019481:	83 c3 01             	add    ebx,0x1
c0019484:	e8 cb ff ff ff       	call   c0019454 <Dbg::logc(char)>
c0019489:	58                   	pop    eax
c001948a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001948d:	85 c0                	test   eax,eax
c001948f:	75 ef                	jne    c0019480 <Dbg::logs(char*)+0xc>
c0019491:	5b                   	pop    ebx
c0019492:	c3                   	ret    

c0019493 <Dbg::logWriteInt(unsigned int)>:
c0019493:	83 ec 10             	sub    esp,0x10
c0019496:	6a 0a                	push   0xa
c0019498:	8d 44 24 08          	lea    eax,[esp+0x8]
c001949c:	50                   	push   eax
c001949d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194a1:	50                   	push   eax
c00194a2:	e8 3c ff ff ff       	call   c00193e3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00194a7:	50                   	push   eax
c00194a8:	e8 c7 ff ff ff       	call   c0019474 <Dbg::logs(char*)>
c00194ad:	83 c4 20             	add    esp,0x20
c00194b0:	c3                   	ret    

c00194b1 <Dbg::logWriteIntBase(unsigned int, int)>:
c00194b1:	83 ec 10             	sub    esp,0x10
c00194b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00194b8:	50                   	push   eax
c00194b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194bd:	50                   	push   eax
c00194be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00194c2:	52                   	push   edx
c00194c3:	e8 1b ff ff ff       	call   c00193e3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00194c8:	50                   	push   eax
c00194c9:	e8 a6 ff ff ff       	call   c0019474 <Dbg::logs(char*)>
c00194ce:	83 c4 20             	add    esp,0x20
c00194d1:	c3                   	ret    

c00194d2 <Dbg::kprintf(char const*, ...)>:
c00194d2:	55                   	push   ebp
c00194d3:	57                   	push   edi
c00194d4:	56                   	push   esi
c00194d5:	53                   	push   ebx
c00194d6:	83 ec 0c             	sub    esp,0xc
c00194d9:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00194e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194e4:	74 08                	je     c00194ee <Dbg::kprintf(char const*, ...)+0x1c>
c00194e6:	83 c4 0c             	add    esp,0xc
c00194e9:	5b                   	pop    ebx
c00194ea:	5e                   	pop    esi
c00194eb:	5f                   	pop    edi
c00194ec:	5d                   	pop    ebp
c00194ed:	c3                   	ret    
c00194ee:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194f2:	31 ff                	xor    edi,edi
c00194f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194f8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194fb:	85 c0                	test   eax,eax
c00194fd:	74 e7                	je     c00194e6 <Dbg::kprintf(char const*, ...)+0x14>
c00194ff:	8d 77 01             	lea    esi,[edi+0x1]
c0019502:	83 f8 25             	cmp    eax,0x25
c0019505:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019508:	75 47                	jne    c0019551 <Dbg::kprintf(char const*, ...)+0x7f>
c001950a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001950d:	83 c7 02             	add    edi,0x2
c0019510:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0019513:	83 e8 25             	sub    eax,0x25
c0019516:	0f b6 c0             	movzx  eax,al
c0019519:	83 f8 53             	cmp    eax,0x53
c001951c:	0f 87 ce 00 00 00    	ja     c00195f0 <Dbg::kprintf(char const*, ...)+0x11e>
c0019522:	ff 24 85 18 1d 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce2e8]
c0019529:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001952d:	89 c8                	mov    eax,ecx
c001952f:	83 c1 04             	add    ecx,0x4
c0019532:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019536:	8b 28                	mov    ebp,DWORD PTR [eax]
c0019538:	55                   	push   ebp
c0019539:	e8 55 ff ff ff       	call   c0019493 <Dbg::logWriteInt(unsigned int)>
c001953e:	58                   	pop    eax
c001953f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0019542:	85 c0                	test   eax,eax
c0019544:	74 a0                	je     c00194e6 <Dbg::kprintf(char const*, ...)+0x14>
c0019546:	8d 77 01             	lea    esi,[edi+0x1]
c0019549:	83 f8 25             	cmp    eax,0x25
c001954c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001954f:	74 b9                	je     c001950a <Dbg::kprintf(char const*, ...)+0x38>
c0019551:	50                   	push   eax
c0019552:	89 f7                	mov    edi,esi
c0019554:	e8 fb fe ff ff       	call   c0019454 <Dbg::logc(char)>
c0019559:	89 ee                	mov    esi,ebp
c001955b:	58                   	pop    eax
c001955c:	eb e1                	jmp    c001953f <Dbg::kprintf(char const*, ...)+0x6d>
c001955e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019562:	89 c8                	mov    eax,ecx
c0019564:	83 c1 04             	add    ecx,0x4
c0019567:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001956b:	8b 00                	mov    eax,DWORD PTR [eax]
c001956d:	50                   	push   eax
c001956e:	e8 01 ff ff ff       	call   c0019474 <Dbg::logs(char*)>
c0019573:	58                   	pop    eax
c0019574:	eb c9                	jmp    c001953f <Dbg::kprintf(char const*, ...)+0x6d>
c0019576:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001957a:	89 d0                	mov    eax,edx
c001957c:	83 c2 04             	add    edx,0x4
c001957f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019583:	8b 00                	mov    eax,DWORD PTR [eax]
c0019585:	50                   	push   eax
c0019586:	e8 08 ff ff ff       	call   c0019493 <Dbg::logWriteInt(unsigned int)>
c001958b:	58                   	pop    eax
c001958c:	eb b1                	jmp    c001953f <Dbg::kprintf(char const*, ...)+0x6d>
c001958e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019592:	89 d0                	mov    eax,edx
c0019594:	83 c2 04             	add    edx,0x4
c0019597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001959b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001959e:	50                   	push   eax
c001959f:	e8 b0 fe ff ff       	call   c0019454 <Dbg::logc(char)>
c00195a4:	58                   	pop    eax
c00195a5:	eb 98                	jmp    c001953f <Dbg::kprintf(char const*, ...)+0x6d>
c00195a7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00195ab:	89 c8                	mov    eax,ecx
c00195ad:	83 c1 04             	add    ecx,0x4
c00195b0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00195b4:	6a 10                	push   0x10
c00195b6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00195b8:	51                   	push   ecx
c00195b9:	e8 f3 fe ff ff       	call   c00194b1 <Dbg::logWriteIntBase(unsigned int, int)>
c00195be:	5d                   	pop    ebp
c00195bf:	58                   	pop    eax
c00195c0:	e9 7a ff ff ff       	jmp    c001953f <Dbg::kprintf(char const*, ...)+0x6d>
c00195c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00195c9:	89 d0                	mov    eax,edx
c00195cb:	83 c2 08             	add    edx,0x8
c00195ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00195d2:	6a 10                	push   0x10
c00195d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00195d6:	50                   	push   eax
c00195d7:	e8 d5 fe ff ff       	call   c00194b1 <Dbg::logWriteIntBase(unsigned int, int)>
c00195dc:	58                   	pop    eax
c00195dd:	5a                   	pop    edx
c00195de:	e9 5c ff ff ff       	jmp    c001953f <Dbg::kprintf(char const*, ...)+0x6d>
c00195e3:	6a 25                	push   0x25
c00195e5:	e8 6a fe ff ff       	call   c0019454 <Dbg::logc(char)>
c00195ea:	5a                   	pop    edx
c00195eb:	e9 4f ff ff ff       	jmp    c001953f <Dbg::kprintf(char const*, ...)+0x6d>
c00195f0:	6a 25                	push   0x25
c00195f2:	e8 5d fe ff ff       	call   c0019454 <Dbg::logc(char)>
c00195f7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00195fb:	50                   	push   eax
c00195fc:	e8 53 fe ff ff       	call   c0019454 <Dbg::logc(char)>
c0019601:	5a                   	pop    edx
c0019602:	59                   	pop    ecx
c0019603:	e9 37 ff ff ff       	jmp    c001953f <Dbg::kprintf(char const*, ...)+0x6d>

c0019608 <KiUbsanPrintDetails(char const*, void*)>:
c0019608:	83 ec 1c             	sub    esp,0x1c
c001960b:	83 ec 08             	sub    esp,0x8
c001960e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019612:	68 68 1e 03 c0       	push   0xc0031e68
c0019617:	e8 b6 fe ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001961c:	83 c4 10             	add    esp,0x10
c001961f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019623:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001962b:	8b 00                	mov    eax,DWORD PTR [eax]
c001962d:	83 ec 08             	sub    esp,0x8
c0019630:	50                   	push   eax
c0019631:	68 7c 1e 03 c0       	push   0xc0031e7c
c0019636:	e8 97 fe ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019642:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019645:	83 ec 08             	sub    esp,0x8
c0019648:	50                   	push   eax
c0019649:	68 86 1e 03 c0       	push   0xc0031e86
c001964e:	e8 7f fe ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0019653:	83 c4 10             	add    esp,0x10
c0019656:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001965a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001965d:	83 ec 08             	sub    esp,0x8
c0019660:	50                   	push   eax
c0019661:	68 90 1e 03 c0       	push   0xc0031e90
c0019666:	e8 67 fe ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001966b:	83 c4 10             	add    esp,0x10
c001966e:	90                   	nop
c001966f:	83 c4 1c             	add    esp,0x1c
c0019672:	c3                   	ret    
c0019673:	90                   	nop

c0019674 <__ubsan_handle_type_mismatch_v1>:
c0019674:	83 ec 0c             	sub    esp,0xc
c0019677:	83 ec 08             	sub    esp,0x8
c001967a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001967e:	68 d4 1f 03 c0       	push   0xc0031fd4
c0019683:	e8 80 ff ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019688:	83 c4 10             	add    esp,0x10
c001968b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019690:	75 16                	jne    c00196a8 <__ubsan_handle_type_mismatch_v1+0x34>
c0019692:	83 ec 0c             	sub    esp,0xc
c0019695:	68 9a 1e 03 c0       	push   0xc0031e9a
c001969a:	e8 33 fe ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	e9 91 00 00 00       	jmp    c0019738 <__ubsan_handle_type_mismatch_v1+0xc4>
c00196a7:	90                   	nop
c00196a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00196af:	85 c0                	test   eax,eax
c00196b1:	74 29                	je     c00196dc <__ubsan_handle_type_mismatch_v1+0x68>
c00196b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00196ba:	83 e8 01             	sub    eax,0x1
c00196bd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00196c1:	75 19                	jne    c00196dc <__ubsan_handle_type_mismatch_v1+0x68>
c00196c3:	83 ec 08             	sub    esp,0x8
c00196c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196ca:	68 f4 1f 03 c0       	push   0xc0031ff4
c00196cf:	e8 fe fd ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00196d4:	83 c4 10             	add    esp,0x10
c00196d7:	eb 5f                	jmp    c0019738 <__ubsan_handle_type_mismatch_v1+0xc4>
c00196d9:	8d 76 00             	lea    esi,[esi+0x0]
c00196dc:	83 ec 0c             	sub    esp,0xc
c00196df:	68 af 1e 03 c0       	push   0xc0031eaf
c00196e4:	e8 e9 fd ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00196e9:	83 c4 10             	add    esp,0x10
c00196ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196f0:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00196f3:	0f b6 c0             	movzx  eax,al
c00196f6:	83 ec 08             	sub    esp,0x8
c00196f9:	50                   	push   eax
c00196fa:	68 c9 1e 03 c0       	push   0xc0031ec9
c00196ff:	e8 ce fd ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0019704:	83 c4 10             	add    esp,0x10
c0019707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001970b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001970e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019711:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019719:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001971c:	0f b6 c0             	movzx  eax,al
c001971f:	8b 04 85 20 43 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbce0]
c0019726:	51                   	push   ecx
c0019727:	52                   	push   edx
c0019728:	50                   	push   eax
c0019729:	68 1c 20 03 c0       	push   0xc003201c
c001972e:	e8 9f fd ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0019733:	83 c4 10             	add    esp,0x10
c0019736:	66 90                	xchg   ax,ax
c0019738:	83 ec 0c             	sub    esp,0xc
c001973b:	68 d4 1f 03 c0       	push   0xc0031fd4
c0019740:	e8 51 6e 00 00       	call   c0020596 <KePanic(char const*)>
c0019745:	83 c4 10             	add    esp,0x10
c0019748:	90                   	nop
c0019749:	83 c4 0c             	add    esp,0xc
c001974c:	c3                   	ret    
c001974d:	8d 76 00             	lea    esi,[esi+0x0]

c0019750 <__ubsan_handle_pointer_overflow>:
c0019750:	83 ec 0c             	sub    esp,0xc
c0019753:	83 ec 08             	sub    esp,0x8
c0019756:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001975a:	68 64 20 03 c0       	push   0xc0032064
c001975f:	e8 a4 fe ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019764:	83 c4 10             	add    esp,0x10
c0019767:	83 ec 0c             	sub    esp,0xc
c001976a:	68 64 20 03 c0       	push   0xc0032064
c001976f:	e8 22 6e 00 00       	call   c0020596 <KePanic(char const*)>
c0019774:	83 c4 10             	add    esp,0x10
c0019777:	90                   	nop
c0019778:	83 c4 0c             	add    esp,0xc
c001977b:	c3                   	ret    

c001977c <__ubsan_handle_out_of_bounds>:
c001977c:	83 ec 0c             	sub    esp,0xc
c001977f:	83 ec 08             	sub    esp,0x8
c0019782:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019786:	68 d4 1e 03 c0       	push   0xc0031ed4
c001978b:	e8 78 fe ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019790:	83 c4 10             	add    esp,0x10
c0019793:	83 ec 0c             	sub    esp,0xc
c0019796:	68 d4 1e 03 c0       	push   0xc0031ed4
c001979b:	e8 f6 6d 00 00       	call   c0020596 <KePanic(char const*)>
c00197a0:	83 c4 10             	add    esp,0x10
c00197a3:	90                   	nop
c00197a4:	83 c4 0c             	add    esp,0xc
c00197a7:	c3                   	ret    

c00197a8 <__ubsan_handle_add_overflow>:
c00197a8:	83 ec 0c             	sub    esp,0xc
c00197ab:	83 ec 08             	sub    esp,0x8
c00197ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197b2:	68 f1 1e 03 c0       	push   0xc0031ef1
c00197b7:	e8 4c fe ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c00197bc:	83 c4 10             	add    esp,0x10
c00197bf:	83 ec 0c             	sub    esp,0xc
c00197c2:	68 f1 1e 03 c0       	push   0xc0031ef1
c00197c7:	e8 ca 6d 00 00       	call   c0020596 <KePanic(char const*)>
c00197cc:	83 c4 10             	add    esp,0x10
c00197cf:	90                   	nop
c00197d0:	83 c4 0c             	add    esp,0xc
c00197d3:	c3                   	ret    

c00197d4 <__ubsan_handle_load_invalid_value>:
c00197d4:	83 ec 0c             	sub    esp,0xc
c00197d7:	83 ec 08             	sub    esp,0x8
c00197da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197de:	68 84 20 03 c0       	push   0xc0032084
c00197e3:	e8 20 fe ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c00197e8:	83 c4 10             	add    esp,0x10
c00197eb:	83 ec 0c             	sub    esp,0xc
c00197ee:	68 84 20 03 c0       	push   0xc0032084
c00197f3:	e8 9e 6d 00 00       	call   c0020596 <KePanic(char const*)>
c00197f8:	83 c4 10             	add    esp,0x10
c00197fb:	90                   	nop
c00197fc:	83 c4 0c             	add    esp,0xc
c00197ff:	c3                   	ret    

c0019800 <__ubsan_handle_divrem_overflow>:
c0019800:	83 ec 0c             	sub    esp,0xc
c0019803:	83 ec 08             	sub    esp,0x8
c0019806:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001980a:	68 a8 20 03 c0       	push   0xc00320a8
c001980f:	e8 f4 fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019814:	83 c4 10             	add    esp,0x10
c0019817:	83 ec 0c             	sub    esp,0xc
c001981a:	68 a8 20 03 c0       	push   0xc00320a8
c001981f:	e8 72 6d 00 00       	call   c0020596 <KePanic(char const*)>
c0019824:	83 c4 10             	add    esp,0x10
c0019827:	90                   	nop
c0019828:	83 c4 0c             	add    esp,0xc
c001982b:	c3                   	ret    

c001982c <__ubsan_handle_mul_overflow>:
c001982c:	83 ec 0c             	sub    esp,0xc
c001982f:	83 ec 08             	sub    esp,0x8
c0019832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019836:	68 0d 1f 03 c0       	push   0xc0031f0d
c001983b:	e8 c8 fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019840:	83 c4 10             	add    esp,0x10
c0019843:	83 ec 0c             	sub    esp,0xc
c0019846:	68 0d 1f 03 c0       	push   0xc0031f0d
c001984b:	e8 46 6d 00 00       	call   c0020596 <KePanic(char const*)>
c0019850:	83 c4 10             	add    esp,0x10
c0019853:	90                   	nop
c0019854:	83 c4 0c             	add    esp,0xc
c0019857:	c3                   	ret    

c0019858 <__ubsan_handle_sub_overflow>:
c0019858:	83 ec 0c             	sub    esp,0xc
c001985b:	83 ec 08             	sub    esp,0x8
c001985e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019862:	68 29 1f 03 c0       	push   0xc0031f29
c0019867:	e8 9c fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c001986c:	83 c4 10             	add    esp,0x10
c001986f:	83 ec 0c             	sub    esp,0xc
c0019872:	68 29 1f 03 c0       	push   0xc0031f29
c0019877:	e8 1a 6d 00 00       	call   c0020596 <KePanic(char const*)>
c001987c:	83 c4 10             	add    esp,0x10
c001987f:	90                   	nop
c0019880:	83 c4 0c             	add    esp,0xc
c0019883:	c3                   	ret    

c0019884 <__ubsan_handle_shift_out_of_bounds>:
c0019884:	83 ec 0c             	sub    esp,0xc
c0019887:	83 ec 08             	sub    esp,0x8
c001988a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001988e:	68 c8 20 03 c0       	push   0xc00320c8
c0019893:	e8 70 fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019898:	83 c4 10             	add    esp,0x10
c001989b:	83 ec 0c             	sub    esp,0xc
c001989e:	68 c8 20 03 c0       	push   0xc00320c8
c00198a3:	e8 ee 6c 00 00       	call   c0020596 <KePanic(char const*)>
c00198a8:	83 c4 10             	add    esp,0x10
c00198ab:	90                   	nop
c00198ac:	83 c4 0c             	add    esp,0xc
c00198af:	c3                   	ret    

c00198b0 <__ubsan_handle_negate_overflow>:
c00198b0:	83 ec 0c             	sub    esp,0xc
c00198b3:	83 ec 08             	sub    esp,0x8
c00198b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198ba:	68 ec 20 03 c0       	push   0xc00320ec
c00198bf:	e8 44 fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c00198c4:	83 c4 10             	add    esp,0x10
c00198c7:	83 ec 0c             	sub    esp,0xc
c00198ca:	68 ec 20 03 c0       	push   0xc00320ec
c00198cf:	e8 c2 6c 00 00       	call   c0020596 <KePanic(char const*)>
c00198d4:	83 c4 10             	add    esp,0x10
c00198d7:	90                   	nop
c00198d8:	83 c4 0c             	add    esp,0xc
c00198db:	c3                   	ret    

c00198dc <KiIsHashInTable(unsigned short)>:
c00198dc:	0f b7 d0             	movzx  edx,ax
c00198df:	83 e0 07             	and    eax,0x7
c00198e2:	c1 fa 03             	sar    edx,0x3
c00198e5:	88 c1                	mov    cl,al
c00198e7:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c00198ee:	d3 fa                	sar    edx,cl
c00198f0:	89 d0                	mov    eax,edx
c00198f2:	83 e0 01             	and    eax,0x1
c00198f5:	c3                   	ret    

c00198f6 <KiSetHashInTable(unsigned short, bool)>:
c00198f6:	56                   	push   esi
c00198f7:	53                   	push   ebx
c00198f8:	0f b7 d8             	movzx  ebx,ax
c00198fb:	c1 fb 03             	sar    ebx,0x3
c00198fe:	83 e0 07             	and    eax,0x7
c0019901:	89 c1                	mov    ecx,eax
c0019903:	b8 01 00 00 00       	mov    eax,0x1
c0019908:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c001990f:	d3 e0                	shl    eax,cl
c0019911:	84 d2                	test   dl,dl
c0019913:	74 04                	je     c0019919 <KiSetHashInTable(unsigned short, bool)+0x23>
c0019915:	09 f0                	or     eax,esi
c0019917:	eb 04                	jmp    c001991d <KiSetHashInTable(unsigned short, bool)+0x27>
c0019919:	f7 d0                	not    eax
c001991b:	21 f0                	and    eax,esi
c001991d:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c0019923:	5b                   	pop    ebx
c0019924:	5e                   	pop    esi
c0019925:	c3                   	ret    

c0019926 <KiFlushSymlinkChanges()>:
c0019926:	57                   	push   edi
c0019927:	56                   	push   esi
c0019928:	53                   	push   ebx
c0019929:	83 ec 1c             	sub    esp,0x1c
c001992c:	68 14 01 00 00       	push   0x114
c0019931:	e8 66 cd ff ff       	call   c001669c <malloc>
c0019936:	83 c4 0c             	add    esp,0xc
c0019939:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001993f:	68 0b 21 03 c0       	push   0xc003210b
c0019944:	50                   	push   eax
c0019945:	89 c3                	mov    ebx,eax
c0019947:	e8 9e 0d 00 00       	call   c001a6ea <File::File(char const*, Process*)>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	85 db                	test   ebx,ebx
c0019951:	75 10                	jne    c0019963 <KiFlushSymlinkChanges()+0x3d>
c0019953:	83 ec 0c             	sub    esp,0xc
c0019956:	68 29 21 03 c0       	push   0xc0032129
c001995b:	e8 36 6c 00 00       	call   c0020596 <KePanic(char const*)>
c0019960:	83 c4 10             	add    esp,0x10
c0019963:	50                   	push   eax
c0019964:	50                   	push   eax
c0019965:	6a 06                	push   0x6
c0019967:	53                   	push   ebx
c0019968:	e8 9b 0d 00 00       	call   c001a708 <File::open(FileOpenMode)>
c001996d:	83 c4 10             	add    esp,0x10
c0019970:	85 c0                	test   eax,eax
c0019972:	74 10                	je     c0019984 <KiFlushSymlinkChanges()+0x5e>
c0019974:	83 ec 0c             	sub    esp,0xc
c0019977:	68 43 21 03 c0       	push   0xc0032143
c001997c:	e8 15 6c 00 00       	call   c0020596 <KePanic(char const*)>
c0019981:	83 c4 10             	add    esp,0x10
c0019984:	31 f6                	xor    esi,esi
c0019986:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c001998c:	7e 70                	jle    c00199fe <KiFlushSymlinkChanges()+0xd8>
c001998e:	83 ec 0c             	sub    esp,0xc
c0019991:	89 f0                	mov    eax,esi
c0019993:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019995:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019999:	c1 e0 08             	shl    eax,0x8
c001999c:	57                   	push   edi
c001999d:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00199a2:	50                   	push   eax
c00199a3:	6a 00                	push   0x0
c00199a5:	68 00 01 00 00       	push   0x100
c00199aa:	53                   	push   ebx
c00199ab:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00199ae:	83 c4 20             	add    esp,0x20
c00199b1:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00199b9:	74 10                	je     c00199cb <KiFlushSymlinkChanges()+0xa5>
c00199bb:	83 ec 0c             	sub    esp,0xc
c00199be:	68 5d 21 03 c0       	push   0xc003215d
c00199c3:	e8 ce 6b 00 00       	call   c0020596 <KePanic(char const*)>
c00199c8:	83 c4 10             	add    esp,0x10
c00199cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199cd:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c00199d4:	83 ec 0c             	sub    esp,0xc
c00199d7:	57                   	push   edi
c00199d8:	52                   	push   edx
c00199d9:	6a 00                	push   0x0
c00199db:	6a 08                	push   0x8
c00199dd:	53                   	push   ebx
c00199de:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00199e1:	83 c4 20             	add    esp,0x20
c00199e4:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00199e9:	74 10                	je     c00199fb <KiFlushSymlinkChanges()+0xd5>
c00199eb:	83 ec 0c             	sub    esp,0xc
c00199ee:	68 77 21 03 c0       	push   0xc0032177
c00199f3:	e8 9e 6b 00 00       	call   c0020596 <KePanic(char const*)>
c00199f8:	83 c4 10             	add    esp,0x10
c00199fb:	46                   	inc    esi
c00199fc:	eb 88                	jmp    c0019986 <KiFlushSymlinkChanges()+0x60>
c00199fe:	83 ec 0c             	sub    esp,0xc
c0019a01:	53                   	push   ebx
c0019a02:	e8 5f 0d 00 00       	call   c001a766 <File::close()>
c0019a07:	83 c4 10             	add    esp,0x10
c0019a0a:	85 db                	test   ebx,ebx
c0019a0c:	74 0c                	je     c0019a1a <KiFlushSymlinkChanges()+0xf4>
c0019a0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a10:	83 ec 0c             	sub    esp,0xc
c0019a13:	53                   	push   ebx
c0019a14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a17:	83 c4 10             	add    esp,0x10
c0019a1a:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019a24:	83 c4 10             	add    esp,0x10
c0019a27:	5b                   	pop    ebx
c0019a28:	5e                   	pop    esi
c0019a29:	5f                   	pop    edi
c0019a2a:	c3                   	ret    

c0019a2b <KiDeinitialiseSymlinks(void*)>:
c0019a2b:	e9 f6 fe ff ff       	jmp    c0019926 <KiFlushSymlinkChanges()>

c0019a30 <KiGetSymlinkHash(char const*)>:
c0019a30:	53                   	push   ebx
c0019a31:	89 c3                	mov    ebx,eax
c0019a33:	83 ec 14             	sub    esp,0x14
c0019a36:	50                   	push   eax
c0019a37:	e8 44 6b fe ff       	call   c0000580 <strlen>
c0019a3c:	5a                   	pop    edx
c0019a3d:	59                   	pop    ecx
c0019a3e:	50                   	push   eax
c0019a3f:	53                   	push   ebx
c0019a40:	e8 b8 64 00 00       	call   c001fefd <KeCalculateCRC32(unsigned char*, int)>
c0019a45:	83 c4 18             	add    esp,0x18
c0019a48:	5b                   	pop    ebx
c0019a49:	89 c2                	mov    edx,eax
c0019a4b:	c1 ea 10             	shr    edx,0x10
c0019a4e:	31 d0                	xor    eax,edx
c0019a50:	c3                   	ret    

c0019a51 <KiCreateSymlinkID()>:
c0019a51:	55                   	push   ebp
c0019a52:	57                   	push   edi
c0019a53:	56                   	push   esi
c0019a54:	53                   	push   ebx
c0019a55:	31 db                	xor    ebx,ebx
c0019a57:	83 ec 1c             	sub    esp,0x1c
c0019a5a:	e8 85 6c 00 00       	call   c00206e4 <KeRand()>
c0019a5f:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c0019a65:	31 d2                	xor    edx,edx
c0019a67:	43                   	inc    ebx
c0019a68:	31 ff                	xor    edi,edi
c0019a6a:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0019a6d:	89 ee                	mov    esi,ebp
c0019a6f:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019a75:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0019a79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019a7d:	c1 e0 1f             	shl    eax,0x1f
c0019a80:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019a86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a8a:	75 10                	jne    c0019a9c <KiCreateSymlinkID()+0x4b>
c0019a8c:	83 ec 0c             	sub    esp,0xc
c0019a8f:	68 91 21 03 c0       	push   0xc0032191
c0019a94:	e8 fd 6a 00 00       	call   c0020596 <KePanic(char const*)>
c0019a99:	83 c4 10             	add    esp,0x10
c0019a9c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0019aa0:	75 06                	jne    c0019aa8 <KiCreateSymlinkID()+0x57>
c0019aa2:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0019aa6:	74 b2                	je     c0019a5a <KiCreateSymlinkID()+0x9>
c0019aa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ab0:	83 c4 1c             	add    esp,0x1c
c0019ab3:	5b                   	pop    ebx
c0019ab4:	31 f0                	xor    eax,esi
c0019ab6:	5e                   	pop    esi
c0019ab7:	31 fa                	xor    edx,edi
c0019ab9:	5f                   	pop    edi
c0019aba:	5d                   	pop    ebp
c0019abb:	c3                   	ret    

c0019abc <KeRegisterSymlink(char const*, unsigned long long)>:
c0019abc:	53                   	push   ebx
c0019abd:	83 ec 0c             	sub    esp,0xc
c0019ac0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ac4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ac8:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019acd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ad1:	68 00 01 00 00       	push   0x100
c0019ad6:	6a 00                	push   0x0
c0019ad8:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c0019adf:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019ae6:	c1 e0 08             	shl    eax,0x8
c0019ae9:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019aee:	50                   	push   eax
c0019aef:	e8 fc 69 fe ff       	call   c00004f0 <memset>
c0019af4:	58                   	pop    eax
c0019af5:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019afa:	5a                   	pop    edx
c0019afb:	c1 e0 08             	shl    eax,0x8
c0019afe:	53                   	push   ebx
c0019aff:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019b04:	50                   	push   eax
c0019b05:	e8 46 6b fe ff       	call   c0000650 <strcpy>
c0019b0a:	89 d8                	mov    eax,ebx
c0019b0c:	e8 1f ff ff ff       	call   c0019a30 <KiGetSymlinkHash(char const*)>
c0019b11:	59                   	pop    ecx
c0019b12:	0f b7 d8             	movzx  ebx,ax
c0019b15:	58                   	pop    eax
c0019b16:	53                   	push   ebx
c0019b17:	68 9a 21 03 c0       	push   0xc003219a
c0019b1c:	e8 b1 f9 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0019b21:	89 d8                	mov    eax,ebx
c0019b23:	ba 01 00 00 00       	mov    edx,0x1
c0019b28:	e8 c9 fd ff ff       	call   c00198f6 <KiSetHashInTable(unsigned short, bool)>
c0019b2d:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019b32:	83 c4 10             	add    esp,0x10
c0019b35:	40                   	inc    eax
c0019b36:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c0019b3b:	83 f8 03             	cmp    eax,0x3
c0019b3e:	7e 09                	jle    c0019b49 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019b40:	83 c4 08             	add    esp,0x8
c0019b43:	5b                   	pop    ebx
c0019b44:	e9 dd fd ff ff       	jmp    c0019926 <KiFlushSymlinkChanges()>
c0019b49:	83 c4 08             	add    esp,0x8
c0019b4c:	5b                   	pop    ebx
c0019b4d:	c3                   	ret    

c0019b4e <KeInitialiseSymlinks()>:
c0019b4e:	57                   	push   edi
c0019b4f:	56                   	push   esi
c0019b50:	53                   	push   ebx
c0019b51:	81 ec 14 01 00 00    	sub    esp,0x114
c0019b57:	68 00 20 00 00       	push   0x2000
c0019b5c:	6a 00                	push   0x0
c0019b5e:	68 00 af 03 c0       	push   0xc003af00
c0019b63:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c0019b6d:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019b77:	e8 74 69 fe ff       	call   c00004f0 <memset>
c0019b7c:	59                   	pop    ecx
c0019b7d:	5b                   	pop    ebx
c0019b7e:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019b84:	68 ae 21 03 c0       	push   0xc00321ae
c0019b89:	e8 44 f9 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0019b8e:	5e                   	pop    esi
c0019b8f:	5f                   	pop    edi
c0019b90:	6a 00                	push   0x0
c0019b92:	68 2b 9a 01 c0       	push   0xc0019a2b
c0019b97:	e8 86 61 00 00       	call   c001fd22 <KeRegisterAtexit(void (*)(void*), void*)>
c0019b9c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019ba3:	e8 f4 ca ff ff       	call   c001669c <malloc>
c0019ba8:	83 c4 0c             	add    esp,0xc
c0019bab:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019bb1:	68 0b 21 03 c0       	push   0xc003210b
c0019bb6:	50                   	push   eax
c0019bb7:	89 c3                	mov    ebx,eax
c0019bb9:	e8 2c 0b 00 00       	call   c001a6ea <File::File(char const*, Process*)>
c0019bbe:	83 c4 10             	add    esp,0x10
c0019bc1:	85 db                	test   ebx,ebx
c0019bc3:	75 10                	jne    c0019bd5 <KeInitialiseSymlinks()+0x87>
c0019bc5:	83 ec 0c             	sub    esp,0xc
c0019bc8:	68 cb 21 03 c0       	push   0xc00321cb
c0019bcd:	e8 c4 69 00 00       	call   c0020596 <KePanic(char const*)>
c0019bd2:	83 c4 10             	add    esp,0x10
c0019bd5:	83 ec 0c             	sub    esp,0xc
c0019bd8:	53                   	push   ebx
c0019bd9:	e8 ee 0d 00 00       	call   c001a9cc <File::exists()>
c0019bde:	83 c4 10             	add    esp,0x10
c0019be1:	84 c0                	test   al,al
c0019be3:	75 3a                	jne    c0019c1f <KeInitialiseSymlinks()+0xd1>
c0019be5:	52                   	push   edx
c0019be6:	52                   	push   edx
c0019be7:	6a 12                	push   0x12
c0019be9:	53                   	push   ebx
c0019bea:	e8 19 0b 00 00       	call   c001a708 <File::open(FileOpenMode)>
c0019bef:	83 c4 10             	add    esp,0x10
c0019bf2:	85 c0                	test   eax,eax
c0019bf4:	74 10                	je     c0019c06 <KeInitialiseSymlinks()+0xb8>
c0019bf6:	83 ec 0c             	sub    esp,0xc
c0019bf9:	68 e8 21 03 c0       	push   0xc00321e8
c0019bfe:	e8 93 69 00 00       	call   c0020596 <KePanic(char const*)>
c0019c03:	83 c4 10             	add    esp,0x10
c0019c06:	83 ec 0c             	sub    esp,0xc
c0019c09:	53                   	push   ebx
c0019c0a:	e8 57 0b 00 00       	call   c001a766 <File::close()>
c0019c0f:	83 c4 10             	add    esp,0x10
c0019c12:	85 db                	test   ebx,ebx
c0019c14:	0f 84 9e 00 00 00    	je     c0019cb8 <KeInitialiseSymlinks()+0x16a>
c0019c1a:	e9 8d 00 00 00       	jmp    c0019cac <KeInitialiseSymlinks()+0x15e>
c0019c1f:	50                   	push   eax
c0019c20:	50                   	push   eax
c0019c21:	6a 01                	push   0x1
c0019c23:	53                   	push   ebx
c0019c24:	e8 df 0a 00 00       	call   c001a708 <File::open(FileOpenMode)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	85 c0                	test   eax,eax
c0019c2e:	74 10                	je     c0019c40 <KeInitialiseSymlinks()+0xf2>
c0019c30:	83 ec 0c             	sub    esp,0xc
c0019c33:	68 05 22 03 c0       	push   0xc0032205
c0019c38:	e8 59 69 00 00       	call   c0020596 <KePanic(char const*)>
c0019c3d:	83 c4 10             	add    esp,0x10
c0019c40:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c0019c46:	83 ec 0c             	sub    esp,0xc
c0019c49:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019c4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c4f:	57                   	push   edi
c0019c50:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019c54:	56                   	push   esi
c0019c55:	6a 00                	push   0x0
c0019c57:	68 00 01 00 00       	push   0x100
c0019c5c:	53                   	push   ebx
c0019c5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c60:	83 c4 20             	add    esp,0x20
c0019c63:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019c6b:	75 33                	jne    c0019ca0 <KeInitialiseSymlinks()+0x152>
c0019c6d:	83 ec 0c             	sub    esp,0xc
c0019c70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c72:	57                   	push   edi
c0019c73:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019c77:	52                   	push   edx
c0019c78:	6a 00                	push   0x0
c0019c7a:	6a 08                	push   0x8
c0019c7c:	53                   	push   ebx
c0019c7d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c80:	83 c4 20             	add    esp,0x20
c0019c83:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019c88:	75 16                	jne    c0019ca0 <KeInitialiseSymlinks()+0x152>
c0019c8a:	89 f0                	mov    eax,esi
c0019c8c:	e8 9f fd ff ff       	call   c0019a30 <KiGetSymlinkHash(char const*)>
c0019c91:	ba 01 00 00 00       	mov    edx,0x1
c0019c96:	0f b7 c0             	movzx  eax,ax
c0019c99:	e8 58 fc ff ff       	call   c00198f6 <KiSetHashInTable(unsigned short, bool)>
c0019c9e:	eb a0                	jmp    c0019c40 <KeInitialiseSymlinks()+0xf2>
c0019ca0:	83 ec 0c             	sub    esp,0xc
c0019ca3:	53                   	push   ebx
c0019ca4:	e8 bd 0a 00 00       	call   c001a766 <File::close()>
c0019ca9:	83 c4 10             	add    esp,0x10
c0019cac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cae:	83 ec 0c             	sub    esp,0xc
c0019cb1:	53                   	push   ebx
c0019cb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019cb5:	83 c4 10             	add    esp,0x10
c0019cb8:	81 c4 10 01 00 00    	add    esp,0x110
c0019cbe:	5b                   	pop    ebx
c0019cbf:	5e                   	pop    esi
c0019cc0:	5f                   	pop    edi
c0019cc1:	c3                   	ret    

c0019cc2 <KiIsSymlinkRegistered(char const*)>:
c0019cc2:	55                   	push   ebp
c0019cc3:	57                   	push   edi
c0019cc4:	56                   	push   esi
c0019cc5:	53                   	push   ebx
c0019cc6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ccc:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019cd3:	89 f0                	mov    eax,esi
c0019cd5:	e8 56 fd ff ff       	call   c0019a30 <KiGetSymlinkHash(char const*)>
c0019cda:	53                   	push   ebx
c0019cdb:	56                   	push   esi
c0019cdc:	0f b7 c0             	movzx  eax,ax
c0019cdf:	50                   	push   eax
c0019ce0:	68 20 22 03 c0       	push   0xc0032220
c0019ce5:	e8 e8 f7 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0019cea:	89 f0                	mov    eax,esi
c0019cec:	e8 3f fd ff ff       	call   c0019a30 <KiGetSymlinkHash(char const*)>
c0019cf1:	0f b7 c0             	movzx  eax,ax
c0019cf4:	e8 e3 fb ff ff       	call   c00198dc <KiIsHashInTable(unsigned short)>
c0019cf9:	83 c4 10             	add    esp,0x10
c0019cfc:	31 d2                	xor    edx,edx
c0019cfe:	88 c1                	mov    cl,al
c0019d00:	31 c0                	xor    eax,eax
c0019d02:	84 c9                	test   cl,cl
c0019d04:	0f 84 31 01 00 00    	je     c0019e3b <KiIsSymlinkRegistered(char const*)+0x179>
c0019d0a:	31 db                	xor    ebx,ebx
c0019d0c:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019d12:	7e 30                	jle    c0019d44 <KiIsSymlinkRegistered(char const*)+0x82>
c0019d14:	89 d8                	mov    eax,ebx
c0019d16:	c1 e0 08             	shl    eax,0x8
c0019d19:	51                   	push   ecx
c0019d1a:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019d1f:	51                   	push   ecx
c0019d20:	50                   	push   eax
c0019d21:	56                   	push   esi
c0019d22:	e8 59 6a fe ff       	call   c0000780 <strcmp>
c0019d27:	83 c4 10             	add    esp,0x10
c0019d2a:	85 c0                	test   eax,eax
c0019d2c:	75 13                	jne    c0019d41 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019d2e:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019d35:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019d3c:	e9 fa 00 00 00       	jmp    c0019e3b <KiIsSymlinkRegistered(char const*)+0x179>
c0019d41:	43                   	inc    ebx
c0019d42:	eb c8                	jmp    c0019d0c <KiIsSymlinkRegistered(char const*)+0x4a>
c0019d44:	83 ec 0c             	sub    esp,0xc
c0019d47:	68 14 01 00 00       	push   0x114
c0019d4c:	e8 4b c9 ff ff       	call   c001669c <malloc>
c0019d51:	83 c4 0c             	add    esp,0xc
c0019d54:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019d5a:	68 0b 21 03 c0       	push   0xc003210b
c0019d5f:	50                   	push   eax
c0019d60:	89 c3                	mov    ebx,eax
c0019d62:	e8 83 09 00 00       	call   c001a6ea <File::File(char const*, Process*)>
c0019d67:	83 c4 10             	add    esp,0x10
c0019d6a:	85 db                	test   ebx,ebx
c0019d6c:	75 12                	jne    c0019d80 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019d6e:	83 ec 0c             	sub    esp,0xc
c0019d71:	68 35 22 03 c0       	push   0xc0032235
c0019d76:	e8 1b 68 00 00       	call   c0020596 <KePanic(char const*)>
c0019d7b:	83 c4 10             	add    esp,0x10
c0019d7e:	eb 10                	jmp    c0019d90 <KiIsSymlinkRegistered(char const*)+0xce>
c0019d80:	83 ec 0c             	sub    esp,0xc
c0019d83:	53                   	push   ebx
c0019d84:	e8 43 0c 00 00       	call   c001a9cc <File::exists()>
c0019d89:	83 c4 10             	add    esp,0x10
c0019d8c:	84 c0                	test   al,al
c0019d8e:	74 de                	je     c0019d6e <KiIsSymlinkRegistered(char const*)+0xac>
c0019d90:	52                   	push   edx
c0019d91:	52                   	push   edx
c0019d92:	6a 01                	push   0x1
c0019d94:	53                   	push   ebx
c0019d95:	e8 6e 09 00 00       	call   c001a708 <File::open(FileOpenMode)>
c0019d9a:	83 c4 10             	add    esp,0x10
c0019d9d:	85 c0                	test   eax,eax
c0019d9f:	74 10                	je     c0019db1 <KiIsSymlinkRegistered(char const*)+0xef>
c0019da1:	83 ec 0c             	sub    esp,0xc
c0019da4:	68 50 22 03 c0       	push   0xc0032250
c0019da9:	e8 e8 67 00 00       	call   c0020596 <KePanic(char const*)>
c0019dae:	83 c4 10             	add    esp,0x10
c0019db1:	83 ec 0c             	sub    esp,0xc
c0019db4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019db6:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019dba:	55                   	push   ebp
c0019dbb:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019dbf:	57                   	push   edi
c0019dc0:	6a 00                	push   0x0
c0019dc2:	68 00 01 00 00       	push   0x100
c0019dc7:	53                   	push   ebx
c0019dc8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019dcb:	83 c4 20             	add    esp,0x20
c0019dce:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019dd6:	75 4b                	jne    c0019e23 <KiIsSymlinkRegistered(char const*)+0x161>
c0019dd8:	83 ec 0c             	sub    esp,0xc
c0019ddb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ddd:	55                   	push   ebp
c0019dde:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019de2:	52                   	push   edx
c0019de3:	6a 00                	push   0x0
c0019de5:	6a 08                	push   0x8
c0019de7:	53                   	push   ebx
c0019de8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019deb:	83 c4 20             	add    esp,0x20
c0019dee:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019df3:	75 2e                	jne    c0019e23 <KiIsSymlinkRegistered(char const*)+0x161>
c0019df5:	50                   	push   eax
c0019df6:	50                   	push   eax
c0019df7:	57                   	push   edi
c0019df8:	56                   	push   esi
c0019df9:	e8 82 69 fe ff       	call   c0000780 <strcmp>
c0019dfe:	83 c4 10             	add    esp,0x10
c0019e01:	85 c0                	test   eax,eax
c0019e03:	75 ac                	jne    c0019db1 <KiIsSymlinkRegistered(char const*)+0xef>
c0019e05:	83 ec 0c             	sub    esp,0xc
c0019e08:	53                   	push   ebx
c0019e09:	e8 58 09 00 00       	call   c001a766 <File::close()>
c0019e0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e1e:	83 c4 10             	add    esp,0x10
c0019e21:	eb 18                	jmp    c0019e3b <KiIsSymlinkRegistered(char const*)+0x179>
c0019e23:	83 ec 0c             	sub    esp,0xc
c0019e26:	53                   	push   ebx
c0019e27:	e8 3a 09 00 00       	call   c001a766 <File::close()>
c0019e2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e34:	83 c4 10             	add    esp,0x10
c0019e37:	31 c0                	xor    eax,eax
c0019e39:	31 d2                	xor    edx,edx
c0019e3b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e41:	5b                   	pop    ebx
c0019e42:	5e                   	pop    esi
c0019e43:	5f                   	pop    edi
c0019e44:	5d                   	pop    ebp
c0019e45:	c3                   	ret    

c0019e46 <KeDereferenceSymlink(char const*, char*)>:
c0019e46:	55                   	push   ebp
c0019e47:	57                   	push   edi
c0019e48:	56                   	push   esi
c0019e49:	53                   	push   ebx
c0019e4a:	83 ec 48             	sub    esp,0x48
c0019e4d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019e51:	56                   	push   esi
c0019e52:	e8 6b fe ff ff       	call   c0019cc2 <KiIsSymlinkRegistered(char const*)>
c0019e57:	83 c4 10             	add    esp,0x10
c0019e5a:	89 c7                	mov    edi,eax
c0019e5c:	89 d0                	mov    eax,edx
c0019e5e:	09 f8                	or     eax,edi
c0019e60:	75 07                	jne    c0019e69 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019e62:	31 c0                	xor    eax,eax
c0019e64:	e9 7c 01 00 00       	jmp    c0019fe5 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019e69:	83 ec 0c             	sub    esp,0xc
c0019e6c:	89 d5                	mov    ebp,edx
c0019e6e:	68 14 01 00 00       	push   0x114
c0019e73:	e8 24 c8 ff ff       	call   c001669c <malloc>
c0019e78:	83 c4 0c             	add    esp,0xc
c0019e7b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019e81:	56                   	push   esi
c0019e82:	50                   	push   eax
c0019e83:	89 c3                	mov    ebx,eax
c0019e85:	e8 60 08 00 00       	call   c001a6ea <File::File(char const*, Process*)>
c0019e8a:	83 c4 10             	add    esp,0x10
c0019e8d:	85 db                	test   ebx,ebx
c0019e8f:	0f 84 32 01 00 00    	je     c0019fc7 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019e95:	56                   	push   esi
c0019e96:	56                   	push   esi
c0019e97:	6a 01                	push   0x1
c0019e99:	53                   	push   ebx
c0019e9a:	e8 69 08 00 00       	call   c001a708 <File::open(FileOpenMode)>
c0019e9f:	83 c4 10             	add    esp,0x10
c0019ea2:	85 c0                	test   eax,eax
c0019ea4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ea6:	74 09                	je     c0019eb1 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019ea8:	83 ec 0c             	sub    esp,0xc
c0019eab:	53                   	push   ebx
c0019eac:	e9 10 01 00 00       	jmp    c0019fc1 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019eb1:	83 ec 0c             	sub    esp,0xc
c0019eb4:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019eb8:	56                   	push   esi
c0019eb9:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019ebd:	52                   	push   edx
c0019ebe:	6a 00                	push   0x0
c0019ec0:	6a 08                	push   0x8
c0019ec2:	53                   	push   ebx
c0019ec3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ec6:	83 c4 20             	add    esp,0x20
c0019ec9:	85 c0                	test   eax,eax
c0019ecb:	0f 85 e2 00 00 00    	jne    c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ed1:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019ed6:	0f 85 d7 00 00 00    	jne    c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019edc:	83 ec 0c             	sub    esp,0xc
c0019edf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ee1:	56                   	push   esi
c0019ee2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019ee6:	52                   	push   edx
c0019ee7:	6a 00                	push   0x0
c0019ee9:	6a 08                	push   0x8
c0019eeb:	53                   	push   ebx
c0019eec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019eef:	83 c4 20             	add    esp,0x20
c0019ef2:	85 c0                	test   eax,eax
c0019ef4:	0f 85 b9 00 00 00    	jne    c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019efa:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019eff:	0f 85 ae 00 00 00    	jne    c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f05:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019f09:	0f 85 53 ff ff ff    	jne    c0019e62 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019f0f:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019f13:	0f 85 49 ff ff ff    	jne    c0019e62 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019f19:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019f21:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019f29:	51                   	push   ecx
c0019f2a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019f2e:	50                   	push   eax
c0019f2f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019f33:	50                   	push   eax
c0019f34:	53                   	push   ebx
c0019f35:	e8 d0 0a 00 00       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c0019f3a:	83 c4 10             	add    esp,0x10
c0019f3d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019f42:	75 6f                	jne    c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f48:	31 c9                	xor    ecx,ecx
c0019f4a:	bf 0f 00 00 00       	mov    edi,0xf
c0019f4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f53:	39 c7                	cmp    edi,eax
c0019f55:	89 cf                	mov    edi,ecx
c0019f57:	19 d7                	sbb    edi,edx
c0019f59:	73 58                	jae    c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f5b:	83 c0 f0             	add    eax,0xfffffff0
c0019f5e:	bf ff 00 00 00       	mov    edi,0xff
c0019f63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f67:	83 d2 ff             	adc    edx,0xffffffff
c0019f6a:	39 c7                	cmp    edi,eax
c0019f6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f70:	19 d1                	sbb    ecx,edx
c0019f72:	72 53                	jb     c0019fc7 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019f74:	40                   	inc    eax
c0019f75:	52                   	push   edx
c0019f76:	50                   	push   eax
c0019f77:	6a 00                	push   0x0
c0019f79:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019f7d:	e8 6e 65 fe ff       	call   c00004f0 <memset>
c0019f82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f84:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019f8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f93:	53                   	push   ebx
c0019f94:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f97:	83 c4 20             	add    esp,0x20
c0019f9a:	85 c0                	test   eax,eax
c0019f9c:	75 15                	jne    c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fa2:	89 c7                	mov    edi,eax
c0019fa4:	c1 ff 1f             	sar    edi,0x1f
c0019fa7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019fab:	75 06                	jne    c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019fad:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019fb1:	74 19                	je     c0019fcc <KeDereferenceSymlink(char const*, char*)+0x186>
c0019fb3:	83 ec 0c             	sub    esp,0xc
c0019fb6:	53                   	push   ebx
c0019fb7:	e8 aa 07 00 00       	call   c001a766 <File::close()>
c0019fbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fc1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019fc4:	83 c4 10             	add    esp,0x10
c0019fc7:	83 c8 ff             	or     eax,0xffffffff
c0019fca:	eb 19                	jmp    c0019fe5 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019fcc:	83 ec 0c             	sub    esp,0xc
c0019fcf:	53                   	push   ebx
c0019fd0:	e8 91 07 00 00       	call   c001a766 <File::close()>
c0019fd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019fdd:	83 c4 10             	add    esp,0x10
c0019fe0:	b8 01 00 00 00       	mov    eax,0x1
c0019fe5:	83 c4 3c             	add    esp,0x3c
c0019fe8:	5b                   	pop    ebx
c0019fe9:	5e                   	pop    esi
c0019fea:	5f                   	pop    edi
c0019feb:	5d                   	pop    ebp
c0019fec:	c3                   	ret    

c0019fed <KeCreateSymlink(char const*, char const*)>:
c0019fed:	55                   	push   ebp
c0019fee:	57                   	push   edi
c0019fef:	56                   	push   esi
c0019ff0:	53                   	push   ebx
c0019ff1:	83 ec 38             	sub    esp,0x38
c0019ff4:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019ff8:	68 14 01 00 00       	push   0x114
c0019ffd:	e8 9a c6 ff ff       	call   c001669c <malloc>
c001a002:	6a 00                	push   0x0
c001a004:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001a00a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a00e:	89 c3                	mov    ebx,eax
c001a010:	50                   	push   eax
c001a011:	e8 f6 05 00 00       	call   c001a60c <File::File(char const*, Process*, bool)>
c001a016:	83 c4 20             	add    esp,0x20
c001a019:	85 db                	test   ebx,ebx
c001a01b:	b8 01 00 00 00       	mov    eax,0x1
c001a020:	0f 84 19 01 00 00    	je     c001a13f <KeCreateSymlink(char const*, char const*)+0x152>
c001a026:	52                   	push   edx
c001a027:	52                   	push   edx
c001a028:	6a 12                	push   0x12
c001a02a:	53                   	push   ebx
c001a02b:	e8 d8 06 00 00       	call   c001a708 <File::open(FileOpenMode)>
c001a030:	83 c4 10             	add    esp,0x10
c001a033:	85 c0                	test   eax,eax
c001a035:	74 0b                	je     c001a042 <KeCreateSymlink(char const*, char const*)+0x55>
c001a037:	83 ec 0c             	sub    esp,0xc
c001a03a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a03c:	53                   	push   ebx
c001a03d:	e9 f2 00 00 00       	jmp    c001a134 <KeCreateSymlink(char const*, char const*)+0x147>
c001a042:	8d 7c 24 17          	lea    edi,[esp+0x17]
c001a046:	be 9d 22 03 c0       	mov    esi,0xc003229d
c001a04b:	b9 09 00 00 00       	mov    ecx,0x9
c001a050:	fc                   	cld    
c001a051:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a053:	83 ec 0c             	sub    esp,0xc
c001a056:	8d 74 24 10          	lea    esi,[esp+0x10]
c001a05a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a05c:	56                   	push   esi
c001a05d:	8d 54 24 27          	lea    edx,[esp+0x27]
c001a061:	52                   	push   edx
c001a062:	6a 00                	push   0x0
c001a064:	6a 08                	push   0x8
c001a066:	53                   	push   ebx
c001a067:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a06a:	83 c4 20             	add    esp,0x20
c001a06d:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a072:	0f 85 ae 00 00 00    	jne    c001a126 <KeCreateSymlink(char const*, char const*)+0x139>
c001a078:	85 c0                	test   eax,eax
c001a07a:	0f 85 a6 00 00 00    	jne    c001a126 <KeCreateSymlink(char const*, char const*)+0x139>
c001a080:	e8 cc f9 ff ff       	call   c0019a51 <KiCreateSymlinkID()>
c001a085:	83 ec 0c             	sub    esp,0xc
c001a088:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a08c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a090:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a092:	56                   	push   esi
c001a093:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a097:	52                   	push   edx
c001a098:	6a 00                	push   0x0
c001a09a:	6a 08                	push   0x8
c001a09c:	53                   	push   ebx
c001a09d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a0a0:	83 c4 20             	add    esp,0x20
c001a0a3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a0a8:	75 7c                	jne    c001a126 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0aa:	85 c0                	test   eax,eax
c001a0ac:	75 78                	jne    c001a126 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0b0:	83 ec 0c             	sub    esp,0xc
c001a0b3:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a0b6:	55                   	push   ebp
c001a0b7:	e8 c4 64 fe ff       	call   c0000580 <strlen>
c001a0bc:	31 d2                	xor    edx,edx
c001a0be:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0c1:	55                   	push   ebp
c001a0c2:	52                   	push   edx
c001a0c3:	50                   	push   eax
c001a0c4:	53                   	push   ebx
c001a0c5:	ff d7                	call   edi
c001a0c7:	83 c4 14             	add    esp,0x14
c001a0ca:	55                   	push   ebp
c001a0cb:	89 c6                	mov    esi,eax
c001a0cd:	e8 ae 64 fe ff       	call   c0000580 <strlen>
c001a0d2:	83 c4 10             	add    esp,0x10
c001a0d5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a0d9:	75 4b                	jne    c001a126 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0db:	85 f6                	test   esi,esi
c001a0dd:	75 47                	jne    c001a126 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0df:	50                   	push   eax
c001a0e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0e4:	55                   	push   ebp
c001a0e5:	68 6b 22 03 c0       	push   0xc003226b
c001a0ea:	e8 e3 f3 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001a0ef:	83 c4 0c             	add    esp,0xc
c001a0f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0fa:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001a0fe:	e8 b9 f9 ff ff       	call   c0019abc <KeRegisterSymlink(char const*, unsigned long long)>
c001a103:	c7 04 24 90 22 03 c0 	mov    DWORD PTR [esp],0xc0032290
c001a10a:	e8 c3 f3 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001a10f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a112:	e8 4f 06 00 00       	call   c001a766 <File::close()>
c001a117:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a119:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a11c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a11f:	83 c4 10             	add    esp,0x10
c001a122:	31 c0                	xor    eax,eax
c001a124:	eb 19                	jmp    c001a13f <KeCreateSymlink(char const*, char const*)+0x152>
c001a126:	83 ec 0c             	sub    esp,0xc
c001a129:	53                   	push   ebx
c001a12a:	e8 37 06 00 00       	call   c001a766 <File::close()>
c001a12f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a131:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a134:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a137:	83 c4 10             	add    esp,0x10
c001a13a:	b8 01 00 00 00       	mov    eax,0x1
c001a13f:	83 c4 2c             	add    esp,0x2c
c001a142:	5b                   	pop    ebx
c001a143:	5e                   	pop    esi
c001a144:	5f                   	pop    edi
c001a145:	5d                   	pop    ebp
c001a146:	c3                   	ret    
c001a147:	90                   	nop

c001a148 <File::read(unsigned long long, void*, int*)>:
c001a148:	53                   	push   ebx
c001a149:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a14d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a151:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a158:	83 f8 19             	cmp    eax,0x19
c001a15b:	77 35                	ja     c001a192 <File::read(unsigned long long, void*, int*)+0x4a>
c001a15d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a164:	85 c0                	test   eax,eax
c001a166:	74 2a                	je     c001a192 <File::read(unsigned long long, void*, int*)+0x4a>
c001a168:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a16e:	85 c0                	test   eax,eax
c001a170:	74 20                	je     c001a192 <File::read(unsigned long long, void*, int*)+0x4a>
c001a172:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a176:	74 21                	je     c001a199 <File::read(unsigned long long, void*, int*)+0x51>
c001a178:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a17a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a17e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a184:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a188:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a18c:	5b                   	pop    ebx
c001a18d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001a190:	ff e0                	jmp    eax
c001a192:	b8 0b 00 00 00       	mov    eax,0xb
c001a197:	eb 05                	jmp    c001a19e <File::read(unsigned long long, void*, int*)+0x56>
c001a199:	b8 05 00 00 00       	mov    eax,0x5
c001a19e:	5b                   	pop    ebx
c001a19f:	c3                   	ret    

c001a1a0 <File::write(unsigned long long, void*, int*)>:
c001a1a0:	53                   	push   ebx
c001a1a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a1a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a1b0:	83 f8 19             	cmp    eax,0x19
c001a1b3:	77 35                	ja     c001a1ea <File::write(unsigned long long, void*, int*)+0x4a>
c001a1b5:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a1bc:	85 c0                	test   eax,eax
c001a1be:	74 2a                	je     c001a1ea <File::write(unsigned long long, void*, int*)+0x4a>
c001a1c0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a1c6:	85 c0                	test   eax,eax
c001a1c8:	74 20                	je     c001a1ea <File::write(unsigned long long, void*, int*)+0x4a>
c001a1ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a1ce:	74 21                	je     c001a1f1 <File::write(unsigned long long, void*, int*)+0x51>
c001a1d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a1d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a1d6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a1dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1e4:	5b                   	pop    ebx
c001a1e5:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001a1e8:	ff e0                	jmp    eax
c001a1ea:	b8 0b 00 00 00       	mov    eax,0xb
c001a1ef:	eb 05                	jmp    c001a1f6 <File::write(unsigned long long, void*, int*)+0x56>
c001a1f1:	b8 05 00 00 00       	mov    eax,0x5
c001a1f6:	5b                   	pop    ebx
c001a1f7:	c3                   	ret    

c001a1f8 <Directory::read(unsigned long long, void*, int*)>:
c001a1f8:	53                   	push   ebx
c001a1f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a201:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a208:	83 f8 19             	cmp    eax,0x19
c001a20b:	77 35                	ja     c001a242 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a20d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a214:	85 c0                	test   eax,eax
c001a216:	74 2a                	je     c001a242 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a218:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a21e:	85 c0                	test   eax,eax
c001a220:	74 20                	je     c001a242 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a222:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a226:	74 21                	je     c001a249 <Directory::read(unsigned long long, void*, int*)+0x51>
c001a228:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a22a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a22e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a234:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a238:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a23c:	5b                   	pop    ebx
c001a23d:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a240:	ff e0                	jmp    eax
c001a242:	b8 0b 00 00 00       	mov    eax,0xb
c001a247:	eb 05                	jmp    c001a24e <Directory::read(unsigned long long, void*, int*)+0x56>
c001a249:	b8 05 00 00 00       	mov    eax,0x5
c001a24e:	5b                   	pop    ebx
c001a24f:	c3                   	ret    

c001a250 <Directory::write(unsigned long long, void*, int*)>:
c001a250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a254:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a25b:	b8 0b 00 00 00       	mov    eax,0xb
c001a260:	83 fa 19             	cmp    edx,0x19
c001a263:	77 18                	ja     c001a27d <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a265:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a26c:	85 d2                	test   edx,edx
c001a26e:	74 0d                	je     c001a27d <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a270:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a277:	19 c0                	sbb    eax,eax
c001a279:	83 e0 0a             	and    eax,0xa
c001a27c:	40                   	inc    eax
c001a27d:	c3                   	ret    

c001a27e <File::isAtty()>:
c001a27e:	31 c0                	xor    eax,eax
c001a280:	c3                   	ret    
c001a281:	90                   	nop

c001a282 <Directory::isAtty()>:
c001a282:	31 c0                	xor    eax,eax
c001a284:	c3                   	ret    
c001a285:	90                   	nop

c001a286 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a286:	b8 0a 00 00 00       	mov    eax,0xa
c001a28b:	c3                   	ret    

c001a28c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a28c:	b8 0a 00 00 00       	mov    eax,0xa
c001a291:	c3                   	ret    

c001a292 <Filesystem::allocateSwapfile(char const*, int)>:
c001a292:	31 c0                	xor    eax,eax
c001a294:	31 d2                	xor    edx,edx
c001a296:	c3                   	ret    
c001a297:	90                   	nop

c001a298 <File::~File()>:
c001a298:	83 ec 0c             	sub    esp,0xc
c001a29b:	ba 5c 23 03 c0       	mov    edx,0xc003235c
c001a2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2a4:	89 10                	mov    DWORD PTR [eax],edx
c001a2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2aa:	83 ec 0c             	sub    esp,0xc
c001a2ad:	50                   	push   eax
c001a2ae:	e8 a1 dc ff ff       	call   c0017f54 <UnixFile::~UnixFile()>
c001a2b3:	83 c4 10             	add    esp,0x10
c001a2b6:	90                   	nop
c001a2b7:	83 c4 0c             	add    esp,0xc
c001a2ba:	c3                   	ret    
c001a2bb:	90                   	nop

c001a2bc <File::~File()>:
c001a2bc:	83 ec 0c             	sub    esp,0xc
c001a2bf:	83 ec 0c             	sub    esp,0xc
c001a2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2c6:	e8 cd ff ff ff       	call   c001a298 <File::~File()>
c001a2cb:	83 c4 10             	add    esp,0x10
c001a2ce:	83 ec 08             	sub    esp,0x8
c001a2d1:	68 14 01 00 00       	push   0x114
c001a2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2da:	e8 f5 f0 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001a2df:	83 c4 10             	add    esp,0x10
c001a2e2:	83 c4 0c             	add    esp,0xc
c001a2e5:	c3                   	ret    

c001a2e6 <Directory::~Directory()>:
c001a2e6:	83 ec 0c             	sub    esp,0xc
c001a2e9:	ba 78 23 03 c0       	mov    edx,0xc0032378
c001a2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2f2:	89 10                	mov    DWORD PTR [eax],edx
c001a2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2f8:	83 ec 0c             	sub    esp,0xc
c001a2fb:	50                   	push   eax
c001a2fc:	e8 53 dc ff ff       	call   c0017f54 <UnixFile::~UnixFile()>
c001a301:	83 c4 10             	add    esp,0x10
c001a304:	90                   	nop
c001a305:	83 c4 0c             	add    esp,0xc
c001a308:	c3                   	ret    
c001a309:	90                   	nop

c001a30a <Directory::~Directory()>:
c001a30a:	83 ec 0c             	sub    esp,0xc
c001a30d:	83 ec 0c             	sub    esp,0xc
c001a310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a314:	e8 cd ff ff ff       	call   c001a2e6 <Directory::~Directory()>
c001a319:	83 c4 10             	add    esp,0x10
c001a31c:	83 ec 08             	sub    esp,0x8
c001a31f:	68 14 01 00 00       	push   0x114
c001a324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a328:	e8 a7 f0 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001a32d:	83 c4 10             	add    esp,0x10
c001a330:	83 c4 0c             	add    esp,0xc
c001a333:	c3                   	ret    

c001a334 <Filesystem::Filesystem()>:
c001a334:	ba f0 22 03 c0       	mov    edx,0xc00322f0
c001a339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a33d:	89 10                	mov    DWORD PTR [eax],edx
c001a33f:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a345:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a349:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a34c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a350:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a355:	90                   	nop
c001a356:	c3                   	ret    
c001a357:	90                   	nop

c001a358 <Filesystem::~Filesystem()>:
c001a358:	ba f0 22 03 c0       	mov    edx,0xc00322f0
c001a35d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a361:	89 10                	mov    DWORD PTR [eax],edx
c001a363:	90                   	nop
c001a364:	c3                   	ret    
c001a365:	90                   	nop

c001a366 <Filesystem::~Filesystem()>:
c001a366:	83 ec 0c             	sub    esp,0xc
c001a369:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a36d:	e8 e6 ff ff ff       	call   c001a358 <Filesystem::~Filesystem()>
c001a372:	83 c4 04             	add    esp,0x4
c001a375:	83 ec 08             	sub    esp,0x8
c001a378:	6a 08                	push   0x8
c001a37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a37e:	e8 51 f0 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001a383:	83 c4 10             	add    esp,0x10
c001a386:	83 c4 0c             	add    esp,0xc
c001a389:	c3                   	ret    

c001a38a <Fs::getcwd(Process*, char*, int)>:
c001a38a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a38e:	31 c0                	xor    eax,eax
c001a390:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a394:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a397:	7d 15                	jge    c001a3ae <Fs::getcwd(Process*, char*, int)+0x24>
c001a399:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a39d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a3a4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a3a7:	84 c9                	test   cl,cl
c001a3a9:	74 06                	je     c001a3b1 <Fs::getcwd(Process*, char*, int)+0x27>
c001a3ab:	40                   	inc    eax
c001a3ac:	eb e2                	jmp    c001a390 <Fs::getcwd(Process*, char*, int)+0x6>
c001a3ae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a3b1:	31 c0                	xor    eax,eax
c001a3b3:	c3                   	ret    

c001a3b4 <Fs::initVFS()>:
c001a3b4:	83 ec 18             	sub    esp,0x18
c001a3b7:	6a 08                	push   0x8
c001a3b9:	e8 de c2 ff ff       	call   c001669c <malloc>
c001a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3c1:	e8 da eb 00 00       	call   c0028fa0 <FAT::FAT()>
c001a3c6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a3cd:	e8 ca c2 ff ff       	call   c001669c <malloc>
c001a3d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3d5:	e8 f4 fa 00 00       	call   c0029ece <ISO9660::ISO9660()>
c001a3da:	83 c4 1c             	add    esp,0x1c
c001a3dd:	c3                   	ret    

c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a3de:	55                   	push   ebp
c001a3df:	57                   	push   edi
c001a3e0:	56                   	push   esi
c001a3e1:	53                   	push   ebx
c001a3e2:	81 ec 20 04 00 00    	sub    esp,0x420
c001a3e8:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c001a3ef:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c001a3f6:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c001a3fd:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c001a404:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a408:	68 00 04 00 00       	push   0x400
c001a40d:	6a 00                	push   0x0
c001a40f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a413:	57                   	push   edi
c001a414:	e8 d7 60 fe ff       	call   c00004f0 <memset>
c001a419:	83 c4 10             	add    esp,0x10
c001a41c:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c001a420:	75 0b                	jne    c001a42d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c001a422:	50                   	push   eax
c001a423:	50                   	push   eax
c001a424:	56                   	push   esi
c001a425:	57                   	push   edi
c001a426:	e8 25 62 fe ff       	call   c0000650 <strcpy>
c001a42b:	eb 45                	jmp    c001a472 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c001a42d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a430:	83 f8 2f             	cmp    eax,0x2f
c001a433:	74 05                	je     c001a43a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c001a435:	83 f8 5c             	cmp    eax,0x5c
c001a438:	75 19                	jne    c001a453 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c001a43a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001a43d:	3c 60                	cmp    al,0x60
c001a43f:	7e 03                	jle    c001a444 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c001a441:	83 e8 20             	sub    eax,0x20
c001a444:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a448:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a44f:	50                   	push   eax
c001a450:	50                   	push   eax
c001a451:	eb 18                	jmp    c001a46b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c001a453:	50                   	push   eax
c001a454:	50                   	push   eax
c001a455:	55                   	push   ebp
c001a456:	57                   	push   edi
c001a457:	e8 f4 61 fe ff       	call   c0000650 <strcpy>
c001a45c:	58                   	pop    eax
c001a45d:	5a                   	pop    edx
c001a45e:	68 ff 34 03 c0       	push   0xc00334ff
c001a463:	57                   	push   edi
c001a464:	e8 07 64 fe ff       	call   c0000870 <strcat>
c001a469:	59                   	pop    ecx
c001a46a:	5d                   	pop    ebp
c001a46b:	56                   	push   esi
c001a46c:	57                   	push   edi
c001a46d:	e8 fe 63 fe ff       	call   c0000870 <strcat>
c001a472:	83 c4 10             	add    esp,0x10
c001a475:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a479:	3c 60                	cmp    al,0x60
c001a47b:	7e 03                	jle    c001a480 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c001a47d:	83 e8 20             	sub    eax,0x20
c001a480:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a484:	be 03 00 00 00       	mov    esi,0x3
c001a489:	88 03                	mov    BYTE PTR [ebx],al
c001a48b:	b8 03 00 00 00       	mov    eax,0x3
c001a490:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a497:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001a49d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001a4a1:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c001a4a6:	89 fa                	mov    edx,edi
c001a4a8:	0f be ea             	movsx  ebp,dl
c001a4ab:	85 ed                	test   ebp,ebp
c001a4ad:	0f 84 a1 00 00 00    	je     c001a554 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c001a4b3:	8d 56 01             	lea    edx,[esi+0x1]
c001a4b6:	83 fd 2f             	cmp    ebp,0x2f
c001a4b9:	74 05                	je     c001a4c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c001a4bb:	83 fd 5c             	cmp    ebp,0x5c
c001a4be:	75 12                	jne    c001a4d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a4c0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a4c5:	89 c5                	mov    ebp,eax
c001a4c7:	74 09                	je     c001a4d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a4c9:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001a4cd:	40                   	inc    eax
c001a4ce:	89 d6                	mov    esi,edx
c001a4d0:	eb cf                	jmp    c001a4a1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a4d2:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c001a4d7:	89 f9                	mov    ecx,edi
c001a4d9:	0f be e9             	movsx  ebp,cl
c001a4dc:	75 61                	jne    c001a53f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a4de:	83 fd 2e             	cmp    ebp,0x2e
c001a4e1:	75 5c                	jne    c001a53f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a4e3:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c001a4e8:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c001a4ed:	74 19                	je     c001a508 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c001a4ef:	83 fd 2e             	cmp    ebp,0x2e
c001a4f2:	74 55                	je     c001a549 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a4f4:	89 f2                	mov    edx,esi
c001a4f6:	42                   	inc    edx
c001a4f7:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a4fc:	83 f9 2f             	cmp    ecx,0x2f
c001a4ff:	74 f5                	je     c001a4f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a501:	83 f9 5c             	cmp    ecx,0x5c
c001a504:	74 f0                	je     c001a4f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a506:	eb c6                	jmp    c001a4ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a508:	83 fd 2e             	cmp    ebp,0x2e
c001a50b:	74 3c                	je     c001a549 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a50d:	83 f8 03             	cmp    eax,0x3
c001a510:	74 bc                	je     c001a4ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a512:	42                   	inc    edx
c001a513:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a518:	83 f9 2f             	cmp    ecx,0x2f
c001a51b:	74 f5                	je     c001a512 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a51d:	83 f9 5c             	cmp    ecx,0x5c
c001a520:	74 f0                	je     c001a512 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a522:	48                   	dec    eax
c001a523:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a527:	75 06                	jne    c001a52f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a529:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a52d:	eb f3                	jmp    c001a522 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c001a52f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a533:	74 07                	je     c001a53c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c001a535:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a539:	48                   	dec    eax
c001a53a:	eb f3                	jmp    c001a52f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a53c:	40                   	inc    eax
c001a53d:	eb 8f                	jmp    c001a4ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a53f:	83 fd 2f             	cmp    ebp,0x2f
c001a542:	74 8a                	je     c001a4ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a544:	83 fd 5c             	cmp    ebp,0x5c
c001a547:	74 85                	je     c001a4ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a549:	89 f9                	mov    ecx,edi
c001a54b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a54e:	40                   	inc    eax
c001a54f:	e9 7a ff ff ff       	jmp    c001a4ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a554:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a558:	83 ec 0c             	sub    esp,0xc
c001a55b:	53                   	push   ebx
c001a55c:	e8 1f 60 fe ff       	call   c0000580 <strlen>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001a569:	74 1c                	je     c001a587 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a56b:	83 ec 0c             	sub    esp,0xc
c001a56e:	53                   	push   ebx
c001a56f:	e8 0c 60 fe ff       	call   c0000580 <strlen>
c001a574:	83 c4 10             	add    esp,0x10
c001a577:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a57c:	74 09                	je     c001a587 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a57e:	31 ff                	xor    edi,edi
c001a580:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c001a585:	eb 5c                	jmp    c001a5e3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a587:	83 ec 0c             	sub    esp,0xc
c001a58a:	53                   	push   ebx
c001a58b:	e8 f0 5f fe ff       	call   c0000580 <strlen>
c001a590:	83 c4 10             	add    esp,0x10
c001a593:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001a598:	74 e4                	je     c001a57e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c001a59a:	83 ec 0c             	sub    esp,0xc
c001a59d:	53                   	push   ebx
c001a59e:	e8 dd 5f fe ff       	call   c0000580 <strlen>
c001a5a3:	83 c4 10             	add    esp,0x10
c001a5a6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a5ab:	eb ab                	jmp    c001a558 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c001a5ad:	52                   	push   edx
c001a5ae:	52                   	push   edx
c001a5af:	53                   	push   ebx
c001a5b0:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001a5b4:	55                   	push   ebp
c001a5b5:	e8 96 60 fe ff       	call   c0000650 <strcpy>
c001a5ba:	59                   	pop    ecx
c001a5bb:	58                   	pop    eax
c001a5bc:	53                   	push   ebx
c001a5bd:	55                   	push   ebp
c001a5be:	e8 83 f8 ff ff       	call   c0019e46 <KeDereferenceSymlink(char const*, char*)>
c001a5c3:	83 c4 10             	add    esp,0x10
c001a5c6:	48                   	dec    eax
c001a5c7:	75 37                	jne    c001a600 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a5c9:	50                   	push   eax
c001a5ca:	53                   	push   ebx
c001a5cb:	55                   	push   ebp
c001a5cc:	68 a6 22 03 c0       	push   0xc00322a6
c001a5d1:	e8 fc ee ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001a5d6:	8d 47 01             	lea    eax,[edi+0x1]
c001a5d9:	83 c4 10             	add    esp,0x10
c001a5dc:	83 ff 14             	cmp    edi,0x14
c001a5df:	74 08                	je     c001a5e9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c001a5e1:	89 c7                	mov    edi,eax
c001a5e3:	85 f6                	test   esi,esi
c001a5e5:	75 c6                	jne    c001a5ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c001a5e7:	eb 17                	jmp    c001a600 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a5e9:	83 ec 0c             	sub    esp,0xc
c001a5ec:	bf 15 00 00 00       	mov    edi,0x15
c001a5f1:	68 c1 22 03 c0       	push   0xc00322c1
c001a5f6:	e8 9b 5f 00 00       	call   c0020596 <KePanic(char const*)>
c001a5fb:	83 c4 10             	add    esp,0x10
c001a5fe:	eb e3                	jmp    c001a5e3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a600:	81 c4 1c 04 00 00    	add    esp,0x41c
c001a606:	5b                   	pop    ebx
c001a607:	5e                   	pop    esi
c001a608:	5f                   	pop    edi
c001a609:	5d                   	pop    ebp
c001a60a:	c3                   	ret    
c001a60b:	90                   	nop

c001a60c <File::File(char const*, Process*, bool)>:
c001a60c:	83 ec 1c             	sub    esp,0x1c
c001a60f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a613:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a617:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a61b:	83 ec 08             	sub    esp,0x8
c001a61e:	6a 00                	push   0x0
c001a620:	50                   	push   eax
c001a621:	e8 48 d7 ff ff       	call   c0017d6e <UnixFile::UnixFile(int)>
c001a626:	83 c4 10             	add    esp,0x10
c001a629:	ba 5c 23 03 c0       	mov    edx,0xc003235c
c001a62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a632:	89 10                	mov    DWORD PTR [eax],edx
c001a634:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a639:	85 c0                	test   eax,eax
c001a63b:	74 0f                	je     c001a64c <File::File(char const*, Process*, bool)+0x40>
c001a63d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a642:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a646:	74 04                	je     c001a64c <File::File(char const*, Process*, bool)+0x40>
c001a648:	b0 01                	mov    al,0x1
c001a64a:	eb 02                	jmp    c001a64e <File::File(char const*, Process*, bool)+0x42>
c001a64c:	b0 00                	mov    al,0x0
c001a64e:	0f b6 c0             	movzx  eax,al
c001a651:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a655:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a65b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a65f:	83 c2 0d             	add    edx,0xd
c001a662:	50                   	push   eax
c001a663:	51                   	push   ecx
c001a664:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a668:	52                   	push   edx
c001a669:	e8 70 fd ff ff       	call   c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a66e:	83 c4 10             	add    esp,0x10
c001a671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a675:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a678:	83 e8 41             	sub    eax,0x41
c001a67b:	88 c2                	mov    dl,al
c001a67d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a681:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a68b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a68f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a693:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a699:	0f b6 c0             	movzx  eax,al
c001a69c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a6a3:	85 c0                	test   eax,eax
c001a6a5:	74 3e                	je     c001a6e5 <File::File(char const*, Process*, bool)+0xd9>
c001a6a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ab:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a6b1:	0f b6 c0             	movzx  eax,al
c001a6b4:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a6bb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a6c1:	85 c0                	test   eax,eax
c001a6c3:	75 20                	jne    c001a6e5 <File::File(char const*, Process*, bool)+0xd9>
c001a6c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6c9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a6cf:	0f b6 c0             	movzx  eax,al
c001a6d2:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a6d9:	83 ec 0c             	sub    esp,0xc
c001a6dc:	50                   	push   eax
c001a6dd:	e8 f6 22 00 00       	call   c001c9d8 <LogicalDisk::mount()>
c001a6e2:	83 c4 10             	add    esp,0x10
c001a6e5:	90                   	nop
c001a6e6:	83 c4 1c             	add    esp,0x1c
c001a6e9:	c3                   	ret    

c001a6ea <File::File(char const*, Process*)>:
c001a6ea:	83 ec 0c             	sub    esp,0xc
c001a6ed:	6a 01                	push   0x1
c001a6ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6fb:	e8 0c ff ff ff       	call   c001a60c <File::File(char const*, Process*, bool)>
c001a700:	83 c4 10             	add    esp,0x10
c001a703:	90                   	nop
c001a704:	83 c4 0c             	add    esp,0xc
c001a707:	c3                   	ret    

c001a708 <File::open(FileOpenMode)>:
c001a708:	53                   	push   ebx
c001a709:	b8 0b 00 00 00       	mov    eax,0xb
c001a70e:	83 ec 08             	sub    esp,0x8
c001a711:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a715:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a71c:	83 fa 19             	cmp    edx,0x19
c001a71f:	77 40                	ja     c001a761 <File::open(FileOpenMode)+0x59>
c001a721:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a728:	85 d2                	test   edx,edx
c001a72a:	74 35                	je     c001a761 <File::open(FileOpenMode)+0x59>
c001a72c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a732:	85 d2                	test   edx,edx
c001a734:	74 2b                	je     c001a761 <File::open(FileOpenMode)+0x59>
c001a736:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a73a:	b8 06 00 00 00       	mov    eax,0x6
c001a73f:	75 20                	jne    c001a761 <File::open(FileOpenMode)+0x59>
c001a741:	8b 02                	mov    eax,DWORD PTR [edx]
c001a743:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a74d:	51                   	push   ecx
c001a74e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a751:	51                   	push   ecx
c001a752:	52                   	push   edx
c001a753:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a756:	83 c4 10             	add    esp,0x10
c001a759:	85 c0                	test   eax,eax
c001a75b:	75 04                	jne    c001a761 <File::open(FileOpenMode)+0x59>
c001a75d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a761:	83 c4 08             	add    esp,0x8
c001a764:	5b                   	pop    ebx
c001a765:	c3                   	ret    

c001a766 <File::close()>:
c001a766:	53                   	push   ebx
c001a767:	b8 0b 00 00 00       	mov    eax,0xb
c001a76c:	83 ec 08             	sub    esp,0x8
c001a76f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a773:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a77a:	83 f9 19             	cmp    ecx,0x19
c001a77d:	77 41                	ja     c001a7c0 <File::close()+0x5a>
c001a77f:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a786:	85 db                	test   ebx,ebx
c001a788:	74 36                	je     c001a7c0 <File::close()+0x5a>
c001a78a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a791:	74 2d                	je     c001a7c0 <File::close()+0x5a>
c001a793:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a797:	b8 05 00 00 00       	mov    eax,0x5
c001a79c:	74 22                	je     c001a7c0 <File::close()+0x5a>
c001a79e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a7a2:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a7a9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a7af:	53                   	push   ebx
c001a7b0:	53                   	push   ebx
c001a7b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a7b3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a7b9:	50                   	push   eax
c001a7ba:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a7bd:	83 c4 10             	add    esp,0x10
c001a7c0:	83 c4 08             	add    esp,0x8
c001a7c3:	5b                   	pop    ebx
c001a7c4:	c3                   	ret    
c001a7c5:	90                   	nop

c001a7c6 <File::seek(unsigned long long)>:
c001a7c6:	56                   	push   esi
c001a7c7:	b8 0b 00 00 00       	mov    eax,0xb
c001a7cc:	53                   	push   ebx
c001a7cd:	51                   	push   ecx
c001a7ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7d6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7da:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a7e1:	83 fa 19             	cmp    edx,0x19
c001a7e4:	77 31                	ja     c001a817 <File::seek(unsigned long long)+0x51>
c001a7e6:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a7ed:	85 d2                	test   edx,edx
c001a7ef:	74 26                	je     c001a817 <File::seek(unsigned long long)+0x51>
c001a7f1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7f7:	85 d2                	test   edx,edx
c001a7f9:	74 1c                	je     c001a817 <File::seek(unsigned long long)+0x51>
c001a7fb:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a7ff:	b8 05 00 00 00       	mov    eax,0x5
c001a804:	74 11                	je     c001a817 <File::seek(unsigned long long)+0x51>
c001a806:	8b 02                	mov    eax,DWORD PTR [edx]
c001a808:	53                   	push   ebx
c001a809:	51                   	push   ecx
c001a80a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a810:	52                   	push   edx
c001a811:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a814:	83 c4 10             	add    esp,0x10
c001a817:	5a                   	pop    edx
c001a818:	5b                   	pop    ebx
c001a819:	5e                   	pop    esi
c001a81a:	c3                   	ret    
c001a81b:	90                   	nop

c001a81c <File::truncate(unsigned long long)>:
c001a81c:	56                   	push   esi
c001a81d:	b8 0b 00 00 00       	mov    eax,0xb
c001a822:	53                   	push   ebx
c001a823:	51                   	push   ecx
c001a824:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a828:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a82c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a830:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a837:	83 fa 19             	cmp    edx,0x19
c001a83a:	77 31                	ja     c001a86d <File::truncate(unsigned long long)+0x51>
c001a83c:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a843:	85 d2                	test   edx,edx
c001a845:	74 26                	je     c001a86d <File::truncate(unsigned long long)+0x51>
c001a847:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a84d:	85 d2                	test   edx,edx
c001a84f:	74 1c                	je     c001a86d <File::truncate(unsigned long long)+0x51>
c001a851:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a855:	b8 05 00 00 00       	mov    eax,0x5
c001a85a:	74 11                	je     c001a86d <File::truncate(unsigned long long)+0x51>
c001a85c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a85e:	53                   	push   ebx
c001a85f:	51                   	push   ecx
c001a860:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a866:	52                   	push   edx
c001a867:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a86a:	83 c4 10             	add    esp,0x10
c001a86d:	5a                   	pop    edx
c001a86e:	5b                   	pop    ebx
c001a86f:	5e                   	pop    esi
c001a870:	c3                   	ret    
c001a871:	90                   	nop

c001a872 <File::tell(unsigned long long*)>:
c001a872:	83 ec 0c             	sub    esp,0xc
c001a875:	b8 0b 00 00 00       	mov    eax,0xb
c001a87a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a87e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a885:	83 fa 19             	cmp    edx,0x19
c001a888:	77 34                	ja     c001a8be <File::tell(unsigned long long*)+0x4c>
c001a88a:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a891:	85 d2                	test   edx,edx
c001a893:	74 29                	je     c001a8be <File::tell(unsigned long long*)+0x4c>
c001a895:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a89b:	85 d2                	test   edx,edx
c001a89d:	74 1f                	je     c001a8be <File::tell(unsigned long long*)+0x4c>
c001a89f:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a8a3:	b8 05 00 00 00       	mov    eax,0x5
c001a8a8:	74 14                	je     c001a8be <File::tell(unsigned long long*)+0x4c>
c001a8aa:	50                   	push   eax
c001a8ab:	8b 02                	mov    eax,DWORD PTR [edx]
c001a8ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a8b1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a8b7:	52                   	push   edx
c001a8b8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	83 c4 0c             	add    esp,0xc
c001a8c1:	c3                   	ret    

c001a8c2 <File::rewind()>:
c001a8c2:	83 ec 10             	sub    esp,0x10
c001a8c5:	6a 00                	push   0x0
c001a8c7:	6a 00                	push   0x0
c001a8c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8cd:	e8 f4 fe ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c001a8d2:	83 c4 1c             	add    esp,0x1c
c001a8d5:	c3                   	ret    

c001a8d6 <File::unlink()>:
c001a8d6:	83 ec 0c             	sub    esp,0xc
c001a8d9:	b8 0b 00 00 00       	mov    eax,0xb
c001a8de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a8e9:	83 f9 19             	cmp    ecx,0x19
c001a8ec:	77 2f                	ja     c001a91d <File::unlink()+0x47>
c001a8ee:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a8f5:	85 c9                	test   ecx,ecx
c001a8f7:	74 24                	je     c001a91d <File::unlink()+0x47>
c001a8f9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a8ff:	85 c9                	test   ecx,ecx
c001a901:	74 1a                	je     c001a91d <File::unlink()+0x47>
c001a903:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a907:	b8 06 00 00 00       	mov    eax,0x6
c001a90c:	75 0f                	jne    c001a91d <File::unlink()+0x47>
c001a90e:	50                   	push   eax
c001a90f:	83 c2 0d             	add    edx,0xd
c001a912:	50                   	push   eax
c001a913:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a915:	52                   	push   edx
c001a916:	51                   	push   ecx
c001a917:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a91a:	83 c4 10             	add    esp,0x10
c001a91d:	83 c4 0c             	add    esp,0xc
c001a920:	c3                   	ret    
c001a921:	90                   	nop

c001a922 <File::rename(char const*)>:
c001a922:	83 ec 0c             	sub    esp,0xc
c001a925:	b8 0b 00 00 00       	mov    eax,0xb
c001a92a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a92e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a935:	83 f9 19             	cmp    ecx,0x19
c001a938:	77 32                	ja     c001a96c <File::rename(char const*)+0x4a>
c001a93a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a941:	85 c9                	test   ecx,ecx
c001a943:	74 27                	je     c001a96c <File::rename(char const*)+0x4a>
c001a945:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a94b:	85 c9                	test   ecx,ecx
c001a94d:	74 1d                	je     c001a96c <File::rename(char const*)+0x4a>
c001a94f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a953:	b8 06 00 00 00       	mov    eax,0x6
c001a958:	75 12                	jne    c001a96c <File::rename(char const*)+0x4a>
c001a95a:	50                   	push   eax
c001a95b:	83 c2 0d             	add    edx,0xd
c001a95e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a960:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a964:	52                   	push   edx
c001a965:	51                   	push   ecx
c001a966:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a969:	83 c4 10             	add    esp,0x10
c001a96c:	83 c4 0c             	add    esp,0xc
c001a96f:	c3                   	ret    

c001a970 <File::chfatattr(unsigned char, unsigned char)>:
c001a970:	57                   	push   edi
c001a971:	b8 0b 00 00 00       	mov    eax,0xb
c001a976:	56                   	push   esi
c001a977:	53                   	push   ebx
c001a978:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a97c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a980:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a984:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a98b:	83 f9 19             	cmp    ecx,0x19
c001a98e:	77 37                	ja     c001a9c7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a990:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a997:	85 c9                	test   ecx,ecx
c001a999:	74 2c                	je     c001a9c7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a99b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a9a1:	85 c9                	test   ecx,ecx
c001a9a3:	74 22                	je     c001a9c7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a9a5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a9a9:	b8 06 00 00 00       	mov    eax,0x6
c001a9ae:	75 17                	jne    c001a9c7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a9b0:	89 f0                	mov    eax,esi
c001a9b2:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a9b4:	0f b6 db             	movzx  ebx,bl
c001a9b7:	0f b6 f0             	movzx  esi,al
c001a9ba:	83 c2 0d             	add    edx,0xd
c001a9bd:	56                   	push   esi
c001a9be:	53                   	push   ebx
c001a9bf:	52                   	push   edx
c001a9c0:	51                   	push   ecx
c001a9c1:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a9c4:	83 c4 10             	add    esp,0x10
c001a9c7:	5b                   	pop    ebx
c001a9c8:	5e                   	pop    esi
c001a9c9:	5f                   	pop    edi
c001a9ca:	c3                   	ret    
c001a9cb:	90                   	nop

c001a9cc <File::exists()>:
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	31 c0                	xor    eax,eax
c001a9d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9d5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a9dc:	83 f9 19             	cmp    ecx,0x19
c001a9df:	77 24                	ja     c001aa05 <File::exists()+0x39>
c001a9e1:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a9e8:	85 c9                	test   ecx,ecx
c001a9ea:	74 19                	je     c001aa05 <File::exists()+0x39>
c001a9ec:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a9f2:	85 c9                	test   ecx,ecx
c001a9f4:	74 0f                	je     c001aa05 <File::exists()+0x39>
c001a9f6:	50                   	push   eax
c001a9f7:	83 c2 0d             	add    edx,0xd
c001a9fa:	50                   	push   eax
c001a9fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9fd:	52                   	push   edx
c001a9fe:	51                   	push   ecx
c001a9ff:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	83 c4 0c             	add    esp,0xc
c001aa08:	c3                   	ret    
c001aa09:	90                   	nop

c001aa0a <File::stat(unsigned long long*, bool*)>:
c001aa0a:	56                   	push   esi
c001aa0b:	53                   	push   ebx
c001aa0c:	50                   	push   eax
c001aa0d:	b8 0b 00 00 00       	mov    eax,0xb
c001aa12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa16:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa1a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa25:	83 f9 19             	cmp    ecx,0x19
c001aa28:	77 3d                	ja     c001aa67 <File::stat(unsigned long long*, bool*)+0x5d>
c001aa2a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa31:	85 c9                	test   ecx,ecx
c001aa33:	74 32                	je     c001aa67 <File::stat(unsigned long long*, bool*)+0x5d>
c001aa35:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa3b:	85 c9                	test   ecx,ecx
c001aa3d:	74 28                	je     c001aa67 <File::stat(unsigned long long*, bool*)+0x5d>
c001aa3f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa43:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa45:	74 13                	je     c001aa5a <File::stat(unsigned long long*, bool*)+0x50>
c001aa47:	83 ec 04             	sub    esp,0x4
c001aa4a:	56                   	push   esi
c001aa4b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aa51:	51                   	push   ecx
c001aa52:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001aa55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001aa58:	eb 0a                	jmp    c001aa64 <File::stat(unsigned long long*, bool*)+0x5a>
c001aa5a:	53                   	push   ebx
c001aa5b:	83 c2 0d             	add    edx,0xd
c001aa5e:	56                   	push   esi
c001aa5f:	52                   	push   edx
c001aa60:	51                   	push   ecx
c001aa61:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001aa64:	83 c4 10             	add    esp,0x10
c001aa67:	5a                   	pop    edx
c001aa68:	5b                   	pop    ebx
c001aa69:	5e                   	pop    esi
c001aa6a:	c3                   	ret    

c001aa6b <Fs::setcwd(Process*, char*)>:
c001aa6b:	55                   	push   ebp
c001aa6c:	57                   	push   edi
c001aa6d:	56                   	push   esi
c001aa6e:	53                   	push   ebx
c001aa6f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aa75:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001aa7c:	6a 00                	push   0x0
c001aa7e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001aa84:	57                   	push   edi
c001aa85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa8c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001aa90:	56                   	push   esi
c001aa91:	e8 48 f9 ff ff       	call   c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001aa96:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa99:	e8 e2 5a fe ff       	call   c0000580 <strlen>
c001aa9e:	83 c4 10             	add    esp,0x10
c001aaa1:	83 f8 02             	cmp    eax,0x2
c001aaa4:	77 15                	ja     c001aabb <Fs::setcwd(Process*, char*)+0x50>
c001aaa6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001aaab:	83 eb 41             	sub    ebx,0x41
c001aaae:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001aab5:	85 c0                	test   eax,eax
c001aab7:	75 1c                	jne    c001aad5 <Fs::setcwd(Process*, char*)+0x6a>
c001aab9:	eb 2f                	jmp    c001aaea <Fs::setcwd(Process*, char*)+0x7f>
c001aabb:	83 ec 0c             	sub    esp,0xc
c001aabe:	56                   	push   esi
c001aabf:	e8 bc 5a fe ff       	call   c0000580 <strlen>
c001aac4:	83 c4 10             	add    esp,0x10
c001aac7:	83 f8 03             	cmp    eax,0x3
c001aaca:	75 57                	jne    c001ab23 <Fs::setcwd(Process*, char*)+0xb8>
c001aacc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001aad1:	75 50                	jne    c001ab23 <Fs::setcwd(Process*, char*)+0xb8>
c001aad3:	eb d1                	jmp    c001aaa6 <Fs::setcwd(Process*, char*)+0x3b>
c001aad5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001aadc:	75 0c                	jne    c001aaea <Fs::setcwd(Process*, char*)+0x7f>
c001aade:	83 ec 0c             	sub    esp,0xc
c001aae1:	50                   	push   eax
c001aae2:	e8 f1 1e 00 00       	call   c001c9d8 <LogicalDisk::mount()>
c001aae7:	83 c4 10             	add    esp,0x10
c001aaea:	83 fb 19             	cmp    ebx,0x19
c001aaed:	b8 03 00 00 00       	mov    eax,0x3
c001aaf2:	0f 87 c6 00 00 00    	ja     c001abbe <Fs::setcwd(Process*, char*)+0x153>
c001aaf8:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001aaff:	b8 05 00 00 00       	mov    eax,0x5
c001ab04:	85 d2                	test   edx,edx
c001ab06:	0f 84 b2 00 00 00    	je     c001abbe <Fs::setcwd(Process*, char*)+0x153>
c001ab0c:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001ab13:	b8 06 00 00 00       	mov    eax,0x6
c001ab18:	0f 85 92 00 00 00    	jne    c001abb0 <Fs::setcwd(Process*, char*)+0x145>
c001ab1e:	e9 9b 00 00 00       	jmp    c001abbe <Fs::setcwd(Process*, char*)+0x153>
c001ab23:	83 ec 0c             	sub    esp,0xc
c001ab26:	68 14 01 00 00       	push   0x114
c001ab2b:	e8 6c bb ff ff       	call   c001669c <malloc>
c001ab30:	83 c4 0c             	add    esp,0xc
c001ab33:	55                   	push   ebp
c001ab34:	56                   	push   esi
c001ab35:	50                   	push   eax
c001ab36:	89 c3                	mov    ebx,eax
c001ab38:	e8 ad fb ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c001ab3d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001ab42:	83 c4 0c             	add    esp,0xc
c001ab45:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ab49:	50                   	push   eax
c001ab4a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab4e:	50                   	push   eax
c001ab4f:	53                   	push   ebx
c001ab50:	e8 b5 fe ff ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c001ab55:	83 c4 10             	add    esp,0x10
c001ab58:	83 f8 02             	cmp    eax,0x2
c001ab5b:	74 27                	je     c001ab84 <Fs::setcwd(Process*, char*)+0x119>
c001ab5d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ab62:	75 1c                	jne    c001ab80 <Fs::setcwd(Process*, char*)+0x115>
c001ab64:	85 db                	test   ebx,ebx
c001ab66:	b8 02 00 00 00       	mov    eax,0x2
c001ab6b:	74 51                	je     c001abbe <Fs::setcwd(Process*, char*)+0x153>
c001ab6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab6f:	83 ec 0c             	sub    esp,0xc
c001ab72:	53                   	push   ebx
c001ab73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab76:	83 c4 10             	add    esp,0x10
c001ab79:	b8 02 00 00 00       	mov    eax,0x2
c001ab7e:	eb 3e                	jmp    c001abbe <Fs::setcwd(Process*, char*)+0x153>
c001ab80:	85 c0                	test   eax,eax
c001ab82:	74 1c                	je     c001aba0 <Fs::setcwd(Process*, char*)+0x135>
c001ab84:	85 db                	test   ebx,ebx
c001ab86:	b8 01 00 00 00       	mov    eax,0x1
c001ab8b:	74 31                	je     c001abbe <Fs::setcwd(Process*, char*)+0x153>
c001ab8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab8f:	83 ec 0c             	sub    esp,0xc
c001ab92:	53                   	push   ebx
c001ab93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab96:	83 c4 10             	add    esp,0x10
c001ab99:	b8 01 00 00 00       	mov    eax,0x1
c001ab9e:	eb 1e                	jmp    c001abbe <Fs::setcwd(Process*, char*)+0x153>
c001aba0:	85 db                	test   ebx,ebx
c001aba2:	74 0c                	je     c001abb0 <Fs::setcwd(Process*, char*)+0x145>
c001aba4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aba6:	83 ec 0c             	sub    esp,0xc
c001aba9:	53                   	push   ebx
c001abaa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abad:	83 c4 10             	add    esp,0x10
c001abb0:	50                   	push   eax
c001abb1:	50                   	push   eax
c001abb2:	56                   	push   esi
c001abb3:	57                   	push   edi
c001abb4:	e8 97 5a fe ff       	call   c0000650 <strcpy>
c001abb9:	83 c4 10             	add    esp,0x10
c001abbc:	31 c0                	xor    eax,eax
c001abbe:	81 c4 1c 02 00 00    	add    esp,0x21c
c001abc4:	5b                   	pop    ebx
c001abc5:	5e                   	pop    esi
c001abc6:	5f                   	pop    edi
c001abc7:	5d                   	pop    ebp
c001abc8:	c3                   	ret    
c001abc9:	90                   	nop

c001abca <Directory::Directory(char const*, Process*)>:
c001abca:	83 ec 0c             	sub    esp,0xc
c001abcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd1:	83 ec 08             	sub    esp,0x8
c001abd4:	6a 00                	push   0x0
c001abd6:	50                   	push   eax
c001abd7:	e8 92 d1 ff ff       	call   c0017d6e <UnixFile::UnixFile(int)>
c001abdc:	83 c4 10             	add    esp,0x10
c001abdf:	ba 78 23 03 c0       	mov    edx,0xc0032378
c001abe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe8:	89 10                	mov    DWORD PTR [eax],edx
c001abea:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001abef:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001abf3:	0f 95 c0             	setne  al
c001abf6:	0f b6 c0             	movzx  eax,al
c001abf9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abfd:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001ac03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac07:	83 c2 0d             	add    edx,0xd
c001ac0a:	50                   	push   eax
c001ac0b:	51                   	push   ecx
c001ac0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac10:	52                   	push   edx
c001ac11:	e8 c8 f7 ff ff       	call   c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001ac16:	83 c4 10             	add    esp,0x10
c001ac19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac1d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001ac20:	83 e8 41             	sub    eax,0x41
c001ac23:	88 c2                	mov    dl,al
c001ac25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac29:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001ac2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac33:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001ac37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac41:	0f b6 c0             	movzx  eax,al
c001ac44:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001ac4b:	85 c0                	test   eax,eax
c001ac4d:	74 3e                	je     c001ac8d <Directory::Directory(char const*, Process*)+0xc3>
c001ac4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac53:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac59:	0f b6 c0             	movzx  eax,al
c001ac5c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001ac63:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ac69:	85 c0                	test   eax,eax
c001ac6b:	75 20                	jne    c001ac8d <Directory::Directory(char const*, Process*)+0xc3>
c001ac6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac71:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac77:	0f b6 c0             	movzx  eax,al
c001ac7a:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001ac81:	83 ec 0c             	sub    esp,0xc
c001ac84:	50                   	push   eax
c001ac85:	e8 4e 1d 00 00       	call   c001c9d8 <LogicalDisk::mount()>
c001ac8a:	83 c4 10             	add    esp,0x10
c001ac8d:	90                   	nop
c001ac8e:	83 c4 0c             	add    esp,0xc
c001ac91:	c3                   	ret    

c001ac92 <Directory::open()>:
c001ac92:	53                   	push   ebx
c001ac93:	b8 0b 00 00 00       	mov    eax,0xb
c001ac98:	83 ec 08             	sub    esp,0x8
c001ac9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac9f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001aca6:	83 fa 19             	cmp    edx,0x19
c001aca9:	77 3d                	ja     c001ace8 <Directory::open()+0x56>
c001acab:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001acb2:	85 d2                	test   edx,edx
c001acb4:	74 32                	je     c001ace8 <Directory::open()+0x56>
c001acb6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001acbc:	85 d2                	test   edx,edx
c001acbe:	74 28                	je     c001ace8 <Directory::open()+0x56>
c001acc0:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001acc4:	b8 06 00 00 00       	mov    eax,0x6
c001acc9:	75 1d                	jne    c001ace8 <Directory::open()+0x56>
c001accb:	50                   	push   eax
c001accc:	8b 02                	mov    eax,DWORD PTR [edx]
c001acce:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001acd4:	51                   	push   ecx
c001acd5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001acd8:	51                   	push   ecx
c001acd9:	52                   	push   edx
c001acda:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001acdd:	83 c4 10             	add    esp,0x10
c001ace0:	85 c0                	test   eax,eax
c001ace2:	75 04                	jne    c001ace8 <Directory::open()+0x56>
c001ace4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001ace8:	83 c4 08             	add    esp,0x8
c001aceb:	5b                   	pop    ebx
c001acec:	c3                   	ret    
c001aced:	90                   	nop

c001acee <Directory::close()>:
c001acee:	53                   	push   ebx
c001acef:	b8 0b 00 00 00       	mov    eax,0xb
c001acf4:	83 ec 08             	sub    esp,0x8
c001acf7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acfb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad02:	83 f9 19             	cmp    ecx,0x19
c001ad05:	77 41                	ja     c001ad48 <Directory::close()+0x5a>
c001ad07:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad0e:	85 db                	test   ebx,ebx
c001ad10:	74 36                	je     c001ad48 <Directory::close()+0x5a>
c001ad12:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001ad19:	74 2d                	je     c001ad48 <Directory::close()+0x5a>
c001ad1b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad1f:	b8 05 00 00 00       	mov    eax,0x5
c001ad24:	74 22                	je     c001ad48 <Directory::close()+0x5a>
c001ad26:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001ad2a:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad31:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ad37:	53                   	push   ebx
c001ad38:	53                   	push   ebx
c001ad39:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad3b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001ad41:	50                   	push   eax
c001ad42:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	83 c4 08             	add    esp,0x8
c001ad4b:	5b                   	pop    ebx
c001ad4c:	c3                   	ret    
c001ad4d:	90                   	nop

c001ad4e <Directory::unlink()>:
c001ad4e:	83 ec 0c             	sub    esp,0xc
c001ad51:	b8 0b 00 00 00       	mov    eax,0xb
c001ad56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad61:	83 f9 19             	cmp    ecx,0x19
c001ad64:	77 2f                	ja     c001ad95 <Directory::unlink()+0x47>
c001ad66:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad6d:	85 c9                	test   ecx,ecx
c001ad6f:	74 24                	je     c001ad95 <Directory::unlink()+0x47>
c001ad71:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad77:	85 c9                	test   ecx,ecx
c001ad79:	74 1a                	je     c001ad95 <Directory::unlink()+0x47>
c001ad7b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad7f:	b8 06 00 00 00       	mov    eax,0x6
c001ad84:	75 0f                	jne    c001ad95 <Directory::unlink()+0x47>
c001ad86:	50                   	push   eax
c001ad87:	83 c2 0d             	add    edx,0xd
c001ad8a:	50                   	push   eax
c001ad8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad8d:	52                   	push   edx
c001ad8e:	51                   	push   ecx
c001ad8f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001ad92:	83 c4 10             	add    esp,0x10
c001ad95:	83 c4 0c             	add    esp,0xc
c001ad98:	c3                   	ret    
c001ad99:	90                   	nop

c001ad9a <Directory::rename(char const*)>:
c001ad9a:	83 ec 0c             	sub    esp,0xc
c001ad9d:	b8 0b 00 00 00       	mov    eax,0xb
c001ada2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ada6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001adad:	83 f9 19             	cmp    ecx,0x19
c001adb0:	77 32                	ja     c001ade4 <Directory::rename(char const*)+0x4a>
c001adb2:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001adb9:	85 c9                	test   ecx,ecx
c001adbb:	74 27                	je     c001ade4 <Directory::rename(char const*)+0x4a>
c001adbd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001adc3:	85 c9                	test   ecx,ecx
c001adc5:	74 1d                	je     c001ade4 <Directory::rename(char const*)+0x4a>
c001adc7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001adcb:	b8 06 00 00 00       	mov    eax,0x6
c001add0:	75 12                	jne    c001ade4 <Directory::rename(char const*)+0x4a>
c001add2:	50                   	push   eax
c001add3:	83 c2 0d             	add    edx,0xd
c001add6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001add8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001addc:	52                   	push   edx
c001addd:	51                   	push   ecx
c001adde:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ade1:	83 c4 10             	add    esp,0x10
c001ade4:	83 c4 0c             	add    esp,0xc
c001ade7:	c3                   	ret    

c001ade8 <Directory::exists()>:
c001ade8:	83 ec 0c             	sub    esp,0xc
c001adeb:	31 c0                	xor    eax,eax
c001aded:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adf1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001adf8:	83 f9 19             	cmp    ecx,0x19
c001adfb:	77 24                	ja     c001ae21 <Directory::exists()+0x39>
c001adfd:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ae04:	85 c9                	test   ecx,ecx
c001ae06:	74 19                	je     c001ae21 <Directory::exists()+0x39>
c001ae08:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ae0e:	85 c9                	test   ecx,ecx
c001ae10:	74 0f                	je     c001ae21 <Directory::exists()+0x39>
c001ae12:	50                   	push   eax
c001ae13:	83 c2 0d             	add    edx,0xd
c001ae16:	50                   	push   eax
c001ae17:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae19:	52                   	push   edx
c001ae1a:	51                   	push   ecx
c001ae1b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ae1e:	83 c4 10             	add    esp,0x10
c001ae21:	83 c4 0c             	add    esp,0xc
c001ae24:	c3                   	ret    
c001ae25:	90                   	nop

c001ae26 <Directory::read(dirent*)>:
c001ae26:	83 ec 1c             	sub    esp,0x1c
c001ae29:	b8 0b 00 00 00       	mov    eax,0xb
c001ae2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae32:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ae39:	83 f9 19             	cmp    ecx,0x19
c001ae3c:	77 30                	ja     c001ae6e <Directory::read(dirent*)+0x48>
c001ae3e:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ae45:	85 c9                	test   ecx,ecx
c001ae47:	74 25                	je     c001ae6e <Directory::read(dirent*)+0x48>
c001ae49:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001ae50:	74 1c                	je     c001ae6e <Directory::read(dirent*)+0x48>
c001ae52:	83 ec 0c             	sub    esp,0xc
c001ae55:	8b 02                	mov    eax,DWORD PTR [edx]
c001ae57:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ae5b:	51                   	push   ecx
c001ae5c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae60:	6a 00                	push   0x0
c001ae62:	68 10 01 00 00       	push   0x110
c001ae67:	52                   	push   edx
c001ae68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae6b:	83 c4 20             	add    esp,0x20
c001ae6e:	83 c4 1c             	add    esp,0x1c
c001ae71:	c3                   	ret    

c001ae72 <Directory::create()>:
c001ae72:	83 ec 0c             	sub    esp,0xc
c001ae75:	b8 0b 00 00 00       	mov    eax,0xb
c001ae7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ae85:	83 f9 19             	cmp    ecx,0x19
c001ae88:	77 2f                	ja     c001aeb9 <Directory::create()+0x47>
c001ae8a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ae91:	85 c9                	test   ecx,ecx
c001ae93:	74 24                	je     c001aeb9 <Directory::create()+0x47>
c001ae95:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ae9b:	85 c9                	test   ecx,ecx
c001ae9d:	74 1a                	je     c001aeb9 <Directory::create()+0x47>
c001ae9f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aea3:	b8 06 00 00 00       	mov    eax,0x6
c001aea8:	75 0f                	jne    c001aeb9 <Directory::create()+0x47>
c001aeaa:	50                   	push   eax
c001aeab:	83 c2 0d             	add    edx,0xd
c001aeae:	50                   	push   eax
c001aeaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aeb1:	52                   	push   edx
c001aeb2:	51                   	push   ecx
c001aeb3:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001aeb6:	83 c4 10             	add    esp,0x10
c001aeb9:	83 c4 0c             	add    esp,0xc
c001aebc:	c3                   	ret    
c001aebd:	90                   	nop

c001aebe <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001aebe:	b8 0a 00 00 00       	mov    eax,0xa
c001aec3:	c3                   	ret    

c001aec4 <Bus::Bus(char const*)>:
c001aec4:	83 ec 0c             	sub    esp,0xc
c001aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aecb:	83 ec 08             	sub    esp,0x8
c001aece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aed2:	50                   	push   eax
c001aed3:	e8 2e 09 00 00       	call   c001b806 <Device::Device(char const*)>
c001aed8:	83 c4 10             	add    esp,0x10
c001aedb:	ba 94 23 03 c0       	mov    edx,0xc0032394
c001aee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee4:	89 10                	mov    DWORD PTR [eax],edx
c001aee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeea:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001aef4:	90                   	nop
c001aef5:	83 c4 0c             	add    esp,0xc
c001aef8:	c3                   	ret    
c001aef9:	90                   	nop
c001aefa:	66 90                	xchg   ax,ax

c001aefc <Bus::~Bus()>:
c001aefc:	83 ec 0c             	sub    esp,0xc
c001aeff:	ba 94 23 03 c0       	mov    edx,0xc0032394
c001af04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af08:	89 10                	mov    DWORD PTR [eax],edx
c001af0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af0e:	83 ec 0c             	sub    esp,0xc
c001af11:	50                   	push   eax
c001af12:	e8 8f 06 00 00       	call   c001b5a6 <Device::~Device()>
c001af17:	83 c4 10             	add    esp,0x10
c001af1a:	90                   	nop
c001af1b:	83 c4 0c             	add    esp,0xc
c001af1e:	c3                   	ret    
c001af1f:	90                   	nop

c001af20 <Bus::~Bus()>:
c001af20:	83 ec 0c             	sub    esp,0xc
c001af23:	83 ec 0c             	sub    esp,0xc
c001af26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af2a:	e8 cd ff ff ff       	call   c001aefc <Bus::~Bus()>
c001af2f:	83 c4 10             	add    esp,0x10
c001af32:	83 ec 08             	sub    esp,0x8
c001af35:	68 58 01 00 00       	push   0x158
c001af3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af3e:	e8 91 e4 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	83 c4 0c             	add    esp,0xc
c001af49:	c3                   	ret    

c001af4a <beepThread(void*)>:
c001af4a:	83 ec 0c             	sub    esp,0xc
c001af4d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001af52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af56:	48                   	dec    eax
c001af57:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001af5c:	75 01                	jne    c001af5f <beepThread(void*)+0x15>
c001af5e:	fb                   	sti    
c001af5f:	6b c2 0a             	imul   eax,edx,0xa
c001af62:	83 ec 0c             	sub    esp,0xc
c001af65:	50                   	push   eax
c001af66:	e8 59 a8 00 00       	call   c00257c4 <milliTenthSleep(unsigned int)>
c001af6b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af72:	e8 29 c7 00 00       	call   c00276a0 <HalMakeBeep(int)>
c001af77:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001af7f:	83 c4 1c             	add    esp,0x1c
c001af82:	e9 21 a7 00 00       	jmp    c00256a8 <blockTask(TaskState)>

c001af87 <Krnl::beep(int, int, bool)>:
c001af87:	56                   	push   esi
c001af88:	53                   	push   ebx
c001af89:	83 ec 10             	sub    esp,0x10
c001af8c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af98:	e8 03 c7 00 00       	call   c00276a0 <HalMakeBeep(int)>
c001af9d:	89 f0                	mov    eax,esi
c001af9f:	83 c4 10             	add    esp,0x10
c001afa2:	84 c0                	test   al,al
c001afa4:	74 1e                	je     c001afc4 <Krnl::beep(int, int, bool)+0x3d>
c001afa6:	6b db 0a             	imul   ebx,ebx,0xa
c001afa9:	83 ec 0c             	sub    esp,0xc
c001afac:	53                   	push   ebx
c001afad:	e8 12 a8 00 00       	call   c00257c4 <milliTenthSleep(unsigned int)>
c001afb2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001afba:	83 c4 14             	add    esp,0x14
c001afbd:	5b                   	pop    ebx
c001afbe:	5e                   	pop    esi
c001afbf:	e9 dc c6 00 00       	jmp    c00276a0 <HalMakeBeep(int)>
c001afc4:	68 e6 00 00 00       	push   0xe6
c001afc9:	53                   	push   ebx
c001afca:	68 4a af 01 c0       	push   0xc001af4a
c001afcf:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001afd5:	e8 c6 a3 00 00       	call   c00253a0 <Process::createThread(void (*)(void*), void*, int)>
c001afda:	83 c4 14             	add    esp,0x14
c001afdd:	5b                   	pop    ebx
c001afde:	5e                   	pop    esi
c001afdf:	c3                   	ret    

c001afe0 <User::loadClockSettings()>:
c001afe0:	56                   	push   esi
c001afe1:	53                   	push   ebx
c001afe2:	81 ec 40 01 00 00    	sub    esp,0x140
c001afe8:	68 b8 23 03 c0       	push   0xc00323b8
c001afed:	e8 e0 e4 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001aff2:	c7 04 24 ce 23 03 c0 	mov    DWORD PTR [esp],0xc00323ce
c001aff9:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c001affe:	e8 cf e4 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b003:	c7 04 24 e4 23 03 c0 	mov    DWORD PTR [esp],0xc00323e4
c001b00a:	e8 e5 70 00 00       	call   c00220f4 <CmOpen(char const*)>
c001b00f:	c7 04 24 09 24 03 c0 	mov    DWORD PTR [esp],0xc0032409
c001b016:	89 c3                	mov    ebx,eax
c001b018:	e8 b5 e4 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b01d:	58                   	pop    eax
c001b01e:	5a                   	pop    edx
c001b01f:	68 1f 24 03 c0       	push   0xc003241f
c001b024:	53                   	push   ebx
c001b025:	e8 c5 7c 00 00       	call   c0022cef <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001b02a:	c7 04 24 34 24 03 c0 	mov    DWORD PTR [esp],0xc0032434
c001b031:	89 c6                	mov    esi,eax
c001b033:	e8 9a e4 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b038:	83 c4 10             	add    esp,0x10
c001b03b:	85 f6                	test   esi,esi
c001b03d:	7e 1f                	jle    c001b05e <User::loadClockSettings()+0x7e>
c001b03f:	83 ec 0c             	sub    esp,0xc
c001b042:	68 4a 24 03 c0       	push   0xc003244a
c001b047:	e8 86 e4 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b04c:	83 c4 0c             	add    esp,0xc
c001b04f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b053:	50                   	push   eax
c001b054:	56                   	push   esi
c001b055:	53                   	push   ebx
c001b056:	e8 09 72 00 00       	call   c0022264 <CmGetString(Reghive_Tag*, int, char*)>
c001b05b:	83 c4 10             	add    esp,0x10
c001b05e:	83 ec 0c             	sub    esp,0xc
c001b061:	68 62 24 03 c0       	push   0xc0032462
c001b066:	e8 67 e4 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b06b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b06e:	e8 9f 71 00 00       	call   c0022212 <CmClose(Reghive_Tag*)>
c001b073:	c7 04 24 78 24 03 c0 	mov    DWORD PTR [esp],0xc0032478
c001b07a:	e8 53 e4 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b07f:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b083:	83 c4 10             	add    esp,0x10
c001b086:	83 e8 2b             	sub    eax,0x2b
c001b089:	a8 fd                	test   al,0xfd
c001b08b:	0f 85 9f 00 00 00    	jne    c001b130 <User::loadClockSettings()+0x150>
c001b091:	83 ec 0c             	sub    esp,0xc
c001b094:	68 8e 24 03 c0       	push   0xc003248e
c001b099:	e8 34 e4 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b09e:	83 c4 10             	add    esp,0x10
c001b0a1:	80 7c 24 06 2e       	cmp    BYTE PTR [esp+0x6],0x2e
c001b0a6:	c6 05 08 cf 03 c0 00 	mov    BYTE PTR ds:0xc003cf08,0x0
c001b0ad:	0f be 54 24 07       	movsx  edx,BYTE PTR [esp+0x7]
c001b0b2:	75 07                	jne    c001b0bb <User::loadClockSettings()+0xdb>
c001b0b4:	83 fa 35             	cmp    edx,0x35
c001b0b7:	b0 01                	mov    al,0x1
c001b0b9:	74 0f                	je     c001b0ca <User::loadClockSettings()+0xea>
c001b0bb:	31 c0                	xor    eax,eax
c001b0bd:	83 fa 2e             	cmp    edx,0x2e
c001b0c0:	75 08                	jne    c001b0ca <User::loadClockSettings()+0xea>
c001b0c2:	80 7c 24 08 35       	cmp    BYTE PTR [esp+0x8],0x35
c001b0c7:	0f 94 c0             	sete   al
c001b0ca:	a2 09 cf 03 c0       	mov    ds:0xc003cf09,al
c001b0cf:	83 ec 0c             	sub    esp,0xc
c001b0d2:	68 a4 24 03 c0       	push   0xc00324a4
c001b0d7:	e8 f6 e3 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b0dc:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c001b0e1:	83 c4 10             	add    esp,0x10
c001b0e4:	83 e8 30             	sub    eax,0x30
c001b0e7:	80 7c 24 07 2e       	cmp    BYTE PTR [esp+0x7],0x2e
c001b0ec:	a3 0c cf 03 c0       	mov    ds:0xc003cf0c,eax
c001b0f1:	75 11                	jne    c001b104 <User::loadClockSettings()+0x124>
c001b0f3:	0f be 54 24 06       	movsx  edx,BYTE PTR [esp+0x6]
c001b0f8:	6b c0 0a             	imul   eax,eax,0xa
c001b0fb:	8d 44 02 d0          	lea    eax,[edx+eax*1-0x30]
c001b0ff:	a3 0c cf 03 c0       	mov    ds:0xc003cf0c,eax
c001b104:	83 ec 0c             	sub    esp,0xc
c001b107:	68 ba 24 03 c0       	push   0xc00324ba
c001b10c:	e8 c1 e3 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b111:	83 c4 10             	add    esp,0x10
c001b114:	80 7c 24 04 2d       	cmp    BYTE PTR [esp+0x4],0x2d
c001b119:	75 06                	jne    c001b121 <User::loadClockSettings()+0x141>
c001b11b:	f7 1d 0c cf 03 c0    	neg    DWORD PTR ds:0xc003cf0c
c001b121:	83 ec 0c             	sub    esp,0xc
c001b124:	68 d0 24 03 c0       	push   0xc00324d0
c001b129:	e8 a4 e3 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b12e:	eb 25                	jmp    c001b155 <User::loadClockSettings()+0x175>
c001b130:	83 ec 0c             	sub    esp,0xc
c001b133:	68 8e 24 03 c0       	push   0xc003248e
c001b138:	e8 95 e3 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b13d:	c6 05 08 cf 03 c0 00 	mov    BYTE PTR ds:0xc003cf08,0x0
c001b144:	c6 05 09 cf 03 c0 00 	mov    BYTE PTR ds:0xc003cf09,0x0
c001b14b:	c7 05 0c cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf0c,0x0
c001b155:	83 c4 10             	add    esp,0x10
c001b158:	83 ec 0c             	sub    esp,0xc
c001b15b:	68 e7 24 03 c0       	push   0xc00324e7
c001b160:	e8 6d e3 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b165:	81 c4 44 01 00 00    	add    esp,0x144
c001b16b:	5b                   	pop    ebx
c001b16c:	5e                   	pop    esi
c001b16d:	c3                   	ret    

c001b16e <Clock::Clock(char const*)>:
c001b16e:	83 ec 0c             	sub    esp,0xc
c001b171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b175:	83 ec 08             	sub    esp,0x8
c001b178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b17c:	50                   	push   eax
c001b17d:	e8 84 06 00 00       	call   c001b806 <Device::Device(char const*)>
c001b182:	83 c4 10             	add    esp,0x10
c001b185:	ba 08 25 03 c0       	mov    edx,0xc0032508
c001b18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b18e:	89 10                	mov    DWORD PTR [eax],edx
c001b190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b194:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001b19e:	90                   	nop
c001b19f:	83 c4 0c             	add    esp,0xc
c001b1a2:	c3                   	ret    
c001b1a3:	90                   	nop

c001b1a4 <Clock::~Clock()>:
c001b1a4:	83 ec 0c             	sub    esp,0xc
c001b1a7:	ba 08 25 03 c0       	mov    edx,0xc0032508
c001b1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b0:	89 10                	mov    DWORD PTR [eax],edx
c001b1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b6:	83 ec 0c             	sub    esp,0xc
c001b1b9:	50                   	push   eax
c001b1ba:	e8 e7 03 00 00       	call   c001b5a6 <Device::~Device()>
c001b1bf:	83 c4 10             	add    esp,0x10
c001b1c2:	90                   	nop
c001b1c3:	83 c4 0c             	add    esp,0xc
c001b1c6:	c3                   	ret    
c001b1c7:	90                   	nop

c001b1c8 <Clock::~Clock()>:
c001b1c8:	83 ec 0c             	sub    esp,0xc
c001b1cb:	83 ec 0c             	sub    esp,0xc
c001b1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1d2:	e8 cd ff ff ff       	call   c001b1a4 <Clock::~Clock()>
c001b1d7:	83 c4 10             	add    esp,0x10
c001b1da:	83 ec 08             	sub    esp,0x8
c001b1dd:	68 58 01 00 00       	push   0x158
c001b1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1e6:	e8 e9 e1 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001b1eb:	83 c4 10             	add    esp,0x10
c001b1ee:	83 c4 0c             	add    esp,0xc
c001b1f1:	c3                   	ret    

c001b1f2 <Clock::timeInSecondsLocal()>:
c001b1f2:	53                   	push   ebx
c001b1f3:	83 ec 14             	sub    esp,0x14
c001b1f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1fa:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1fc:	50                   	push   eax
c001b1fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b200:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b207:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b20d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b213:	89 cb                	mov    ebx,ecx
c001b215:	c1 fb 1f             	sar    ebx,0x1f
c001b218:	01 c8                	add    eax,ecx
c001b21a:	11 da                	adc    edx,ebx
c001b21c:	83 c4 10             	add    esp,0x10
c001b21f:	31 c9                	xor    ecx,ecx
c001b221:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b228:	74 05                	je     c001b22f <Clock::timeInSecondsLocal()+0x3d>
c001b22a:	b9 08 07 00 00       	mov    ecx,0x708
c001b22f:	31 db                	xor    ebx,ebx
c001b231:	01 c8                	add    eax,ecx
c001b233:	11 da                	adc    edx,ebx
c001b235:	83 c4 08             	add    esp,0x8
c001b238:	5b                   	pop    ebx
c001b239:	c3                   	ret    

c001b23a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001b23a:	57                   	push   edi
c001b23b:	56                   	push   esi
c001b23c:	53                   	push   ebx
c001b23d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b241:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b245:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b249:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b24b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001b24e:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001b255:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001b25b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001b261:	99                   	cdq    
c001b262:	29 c6                	sub    esi,eax
c001b264:	19 d7                	sbb    edi,edx
c001b266:	89 f0                	mov    eax,esi
c001b268:	31 f6                	xor    esi,esi
c001b26a:	89 fa                	mov    edx,edi
c001b26c:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b273:	74 05                	je     c001b27a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001b275:	be 08 07 00 00       	mov    esi,0x708
c001b27a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b27e:	31 ff                	xor    edi,edi
c001b280:	29 f0                	sub    eax,esi
c001b282:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b286:	19 fa                	sbb    edx,edi
c001b288:	89 d8                	mov    eax,ebx
c001b28a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b28e:	5b                   	pop    ebx
c001b28f:	5e                   	pop    esi
c001b290:	5f                   	pop    edi
c001b291:	ff e0                	jmp    eax

c001b293 <datetimeToSeconds(datetime_t)>:
c001b293:	55                   	push   ebp
c001b294:	57                   	push   edi
c001b295:	56                   	push   esi
c001b296:	53                   	push   ebx
c001b297:	83 ec 0c             	sub    esp,0xc
c001b29a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b29e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2a2:	89 f7                	mov    edi,esi
c001b2a4:	89 f0                	mov    eax,esi
c001b2a6:	0f b6 cf             	movzx  ecx,bh
c001b2a9:	0f b6 c4             	movzx  eax,ah
c001b2ac:	c1 ef 10             	shr    edi,0x10
c001b2af:	89 da                	mov    edx,ebx
c001b2b1:	8d 69 ff             	lea    ebp,[ecx-0x1]
c001b2b4:	89 f9                	mov    ecx,edi
c001b2b6:	0f b6 f9             	movzx  edi,cl
c001b2b9:	89 f1                	mov    ecx,esi
c001b2bb:	6b c0 3c             	imul   eax,eax,0x3c
c001b2be:	0f b6 f1             	movzx  esi,cl
c001b2c1:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c001b2c7:	0f b6 db             	movzx  ebx,bl
c001b2ca:	c1 ea 10             	shr    edx,0x10
c001b2cd:	81 ea 6c 07 00 00    	sub    edx,0x76c
c001b2d3:	01 f8                	add    eax,edi
c001b2d5:	01 f0                	add    eax,esi
c001b2d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2da:	c1 f8 1f             	sar    eax,0x1f
c001b2dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2e1:	89 e8                	mov    eax,ebp
c001b2e3:	0f b6 c0             	movzx  eax,al
c001b2e6:	8b 0c 85 40 25 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcdac0]
c001b2ed:	83 f8 01             	cmp    eax,0x1
c001b2f0:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c001b2f4:	0f b7 da             	movzx  ebx,dx
c001b2f7:	76 27                	jbe    c001b320 <datetimeToSeconds(datetime_t)+0x8d>
c001b2f9:	80 e2 03             	and    dl,0x3
c001b2fc:	75 22                	jne    c001b320 <datetimeToSeconds(datetime_t)+0x8d>
c001b2fe:	31 d2                	xor    edx,edx
c001b300:	be 64 00 00 00       	mov    esi,0x64
c001b305:	89 d8                	mov    eax,ebx
c001b307:	f7 f6                	div    esi
c001b309:	85 d2                	test   edx,edx
c001b30b:	75 12                	jne    c001b31f <datetimeToSeconds(datetime_t)+0x8c>
c001b30d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001b313:	be 90 01 00 00       	mov    esi,0x190
c001b318:	99                   	cdq    
c001b319:	f7 fe                	idiv   esi
c001b31b:	85 d2                	test   edx,edx
c001b31d:	75 01                	jne    c001b320 <datetimeToSeconds(datetime_t)+0x8d>
c001b31f:	41                   	inc    ecx
c001b320:	83 fb 46             	cmp    ebx,0x46
c001b323:	76 48                	jbe    c001b36d <datetimeToSeconds(datetime_t)+0xda>
c001b325:	be 46 00 00 00       	mov    esi,0x46
c001b32a:	bf 64 00 00 00       	mov    edi,0x64
c001b32f:	bd 90 01 00 00       	mov    ebp,0x190
c001b334:	f7 c6 03 00 00 00    	test   esi,0x3
c001b33a:	b8 6d 01 00 00       	mov    eax,0x16d
c001b33f:	75 23                	jne    c001b364 <datetimeToSeconds(datetime_t)+0xd1>
c001b341:	89 f0                	mov    eax,esi
c001b343:	99                   	cdq    
c001b344:	f7 ff                	idiv   edi
c001b346:	b8 6e 01 00 00       	mov    eax,0x16e
c001b34b:	85 d2                	test   edx,edx
c001b34d:	75 15                	jne    c001b364 <datetimeToSeconds(datetime_t)+0xd1>
c001b34f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b355:	99                   	cdq    
c001b356:	f7 fd                	idiv   ebp
c001b358:	83 fa 01             	cmp    edx,0x1
c001b35b:	19 c0                	sbb    eax,eax
c001b35d:	f7 d0                	not    eax
c001b35f:	05 6e 01 00 00       	add    eax,0x16e
c001b364:	46                   	inc    esi
c001b365:	01 c1                	add    ecx,eax
c001b367:	39 de                	cmp    esi,ebx
c001b369:	7c c9                	jl     c001b334 <datetimeToSeconds(datetime_t)+0xa1>
c001b36b:	eb 34                	jmp    c001b3a1 <datetimeToSeconds(datetime_t)+0x10e>
c001b36d:	74 32                	je     c001b3a1 <datetimeToSeconds(datetime_t)+0x10e>
c001b36f:	b8 45 00 00 00       	mov    eax,0x45
c001b374:	89 c2                	mov    edx,eax
c001b376:	83 e2 03             	and    edx,0x3
c001b379:	39 d8                	cmp    eax,ebx
c001b37b:	7e 0f                	jle    c001b38c <datetimeToSeconds(datetime_t)+0xf9>
c001b37d:	83 fa 01             	cmp    edx,0x1
c001b380:	19 d2                	sbb    edx,edx
c001b382:	48                   	dec    eax
c001b383:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b38a:	eb e8                	jmp    c001b374 <datetimeToSeconds(datetime_t)+0xe1>
c001b38c:	85 d2                	test   edx,edx
c001b38e:	b8 6d 01 00 00       	mov    eax,0x16d
c001b393:	75 0a                	jne    c001b39f <datetimeToSeconds(datetime_t)+0x10c>
c001b395:	83 fb 01             	cmp    ebx,0x1
c001b398:	19 c0                	sbb    eax,eax
c001b39a:	05 6e 01 00 00       	add    eax,0x16e
c001b39f:	29 c1                	sub    ecx,eax
c001b3a1:	b8 80 51 01 00       	mov    eax,0x15180
c001b3a6:	f7 e9                	imul   ecx
c001b3a8:	03 04 24             	add    eax,DWORD PTR [esp]
c001b3ab:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b3af:	83 c4 0c             	add    esp,0xc
c001b3b2:	5b                   	pop    ebx
c001b3b3:	5e                   	pop    esi
c001b3b4:	5f                   	pop    edi
c001b3b5:	5d                   	pop    ebp
c001b3b6:	c3                   	ret    
c001b3b7:	90                   	nop

c001b3b8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b3b8:	57                   	push   edi
c001b3b9:	56                   	push   esi
c001b3ba:	53                   	push   ebx
c001b3bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3bf:	8b 06                	mov    eax,DWORD PTR [esi]
c001b3c1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b3c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3cc:	e8 c2 fe ff ff       	call   c001b293 <datetimeToSeconds(datetime_t)>
c001b3d1:	59                   	pop    ecx
c001b3d2:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b3d9:	5b                   	pop    ebx
c001b3da:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b3e0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b3e6:	89 cb                	mov    ebx,ecx
c001b3e8:	c1 fb 1f             	sar    ebx,0x1f
c001b3eb:	29 c8                	sub    eax,ecx
c001b3ed:	19 da                	sbb    edx,ebx
c001b3ef:	31 c9                	xor    ecx,ecx
c001b3f1:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b3f8:	74 05                	je     c001b3ff <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b3fa:	b9 08 07 00 00       	mov    ecx,0x708
c001b3ff:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b403:	31 db                	xor    ebx,ebx
c001b405:	29 c8                	sub    eax,ecx
c001b407:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b40b:	19 da                	sbb    edx,ebx
c001b40d:	89 f8                	mov    eax,edi
c001b40f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b413:	5b                   	pop    ebx
c001b414:	5e                   	pop    esi
c001b415:	5f                   	pop    edi
c001b416:	ff e0                	jmp    eax

c001b418 <secondsToDatetime(unsigned long long)>:
c001b418:	55                   	push   ebp
c001b419:	57                   	push   edi
c001b41a:	56                   	push   esi
c001b41b:	53                   	push   ebx
c001b41c:	83 ec 1c             	sub    esp,0x1c
c001b41f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b423:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b427:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b42b:	6a 00                	push   0x0
c001b42d:	68 80 51 01 00       	push   0x15180
c001b432:	55                   	push   ebp
c001b433:	57                   	push   edi
c001b434:	e8 47 37 01 00       	call   c002eb80 <__udivdi3>
c001b439:	83 c4 10             	add    esp,0x10
c001b43c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b440:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b446:	6a 00                	push   0x0
c001b448:	68 80 51 01 00       	push   0x15180
c001b44d:	55                   	push   ebp
c001b44e:	57                   	push   edi
c001b44f:	bf 10 0e 00 00       	mov    edi,0xe10
c001b454:	e8 27 38 01 00       	call   c002ec80 <__umoddi3>
c001b459:	83 c4 10             	add    esp,0x10
c001b45c:	99                   	cdq    
c001b45d:	f7 ff                	idiv   edi
c001b45f:	bf 3c 00 00 00       	mov    edi,0x3c
c001b464:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b467:	89 d0                	mov    eax,edx
c001b469:	99                   	cdq    
c001b46a:	f7 ff                	idiv   edi
c001b46c:	85 db                	test   ebx,ebx
c001b46e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b471:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b474:	79 11                	jns    c001b487 <secondsToDatetime(unsigned long long)+0x6f>
c001b476:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b47a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b480:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b485:	eb 07                	jmp    c001b48e <secondsToDatetime(unsigned long long)+0x76>
c001b487:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b48c:	89 d8                	mov    eax,ebx
c001b48e:	99                   	cdq    
c001b48f:	bf b4 05 00 00       	mov    edi,0x5b4
c001b494:	f7 f9                	idiv   ecx
c001b496:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b49b:	31 d2                	xor    edx,edx
c001b49d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4a6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b4ae:	01 c3                	add    ebx,eax
c001b4b0:	89 d8                	mov    eax,ebx
c001b4b2:	f7 f1                	div    ecx
c001b4b4:	31 d2                	xor    edx,edx
c001b4b6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b4b9:	89 d8                	mov    eax,ebx
c001b4bb:	f7 f7                	div    edi
c001b4bd:	31 d2                	xor    edx,edx
c001b4bf:	29 c1                	sub    ecx,eax
c001b4c1:	89 d8                	mov    eax,ebx
c001b4c3:	f7 f5                	div    ebp
c001b4c5:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b4ca:	31 d2                	xor    edx,edx
c001b4cc:	29 c1                	sub    ecx,eax
c001b4ce:	89 c8                	mov    eax,ecx
c001b4d0:	f7 f5                	div    ebp
c001b4d2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b4d7:	31 d2                	xor    edx,edx
c001b4d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4dd:	89 c8                	mov    eax,ecx
c001b4df:	f7 f5                	div    ebp
c001b4e1:	31 d2                	xor    edx,edx
c001b4e3:	01 c3                	add    ebx,eax
c001b4e5:	89 c8                	mov    eax,ecx
c001b4e7:	f7 f7                	div    edi
c001b4e9:	bf 99 00 00 00       	mov    edi,0x99
c001b4ee:	31 d2                	xor    edx,edx
c001b4f0:	29 c3                	sub    ebx,eax
c001b4f2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b4fa:	29 c3                	sub    ebx,eax
c001b4fc:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b4ff:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b502:	83 c1 02             	add    ecx,0x2
c001b505:	89 c8                	mov    eax,ecx
c001b507:	bb 05 00 00 00       	mov    ebx,0x5
c001b50c:	f7 f7                	div    edi
c001b50e:	31 d2                	xor    edx,edx
c001b510:	89 c7                	mov    edi,eax
c001b512:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b518:	83 c0 02             	add    eax,0x2
c001b51b:	f7 f3                	div    ebx
c001b51d:	89 eb                	mov    ebx,ebp
c001b51f:	29 c3                	sub    ebx,eax
c001b521:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b527:	88 1e                	mov    BYTE PTR [esi],bl
c001b529:	19 c0                	sbb    eax,eax
c001b52b:	31 d2                	xor    edx,edx
c001b52d:	83 e0 0c             	and    eax,0xc
c001b530:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b534:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b53c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b540:	83 f9 01             	cmp    ecx,0x1
c001b543:	0f 96 c2             	setbe  dl
c001b546:	41                   	inc    ecx
c001b547:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b54a:	01 d0                	add    eax,edx
c001b54c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b550:	83 c4 1c             	add    esp,0x1c
c001b553:	89 f0                	mov    eax,esi
c001b555:	5b                   	pop    ebx
c001b556:	5e                   	pop    esi
c001b557:	5f                   	pop    edi
c001b558:	5d                   	pop    ebp
c001b559:	c2 04 00             	ret    0x4

c001b55c <Clock::timeInDatetimeLocal()>:
c001b55c:	53                   	push   ebx
c001b55d:	83 ec 14             	sub    esp,0x14
c001b560:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b564:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b568:	e8 85 fc ff ff       	call   c001b1f2 <Clock::timeInSecondsLocal()>
c001b56d:	83 c4 0c             	add    esp,0xc
c001b570:	52                   	push   edx
c001b571:	50                   	push   eax
c001b572:	53                   	push   ebx
c001b573:	e8 a0 fe ff ff       	call   c001b418 <secondsToDatetime(unsigned long long)>
c001b578:	89 d8                	mov    eax,ebx
c001b57a:	83 c4 14             	add    esp,0x14
c001b57d:	5b                   	pop    ebx
c001b57e:	c2 04 00             	ret    0x4
c001b581:	90                   	nop

c001b582 <Device::hibernate()>:
c001b582:	c3                   	ret    
c001b583:	90                   	nop

c001b584 <Device::wake()>:
c001b584:	c3                   	ret    
c001b585:	90                   	nop

c001b586 <Device::detect()>:
c001b586:	c3                   	ret    
c001b587:	90                   	nop

c001b588 <Device::disableLegacy()>:
c001b588:	c3                   	ret    
c001b589:	90                   	nop

c001b58a <Device::powerSaving(PowerSavingLevel)>:
c001b58a:	c3                   	ret    
c001b58b:	90                   	nop

c001b58c <DriverlessDevice::close(int, int, void*)>:
c001b58c:	31 c0                	xor    eax,eax
c001b58e:	c3                   	ret    
c001b58f:	90                   	nop

c001b590 <DriverlessDevice::detect()>:
c001b590:	c3                   	ret    
c001b591:	90                   	nop

c001b592 <DriverlessDevice::open(int, int, void*)>:
c001b592:	83 ec 18             	sub    esp,0x18
c001b595:	68 70 25 03 c0       	push   0xc0032570
c001b59a:	e8 f7 4f 00 00       	call   c0020596 <KePanic(char const*)>
c001b59f:	83 c8 ff             	or     eax,0xffffffff
c001b5a2:	83 c4 1c             	add    esp,0x1c
c001b5a5:	c3                   	ret    

c001b5a6 <Device::~Device()>:
c001b5a6:	ba dc 25 03 c0       	mov    edx,0xc00325dc
c001b5ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5af:	89 10                	mov    DWORD PTR [eax],edx
c001b5b1:	90                   	nop
c001b5b2:	c3                   	ret    
c001b5b3:	90                   	nop

c001b5b4 <Device::~Device()>:
c001b5b4:	83 ec 0c             	sub    esp,0xc
c001b5b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b5bb:	e8 e6 ff ff ff       	call   c001b5a6 <Device::~Device()>
c001b5c0:	83 c4 04             	add    esp,0x4
c001b5c3:	83 ec 08             	sub    esp,0x8
c001b5c6:	68 58 01 00 00       	push   0x158
c001b5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5cf:	e8 00 de ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001b5d4:	83 c4 10             	add    esp,0x10
c001b5d7:	83 c4 0c             	add    esp,0xc
c001b5da:	c3                   	ret    
c001b5db:	90                   	nop

c001b5dc <Device::findAndLoadDriver()>:
c001b5dc:	c7 44 24 04 8e 25 03 c0 	mov    DWORD PTR [esp+0x4],0xc003258e
c001b5e4:	e9 e9 de ff ff       	jmp    c00194d2 <Dbg::kprintf(char const*, ...)>
c001b5e9:	90                   	nop

c001b5ea <Device::preOpenPCI(PCIDeviceInfo)>:
c001b5ea:	57                   	push   edi
c001b5eb:	b9 09 00 00 00       	mov    ecx,0x9
c001b5f0:	56                   	push   esi
c001b5f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b5f5:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b5f9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b603:	81 c7 18 01 00 00    	add    edi,0x118
c001b609:	fc                   	cld    
c001b60a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b60c:	5e                   	pop    esi
c001b60d:	5f                   	pop    edi
c001b60e:	c3                   	ret    
c001b60f:	90                   	nop

c001b610 <Device::preOpenACPI(void*, char*, char*)>:
c001b610:	57                   	push   edi
c001b611:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b616:	56                   	push   esi
c001b617:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b61b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b61f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b623:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b62d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b633:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b639:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b63b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b641:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b645:	b9 0e 00 00 00       	mov    ecx,0xe
c001b64a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b64c:	5e                   	pop    esi
c001b64d:	5f                   	pop    edi
c001b64e:	c3                   	ret    
c001b64f:	90                   	nop

c001b650 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b650:	53                   	push   ebx
c001b651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b655:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b65d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b661:	0f b6 c0             	movzx  eax,al
c001b664:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b668:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b66c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b670:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b674:	5b                   	pop    ebx
c001b675:	e9 be 05 00 00       	jmp    c001bc38 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b67a <Device::getParent()>:
c001b67a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b67e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b684:	c3                   	ret    
c001b685:	90                   	nop

c001b686 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b68a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b68e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b693:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b697:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b69b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b69f:	e9 0b 07 00 00       	jmp    c001bdaf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b6a4 <Device::addChild(Device*)>:
c001b6a4:	53                   	push   ebx
c001b6a5:	83 ec 08             	sub    esp,0x8
c001b6a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6b0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b6b6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b6bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6be:	85 d2                	test   edx,edx
c001b6c0:	74 04                	je     c001b6c6 <Device::addChild(Device*)+0x22>
c001b6c2:	89 d3                	mov    ebx,edx
c001b6c4:	eb f6                	jmp    c001b6bc <Device::addChild(Device*)+0x18>
c001b6c6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b6c9:	83 ec 0c             	sub    esp,0xc
c001b6cc:	6a 08                	push   0x8
c001b6ce:	e8 c9 af ff ff       	call   c001669c <malloc>
c001b6d3:	89 03                	mov    DWORD PTR [ebx],eax
c001b6d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b6db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b6e2:	83 c4 18             	add    esp,0x18
c001b6e5:	5b                   	pop    ebx
c001b6e6:	c3                   	ret    
c001b6e7:	90                   	nop

c001b6e8 <Device::removeAllChildren()>:
c001b6e8:	56                   	push   esi
c001b6e9:	53                   	push   ebx
c001b6ea:	52                   	push   edx
c001b6eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6ef:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b6f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b6f8:	74 17                	je     c001b711 <Device::removeAllChildren()+0x29>
c001b6fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b6fd:	85 c0                	test   eax,eax
c001b6ff:	74 0c                	je     c001b70d <Device::removeAllChildren()+0x25>
c001b701:	8b 10                	mov    edx,DWORD PTR [eax]
c001b703:	83 ec 0c             	sub    esp,0xc
c001b706:	50                   	push   eax
c001b707:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b70f:	eb e4                	jmp    c001b6f5 <Device::removeAllChildren()+0xd>
c001b711:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b717:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b71d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b723:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b72a:	58                   	pop    eax
c001b72b:	5b                   	pop    ebx
c001b72c:	5e                   	pop    esi
c001b72d:	c3                   	ret    

c001b72e <Device::hibernateAll()>:
c001b72e:	53                   	push   ebx
c001b72f:	83 ec 14             	sub    esp,0x14
c001b732:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b736:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b738:	53                   	push   ebx
c001b739:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b73c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b742:	83 c4 10             	add    esp,0x10
c001b745:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b748:	74 0f                	je     c001b759 <Device::hibernateAll()+0x2b>
c001b74a:	83 ec 0c             	sub    esp,0xc
c001b74d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b750:	e8 d9 ff ff ff       	call   c001b72e <Device::hibernateAll()>
c001b755:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b757:	eb e9                	jmp    c001b742 <Device::hibernateAll()+0x14>
c001b759:	83 c4 08             	add    esp,0x8
c001b75c:	5b                   	pop    ebx
c001b75d:	c3                   	ret    

c001b75e <Device::wakeAll()>:
c001b75e:	53                   	push   ebx
c001b75f:	83 ec 14             	sub    esp,0x14
c001b762:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b766:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b768:	53                   	push   ebx
c001b769:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b76c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b772:	83 c4 10             	add    esp,0x10
c001b775:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b778:	74 0f                	je     c001b789 <Device::wakeAll()+0x2b>
c001b77a:	83 ec 0c             	sub    esp,0xc
c001b77d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b780:	e8 d9 ff ff ff       	call   c001b75e <Device::wakeAll()>
c001b785:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b787:	eb e9                	jmp    c001b772 <Device::wakeAll()+0x14>
c001b789:	83 c4 08             	add    esp,0x8
c001b78c:	5b                   	pop    ebx
c001b78d:	c3                   	ret    

c001b78e <Device::detectAll()>:
c001b78e:	53                   	push   ebx
c001b78f:	83 ec 14             	sub    esp,0x14
c001b792:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b796:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b798:	53                   	push   ebx
c001b799:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b79c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b7a2:	83 c4 10             	add    esp,0x10
c001b7a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b7a8:	74 0f                	je     c001b7b9 <Device::detectAll()+0x2b>
c001b7aa:	83 ec 0c             	sub    esp,0xc
c001b7ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b7b0:	e8 d9 ff ff ff       	call   c001b78e <Device::detectAll()>
c001b7b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b7b7:	eb e9                	jmp    c001b7a2 <Device::detectAll()+0x14>
c001b7b9:	83 c4 08             	add    esp,0x8
c001b7bc:	5b                   	pop    ebx
c001b7bd:	c3                   	ret    

c001b7be <Device::disableLegacyAll()>:
c001b7be:	c3                   	ret    
c001b7bf:	90                   	nop

c001b7c0 <Device::loadDriversForAll()>:
c001b7c0:	c3                   	ret    
c001b7c1:	90                   	nop

c001b7c2 <Device::powerSavingAll(PowerSavingLevel)>:
c001b7c2:	56                   	push   esi
c001b7c3:	53                   	push   ebx
c001b7c4:	83 ec 0c             	sub    esp,0xc
c001b7c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b7cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b7cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7d1:	56                   	push   esi
c001b7d2:	53                   	push   ebx
c001b7d3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b7d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b7dc:	83 c4 10             	add    esp,0x10
c001b7df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b7e2:	74 0f                	je     c001b7f3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b7e4:	52                   	push   edx
c001b7e5:	52                   	push   edx
c001b7e6:	56                   	push   esi
c001b7e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b7ea:	e8 d3 ff ff ff       	call   c001b7c2 <Device::powerSavingAll(PowerSavingLevel)>
c001b7ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b7f1:	eb e9                	jmp    c001b7dc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b7f3:	58                   	pop    eax
c001b7f4:	5b                   	pop    ebx
c001b7f5:	5e                   	pop    esi
c001b7f6:	c3                   	ret    
c001b7f7:	90                   	nop

c001b7f8 <Device::setName(char const*)>:
c001b7f8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b800:	e9 4b 4e fe ff       	jmp    c0000650 <strcpy>
c001b805:	90                   	nop

c001b806 <Device::Device(char const*)>:
c001b806:	83 ec 1c             	sub    esp,0x1c
c001b809:	ba dc 25 03 c0       	mov    edx,0xc00325dc
c001b80e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b812:	89 10                	mov    DWORD PTR [eax],edx
c001b814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b818:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b826:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b834:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b83e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b842:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b84c:	83 ec 08             	sub    esp,0x8
c001b84f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b853:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b857:	e8 9c ff ff ff       	call   c001b7f8 <Device::setName(char const*)>
c001b85c:	83 c4 10             	add    esp,0x10
c001b85f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b867:	83 ec 0c             	sub    esp,0xc
c001b86a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b86e:	e8 29 ae ff ff       	call   c001669c <malloc>
c001b873:	83 c4 10             	add    esp,0x10
c001b876:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b87c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b883:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b887:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b88d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b891:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b897:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b89d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8a1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b8a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8b2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b8b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8bd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b8c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8c8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b8d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8d6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b8e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b8ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8f2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b8fc:	90                   	nop
c001b8fd:	83 c4 1c             	add    esp,0x1c
c001b900:	c3                   	ret    
c001b901:	90                   	nop

c001b902 <Device::getName()>:
c001b902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b906:	05 d0 00 00 00       	add    eax,0xd0
c001b90b:	c3                   	ret    

c001b90c <Device::closeAll()>:
c001b90c:	53                   	push   ebx
c001b90d:	83 ec 08             	sub    esp,0x8
c001b910:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b914:	53                   	push   ebx
c001b915:	e8 e8 ff ff ff       	call   c001b902 <Device::getName()>
c001b91a:	52                   	push   edx
c001b91b:	50                   	push   eax
c001b91c:	68 c8 25 03 c0       	push   0xc00325c8
c001b921:	e8 ac db ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001b926:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b928:	6a 00                	push   0x0
c001b92a:	6a 00                	push   0x0
c001b92c:	6a 00                	push   0x0
c001b92e:	53                   	push   ebx
c001b92f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b932:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b938:	83 c4 20             	add    esp,0x20
c001b93b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b93e:	74 12                	je     c001b952 <Device::closeAll()+0x46>
c001b940:	83 ec 0c             	sub    esp,0xc
c001b943:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b946:	e8 c1 ff ff ff       	call   c001b90c <Device::closeAll()>
c001b94b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b94d:	83 c4 10             	add    esp,0x10
c001b950:	eb e9                	jmp    c001b93b <Device::closeAll()+0x2f>
c001b952:	83 c4 08             	add    esp,0x8
c001b955:	5b                   	pop    ebx
c001b956:	c3                   	ret    
c001b957:	90                   	nop

c001b958 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b958:	83 ec 0c             	sub    esp,0xc
c001b95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95f:	83 ec 08             	sub    esp,0x8
c001b962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b966:	50                   	push   eax
c001b967:	e8 9a fe ff ff       	call   c001b806 <Device::Device(char const*)>
c001b96c:	83 c4 10             	add    esp,0x10
c001b96f:	ba 08 26 03 c0       	mov    edx,0xc0032608
c001b974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b978:	89 10                	mov    DWORD PTR [eax],edx
c001b97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b988:	90                   	nop
c001b989:	83 c4 0c             	add    esp,0xc
c001b98c:	c3                   	ret    
c001b98d:	90                   	nop

c001b98e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b98e:	57                   	push   edi
c001b98f:	56                   	push   esi
c001b990:	53                   	push   ebx
c001b991:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b995:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b999:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b99d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b9a3:	75 0c                	jne    c001b9b1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b9a5:	52                   	push   edx
c001b9a6:	52                   	push   edx
c001b9a7:	53                   	push   ebx
c001b9a8:	56                   	push   esi
c001b9a9:	e8 84 36 01 00       	call   c002f032 <LinkedList<Device>::addElement(Device*)>
c001b9ae:	83 c4 10             	add    esp,0x10
c001b9b1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b9b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b9ba:	74 12                	je     c001b9ce <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b9bc:	50                   	push   eax
c001b9bd:	57                   	push   edi
c001b9be:	56                   	push   esi
c001b9bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b9c2:	e8 c7 ff ff ff       	call   c001b98e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b9c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	eb e9                	jmp    c001b9b7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b9ce:	5b                   	pop    ebx
c001b9cf:	5e                   	pop    esi
c001b9d0:	5f                   	pop    edi
c001b9d1:	c3                   	ret    

c001b9d2 <getDevicesOfType(DeviceType)>:
c001b9d2:	53                   	push   ebx
c001b9d3:	83 ec 14             	sub    esp,0x14
c001b9d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9da:	53                   	push   ebx
c001b9db:	e8 2e 37 01 00       	call   c002f10e <LinkedList<Device>::LinkedList()>
c001b9e0:	83 c4 0c             	add    esp,0xc
c001b9e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b9e7:	53                   	push   ebx
c001b9e8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b9ee:	e8 9b ff ff ff       	call   c001b98e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b9f3:	83 c4 18             	add    esp,0x18
c001b9f6:	89 d8                	mov    eax,ebx
c001b9f8:	5b                   	pop    ebx
c001b9f9:	c2 04 00             	ret    0x4

c001b9fc <HardDiskController::HardDiskController(char const*)>:
c001b9fc:	83 ec 0c             	sub    esp,0xc
c001b9ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba03:	83 ec 08             	sub    esp,0x8
c001ba06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba0a:	50                   	push   eax
c001ba0b:	e8 f6 fd ff ff       	call   c001b806 <Device::Device(char const*)>
c001ba10:	83 c4 10             	add    esp,0x10
c001ba13:	ba 34 26 03 c0       	mov    edx,0xc0032634
c001ba18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1c:	89 10                	mov    DWORD PTR [eax],edx
c001ba1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba22:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001ba2c:	90                   	nop
c001ba2d:	83 c4 0c             	add    esp,0xc
c001ba30:	c3                   	ret    
c001ba31:	90                   	nop
c001ba32:	66 90                	xchg   ax,ax

c001ba34 <HardDiskController::~HardDiskController()>:
c001ba34:	83 ec 0c             	sub    esp,0xc
c001ba37:	ba 34 26 03 c0       	mov    edx,0xc0032634
c001ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba40:	89 10                	mov    DWORD PTR [eax],edx
c001ba42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba46:	83 ec 0c             	sub    esp,0xc
c001ba49:	50                   	push   eax
c001ba4a:	e8 57 fb ff ff       	call   c001b5a6 <Device::~Device()>
c001ba4f:	83 c4 10             	add    esp,0x10
c001ba52:	90                   	nop
c001ba53:	83 c4 0c             	add    esp,0xc
c001ba56:	c3                   	ret    
c001ba57:	90                   	nop

c001ba58 <HardDiskController::~HardDiskController()>:
c001ba58:	83 ec 0c             	sub    esp,0xc
c001ba5b:	83 ec 0c             	sub    esp,0xc
c001ba5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba62:	e8 cd ff ff ff       	call   c001ba34 <HardDiskController::~HardDiskController()>
c001ba67:	83 c4 10             	add    esp,0x10
c001ba6a:	83 ec 08             	sub    esp,0x8
c001ba6d:	68 58 01 00 00       	push   0x158
c001ba72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba76:	e8 59 d9 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001ba7b:	83 c4 10             	add    esp,0x10
c001ba7e:	83 c4 0c             	add    esp,0xc
c001ba81:	c3                   	ret    

c001ba82 <PhysicalDisk::eject()>:
c001ba82:	83 c8 ff             	or     eax,0xffffffff
c001ba85:	c3                   	ret    

c001ba86 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001ba86:	83 ec 0c             	sub    esp,0xc
c001ba89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8d:	83 ec 08             	sub    esp,0x8
c001ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba94:	50                   	push   eax
c001ba95:	e8 6c fd ff ff       	call   c001b806 <Device::Device(char const*)>
c001ba9a:	83 c4 10             	add    esp,0x10
c001ba9d:	ba 60 26 03 c0       	mov    edx,0xc0032660
c001baa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa6:	89 10                	mov    DWORD PTR [eax],edx
c001baa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001bab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001babe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001bacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bad4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bade:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bae8:	90                   	nop
c001bae9:	83 c4 0c             	add    esp,0xc
c001baec:	c3                   	ret    
c001baed:	90                   	nop

c001baee <PhysicalDisk::startCache()>:
c001baee:	56                   	push   esi
c001baef:	53                   	push   ebx
c001baf0:	83 ec 10             	sub    esp,0x10
c001baf3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001baf7:	6a 44                	push   0x44
c001baf9:	e8 9e ab ff ff       	call   c001669c <malloc>
c001bafe:	89 c6                	mov    esi,eax
c001bb00:	58                   	pop    eax
c001bb01:	5a                   	pop    edx
c001bb02:	53                   	push   ebx
c001bb03:	56                   	push   esi
c001bb04:	e8 77 17 00 00       	call   c001d280 <VCache::VCache(PhysicalDisk*)>
c001bb09:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001bb0f:	83 c4 14             	add    esp,0x14
c001bb12:	5b                   	pop    ebx
c001bb13:	5e                   	pop    esi
c001bb14:	c3                   	ret    
c001bb15:	90                   	nop

c001bb16 <PhysicalDisk::~PhysicalDisk()>:
c001bb16:	83 ec 0c             	sub    esp,0xc
c001bb19:	ba 60 26 03 c0       	mov    edx,0xc0032660
c001bb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb22:	89 10                	mov    DWORD PTR [eax],edx
c001bb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb28:	83 ec 0c             	sub    esp,0xc
c001bb2b:	50                   	push   eax
c001bb2c:	e8 75 fa ff ff       	call   c001b5a6 <Device::~Device()>
c001bb31:	83 c4 10             	add    esp,0x10
c001bb34:	90                   	nop
c001bb35:	83 c4 0c             	add    esp,0xc
c001bb38:	c3                   	ret    
c001bb39:	90                   	nop

c001bb3a <PhysicalDisk::~PhysicalDisk()>:
c001bb3a:	83 ec 0c             	sub    esp,0xc
c001bb3d:	83 ec 0c             	sub    esp,0xc
c001bb40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb44:	e8 cd ff ff ff       	call   c001bb16 <PhysicalDisk::~PhysicalDisk()>
c001bb49:	83 c4 10             	add    esp,0x10
c001bb4c:	83 ec 08             	sub    esp,0x8
c001bb4f:	68 6c 01 00 00       	push   0x16c
c001bb54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb58:	e8 77 d8 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001bb5d:	83 c4 10             	add    esp,0x10
c001bb60:	83 c4 0c             	add    esp,0xc
c001bb63:	c3                   	ret    

c001bb64 <int_handler>:
c001bb64:	55                   	push   ebp
c001bb65:	57                   	push   edi
c001bb66:	56                   	push   esi
c001bb67:	53                   	push   ebx
c001bb68:	83 ec 0c             	sub    esp,0xc
c001bb6b:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001bb72:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bb76:	74 0b                	je     c001bb83 <int_handler+0x1f>
c001bb78:	fa                   	cli    
c001bb79:	f4                   	hlt    
c001bb7a:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001bb81:	75 f5                	jne    c001bb78 <int_handler+0x14>
c001bb83:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001bb86:	8d 46 e0             	lea    eax,[esi-0x20]
c001bb89:	83 f8 17             	cmp    eax,0x17
c001bb8c:	76 40                	jbe    c001bbce <int_handler+0x6a>
c001bb8e:	c1 e6 04             	shl    esi,0x4
c001bb91:	31 db                	xor    ebx,ebx
c001bb93:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001bb99:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001bb9f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001bba3:	85 c0                	test   eax,eax
c001bba5:	74 13                	je     c001bbba <int_handler+0x56>
c001bba7:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001bbab:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001bbae:	74 2c                	je     c001bbdc <int_handler+0x78>
c001bbb0:	83 ec 08             	sub    esp,0x8
c001bbb3:	52                   	push   edx
c001bbb4:	57                   	push   edi
c001bbb5:	ff d0                	call   eax
c001bbb7:	83 c4 10             	add    esp,0x10
c001bbba:	83 c3 01             	add    ebx,0x1
c001bbbd:	83 fb 04             	cmp    ebx,0x4
c001bbc0:	75 dd                	jne    c001bb9f <int_handler+0x3b>
c001bbc2:	83 c4 0c             	add    esp,0xc
c001bbc5:	31 c0                	xor    eax,eax
c001bbc7:	5b                   	pop    ebx
c001bbc8:	31 d2                	xor    edx,edx
c001bbca:	5e                   	pop    esi
c001bbcb:	5f                   	pop    edi
c001bbcc:	5d                   	pop    ebp
c001bbcd:	c3                   	ret    
c001bbce:	83 ec 0c             	sub    esp,0xc
c001bbd1:	50                   	push   eax
c001bbd2:	e8 06 bb 00 00       	call   c00276dd <HalEndOfInterrupt(int)>
c001bbd7:	83 c4 10             	add    esp,0x10
c001bbda:	eb b2                	jmp    c001bb8e <int_handler+0x2a>
c001bbdc:	83 ec 08             	sub    esp,0x8
c001bbdf:	52                   	push   edx
c001bbe0:	57                   	push   edi
c001bbe1:	ff d0                	call   eax
c001bbe3:	83 c4 10             	add    esp,0x10
c001bbe6:	83 c4 0c             	add    esp,0xc
c001bbe9:	5b                   	pop    ebx
c001bbea:	5e                   	pop    esi
c001bbeb:	5f                   	pop    edi
c001bbec:	5d                   	pop    ebp
c001bbed:	c3                   	ret    

c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001bbee:	56                   	push   esi
c001bbef:	31 c0                	xor    eax,eax
c001bbf1:	53                   	push   ebx
c001bbf2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bbf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbfa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bbfe:	89 ca                	mov    edx,ecx
c001bc00:	c1 e2 04             	shl    edx,0x4
c001bc03:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001bc0b:	74 17                	je     c001bc24 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001bc0d:	83 c0 01             	add    eax,0x1
c001bc10:	83 f8 04             	cmp    eax,0x4
c001bc13:	75 ee                	jne    c001bc03 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001bc15:	c7 44 24 0c 90 26 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032690
c001bc1d:	5b                   	pop    ebx
c001bc1e:	5e                   	pop    esi
c001bc1f:	e9 72 49 00 00       	jmp    c0020596 <KePanic(char const*)>
c001bc24:	8d 04 88             	lea    eax,[eax+ecx*4]
c001bc27:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001bc2e:	5b                   	pop    ebx
c001bc2f:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001bc36:	5e                   	pop    esi
c001bc37:	c3                   	ret    

c001bc38 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001bc38:	55                   	push   ebp
c001bc39:	57                   	push   edi
c001bc3a:	56                   	push   esi
c001bc3b:	53                   	push   ebx
c001bc3c:	83 ec 0c             	sub    esp,0xc
c001bc3f:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bc45:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bc49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bc4d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bc54:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bc57:	74 57                	je     c001bcb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bc59:	84 c0                	test   al,al
c001bc5b:	89 c7                	mov    edi,eax
c001bc5d:	74 1d                	je     c001bc7c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001bc5f:	83 fe 0f             	cmp    esi,0xf
c001bc62:	0f 8f d9 00 00 00    	jg     c001bd41 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c001bc68:	0f b6 b6 48 43 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcbcb8]
c001bc6f:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001bc77:	d1 ef                	shr    edi,1
c001bc79:	83 e7 01             	and    edi,0x1
c001bc7c:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001bc81:	83 ec 08             	sub    esp,0x8
c001bc84:	31 db                	xor    ebx,ebx
c001bc86:	50                   	push   eax
c001bc87:	68 9d 26 03 c0       	push   0xc003269d
c001bc8c:	e8 41 d8 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001bc91:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001bc96:	83 c4 10             	add    esp,0x10
c001bc99:	85 c0                	test   eax,eax
c001bc9b:	7f 59                	jg     c001bcf6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c001bc9d:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	68 b4 26 03 c0       	push   0xc00326b4
c001bca8:	e8 e9 48 00 00       	call   c0020596 <KePanic(char const*)>
c001bcad:	83 c4 10             	add    esp,0x10
c001bcb0:	89 e8                	mov    eax,ebp
c001bcb2:	31 d2                	xor    edx,edx
c001bcb4:	c1 e0 04             	shl    eax,0x4
c001bcb7:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001bcbe:	85 c9                	test   ecx,ecx
c001bcc0:	0f 84 92 00 00 00    	je     c001bd58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c001bcc6:	83 c2 01             	add    edx,0x1
c001bcc9:	83 fa 04             	cmp    edx,0x4
c001bccc:	75 e9                	jne    c001bcb7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c001bcce:	83 ec 0c             	sub    esp,0xc
c001bcd1:	68 08 27 03 c0       	push   0xc0032708
c001bcd6:	e8 bb 48 00 00       	call   c0020596 <KePanic(char const*)>
c001bcdb:	83 c4 10             	add    esp,0x10
c001bcde:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bce3:	83 c4 0c             	add    esp,0xc
c001bce6:	5b                   	pop    ebx
c001bce7:	5e                   	pop    esi
c001bce8:	5f                   	pop    edi
c001bce9:	5d                   	pop    ebp
c001bcea:	c3                   	ret    
c001bceb:	83 c3 01             	add    ebx,0x1
c001bcee:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001bcf4:	7e a7                	jle    c001bc9d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c001bcf6:	8b 2c 9d e0 0b 04 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffbf420]
c001bcfd:	83 ec 08             	sub    esp,0x8
c001bd00:	56                   	push   esi
c001bd01:	55                   	push   ebp
c001bd02:	e8 77 22 01 00       	call   c002df7e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	84 c0                	test   al,al
c001bd0c:	74 dd                	je     c001bceb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001bd0e:	89 f8                	mov    eax,edi
c001bd10:	83 ec 04             	sub    esp,0x4
c001bd13:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001bd1a:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bd1d:	0f b6 f8             	movzx  edi,al
c001bd20:	57                   	push   edi
c001bd21:	89 e8                	mov    eax,ebp
c001bd23:	6a 00                	push   0x0
c001bd25:	0f b6 c0             	movzx  eax,al
c001bd28:	50                   	push   eax
c001bd29:	89 f0                	mov    eax,esi
c001bd2b:	6a 00                	push   0x0
c001bd2d:	0f b6 c0             	movzx  eax,al
c001bd30:	6a 00                	push   0x0
c001bd32:	50                   	push   eax
c001bd33:	53                   	push   ebx
c001bd34:	e8 b1 23 01 00       	call   c002e0ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bd39:	83 c4 20             	add    esp,0x20
c001bd3c:	e9 6f ff ff ff       	jmp    c001bcb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bd41:	83 ec 0c             	sub    esp,0xc
c001bd44:	31 ff                	xor    edi,edi
c001bd46:	68 d0 26 03 c0       	push   0xc00326d0
c001bd4b:	e8 46 48 00 00       	call   c0020596 <KePanic(char const*)>
c001bd50:	83 c4 10             	add    esp,0x10
c001bd53:	e9 24 ff ff ff       	jmp    c001bc7c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001bd58:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001bd5b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bd5f:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001bd66:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bd6a:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001bd71:	83 c4 0c             	add    esp,0xc
c001bd74:	89 f0                	mov    eax,esi
c001bd76:	5b                   	pop    ebx
c001bd77:	5e                   	pop    esi
c001bd78:	5f                   	pop    edi
c001bd79:	5d                   	pop    ebp
c001bd7a:	c3                   	ret    

c001bd7b <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001bd7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd83:	c1 e0 04             	shl    eax,0x4
c001bd86:	8d 50 10             	lea    edx,[eax+0x10]
c001bd89:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001bd8f:	74 08                	je     c001bd99 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bd91:	83 c0 04             	add    eax,0x4
c001bd94:	39 d0                	cmp    eax,edx
c001bd96:	75 f1                	jne    c001bd89 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bd98:	c3                   	ret    
c001bd99:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bda3:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bdad:	eb e2                	jmp    c001bd91 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bdaf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bdaf:	56                   	push   esi
c001bdb0:	53                   	push   ebx
c001bdb1:	83 ec 04             	sub    esp,0x4
c001bdb4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bdb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bdbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bdc1:	74 0e                	je     c001bdd1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001bdc3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001bdc8:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001bdcf:	75 34                	jne    c001be05 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c001bdd1:	8d 43 20             	lea    eax,[ebx+0x20]
c001bdd4:	c1 e0 04             	shl    eax,0x4
c001bdd7:	8d 50 10             	lea    edx,[eax+0x10]
c001bdda:	39 b0 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],esi
c001bde0:	74 0d                	je     c001bdef <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c001bde2:	83 c0 04             	add    eax,0x4
c001bde5:	39 d0                	cmp    eax,edx
c001bde7:	75 f1                	jne    c001bdda <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001bde9:	83 c4 04             	add    esp,0x4
c001bdec:	5b                   	pop    ebx
c001bded:	5e                   	pop    esi
c001bdee:	c3                   	ret    
c001bdef:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bdf9:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001be03:	eb dd                	jmp    c001bde2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c001be05:	83 fb 0f             	cmp    ebx,0xf
c001be08:	7f 09                	jg     c001be13 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c001be0a:	0f b6 9b 48 43 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcbcb8]
c001be11:	eb be                	jmp    c001bdd1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001be13:	83 ec 0c             	sub    esp,0xc
c001be16:	68 c1 26 03 c0       	push   0xc00326c1
c001be1b:	e8 76 47 00 00       	call   c0020596 <KePanic(char const*)>
c001be20:	83 c4 10             	add    esp,0x10
c001be23:	eb ac                	jmp    c001bdd1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c001be25 <setupINTS()>:
c001be25:	31 c0                	xor    eax,eax
c001be27:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001be31:	83 c0 10             	add    eax,0x10
c001be34:	c7 80 10 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30f0],0x0
c001be3e:	c7 80 14 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20ec],0x0
c001be48:	c7 80 14 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30ec],0x0
c001be52:	c7 80 18 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e8],0x0
c001be5c:	c7 80 18 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e8],0x0
c001be66:	c7 80 1c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e4],0x0
c001be70:	c7 80 1c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e4],0x0
c001be7a:	3d 00 10 00 00       	cmp    eax,0x1000
c001be7f:	75 a6                	jne    c001be27 <setupINTS()+0x2>
c001be81:	c3                   	ret    

c001be82 <convertLegacyIRQNumber(int)>:
c001be82:	83 ec 0c             	sub    esp,0xc
c001be85:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001be8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be8f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001be96:	74 0c                	je     c001bea4 <convertLegacyIRQNumber(int)+0x22>
c001be98:	83 f8 0f             	cmp    eax,0xf
c001be9b:	7f 0b                	jg     c001bea8 <convertLegacyIRQNumber(int)+0x26>
c001be9d:	0f b6 80 48 43 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcbcb8]
c001bea4:	83 c4 0c             	add    esp,0xc
c001bea7:	c3                   	ret    
c001bea8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001beac:	83 ec 0c             	sub    esp,0xc
c001beaf:	68 d0 26 03 c0       	push   0xc00326d0
c001beb4:	e8 dd 46 00 00       	call   c0020596 <KePanic(char const*)>
c001beb9:	83 c4 10             	add    esp,0x10
c001bebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec0:	83 c4 0c             	add    esp,0xc
c001bec3:	c3                   	ret    

c001bec4 <startGUI(void*)>:
c001bec4:	55                   	push   ebp
c001bec5:	89 e5                	mov    ebp,esp
c001bec7:	53                   	push   ebx
c001bec8:	83 ec 04             	sub    esp,0x4
c001becb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bed0:	83 e8 01             	sub    eax,0x1
c001bed3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bed8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bedd:	85 c0                	test   eax,eax
c001bedf:	75 01                	jne    c001bee2 <startGUI(void*)+0x1e>
c001bee1:	fb                   	sti    
c001bee2:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bee8:	83 ec 08             	sub    esp,0x8
c001beeb:	6a 01                	push   0x1
c001beed:	68 2d 27 03 c0       	push   0xc003272d
c001bef2:	e8 65 8c 00 00       	call   c0024b5c <Thr::loadDLL(char const*, bool)>
c001bef7:	83 c4 10             	add    esp,0x10
c001befa:	83 ec 08             	sub    esp,0x8
c001befd:	53                   	push   ebx
c001befe:	50                   	push   eax
c001beff:	e8 b9 8e 00 00       	call   c0024dbd <Thr::executeDLL(unsigned long, void*)>
c001bf04:	83 c4 10             	add    esp,0x10
c001bf07:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bf0d:	83 ec 08             	sub    esp,0x8
c001bf10:	6a 01                	push   0x1
c001bf12:	68 47 27 03 c0       	push   0xc0032747
c001bf17:	e8 40 8c 00 00       	call   c0024b5c <Thr::loadDLL(char const*, bool)>
c001bf1c:	83 c4 10             	add    esp,0x10
c001bf1f:	83 ec 08             	sub    esp,0x8
c001bf22:	53                   	push   ebx
c001bf23:	50                   	push   eax
c001bf24:	e8 94 8e 00 00       	call   c0024dbd <Thr::executeDLL(unsigned long, void*)>
c001bf29:	83 c4 10             	add    esp,0x10
c001bf2c:	eb fe                	jmp    c001bf2c <startGUI(void*)+0x68>

c001bf2e <startGUIVESA(void*)>:
c001bf2e:	55                   	push   ebp
c001bf2f:	89 e5                	mov    ebp,esp
c001bf31:	53                   	push   ebx
c001bf32:	83 ec 04             	sub    esp,0x4
c001bf35:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bf3a:	83 e8 01             	sub    eax,0x1
c001bf3d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bf42:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bf47:	85 c0                	test   eax,eax
c001bf49:	75 01                	jne    c001bf4c <startGUIVESA(void*)+0x1e>
c001bf4b:	fb                   	sti    
c001bf4c:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bf52:	83 ec 08             	sub    esp,0x8
c001bf55:	6a 01                	push   0x1
c001bf57:	68 65 27 03 c0       	push   0xc0032765
c001bf5c:	e8 fb 8b 00 00       	call   c0024b5c <Thr::loadDLL(char const*, bool)>
c001bf61:	83 c4 10             	add    esp,0x10
c001bf64:	83 ec 08             	sub    esp,0x8
c001bf67:	53                   	push   ebx
c001bf68:	50                   	push   eax
c001bf69:	e8 4f 8e 00 00       	call   c0024dbd <Thr::executeDLL(unsigned long, void*)>
c001bf6e:	83 c4 10             	add    esp,0x10
c001bf71:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bf77:	83 ec 08             	sub    esp,0x8
c001bf7a:	6a 01                	push   0x1
c001bf7c:	68 47 27 03 c0       	push   0xc0032747
c001bf81:	e8 d6 8b 00 00       	call   c0024b5c <Thr::loadDLL(char const*, bool)>
c001bf86:	83 c4 10             	add    esp,0x10
c001bf89:	83 ec 08             	sub    esp,0x8
c001bf8c:	53                   	push   ebx
c001bf8d:	50                   	push   eax
c001bf8e:	e8 2a 8e 00 00       	call   c0024dbd <Thr::executeDLL(unsigned long, void*)>
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	eb fe                	jmp    c001bf96 <startGUIVESA(void*)+0x68>

c001bf98 <sendKeyToTerminal(unsigned char)>:
c001bf98:	55                   	push   ebp
c001bf99:	89 e5                	mov    ebp,esp
c001bf9b:	83 ec 28             	sub    esp,0x28
c001bf9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfa1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bfa4:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bfa9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bfad:	83 ec 08             	sub    esp,0x8
c001bfb0:	52                   	push   edx
c001bfb1:	50                   	push   eax
c001bfb2:	e8 cd b9 ff ff       	call   c0017984 <VgaText::receiveKey(unsigned char)>
c001bfb7:	83 c4 10             	add    esp,0x10
c001bfba:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bfbe:	83 f8 0a             	cmp    eax,0xa
c001bfc1:	74 16                	je     c001bfd9 <sendKeyToTerminal(unsigned char)+0x41>
c001bfc3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bfc7:	83 f8 03             	cmp    eax,0x3
c001bfca:	74 0d                	je     c001bfd9 <sendKeyToTerminal(unsigned char)+0x41>
c001bfcc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bfd0:	83 f8 1c             	cmp    eax,0x1c
c001bfd3:	0f 85 97 00 00 00    	jne    c001c070 <sendKeyToTerminal(unsigned char)+0xd8>
c001bfd9:	fa                   	cli    
c001bfda:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bfdf:	83 c0 01             	add    eax,0x1
c001bfe2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bfe7:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bfec:	83 c0 01             	add    eax,0x1
c001bfef:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bff4:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bff9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bffc:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001c006:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001c00a:	74 1f                	je     c001c02b <sendKeyToTerminal(unsigned char)+0x93>
c001c00c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c00f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001c012:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c015:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c018:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001c01b:	83 ec 0c             	sub    esp,0xc
c001c01e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001c021:	e8 b2 98 00 00       	call   c00258d8 <unblockTask(ThreadControlBlock*)>
c001c026:	83 c4 10             	add    esp,0x10
c001c029:	eb db                	jmp    c001c006 <sendKeyToTerminal(unsigned char)+0x6e>
c001c02b:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001c030:	83 e8 01             	sub    eax,0x1
c001c033:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001c038:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001c03d:	85 c0                	test   eax,eax
c001c03f:	75 18                	jne    c001c059 <sendKeyToTerminal(unsigned char)+0xc1>
c001c041:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001c046:	85 c0                	test   eax,eax
c001c048:	74 0f                	je     c001c059 <sendKeyToTerminal(unsigned char)+0xc1>
c001c04a:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001c054:	e8 93 95 00 00       	call   c00255ec <schedule()>
c001c059:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c05e:	83 e8 01             	sub    eax,0x1
c001c061:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c066:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c06b:	85 c0                	test   eax,eax
c001c06d:	75 01                	jne    c001c070 <sendKeyToTerminal(unsigned char)+0xd8>
c001c06f:	fb                   	sti    
c001c070:	90                   	nop
c001c071:	c9                   	leave  
c001c072:	c3                   	ret    

c001c073 <sendKeyboardToken(KeyboardToken)>:
c001c073:	55                   	push   ebp
c001c074:	89 e5                	mov    ebp,esp
c001c076:	83 ec 18             	sub    esp,0x18
c001c079:	e8 68 45 00 00       	call   c00205e6 <KeUserIOReceived()>
c001c07e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001c081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c084:	0f b7 c0             	movzx  eax,ax
c001c087:	83 f2 01             	xor    edx,0x1
c001c08a:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001c090:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c095:	85 c0                	test   eax,eax
c001c097:	74 24                	je     c001c0bd <sendKeyboardToken(KeyboardToken)+0x4a>
c001c099:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001c09f:	83 ec 04             	sub    esp,0x4
c001c0a2:	68 40 ef 03 c0       	push   0xc003ef40
c001c0a7:	83 ec 08             	sub    esp,0x8
c001c0aa:	89 e0                	mov    eax,esp
c001c0ac:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001c0af:	89 08                	mov    DWORD PTR [eax],ecx
c001c0b1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001c0b4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c0b8:	ff d2                	call   edx
c001c0ba:	83 c4 10             	add    esp,0x10
c001c0bd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001c0c1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001c0c4:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001c0c9:	0f b6 d2             	movzx  edx,dl
c001c0cc:	0f b6 c0             	movzx  eax,al
c001c0cf:	39 c2                	cmp    edx,eax
c001c0d1:	74 1c                	je     c001c0ef <sendKeyboardToken(KeyboardToken)+0x7c>
c001c0d3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001c0d6:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001c0db:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001c0e0:	0f b6 c0             	movzx  eax,al
c001c0e3:	83 ec 0c             	sub    esp,0xc
c001c0e6:	50                   	push   eax
c001c0e7:	e8 f4 af ff ff       	call   c00170e0 <setTerminalScrollLock(bool)>
c001c0ec:	83 c4 10             	add    esp,0x10
c001c0ef:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001c0f2:	0f b6 c0             	movzx  eax,al
c001c0f5:	85 c0                	test   eax,eax
c001c0f7:	0f 84 da 00 00 00    	je     c001c1d7 <sendKeyboardToken(KeyboardToken)+0x164>
c001c0fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c100:	0f b7 c0             	movzx  eax,ax
c001c103:	3d 18 03 00 00       	cmp    eax,0x318
c001c108:	75 06                	jne    c001c110 <sendKeyboardToken(KeyboardToken)+0x9d>
c001c10a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001c110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c113:	0f b7 c0             	movzx  eax,ax
c001c116:	3d 19 03 00 00       	cmp    eax,0x319
c001c11b:	75 06                	jne    c001c123 <sendKeyboardToken(KeyboardToken)+0xb0>
c001c11d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001c123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c126:	0f b7 c0             	movzx  eax,ax
c001c129:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c12e:	75 06                	jne    c001c136 <sendKeyboardToken(KeyboardToken)+0xc3>
c001c130:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001c136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c139:	0f b7 c0             	movzx  eax,ax
c001c13c:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c141:	75 06                	jne    c001c149 <sendKeyboardToken(KeyboardToken)+0xd6>
c001c143:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001c149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c14c:	0f b7 c0             	movzx  eax,ax
c001c14f:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c154:	75 06                	jne    c001c15c <sendKeyboardToken(KeyboardToken)+0xe9>
c001c156:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001c15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c15f:	0f b7 c0             	movzx  eax,ax
c001c162:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c167:	75 06                	jne    c001c16f <sendKeyboardToken(KeyboardToken)+0xfc>
c001c169:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c172:	0f b7 c0             	movzx  eax,ax
c001c175:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c17a:	75 06                	jne    c001c182 <sendKeyboardToken(KeyboardToken)+0x10f>
c001c17c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001c182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c185:	0f b7 c0             	movzx  eax,ax
c001c188:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c18d:	75 06                	jne    c001c195 <sendKeyboardToken(KeyboardToken)+0x122>
c001c18f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001c195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c198:	0f b7 c0             	movzx  eax,ax
c001c19b:	3d 20 03 00 00       	cmp    eax,0x320
c001c1a0:	75 06                	jne    c001c1a8 <sendKeyboardToken(KeyboardToken)+0x135>
c001c1a2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001c1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1ab:	0f b7 c0             	movzx  eax,ax
c001c1ae:	3d 21 03 00 00       	cmp    eax,0x321
c001c1b3:	75 06                	jne    c001c1bb <sendKeyboardToken(KeyboardToken)+0x148>
c001c1b5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001c1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1be:	0f b7 c0             	movzx  eax,ax
c001c1c1:	3d 22 03 00 00       	cmp    eax,0x322
c001c1c6:	0f 85 f1 00 00 00    	jne    c001c2bd <sendKeyboardToken(KeyboardToken)+0x24a>
c001c1cc:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001c1d2:	e9 e6 00 00 00       	jmp    c001c2bd <sendKeyboardToken(KeyboardToken)+0x24a>
c001c1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1da:	0f b7 c0             	movzx  eax,ax
c001c1dd:	3d 18 03 00 00       	cmp    eax,0x318
c001c1e2:	75 0a                	jne    c001c1ee <sendKeyboardToken(KeyboardToken)+0x17b>
c001c1e4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001c1ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1f1:	0f b7 c0             	movzx  eax,ax
c001c1f4:	3d 19 03 00 00       	cmp    eax,0x319
c001c1f9:	75 0a                	jne    c001c205 <sendKeyboardToken(KeyboardToken)+0x192>
c001c1fb:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001c201:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c208:	0f b7 c0             	movzx  eax,ax
c001c20b:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c210:	75 0a                	jne    c001c21c <sendKeyboardToken(KeyboardToken)+0x1a9>
c001c212:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001c218:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c21c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c21f:	0f b7 c0             	movzx  eax,ax
c001c222:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c227:	75 0a                	jne    c001c233 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001c229:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001c22f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c236:	0f b7 c0             	movzx  eax,ax
c001c239:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c23e:	75 0a                	jne    c001c24a <sendKeyboardToken(KeyboardToken)+0x1d7>
c001c240:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001c246:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c24a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c24d:	0f b7 c0             	movzx  eax,ax
c001c250:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c255:	75 0a                	jne    c001c261 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001c257:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c25d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c264:	0f b7 c0             	movzx  eax,ax
c001c267:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c26c:	75 0a                	jne    c001c278 <sendKeyboardToken(KeyboardToken)+0x205>
c001c26e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001c274:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c27b:	0f b7 c0             	movzx  eax,ax
c001c27e:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c283:	75 0a                	jne    c001c28f <sendKeyboardToken(KeyboardToken)+0x21c>
c001c285:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001c28b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c28f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c292:	0f b7 c0             	movzx  eax,ax
c001c295:	3d 20 03 00 00       	cmp    eax,0x320
c001c29a:	75 0a                	jne    c001c2a6 <sendKeyboardToken(KeyboardToken)+0x233>
c001c29c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001c2a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c2a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2a9:	0f b7 c0             	movzx  eax,ax
c001c2ac:	3d 21 03 00 00       	cmp    eax,0x321
c001c2b1:	75 0a                	jne    c001c2bd <sendKeyboardToken(KeyboardToken)+0x24a>
c001c2b3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001c2b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2c0:	0f b7 c0             	movzx  eax,ax
c001c2c3:	3d 00 02 00 00       	cmp    eax,0x200
c001c2c8:	75 2f                	jne    c001c2f9 <sendKeyboardToken(KeyboardToken)+0x286>
c001c2ca:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c2cf:	83 f0 01             	xor    eax,0x1
c001c2d2:	0f b6 c0             	movzx  eax,al
c001c2d5:	85 c0                	test   eax,eax
c001c2d7:	74 20                	je     c001c2f9 <sendKeyboardToken(KeyboardToken)+0x286>
c001c2d9:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c2de:	6a 01                	push   0x1
c001c2e0:	6a 00                	push   0x0
c001c2e2:	68 c4 be 01 c0       	push   0xc001bec4
c001c2e7:	50                   	push   eax
c001c2e8:	e8 b3 90 00 00       	call   c00253a0 <Process::createThread(void (*)(void*), void*, int)>
c001c2ed:	83 c4 10             	add    esp,0x10
c001c2f0:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c2f7:	eb 3a                	jmp    c001c333 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c2f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2fc:	0f b7 c0             	movzx  eax,ax
c001c2ff:	3d 01 02 00 00       	cmp    eax,0x201
c001c304:	75 2d                	jne    c001c333 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c306:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c30b:	83 f0 01             	xor    eax,0x1
c001c30e:	0f b6 c0             	movzx  eax,al
c001c311:	85 c0                	test   eax,eax
c001c313:	74 1e                	je     c001c333 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c315:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c31a:	6a 01                	push   0x1
c001c31c:	6a 00                	push   0x0
c001c31e:	68 2e bf 01 c0       	push   0xc001bf2e
c001c323:	50                   	push   eax
c001c324:	e8 77 90 00 00       	call   c00253a0 <Process::createThread(void (*)(void*), void*, int)>
c001c329:	83 c4 10             	add    esp,0x10
c001c32c:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c336:	0f b7 c0             	movzx  eax,ax
c001c339:	3d 25 03 00 00       	cmp    eax,0x325
c001c33e:	75 06                	jne    c001c346 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c340:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c349:	0f b7 c0             	movzx  eax,ax
c001c34c:	3d 24 03 00 00       	cmp    eax,0x324
c001c351:	75 06                	jne    c001c359 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c353:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c35c:	0f b7 c0             	movzx  eax,ax
c001c35f:	3d 23 03 00 00       	cmp    eax,0x323
c001c364:	75 06                	jne    c001c36c <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c366:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c36f:	0f b7 c0             	movzx  eax,ax
c001c372:	3d 26 03 00 00       	cmp    eax,0x326
c001c377:	75 06                	jne    c001c37f <sendKeyboardToken(KeyboardToken)+0x30c>
c001c379:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c382:	0f b7 c0             	movzx  eax,ax
c001c385:	3d 27 03 00 00       	cmp    eax,0x327
c001c38a:	75 06                	jne    c001c392 <sendKeyboardToken(KeyboardToken)+0x31f>
c001c38c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c395:	0f b7 c0             	movzx  eax,ax
c001c398:	3d 22 03 00 00       	cmp    eax,0x322
c001c39d:	75 06                	jne    c001c3a5 <sendKeyboardToken(KeyboardToken)+0x332>
c001c39f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c3a5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c3a9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c3ac:	83 f0 01             	xor    eax,0x1
c001c3af:	0f b6 c0             	movzx  eax,al
c001c3b2:	85 c0                	test   eax,eax
c001c3b4:	74 7c                	je     c001c432 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c3b6:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001c3bb:	0f b6 c0             	movzx  eax,al
c001c3be:	85 c0                	test   eax,eax
c001c3c0:	74 43                	je     c001c405 <sendKeyboardToken(KeyboardToken)+0x392>
c001c3c2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c3c6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c3ca:	85 c0                	test   eax,eax
c001c3cc:	74 2b                	je     c001c3f9 <sendKeyboardToken(KeyboardToken)+0x386>
c001c3ce:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001c3d4:	89 d0                	mov    eax,edx
c001c3d6:	c1 e0 02             	shl    eax,0x2
c001c3d9:	01 d0                	add    eax,edx
c001c3db:	d1 e0                	shl    eax,1
c001c3dd:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c3e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3e5:	0f b7 c0             	movzx  eax,ax
c001c3e8:	8d 50 d0             	lea    edx,[eax-0x30]
c001c3eb:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c3f0:	01 d0                	add    eax,edx
c001c3f2:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c3f7:	eb 71                	jmp    c001c46a <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c3f9:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c403:	eb 65                	jmp    c001c46a <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c405:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c40a:	85 c0                	test   eax,eax
c001c40c:	74 18                	je     c001c426 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c40e:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c413:	0f b6 c0             	movzx  eax,al
c001c416:	83 ec 0c             	sub    esp,0xc
c001c419:	50                   	push   eax
c001c41a:	e8 79 fb ff ff       	call   c001bf98 <sendKeyToTerminal(unsigned char)>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c426:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c430:	eb 38                	jmp    c001c46a <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c435:	0f b7 c0             	movzx  eax,ax
c001c438:	3d 01 01 00 00       	cmp    eax,0x101
c001c43d:	75 2b                	jne    c001c46a <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c43f:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c444:	85 c0                	test   eax,eax
c001c446:	74 18                	je     c001c460 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c448:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c44d:	0f b6 c0             	movzx  eax,al
c001c450:	83 ec 0c             	sub    esp,0xc
c001c453:	50                   	push   eax
c001c454:	e8 3f fb ff ff       	call   c001bf98 <sendKeyToTerminal(unsigned char)>
c001c459:	83 c4 10             	add    esp,0x10
c001c45c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c460:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c46a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c46d:	83 f0 01             	xor    eax,0x1
c001c470:	0f b6 c0             	movzx  eax,al
c001c473:	85 c0                	test   eax,eax
c001c475:	74 5a                	je     c001c4d1 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c477:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c47a:	83 f0 01             	xor    eax,0x1
c001c47d:	0f b6 c0             	movzx  eax,al
c001c480:	85 c0                	test   eax,eax
c001c482:	74 4d                	je     c001c4d1 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c484:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c489:	83 f0 01             	xor    eax,0x1
c001c48c:	0f b6 c0             	movzx  eax,al
c001c48f:	85 c0                	test   eax,eax
c001c491:	74 3e                	je     c001c4d1 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c496:	0f b7 c0             	movzx  eax,ax
c001c499:	83 f8 1f             	cmp    eax,0x1f
c001c49c:	76 0b                	jbe    c001c4a9 <sendKeyboardToken(KeyboardToken)+0x436>
c001c49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4a1:	0f b7 c0             	movzx  eax,ax
c001c4a4:	83 f8 7e             	cmp    eax,0x7e
c001c4a7:	76 16                	jbe    c001c4bf <sendKeyboardToken(KeyboardToken)+0x44c>
c001c4a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4ac:	0f b7 c0             	movzx  eax,ax
c001c4af:	83 f8 0a             	cmp    eax,0xa
c001c4b2:	74 0b                	je     c001c4bf <sendKeyboardToken(KeyboardToken)+0x44c>
c001c4b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4b7:	0f b7 c0             	movzx  eax,ax
c001c4ba:	83 f8 08             	cmp    eax,0x8
c001c4bd:	75 12                	jne    c001c4d1 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c4bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4c2:	0f b6 c0             	movzx  eax,al
c001c4c5:	83 ec 0c             	sub    esp,0xc
c001c4c8:	50                   	push   eax
c001c4c9:	e8 ca fa ff ff       	call   c001bf98 <sendKeyToTerminal(unsigned char)>
c001c4ce:	83 c4 10             	add    esp,0x10
c001c4d1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c4d4:	83 f0 01             	xor    eax,0x1
c001c4d7:	0f b6 c0             	movzx  eax,al
c001c4da:	85 c0                	test   eax,eax
c001c4dc:	74 5d                	je     c001c53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c4de:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c4e1:	83 f0 01             	xor    eax,0x1
c001c4e4:	0f b6 c0             	movzx  eax,al
c001c4e7:	85 c0                	test   eax,eax
c001c4e9:	74 50                	je     c001c53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c4eb:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c4f0:	0f b6 c0             	movzx  eax,al
c001c4f3:	85 c0                	test   eax,eax
c001c4f5:	74 44                	je     c001c53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c4f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4fa:	0f b7 c0             	movzx  eax,ax
c001c4fd:	83 f8 3f             	cmp    eax,0x3f
c001c500:	76 39                	jbe    c001c53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c505:	0f b7 c0             	movzx  eax,ax
c001c508:	83 f8 7f             	cmp    eax,0x7f
c001c50b:	77 2e                	ja     c001c53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c50d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c510:	88 c2                	mov    dl,al
c001c512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c515:	0f b7 c0             	movzx  eax,ax
c001c518:	83 f8 5f             	cmp    eax,0x5f
c001c51b:	76 04                	jbe    c001c521 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c51d:	b0 20                	mov    al,0x20
c001c51f:	eb 02                	jmp    c001c523 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c521:	b0 00                	mov    al,0x0
c001c523:	89 d1                	mov    ecx,edx
c001c525:	29 c1                	sub    ecx,eax
c001c527:	89 c8                	mov    eax,ecx
c001c529:	83 e8 40             	sub    eax,0x40
c001c52c:	0f b6 c0             	movzx  eax,al
c001c52f:	83 ec 0c             	sub    esp,0xc
c001c532:	50                   	push   eax
c001c533:	e8 60 fa ff ff       	call   c001bf98 <sendKeyToTerminal(unsigned char)>
c001c538:	83 c4 10             	add    esp,0x10
c001c53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c53e:	0f b7 c0             	movzx  eax,ax
c001c541:	3d 00 03 00 00       	cmp    eax,0x300
c001c546:	75 12                	jne    c001c55a <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c548:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c54b:	83 f0 01             	xor    eax,0x1
c001c54e:	0f b6 c0             	movzx  eax,al
c001c551:	85 c0                	test   eax,eax
c001c553:	74 05                	je     c001c55a <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c555:	e8 87 ab ff ff       	call   c00170e1 <doTerminalCycle()>
c001c55a:	90                   	nop
c001c55b:	c9                   	leave  
c001c55c:	c3                   	ret    

c001c55d <clearInternalKeybuffer(VgaText*)>:
c001c55d:	55                   	push   ebp
c001c55e:	89 e5                	mov    ebp,esp
c001c560:	83 ec 08             	sub    esp,0x8
c001c563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c566:	05 02 01 00 00       	add    eax,0x102
c001c56b:	83 ec 0c             	sub    esp,0xc
c001c56e:	50                   	push   eax
c001c56f:	e8 0c 40 fe ff       	call   c0000580 <strlen>
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c57a:	81 c2 02 01 00 00    	add    edx,0x102
c001c580:	83 ec 04             	sub    esp,0x4
c001c583:	50                   	push   eax
c001c584:	6a 00                	push   0x0
c001c586:	52                   	push   edx
c001c587:	e8 64 3f fe ff       	call   c00004f0 <memset>
c001c58c:	83 c4 10             	add    esp,0x10
c001c58f:	90                   	nop
c001c590:	c9                   	leave  
c001c591:	c3                   	ret    

c001c592 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c592:	55                   	push   ebp
c001c593:	89 e5                	mov    ebp,esp
c001c595:	83 ec 18             	sub    esp,0x18
c001c598:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c59d:	85 c0                	test   eax,eax
c001c59f:	74 2a                	je     c001c5cb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c5a1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c5a7:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001c5ad:	83 ec 04             	sub    esp,0x4
c001c5b0:	68 40 ef 03 c0       	push   0xc003ef40
c001c5b5:	83 ec 08             	sub    esp,0x8
c001c5b8:	89 e0                	mov    eax,esp
c001c5ba:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c001c5bd:	89 08                	mov    DWORD PTR [eax],ecx
c001c5bf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001c5c2:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c5c6:	ff d2                	call   edx
c001c5c8:	83 c4 10             	add    esp,0x10
c001c5cb:	fb                   	sti    
c001c5cc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c5d3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c5d7:	0f 84 0d 01 00 00    	je     c001c6ea <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c5e0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c5e6:	0f be c0             	movsx  eax,al
c001c5e9:	85 c0                	test   eax,eax
c001c5eb:	75 2c                	jne    c001c619 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c5ed:	fa                   	cli    
c001c5ee:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c5f3:	83 c0 01             	add    eax,0x1
c001c5f6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c5fb:	e8 ec 8f 00 00       	call   c00255ec <schedule()>
c001c600:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c605:	83 e8 01             	sub    eax,0x1
c001c608:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c60d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c612:	85 c0                	test   eax,eax
c001c614:	75 c7                	jne    c001c5dd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c616:	fb                   	sti    
c001c617:	eb c4                	jmp    c001c5dd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c619:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c61c:	8d 50 01             	lea    edx,[eax+0x1]
c001c61f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c622:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c625:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c62b:	88 10                	mov    BYTE PTR [eax],dl
c001c62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c630:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c636:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c639:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c63d:	83 f8 03             	cmp    eax,0x3
c001c640:	75 1e                	jne    c001c660 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c642:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c647:	8b 00                	mov    eax,DWORD PTR [eax]
c001c649:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c64c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c652:	83 ec 08             	sub    esp,0x8
c001c655:	6a 02                	push   0x2
c001c657:	50                   	push   eax
c001c658:	e8 eb 47 00 00       	call   c0020e48 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c65d:	83 c4 10             	add    esp,0x10
c001c660:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c664:	83 f8 1c             	cmp    eax,0x1c
c001c667:	75 1e                	jne    c001c687 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c669:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c66e:	8b 00                	mov    eax,DWORD PTR [eax]
c001c670:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c673:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c679:	83 ec 08             	sub    esp,0x8
c001c67c:	6a 09                	push   0x9
c001c67e:	50                   	push   eax
c001c67f:	e8 c4 47 00 00       	call   c0020e48 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c684:	83 c4 10             	add    esp,0x10
c001c687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c68a:	05 02 01 00 00       	add    eax,0x102
c001c68f:	83 ec 0c             	sub    esp,0xc
c001c692:	50                   	push   eax
c001c693:	e8 e8 3e fe ff       	call   c0000580 <strlen>
c001c698:	83 c4 10             	add    esp,0x10
c001c69b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c69e:	81 c2 02 01 00 00    	add    edx,0x102
c001c6a4:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c6a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c6aa:	81 c2 02 01 00 00    	add    edx,0x102
c001c6b0:	83 ec 04             	sub    esp,0x4
c001c6b3:	50                   	push   eax
c001c6b4:	51                   	push   ecx
c001c6b5:	52                   	push   edx
c001c6b6:	e8 15 3d fe ff       	call   c00003d0 <memmove>
c001c6bb:	83 c4 10             	add    esp,0x10
c001c6be:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c6c2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c6c6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c6ca:	83 f8 0a             	cmp    eax,0xa
c001c6cd:	74 16                	je     c001c6e5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c6cf:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c6d3:	83 f8 03             	cmp    eax,0x3
c001c6d6:	74 0d                	je     c001c6e5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c6d8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c6dc:	83 f8 1c             	cmp    eax,0x1c
c001c6df:	0f 85 ee fe ff ff    	jne    c001c5d3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c6e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c6e8:	eb 03                	jmp    c001c6ed <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c6ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c6ed:	c9                   	leave  
c001c6ee:	c3                   	ret    
c001c6ef:	90                   	nop

c001c6f0 <Keyboard::Keyboard(char const*)>:
c001c6f0:	83 ec 0c             	sub    esp,0xc
c001c6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f7:	83 ec 08             	sub    esp,0x8
c001c6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6fe:	50                   	push   eax
c001c6ff:	e8 02 f1 ff ff       	call   c001b806 <Device::Device(char const*)>
c001c704:	83 c4 10             	add    esp,0x10
c001c707:	ba 88 27 03 c0       	mov    edx,0xc0032788
c001c70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c710:	89 10                	mov    DWORD PTR [eax],edx
c001c712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c716:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c720:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c727:	90                   	nop
c001c728:	83 c4 0c             	add    esp,0xc
c001c72b:	c3                   	ret    

c001c72c <Keyboard::~Keyboard()>:
c001c72c:	83 ec 0c             	sub    esp,0xc
c001c72f:	ba 88 27 03 c0       	mov    edx,0xc0032788
c001c734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c738:	89 10                	mov    DWORD PTR [eax],edx
c001c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73e:	83 ec 0c             	sub    esp,0xc
c001c741:	50                   	push   eax
c001c742:	e8 5f ee ff ff       	call   c001b5a6 <Device::~Device()>
c001c747:	83 c4 10             	add    esp,0x10
c001c74a:	90                   	nop
c001c74b:	83 c4 0c             	add    esp,0xc
c001c74e:	c3                   	ret    
c001c74f:	90                   	nop

c001c750 <Keyboard::~Keyboard()>:
c001c750:	83 ec 0c             	sub    esp,0xc
c001c753:	83 ec 0c             	sub    esp,0xc
c001c756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c75a:	e8 cd ff ff ff       	call   c001c72c <Keyboard::~Keyboard()>
c001c75f:	83 c4 10             	add    esp,0x10
c001c762:	83 ec 08             	sub    esp,0x8
c001c765:	68 5c 01 00 00       	push   0x15c
c001c76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c76e:	e8 61 cc ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001c773:	83 c4 10             	add    esp,0x10
c001c776:	83 c4 0c             	add    esp,0xc
c001c779:	c3                   	ret    

c001c77a <LogicalDisk::close(int, int, void*)>:
c001c77a:	83 c8 ff             	or     eax,0xffffffff
c001c77d:	c3                   	ret    

c001c77e <LogicalDisk::~LogicalDisk()>:
c001c77e:	83 ec 0c             	sub    esp,0xc
c001c781:	ba 00 28 03 c0       	mov    edx,0xc0032800
c001c786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78a:	89 10                	mov    DWORD PTR [eax],edx
c001c78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c790:	83 ec 0c             	sub    esp,0xc
c001c793:	50                   	push   eax
c001c794:	e8 0d ee ff ff       	call   c001b5a6 <Device::~Device()>
c001c799:	83 c4 10             	add    esp,0x10
c001c79c:	90                   	nop
c001c79d:	83 c4 0c             	add    esp,0xc
c001c7a0:	c3                   	ret    
c001c7a1:	90                   	nop

c001c7a2 <LogicalDisk::~LogicalDisk()>:
c001c7a2:	83 ec 0c             	sub    esp,0xc
c001c7a5:	83 ec 0c             	sub    esp,0xc
c001c7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ac:	e8 cd ff ff ff       	call   c001c77e <LogicalDisk::~LogicalDisk()>
c001c7b1:	83 c4 10             	add    esp,0x10
c001c7b4:	83 ec 08             	sub    esp,0x8
c001c7b7:	68 78 01 00 00       	push   0x178
c001c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7c0:	e8 0f cc ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001c7c5:	83 c4 10             	add    esp,0x10
c001c7c8:	83 c4 0c             	add    esp,0xc
c001c7cb:	c3                   	ret    

c001c7cc <LogicalDisk::open(int, int, void*)>:
c001c7cc:	83 ec 18             	sub    esp,0x18
c001c7cf:	68 b4 27 03 c0       	push   0xc00327b4
c001c7d4:	e8 bd 3d 00 00       	call   c0020596 <KePanic(char const*)>
c001c7d9:	83 c8 ff             	or     eax,0xffffffff
c001c7dc:	83 c4 1c             	add    esp,0x1c
c001c7df:	c3                   	ret    

c001c7e0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c7e0:	53                   	push   ebx
c001c7e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c7ed:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c7f3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c7f9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c7ff:	77 10                	ja     c001c811 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c801:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c807:	89 d3                	mov    ebx,edx
c001c809:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c80f:	72 05                	jb     c001c816 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c811:	83 c8 ff             	or     eax,0xffffffff
c001c814:	89 c2                	mov    edx,eax
c001c816:	5b                   	pop    ebx
c001c817:	c3                   	ret    

c001c818 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c818:	56                   	push   esi
c001c819:	83 c8 ff             	or     eax,0xffffffff
c001c81c:	53                   	push   ebx
c001c81d:	89 c2                	mov    edx,eax
c001c81f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c823:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c827:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c82b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c831:	77 27                	ja     c001c85a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c833:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c839:	89 d8                	mov    eax,ebx
c001c83b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c841:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c846:	89 c2                	mov    edx,eax
c001c848:	73 10                	jae    c001c85a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c84a:	89 c8                	mov    eax,ecx
c001c84c:	89 da                	mov    edx,ebx
c001c84e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c854:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c85a:	5b                   	pop    ebx
c001c85b:	5e                   	pop    esi
c001c85c:	c3                   	ret    
c001c85d:	90                   	nop

c001c85e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c85e:	83 ec 1c             	sub    esp,0x1c
c001c861:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c869:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c86d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c871:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c875:	89 04 24             	mov    DWORD PTR [esp],eax
c001c878:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c87c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c884:	83 ec 08             	sub    esp,0x8
c001c887:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c88b:	50                   	push   eax
c001c88c:	e8 75 ef ff ff       	call   c001b806 <Device::Device(char const*)>
c001c891:	83 c4 10             	add    esp,0x10
c001c894:	ba 00 28 03 c0       	mov    edx,0xc0032800
c001c899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c89d:	89 10                	mov    DWORD PTR [eax],edx
c001c89f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8a3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c8aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8ae:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c8b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8b9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c8c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8c4:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c8ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c8d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c8da:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c8e0:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c8e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c8ea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c8ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8f1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c8f7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c8fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c901:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c905:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c90f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c919:	90                   	nop
c001c91a:	83 c4 1c             	add    esp,0x1c
c001c91d:	c3                   	ret    

c001c91e <LogicalDisk::assignDriveLetter()>:
c001c91e:	55                   	push   ebp
c001c91f:	57                   	push   edi
c001c920:	56                   	push   esi
c001c921:	53                   	push   ebx
c001c922:	83 ec 14             	sub    esp,0x14
c001c925:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c929:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c92f:	b0 41                	mov    al,0x41
c001c931:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c937:	84 d2                	test   dl,dl
c001c939:	75 02                	jne    c001c93d <LogicalDisk::assignDriveLetter()+0x1f>
c001c93b:	b0 43                	mov    al,0x43
c001c93d:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c943:	0f b6 ca             	movzx  ecx,dl
c001c946:	0f be e8             	movsx  ebp,al
c001c949:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c94d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c951:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c957:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c95b:	3c 43                	cmp    al,0x43
c001c95d:	75 10                	jne    c001c96f <LogicalDisk::assignDriveLetter()+0x51>
c001c95f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c966:	75 5a                	jne    c001c9c2 <LogicalDisk::assignDriveLetter()+0xa4>
c001c968:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c96d:	75 53                	jne    c001c9c2 <LogicalDisk::assignDriveLetter()+0xa4>
c001c96f:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c972:	ba 01 00 00 00       	mov    edx,0x1
c001c977:	89 34 24             	mov    DWORD PTR [esp],esi
c001c97a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c97d:	d3 e2                	shl    edx,cl
c001c97f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c983:	89 d7                	mov    edi,edx
c001c985:	89 d6                	mov    esi,edx
c001c987:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c98b:	c1 ff 1f             	sar    edi,0x1f
c001c98e:	21 f9                	and    ecx,edi
c001c990:	09 d1                	or     ecx,edx
c001c992:	75 2e                	jne    c001c9c2 <LogicalDisk::assignDriveLetter()+0xa4>
c001c994:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c998:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c99c:	09 f2                	or     edx,esi
c001c99e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c9a1:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c9a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9ab:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c9b1:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c9b8:	09 fa                	or     edx,edi
c001c9ba:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c9c0:	eb 0d                	jmp    c001c9cf <LogicalDisk::assignDriveLetter()+0xb1>
c001c9c2:	8d 50 01             	lea    edx,[eax+0x1]
c001c9c5:	45                   	inc    ebp
c001c9c6:	80 fa 5b             	cmp    dl,0x5b
c001c9c9:	88 d0                	mov    al,dl
c001c9cb:	75 8e                	jne    c001c95b <LogicalDisk::assignDriveLetter()+0x3d>
c001c9cd:	31 c0                	xor    eax,eax
c001c9cf:	83 c4 14             	add    esp,0x14
c001c9d2:	5b                   	pop    ebx
c001c9d3:	5e                   	pop    esi
c001c9d4:	5f                   	pop    edi
c001c9d5:	5d                   	pop    ebp
c001c9d6:	c3                   	ret    
c001c9d7:	90                   	nop

c001c9d8 <LogicalDisk::mount()>:
c001c9d8:	56                   	push   esi
c001c9d9:	53                   	push   ebx
c001c9da:	53                   	push   ebx
c001c9db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9df:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c9e5:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c9ef:	85 db                	test   ebx,ebx
c001c9f1:	74 27                	je     c001ca1a <LogicalDisk::mount()+0x42>
c001c9f3:	51                   	push   ecx
c001c9f4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c9fb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c9fd:	83 e8 41             	sub    eax,0x41
c001ca00:	50                   	push   eax
c001ca01:	56                   	push   esi
c001ca02:	53                   	push   ebx
c001ca03:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ca06:	83 c4 10             	add    esp,0x10
c001ca09:	84 c0                	test   al,al
c001ca0b:	74 08                	je     c001ca15 <LogicalDisk::mount()+0x3d>
c001ca0d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001ca13:	eb 07                	jmp    c001ca1c <LogicalDisk::mount()+0x44>
c001ca15:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001ca18:	eb d5                	jmp    c001c9ef <LogicalDisk::mount()+0x17>
c001ca1a:	31 c0                	xor    eax,eax
c001ca1c:	5a                   	pop    edx
c001ca1d:	5b                   	pop    ebx
c001ca1e:	5e                   	pop    esi
c001ca1f:	c3                   	ret    

c001ca20 <LogicalDisk::unmount()>:
c001ca20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca24:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001ca2e:	c3                   	ret    
c001ca2f:	90                   	nop

c001ca30 <LogicalDisk::eject()>:
c001ca30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca34:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ca3a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca40:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001ca43:	90                   	nop

c001ca44 <LogicalDisk::unassignDriveLetter()>:
c001ca44:	57                   	push   edi
c001ca45:	56                   	push   esi
c001ca46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca4a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001ca51:	85 c9                	test   ecx,ecx
c001ca53:	75 0f                	jne    c001ca64 <LogicalDisk::unassignDriveLetter()+0x20>
c001ca55:	c7 44 24 0c d8 27 03 c0 	mov    DWORD PTR [esp+0xc],0xc00327d8
c001ca5d:	5e                   	pop    esi
c001ca5e:	5f                   	pop    edi
c001ca5f:	e9 32 3b 00 00       	jmp    c0020596 <KePanic(char const*)>
c001ca64:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001ca6b:	83 e9 41             	sub    ecx,0x41
c001ca6e:	b8 01 00 00 00       	mov    eax,0x1
c001ca73:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001ca7e:	d3 e0                	shl    eax,cl
c001ca80:	89 c7                	mov    edi,eax
c001ca82:	f7 d0                	not    eax
c001ca84:	c1 ff 1f             	sar    edi,0x1f
c001ca87:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001ca8d:	89 fe                	mov    esi,edi
c001ca8f:	f7 d6                	not    esi
c001ca91:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001ca97:	5e                   	pop    esi
c001ca98:	5f                   	pop    edi
c001ca99:	c3                   	ret    

c001ca9a <LogicalDisk::read(unsigned long long, int, void*)>:
c001ca9a:	57                   	push   edi
c001ca9b:	56                   	push   esi
c001ca9c:	53                   	push   ebx
c001ca9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001caa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001caa5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001caa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001caad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001cab3:	77 41                	ja     c001caf6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001cab5:	99                   	cdq    
c001cab6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001cabc:	01 c8                	add    eax,ecx
c001cabe:	11 da                	adc    edx,ebx
c001cac0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001cac6:	19 d7                	sbb    edi,edx
c001cac8:	72 33                	jb     c001cafd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001caca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001cad0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001cad6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001cada:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cade:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001cae4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001caea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001caee:	5b                   	pop    ebx
c001caef:	5e                   	pop    esi
c001caf0:	5f                   	pop    edi
c001caf1:	e9 c6 0a 00 00       	jmp    c001d5bc <VCache::read(unsigned long long, int, void*)>
c001caf6:	b8 05 00 00 00       	mov    eax,0x5
c001cafb:	eb 05                	jmp    c001cb02 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001cafd:	b8 07 00 00 00       	mov    eax,0x7
c001cb02:	5b                   	pop    ebx
c001cb03:	5e                   	pop    esi
c001cb04:	5f                   	pop    edi
c001cb05:	c3                   	ret    

c001cb06 <LogicalDisk::write(unsigned long long, int, void*)>:
c001cb06:	57                   	push   edi
c001cb07:	56                   	push   esi
c001cb08:	53                   	push   ebx
c001cb09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cb0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cb15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb19:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001cb1f:	77 41                	ja     c001cb62 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001cb21:	99                   	cdq    
c001cb22:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001cb28:	01 c8                	add    eax,ecx
c001cb2a:	11 da                	adc    edx,ebx
c001cb2c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001cb32:	19 d7                	sbb    edi,edx
c001cb34:	72 33                	jb     c001cb69 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001cb36:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001cb3c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001cb42:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001cb46:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cb4a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001cb50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cb56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb5a:	5b                   	pop    ebx
c001cb5b:	5e                   	pop    esi
c001cb5c:	5f                   	pop    edi
c001cb5d:	e9 6a 09 00 00       	jmp    c001d4cc <VCache::write(unsigned long long, int, void*)>
c001cb62:	b8 05 00 00 00       	mov    eax,0x5
c001cb67:	eb 05                	jmp    c001cb6e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001cb69:	b8 07 00 00 00       	mov    eax,0x7
c001cb6e:	5b                   	pop    ebx
c001cb6f:	5e                   	pop    esi
c001cb70:	5f                   	pop    edi
c001cb71:	c3                   	ret    
c001cb72:	66 90                	xchg   ax,ax

c001cb74 <Mouse::Mouse(char const*)>:
c001cb74:	83 ec 0c             	sub    esp,0xc
c001cb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7b:	83 ec 08             	sub    esp,0x8
c001cb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb82:	50                   	push   eax
c001cb83:	e8 7e ec ff ff       	call   c001b806 <Device::Device(char const*)>
c001cb88:	83 c4 10             	add    esp,0x10
c001cb8b:	ba 2c 28 03 c0       	mov    edx,0xc003282c
c001cb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb94:	89 10                	mov    DWORD PTR [eax],edx
c001cb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001cba4:	90                   	nop
c001cba5:	83 c4 0c             	add    esp,0xc
c001cba8:	c3                   	ret    
c001cba9:	90                   	nop
c001cbaa:	66 90                	xchg   ax,ax

c001cbac <Mouse::~Mouse()>:
c001cbac:	83 ec 0c             	sub    esp,0xc
c001cbaf:	ba 2c 28 03 c0       	mov    edx,0xc003282c
c001cbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb8:	89 10                	mov    DWORD PTR [eax],edx
c001cbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbbe:	83 ec 0c             	sub    esp,0xc
c001cbc1:	50                   	push   eax
c001cbc2:	e8 df e9 ff ff       	call   c001b5a6 <Device::~Device()>
c001cbc7:	83 c4 10             	add    esp,0x10
c001cbca:	90                   	nop
c001cbcb:	83 c4 0c             	add    esp,0xc
c001cbce:	c3                   	ret    
c001cbcf:	90                   	nop

c001cbd0 <Mouse::~Mouse()>:
c001cbd0:	83 ec 0c             	sub    esp,0xc
c001cbd3:	83 ec 0c             	sub    esp,0xc
c001cbd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbda:	e8 cd ff ff ff       	call   c001cbac <Mouse::~Mouse()>
c001cbdf:	83 c4 10             	add    esp,0x10
c001cbe2:	83 ec 08             	sub    esp,0x8
c001cbe5:	68 58 01 00 00       	push   0x158
c001cbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbee:	e8 e1 c7 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001cbf3:	83 c4 10             	add    esp,0x10
c001cbf6:	83 c4 0c             	add    esp,0xc
c001cbf9:	c3                   	ret    

c001cbfa <NIC::getMAC()>:
c001cbfa:	31 c0                	xor    eax,eax
c001cbfc:	31 d2                	xor    edx,edx
c001cbfe:	c3                   	ret    
c001cbff:	90                   	nop

c001cc00 <NIC::write(int, unsigned char*, int*)>:
c001cc00:	b8 01 00 00 00       	mov    eax,0x1
c001cc05:	c3                   	ret    

c001cc06 <NIC::NIC(char const*)>:
c001cc06:	83 ec 0c             	sub    esp,0xc
c001cc09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0d:	83 ec 08             	sub    esp,0x8
c001cc10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc14:	50                   	push   eax
c001cc15:	e8 ec eb ff ff       	call   c001b806 <Device::Device(char const*)>
c001cc1a:	83 c4 10             	add    esp,0x10
c001cc1d:	ba 58 28 03 c0       	mov    edx,0xc0032858
c001cc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc26:	89 10                	mov    DWORD PTR [eax],edx
c001cc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001cc36:	90                   	nop
c001cc37:	83 c4 0c             	add    esp,0xc
c001cc3a:	c3                   	ret    
c001cc3b:	90                   	nop

c001cc3c <NIC::~NIC()>:
c001cc3c:	83 ec 0c             	sub    esp,0xc
c001cc3f:	ba 58 28 03 c0       	mov    edx,0xc0032858
c001cc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc48:	89 10                	mov    DWORD PTR [eax],edx
c001cc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4e:	83 ec 0c             	sub    esp,0xc
c001cc51:	50                   	push   eax
c001cc52:	e8 4f e9 ff ff       	call   c001b5a6 <Device::~Device()>
c001cc57:	83 c4 10             	add    esp,0x10
c001cc5a:	90                   	nop
c001cc5b:	83 c4 0c             	add    esp,0xc
c001cc5e:	c3                   	ret    
c001cc5f:	90                   	nop

c001cc60 <NIC::~NIC()>:
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	83 ec 0c             	sub    esp,0xc
c001cc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6a:	e8 cd ff ff ff       	call   c001cc3c <NIC::~NIC()>
c001cc6f:	83 c4 10             	add    esp,0x10
c001cc72:	83 ec 08             	sub    esp,0x8
c001cc75:	68 58 01 00 00       	push   0x158
c001cc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc7e:	e8 51 c7 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001cc83:	83 c4 10             	add    esp,0x10
c001cc86:	83 c4 0c             	add    esp,0xc
c001cc89:	c3                   	ret    

c001cc8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001cc8a:	55                   	push   ebp
c001cc8b:	57                   	push   edi
c001cc8c:	56                   	push   esi
c001cc8d:	53                   	push   ebx
c001cc8e:	81 ec 28 01 00 00    	sub    esp,0x128
c001cc94:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cc9b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c001cca2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c001cca9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c001ccb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ccb4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ccb8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ccbf:	e8 3e ec ff ff       	call   c001b902 <Device::getName()>
c001ccc4:	5a                   	pop    edx
c001ccc5:	59                   	pop    ecx
c001ccc6:	50                   	push   eax
c001ccc7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001cccb:	55                   	push   ebp
c001cccc:	e8 7f 39 fe ff       	call   c0000650 <strcpy>
c001ccd1:	5b                   	pop    ebx
c001ccd2:	58                   	pop    eax
c001ccd3:	68 84 28 03 c0       	push   0xc0032884
c001ccd8:	55                   	push   ebp
c001ccd9:	e8 92 3b fe ff       	call   c0000870 <strcat>
c001ccde:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001cce5:	e8 b2 99 ff ff       	call   c001669c <malloc>
c001ccea:	83 c4 0c             	add    esp,0xc
c001cced:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ccf1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ccf5:	89 c3                	mov    ebx,eax
c001ccf7:	57                   	push   edi
c001ccf8:	56                   	push   esi
c001ccf9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cd00:	55                   	push   ebp
c001cd01:	50                   	push   eax
c001cd02:	e8 57 fb ff ff       	call   c001c85e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cd07:	83 c4 14             	add    esp,0x14
c001cd0a:	53                   	push   ebx
c001cd0b:	e8 0e fc ff ff       	call   c001c91e <LogicalDisk::assignDriveLetter()>
c001cd10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd13:	e8 c0 fc ff ff       	call   c001c9d8 <LogicalDisk::mount()>
c001cd18:	58                   	pop    eax
c001cd19:	5a                   	pop    edx
c001cd1a:	53                   	push   ebx
c001cd1b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cd22:	e8 7d e9 ff ff       	call   c001b6a4 <Device::addChild(Device*)>
c001cd27:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cd2d:	5b                   	pop    ebx
c001cd2e:	5e                   	pop    esi
c001cd2f:	5f                   	pop    edi
c001cd30:	5d                   	pop    ebp
c001cd31:	c3                   	ret    

c001cd32 <createPartitionsForDisk(PhysicalDisk*)>:
c001cd32:	55                   	push   ebp
c001cd33:	57                   	push   edi
c001cd34:	56                   	push   esi
c001cd35:	53                   	push   ebx
c001cd36:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001cd3c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001cd43:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd49:	3d 00 02 00 00       	cmp    eax,0x200
c001cd4e:	74 27                	je     c001cd77 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001cd50:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001cd56:	83 ec 10             	sub    esp,0x10
c001cd59:	99                   	cdq    
c001cd5a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001cd60:	52                   	push   edx
c001cd61:	50                   	push   eax
c001cd62:	0f a4 f7 0a          	shld   edi,esi,0xa
c001cd66:	c1 e6 0a             	shl    esi,0xa
c001cd69:	89 fd                	mov    ebp,edi
c001cd6b:	55                   	push   ebp
c001cd6c:	56                   	push   esi
c001cd6d:	e8 0e 1e 01 00       	call   c002eb80 <__udivdi3>
c001cd72:	e9 b9 00 00 00       	jmp    c001ce30 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cd77:	83 ec 0c             	sub    esp,0xc
c001cd7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd7c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001cd80:	56                   	push   esi
c001cd81:	6a 01                	push   0x1
c001cd83:	6a 00                	push   0x0
c001cd85:	6a 00                	push   0x0
c001cd87:	53                   	push   ebx
c001cd88:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cd8b:	83 c4 20             	add    esp,0x20
c001cd8e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001cd96:	75 0a                	jne    c001cda2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001cd98:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001cda0:	74 2c                	je     c001cdce <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001cda2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cda8:	83 ec 10             	sub    esp,0x10
c001cdab:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cdb1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cdb7:	89 f7                	mov    edi,esi
c001cdb9:	c1 ff 1f             	sar    edi,0x1f
c001cdbc:	57                   	push   edi
c001cdbd:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cdc1:	56                   	push   esi
c001cdc2:	c1 e0 0a             	shl    eax,0xa
c001cdc5:	52                   	push   edx
c001cdc6:	50                   	push   eax
c001cdc7:	e8 b4 1d 01 00       	call   c002eb80 <__udivdi3>
c001cdcc:	eb 62                	jmp    c001ce30 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cdce:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001cdd5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001cddc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001cde3:	89 cf                	mov    edi,ecx
c001cde5:	83 e2 7f             	and    edx,0x7f
c001cde8:	83 e7 7f             	and    edi,0x7f
c001cdeb:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001cdee:	83 e0 7f             	and    eax,0x7f
c001cdf1:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cdf4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cdfb:	83 e0 7f             	and    eax,0x7f
c001cdfe:	01 d0                	add    eax,edx
c001ce00:	84 c0                	test   al,al
c001ce02:	89 c5                	mov    ebp,eax
c001ce04:	74 41                	je     c001ce47 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001ce06:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ce0c:	83 ec 10             	sub    esp,0x10
c001ce0f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ce15:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ce1b:	89 f7                	mov    edi,esi
c001ce1d:	c1 ff 1f             	sar    edi,0x1f
c001ce20:	57                   	push   edi
c001ce21:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ce25:	56                   	push   esi
c001ce26:	c1 e0 0a             	shl    eax,0xa
c001ce29:	52                   	push   edx
c001ce2a:	50                   	push   eax
c001ce2b:	e8 50 1d 01 00       	call   c002eb80 <__udivdi3>
c001ce30:	83 c4 14             	add    esp,0x14
c001ce33:	52                   	push   edx
c001ce34:	50                   	push   eax
c001ce35:	6a 00                	push   0x0
c001ce37:	6a 00                	push   0x0
c001ce39:	53                   	push   ebx
c001ce3a:	e8 4b fe ff ff       	call   c001cc8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001ce3f:	83 c4 20             	add    esp,0x20
c001ce42:	e9 73 01 00 00       	jmp    c001cfba <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001ce47:	89 f0                	mov    eax,esi
c001ce49:	31 c9                	xor    ecx,ecx
c001ce4b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001ce52:	75 02                	jne    c001ce56 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001ce54:	89 cd                	mov    ebp,ecx
c001ce56:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001ce5e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001ce65:	83 c0 10             	add    eax,0x10
c001ce68:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001ce70:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c001ce77:	c1 e2 08             	shl    edx,0x8
c001ce7a:	c1 e6 10             	shl    esi,0x10
c001ce7d:	09 f2                	or     edx,esi
c001ce7f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c001ce86:	09 f2                	or     edx,esi
c001ce88:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001ce8f:	c1 e6 18             	shl    esi,0x18
c001ce92:	09 f2                	or     edx,esi
c001ce94:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001ce9b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001ce9f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cea6:	c1 e6 10             	shl    esi,0x10
c001cea9:	c1 e2 08             	shl    edx,0x8
c001ceac:	09 f2                	or     edx,esi
c001ceae:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001ceb5:	09 f2                	or     edx,esi
c001ceb7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001cebe:	c1 e6 18             	shl    esi,0x18
c001cec1:	09 f2                	or     edx,esi
c001cec3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001cec7:	41                   	inc    ecx
c001cec8:	83 f9 04             	cmp    ecx,0x4
c001cecb:	0f 85 7a ff ff ff    	jne    c001ce4b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001ced1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ced5:	83 f0 01             	xor    eax,0x1
c001ced8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cedc:	75 4f                	jne    c001cf2d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cede:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cee2:	83 f0 01             	xor    eax,0x1
c001cee5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001cee9:	75 42                	jne    c001cf2d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ceeb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cef1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cef9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ceff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cf07:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cf0d:	89 f7                	mov    edi,esi
c001cf0f:	c1 ff 1f             	sar    edi,0x1f
c001cf12:	57                   	push   edi
c001cf13:	56                   	push   esi
c001cf14:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cf18:	52                   	push   edx
c001cf19:	c1 e0 0a             	shl    eax,0xa
c001cf1c:	50                   	push   eax
c001cf1d:	e8 5e 1c 01 00       	call   c002eb80 <__udivdi3>
c001cf22:	83 c4 10             	add    esp,0x10
c001cf25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cf29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf2d:	89 e8                	mov    eax,ebp
c001cf2f:	0f b6 e8             	movzx  ebp,al
c001cf32:	85 ed                	test   ebp,ebp
c001cf34:	74 50                	je     c001cf86 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cf36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf3a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cf3e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cf46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cf4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cf52:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cf56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cf62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf66:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cf6a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cf6e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cf72:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cf76:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cf7a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cf7e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cf82:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cf86:	31 ed                	xor    ebp,ebp
c001cf88:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cf8c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cf90:	89 f8                	mov    eax,edi
c001cf92:	09 f0                	or     eax,esi
c001cf94:	74 1e                	je     c001cfb4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cf96:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cf9a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cf9e:	89 d1                	mov    ecx,edx
c001cfa0:	09 c1                	or     ecx,eax
c001cfa2:	74 10                	je     c001cfb4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cfa4:	83 ec 0c             	sub    esp,0xc
c001cfa7:	57                   	push   edi
c001cfa8:	56                   	push   esi
c001cfa9:	52                   	push   edx
c001cfaa:	50                   	push   eax
c001cfab:	53                   	push   ebx
c001cfac:	e8 d9 fc ff ff       	call   c001cc8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cfb1:	83 c4 20             	add    esp,0x20
c001cfb4:	45                   	inc    ebp
c001cfb5:	83 fd 04             	cmp    ebp,0x4
c001cfb8:	75 ce                	jne    c001cf88 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cfba:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cfc0:	5b                   	pop    ebx
c001cfc1:	5e                   	pop    esi
c001cfc2:	5f                   	pop    edi
c001cfc3:	5d                   	pop    ebp
c001cfc4:	c3                   	ret    
c001cfc5:	66 90                	xchg   ax,ax
c001cfc7:	90                   	nop

c001cfc8 <Serial::Serial(char const*)>:
c001cfc8:	83 ec 0c             	sub    esp,0xc
c001cfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcf:	83 ec 08             	sub    esp,0x8
c001cfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfd6:	50                   	push   eax
c001cfd7:	e8 2a e8 ff ff       	call   c001b806 <Device::Device(char const*)>
c001cfdc:	83 c4 10             	add    esp,0x10
c001cfdf:	ba 98 28 03 c0       	mov    edx,0xc0032898
c001cfe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe8:	89 10                	mov    DWORD PTR [eax],edx
c001cfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfee:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cff8:	90                   	nop
c001cff9:	83 c4 0c             	add    esp,0xc
c001cffc:	c3                   	ret    
c001cffd:	90                   	nop
c001cffe:	66 90                	xchg   ax,ax

c001d000 <Serial::~Serial()>:
c001d000:	83 ec 0c             	sub    esp,0xc
c001d003:	ba 98 28 03 c0       	mov    edx,0xc0032898
c001d008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d00c:	89 10                	mov    DWORD PTR [eax],edx
c001d00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d012:	83 ec 0c             	sub    esp,0xc
c001d015:	50                   	push   eax
c001d016:	e8 8b e5 ff ff       	call   c001b5a6 <Device::~Device()>
c001d01b:	83 c4 10             	add    esp,0x10
c001d01e:	90                   	nop
c001d01f:	83 c4 0c             	add    esp,0xc
c001d022:	c3                   	ret    
c001d023:	90                   	nop

c001d024 <Serial::~Serial()>:
c001d024:	83 ec 0c             	sub    esp,0xc
c001d027:	83 ec 0c             	sub    esp,0xc
c001d02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d02e:	e8 cd ff ff ff       	call   c001d000 <Serial::~Serial()>
c001d033:	83 c4 10             	add    esp,0x10
c001d036:	83 ec 08             	sub    esp,0x8
c001d039:	68 58 01 00 00       	push   0x158
c001d03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d042:	e8 8d c3 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001d047:	83 c4 10             	add    esp,0x10
c001d04a:	83 c4 0c             	add    esp,0xc
c001d04d:	c3                   	ret    
c001d04e:	66 90                	xchg   ax,ax

c001d050 <Timer::Timer(char const*)>:
c001d050:	83 ec 0c             	sub    esp,0xc
c001d053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d057:	83 ec 08             	sub    esp,0x8
c001d05a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d05e:	50                   	push   eax
c001d05f:	e8 a2 e7 ff ff       	call   c001b806 <Device::Device(char const*)>
c001d064:	83 c4 10             	add    esp,0x10
c001d067:	ba dc 28 03 c0       	mov    edx,0xc00328dc
c001d06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d070:	89 10                	mov    DWORD PTR [eax],edx
c001d072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d076:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001d080:	90                   	nop
c001d081:	83 c4 0c             	add    esp,0xc
c001d084:	c3                   	ret    
c001d085:	90                   	nop
c001d086:	66 90                	xchg   ax,ax

c001d088 <Timer::~Timer()>:
c001d088:	83 ec 0c             	sub    esp,0xc
c001d08b:	ba dc 28 03 c0       	mov    edx,0xc00328dc
c001d090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d094:	89 10                	mov    DWORD PTR [eax],edx
c001d096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d09a:	83 ec 0c             	sub    esp,0xc
c001d09d:	50                   	push   eax
c001d09e:	e8 03 e5 ff ff       	call   c001b5a6 <Device::~Device()>
c001d0a3:	83 c4 10             	add    esp,0x10
c001d0a6:	90                   	nop
c001d0a7:	83 c4 0c             	add    esp,0xc
c001d0aa:	c3                   	ret    
c001d0ab:	90                   	nop

c001d0ac <Timer::~Timer()>:
c001d0ac:	83 ec 0c             	sub    esp,0xc
c001d0af:	83 ec 0c             	sub    esp,0xc
c001d0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0b6:	e8 cd ff ff ff       	call   c001d088 <Timer::~Timer()>
c001d0bb:	83 c4 10             	add    esp,0x10
c001d0be:	83 ec 08             	sub    esp,0x8
c001d0c1:	68 5c 01 00 00       	push   0x15c
c001d0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ca:	e8 05 c3 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001d0cf:	83 c4 10             	add    esp,0x10
c001d0d2:	83 c4 0c             	add    esp,0xc
c001d0d5:	c3                   	ret    

c001d0d6 <Timer::read()>:
c001d0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d0e0:	c3                   	ret    

c001d0e1 <setupTimer(int)>:
c001d0e1:	53                   	push   ebx
c001d0e2:	83 ec 14             	sub    esp,0x14
c001d0e5:	68 5c 01 00 00       	push   0x15c
c001d0ea:	e8 ad 95 ff ff       	call   c001669c <malloc>
c001d0ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0f2:	89 c3                	mov    ebx,eax
c001d0f4:	e8 0f 13 01 00       	call   c002e408 <PIT::PIT()>
c001d0f9:	58                   	pop    eax
c001d0fa:	5a                   	pop    edx
c001d0fb:	53                   	push   ebx
c001d0fc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001d102:	e8 9d e5 ff ff       	call   c001b6a4 <Device::addChild(Device*)>
c001d107:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d109:	6a 00                	push   0x0
c001d10b:	6a 00                	push   0x0
c001d10d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d111:	53                   	push   ebx
c001d112:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d115:	83 c4 28             	add    esp,0x28
c001d118:	89 d8                	mov    eax,ebx
c001d11a:	5b                   	pop    ebx
c001d11b:	c3                   	ret    

c001d11c <timerHandler(unsigned int)>:
c001d11c:	57                   	push   edi
c001d11d:	56                   	push   esi
c001d11e:	53                   	push   ebx
c001d11f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d123:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001d129:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001d130:	0f 84 46 01 00 00    	je     c001d27c <timerHandler(unsigned int)+0x160>
c001d136:	fa                   	cli    
c001d137:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001d13d:	83 ec 0c             	sub    esp,0xc
c001d140:	68 e0 01 04 c0       	push   0xc00401e0
c001d145:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001d14b:	e8 00 20 01 00       	call   c002f150 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d150:	83 c4 10             	add    esp,0x10
c001d153:	84 c0                	test   al,al
c001d155:	0f 85 a1 00 00 00    	jne    c001d1fc <timerHandler(unsigned int)+0xe0>
c001d15b:	83 ec 0c             	sub    esp,0xc
c001d15e:	68 e0 01 04 c0       	push   0xc00401e0
c001d163:	e8 04 20 01 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d168:	83 c4 10             	add    esp,0x10
c001d16b:	89 c6                	mov    esi,eax
c001d16d:	8d 76 00             	lea    esi,[esi+0x0]
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	68 e0 01 04 c0       	push   0xc00401e0
c001d178:	e8 ef 1f 01 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d17d:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001d184:	89 c3                	mov    ebx,eax
c001d186:	e8 e9 1f 01 00       	call   c002f174 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d18b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d18e:	83 c4 10             	add    esp,0x10
c001d191:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001d197:	77 23                	ja     c001d1bc <timerHandler(unsigned int)+0xa0>
c001d199:	83 ec 0c             	sub    esp,0xc
c001d19c:	53                   	push   ebx
c001d19d:	e8 36 87 00 00       	call   c00258d8 <unblockTask(ThreadControlBlock*)>
c001d1a2:	83 c4 10             	add    esp,0x10
c001d1a5:	39 de                	cmp    esi,ebx
c001d1a7:	75 27                	jne    c001d1d0 <timerHandler(unsigned int)+0xb4>
c001d1a9:	83 ec 0c             	sub    esp,0xc
c001d1ac:	68 e0 01 04 c0       	push   0xc00401e0
c001d1b1:	e8 b6 1f 01 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d1b6:	89 c6                	mov    esi,eax
c001d1b8:	eb 12                	jmp    c001d1cc <timerHandler(unsigned int)+0xb0>
c001d1ba:	66 90                	xchg   ax,ax
c001d1bc:	50                   	push   eax
c001d1bd:	50                   	push   eax
c001d1be:	53                   	push   ebx
c001d1bf:	68 e0 01 04 c0       	push   0xc00401e0
c001d1c4:	e8 67 20 01 00       	call   c002f230 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d1cc:	83 c4 10             	add    esp,0x10
c001d1cf:	90                   	nop
c001d1d0:	83 ec 0c             	sub    esp,0xc
c001d1d3:	68 e0 01 04 c0       	push   0xc00401e0
c001d1d8:	e8 73 1f 01 00       	call   c002f150 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d1dd:	83 c4 10             	add    esp,0x10
c001d1e0:	84 c0                	test   al,al
c001d1e2:	75 18                	jne    c001d1fc <timerHandler(unsigned int)+0xe0>
c001d1e4:	83 ec 0c             	sub    esp,0xc
c001d1e7:	68 e0 01 04 c0       	push   0xc00401e0
c001d1ec:	e8 7b 1f 01 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d1f1:	83 c4 10             	add    esp,0x10
c001d1f4:	39 f0                	cmp    eax,esi
c001d1f6:	0f 85 74 ff ff ff    	jne    c001d170 <timerHandler(unsigned int)+0x54>
c001d1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d201:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001d205:	74 3d                	je     c001d244 <timerHandler(unsigned int)+0x128>
c001d207:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001d20e:	74 34                	je     c001d244 <timerHandler(unsigned int)+0x128>
c001d210:	fa                   	cli    
c001d211:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001d217:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001d21d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d222:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001d225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d22a:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001d22d:	77 05                	ja     c001d234 <timerHandler(unsigned int)+0x118>
c001d22f:	e8 b8 83 00 00       	call   c00255ec <schedule()>
c001d234:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d239:	48                   	dec    eax
c001d23a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d23f:	75 03                	jne    c001d244 <timerHandler(unsigned int)+0x128>
c001d241:	fb                   	sti    
c001d242:	66 90                	xchg   ax,ax
c001d244:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001d249:	48                   	dec    eax
c001d24a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001d24f:	75 1b                	jne    c001d26c <timerHandler(unsigned int)+0x150>
c001d251:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001d258:	74 12                	je     c001d26c <timerHandler(unsigned int)+0x150>
c001d25a:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001d264:	e8 83 83 00 00       	call   c00255ec <schedule()>
c001d269:	8d 76 00             	lea    esi,[esi+0x0]
c001d26c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d271:	48                   	dec    eax
c001d272:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d277:	75 03                	jne    c001d27c <timerHandler(unsigned int)+0x160>
c001d279:	fb                   	sti    
c001d27a:	66 90                	xchg   ax,ax
c001d27c:	5b                   	pop    ebx
c001d27d:	5e                   	pop    esi
c001d27e:	5f                   	pop    edi
c001d27f:	c3                   	ret    

c001d280 <VCache::VCache(PhysicalDisk*)>:
c001d280:	53                   	push   ebx
c001d281:	83 ec 18             	sub    esp,0x18
c001d284:	ba 0c 29 03 c0       	mov    edx,0xc003290c
c001d289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d28d:	89 10                	mov    DWORD PTR [eax],edx
c001d28f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d293:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001d29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d29e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001d2a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2a9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001d2b0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d2b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2bb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001d2c2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d2c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2cd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d2d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2d8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d2dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001d2e7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001d2ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2f2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d2f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2fa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001d2fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d302:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d30a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d311:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001d319:	83 ec 0c             	sub    esp,0xc
c001d31c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d320:	e8 77 93 ff ff       	call   c001669c <malloc>
c001d325:	83 c4 10             	add    esp,0x10
c001d328:	89 c3                	mov    ebx,eax
c001d32a:	83 ec 0c             	sub    esp,0xc
c001d32d:	53                   	push   ebx
c001d32e:	e8 49 32 00 00       	call   c002057c <Mutex::Mutex()>
c001d333:	83 c4 10             	add    esp,0x10
c001d336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d33a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001d33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d341:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d345:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d348:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d34c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d353:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d357:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d361:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d364:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d368:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d36e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d374:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d378:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d37b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d37e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d382:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d386:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d38a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d390:	05 00 02 00 00       	add    eax,0x200
c001d395:	c1 e0 03             	shl    eax,0x3
c001d398:	83 ec 0c             	sub    esp,0xc
c001d39b:	50                   	push   eax
c001d39c:	e8 fb 92 ff ff       	call   c001669c <malloc>
c001d3a1:	83 c4 10             	add    esp,0x10
c001d3a4:	89 c2                	mov    edx,eax
c001d3a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d3ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d3b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3bc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d3c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3c4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d3ca:	89 d0                	mov    eax,edx
c001d3cc:	c1 e0 02             	shl    eax,0x2
c001d3cf:	01 d0                	add    eax,edx
c001d3d1:	c1 e0 04             	shl    eax,0x4
c001d3d4:	83 ec 0c             	sub    esp,0xc
c001d3d7:	50                   	push   eax
c001d3d8:	e8 bf 92 ff ff       	call   c001669c <malloc>
c001d3dd:	83 c4 10             	add    esp,0x10
c001d3e0:	89 c2                	mov    edx,eax
c001d3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3e6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d3e9:	90                   	nop
c001d3ea:	83 c4 18             	add    esp,0x18
c001d3ed:	5b                   	pop    ebx
c001d3ee:	c3                   	ret    
c001d3ef:	90                   	nop

c001d3f0 <VCache::invalidateReadBuffer()>:
c001d3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3f4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d3fa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d3fe:	c3                   	ret    
c001d3ff:	90                   	nop

c001d400 <VCache::writeWriteBuffer()>:
c001d400:	53                   	push   ebx
c001d401:	83 ec 08             	sub    esp,0x8
c001d404:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d408:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d40c:	74 1e                	je     c001d42c <VCache::writeWriteBuffer()+0x2c>
c001d40e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d411:	83 ec 0c             	sub    esp,0xc
c001d414:	8b 10                	mov    edx,DWORD PTR [eax]
c001d416:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d419:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d41c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d41f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d422:	50                   	push   eax
c001d423:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d426:	83 c4 20             	add    esp,0x20
c001d429:	8d 76 00             	lea    esi,[esi+0x0]
c001d42c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d433:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d43a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d43e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d445:	83 c4 08             	add    esp,0x8
c001d448:	5b                   	pop    ebx
c001d449:	c3                   	ret    
c001d44a:	66 90                	xchg   ax,ax

c001d44c <VCache::~VCache()>:
c001d44c:	83 ec 0c             	sub    esp,0xc
c001d44f:	ba 0c 29 03 c0       	mov    edx,0xc003290c
c001d454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d458:	89 10                	mov    DWORD PTR [eax],edx
c001d45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d45e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d461:	0f b6 c0             	movzx  eax,al
c001d464:	85 c0                	test   eax,eax
c001d466:	74 10                	je     c001d478 <VCache::~VCache()+0x2c>
c001d468:	83 ec 0c             	sub    esp,0xc
c001d46b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d46f:	e8 8c ff ff ff       	call   c001d400 <VCache::writeWriteBuffer()>
c001d474:	83 c4 10             	add    esp,0x10
c001d477:	90                   	nop
c001d478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d47c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d47f:	83 ec 0c             	sub    esp,0xc
c001d482:	50                   	push   eax
c001d483:	e8 24 92 ff ff       	call   c00166ac <free>
c001d488:	83 c4 10             	add    esp,0x10
c001d48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d48f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d492:	83 ec 0c             	sub    esp,0xc
c001d495:	50                   	push   eax
c001d496:	e8 11 92 ff ff       	call   c00166ac <free>
c001d49b:	83 c4 10             	add    esp,0x10
c001d49e:	90                   	nop
c001d49f:	83 c4 0c             	add    esp,0xc
c001d4a2:	c3                   	ret    
c001d4a3:	90                   	nop

c001d4a4 <VCache::~VCache()>:
c001d4a4:	83 ec 0c             	sub    esp,0xc
c001d4a7:	83 ec 0c             	sub    esp,0xc
c001d4aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ae:	e8 99 ff ff ff       	call   c001d44c <VCache::~VCache()>
c001d4b3:	83 c4 10             	add    esp,0x10
c001d4b6:	83 ec 08             	sub    esp,0x8
c001d4b9:	6a 44                	push   0x44
c001d4bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4bf:	e8 10 bf ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001d4c4:	83 c4 10             	add    esp,0x10
c001d4c7:	83 c4 0c             	add    esp,0xc
c001d4ca:	c3                   	ret    
c001d4cb:	90                   	nop

c001d4cc <VCache::write(unsigned long long, int, void*)>:
c001d4cc:	55                   	push   ebp
c001d4cd:	57                   	push   edi
c001d4ce:	56                   	push   esi
c001d4cf:	53                   	push   ebx
c001d4d0:	83 ec 1c             	sub    esp,0x1c
c001d4d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d4db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d4df:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d4e3:	e8 70 7e 00 00       	call   c0025358 <KeDisablePreemption()>
c001d4e8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d4ec:	74 0e                	je     c001d4fc <VCache::write(unsigned long long, int, void*)+0x30>
c001d4ee:	83 ec 0c             	sub    esp,0xc
c001d4f1:	53                   	push   ebx
c001d4f2:	e8 f9 fe ff ff       	call   c001d3f0 <VCache::invalidateReadBuffer()>
c001d4f7:	83 c4 10             	add    esp,0x10
c001d4fa:	66 90                	xchg   ax,ax
c001d4fc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d500:	74 5e                	je     c001d560 <VCache::write(unsigned long long, int, void*)+0x94>
c001d502:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d505:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d509:	99                   	cdq    
c001d50a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d50d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d510:	89 c1                	mov    ecx,eax
c001d512:	31 f1                	xor    ecx,esi
c001d514:	89 d0                	mov    eax,edx
c001d516:	31 f8                	xor    eax,edi
c001d518:	09 c1                	or     ecx,eax
c001d51a:	75 38                	jne    c001d554 <VCache::write(unsigned long long, int, void*)+0x88>
c001d51c:	83 fd 01             	cmp    ebp,0x1
c001d51f:	75 33                	jne    c001d554 <VCache::write(unsigned long long, int, void*)+0x88>
c001d521:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d524:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d528:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d52c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d532:	0f af f9             	imul   edi,ecx
c001d535:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d538:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d53a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d53d:	40                   	inc    eax
c001d53e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d541:	83 f8 50             	cmp    eax,0x50
c001d544:	75 66                	jne    c001d5ac <VCache::write(unsigned long long, int, void*)+0xe0>
c001d546:	83 ec 0c             	sub    esp,0xc
c001d549:	53                   	push   ebx
c001d54a:	e8 b1 fe ff ff       	call   c001d400 <VCache::writeWriteBuffer()>
c001d54f:	83 c4 10             	add    esp,0x10
c001d552:	eb 58                	jmp    c001d5ac <VCache::write(unsigned long long, int, void*)+0xe0>
c001d554:	83 ec 0c             	sub    esp,0xc
c001d557:	53                   	push   ebx
c001d558:	e8 a3 fe ff ff       	call   c001d400 <VCache::writeWriteBuffer()>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	83 fd 4f             	cmp    ebp,0x4f
c001d563:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d566:	7f 20                	jg     c001d588 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d568:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d56b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d56f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d572:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d575:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001d578:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d57c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d582:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d584:	eb 26                	jmp    c001d5ac <VCache::write(unsigned long long, int, void*)+0xe0>
c001d586:	66 90                	xchg   ax,ax
c001d588:	83 ec 0c             	sub    esp,0xc
c001d58b:	8b 10                	mov    edx,DWORD PTR [eax]
c001d58d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d591:	55                   	push   ebp
c001d592:	57                   	push   edi
c001d593:	56                   	push   esi
c001d594:	50                   	push   eax
c001d595:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d598:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d59c:	83 c4 20             	add    esp,0x20
c001d59f:	e8 dc 7d 00 00       	call   c0025380 <KeRestorePreemption()>
c001d5a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5a8:	eb 0a                	jmp    c001d5b4 <VCache::write(unsigned long long, int, void*)+0xe8>
c001d5aa:	66 90                	xchg   ax,ax
c001d5ac:	e8 cf 7d 00 00       	call   c0025380 <KeRestorePreemption()>
c001d5b1:	31 c0                	xor    eax,eax
c001d5b3:	90                   	nop
c001d5b4:	83 c4 1c             	add    esp,0x1c
c001d5b7:	5b                   	pop    ebx
c001d5b8:	5e                   	pop    esi
c001d5b9:	5f                   	pop    edi
c001d5ba:	5d                   	pop    ebp
c001d5bb:	c3                   	ret    

c001d5bc <VCache::read(unsigned long long, int, void*)>:
c001d5bc:	55                   	push   ebp
c001d5bd:	57                   	push   edi
c001d5be:	56                   	push   esi
c001d5bf:	53                   	push   ebx
c001d5c0:	83 ec 1c             	sub    esp,0x1c
c001d5c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d5cb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d5cf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d5d3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d5d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5da:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d5de:	e8 75 7d 00 00       	call   c0025358 <KeDisablePreemption()>
c001d5e3:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d5e7:	74 0f                	je     c001d5f8 <VCache::read(unsigned long long, int, void*)+0x3c>
c001d5e9:	83 ec 0c             	sub    esp,0xc
c001d5ec:	53                   	push   ebx
c001d5ed:	e8 0e fe ff ff       	call   c001d400 <VCache::writeWriteBuffer()>
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d5f8:	83 fe 01             	cmp    esi,0x1
c001d5fb:	0f 85 8b 00 00 00    	jne    c001d68c <VCache::read(unsigned long long, int, void*)+0xd0>
c001d601:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d604:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d60b:	75 7f                	jne    c001d68c <VCache::read(unsigned long long, int, void*)+0xd0>
c001d60d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d610:	89 d1                	mov    ecx,edx
c001d612:	f7 d9                	neg    ecx
c001d614:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d618:	89 cf                	mov    edi,ecx
c001d61a:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001d61d:	c1 ff 1f             	sar    edi,0x1f
c001d620:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d624:	89 ce                	mov    esi,ecx
c001d626:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d62a:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001d62e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d632:	89 cf                	mov    edi,ecx
c001d634:	74 32                	je     c001d668 <VCache::read(unsigned long long, int, void*)+0xac>
c001d636:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d639:	75 2d                	jne    c001d668 <VCache::read(unsigned long long, int, void*)+0xac>
c001d63b:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001d63e:	75 28                	jne    c001d668 <VCache::read(unsigned long long, int, void*)+0xac>
c001d640:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d643:	89 ef                	mov    edi,ebp
c001d645:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d64b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d64e:	8d 70 ff             	lea    esi,[eax-0x1]
c001d651:	23 34 24             	and    esi,DWORD PTR [esp]
c001d654:	0f af f1             	imul   esi,ecx
c001d657:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d65a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d65c:	e8 1f 7d 00 00       	call   c0025380 <KeRestorePreemption()>
c001d661:	31 c0                	xor    eax,eax
c001d663:	eb 57                	jmp    c001d6bc <VCache::read(unsigned long long, int, void*)+0x100>
c001d665:	8d 76 00             	lea    esi,[esi+0x0]
c001d668:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d66c:	83 ec 0c             	sub    esp,0xc
c001d66f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001d672:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001d675:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d677:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d67a:	52                   	push   edx
c001d67b:	57                   	push   edi
c001d67c:	56                   	push   esi
c001d67d:	50                   	push   eax
c001d67e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d681:	83 c4 20             	add    esp,0x20
c001d684:	85 c0                	test   eax,eax
c001d686:	75 34                	jne    c001d6bc <VCache::read(unsigned long long, int, void*)+0x100>
c001d688:	eb b6                	jmp    c001d640 <VCache::read(unsigned long long, int, void*)+0x84>
c001d68a:	66 90                	xchg   ax,ax
c001d68c:	83 ec 0c             	sub    esp,0xc
c001d68f:	53                   	push   ebx
c001d690:	e8 5b fd ff ff       	call   c001d3f0 <VCache::invalidateReadBuffer()>
c001d695:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d698:	8b 10                	mov    edx,DWORD PTR [eax]
c001d69a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d69d:	56                   	push   esi
c001d69e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6a6:	50                   	push   eax
c001d6a7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d6aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6ae:	83 c4 20             	add    esp,0x20
c001d6b1:	e8 ca 7c 00 00       	call   c0025380 <KeRestorePreemption()>
c001d6b6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d6bc:	83 c4 1c             	add    esp,0x1c
c001d6bf:	5b                   	pop    ebx
c001d6c0:	5e                   	pop    esi
c001d6c1:	5f                   	pop    edi
c001d6c2:	5d                   	pop    ebp
c001d6c3:	c3                   	ret    

c001d6c4 <Video::putrect(int, int, int, int, unsigned int)>:
c001d6c4:	55                   	push   ebp
c001d6c5:	57                   	push   edi
c001d6c6:	56                   	push   esi
c001d6c7:	53                   	push   ebx
c001d6c8:	83 ec 1c             	sub    esp,0x1c
c001d6cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d6cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6d3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d6d7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d6db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d6df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6e3:	01 df                	add    edi,ebx
c001d6e5:	39 fb                	cmp    ebx,edi
c001d6e7:	7d 1f                	jge    c001d708 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d6e9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d6ed:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d6f1:	7d 12                	jge    c001d705 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d6f3:	8b 16                	mov    edx,DWORD PTR [esi]
c001d6f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d6f9:	53                   	push   ebx
c001d6fa:	55                   	push   ebp
c001d6fb:	45                   	inc    ebp
c001d6fc:	56                   	push   esi
c001d6fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d700:	83 c4 10             	add    esp,0x10
c001d703:	eb e8                	jmp    c001d6ed <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d705:	43                   	inc    ebx
c001d706:	eb dd                	jmp    c001d6e5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d708:	83 c4 1c             	add    esp,0x1c
c001d70b:	5b                   	pop    ebx
c001d70c:	5e                   	pop    esi
c001d70d:	5f                   	pop    edi
c001d70e:	5d                   	pop    ebp
c001d70f:	c3                   	ret    

c001d710 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d710:	55                   	push   ebp
c001d711:	57                   	push   edi
c001d712:	31 ff                	xor    edi,edi
c001d714:	56                   	push   esi
c001d715:	53                   	push   ebx
c001d716:	83 ec 1c             	sub    esp,0x1c
c001d719:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d71d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d721:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d728:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d72d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d731:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d735:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d739:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d73c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d740:	01 f9                	add    ecx,edi
c001d742:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d746:	7d 2f                	jge    c001d777 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d748:	31 f6                	xor    esi,esi
c001d74a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d74e:	01 f2                	add    edx,esi
c001d750:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d754:	7d 1a                	jge    c001d770 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d756:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d759:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d75c:	46                   	inc    esi
c001d75d:	51                   	push   ecx
c001d75e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d762:	52                   	push   edx
c001d763:	55                   	push   ebp
c001d764:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d767:	83 c4 10             	add    esp,0x10
c001d76a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d76e:	eb da                	jmp    c001d74a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d770:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d774:	47                   	inc    edi
c001d775:	eb c5                	jmp    c001d73c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d777:	83 c4 1c             	add    esp,0x1c
c001d77a:	5b                   	pop    ebx
c001d77b:	5e                   	pop    esi
c001d77c:	5f                   	pop    edi
c001d77d:	5d                   	pop    ebp
c001d77e:	c3                   	ret    
c001d77f:	90                   	nop

c001d780 <Video::blit(unsigned int*, int, int, int, int)>:
c001d780:	55                   	push   ebp
c001d781:	ba 00 00 00 00       	mov    edx,0x0
c001d786:	57                   	push   edi
c001d787:	56                   	push   esi
c001d788:	53                   	push   ebx
c001d789:	83 ec 1c             	sub    esp,0x1c
c001d78c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d790:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d794:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d798:	85 c0                	test   eax,eax
c001d79a:	0f 49 d0             	cmovns edx,eax
c001d79d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c001d7a4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d7a8:	89 eb                	mov    ebx,ebp
c001d7aa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d7ae:	01 ea                	add    edx,ebp
c001d7b0:	39 da                	cmp    edx,ebx
c001d7b2:	7e 54                	jle    c001d808 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d7b4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d7ba:	7c 4c                	jl     c001d808 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d7bc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d7c0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d7c4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d7c8:	01 c1                	add    ecx,eax
c001d7ca:	39 f9                	cmp    ecx,edi
c001d7cc:	7e 2f                	jle    c001d7fd <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c001d7ce:	83 c2 04             	add    edx,0x4
c001d7d1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d7d7:	7c 21                	jl     c001d7fa <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c001d7d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d7dd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d7df:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c001d7e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d7e6:	55                   	push   ebp
c001d7e7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d7eb:	56                   	push   esi
c001d7ec:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d7ef:	83 c4 10             	add    esp,0x10
c001d7f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d7f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d7fa:	47                   	inc    edi
c001d7fb:	eb c7                	jmp    c001d7c4 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c001d7fd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d801:	43                   	inc    ebx
c001d802:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c001d806:	eb a2                	jmp    c001d7aa <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c001d808:	83 c4 1c             	add    esp,0x1c
c001d80b:	5b                   	pop    ebx
c001d80c:	5e                   	pop    esi
c001d80d:	5f                   	pop    edi
c001d80e:	5d                   	pop    ebp
c001d80f:	c3                   	ret    

c001d810 <Video::clearScreen(unsigned int)>:
c001d810:	57                   	push   edi
c001d811:	56                   	push   esi
c001d812:	53                   	push   ebx
c001d813:	31 db                	xor    ebx,ebx
c001d815:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d819:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d81f:	7e 1f                	jle    c001d840 <Video::clearScreen(unsigned int)+0x30>
c001d821:	31 ff                	xor    edi,edi
c001d823:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d829:	7e 12                	jle    c001d83d <Video::clearScreen(unsigned int)+0x2d>
c001d82b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d831:	53                   	push   ebx
c001d832:	57                   	push   edi
c001d833:	47                   	inc    edi
c001d834:	56                   	push   esi
c001d835:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d838:	83 c4 10             	add    esp,0x10
c001d83b:	eb e6                	jmp    c001d823 <Video::clearScreen(unsigned int)+0x13>
c001d83d:	43                   	inc    ebx
c001d83e:	eb d9                	jmp    c001d819 <Video::clearScreen(unsigned int)+0x9>
c001d840:	5b                   	pop    ebx
c001d841:	5e                   	pop    esi
c001d842:	5f                   	pop    edi
c001d843:	c3                   	ret    

c001d844 <Video::putpixel(int, int, unsigned int)>:
c001d844:	c7 44 24 04 14 29 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032914
c001d84c:	e9 45 2d 00 00       	jmp    c0020596 <KePanic(char const*)>
c001d851:	90                   	nop

c001d852 <Video::readPixelApprox(int, int)>:
c001d852:	83 ec 18             	sub    esp,0x18
c001d855:	68 35 29 03 c0       	push   0xc0032935
c001d85a:	e8 37 2d 00 00       	call   c0020596 <KePanic(char const*)>
c001d85f:	31 c0                	xor    eax,eax
c001d861:	83 c4 1c             	add    esp,0x1c
c001d864:	c3                   	ret    
c001d865:	90                   	nop

c001d866 <Video::Video(char const*)>:
c001d866:	83 ec 0c             	sub    esp,0xc
c001d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d86d:	83 ec 08             	sub    esp,0x8
c001d870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d874:	50                   	push   eax
c001d875:	e8 8c df ff ff       	call   c001b806 <Device::Device(char const*)>
c001d87a:	83 c4 10             	add    esp,0x10
c001d87d:	ba d8 29 03 c0       	mov    edx,0xc00329d8
c001d882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d886:	89 10                	mov    DWORD PTR [eax],edx
c001d888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d88c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d896:	90                   	nop
c001d897:	83 c4 0c             	add    esp,0xc
c001d89a:	c3                   	ret    
c001d89b:	90                   	nop

c001d89c <Video::~Video()>:
c001d89c:	83 ec 0c             	sub    esp,0xc
c001d89f:	ba d8 29 03 c0       	mov    edx,0xc00329d8
c001d8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8a8:	89 10                	mov    DWORD PTR [eax],edx
c001d8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ae:	83 ec 0c             	sub    esp,0xc
c001d8b1:	50                   	push   eax
c001d8b2:	e8 ef dc ff ff       	call   c001b5a6 <Device::~Device()>
c001d8b7:	83 c4 10             	add    esp,0x10
c001d8ba:	90                   	nop
c001d8bb:	83 c4 0c             	add    esp,0xc
c001d8be:	c3                   	ret    
c001d8bf:	90                   	nop

c001d8c0 <Video::~Video()>:
c001d8c0:	83 ec 0c             	sub    esp,0xc
c001d8c3:	83 ec 0c             	sub    esp,0xc
c001d8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8ca:	e8 cd ff ff ff       	call   c001d89c <Video::~Video()>
c001d8cf:	83 c4 10             	add    esp,0x10
c001d8d2:	83 ec 08             	sub    esp,0x8
c001d8d5:	68 64 01 00 00       	push   0x164
c001d8da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8de:	e8 f1 ba ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c001d8e3:	83 c4 10             	add    esp,0x10
c001d8e6:	83 c4 0c             	add    esp,0xc
c001d8e9:	c3                   	ret    

c001d8ea <Video::isMonochrome()>:
c001d8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8ee:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d8f4:	c3                   	ret    
c001d8f5:	90                   	nop

c001d8f6 <Video::getWidth()>:
c001d8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d900:	c3                   	ret    
c001d901:	90                   	nop

c001d902 <Video::getHeight()>:
c001d902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d906:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d90c:	c3                   	ret    
c001d90d:	90                   	nop

c001d90e <Video::drawCursor(int, int, unsigned int*, int)>:
c001d90e:	55                   	push   ebp
c001d90f:	57                   	push   edi
c001d910:	56                   	push   esi
c001d911:	53                   	push   ebx
c001d912:	83 ec 2c             	sub    esp,0x2c
c001d915:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d919:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d91d:	83 f8 01             	cmp    eax,0x1
c001d920:	19 c9                	sbb    ecx,ecx
c001d922:	31 db                	xor    ebx,ebx
c001d924:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d928:	89 ce                	mov    esi,ecx
c001d92a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d932:	f7 d6                	not    esi
c001d934:	81 e6 ff ff ff 00    	and    esi,0xffffff
c001d93a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d93e:	01 d8                	add    eax,ebx
c001d940:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d944:	57                   	push   edi
c001d945:	e8 b8 ff ff ff       	call   c001d902 <Video::getHeight()>
c001d94a:	59                   	pop    ecx
c001d94b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d94f:	7e 70                	jle    c001d9c1 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d951:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d955:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d959:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d95c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d960:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d964:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d96b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d96f:	89 e8                	mov    eax,ebp
c001d971:	83 c0 20             	add    eax,0x20
c001d974:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d978:	57                   	push   edi
c001d979:	e8 78 ff ff ff       	call   c001d8f6 <Video::getWidth()>
c001d97e:	5a                   	pop    edx
c001d97f:	39 c5                	cmp    ebp,eax
c001d981:	7d 34                	jge    c001d9b7 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d983:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d988:	74 05                	je     c001d98f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d98a:	8b 07                	mov    eax,DWORD PTR [edi]
c001d98c:	56                   	push   esi
c001d98d:	eb 0d                	jmp    c001d99c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d98f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d994:	74 12                	je     c001d9a8 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d996:	8b 07                	mov    eax,DWORD PTR [edi]
c001d998:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d99c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d9a0:	55                   	push   ebp
c001d9a1:	57                   	push   edi
c001d9a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d9a5:	83 c4 10             	add    esp,0x10
c001d9a8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d9ac:	45                   	inc    ebp
c001d9ad:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d9b1:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001d9b5:	75 c1                	jne    c001d978 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d9b7:	43                   	inc    ebx
c001d9b8:	83 fb 20             	cmp    ebx,0x20
c001d9bb:	0f 85 79 ff ff ff    	jne    c001d93a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d9c1:	83 c4 2c             	add    esp,0x2c
c001d9c4:	5b                   	pop    ebx
c001d9c5:	5e                   	pop    esi
c001d9c6:	5f                   	pop    edi
c001d9c7:	5d                   	pop    ebp
c001d9c8:	c3                   	ret    
c001d9c9:	90                   	nop

c001d9ca <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d9ca:	55                   	push   ebp
c001d9cb:	57                   	push   edi
c001d9cc:	56                   	push   esi
c001d9cd:	53                   	push   ebx
c001d9ce:	83 ec 48             	sub    esp,0x48
c001d9d1:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d9d5:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d9d9:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d9dd:	c1 e0 08             	shl    eax,0x8
c001d9e0:	01 d0                	add    eax,edx
c001d9e2:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d9e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d9ea:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d9ee:	c1 e0 08             	shl    eax,0x8
c001d9f1:	01 d0                	add    eax,edx
c001d9f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9fb:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c001da00:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001da04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001da08:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001da0f:	50                   	push   eax
c001da10:	e8 87 8c ff ff       	call   c001669c <malloc>
c001da15:	83 c4 10             	add    esp,0x10
c001da18:	85 c0                	test   eax,eax
c001da1a:	89 c5                	mov    ebp,eax
c001da1c:	75 10                	jne    c001da2e <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c001da1e:	83 ec 0c             	sub    esp,0xc
c001da21:	68 60 29 03 c0       	push   0xc0032960
c001da26:	e8 6b 2b 00 00       	call   c0020596 <KePanic(char const*)>
c001da2b:	83 c4 10             	add    esp,0x10
c001da2e:	52                   	push   edx
c001da2f:	bf 12 00 00 00       	mov    edi,0x12
c001da34:	52                   	push   edx
c001da35:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001da39:	50                   	push   eax
c001da3a:	68 70 29 03 c0       	push   0xc0032970
c001da3f:	e8 8e ba ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001da44:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001da47:	83 e0 20             	and    eax,0x20
c001da4a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001da4e:	85 c0                	test   eax,eax
c001da50:	59                   	pop    ecx
c001da51:	0f 94 c0             	sete   al
c001da54:	0f b6 c0             	movzx  eax,al
c001da57:	5e                   	pop    esi
c001da58:	50                   	push   eax
c001da59:	68 7a 29 03 c0       	push   0xc003297a
c001da5e:	e8 6f ba ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001da63:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c001da67:	83 c4 10             	add    esp,0x10
c001da6a:	85 c0                	test   eax,eax
c001da6c:	89 c2                	mov    edx,eax
c001da6e:	74 11                	je     c001da81 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c001da70:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c001da74:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001da78:	c1 ff 03             	sar    edi,0x3
c001da7b:	0f af f9             	imul   edi,ecx
c001da7e:	83 c7 12             	add    edi,0x12
c001da81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001da86:	74 07                	je     c001da8f <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c001da88:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001da8d:	75 12                	jne    c001daa1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c001da8f:	83 ec 0c             	sub    esp,0xc
c001da92:	68 88 29 03 c0       	push   0xc0032988
c001da97:	e8 36 ba ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001da9c:	e9 aa 02 00 00       	jmp    c001dd4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c001daa1:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001daa5:	83 f9 02             	cmp    ecx,0x2
c001daa8:	74 0e                	je     c001dab8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c001daaa:	83 f9 0a             	cmp    ecx,0xa
c001daad:	0f 84 d1 00 00 00    	je     c001db84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c001dab3:	e9 7e 02 00 00       	jmp    c001dd36 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c001dab8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001dabd:	75 0e                	jne    c001dacd <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001dabf:	84 d2                	test   dl,dl
c001dac1:	75 0a                	jne    c001dacd <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001dac3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001dac6:	83 e8 18             	sub    eax,0x18
c001dac9:	a8 f7                	test   al,0xf7
c001dacb:	74 0d                	je     c001dada <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c001dacd:	83 ec 0c             	sub    esp,0xc
c001dad0:	68 9d 29 03 c0       	push   0xc003299d
c001dad5:	e9 64 02 00 00       	jmp    c001dd3e <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001dada:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001dae2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dae7:	31 c0                	xor    eax,eax
c001dae9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001daed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001daf5:	89 c6                	mov    esi,eax
c001daf7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001dafc:	75 15                	jne    c001db13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001dafe:	99                   	cdq    
c001daff:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001db03:	85 d2                	test   edx,edx
c001db05:	75 0c                	jne    c001db13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001db07:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001db0b:	29 c6                	sub    esi,eax
c001db0d:	4e                   	dec    esi
c001db0e:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c001db13:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001db17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001db1f:	75 0c                	jne    c001db2d <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c001db21:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c001db26:	c1 e2 18             	shl    edx,0x18
c001db29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db2d:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c001db32:	8d 46 01             	lea    eax,[esi+0x1]
c001db35:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c001db39:	c1 e1 10             	shl    ecx,0x10
c001db3c:	89 ca                	mov    edx,ecx
c001db3e:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c001db43:	c1 e1 08             	shl    ecx,0x8
c001db46:	09 d1                	or     ecx,edx
c001db48:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001db4c:	09 d1                	or     ecx,edx
c001db4e:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001db52:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c001db56:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001db5a:	c1 fa 03             	sar    edx,0x3
c001db5d:	01 d7                	add    edi,edx
c001db5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db63:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001db67:	7e 04                	jle    c001db6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c001db69:	89 c6                	mov    esi,eax
c001db6b:	eb 8a                	jmp    c001daf7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c001db6d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001db71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db75:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001db79:	0f 8f 6e ff ff ff    	jg     c001daed <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c001db7f:	e9 ce 01 00 00       	jmp    c001dd52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001db84:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001db89:	75 0e                	jne    c001db99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001db8b:	85 c0                	test   eax,eax
c001db8d:	75 0a                	jne    c001db99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001db8f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001db92:	83 e8 18             	sub    eax,0x18
c001db95:	a8 f7                	test   al,0xf7
c001db97:	74 0d                	je     c001dba6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c001db99:	83 ec 0c             	sub    esp,0xc
c001db9c:	68 ab 29 03 c0       	push   0xc00329ab
c001dba1:	e9 98 01 00 00       	jmp    c001dd3e <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001dba6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001dbae:	31 c9                	xor    ecx,ecx
c001dbb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dbb8:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c001dbbc:	0f 8d 90 01 00 00    	jge    c001dd52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001dbc2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dbc6:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001dbca:	0f 8e 82 01 00 00    	jle    c001dd52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001dbd0:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001dbd4:	8d 77 01             	lea    esi,[edi+0x1]
c001dbd7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dbdb:	83 fa 7f             	cmp    edx,0x7f
c001dbde:	89 d0                	mov    eax,edx
c001dbe0:	0f 8e a3 00 00 00    	jle    c001dc89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c001dbe6:	83 e0 7f             	and    eax,0x7f
c001dbe9:	31 d2                	xor    edx,edx
c001dbeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dbef:	40                   	inc    eax
c001dbf0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001dbf4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dbf8:	75 08                	jne    c001dc02 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c001dbfa:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c001dbff:	c1 e2 18             	shl    edx,0x18
c001dc02:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c001dc07:	c1 e0 10             	shl    eax,0x10
c001dc0a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dc0e:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c001dc13:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001dc17:	c1 e0 08             	shl    eax,0x8
c001dc1a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001dc1e:	09 f8                	or     eax,edi
c001dc20:	31 ff                	xor    edi,edi
c001dc22:	09 d0                	or     eax,edx
c001dc24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dc28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001dc2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dc31:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001dc36:	75 1d                	jne    c001dc55 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001dc38:	89 c8                	mov    eax,ecx
c001dc3a:	99                   	cdq    
c001dc3b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001dc3f:	85 d2                	test   edx,edx
c001dc41:	75 12                	jne    c001dc55 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001dc43:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc47:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001dc4b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001dc4f:	49                   	dec    ecx
c001dc50:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001dc55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dc59:	8d 51 01             	lea    edx,[ecx+0x1]
c001dc5c:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c001dc60:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dc64:	8d 47 01             	lea    eax,[edi+0x1]
c001dc67:	7e 06                	jle    c001dc6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c001dc69:	89 c7                	mov    edi,eax
c001dc6b:	89 d1                	mov    ecx,edx
c001dc6d:	eb c2                	jmp    c001dc31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c001dc6f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dc73:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dc77:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001dc7b:	c1 f8 03             	sar    eax,0x3
c001dc7e:	01 c6                	add    esi,eax
c001dc80:	89 d1                	mov    ecx,edx
c001dc82:	89 f7                	mov    edi,esi
c001dc84:	e9 2f ff ff ff       	jmp    c001dbb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c001dc89:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001dc91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc95:	40                   	inc    eax
c001dc96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dc9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001dc9f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dca3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001dca8:	75 1d                	jne    c001dcc7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001dcaa:	89 c8                	mov    eax,ecx
c001dcac:	99                   	cdq    
c001dcad:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001dcb1:	85 d2                	test   edx,edx
c001dcb3:	75 12                	jne    c001dcc7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001dcb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dcb9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001dcbd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001dcc1:	49                   	dec    ecx
c001dcc2:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001dcc7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001dccb:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001dcd3:	75 0c                	jne    c001dce1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c001dcd5:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c001dcda:	c1 e7 18             	shl    edi,0x18
c001dcdd:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001dce1:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001dce6:	8d 51 01             	lea    edx,[ecx+0x1]
c001dce9:	c1 e0 10             	shl    eax,0x10
c001dcec:	89 c7                	mov    edi,eax
c001dcee:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c001dcf3:	c1 e0 08             	shl    eax,0x8
c001dcf6:	09 f8                	or     eax,edi
c001dcf8:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001dcfc:	09 f8                	or     eax,edi
c001dcfe:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001dd02:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dd06:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd0a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dd0e:	c1 f8 03             	sar    eax,0x3
c001dd11:	01 c6                	add    esi,eax
c001dd13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd17:	40                   	inc    eax
c001dd18:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c001dd1c:	7e 0b                	jle    c001dd29 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c001dd1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd22:	89 d1                	mov    ecx,edx
c001dd24:	e9 7a ff ff ff       	jmp    c001dca3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c001dd29:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001dd2d:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001dd31:	e9 4a ff ff ff       	jmp    c001dc80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c001dd36:	50                   	push   eax
c001dd37:	50                   	push   eax
c001dd38:	51                   	push   ecx
c001dd39:	68 ba 29 03 c0       	push   0xc00329ba
c001dd3e:	e8 8f b7 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001dd43:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dd46:	e8 61 89 ff ff       	call   c00166ac <free>
c001dd4b:	83 c4 10             	add    esp,0x10
c001dd4e:	31 ed                	xor    ebp,ebp
c001dd50:	eb 14                	jmp    c001dd66 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c001dd52:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dd56:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001dd5a:	89 18                	mov    DWORD PTR [eax],ebx
c001dd5c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001dd60:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dd64:	89 18                	mov    DWORD PTR [eax],ebx
c001dd66:	83 c4 3c             	add    esp,0x3c
c001dd69:	89 e8                	mov    eax,ebp
c001dd6b:	5b                   	pop    ebx
c001dd6c:	5e                   	pop    esi
c001dd6d:	5f                   	pop    edi
c001dd6e:	5d                   	pop    ebp
c001dd6f:	c3                   	ret    

c001dd70 <Video::putTGA(int, int, unsigned char*, int)>:
c001dd70:	55                   	push   ebp
c001dd71:	57                   	push   edi
c001dd72:	56                   	push   esi
c001dd73:	53                   	push   ebx
c001dd74:	83 ec 28             	sub    esp,0x28
c001dd77:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dd7b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dd7f:	50                   	push   eax
c001dd80:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dd84:	50                   	push   eax
c001dd85:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dd89:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dd8d:	55                   	push   ebp
c001dd8e:	e8 37 fc ff ff       	call   c001d9ca <Video::tgaParse(unsigned char*, int, int*, int*)>
c001dd93:	83 c4 20             	add    esp,0x20
c001dd96:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dd9a:	85 c0                	test   eax,eax
c001dd9c:	74 3b                	je     c001ddd9 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001dd9e:	89 c6                	mov    esi,eax
c001dda0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dda4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001dda8:	39 d8                	cmp    eax,ebx
c001ddaa:	7e 2d                	jle    c001ddd9 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001ddac:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ddb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ddb4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ddb8:	39 f8                	cmp    eax,edi
c001ddba:	7e 1a                	jle    c001ddd6 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c001ddbc:	83 c6 04             	add    esi,0x4
c001ddbf:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001ddc2:	85 c0                	test   eax,eax
c001ddc4:	79 0d                	jns    c001ddd3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001ddc6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ddc9:	50                   	push   eax
c001ddca:	53                   	push   ebx
c001ddcb:	57                   	push   edi
c001ddcc:	55                   	push   ebp
c001ddcd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001ddd0:	83 c4 10             	add    esp,0x10
c001ddd3:	47                   	inc    edi
c001ddd4:	eb da                	jmp    c001ddb0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001ddd6:	43                   	inc    ebx
c001ddd7:	eb c7                	jmp    c001dda0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001ddd9:	83 c4 1c             	add    esp,0x1c
c001dddc:	5b                   	pop    ebx
c001dddd:	5e                   	pop    esi
c001ddde:	5f                   	pop    edi
c001dddf:	5d                   	pop    ebp
c001dde0:	c3                   	ret    
c001dde1:	66 90                	xchg   ax,ax
c001dde3:	90                   	nop

c001dde4 <ACPI::close(int, int, void*)>:
c001dde4:	83 ec 1c             	sub    esp,0x1c
c001dde7:	83 ec 0c             	sub    esp,0xc
c001ddea:	68 1c 2a 03 c0       	push   0xc0032a1c
c001ddef:	e8 de b6 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001ddf4:	83 c4 10             	add    esp,0x10
c001ddf7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001ddff:	74 1b                	je     c001de1c <ACPI::close(int, int, void*)+0x38>
c001de01:	83 ec 0c             	sub    esp,0xc
c001de04:	68 2b 2a 03 c0       	push   0xc0032a2b
c001de09:	e8 c4 b6 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001de0e:	83 c4 10             	add    esp,0x10
c001de11:	b8 00 00 00 00       	mov    eax,0x0
c001de16:	e9 01 01 00 00       	jmp    c001df1c <ACPI::close(int, int, void*)+0x138>
c001de1b:	90                   	nop
c001de1c:	83 ec 0c             	sub    esp,0xc
c001de1f:	68 3c 2a 03 c0       	push   0xc0032a3c
c001de24:	e8 a9 b6 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001de29:	83 c4 10             	add    esp,0x10
c001de2c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001de31:	75 45                	jne    c001de78 <ACPI::close(int, int, void*)+0x94>
c001de33:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001de38:	83 ec 08             	sub    esp,0x8
c001de3b:	50                   	push   eax
c001de3c:	68 4b 2a 03 c0       	push   0xc0032a4b
c001de41:	e8 8c b6 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001de46:	83 c4 10             	add    esp,0x10
c001de49:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001de4e:	85 c0                	test   eax,eax
c001de50:	74 0a                	je     c001de5c <ACPI::close(int, int, void*)+0x78>
c001de52:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001de57:	ff d0                	call   eax
c001de59:	8d 76 00             	lea    esi,[esi+0x0]
c001de5c:	83 ec 0c             	sub    esp,0xc
c001de5f:	68 1c 2c 03 c0       	push   0xc0032c1c
c001de64:	e8 2d 27 00 00       	call   c0020596 <KePanic(char const*)>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001de71:	e9 a6 00 00 00       	jmp    c001df1c <ACPI::close(int, int, void*)+0x138>
c001de76:	66 90                	xchg   ax,ax
c001de78:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001de7d:	0f 85 81 00 00 00    	jne    c001df04 <ACPI::close(int, int, void*)+0x120>
c001de83:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001de88:	83 ec 08             	sub    esp,0x8
c001de8b:	50                   	push   eax
c001de8c:	68 69 2a 03 c0       	push   0xc0032a69
c001de91:	e8 3c b6 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001de9e:	85 c0                	test   eax,eax
c001dea0:	74 0a                	je     c001deac <ACPI::close(int, int, void*)+0xc8>
c001dea2:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dea7:	ff d0                	call   eax
c001dea9:	8d 76 00             	lea    esi,[esi+0x0]
c001deac:	83 ec 0c             	sub    esp,0xc
c001deaf:	68 84 2a 03 c0       	push   0xc0032a84
c001deb4:	e8 19 b6 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001deb9:	83 c4 10             	add    esp,0x10
c001debc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001dec1:	8d 76 00             	lea    esi,[esi+0x0]
c001dec4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dec9:	83 e0 02             	and    eax,0x2
c001decc:	74 1e                	je     c001deec <ACPI::close(int, int, void*)+0x108>
c001dece:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001ded5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ded9:	89 c2                	mov    edx,eax
c001dedb:	ec                   	in     al,dx
c001dedc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dee0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001dee4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dee8:	eb da                	jmp    c001dec4 <ACPI::close(int, int, void*)+0xe0>
c001deea:	66 90                	xchg   ax,ax
c001deec:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001def3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001def8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001defc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df00:	ee                   	out    dx,al
c001df01:	8d 76 00             	lea    esi,[esi+0x0]
c001df04:	83 ec 0c             	sub    esp,0xc
c001df07:	68 96 2a 03 c0       	push   0xc0032a96
c001df0c:	e8 c1 b5 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001df11:	83 c4 10             	add    esp,0x10
c001df14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001df19:	8d 76 00             	lea    esi,[esi+0x0]
c001df1c:	83 c4 1c             	add    esp,0x1c
c001df1f:	c3                   	ret    

c001df20 <findRSDP()>:
c001df20:	83 ec 1c             	sub    esp,0x1c
c001df23:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df28:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df2e:	83 e0 04             	and    eax,0x4
c001df31:	0f b6 c0             	movzx  eax,al
c001df34:	85 c0                	test   eax,eax
c001df36:	75 08                	jne    c001df40 <findRSDP()+0x20>
c001df38:	b8 00 00 00 00       	mov    eax,0x0
c001df3d:	eb 75                	jmp    c001dfb4 <findRSDP()+0x94>
c001df3f:	90                   	nop
c001df40:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001df45:	3d ff 07 00 00       	cmp    eax,0x7ff
c001df4a:	7f 1c                	jg     c001df68 <findRSDP()+0x48>
c001df4c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df51:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001df57:	83 e2 fb             	and    edx,0xfffffffb
c001df5a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001df60:	b8 00 00 00 00       	mov    eax,0x0
c001df65:	eb 4d                	jmp    c001dfb4 <findRSDP()+0x94>
c001df67:	90                   	nop
c001df68:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001df70:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001df78:	77 32                	ja     c001dfac <findRSDP()+0x8c>
c001df7a:	83 ec 04             	sub    esp,0x4
c001df7d:	6a 08                	push   0x8
c001df7f:	68 a5 2a 03 c0       	push   0xc0032aa5
c001df84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001df88:	e8 f3 23 fe ff       	call   c0000380 <memcmp>
c001df8d:	83 c4 10             	add    esp,0x10
c001df90:	85 c0                	test   eax,eax
c001df92:	0f 94 c0             	sete   al
c001df95:	0f b6 c0             	movzx  eax,al
c001df98:	85 c0                	test   eax,eax
c001df9a:	74 08                	je     c001dfa4 <findRSDP()+0x84>
c001df9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfa0:	eb 12                	jmp    c001dfb4 <findRSDP()+0x94>
c001dfa2:	66 90                	xchg   ax,ax
c001dfa4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dfa9:	eb c5                	jmp    c001df70 <findRSDP()+0x50>
c001dfab:	90                   	nop
c001dfac:	b8 00 00 00 00       	mov    eax,0x0
c001dfb1:	8d 76 00             	lea    esi,[esi+0x0]
c001dfb4:	83 c4 1c             	add    esp,0x1c
c001dfb7:	c3                   	ret    

c001dfb8 <loadACPITables(unsigned char*)>:
c001dfb8:	57                   	push   edi
c001dfb9:	56                   	push   esi
c001dfba:	53                   	push   ebx
c001dfbb:	83 ec 60             	sub    esp,0x60
c001dfbe:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dfc3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dfc9:	83 e0 04             	and    eax,0x4
c001dfcc:	0f b6 c0             	movzx  eax,al
c001dfcf:	85 c0                	test   eax,eax
c001dfd1:	0f 84 41 02 00 00    	je     c001e218 <loadACPITables(unsigned char*)+0x260>
c001dfd7:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dfdc:	0f b6 c0             	movzx  eax,al
c001dfdf:	85 c0                	test   eax,eax
c001dfe1:	74 79                	je     c001e05c <loadACPITables(unsigned char*)+0xa4>
c001dfe3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dfe7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001dfeb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dfef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dff2:	83 e8 24             	sub    eax,0x24
c001dff5:	c1 e8 03             	shr    eax,0x3
c001dff8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dffc:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001e004:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001e008:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001e00c:	0f 8d ba 00 00 00    	jge    c001e0cc <loadACPITables(unsigned char*)+0x114>
c001e012:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001e016:	83 c0 24             	add    eax,0x24
c001e019:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001e01d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e021:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e025:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001e029:	c1 e0 03             	shl    eax,0x3
c001e02c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001e030:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e034:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e037:	8b 00                	mov    eax,DWORD PTR [eax]
c001e039:	89 c1                	mov    ecx,eax
c001e03b:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e040:	8d 50 01             	lea    edx,[eax+0x1]
c001e043:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001e049:	89 ca                	mov    edx,ecx
c001e04b:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001e052:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001e057:	eb ab                	jmp    c001e004 <loadACPITables(unsigned char*)+0x4c>
c001e059:	8d 76 00             	lea    esi,[esi+0x0]
c001e05c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001e060:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e064:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e06b:	83 e8 24             	sub    eax,0x24
c001e06e:	c1 e8 02             	shr    eax,0x2
c001e071:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001e075:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001e07d:	8d 76 00             	lea    esi,[esi+0x0]
c001e080:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e084:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001e088:	7d 42                	jge    c001e0cc <loadACPITables(unsigned char*)+0x114>
c001e08a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001e08e:	83 c0 24             	add    eax,0x24
c001e091:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001e095:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e099:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001e09d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e0a1:	c1 e0 02             	shl    eax,0x2
c001e0a4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001e0a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e0ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e0ae:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e0b3:	8d 50 01             	lea    edx,[eax+0x1]
c001e0b6:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001e0bc:	89 ca                	mov    edx,ecx
c001e0be:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001e0c5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001e0ca:	eb b4                	jmp    c001e080 <loadACPITables(unsigned char*)+0xc8>
c001e0cc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001e0d4:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e0d9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001e0dd:	0f 8d 39 01 00 00    	jge    c001e21c <loadACPITables(unsigned char*)+0x264>
c001e0e3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e0e7:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e0ee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e0f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e0fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0fe:	25 ff 0f 00 00       	and    eax,0xfff
c001e103:	89 c6                	mov    esi,eax
c001e105:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e10b:	83 ec 0c             	sub    esp,0xc
c001e10e:	6a 01                	push   0x1
c001e110:	e8 a8 a0 ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c001e115:	83 c4 10             	add    esp,0x10
c001e118:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e11c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e122:	83 ec 0c             	sub    esp,0xc
c001e125:	6a 01                	push   0x1
c001e127:	6a 01                	push   0x1
c001e129:	50                   	push   eax
c001e12a:	52                   	push   edx
c001e12b:	53                   	push   ebx
c001e12c:	e8 9f a9 ff ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e131:	83 c4 20             	add    esp,0x20
c001e134:	09 f0                	or     eax,esi
c001e136:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e13a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e13e:	c1 e0 03             	shl    eax,0x3
c001e141:	05 20 f4 03 c0       	add    eax,0xc003f420
c001e146:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e14a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e14e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e152:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001e15a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e15e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e162:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e166:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e16a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e16e:	89 c6                	mov    esi,eax
c001e170:	89 d7                	mov    edi,edx
c001e172:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e174:	89 c8                	mov    eax,ecx
c001e176:	89 fa                	mov    edx,edi
c001e178:	89 f3                	mov    ebx,esi
c001e17a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e17e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e18a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e18d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e191:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e195:	05 00 10 00 00       	add    eax,0x1000
c001e19a:	c1 e8 0c             	shr    eax,0xc
c001e19d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e1a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e1a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1ad:	25 ff 0f 00 00       	and    eax,0xfff
c001e1b2:	89 c6                	mov    esi,eax
c001e1b4:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e1ba:	83 ec 0c             	sub    esp,0xc
c001e1bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e1c1:	e8 f7 9f ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c001e1c6:	83 c4 10             	add    esp,0x10
c001e1c9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e1cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e1d3:	83 ec 0c             	sub    esp,0xc
c001e1d6:	6a 01                	push   0x1
c001e1d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e1dc:	50                   	push   eax
c001e1dd:	52                   	push   edx
c001e1de:	53                   	push   ebx
c001e1df:	e8 ec a8 ff ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e1e4:	83 c4 20             	add    esp,0x20
c001e1e7:	09 f0                	or     eax,esi
c001e1e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e1ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1f1:	83 ec 0c             	sub    esp,0xc
c001e1f4:	50                   	push   eax
c001e1f5:	e8 d7 a2 ff ff       	call   c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>
c001e1fa:	83 c4 10             	add    esp,0x10
c001e1fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e201:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e205:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001e20c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001e211:	e9 be fe ff ff       	jmp    c001e0d4 <loadACPITables(unsigned char*)+0x11c>
c001e216:	66 90                	xchg   ax,ax
c001e218:	90                   	nop
c001e219:	8d 76 00             	lea    esi,[esi+0x0]
c001e21c:	83 c4 60             	add    esp,0x60
c001e21f:	5b                   	pop    ebx
c001e220:	5e                   	pop    esi
c001e221:	5f                   	pop    edi
c001e222:	c3                   	ret    
c001e223:	90                   	nop

c001e224 <findRSDT(unsigned char*)>:
c001e224:	57                   	push   edi
c001e225:	56                   	push   esi
c001e226:	53                   	push   ebx
c001e227:	83 ec 50             	sub    esp,0x50
c001e22a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e22f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e235:	83 e0 04             	and    eax,0x4
c001e238:	0f b6 c0             	movzx  eax,al
c001e23b:	85 c0                	test   eax,eax
c001e23d:	75 0d                	jne    c001e24c <findRSDT(unsigned char*)+0x28>
c001e23f:	b8 00 00 00 00       	mov    eax,0x0
c001e244:	e9 2b 01 00 00       	jmp    c001e374 <findRSDT(unsigned char*)+0x150>
c001e249:	8d 76 00             	lea    esi,[esi+0x0]
c001e24c:	89 e0                	mov    eax,esp
c001e24e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001e252:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e256:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001e25a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001e262:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e266:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e26a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e26e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e272:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e276:	89 c6                	mov    esi,eax
c001e278:	89 d7                	mov    edi,edx
c001e27a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e27c:	89 c8                	mov    eax,ecx
c001e27e:	89 fa                	mov    edx,edi
c001e280:	89 f3                	mov    ebx,esi
c001e282:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001e286:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e28a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e28e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e292:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001e296:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001e29e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e2a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e2b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e2b6:	25 ff 0f 00 00       	and    eax,0xfff
c001e2bb:	89 c6                	mov    esi,eax
c001e2bd:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e2c3:	83 ec 0c             	sub    esp,0xc
c001e2c6:	6a 02                	push   0x2
c001e2c8:	e8 f0 9e ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c001e2cd:	83 c4 10             	add    esp,0x10
c001e2d0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e2d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e2da:	83 ec 0c             	sub    esp,0xc
c001e2dd:	6a 01                	push   0x1
c001e2df:	6a 02                	push   0x2
c001e2e1:	50                   	push   eax
c001e2e2:	52                   	push   edx
c001e2e3:	53                   	push   ebx
c001e2e4:	e8 e7 a7 ff ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e2e9:	83 c4 20             	add    esp,0x20
c001e2ec:	09 f0                	or     eax,esi
c001e2ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e2f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e2f6:	25 ff 0f 00 00       	and    eax,0xfff
c001e2fb:	89 c6                	mov    esi,eax
c001e2fd:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e303:	83 ec 0c             	sub    esp,0xc
c001e306:	6a 02                	push   0x2
c001e308:	e8 b0 9e ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c001e30d:	83 c4 10             	add    esp,0x10
c001e310:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e314:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e31a:	83 ec 0c             	sub    esp,0xc
c001e31d:	6a 01                	push   0x1
c001e31f:	6a 02                	push   0x2
c001e321:	50                   	push   eax
c001e322:	52                   	push   edx
c001e323:	53                   	push   ebx
c001e324:	e8 a7 a7 ff ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e329:	83 c4 20             	add    esp,0x20
c001e32c:	09 f0                	or     eax,esi
c001e32e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e332:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e337:	85 c0                	test   eax,eax
c001e339:	75 11                	jne    c001e34c <findRSDT(unsigned char*)+0x128>
c001e33b:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001e342:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e346:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e34a:	eb 24                	jmp    c001e370 <findRSDT(unsigned char*)+0x14c>
c001e34c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e351:	83 f8 02             	cmp    eax,0x2
c001e354:	75 12                	jne    c001e368 <findRSDT(unsigned char*)+0x144>
c001e356:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001e35d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e361:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e365:	eb 09                	jmp    c001e370 <findRSDT(unsigned char*)+0x14c>
c001e367:	90                   	nop
c001e368:	b8 00 00 00 00       	mov    eax,0x0
c001e36d:	eb 05                	jmp    c001e374 <findRSDT(unsigned char*)+0x150>
c001e36f:	90                   	nop
c001e370:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e374:	83 c4 50             	add    esp,0x50
c001e377:	5b                   	pop    ebx
c001e378:	5e                   	pop    esi
c001e379:	5f                   	pop    edi
c001e37a:	c3                   	ret    
c001e37b:	90                   	nop

c001e37c <findDataTable(unsigned char*, char*)>:
c001e37c:	83 ec 1c             	sub    esp,0x1c
c001e37f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e384:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e38a:	83 e0 04             	and    eax,0x4
c001e38d:	0f b6 c0             	movzx  eax,al
c001e390:	85 c0                	test   eax,eax
c001e392:	75 08                	jne    c001e39c <findDataTable(unsigned char*, char*)+0x20>
c001e394:	b8 00 00 00 00       	mov    eax,0x0
c001e399:	eb 5d                	jmp    c001e3f8 <findDataTable(unsigned char*, char*)+0x7c>
c001e39b:	90                   	nop
c001e39c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e3a4:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e3a9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e3ad:	7d 41                	jge    c001e3f0 <findDataTable(unsigned char*, char*)+0x74>
c001e3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3b3:	c1 e0 03             	shl    eax,0x3
c001e3b6:	05 20 f4 03 c0       	add    eax,0xc003f420
c001e3bb:	83 ec 04             	sub    esp,0x4
c001e3be:	6a 04                	push   0x4
c001e3c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e3c4:	50                   	push   eax
c001e3c5:	e8 b6 1f fe ff       	call   c0000380 <memcmp>
c001e3ca:	83 c4 10             	add    esp,0x10
c001e3cd:	85 c0                	test   eax,eax
c001e3cf:	0f 94 c0             	sete   al
c001e3d2:	0f b6 c0             	movzx  eax,al
c001e3d5:	85 c0                	test   eax,eax
c001e3d7:	74 0f                	je     c001e3e8 <findDataTable(unsigned char*, char*)+0x6c>
c001e3d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3dd:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e3e4:	eb 12                	jmp    c001e3f8 <findDataTable(unsigned char*, char*)+0x7c>
c001e3e6:	66 90                	xchg   ax,ax
c001e3e8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e3ed:	eb b5                	jmp    c001e3a4 <findDataTable(unsigned char*, char*)+0x28>
c001e3ef:	90                   	nop
c001e3f0:	b8 00 00 00 00       	mov    eax,0x0
c001e3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001e3f8:	83 c4 1c             	add    esp,0x1c
c001e3fb:	c3                   	ret    

c001e3fc <scanMADT()>:
c001e3fc:	53                   	push   ebx
c001e3fd:	83 ec 38             	sub    esp,0x38
c001e400:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e405:	25 00 04 00 00       	and    eax,0x400
c001e40a:	74 14                	je     c001e420 <scanMADT()+0x24>
c001e40c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e411:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e417:	83 e2 fb             	and    edx,0xfffffffb
c001e41a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e420:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e425:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e42b:	83 e0 04             	and    eax,0x4
c001e42e:	0f b6 c0             	movzx  eax,al
c001e431:	85 c0                	test   eax,eax
c001e433:	0f 84 6b 04 00 00    	je     c001e8a4 <scanMADT()+0x4a8>
c001e439:	e8 e2 fa ff ff       	call   c001df20 <findRSDP()>
c001e43e:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e443:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e448:	85 c0                	test   eax,eax
c001e44a:	75 1c                	jne    c001e468 <scanMADT()+0x6c>
c001e44c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e451:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e457:	83 e2 fb             	and    edx,0xfffffffb
c001e45a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e460:	e9 47 04 00 00       	jmp    c001e8ac <scanMADT()+0x4b0>
c001e465:	8d 76 00             	lea    esi,[esi+0x0]
c001e468:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e46d:	83 ec 0c             	sub    esp,0xc
c001e470:	50                   	push   eax
c001e471:	e8 ae fd ff ff       	call   c001e224 <findRSDT(unsigned char*)>
c001e476:	83 c4 10             	add    esp,0x10
c001e479:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e47e:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e483:	85 c0                	test   eax,eax
c001e485:	75 19                	jne    c001e4a0 <scanMADT()+0xa4>
c001e487:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e48c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e492:	83 e2 fb             	and    edx,0xfffffffb
c001e495:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e49b:	e9 0c 04 00 00       	jmp    c001e8ac <scanMADT()+0x4b0>
c001e4a0:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e4a5:	83 ec 0c             	sub    esp,0xc
c001e4a8:	50                   	push   eax
c001e4a9:	e8 0a fb ff ff       	call   c001dfb8 <loadACPITables(unsigned char*)>
c001e4ae:	83 c4 10             	add    esp,0x10
c001e4b1:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e4b6:	83 ec 08             	sub    esp,0x8
c001e4b9:	68 ae 2a 03 c0       	push   0xc0032aae
c001e4be:	50                   	push   eax
c001e4bf:	e8 b8 fe ff ff       	call   c001e37c <findDataTable(unsigned char*, char*)>
c001e4c4:	83 c4 10             	add    esp,0x10
c001e4c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e4cb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e4d0:	75 1a                	jne    c001e4ec <scanMADT()+0xf0>
c001e4d2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e4d7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e4dd:	83 e2 fe             	and    edx,0xfffffffe
c001e4e0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e4e6:	e9 c1 03 00 00       	jmp    c001e8ac <scanMADT()+0x4b0>
c001e4eb:	90                   	nop
c001e4ec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e4f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4fb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e4ff:	0f 87 a7 03 00 00    	ja     c001e8ac <scanMADT()+0x4b0>
c001e505:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e50d:	0f 87 99 03 00 00    	ja     c001e8ac <scanMADT()+0x4b0>
c001e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e517:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e51b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e51f:	8d 50 01             	lea    edx,[eax+0x1]
c001e522:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e526:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e52a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e52e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e532:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e536:	8d 50 01             	lea    edx,[eax+0x1]
c001e539:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e53d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e541:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e545:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e549:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e54e:	83 f8 02             	cmp    eax,0x2
c001e551:	0f 86 51 03 00 00    	jbe    c001e8a8 <scanMADT()+0x4ac>
c001e557:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e55c:	85 c0                	test   eax,eax
c001e55e:	75 58                	jne    c001e5b8 <scanMADT()+0x1bc>
c001e560:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e564:	8d 50 01             	lea    edx,[eax+0x1]
c001e567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e56b:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e571:	0f b6 d2             	movzx  edx,dl
c001e574:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e578:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e57c:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e582:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e586:	8d 50 01             	lea    edx,[eax+0x1]
c001e589:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e58d:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e593:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e596:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e59c:	0f b6 d2             	movzx  edx,dl
c001e59f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e5a3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e5a7:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e5ad:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e5b2:	e9 d9 02 00 00       	jmp    c001e890 <scanMADT()+0x494>
c001e5b7:	90                   	nop
c001e5b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e5bd:	83 f8 01             	cmp    eax,0x1
c001e5c0:	0f 85 1a 01 00 00    	jne    c001e6e0 <scanMADT()+0x2e4>
c001e5c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5ca:	8d 50 01             	lea    edx,[eax+0x1]
c001e5cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e5d1:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e5d7:	0f b6 d2             	movzx  edx,dl
c001e5da:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e5de:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e5e2:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e5e8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e5ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5f5:	01 d0                	add    eax,edx
c001e5f7:	83 c0 2c             	add    eax,0x2c
c001e5fa:	8a 00                	mov    al,BYTE PTR [eax]
c001e5fc:	0f b6 d0             	movzx  edx,al
c001e5ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e603:	8d 48 01             	lea    ecx,[eax+0x1]
c001e606:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e60a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e60e:	0f b6 c0             	movzx  eax,al
c001e611:	c1 e0 08             	shl    eax,0x8
c001e614:	89 d1                	mov    ecx,edx
c001e616:	09 c1                	or     ecx,eax
c001e618:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e61c:	8d 50 02             	lea    edx,[eax+0x2]
c001e61f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e623:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e627:	0f b6 c0             	movzx  eax,al
c001e62a:	c1 e0 10             	shl    eax,0x10
c001e62d:	09 c1                	or     ecx,eax
c001e62f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e633:	8d 50 03             	lea    edx,[eax+0x3]
c001e636:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e63a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e63e:	0f b6 c0             	movzx  eax,al
c001e641:	c1 e0 18             	shl    eax,0x18
c001e644:	09 c1                	or     ecx,eax
c001e646:	89 ca                	mov    edx,ecx
c001e648:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e64d:	0f b6 c0             	movzx  eax,al
c001e650:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e657:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e65c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e660:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e664:	01 d0                	add    eax,edx
c001e666:	83 c0 2c             	add    eax,0x2c
c001e669:	8a 00                	mov    al,BYTE PTR [eax]
c001e66b:	0f b6 d0             	movzx  edx,al
c001e66e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e672:	8d 48 01             	lea    ecx,[eax+0x1]
c001e675:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e679:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e67d:	0f b6 c0             	movzx  eax,al
c001e680:	c1 e0 08             	shl    eax,0x8
c001e683:	89 d1                	mov    ecx,edx
c001e685:	09 c1                	or     ecx,eax
c001e687:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e68b:	8d 50 02             	lea    edx,[eax+0x2]
c001e68e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e692:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e696:	0f b6 c0             	movzx  eax,al
c001e699:	c1 e0 10             	shl    eax,0x10
c001e69c:	09 c1                	or     ecx,eax
c001e69e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6a2:	8d 50 03             	lea    edx,[eax+0x3]
c001e6a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6a9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e6ad:	0f b6 c0             	movzx  eax,al
c001e6b0:	c1 e0 18             	shl    eax,0x18
c001e6b3:	09 c1                	or     ecx,eax
c001e6b5:	89 ca                	mov    edx,ecx
c001e6b7:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e6bc:	0f b6 c0             	movzx  eax,al
c001e6bf:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e6c6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e6cb:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e6d0:	83 c0 01             	add    eax,0x1
c001e6d3:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e6d8:	e9 b3 01 00 00       	jmp    c001e890 <scanMADT()+0x494>
c001e6dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e6e0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e6e5:	83 f8 02             	cmp    eax,0x2
c001e6e8:	0f 85 ea 00 00 00    	jne    c001e7d8 <scanMADT()+0x3dc>
c001e6ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6f2:	8d 50 01             	lea    edx,[eax+0x1]
c001e6f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e6f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e701:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e705:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e709:	8d 50 01             	lea    edx,[eax+0x1]
c001e70c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e710:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e714:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e718:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e71c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e724:	01 d0                	add    eax,edx
c001e726:	83 c0 2c             	add    eax,0x2c
c001e729:	8a 00                	mov    al,BYTE PTR [eax]
c001e72b:	0f b6 d0             	movzx  edx,al
c001e72e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e732:	8d 48 01             	lea    ecx,[eax+0x1]
c001e735:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e739:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e73d:	0f b6 c0             	movzx  eax,al
c001e740:	c1 e0 08             	shl    eax,0x8
c001e743:	89 d1                	mov    ecx,edx
c001e745:	09 c1                	or     ecx,eax
c001e747:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e74b:	8d 50 02             	lea    edx,[eax+0x2]
c001e74e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e752:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e756:	0f b6 c0             	movzx  eax,al
c001e759:	c1 e0 10             	shl    eax,0x10
c001e75c:	09 c1                	or     ecx,eax
c001e75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e762:	8d 50 03             	lea    edx,[eax+0x3]
c001e765:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e769:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e76d:	0f b6 c0             	movzx  eax,al
c001e770:	c1 e0 18             	shl    eax,0x18
c001e773:	09 c8                	or     eax,ecx
c001e775:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e779:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e77e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e782:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e786:	01 d0                	add    eax,edx
c001e788:	83 c0 2c             	add    eax,0x2c
c001e78b:	8a 00                	mov    al,BYTE PTR [eax]
c001e78d:	0f b6 d0             	movzx  edx,al
c001e790:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e794:	8d 48 01             	lea    ecx,[eax+0x1]
c001e797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e79b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e79f:	0f b6 c0             	movzx  eax,al
c001e7a2:	c1 e0 08             	shl    eax,0x8
c001e7a5:	09 d0                	or     eax,edx
c001e7a7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e7ac:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e7b1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e7b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e7ba:	88 90 48 43 03 c0    	mov    BYTE PTR [eax-0x3ffcbcb8],dl
c001e7c0:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e7c5:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c001e7ca:	66 89 94 00 c0 f6 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffc0940],dx
c001e7d2:	e9 b9 00 00 00       	jmp    c001e890 <scanMADT()+0x494>
c001e7d7:	90                   	nop
c001e7d8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e7dd:	83 f8 04             	cmp    eax,0x4
c001e7e0:	0f 85 9a 00 00 00    	jne    c001e880 <scanMADT()+0x484>
c001e7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e7ea:	8d 50 01             	lea    edx,[eax+0x1]
c001e7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e7f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e7f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e7f9:	0f b6 c0             	movzx  eax,al
c001e7fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e800:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e804:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e808:	01 d0                	add    eax,edx
c001e80a:	83 c0 2c             	add    eax,0x2c
c001e80d:	8a 00                	mov    al,BYTE PTR [eax]
c001e80f:	0f b6 d0             	movzx  edx,al
c001e812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e816:	8d 48 01             	lea    ecx,[eax+0x1]
c001e819:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e81d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e821:	0f b6 c0             	movzx  eax,al
c001e824:	c1 e0 08             	shl    eax,0x8
c001e827:	09 d0                	or     eax,edx
c001e829:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e82d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e832:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e836:	8d 50 01             	lea    edx,[eax+0x1]
c001e839:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e83d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e841:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e845:	0f b6 c0             	movzx  eax,al
c001e848:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e850:	c1 e0 08             	shl    eax,0x8
c001e853:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e857:	89 c1                	mov    ecx,eax
c001e859:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e85d:	c1 e0 18             	shl    eax,0x18
c001e860:	89 c3                	mov    ebx,eax
c001e862:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e867:	8d 50 01             	lea    edx,[eax+0x1]
c001e86a:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e870:	09 d9                	or     ecx,ebx
c001e872:	89 ca                	mov    edx,ecx
c001e874:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e87b:	eb 13                	jmp    c001e890 <scanMADT()+0x494>
c001e87d:	8d 76 00             	lea    esi,[esi+0x0]
c001e880:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e885:	83 f8 05             	cmp    eax,0x5
c001e888:	75 06                	jne    c001e890 <scanMADT()+0x494>
c001e88a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e88f:	90                   	nop
c001e890:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e895:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e899:	01 d0                	add    eax,edx
c001e89b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e89f:	e9 50 fc ff ff       	jmp    c001e4f4 <scanMADT()+0xf8>
c001e8a4:	90                   	nop
c001e8a5:	eb 05                	jmp    c001e8ac <scanMADT()+0x4b0>
c001e8a7:	90                   	nop
c001e8a8:	90                   	nop
c001e8a9:	8d 76 00             	lea    esi,[esi+0x0]
c001e8ac:	83 c4 38             	add    esp,0x38
c001e8af:	5b                   	pop    ebx
c001e8b0:	c3                   	ret    
c001e8b1:	90                   	nop
c001e8b2:	66 90                	xchg   ax,ax

c001e8b4 <ACPI::ACPI()>:
c001e8b4:	83 ec 0c             	sub    esp,0xc
c001e8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8bb:	83 ec 08             	sub    esp,0x8
c001e8be:	68 b3 2a 03 c0       	push   0xc0032ab3
c001e8c3:	50                   	push   eax
c001e8c4:	e8 3d cf ff ff       	call   c001b806 <Device::Device(char const*)>
c001e8c9:	83 c4 10             	add    esp,0x10
c001e8cc:	ba c0 2c 03 c0       	mov    edx,0xc0032cc0
c001e8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d5:	89 10                	mov    DWORD PTR [eax],edx
c001e8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8db:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e8fe:	e8 f9 fa ff ff       	call   c001e3fc <scanMADT()>
c001e903:	90                   	nop
c001e904:	83 c4 0c             	add    esp,0xc
c001e907:	c3                   	ret    

c001e908 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e908:	83 ec 2c             	sub    esp,0x2c
c001e90b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e90f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e913:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e917:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e91b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e920:	88 c8                	mov    al,cl
c001e922:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e926:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e92b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e933:	90                   	nop
c001e934:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e938:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e93e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e942:	0f 8d b0 00 00 00    	jge    c001e9f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e948:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e94c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e950:	83 c2 2a             	add    edx,0x2a
c001e953:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e957:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e95c:	0f b7 c0             	movzx  eax,ax
c001e95f:	39 c2                	cmp    edx,eax
c001e961:	0f 85 85 00 00 00    	jne    c001e9ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e967:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e96b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e96f:	83 c2 2a             	add    edx,0x2a
c001e972:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e976:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e97b:	0f b6 c0             	movzx  eax,al
c001e97e:	39 c2                	cmp    edx,eax
c001e980:	75 6a                	jne    c001e9ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e982:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e987:	85 c0                	test   eax,eax
c001e989:	74 3d                	je     c001e9c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e98b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e98f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e993:	83 c2 2a             	add    edx,0x2a
c001e996:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e99a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e99e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9a1:	39 c2                	cmp    edx,eax
c001e9a3:	74 13                	je     c001e9b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e9a5:	83 ec 0c             	sub    esp,0xc
c001e9a8:	68 40 2c 03 c0       	push   0xc0032c40
c001e9ad:	e8 e4 1b 00 00       	call   c0020596 <KePanic(char const*)>
c001e9b2:	83 c4 10             	add    esp,0x10
c001e9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e9b8:	83 ec 0c             	sub    esp,0xc
c001e9bb:	68 b8 2a 03 c0       	push   0xc0032ab8
c001e9c0:	e8 d1 1b 00 00       	call   c0020596 <KePanic(char const*)>
c001e9c5:	83 c4 10             	add    esp,0x10
c001e9c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e9cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e9d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e9d4:	83 c2 2a             	add    edx,0x2a
c001e9d7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e9db:	8b 02                	mov    eax,DWORD PTR [edx]
c001e9dd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e9e0:	89 01                	mov    DWORD PTR [ecx],eax
c001e9e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e9e5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e9ea:	66 90                	xchg   ax,ax
c001e9ec:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e9f1:	e9 3e ff ff ff       	jmp    c001e934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e9f6:	66 90                	xchg   ax,ax
c001e9f8:	90                   	nop
c001e9f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e9fd:	83 c4 2c             	add    esp,0x2c
c001ea00:	c2 04 00             	ret    0x4
c001ea03:	90                   	nop

c001ea04 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001ea04:	83 ec 1c             	sub    esp,0x1c
c001ea07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ea0b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ea0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ea13:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001ea18:	88 c8                	mov    al,cl
c001ea1a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ea1e:	88 d0                	mov    al,dl
c001ea20:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001ea24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea28:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001ea2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea32:	83 c2 2a             	add    edx,0x2a
c001ea35:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001ea39:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c001ea3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea41:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001ea47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea4b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001ea4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ea52:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c001ea57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea5b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001ea61:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ea65:	83 c0 01             	add    eax,0x1
c001ea68:	88 c1                	mov    cl,al
c001ea6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea6e:	83 c2 2a             	add    edx,0x2a
c001ea71:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001ea75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea79:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001ea7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea83:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001ea86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea8a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001ea8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea92:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001ea98:	8d 50 01             	lea    edx,[eax+0x1]
c001ea9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea9f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001eaa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaa9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001eaaf:	3d 00 02 00 00       	cmp    eax,0x200
c001eab4:	75 12                	jne    c001eac8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001eab6:	83 ec 0c             	sub    esp,0xc
c001eab9:	68 c7 2a 03 c0       	push   0xc0032ac7
c001eabe:	e8 d3 1a 00 00       	call   c0020596 <KePanic(char const*)>
c001eac3:	83 c4 10             	add    esp,0x10
c001eac6:	66 90                	xchg   ax,ax
c001eac8:	90                   	nop
c001eac9:	83 c4 1c             	add    esp,0x1c
c001eacc:	c3                   	ret    
c001eacd:	90                   	nop
c001eace:	66 90                	xchg   ax,ax

c001ead0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001ead0:	b8 00 00 00 00       	mov    eax,0x0
c001ead5:	c3                   	ret    
c001ead6:	66 90                	xchg   ax,ax

c001ead8 <ACPI::detectPCI()>:
c001ead8:	53                   	push   ebx
c001ead9:	83 ec 28             	sub    esp,0x28
c001eadc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001eae1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001eae6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eaeb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001eaf1:	83 e0 04             	and    eax,0x4
c001eaf4:	0f b6 c0             	movzx  eax,al
c001eaf7:	85 c0                	test   eax,eax
c001eaf9:	74 2d                	je     c001eb28 <ACPI::detectPCI()+0x50>
c001eafb:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001eb00:	83 ec 08             	sub    esp,0x8
c001eb03:	68 e4 2a 03 c0       	push   0xc0032ae4
c001eb08:	50                   	push   eax
c001eb09:	e8 6e f8 ff ff       	call   c001e37c <findDataTable(unsigned char*, char*)>
c001eb0e:	83 c4 10             	add    esp,0x10
c001eb11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eb15:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001eb1a:	74 0c                	je     c001eb28 <ACPI::detectPCI()+0x50>
c001eb1c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eb21:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001eb26:	66 90                	xchg   ax,ax
c001eb28:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001eb30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb34:	8a 00                	mov    al,BYTE PTR [eax]
c001eb36:	0f b6 c0             	movzx  eax,al
c001eb39:	83 f8 01             	cmp    eax,0x1
c001eb3c:	75 0e                	jne    c001eb4c <ACPI::detectPCI()+0x74>
c001eb3e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eb43:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001eb48:	eb 2e                	jmp    c001eb78 <ACPI::detectPCI()+0xa0>
c001eb4a:	66 90                	xchg   ax,ax
c001eb4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb50:	8a 00                	mov    al,BYTE PTR [eax]
c001eb52:	0f b6 c0             	movzx  eax,al
c001eb55:	83 f8 02             	cmp    eax,0x2
c001eb58:	75 1e                	jne    c001eb78 <ACPI::detectPCI()+0xa0>
c001eb5a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eb5f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eb64:	85 c0                	test   eax,eax
c001eb66:	74 10                	je     c001eb78 <ACPI::detectPCI()+0xa0>
c001eb68:	83 ec 0c             	sub    esp,0xc
c001eb6b:	68 70 2c 03 c0       	push   0xc0032c70
c001eb70:	e8 21 1a 00 00       	call   c0020596 <KePanic(char const*)>
c001eb75:	83 c4 10             	add    esp,0x10
c001eb78:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001eb7c:	83 f0 01             	xor    eax,0x1
c001eb7f:	0f b6 c0             	movzx  eax,al
c001eb82:	85 c0                	test   eax,eax
c001eb84:	74 46                	je     c001ebcc <ACPI::detectPCI()+0xf4>
c001eb86:	e8 a5 15 fe ff       	call   c0000130 <manualPCIProbe>
c001eb8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001eb8f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eb94:	75 0e                	jne    c001eba4 <ACPI::detectPCI()+0xcc>
c001eb96:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eb9b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001eba0:	eb 2a                	jmp    c001ebcc <ACPI::detectPCI()+0xf4>
c001eba2:	66 90                	xchg   ax,ax
c001eba4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001eba9:	75 21                	jne    c001ebcc <ACPI::detectPCI()+0xf4>
c001ebab:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ebb0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ebb5:	85 c0                	test   eax,eax
c001ebb7:	74 13                	je     c001ebcc <ACPI::detectPCI()+0xf4>
c001ebb9:	83 ec 0c             	sub    esp,0xc
c001ebbc:	68 70 2c 03 c0       	push   0xc0032c70
c001ebc1:	e8 d0 19 00 00       	call   c0020596 <KePanic(char const*)>
c001ebc6:	83 c4 10             	add    esp,0x10
c001ebc9:	8d 76 00             	lea    esi,[esi+0x0]
c001ebcc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001ebd1:	85 c0                	test   eax,eax
c001ebd3:	0f 84 87 00 00 00    	je     c001ec60 <ACPI::detectPCI()+0x188>
c001ebd9:	83 ec 0c             	sub    esp,0xc
c001ebdc:	68 e9 2a 03 c0       	push   0xc0032ae9
c001ebe1:	e8 4f 12 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001ebe6:	83 c4 10             	add    esp,0x10
c001ebe9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001ebf1:	83 ec 0c             	sub    esp,0xc
c001ebf4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ebf8:	e8 9f 7a ff ff       	call   c001669c <malloc>
c001ebfd:	83 c4 10             	add    esp,0x10
c001ec00:	89 c3                	mov    ebx,eax
c001ec02:	83 ec 0c             	sub    esp,0xc
c001ec05:	53                   	push   ebx
c001ec06:	e8 0f b9 00 00       	call   c002a51a <PCI::PCI()>
c001ec0b:	83 c4 10             	add    esp,0x10
c001ec0e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001ec12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec16:	83 ec 08             	sub    esp,0x8
c001ec19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ec1d:	50                   	push   eax
c001ec1e:	e8 81 ca ff ff       	call   c001b6a4 <Device::addChild(Device*)>
c001ec23:	83 c4 10             	add    esp,0x10
c001ec26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec2c:	83 c0 08             	add    eax,0x8
c001ec2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec31:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001ec36:	85 d2                	test   edx,edx
c001ec38:	74 0a                	je     c001ec44 <ACPI::detectPCI()+0x16c>
c001ec3a:	ba 01 00 00 00       	mov    edx,0x1
c001ec3f:	eb 0b                	jmp    c001ec4c <ACPI::detectPCI()+0x174>
c001ec41:	8d 76 00             	lea    esi,[esi+0x0]
c001ec44:	ba 02 00 00 00       	mov    edx,0x2
c001ec49:	8d 76 00             	lea    esi,[esi+0x0]
c001ec4c:	6a 00                	push   0x0
c001ec4e:	6a 00                	push   0x0
c001ec50:	52                   	push   edx
c001ec51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec55:	ff d0                	call   eax
c001ec57:	83 c4 10             	add    esp,0x10
c001ec5a:	e9 91 00 00 00       	jmp    c001ecf0 <ACPI::detectPCI()+0x218>
c001ec5f:	90                   	nop
c001ec60:	83 ec 0c             	sub    esp,0xc
c001ec63:	68 01 2b 03 c0       	push   0xc0032b01
c001ec68:	e8 c8 11 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001ec6d:	83 c4 10             	add    esp,0x10
c001ec70:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001ec77:	83 ec 0c             	sub    esp,0xc
c001ec7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ec7e:	e8 19 7a ff ff       	call   c001669c <malloc>
c001ec83:	83 c4 10             	add    esp,0x10
c001ec86:	89 c3                	mov    ebx,eax
c001ec88:	83 ec 0c             	sub    esp,0xc
c001ec8b:	53                   	push   ebx
c001ec8c:	e8 91 c4 00 00       	call   c002b122 <IDE::IDE()>
c001ec91:	83 c4 10             	add    esp,0x10
c001ec94:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ec98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec9c:	83 ec 08             	sub    esp,0x8
c001ec9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eca3:	50                   	push   eax
c001eca4:	e8 fb c9 ff ff       	call   c001b6a4 <Device::addChild(Device*)>
c001eca9:	83 c4 10             	add    esp,0x10
c001ecac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecb0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001ecba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecbe:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001ecc7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eccb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001ecd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecd8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecda:	83 c0 08             	add    eax,0x8
c001ecdd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecdf:	6a 00                	push   0x0
c001ece1:	6a 00                	push   0x0
c001ece3:	6a 00                	push   0x0
c001ece5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ece9:	ff d0                	call   eax
c001eceb:	83 c4 10             	add    esp,0x10
c001ecee:	66 90                	xchg   ax,ax
c001ecf0:	90                   	nop
c001ecf1:	83 c4 28             	add    esp,0x28
c001ecf4:	5b                   	pop    ebx
c001ecf5:	c3                   	ret    
c001ecf6:	66 90                	xchg   ax,ax

c001ecf8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001ecf8:	83 ec 1c             	sub    esp,0x1c
c001ecfb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ecff:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001ed02:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ed06:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ed0b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ed10:	83 ec 08             	sub    esp,0x8
c001ed13:	52                   	push   edx
c001ed14:	50                   	push   eax
c001ed15:	e8 cc 6f ff ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c001ed1a:	83 c4 10             	add    esp,0x10
c001ed1d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ed21:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ed26:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ed2b:	83 ec 04             	sub    esp,0x4
c001ed2e:	6a 01                	push   0x1
c001ed30:	52                   	push   edx
c001ed31:	50                   	push   eax
c001ed32:	e8 c7 70 ff ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	90                   	nop
c001ed3b:	83 c4 1c             	add    esp,0x1c
c001ed3e:	c3                   	ret    
c001ed3f:	90                   	nop

c001ed40 <ACPI::sleep()>:
c001ed40:	83 ec 0c             	sub    esp,0xc
c001ed43:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ed48:	85 c0                	test   eax,eax
c001ed4a:	74 08                	je     c001ed54 <ACPI::sleep()+0x14>
c001ed4c:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ed51:	ff d0                	call   eax
c001ed53:	90                   	nop
c001ed54:	90                   	nop
c001ed55:	83 c4 0c             	add    esp,0xc
c001ed58:	c3                   	ret    
c001ed59:	90                   	nop
c001ed5a:	66 90                	xchg   ax,ax

c001ed5c <ACPI::open(int, int, void*)>:
c001ed5c:	55                   	push   ebp
c001ed5d:	89 e5                	mov    ebp,esp
c001ed5f:	53                   	push   ebx
c001ed60:	81 ec 74 01 00 00    	sub    esp,0x174
c001ed66:	83 ec 0c             	sub    esp,0xc
c001ed69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed6c:	e8 67 fd ff ff       	call   c001ead8 <ACPI::detectPCI()>
c001ed71:	83 c4 10             	add    esp,0x10
c001ed74:	83 ec 0c             	sub    esp,0xc
c001ed77:	68 98 2c 03 c0       	push   0xc0032c98
c001ed7c:	e8 b4 10 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001ed81:	83 c4 10             	add    esp,0x10
c001ed84:	b8 4c 05 00 00       	mov    eax,0x54c
c001ed89:	8a 00                	mov    al,BYTE PTR [eax]
c001ed8b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c001ed8e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001ed92:	83 f8 01             	cmp    eax,0x1
c001ed95:	75 15                	jne    c001edac <ACPI::open(int, int, void*)+0x50>
c001ed97:	83 ec 0c             	sub    esp,0xc
c001ed9a:	68 16 2b 03 c0       	push   0xc0032b16
c001ed9f:	e8 36 53 00 00       	call   c00240da <Thr::loadKernelSymbolTable(char const*)>
c001eda4:	83 c4 10             	add    esp,0x10
c001eda7:	eb 33                	jmp    c001eddc <ACPI::open(int, int, void*)+0x80>
c001eda9:	8d 76 00             	lea    esi,[esi+0x0]
c001edac:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001edb0:	3d bb 00 00 00       	cmp    eax,0xbb
c001edb5:	75 15                	jne    c001edcc <ACPI::open(int, int, void*)+0x70>
c001edb7:	83 ec 0c             	sub    esp,0xc
c001edba:	68 34 2b 03 c0       	push   0xc0032b34
c001edbf:	e8 16 53 00 00       	call   c00240da <Thr::loadKernelSymbolTable(char const*)>
c001edc4:	83 c4 10             	add    esp,0x10
c001edc7:	eb 13                	jmp    c001eddc <ACPI::open(int, int, void*)+0x80>
c001edc9:	8d 76 00             	lea    esi,[esi+0x0]
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	68 52 2b 03 c0       	push   0xc0032b52
c001edd4:	e8 bd 17 00 00       	call   c0020596 <KePanic(char const*)>
c001edd9:	83 c4 10             	add    esp,0x10
c001eddc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ede0:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c001ede7:	83 ec 0c             	sub    esp,0xc
c001edea:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c001eded:	e8 aa 78 ff ff       	call   c001669c <malloc>
c001edf2:	83 c4 10             	add    esp,0x10
c001edf5:	89 c3                	mov    ebx,eax
c001edf7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001edfc:	83 ec 04             	sub    esp,0x4
c001edff:	50                   	push   eax
c001ee00:	68 6c 2b 03 c0       	push   0xc0032b6c
c001ee05:	53                   	push   ebx
c001ee06:	e8 df b8 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c001ee0b:	83 c4 10             	add    esp,0x10
c001ee0e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001ee11:	83 ec 08             	sub    esp,0x8
c001ee14:	6a 01                	push   0x1
c001ee16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ee19:	e8 ea b8 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c001ee1e:	83 c4 10             	add    esp,0x10
c001ee21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ee24:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c001ee28:	75 12                	jne    c001ee3c <ACPI::open(int, int, void*)+0xe0>
c001ee2a:	83 ec 0c             	sub    esp,0xc
c001ee2d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ee30:	e8 31 b9 ff ff       	call   c001a766 <File::close()>
c001ee35:	83 c4 10             	add    esp,0x10
c001ee38:	eb 06                	jmp    c001ee40 <ACPI::open(int, int, void*)+0xe4>
c001ee3a:	66 90                	xchg   ax,ax
c001ee3c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001ee40:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001ee44:	74 16                	je     c001ee5c <ACPI::open(int, int, void*)+0x100>
c001ee46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee49:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee4b:	83 c0 08             	add    eax,0x8
c001ee4e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee50:	83 ec 0c             	sub    esp,0xc
c001ee53:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ee56:	ff d0                	call   eax
c001ee58:	83 c4 10             	add    esp,0x10
c001ee5b:	90                   	nop
c001ee5c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ee5f:	83 f0 01             	xor    eax,0x1
c001ee62:	0f b6 c0             	movzx  eax,al
c001ee65:	85 c0                	test   eax,eax
c001ee67:	74 3b                	je     c001eea4 <ACPI::open(int, int, void*)+0x148>
c001ee69:	83 ec 0c             	sub    esp,0xc
c001ee6c:	68 8a 2b 03 c0       	push   0xc0032b8a
c001ee71:	e8 bf 0f 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001ee76:	83 c4 10             	add    esp,0x10
c001ee79:	83 ec 04             	sub    esp,0x4
c001ee7c:	6a 0c                	push   0xc
c001ee7e:	68 a5 2b 03 c0       	push   0xc0032ba5
c001ee83:	68 b6 2b 03 c0       	push   0xc0032bb6
c001ee88:	e8 90 44 00 00       	call   c002331d <Reg::readIntWithDefault(char*, char*, int)>
c001ee8d:	83 c4 10             	add    esp,0x10
c001ee90:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ee93:	83 ec 0c             	sub    esp,0xc
c001ee96:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001ee99:	e8 44 95 ff ff       	call   c00183e2 <Virt::setupPageSwapping(int)>
c001ee9e:	83 c4 10             	add    esp,0x10
c001eea1:	8d 76 00             	lea    esi,[esi+0x0]
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	68 c4 14 03 c0       	push   0xc00314c4
c001eeac:	e8 84 0f 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001eeb1:	83 c4 10             	add    esp,0x10
c001eeb4:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eeb7:	83 ec 08             	sub    esp,0x8
c001eeba:	6a 13                	push   0x13
c001eebc:	50                   	push   eax
c001eebd:	e8 10 cb ff ff       	call   c001b9d2 <getDevicesOfType(DeviceType)>
c001eec2:	83 c4 0c             	add    esp,0xc
c001eec5:	8d 76 00             	lea    esi,[esi+0x0]
c001eec8:	83 ec 0c             	sub    esp,0xc
c001eecb:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eece:	50                   	push   eax
c001eecf:	e8 8c 04 01 00       	call   c002f360 <LinkedList<Device>::isEmpty()>
c001eed4:	83 c4 10             	add    esp,0x10
c001eed7:	83 f0 01             	xor    eax,0x1
c001eeda:	0f b6 c0             	movzx  eax,al
c001eedd:	85 c0                	test   eax,eax
c001eedf:	0f 84 1f 01 00 00    	je     c001f004 <ACPI::open(int, int, void*)+0x2a8>
c001eee5:	83 ec 0c             	sub    esp,0xc
c001eee8:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eeeb:	50                   	push   eax
c001eeec:	e8 8b 04 01 00       	call   c002f37c <LinkedList<Device>::getFirstElement()>
c001eef1:	83 c4 10             	add    esp,0x10
c001eef4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eef7:	83 ec 0c             	sub    esp,0xc
c001eefa:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eefd:	50                   	push   eax
c001eefe:	e8 81 04 01 00       	call   c002f384 <LinkedList<Device>::removeFirst()>
c001ef03:	83 c4 10             	add    esp,0x10
c001ef06:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001ef09:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001ef0c:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c001ef0f:	b8 24 00 00 00       	mov    eax,0x24
c001ef14:	83 e0 fc             	and    eax,0xfffffffc
c001ef17:	89 c3                	mov    ebx,eax
c001ef19:	b8 00 00 00 00       	mov    eax,0x0
c001ef1e:	66 90                	xchg   ax,ax
c001ef20:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c001ef27:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001ef2e:	83 c0 04             	add    eax,0x4
c001ef31:	39 d8                	cmp    eax,ebx
c001ef33:	72 eb                	jb     c001ef20 <ACPI::open(int, int, void*)+0x1c4>
c001ef35:	83 ec 08             	sub    esp,0x8
c001ef38:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001ef3e:	50                   	push   eax
c001ef3f:	83 ec 24             	sub    esp,0x24
c001ef42:	89 e1                	mov    ecx,esp
c001ef44:	b8 24 00 00 00       	mov    eax,0x24
c001ef49:	83 e0 fc             	and    eax,0xfffffffc
c001ef4c:	89 c3                	mov    ebx,eax
c001ef4e:	b8 00 00 00 00       	mov    eax,0x0
c001ef53:	90                   	nop
c001ef54:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001ef5b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001ef5e:	83 c0 04             	add    eax,0x4
c001ef61:	39 d8                	cmp    eax,ebx
c001ef63:	72 ef                	jb     c001ef54 <ACPI::open(int, int, void*)+0x1f8>
c001ef65:	e8 98 ba 00 00       	call   c002aa02 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ef6a:	83 c4 30             	add    esp,0x30
c001ef6d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ef70:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001ef74:	0f 84 4e ff ff ff    	je     c001eec8 <ACPI::open(int, int, void*)+0x16c>
c001ef7a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001ef81:	83 ec 0c             	sub    esp,0xc
c001ef84:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001ef87:	e8 10 77 ff ff       	call   c001669c <malloc>
c001ef8c:	83 c4 10             	add    esp,0x10
c001ef8f:	89 c3                	mov    ebx,eax
c001ef91:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ef96:	83 ec 04             	sub    esp,0x4
c001ef99:	50                   	push   eax
c001ef9a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ef9d:	53                   	push   ebx
c001ef9e:	e8 47 b7 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c001efa3:	83 c4 10             	add    esp,0x10
c001efa6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001efa9:	83 ec 0c             	sub    esp,0xc
c001efac:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001efaf:	e8 18 ba ff ff       	call   c001a9cc <File::exists()>
c001efb4:	83 c4 10             	add    esp,0x10
c001efb7:	0f b6 c0             	movzx  eax,al
c001efba:	85 c0                	test   eax,eax
c001efbc:	74 22                	je     c001efe0 <ACPI::open(int, int, void*)+0x284>
c001efbe:	83 ec 08             	sub    esp,0x8
c001efc1:	6a 01                	push   0x1
c001efc3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001efc6:	e8 91 5b 00 00       	call   c0024b5c <Thr::loadDLL(char const*, bool)>
c001efcb:	83 c4 10             	add    esp,0x10
c001efce:	83 ec 08             	sub    esp,0x8
c001efd1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001efd4:	50                   	push   eax
c001efd5:	e8 e3 5d 00 00       	call   c0024dbd <Thr::executeDLL(unsigned long, void*)>
c001efda:	83 c4 10             	add    esp,0x10
c001efdd:	8d 76 00             	lea    esi,[esi+0x0]
c001efe0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c001efe4:	0f 84 de fe ff ff    	je     c001eec8 <ACPI::open(int, int, void*)+0x16c>
c001efea:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001efed:	8b 00                	mov    eax,DWORD PTR [eax]
c001efef:	83 c0 08             	add    eax,0x8
c001eff2:	8b 00                	mov    eax,DWORD PTR [eax]
c001eff4:	83 ec 0c             	sub    esp,0xc
c001eff7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001effa:	ff d0                	call   eax
c001effc:	83 c4 10             	add    esp,0x10
c001efff:	e9 c4 fe ff ff       	jmp    c001eec8 <ACPI::open(int, int, void*)+0x16c>
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	8d 45 b8             	lea    eax,[ebp-0x48]
c001f00a:	50                   	push   eax
c001f00b:	e8 4c 03 01 00       	call   c002f35c <LinkedList<Device>::~LinkedList()>
c001f010:	83 c4 10             	add    esp,0x10
c001f013:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001f019:	83 ec 08             	sub    esp,0x8
c001f01c:	6a 01                	push   0x1
c001f01e:	68 bd 2b 03 c0       	push   0xc0032bbd
c001f023:	e8 34 5b 00 00       	call   c0024b5c <Thr::loadDLL(char const*, bool)>
c001f028:	83 c4 10             	add    esp,0x10
c001f02b:	83 ec 08             	sub    esp,0x8
c001f02e:	53                   	push   ebx
c001f02f:	50                   	push   eax
c001f030:	e8 88 5d 00 00       	call   c0024dbd <Thr::executeDLL(unsigned long, void*)>
c001f035:	83 c4 10             	add    esp,0x10
c001f038:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f03d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001f043:	83 e0 04             	and    eax,0x4
c001f046:	0f b6 c0             	movzx  eax,al
c001f049:	85 c0                	test   eax,eax
c001f04b:	0f 84 e3 00 00 00    	je     c001f134 <ACPI::open(int, int, void*)+0x3d8>
c001f051:	83 ec 0c             	sub    esp,0xc
c001f054:	68 da 2b 03 c0       	push   0xc0032bda
c001f059:	e8 d7 0d 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001f05e:	83 c4 10             	add    esp,0x10
c001f061:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001f068:	83 ec 0c             	sub    esp,0xc
c001f06b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001f06e:	e8 29 76 ff ff       	call   c001669c <malloc>
c001f073:	83 c4 10             	add    esp,0x10
c001f076:	89 c3                	mov    ebx,eax
c001f078:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001f07d:	83 ec 04             	sub    esp,0x4
c001f080:	50                   	push   eax
c001f081:	68 f7 2b 03 c0       	push   0xc0032bf7
c001f086:	53                   	push   ebx
c001f087:	e8 5e b6 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c001f08c:	83 c4 10             	add    esp,0x10
c001f08f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001f092:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001f096:	74 1c                	je     c001f0b4 <ACPI::open(int, int, void*)+0x358>
c001f098:	83 ec 0c             	sub    esp,0xc
c001f09b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001f09e:	e8 29 b9 ff ff       	call   c001a9cc <File::exists()>
c001f0a3:	83 c4 10             	add    esp,0x10
c001f0a6:	0f b6 c0             	movzx  eax,al
c001f0a9:	85 c0                	test   eax,eax
c001f0ab:	74 07                	je     c001f0b4 <ACPI::open(int, int, void*)+0x358>
c001f0ad:	b0 01                	mov    al,0x1
c001f0af:	eb 07                	jmp    c001f0b8 <ACPI::open(int, int, void*)+0x35c>
c001f0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0b4:	b0 00                	mov    al,0x0
c001f0b6:	66 90                	xchg   ax,ax
c001f0b8:	0f b6 c0             	movzx  eax,al
c001f0bb:	85 c0                	test   eax,eax
c001f0bd:	74 21                	je     c001f0e0 <ACPI::open(int, int, void*)+0x384>
c001f0bf:	83 ec 08             	sub    esp,0x8
c001f0c2:	6a 01                	push   0x1
c001f0c4:	68 f7 2b 03 c0       	push   0xc0032bf7
c001f0c9:	e8 8e 5a 00 00       	call   c0024b5c <Thr::loadDLL(char const*, bool)>
c001f0ce:	83 c4 10             	add    esp,0x10
c001f0d1:	83 ec 08             	sub    esp,0x8
c001f0d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0d7:	50                   	push   eax
c001f0d8:	e8 e0 5c 00 00       	call   c0024dbd <Thr::executeDLL(unsigned long, void*)>
c001f0dd:	83 c4 10             	add    esp,0x10
c001f0e0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001f0e4:	74 1e                	je     c001f104 <ACPI::open(int, int, void*)+0x3a8>
c001f0e6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001f0ea:	74 18                	je     c001f104 <ACPI::open(int, int, void*)+0x3a8>
c001f0ec:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001f0ef:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0f1:	83 c0 08             	add    eax,0x8
c001f0f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0f6:	83 ec 0c             	sub    esp,0xc
c001f0f9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001f0fc:	ff d0                	call   eax
c001f0fe:	83 c4 10             	add    esp,0x10
c001f101:	8d 76 00             	lea    esi,[esi+0x0]
c001f104:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001f109:	83 ec 08             	sub    esp,0x8
c001f10c:	68 14 2c 03 c0       	push   0xc0032c14
c001f111:	50                   	push   eax
c001f112:	e8 65 f2 ff ff       	call   c001e37c <findDataTable(unsigned char*, char*)>
c001f117:	83 c4 10             	add    esp,0x10
c001f11a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001f11d:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001f121:	74 11                	je     c001f134 <ACPI::open(int, int, void*)+0x3d8>
c001f123:	83 ec 08             	sub    esp,0x8
c001f126:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f129:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f12c:	e8 c7 fb ff ff       	call   c001ecf8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001f131:	83 c4 10             	add    esp,0x10
c001f134:	b8 00 00 00 00       	mov    eax,0x0
c001f139:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f13c:	c9                   	leave  
c001f13d:	c3                   	ret    

c001f13e <CPU::close(int, int, void*)>:
c001f13e:	31 c0                	xor    eax,eax
c001f140:	c3                   	ret    
c001f141:	90                   	nop

c001f142 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001f142:	60                   	pusha  
c001f143:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f147:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f14b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f14f:	9c                   	pushf  
c001f150:	fa                   	cli    
c001f151:	0f 09                	wbinvd 
c001f153:	0f 30                	wrmsr  
c001f155:	9d                   	popf   
c001f156:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f15a:	89 02                	mov    DWORD PTR [edx],eax
c001f15c:	61                   	popa   
c001f15d:	c3                   	ret    

c001f15e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001f15e:	60                   	pusha  
c001f15f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f163:	9c                   	pushf  
c001f164:	fa                   	cli    
c001f165:	0f 09                	wbinvd 
c001f167:	31 c0                	xor    eax,eax
c001f169:	31 d2                	xor    edx,edx
c001f16b:	0f 32                	rdmsr  
c001f16d:	9d                   	popf   
c001f16e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f172:	89 02                	mov    DWORD PTR [edx],eax
c001f174:	61                   	popa   
c001f175:	c3                   	ret    

c001f176 <CPU::AMD_K6_writeback(int, int, int)>:
c001f176:	56                   	push   esi
c001f177:	53                   	push   ebx
c001f178:	83 ec 10             	sub    esp,0x10
c001f17b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001f180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f184:	75 5d                	jne    c001f1e3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f186:	83 f8 08             	cmp    eax,0x8
c001f189:	75 09                	jne    c001f194 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001f18b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001f190:	7e 13                	jle    c001f1a5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f192:	eb 30                	jmp    c001f1c4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f194:	83 f8 06             	cmp    eax,0x6
c001f197:	7c 4a                	jl     c001f1e3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f199:	83 f8 07             	cmp    eax,0x7
c001f19c:	7e 07                	jle    c001f1a5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f19e:	83 f8 09             	cmp    eax,0x9
c001f1a1:	74 21                	je     c001f1c4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f1a3:	eb 3e                	jmp    c001f1e3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f1a5:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001f1ab:	89 e6                	mov    esi,esp
c001f1ad:	56                   	push   esi
c001f1ae:	68 82 00 00 c0       	push   0xc0000082
c001f1b3:	e8 a6 ff ff ff       	call   c001f15e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f1b8:	c1 eb 15             	shr    ebx,0x15
c001f1bb:	56                   	push   esi
c001f1bc:	83 e3 7e             	and    ebx,0x7e
c001f1bf:	6a 00                	push   0x0
c001f1c1:	53                   	push   ebx
c001f1c2:	eb 12                	jmp    c001f1d6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001f1c4:	89 e3                	mov    ebx,esp
c001f1c6:	53                   	push   ebx
c001f1c7:	68 82 00 00 c0       	push   0xc0000082
c001f1cc:	e8 8d ff ff ff       	call   c001f15e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f1d1:	53                   	push   ebx
c001f1d2:	6a 00                	push   0x0
c001f1d4:	6a 00                	push   0x0
c001f1d6:	68 82 00 00 c0       	push   0xc0000082
c001f1db:	e8 62 ff ff ff       	call   c001f142 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001f1e0:	83 c4 18             	add    esp,0x18
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	5b                   	pop    ebx
c001f1e7:	5e                   	pop    esi
c001f1e8:	c3                   	ret    
c001f1e9:	90                   	nop

c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001f1ea:	55                   	push   ebp
c001f1eb:	57                   	push   edi
c001f1ec:	56                   	push   esi
c001f1ed:	53                   	push   ebx
c001f1ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1f2:	39 05 58 43 03 c0    	cmp    DWORD PTR ds:0xc0034358,eax
c001f1f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f1fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f200:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f204:	75 23                	jne    c001f229 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001f206:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001f20b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f20f:	89 06                	mov    DWORD PTR [esi],eax
c001f211:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001f216:	89 07                	mov    DWORD PTR [edi],eax
c001f218:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001f21d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001f220:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001f225:	89 02                	mov    DWORD PTR [edx],eax
c001f227:	eb 3f                	jmp    c001f268 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001f229:	31 c9                	xor    ecx,ecx
c001f22b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f22f:	0f a2                	cpuid  
c001f231:	89 06                	mov    DWORD PTR [esi],eax
c001f233:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f237:	89 1f                	mov    DWORD PTR [edi],ebx
c001f239:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001f23c:	89 10                	mov    DWORD PTR [eax],edx
c001f23e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f242:	a3 58 43 03 c0       	mov    ds:0xc0034358,eax
c001f247:	8b 06                	mov    eax,DWORD PTR [esi]
c001f249:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001f24e:	8b 07                	mov    eax,DWORD PTR [edi]
c001f250:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001f255:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f258:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001f25d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f261:	8b 00                	mov    eax,DWORD PTR [eax]
c001f263:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001f268:	5b                   	pop    ebx
c001f269:	5e                   	pop    esi
c001f26a:	5f                   	pop    edi
c001f26b:	5d                   	pop    ebp
c001f26c:	c3                   	ret    
c001f26d:	90                   	nop

c001f26e <CPU::cpuidCheckEDX(unsigned int)>:
c001f26e:	83 ec 10             	sub    esp,0x10
c001f271:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f275:	50                   	push   eax
c001f276:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f27a:	50                   	push   eax
c001f27b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f27f:	50                   	push   eax
c001f280:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f284:	50                   	push   eax
c001f285:	6a 01                	push   0x1
c001f287:	e8 5e ff ff ff       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f28c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f290:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001f294:	0f 95 c0             	setne  al
c001f297:	83 c4 24             	add    esp,0x24
c001f29a:	c3                   	ret    
c001f29b:	90                   	nop

c001f29c <CPU::cpuidCheckECX(unsigned int)>:
c001f29c:	83 ec 10             	sub    esp,0x10
c001f29f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2a3:	50                   	push   eax
c001f2a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2a8:	50                   	push   eax
c001f2a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2ad:	50                   	push   eax
c001f2ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2b2:	50                   	push   eax
c001f2b3:	6a 01                	push   0x1
c001f2b5:	e8 30 ff ff ff       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f2ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f2be:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f2c2:	0f 95 c0             	setne  al
c001f2c5:	83 c4 24             	add    esp,0x24
c001f2c8:	c3                   	ret    
c001f2c9:	90                   	nop

c001f2ca <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001f2ca:	83 ec 10             	sub    esp,0x10
c001f2cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2d1:	50                   	push   eax
c001f2d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2d6:	50                   	push   eax
c001f2d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2db:	50                   	push   eax
c001f2dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2e0:	50                   	push   eax
c001f2e1:	6a 07                	push   0x7
c001f2e3:	e8 02 ff ff ff       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f2e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f2ec:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001f2f0:	0f 95 c0             	setne  al
c001f2f3:	83 c4 24             	add    esp,0x24
c001f2f6:	c3                   	ret    
c001f2f7:	90                   	nop

c001f2f8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001f2f8:	83 ec 10             	sub    esp,0x10
c001f2fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2ff:	50                   	push   eax
c001f300:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f304:	50                   	push   eax
c001f305:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f309:	50                   	push   eax
c001f30a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f30e:	50                   	push   eax
c001f30f:	6a 07                	push   0x7
c001f311:	e8 d4 fe ff ff       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f316:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f31a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f31e:	0f 95 c0             	setne  al
c001f321:	83 c4 24             	add    esp,0x24
c001f324:	c3                   	ret    
c001f325:	90                   	nop

c001f326 <CPU::CPU()>:
c001f326:	83 ec 0c             	sub    esp,0xc
c001f329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32d:	83 ec 08             	sub    esp,0x8
c001f330:	68 d5 2d 03 c0       	push   0xc0032dd5
c001f335:	50                   	push   eax
c001f336:	e8 cb c4 ff ff       	call   c001b806 <Device::Device(char const*)>
c001f33b:	83 c4 10             	add    esp,0x10
c001f33e:	ba 68 2e 03 c0       	mov    edx,0xc0032e68
c001f343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f347:	89 10                	mov    DWORD PTR [eax],edx
c001f349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f34d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35b:	05 78 01 00 00       	add    eax,0x178
c001f360:	83 ec 0c             	sub    esp,0xc
c001f363:	50                   	push   eax
c001f364:	e8 5f 6b ff ff       	call   c0015ec8 <GDT::GDT()>
c001f369:	83 c4 10             	add    esp,0x10
c001f36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f370:	05 7c 09 00 00       	add    eax,0x97c
c001f375:	83 ec 0c             	sub    esp,0xc
c001f378:	50                   	push   eax
c001f379:	e8 9a 6d ff ff       	call   c0016118 <IDT::IDT()>
c001f37e:	83 c4 10             	add    esp,0x10
c001f381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f385:	05 7c 11 00 00       	add    eax,0x117c
c001f38a:	83 ec 0c             	sub    esp,0xc
c001f38d:	50                   	push   eax
c001f38e:	e8 61 87 ff ff       	call   c0017af4 <TSS::TSS()>
c001f393:	83 c4 10             	add    esp,0x10
c001f396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f39a:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a5:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f3af:	90                   	nop
c001f3b0:	83 c4 0c             	add    esp,0xc
c001f3b3:	c3                   	ret    

c001f3b4 <CPU::displayFeatures()>:
c001f3b4:	c3                   	ret    
c001f3b5:	90                   	nop

c001f3b6 <CPU::detectFeatures()>:
c001f3b6:	55                   	push   ebp
c001f3b7:	57                   	push   edi
c001f3b8:	56                   	push   esi
c001f3b9:	53                   	push   ebx
c001f3ba:	83 ec 30             	sub    esp,0x30
c001f3bd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f3c1:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f3cb:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f3d1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f3d8:	6a 0d                	push   0xd
c001f3da:	6a 00                	push   0x0
c001f3dc:	55                   	push   ebp
c001f3dd:	e8 0e 11 fe ff       	call   c00004f0 <memset>
c001f3e2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f3e7:	83 c4 10             	add    esp,0x10
c001f3ea:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f3f1:	0f 84 db 05 00 00    	je     c001f9d2 <CPU::detectFeatures()+0x61c>
c001f3f7:	83 ec 0c             	sub    esp,0xc
c001f3fa:	89 ef                	mov    edi,ebp
c001f3fc:	6a 10                	push   0x10
c001f3fe:	e8 6b fe ff ff       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c001f403:	83 e0 01             	and    eax,0x1
c001f406:	8d 14 00             	lea    edx,[eax+eax*1]
c001f409:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f40f:	83 e0 fd             	and    eax,0xfffffffd
c001f412:	09 d0                	or     eax,edx
c001f414:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f41a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f421:	e8 48 fe ff ff       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c001f426:	83 e0 01             	and    eax,0x1
c001f429:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f430:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f436:	83 e0 fb             	and    eax,0xfffffffb
c001f439:	09 d0                	or     eax,edx
c001f43b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f441:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f448:	e8 21 fe ff ff       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c001f44d:	83 e0 01             	and    eax,0x1
c001f450:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f457:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f45d:	83 e0 f7             	and    eax,0xfffffff7
c001f460:	09 d0                	or     eax,edx
c001f462:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f468:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f46f:	e8 fa fd ff ff       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c001f474:	83 e0 01             	and    eax,0x1
c001f477:	c1 e0 04             	shl    eax,0x4
c001f47a:	89 c2                	mov    edx,eax
c001f47c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f482:	83 e0 ef             	and    eax,0xffffffef
c001f485:	09 d0                	or     eax,edx
c001f487:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f48d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f494:	e8 d5 fd ff ff       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c001f499:	83 e0 01             	and    eax,0x1
c001f49c:	c1 e0 05             	shl    eax,0x5
c001f49f:	89 c2                	mov    edx,eax
c001f4a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f4a7:	83 e0 df             	and    eax,0xffffffdf
c001f4aa:	09 d0                	or     eax,edx
c001f4ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f4b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f4b9:	e8 b0 fd ff ff       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c001f4be:	83 e0 01             	and    eax,0x1
c001f4c1:	8d 14 00             	lea    edx,[eax+eax*1]
c001f4c4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f4ca:	83 e0 fd             	and    eax,0xfffffffd
c001f4cd:	09 d0                	or     eax,edx
c001f4cf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f4d5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f4dc:	e8 8d fd ff ff       	call   c001f26e <CPU::cpuidCheckEDX(unsigned int)>
c001f4e1:	83 e0 01             	and    eax,0x1
c001f4e4:	c1 e0 06             	shl    eax,0x6
c001f4e7:	89 c2                	mov    edx,eax
c001f4e9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4ef:	83 e0 bf             	and    eax,0xffffffbf
c001f4f2:	09 d0                	or     eax,edx
c001f4f4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4fa:	58                   	pop    eax
c001f4fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f4ff:	50                   	push   eax
c001f500:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f504:	50                   	push   eax
c001f505:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f509:	56                   	push   esi
c001f50a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f50e:	50                   	push   eax
c001f50f:	6a 00                	push   0x0
c001f511:	e8 d4 fc ff ff       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f516:	b8 04 00 00 00       	mov    eax,0x4
c001f51b:	89 c1                	mov    ecx,eax
c001f51d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f51f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f525:	89 c1                	mov    ecx,eax
c001f527:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f52b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f52d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f533:	89 c1                	mov    ecx,eax
c001f535:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f539:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f53b:	83 c4 18             	add    esp,0x18
c001f53e:	68 e4 2c 03 c0       	push   0xc0032ce4
c001f543:	55                   	push   ebp
c001f544:	e8 37 12 fe ff       	call   c0000780 <strcmp>
c001f549:	83 c4 10             	add    esp,0x10
c001f54c:	85 c0                	test   eax,eax
c001f54e:	75 0f                	jne    c001f55f <CPU::detectFeatures()+0x1a9>
c001f550:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f55a:	e9 22 02 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f55f:	50                   	push   eax
c001f560:	50                   	push   eax
c001f561:	68 f1 2c 03 c0       	push   0xc0032cf1
c001f566:	55                   	push   ebp
c001f567:	e8 14 12 fe ff       	call   c0000780 <strcmp>
c001f56c:	83 c4 10             	add    esp,0x10
c001f56f:	85 c0                	test   eax,eax
c001f571:	74 dd                	je     c001f550 <CPU::detectFeatures()+0x19a>
c001f573:	50                   	push   eax
c001f574:	50                   	push   eax
c001f575:	68 fe 2c 03 c0       	push   0xc0032cfe
c001f57a:	55                   	push   ebp
c001f57b:	e8 00 12 fe ff       	call   c0000780 <strcmp>
c001f580:	83 c4 10             	add    esp,0x10
c001f583:	85 c0                	test   eax,eax
c001f585:	74 2a                	je     c001f5b1 <CPU::detectFeatures()+0x1fb>
c001f587:	50                   	push   eax
c001f588:	50                   	push   eax
c001f589:	68 0b 2d 03 c0       	push   0xc0032d0b
c001f58e:	55                   	push   ebp
c001f58f:	e8 ec 11 fe ff       	call   c0000780 <strcmp>
c001f594:	83 c4 10             	add    esp,0x10
c001f597:	85 c0                	test   eax,eax
c001f599:	74 16                	je     c001f5b1 <CPU::detectFeatures()+0x1fb>
c001f59b:	50                   	push   eax
c001f59c:	50                   	push   eax
c001f59d:	68 18 2d 03 c0       	push   0xc0032d18
c001f5a2:	55                   	push   ebp
c001f5a3:	e8 d8 11 fe ff       	call   c0000780 <strcmp>
c001f5a8:	83 c4 10             	add    esp,0x10
c001f5ab:	85 c0                	test   eax,eax
c001f5ad:	74 48                	je     c001f5f7 <CPU::detectFeatures()+0x241>
c001f5af:	eb 0f                	jmp    c001f5c0 <CPU::detectFeatures()+0x20a>
c001f5b1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f5bb:	e9 c1 01 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f5c0:	50                   	push   eax
c001f5c1:	50                   	push   eax
c001f5c2:	68 25 2d 03 c0       	push   0xc0032d25
c001f5c7:	55                   	push   ebp
c001f5c8:	e8 b3 11 fe ff       	call   c0000780 <strcmp>
c001f5cd:	83 c4 10             	add    esp,0x10
c001f5d0:	85 c0                	test   eax,eax
c001f5d2:	74 23                	je     c001f5f7 <CPU::detectFeatures()+0x241>
c001f5d4:	57                   	push   edi
c001f5d5:	57                   	push   edi
c001f5d6:	68 32 2d 03 c0       	push   0xc0032d32
c001f5db:	55                   	push   ebp
c001f5dc:	e8 9f 11 fe ff       	call   c0000780 <strcmp>
c001f5e1:	83 c4 10             	add    esp,0x10
c001f5e4:	85 c0                	test   eax,eax
c001f5e6:	75 1e                	jne    c001f606 <CPU::detectFeatures()+0x250>
c001f5e8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f5f2:	e9 8a 01 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f5f7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f601:	e9 7b 01 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f606:	56                   	push   esi
c001f607:	56                   	push   esi
c001f608:	68 3f 2d 03 c0       	push   0xc0032d3f
c001f60d:	55                   	push   ebp
c001f60e:	e8 6d 11 fe ff       	call   c0000780 <strcmp>
c001f613:	83 c4 10             	add    esp,0x10
c001f616:	85 c0                	test   eax,eax
c001f618:	75 0f                	jne    c001f629 <CPU::detectFeatures()+0x273>
c001f61a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f624:	e9 58 01 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f629:	51                   	push   ecx
c001f62a:	51                   	push   ecx
c001f62b:	68 fe 2c 03 c0       	push   0xc0032cfe
c001f630:	55                   	push   ebp
c001f631:	e8 4a 11 fe ff       	call   c0000780 <strcmp>
c001f636:	83 c4 10             	add    esp,0x10
c001f639:	85 c0                	test   eax,eax
c001f63b:	75 0f                	jne    c001f64c <CPU::detectFeatures()+0x296>
c001f63d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f647:	e9 35 01 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f64c:	52                   	push   edx
c001f64d:	52                   	push   edx
c001f64e:	68 4c 2d 03 c0       	push   0xc0032d4c
c001f653:	55                   	push   ebp
c001f654:	e8 27 11 fe ff       	call   c0000780 <strcmp>
c001f659:	83 c4 10             	add    esp,0x10
c001f65c:	85 c0                	test   eax,eax
c001f65e:	75 0f                	jne    c001f66f <CPU::detectFeatures()+0x2b9>
c001f660:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f66a:	e9 12 01 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f66f:	50                   	push   eax
c001f670:	50                   	push   eax
c001f671:	68 59 2d 03 c0       	push   0xc0032d59
c001f676:	55                   	push   ebp
c001f677:	e8 04 11 fe ff       	call   c0000780 <strcmp>
c001f67c:	83 c4 10             	add    esp,0x10
c001f67f:	85 c0                	test   eax,eax
c001f681:	75 0f                	jne    c001f692 <CPU::detectFeatures()+0x2dc>
c001f683:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f68d:	e9 ef 00 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f692:	50                   	push   eax
c001f693:	50                   	push   eax
c001f694:	68 66 2d 03 c0       	push   0xc0032d66
c001f699:	55                   	push   ebp
c001f69a:	e8 e1 10 fe ff       	call   c0000780 <strcmp>
c001f69f:	83 c4 10             	add    esp,0x10
c001f6a2:	85 c0                	test   eax,eax
c001f6a4:	75 0f                	jne    c001f6b5 <CPU::detectFeatures()+0x2ff>
c001f6a6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f6b0:	e9 cc 00 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f6b5:	50                   	push   eax
c001f6b6:	50                   	push   eax
c001f6b7:	68 73 2d 03 c0       	push   0xc0032d73
c001f6bc:	55                   	push   ebp
c001f6bd:	e8 be 10 fe ff       	call   c0000780 <strcmp>
c001f6c2:	83 c4 10             	add    esp,0x10
c001f6c5:	85 c0                	test   eax,eax
c001f6c7:	75 0f                	jne    c001f6d8 <CPU::detectFeatures()+0x322>
c001f6c9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f6d3:	e9 a9 00 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f6d8:	50                   	push   eax
c001f6d9:	50                   	push   eax
c001f6da:	68 80 2d 03 c0       	push   0xc0032d80
c001f6df:	55                   	push   ebp
c001f6e0:	e8 9b 10 fe ff       	call   c0000780 <strcmp>
c001f6e5:	83 c4 10             	add    esp,0x10
c001f6e8:	85 c0                	test   eax,eax
c001f6ea:	75 0f                	jne    c001f6fb <CPU::detectFeatures()+0x345>
c001f6ec:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f6f6:	e9 86 00 00 00       	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f6fb:	50                   	push   eax
c001f6fc:	50                   	push   eax
c001f6fd:	68 8d 2d 03 c0       	push   0xc0032d8d
c001f702:	55                   	push   ebp
c001f703:	e8 78 10 fe ff       	call   c0000780 <strcmp>
c001f708:	83 c4 10             	add    esp,0x10
c001f70b:	85 c0                	test   eax,eax
c001f70d:	75 0c                	jne    c001f71b <CPU::detectFeatures()+0x365>
c001f70f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f719:	eb 66                	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f71b:	50                   	push   eax
c001f71c:	50                   	push   eax
c001f71d:	68 9a 2d 03 c0       	push   0xc0032d9a
c001f722:	55                   	push   ebp
c001f723:	e8 58 10 fe ff       	call   c0000780 <strcmp>
c001f728:	83 c4 10             	add    esp,0x10
c001f72b:	85 c0                	test   eax,eax
c001f72d:	75 0c                	jne    c001f73b <CPU::detectFeatures()+0x385>
c001f72f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f739:	eb 46                	jmp    c001f781 <CPU::detectFeatures()+0x3cb>
c001f73b:	57                   	push   edi
c001f73c:	57                   	push   edi
c001f73d:	68 a7 2d 03 c0       	push   0xc0032da7
c001f742:	55                   	push   ebp
c001f743:	e8 38 10 fe ff       	call   c0000780 <strcmp>
c001f748:	83 c4 10             	add    esp,0x10
c001f74b:	85 c0                	test   eax,eax
c001f74d:	74 e0                	je     c001f72f <CPU::detectFeatures()+0x379>
c001f74f:	56                   	push   esi
c001f750:	56                   	push   esi
c001f751:	68 b4 2d 03 c0       	push   0xc0032db4
c001f756:	55                   	push   ebp
c001f757:	e8 24 10 fe ff       	call   c0000780 <strcmp>
c001f75c:	83 c4 10             	add    esp,0x10
c001f75f:	85 c0                	test   eax,eax
c001f761:	74 cc                	je     c001f72f <CPU::detectFeatures()+0x379>
c001f763:	51                   	push   ecx
c001f764:	51                   	push   ecx
c001f765:	68 c1 2d 03 c0       	push   0xc0032dc1
c001f76a:	55                   	push   ebp
c001f76b:	e8 10 10 fe ff       	call   c0000780 <strcmp>
c001f770:	83 c4 10             	add    esp,0x10
c001f773:	85 c0                	test   eax,eax
c001f775:	74 b8                	je     c001f72f <CPU::detectFeatures()+0x379>
c001f777:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f781:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f786:	0f 86 be 00 00 00    	jbe    c001f84a <CPU::detectFeatures()+0x494>
c001f78c:	83 ec 0c             	sub    esp,0xc
c001f78f:	68 80 00 00 00       	push   0x80
c001f794:	e8 31 fb ff ff       	call   c001f2ca <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f799:	83 e0 01             	and    eax,0x1
c001f79c:	c1 e0 06             	shl    eax,0x6
c001f79f:	89 c2                	mov    edx,eax
c001f7a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f7a7:	83 e0 bf             	and    eax,0xffffffbf
c001f7aa:	09 d0                	or     eax,edx
c001f7ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f7b2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f7b9:	e8 0c fb ff ff       	call   c001f2ca <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f7be:	83 e0 01             	and    eax,0x1
c001f7c1:	c1 e0 04             	shl    eax,0x4
c001f7c4:	89 c2                	mov    edx,eax
c001f7c6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f7cc:	83 e0 ef             	and    eax,0xffffffef
c001f7cf:	09 d0                	or     eax,edx
c001f7d1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f7d7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f7de:	e8 e7 fa ff ff       	call   c001f2ca <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f7e3:	89 c2                	mov    edx,eax
c001f7e5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f7eb:	c1 e2 07             	shl    edx,0x7
c001f7ee:	83 e0 7f             	and    eax,0x7f
c001f7f1:	09 d0                	or     eax,edx
c001f7f3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f7f9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f800:	e8 f3 fa ff ff       	call   c001f2f8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f805:	83 e0 01             	and    eax,0x1
c001f808:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f80f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f815:	83 e0 f7             	and    eax,0xfffffff7
c001f818:	09 d0                	or     eax,edx
c001f81a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f820:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f827:	e8 cc fa ff ff       	call   c001f2f8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f82c:	83 c4 10             	add    esp,0x10
c001f82f:	83 e0 01             	and    eax,0x1
c001f832:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f839:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f83f:	83 e0 fb             	and    eax,0xfffffffb
c001f842:	09 d0                	or     eax,edx
c001f844:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f84a:	83 ec 0c             	sub    esp,0xc
c001f84d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f851:	50                   	push   eax
c001f852:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f856:	50                   	push   eax
c001f857:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f85b:	57                   	push   edi
c001f85c:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f860:	56                   	push   esi
c001f861:	6a 01                	push   0x1
c001f863:	e8 82 f9 ff ff       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f868:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f86c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f872:	89 c1                	mov    ecx,eax
c001f874:	83 e1 0f             	and    ecx,0xf
c001f877:	83 e2 f0             	and    edx,0xfffffff0
c001f87a:	09 ca                	or     edx,ecx
c001f87c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f882:	89 c2                	mov    edx,eax
c001f884:	c1 ea 04             	shr    edx,0x4
c001f887:	83 e2 0f             	and    edx,0xf
c001f88a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f88e:	89 d1                	mov    ecx,edx
c001f890:	83 c4 20             	add    esp,0x20
c001f893:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f899:	c1 e1 06             	shl    ecx,0x6
c001f89c:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f8a2:	09 ca                	or     edx,ecx
c001f8a4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f8ab:	89 c2                	mov    edx,eax
c001f8ad:	c1 ea 08             	shr    edx,0x8
c001f8b0:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f8b6:	83 e2 0f             	and    edx,0xf
c001f8b9:	89 d5                	mov    ebp,edx
c001f8bb:	83 e5 03             	and    ebp,0x3
c001f8be:	c1 e5 06             	shl    ebp,0x6
c001f8c1:	83 e1 3f             	and    ecx,0x3f
c001f8c4:	09 e9                	or     ecx,ebp
c001f8c6:	89 d5                	mov    ebp,edx
c001f8c8:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f8ce:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f8d4:	c1 ed 02             	shr    ebp,0x2
c001f8d7:	83 e1 c0             	and    ecx,0xffffffc0
c001f8da:	09 e9                	or     ecx,ebp
c001f8dc:	89 c5                	mov    ebp,eax
c001f8de:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f8e4:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f8ea:	c1 ed 08             	shr    ebp,0x8
c001f8ed:	83 e5 30             	and    ebp,0x30
c001f8f0:	83 e1 cf             	and    ecx,0xffffffcf
c001f8f3:	09 e9                	or     ecx,ebp
c001f8f5:	83 fa 06             	cmp    edx,0x6
c001f8f8:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f8fe:	74 05                	je     c001f905 <CPU::detectFeatures()+0x54f>
c001f900:	83 fa 0f             	cmp    edx,0xf
c001f903:	75 64                	jne    c001f969 <CPU::detectFeatures()+0x5b3>
c001f905:	89 c1                	mov    ecx,eax
c001f907:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f90d:	c1 e9 10             	shr    ecx,0x10
c001f910:	c1 e1 04             	shl    ecx,0x4
c001f913:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f917:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f91d:	0f b6 c9             	movzx  ecx,cl
c001f920:	c1 e1 06             	shl    ecx,0x6
c001f923:	09 e9                	or     ecx,ebp
c001f925:	83 fa 0f             	cmp    edx,0xf
c001f928:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f92f:	75 38                	jne    c001f969 <CPU::detectFeatures()+0x5b3>
c001f931:	c1 e8 14             	shr    eax,0x14
c001f934:	83 c0 0f             	add    eax,0xf
c001f937:	0f b6 c0             	movzx  eax,al
c001f93a:	89 c2                	mov    edx,eax
c001f93c:	c1 e8 02             	shr    eax,0x2
c001f93f:	83 e2 03             	and    edx,0x3
c001f942:	89 d1                	mov    ecx,edx
c001f944:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f94a:	c1 e1 06             	shl    ecx,0x6
c001f94d:	83 e2 3f             	and    edx,0x3f
c001f950:	09 ca                	or     edx,ecx
c001f952:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f958:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f95e:	83 e2 c0             	and    edx,0xffffffc0
c001f961:	09 d0                	or     eax,edx
c001f963:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f969:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f96f:	83 ec 0c             	sub    esp,0xc
c001f972:	83 c8 07             	or     eax,0x7
c001f975:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f97b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f97f:	50                   	push   eax
c001f980:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f984:	55                   	push   ebp
c001f985:	57                   	push   edi
c001f986:	56                   	push   esi
c001f987:	68 00 00 00 80       	push   0x80000000
c001f98c:	e8 59 f8 ff ff       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f991:	83 c4 20             	add    esp,0x20
c001f994:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f99c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9a0:	76 1e                	jbe    c001f9c0 <CPU::detectFeatures()+0x60a>
c001f9a2:	83 ec 0c             	sub    esp,0xc
c001f9a5:	50                   	push   eax
c001f9a6:	55                   	push   ebp
c001f9a7:	57                   	push   edi
c001f9a8:	56                   	push   esi
c001f9a9:	68 01 00 00 80       	push   0x80000001
c001f9ae:	e8 37 f8 ff ff       	call   c001f1ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f9b3:	83 c4 20             	add    esp,0x20
c001f9b6:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f9c0:	52                   	push   edx
c001f9c1:	52                   	push   edx
c001f9c2:	68 cd 2d 03 c0       	push   0xc0032dcd
c001f9c7:	53                   	push   ebx
c001f9c8:	e8 2b be ff ff       	call   c001b7f8 <Device::setName(char const*)>
c001f9cd:	83 c4 10             	add    esp,0x10
c001f9d0:	eb 69                	jmp    c001fa3b <CPU::detectFeatures()+0x685>
c001f9d2:	50                   	push   eax
c001f9d3:	50                   	push   eax
c001f9d4:	68 32 2d 03 c0       	push   0xc0032d32
c001f9d9:	55                   	push   ebp
c001f9da:	e8 71 0c fe ff       	call   c0000650 <strcpy>
c001f9df:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f9e9:	e8 d5 07 fe ff       	call   c00001c3 <is486>
c001f9ee:	83 c4 10             	add    esp,0x10
c001f9f1:	85 c0                	test   eax,eax
c001f9f3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f9f9:	74 1f                	je     c001fa1a <CPU::detectFeatures()+0x664>
c001f9fb:	83 c8 07             	or     eax,0x7
c001f9fe:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001fa04:	0f 20 c0             	mov    eax,cr0
c001fa07:	83 e0 14             	and    eax,0x14
c001fa0a:	83 f8 04             	cmp    eax,0x4
c001fa0d:	75 10                	jne    c001fa1f <CPU::detectFeatures()+0x669>
c001fa0f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001fa15:	83 e0 fd             	and    eax,0xfffffffd
c001fa18:	eb 1b                	jmp    c001fa35 <CPU::detectFeatures()+0x67f>
c001fa1a:	83 e0 f8             	and    eax,0xfffffff8
c001fa1d:	eb df                	jmp    c001f9fe <CPU::detectFeatures()+0x648>
c001fa1f:	e8 7a 07 fe ff       	call   c000019e <hasLegacyFPU>
c001fa24:	83 e0 01             	and    eax,0x1
c001fa27:	8d 14 00             	lea    edx,[eax+eax*1]
c001fa2a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001fa30:	83 e0 fd             	and    eax,0xfffffffd
c001fa33:	09 d0                	or     eax,edx
c001fa35:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001fa3b:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001fa42:	74 17                	je     c001fa5b <CPU::detectFeatures()+0x6a5>
c001fa44:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001fa4a:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001fa50:	83 c8 10             	or     eax,0x10
c001fa53:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001fa59:	eb 20                	jmp    c001fa7b <CPU::detectFeatures()+0x6c5>
c001fa5b:	e8 3e 07 fe ff       	call   c000019e <hasLegacyFPU>
c001fa60:	83 e0 01             	and    eax,0x1
c001fa63:	8d 14 00             	lea    edx,[eax+eax*1]
c001fa66:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001fa6c:	83 e0 fd             	and    eax,0xfffffffd
c001fa6f:	09 d0                	or     eax,edx
c001fa71:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001fa77:	a8 02                	test   al,0x2
c001fa79:	75 c9                	jne    c001fa44 <CPU::detectFeatures()+0x68e>
c001fa7b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001fa82:	83 c4 2c             	add    esp,0x2c
c001fa85:	5b                   	pop    ebx
c001fa86:	5e                   	pop    esi
c001fa87:	5f                   	pop    edi
c001fa88:	5d                   	pop    ebp
c001fa89:	c3                   	ret    

c001fa8a <CPU::setupSMEP()>:
c001fa8a:	0f 20 e0             	mov    eax,cr4
c001fa8d:	0d 00 00 10 00       	or     eax,0x100000
c001fa92:	0f 22 e0             	mov    cr4,eax
c001fa95:	c3                   	ret    

c001fa96 <CPU::setupUMIP()>:
c001fa96:	0f 20 e0             	mov    eax,cr4
c001fa99:	80 cc 08             	or     ah,0x8
c001fa9c:	0f 22 e0             	mov    cr4,eax
c001fa9f:	c3                   	ret    

c001faa0 <CPU::setupTSC()>:
c001faa0:	0f 20 e0             	mov    eax,cr4
c001faa3:	83 c8 04             	or     eax,0x4
c001faa6:	0f 22 e0             	mov    cr4,eax
c001faa9:	c3                   	ret    

c001faaa <CPU::setupLargePages()>:
c001faaa:	0f 20 e0             	mov    eax,cr4
c001faad:	83 c8 10             	or     eax,0x10
c001fab0:	0f 22 e0             	mov    cr4,eax
c001fab3:	c3                   	ret    

c001fab4 <CPU::setupPAT()>:
c001fab4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001fab9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001fac0:	74 2c                	je     c001faee <CPU::setupPAT()+0x3a>
c001fac2:	53                   	push   ebx
c001fac3:	83 ec 10             	sub    esp,0x10
c001fac6:	68 77 02 00 00       	push   0x277
c001facb:	50                   	push   eax
c001facc:	e8 5d 61 ff ff       	call   c0015c2e <Computer::rdmsr(unsigned int)>
c001fad1:	83 e2 f8             	and    edx,0xfffffff8
c001fad4:	83 ca 01             	or     edx,0x1
c001fad7:	52                   	push   edx
c001fad8:	50                   	push   eax
c001fad9:	68 77 02 00 00       	push   0x277
c001fade:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001fae4:	e8 71 61 ff ff       	call   c0015c5a <Computer::wrmsr(unsigned int, unsigned long long)>
c001fae9:	83 c4 28             	add    esp,0x28
c001faec:	5b                   	pop    ebx
c001faed:	c3                   	ret    
c001faee:	c3                   	ret    
c001faef:	90                   	nop

c001faf0 <CPU::setupMTRR()>:
c001faf0:	c3                   	ret    
c001faf1:	90                   	nop

c001faf2 <CPU::setupGlobalPages()>:
c001faf2:	0f 20 e0             	mov    eax,cr4
c001faf5:	0c 80                	or     al,0x80
c001faf7:	0f 22 e0             	mov    cr4,eax
c001fafa:	c3                   	ret    
c001fafb:	90                   	nop

c001fafc <CPU::allowUsermodeDataAccess()>:
c001fafc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb00:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fb07:	74 03                	je     c001fb0c <CPU::allowUsermodeDataAccess()+0x10>
c001fb09:	0f 01 cb             	stac   
c001fb0c:	c3                   	ret    
c001fb0d:	90                   	nop

c001fb0e <CPU::prohibitUsermodeDataAccess()>:
c001fb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb12:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fb19:	74 03                	je     c001fb1e <CPU::prohibitUsermodeDataAccess()+0x10>
c001fb1b:	0f 01 ca             	clac   
c001fb1e:	c3                   	ret    
c001fb1f:	90                   	nop

c001fb20 <CPU::setupSMAP()>:
c001fb20:	0f 20 e0             	mov    eax,cr4
c001fb23:	0d 00 00 20 00       	or     eax,0x200000
c001fb28:	0f 22 e0             	mov    cr4,eax
c001fb2b:	eb e1                	jmp    c001fb0e <CPU::prohibitUsermodeDataAccess()>
c001fb2d:	90                   	nop

c001fb2e <CPU::setupFeatures()>:
c001fb2e:	53                   	push   ebx
c001fb2f:	83 ec 08             	sub    esp,0x8
c001fb32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb36:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001fb3d:	74 18                	je     c001fb57 <CPU::setupFeatures()+0x29>
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	68 d9 2d 03 c0       	push   0xc0032dd9
c001fb47:	e8 86 99 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001fb4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb4f:	e8 42 ff ff ff       	call   c001fa96 <CPU::setupUMIP()>
c001fb54:	83 c4 10             	add    esp,0x10
c001fb57:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001fb5e:	74 18                	je     c001fb78 <CPU::setupFeatures()+0x4a>
c001fb60:	83 ec 0c             	sub    esp,0xc
c001fb63:	68 e3 2d 03 c0       	push   0xc0032de3
c001fb68:	e8 65 99 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001fb6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb70:	e8 2b ff ff ff       	call   c001faa0 <CPU::setupTSC()>
c001fb75:	83 c4 10             	add    esp,0x10
c001fb78:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001fb7f:	74 18                	je     c001fb99 <CPU::setupFeatures()+0x6b>
c001fb81:	83 ec 0c             	sub    esp,0xc
c001fb84:	68 ec 2d 03 c0       	push   0xc0032dec
c001fb89:	e8 44 99 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001fb8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb91:	e8 14 ff ff ff       	call   c001faaa <CPU::setupLargePages()>
c001fb96:	83 c4 10             	add    esp,0x10
c001fb99:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001fba0:	74 18                	je     c001fbba <CPU::setupFeatures()+0x8c>
c001fba2:	83 ec 0c             	sub    esp,0xc
c001fba5:	68 f5 2d 03 c0       	push   0xc0032df5
c001fbaa:	e8 23 99 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001fbaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbb2:	e8 3b ff ff ff       	call   c001faf2 <CPU::setupGlobalPages()>
c001fbb7:	83 c4 10             	add    esp,0x10
c001fbba:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001fbc1:	74 18                	je     c001fbdb <CPU::setupFeatures()+0xad>
c001fbc3:	83 ec 0c             	sub    esp,0xc
c001fbc6:	68 07 2e 03 c0       	push   0xc0032e07
c001fbcb:	e8 02 99 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001fbd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbd3:	e8 dc fe ff ff       	call   c001fab4 <CPU::setupPAT()>
c001fbd8:	83 c4 10             	add    esp,0x10
c001fbdb:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001fbe2:	74 11                	je     c001fbf5 <CPU::setupFeatures()+0xc7>
c001fbe4:	c7 44 24 10 10 2e 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032e10
c001fbec:	83 c4 08             	add    esp,0x8
c001fbef:	5b                   	pop    ebx
c001fbf0:	e9 dd 98 ff ff       	jmp    c00194d2 <Dbg::kprintf(char const*, ...)>
c001fbf5:	83 c4 08             	add    esp,0x8
c001fbf8:	5b                   	pop    ebx
c001fbf9:	c3                   	ret    

c001fbfa <CPU::open(int, int, void*)>:
c001fbfa:	55                   	push   ebp
c001fbfb:	57                   	push   edi
c001fbfc:	56                   	push   esi
c001fbfd:	53                   	push   ebx
c001fbfe:	83 ec 18             	sub    esp,0x18
c001fc01:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001fc05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fc09:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fc0d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001fc13:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001fc19:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001fc1f:	50                   	push   eax
c001fc20:	e8 05 63 ff ff       	call   c0015f2a <GDT::setup()>
c001fc25:	83 c4 0c             	add    esp,0xc
c001fc28:	6a 00                	push   0x0
c001fc2a:	68 ef be ad de       	push   0xdeadbeef
c001fc2f:	55                   	push   ebp
c001fc30:	e8 03 7f ff ff       	call   c0017b38 <TSS::setup(unsigned long, unsigned long)>
c001fc35:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fc38:	e8 db 7e ff ff       	call   c0017b18 <TSS::flush()>
c001fc3d:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001fc43:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc46:	e8 43 65 ff ff       	call   c001618e <IDT::setup()>
c001fc4b:	b8 00 04 00 00       	mov    eax,0x400
c001fc50:	0f 23 f8             	mov    db7,eax
c001fc53:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001fc5d:	e8 49 6d ff ff       	call   c00169ab <Phys::allocatePage()>
c001fc62:	83 c4 10             	add    esp,0x10
c001fc65:	85 f6                	test   esi,esi
c001fc67:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fc6d:	89 38                	mov    DWORD PTR [eax],edi
c001fc6f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fc75:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001fc78:	74 10                	je     c001fc8a <CPU::open(int, int, void*)+0x90>
c001fc7a:	50                   	push   eax
c001fc7b:	50                   	push   eax
c001fc7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc82:	56                   	push   esi
c001fc83:	e8 cc 87 ff ff       	call   c0018454 <VAS::setCPUSpecific(unsigned long)>
c001fc88:	eb 0d                	jmp    c001fc97 <CPU::open(int, int, void*)+0x9d>
c001fc8a:	83 ec 0c             	sub    esp,0xc
c001fc8d:	68 1a 2e 03 c0       	push   0xc0032e1a
c001fc92:	e8 ff 08 00 00       	call   c0020596 <KePanic(char const*)>
c001fc97:	83 c4 10             	add    esp,0x10
c001fc9a:	83 ec 0c             	sub    esp,0xc
c001fc9d:	68 28 2e 03 c0       	push   0xc0032e28
c001fca2:	e8 8e 01 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001fca7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcaa:	e8 07 f7 ff ff       	call   c001f3b6 <CPU::detectFeatures()>
c001fcaf:	c7 04 24 4b 2e 03 c0 	mov    DWORD PTR [esp],0xc0032e4b
c001fcb6:	e8 7a 01 00 00       	call   c001fe35 <KeSetBootMessage(char const*)>
c001fcbb:	e8 2a 78 00 00       	call   c00274ea <HalInitialise()>
c001fcc0:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001fcc5:	83 e0 10             	and    eax,0x10
c001fcc8:	83 f8 01             	cmp    eax,0x1
c001fccb:	19 c0                	sbb    eax,eax
c001fccd:	83 e0 46             	and    eax,0x46
c001fcd0:	83 c0 1e             	add    eax,0x1e
c001fcd3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcd6:	e8 06 d4 ff ff       	call   c001d0e1 <setupTimer(int)>
c001fcdb:	83 c4 10             	add    esp,0x10
c001fcde:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001fce5:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001fceb:	74 0c                	je     c001fcf9 <CPU::open(int, int, void*)+0xff>
c001fced:	83 ec 0c             	sub    esp,0xc
c001fcf0:	53                   	push   ebx
c001fcf1:	e8 38 fe ff ff       	call   c001fb2e <CPU::setupFeatures()>
c001fcf6:	83 c4 10             	add    esp,0x10
c001fcf9:	83 c4 0c             	add    esp,0xc
c001fcfc:	31 c0                	xor    eax,eax
c001fcfe:	5b                   	pop    ebx
c001fcff:	5e                   	pop    esi
c001fd00:	5f                   	pop    edi
c001fd01:	5d                   	pop    ebp
c001fd02:	c3                   	ret    

c001fd03 <KeInitialiseAtexit()>:
c001fd03:	83 ec 10             	sub    esp,0x10
c001fd06:	6a 60                	push   0x60
c001fd08:	6a 00                	push   0x0
c001fd0a:	68 20 f9 03 c0       	push   0xc003f920
c001fd0f:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001fd19:	e8 d2 07 fe ff       	call   c00004f0 <memset>
c001fd1e:	83 c4 1c             	add    esp,0x1c
c001fd21:	c3                   	ret    

c001fd22 <KeRegisterAtexit(void (*)(void*), void*)>:
c001fd22:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001fd27:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fd2b:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001fd32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd36:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001fd3d:	40                   	inc    eax
c001fd3e:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fd43:	83 f8 17             	cmp    eax,0x17
c001fd46:	7e 0d                	jle    c001fd55 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fd48:	c7 44 24 04 8c 2e 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032e8c
c001fd50:	e9 41 08 00 00       	jmp    c0020596 <KePanic(char const*)>
c001fd55:	c3                   	ret    

c001fd56 <KeExecuteAtexit()>:
c001fd56:	53                   	push   ebx
c001fd57:	31 db                	xor    ebx,ebx
c001fd59:	83 ec 08             	sub    esp,0x8
c001fd5c:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fd62:	7e 50                	jle    c001fdb4 <KeExecuteAtexit()+0x5e>
c001fd64:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fd6b:	85 c0                	test   eax,eax
c001fd6d:	74 42                	je     c001fdb1 <KeExecuteAtexit()+0x5b>
c001fd6f:	51                   	push   ecx
c001fd70:	50                   	push   eax
c001fd71:	53                   	push   ebx
c001fd72:	68 a5 2e 03 c0       	push   0xc0032ea5
c001fd77:	e8 56 97 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001fd7c:	58                   	pop    eax
c001fd7d:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fd84:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fd8b:	c7 04 24 c7 2e 03 c0 	mov    DWORD PTR [esp],0xc0032ec7
c001fd92:	e8 3b 97 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001fd97:	c7 04 24 f3 40 03 c0 	mov    DWORD PTR [esp],0xc00340f3
c001fd9e:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fda9:	e8 24 97 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001fdae:	83 c4 10             	add    esp,0x10
c001fdb1:	43                   	inc    ebx
c001fdb2:	eb a8                	jmp    c001fd5c <KeExecuteAtexit()+0x6>
c001fdb4:	83 c4 08             	add    esp,0x8
c001fdb7:	5b                   	pop    ebx
c001fdb8:	c3                   	ret    

c001fdb9 <KeDisplaySplashScreen()>:
c001fdb9:	55                   	push   ebp
c001fdba:	bd 05 00 00 00       	mov    ebp,0x5
c001fdbf:	57                   	push   edi
c001fdc0:	bf 0a 00 00 00       	mov    edi,0xa
c001fdc5:	56                   	push   esi
c001fdc6:	31 f6                	xor    esi,esi
c001fdc8:	53                   	push   ebx
c001fdc9:	31 db                	xor    ebx,ebx
c001fdcb:	83 ec 0c             	sub    esp,0xc
c001fdce:	0f b6 96 60 43 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcbca0]
c001fdd5:	85 d2                	test   edx,edx
c001fdd7:	89 d0                	mov    eax,edx
c001fdd9:	74 52                	je     c001fe2d <KeDisplaySplashScreen()+0x74>
c001fddb:	80 bb 96 43 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcbc6a],0xdb
c001fde2:	75 13                	jne    c001fdf7 <KeDisplaySplashScreen()+0x3e>
c001fde4:	0f b6 8b 95 43 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcbc6b]
c001fdeb:	83 e1 fe             	and    ecx,0xfffffffe
c001fdee:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fdf4:	75 01                	jne    c001fdf7 <KeDisplaySplashScreen()+0x3e>
c001fdf6:	47                   	inc    edi
c001fdf7:	83 fa 0d             	cmp    edx,0xd
c001fdfa:	74 28                	je     c001fe24 <KeDisplaySplashScreen()+0x6b>
c001fdfc:	83 fa 0a             	cmp    edx,0xa
c001fdff:	75 0a                	jne    c001fe0b <KeDisplaySplashScreen()+0x52>
c001fe01:	45                   	inc    ebp
c001fe02:	bf 0a 00 00 00       	mov    edi,0xa
c001fe07:	31 db                	xor    ebx,ebx
c001fe09:	eb 19                	jmp    c001fe24 <KeDisplaySplashScreen()+0x6b>
c001fe0b:	83 ec 0c             	sub    esp,0xc
c001fe0e:	0f be c0             	movsx  eax,al
c001fe11:	55                   	push   ebp
c001fe12:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fe15:	43                   	inc    ebx
c001fe16:	52                   	push   edx
c001fe17:	6a 00                	push   0x0
c001fe19:	6a 0e                	push   0xe
c001fe1b:	50                   	push   eax
c001fe1c:	e8 47 83 00 00       	call   c0028168 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fe21:	83 c4 20             	add    esp,0x20
c001fe24:	46                   	inc    esi
c001fe25:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fe2b:	75 a1                	jne    c001fdce <KeDisplaySplashScreen()+0x15>
c001fe2d:	83 c4 0c             	add    esp,0xc
c001fe30:	5b                   	pop    ebx
c001fe31:	5e                   	pop    esi
c001fe32:	5f                   	pop    edi
c001fe33:	5d                   	pop    ebp
c001fe34:	c3                   	ret    

c001fe35 <KeSetBootMessage(char const*)>:
c001fe35:	57                   	push   edi
c001fe36:	56                   	push   esi
c001fe37:	53                   	push   ebx
c001fe38:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fe3e:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fe45:	68 9e 00 00 00       	push   0x9e
c001fe4a:	6a 00                	push   0x0
c001fe4c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fe50:	56                   	push   esi
c001fe51:	e8 9a 06 fe ff       	call   c00004f0 <memset>
c001fe56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe59:	e8 22 07 fe ff       	call   c0000580 <strlen>
c001fe5e:	ba 50 00 00 00       	mov    edx,0x50
c001fe63:	83 c4 10             	add    esp,0x10
c001fe66:	31 c9                	xor    ecx,ecx
c001fe68:	29 c2                	sub    edx,eax
c001fe6a:	83 e2 fe             	and    edx,0xfffffffe
c001fe6d:	01 f2                	add    edx,esi
c001fe6f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fe74:	84 c0                	test   al,al
c001fe76:	74 0a                	je     c001fe82 <KeSetBootMessage(char const*)+0x4d>
c001fe78:	80 cc 0f             	or     ah,0xf
c001fe7b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fe7f:	41                   	inc    ecx
c001fe80:	eb ed                	jmp    c001fe6f <KeSetBootMessage(char const*)+0x3a>
c001fe82:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fe87:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fe8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe8e:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fe94:	5b                   	pop    ebx
c001fe95:	5e                   	pop    esi
c001fe96:	5f                   	pop    edi
c001fe97:	c3                   	ret    

c001fe98 <CUnlockScheduler>:
c001fe98:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fe9d:	83 e8 01             	sub    eax,0x1
c001fea0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fea5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001feaa:	85 c0                	test   eax,eax
c001feac:	75 02                	jne    c001feb0 <CUnlockScheduler+0x18>
c001feae:	fb                   	sti    
c001feaf:	90                   	nop
c001feb0:	90                   	nop
c001feb1:	c3                   	ret    
c001feb2:	66 90                	xchg   ax,ax

c001feb4 <CLockScheduler>:
c001feb4:	fa                   	cli    
c001feb5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001feba:	83 c0 01             	add    eax,0x1
c001febd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fec2:	90                   	nop
c001fec3:	c3                   	ret    

c001fec4 <CPrintf>:
c001fec4:	83 ec 0c             	sub    esp,0xc
c001fec7:	83 ec 08             	sub    esp,0x8
c001feca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fece:	68 30 00 03 c0       	push   0xc0030030
c001fed3:	e8 fa 95 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c001fed8:	83 c4 10             	add    esp,0x10
c001fedb:	90                   	nop
c001fedc:	83 c4 0c             	add    esp,0xc
c001fedf:	c3                   	ret    

c001fee0 <Krnl::handlePowerButton()>:
c001fee0:	83 ec 0c             	sub    esp,0xc
c001fee3:	e8 09 07 00 00       	call   c00205f1 <KeHandlePowerButton()>
c001fee8:	90                   	nop
c001fee9:	83 c4 0c             	add    esp,0xc
c001feec:	c3                   	ret    
c001feed:	8d 76 00             	lea    esi,[esi+0x0]

c001fef0 <Krnl::handleSleepButton()>:
c001fef0:	83 ec 0c             	sub    esp,0xc
c001fef3:	e8 2e 07 00 00       	call   c0020626 <KeHandleSleepButton()>
c001fef8:	90                   	nop
c001fef9:	83 c4 0c             	add    esp,0xc
c001fefc:	c3                   	ret    

c001fefd <KeCalculateCRC32(unsigned char*, int)>:
c001fefd:	53                   	push   ebx
c001fefe:	83 c8 ff             	or     eax,0xffffffff
c001ff01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ff05:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ff09:	01 cb                	add    ebx,ecx
c001ff0b:	39 d9                	cmp    ecx,ebx
c001ff0d:	74 15                	je     c001ff24 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001ff0f:	41                   	inc    ecx
c001ff10:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001ff13:	31 c2                	xor    edx,eax
c001ff15:	c1 e8 08             	shr    eax,0x8
c001ff18:	0f b6 d2             	movzx  edx,dl
c001ff1b:	33 04 95 c0 44 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcbb40]
c001ff22:	eb e7                	jmp    c001ff0b <KeCalculateCRC32(unsigned char*, int)+0xe>
c001ff24:	5b                   	pop    ebx
c001ff25:	f7 d0                	not    eax
c001ff27:	c3                   	ret    

c001ff28 <EnvVarContainer::getEnv(char const*)>:
c001ff28:	57                   	push   edi
c001ff29:	56                   	push   esi
c001ff2a:	53                   	push   ebx
c001ff2b:	31 db                	xor    ebx,ebx
c001ff2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff31:	39 1e                	cmp    DWORD PTR [esi],ebx
c001ff33:	7e 2b                	jle    c001ff60 <EnvVarContainer::getEnv(char const*)+0x38>
c001ff35:	50                   	push   eax
c001ff36:	50                   	push   eax
c001ff37:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ff3a:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001ff41:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001ff44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ff48:	e8 33 08 fe ff       	call   c0000780 <strcmp>
c001ff4d:	83 c4 10             	add    esp,0x10
c001ff50:	85 c0                	test   eax,eax
c001ff52:	75 09                	jne    c001ff5d <EnvVarContainer::getEnv(char const*)+0x35>
c001ff54:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ff57:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001ff5b:	eb 05                	jmp    c001ff62 <EnvVarContainer::getEnv(char const*)+0x3a>
c001ff5d:	43                   	inc    ebx
c001ff5e:	eb d1                	jmp    c001ff31 <EnvVarContainer::getEnv(char const*)+0x9>
c001ff60:	31 c0                	xor    eax,eax
c001ff62:	5b                   	pop    ebx
c001ff63:	5e                   	pop    esi
c001ff64:	5f                   	pop    edi
c001ff65:	c3                   	ret    

c001ff66 <EnvVarContainer::setEnv(char const*, char const*)>:
c001ff66:	55                   	push   ebp
c001ff67:	57                   	push   edi
c001ff68:	56                   	push   esi
c001ff69:	53                   	push   ebx
c001ff6a:	83 ec 28             	sub    esp,0x28
c001ff6d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001ff71:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ff75:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ff79:	56                   	push   esi
c001ff7a:	e8 01 06 fe ff       	call   c0000580 <strlen>
c001ff7f:	40                   	inc    eax
c001ff80:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff83:	e8 14 67 ff ff       	call   c001669c <malloc>
c001ff88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ff8f:	e8 ec 05 fe ff       	call   c0000580 <strlen>
c001ff94:	40                   	inc    eax
c001ff95:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff98:	e8 ff 66 ff ff       	call   c001669c <malloc>
c001ff9d:	89 34 24             	mov    DWORD PTR [esp],esi
c001ffa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ffa4:	e8 d7 05 fe ff       	call   c0000580 <strlen>
c001ffa9:	83 c4 0c             	add    esp,0xc
c001ffac:	40                   	inc    eax
c001ffad:	50                   	push   eax
c001ffae:	6a 00                	push   0x0
c001ffb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffb4:	e8 37 05 fe ff       	call   c00004f0 <memset>
c001ffb9:	89 34 24             	mov    DWORD PTR [esp],esi
c001ffbc:	e8 bf 05 fe ff       	call   c0000580 <strlen>
c001ffc1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ffc5:	8d 48 01             	lea    ecx,[eax+0x1]
c001ffc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ffca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffcd:	89 de                	mov    esi,ebx
c001ffcf:	e8 ac 05 fe ff       	call   c0000580 <strlen>
c001ffd4:	83 c4 0c             	add    esp,0xc
c001ffd7:	40                   	inc    eax
c001ffd8:	50                   	push   eax
c001ffd9:	6a 00                	push   0x0
c001ffdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ffdf:	e8 0c 05 fe ff       	call   c00004f0 <memset>
c001ffe4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffe7:	e8 94 05 fe ff       	call   c0000580 <strlen>
c001ffec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fff0:	8d 48 01             	lea    ecx,[eax+0x1]
c001fff3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fff5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fff8:	40                   	inc    eax
c001fff9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fffc:	c1 e0 03             	shl    eax,0x3
c001ffff:	5a                   	pop    edx
c0020000:	59                   	pop    ecx
c0020001:	50                   	push   eax
c0020002:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0020005:	e8 7e 66 ff ff       	call   c0016688 <realloc>
c002000a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002000d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0020011:	b9 08 00 00 00       	mov    ecx,0x8
c0020016:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0020019:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c002001d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002001f:	83 c4 2c             	add    esp,0x2c
c0020022:	5b                   	pop    ebx
c0020023:	5e                   	pop    esi
c0020024:	5f                   	pop    edi
c0020025:	5d                   	pop    ebp
c0020026:	c3                   	ret    
c0020027:	90                   	nop

c0020028 <EnvVarContainer::deleteEnv(char const*)>:
c0020028:	c3                   	ret    
c0020029:	90                   	nop

c002002a <EnvVarContainer::loadFrom(char const*, char const*)>:
c002002a:	55                   	push   ebp
c002002b:	57                   	push   edi
c002002c:	56                   	push   esi
c002002d:	53                   	push   ebx
c002002e:	81 ec 38 01 00 00    	sub    esp,0x138
c0020034:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c002003b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0020042:	68 14 01 00 00       	push   0x114
c0020047:	e8 50 66 ff ff       	call   c001669c <malloc>
c002004c:	83 c4 0c             	add    esp,0xc
c002004f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020052:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020059:	89 c3                	mov    ebx,eax
c002005b:	50                   	push   eax
c002005c:	e8 89 a6 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0020061:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020064:	e8 63 a9 ff ff       	call   c001a9cc <File::exists()>
c0020069:	83 c4 10             	add    esp,0x10
c002006c:	84 c0                	test   al,al
c002006e:	75 31                	jne    c00200a1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0020070:	50                   	push   eax
c0020071:	50                   	push   eax
c0020072:	6a 12                	push   0x12
c0020074:	53                   	push   ebx
c0020075:	e8 8e a6 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c002007a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002007c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c002007f:	89 34 24             	mov    DWORD PTR [esp],esi
c0020082:	e8 f9 04 fe ff       	call   c0000580 <strlen>
c0020087:	5a                   	pop    edx
c0020088:	8d 54 24 20          	lea    edx,[esp+0x20]
c002008c:	52                   	push   edx
c002008d:	31 d2                	xor    edx,edx
c002008f:	56                   	push   esi
c0020090:	52                   	push   edx
c0020091:	50                   	push   eax
c0020092:	53                   	push   ebx
c0020093:	ff d7                	call   edi
c0020095:	83 c4 14             	add    esp,0x14
c0020098:	53                   	push   ebx
c0020099:	e8 c8 a6 ff ff       	call   c001a766 <File::close()>
c002009e:	83 c4 10             	add    esp,0x10
c00200a1:	56                   	push   esi
c00200a2:	31 f6                	xor    esi,esi
c00200a4:	68 00 01 00 00       	push   0x100
c00200a9:	6a 00                	push   0x0
c00200ab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00200af:	50                   	push   eax
c00200b0:	e8 3b 04 fe ff       	call   c00004f0 <memset>
c00200b5:	5f                   	pop    edi
c00200b6:	58                   	pop    eax
c00200b7:	6a 01                	push   0x1
c00200b9:	53                   	push   ebx
c00200ba:	e8 49 a6 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c00200bf:	83 c4 10             	add    esp,0x10
c00200c2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00200ca:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00200d2:	83 ec 0c             	sub    esp,0xc
c00200d5:	8d 54 24 20          	lea    edx,[esp+0x20]
c00200d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00200db:	52                   	push   edx
c00200dc:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c00200e0:	51                   	push   ecx
c00200e1:	6a 00                	push   0x0
c00200e3:	6a 01                	push   0x1
c00200e5:	53                   	push   ebx
c00200e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00200e9:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c00200ee:	83 c4 20             	add    esp,0x20
c00200f1:	85 c0                	test   eax,eax
c00200f3:	89 c1                	mov    ecx,eax
c00200f5:	0f 84 36 01 00 00    	je     c0020231 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00200fb:	83 f8 0d             	cmp    eax,0xd
c00200fe:	0f 84 22 01 00 00    	je     c0020226 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020104:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020109:	0f 84 f0 00 00 00    	je     c00201ff <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c002010f:	83 f8 0a             	cmp    eax,0xa
c0020112:	74 13                	je     c0020127 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0020114:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020119:	74 0c                	je     c0020127 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c002011b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020121:	0f 8e f6 00 00 00    	jle    c002021d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0020127:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002012b:	83 ec 0c             	sub    esp,0xc
c002012e:	8d 78 01             	lea    edi,[eax+0x1]
c0020131:	57                   	push   edi
c0020132:	e8 65 65 ff ff       	call   c001669c <malloc>
c0020137:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c002013b:	8d 56 04             	lea    edx,[esi+0x4]
c002013e:	89 14 24             	mov    DWORD PTR [esp],edx
c0020141:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020145:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020149:	e8 4e 65 ff ff       	call   c001669c <malloc>
c002014e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0020152:	83 c4 0c             	add    esp,0xc
c0020155:	57                   	push   edi
c0020156:	6a 00                	push   0x0
c0020158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002015c:	e8 8f 03 fe ff       	call   c00004f0 <memset>
c0020161:	8d 74 24 30          	lea    esi,[esp+0x30]
c0020165:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020169:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002016d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002016f:	83 c4 0c             	add    esp,0xc
c0020172:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020176:	52                   	push   edx
c0020177:	6a 00                	push   0x0
c0020179:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002017d:	e8 6e 03 fe ff       	call   c00004f0 <memset>
c0020182:	8d 74 24 30          	lea    esi,[esp+0x30]
c0020186:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c002018a:	89 34 24             	mov    DWORD PTR [esp],esi
c002018d:	e8 ee 03 fe ff       	call   c0000580 <strlen>
c0020192:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020196:	89 c1                	mov    ecx,eax
c0020198:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002019a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002019d:	83 c4 10             	add    esp,0x10
c00201a0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00201a3:	40                   	inc    eax
c00201a4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00201a7:	85 d2                	test   edx,edx
c00201a9:	75 0c                	jne    c00201b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00201ab:	83 ec 0c             	sub    esp,0xc
c00201ae:	6a 08                	push   0x8
c00201b0:	e8 e7 64 ff ff       	call   c001669c <malloc>
c00201b5:	eb 0c                	jmp    c00201c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00201b7:	51                   	push   ecx
c00201b8:	51                   	push   ecx
c00201b9:	c1 e0 03             	shl    eax,0x3
c00201bc:	50                   	push   eax
c00201bd:	52                   	push   edx
c00201be:	e8 c5 64 ff ff       	call   c0016688 <realloc>
c00201c3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00201c6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00201c9:	83 c4 10             	add    esp,0x10
c00201cc:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00201cf:	8d 74 24 18          	lea    esi,[esp+0x18]
c00201d3:	b9 08 00 00 00       	mov    ecx,0x8
c00201d8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00201dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00201de:	50                   	push   eax
c00201df:	31 f6                	xor    esi,esi
c00201e1:	68 00 01 00 00       	push   0x100
c00201e6:	6a 00                	push   0x0
c00201e8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00201ec:	50                   	push   eax
c00201ed:	e8 fe 02 fe ff       	call   c00004f0 <memset>
c00201f2:	83 c4 10             	add    esp,0x10
c00201f5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00201fd:	eb 27                	jmp    c0020226 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00201ff:	83 f8 3d             	cmp    eax,0x3d
c0020202:	74 1e                	je     c0020222 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0020204:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002020a:	7f 07                	jg     c0020213 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c002020c:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0020210:	46                   	inc    esi
c0020211:	eb 13                	jmp    c0020226 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020213:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002021b:	eb 09                	jmp    c0020226 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c002021d:	83 f8 3d             	cmp    eax,0x3d
c0020220:	75 ea                	jne    c002020c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0020222:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0020226:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002022b:	0f 85 99 fe ff ff    	jne    c00200ca <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0020231:	83 ec 0c             	sub    esp,0xc
c0020234:	53                   	push   ebx
c0020235:	e8 2c a5 ff ff       	call   c001a766 <File::close()>
c002023a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002023c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002023f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020242:	81 c4 3c 01 00 00    	add    esp,0x13c
c0020248:	5b                   	pop    ebx
c0020249:	5e                   	pop    esi
c002024a:	5f                   	pop    edi
c002024b:	5d                   	pop    ebp
c002024c:	c3                   	ret    
c002024d:	90                   	nop

c002024e <EnvVarContainer::__loadSystem()>:
c002024e:	83 ec 10             	sub    esp,0x10
c0020251:	68 c0 48 03 c0       	push   0xc00348c0
c0020256:	68 cc 2e 03 c0       	push   0xc0032ecc
c002025b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002025f:	e8 c6 fd ff ff       	call   c002002a <EnvVarContainer::loadFrom(char const*, char const*)>
c0020264:	83 c4 1c             	add    esp,0x1c
c0020267:	c3                   	ret    

c0020268 <EnvVarContainer::__loadUser()>:
c0020268:	c3                   	ret    
c0020269:	90                   	nop

c002026a <EnvVarContainer::EnvVarContainer(Process*)>:
c002026a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002026e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020278:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002027c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002027f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020283:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002028a:	90                   	nop
c002028b:	c3                   	ret    

c002028c <EnvVarContainer::~EnvVarContainer()>:
c002028c:	83 ec 0c             	sub    esp,0xc
c002028f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020293:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020296:	85 c0                	test   eax,eax
c0020298:	74 1d                	je     c00202b7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c002029a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029e:	8b 00                	mov    eax,DWORD PTR [eax]
c00202a0:	85 c0                	test   eax,eax
c00202a2:	74 13                	je     c00202b7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00202a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202ab:	83 ec 0c             	sub    esp,0xc
c00202ae:	50                   	push   eax
c00202af:	e8 f8 63 ff ff       	call   c00166ac <free>
c00202b4:	83 c4 10             	add    esp,0x10
c00202b7:	90                   	nop
c00202b8:	83 c4 0c             	add    esp,0xc
c00202bb:	c3                   	ret    

c00202bc <KeGetEnv(Process*, char const*)>:
c00202bc:	53                   	push   ebx
c00202bd:	83 ec 08             	sub    esp,0x8
c00202c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c4:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c00202ca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00202ce:	74 04                	je     c00202d4 <KeGetEnv(Process*, char const*)+0x18>
c00202d0:	85 c0                	test   eax,eax
c00202d2:	75 0b                	jne    c00202df <KeGetEnv(Process*, char const*)+0x23>
c00202d4:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c00202d9:	85 c0                	test   eax,eax
c00202db:	75 19                	jne    c00202f6 <KeGetEnv(Process*, char const*)+0x3a>
c00202dd:	eb 27                	jmp    c0020306 <KeGetEnv(Process*, char const*)+0x4a>
c00202df:	52                   	push   edx
c00202e0:	52                   	push   edx
c00202e1:	53                   	push   ebx
c00202e2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00202e8:	e8 3b fc ff ff       	call   c001ff28 <EnvVarContainer::getEnv(char const*)>
c00202ed:	83 c4 10             	add    esp,0x10
c00202f0:	85 c0                	test   eax,eax
c00202f2:	75 28                	jne    c002031c <KeGetEnv(Process*, char const*)+0x60>
c00202f4:	eb de                	jmp    c00202d4 <KeGetEnv(Process*, char const*)+0x18>
c00202f6:	52                   	push   edx
c00202f7:	52                   	push   edx
c00202f8:	53                   	push   ebx
c00202f9:	50                   	push   eax
c00202fa:	e8 29 fc ff ff       	call   c001ff28 <EnvVarContainer::getEnv(char const*)>
c00202ff:	83 c4 10             	add    esp,0x10
c0020302:	85 c0                	test   eax,eax
c0020304:	75 16                	jne    c002031c <KeGetEnv(Process*, char const*)+0x60>
c0020306:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002030a:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c002030f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020313:	83 c4 08             	add    esp,0x8
c0020316:	5b                   	pop    ebx
c0020317:	e9 0c fc ff ff       	jmp    c001ff28 <EnvVarContainer::getEnv(char const*)>
c002031c:	83 c4 08             	add    esp,0x8
c002031f:	5b                   	pop    ebx
c0020320:	c3                   	ret    

c0020321 <KeSetEnvSystem(char const*, char const*)>:
c0020321:	83 ec 10             	sub    esp,0x10
c0020324:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002032c:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c0020332:	e8 2f fc ff ff       	call   c001ff66 <EnvVarContainer::setEnv(char const*, char const*)>
c0020337:	83 c4 1c             	add    esp,0x1c
c002033a:	c3                   	ret    

c002033b <KeSetEnvUser(char const*, char const*)>:
c002033b:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c0020340:	85 c0                	test   eax,eax
c0020342:	74 15                	je     c0020359 <KeSetEnvUser(char const*, char const*)+0x1e>
c0020344:	83 ec 10             	sub    esp,0x10
c0020347:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002034b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002034f:	50                   	push   eax
c0020350:	e8 11 fc ff ff       	call   c001ff66 <EnvVarContainer::setEnv(char const*, char const*)>
c0020355:	83 c4 1c             	add    esp,0x1c
c0020358:	c3                   	ret    
c0020359:	c3                   	ret    

c002035a <KeSetEnvProcess(Process*, char const*, char const*)>:
c002035a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002035e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0020364:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020368:	e9 f9 fb ff ff       	jmp    c001ff66 <EnvVarContainer::setEnv(char const*, char const*)>

c002036d <KeDeleteEnvSystem(char const*)>:
c002036d:	c3                   	ret    

c002036e <KeDeleteEnvUser(char const*)>:
c002036e:	c3                   	ret    

c002036f <KeDeleteEnvProcess(Process*, char const*)>:
c002036f:	c3                   	ret    

c0020370 <KeNewProcessEnv(Process*)>:
c0020370:	83 ec 28             	sub    esp,0x28
c0020373:	6a 0c                	push   0xc
c0020375:	e8 22 63 ff ff       	call   c001669c <malloc>
c002037a:	5a                   	pop    edx
c002037b:	59                   	pop    ecx
c002037c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020380:	50                   	push   eax
c0020381:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020385:	e8 e0 fe ff ff       	call   c002026a <EnvVarContainer::EnvVarContainer(Process*)>
c002038a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002038e:	83 c4 2c             	add    esp,0x2c
c0020391:	c3                   	ret    

c0020392 <KeCopyProcessEnv(Process*, Process*)>:
c0020392:	57                   	push   edi
c0020393:	56                   	push   esi
c0020394:	53                   	push   ebx
c0020395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020399:	83 ec 0c             	sub    esp,0xc
c002039c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00203a2:	6a 0c                	push   0xc
c00203a4:	e8 f3 62 ff ff       	call   c001669c <malloc>
c00203a9:	89 c3                	mov    ebx,eax
c00203ab:	58                   	pop    eax
c00203ac:	5a                   	pop    edx
c00203ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203b1:	53                   	push   ebx
c00203b2:	e8 b3 fe ff ff       	call   c002026a <EnvVarContainer::EnvVarContainer(Process*)>
c00203b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00203b9:	89 03                	mov    DWORD PTR [ebx],eax
c00203bb:	c1 e0 03             	shl    eax,0x3
c00203be:	89 04 24             	mov    DWORD PTR [esp],eax
c00203c1:	e8 d6 62 ff ff       	call   c001669c <malloc>
c00203c6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00203c9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00203cb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00203ce:	89 c7                	mov    edi,eax
c00203d0:	c1 e1 03             	shl    ecx,0x3
c00203d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00203d5:	83 c4 10             	add    esp,0x10
c00203d8:	89 d8                	mov    eax,ebx
c00203da:	5b                   	pop    ebx
c00203db:	5e                   	pop    esi
c00203dc:	5f                   	pop    edi
c00203dd:	c3                   	ret    

c00203de <KeLoadSystemEnv()>:
c00203de:	53                   	push   ebx
c00203df:	83 ec 14             	sub    esp,0x14
c00203e2:	6a 0c                	push   0xc
c00203e4:	e8 b3 62 ff ff       	call   c001669c <malloc>
c00203e9:	89 c3                	mov    ebx,eax
c00203eb:	58                   	pop    eax
c00203ec:	5a                   	pop    edx
c00203ed:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00203f3:	53                   	push   ebx
c00203f4:	e8 71 fe ff ff       	call   c002026a <EnvVarContainer::EnvVarContainer(Process*)>
c00203f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00203fc:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c0020402:	e8 47 fe ff ff       	call   c002024e <EnvVarContainer::__loadSystem()>
c0020407:	83 c4 18             	add    esp,0x18
c002040a:	5b                   	pop    ebx
c002040b:	c3                   	ret    

c002040c <KeLoadUserEnv()>:
c002040c:	53                   	push   ebx
c002040d:	83 ec 14             	sub    esp,0x14
c0020410:	6a 0c                	push   0xc
c0020412:	e8 85 62 ff ff       	call   c001669c <malloc>
c0020417:	89 c3                	mov    ebx,eax
c0020419:	58                   	pop    eax
c002041a:	5a                   	pop    edx
c002041b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020421:	53                   	push   ebx
c0020422:	e8 43 fe ff ff       	call   c002026a <EnvVarContainer::EnvVarContainer(Process*)>
c0020427:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c002042d:	83 c4 18             	add    esp,0x18
c0020430:	5b                   	pop    ebx
c0020431:	c3                   	ret    

c0020432 <KeFlushEnv()>:
c0020432:	c3                   	ret    

c0020433 <KeGetProcessTotalEnvCount(Process*)>:
c0020433:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020437:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c002043d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020443:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020448:	8b 00                	mov    eax,DWORD PTR [eax]
c002044a:	03 01                	add    eax,DWORD PTR [ecx]
c002044c:	85 d2                	test   edx,edx
c002044e:	74 02                	je     c0020452 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020450:	03 02                	add    eax,DWORD PTR [edx]
c0020452:	c3                   	ret    

c0020453 <KeGetProcessEnvPair(Process*, int)>:
c0020453:	57                   	push   edi
c0020454:	56                   	push   esi
c0020455:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c002045b:	53                   	push   ebx
c002045c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020460:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020464:	85 f6                	test   esi,esi
c0020466:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002046a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020470:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020472:	75 16                	jne    c002048a <KeGetProcessEnvPair(Process*, int)+0x37>
c0020474:	39 c2                	cmp    edx,eax
c0020476:	7c 16                	jl     c002048e <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020478:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c002047e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020480:	01 c6                	add    esi,eax
c0020482:	39 d6                	cmp    esi,edx
c0020484:	7e 3c                	jle    c00204c2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020486:	29 c2                	sub    edx,eax
c0020488:	eb 04                	jmp    c002048e <KeGetProcessEnvPair(Process*, int)+0x3b>
c002048a:	39 c2                	cmp    edx,eax
c002048c:	7d 05                	jge    c0020493 <KeGetProcessEnvPair(Process*, int)+0x40>
c002048e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020491:	eb 20                	jmp    c00204b3 <KeGetProcessEnvPair(Process*, int)+0x60>
c0020493:	8b 3e                	mov    edi,DWORD PTR [esi]
c0020495:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0020498:	39 d1                	cmp    ecx,edx
c002049a:	7e 04                	jle    c00204a0 <KeGetProcessEnvPair(Process*, int)+0x4d>
c002049c:	29 c2                	sub    edx,eax
c002049e:	eb 10                	jmp    c00204b0 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00204a0:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c00204a6:	03 0e                	add    ecx,DWORD PTR [esi]
c00204a8:	39 d1                	cmp    ecx,edx
c00204aa:	7e 16                	jle    c00204c2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00204ac:	29 c2                	sub    edx,eax
c00204ae:	29 fa                	sub    edx,edi
c00204b0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00204b3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00204b6:	8b 02                	mov    eax,DWORD PTR [edx]
c00204b8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00204bb:	89 03                	mov    DWORD PTR [ebx],eax
c00204bd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00204c0:	eb 1d                	jmp    c00204df <KeGetProcessEnvPair(Process*, int)+0x8c>
c00204c2:	83 ec 0c             	sub    esp,0xc
c00204c5:	68 ee 2e 03 c0       	push   0xc0032eee
c00204ca:	e8 c7 00 00 00       	call   c0020596 <KePanic(char const*)>
c00204cf:	83 c4 10             	add    esp,0x10
c00204d2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00204d8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00204df:	89 d8                	mov    eax,ebx
c00204e1:	5b                   	pop    ebx
c00204e2:	5e                   	pop    esi
c00204e3:	5f                   	pop    edi
c00204e4:	c2 04 00             	ret    0x4

c00204e7 <CPU::current()>:
c00204e7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00204ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00204f2:	c3                   	ret    

c00204f3 <operator new(unsigned long)>:
c00204f3:	e9 a4 61 ff ff       	jmp    c001669c <malloc>

c00204f8 <operator delete(void*)>:
c00204f8:	e9 bf 61 ff ff       	jmp    c00166bc <rfree>

c00204fd <disableIRQs()>:
c00204fd:	fa                   	cli    
c00204fe:	c3                   	ret    

c00204ff <enableIRQs()>:
c00204ff:	fb                   	sti    
c0020500:	c3                   	ret    

c0020501 <lockScheduler()>:
c0020501:	fa                   	cli    
c0020502:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020508:	c3                   	ret    

c0020509 <unlockScheduler()>:
c0020509:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002050e:	48                   	dec    eax
c002050f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020514:	75 01                	jne    c0020517 <unlockScheduler()+0xe>
c0020516:	fb                   	sti    
c0020517:	c3                   	ret    

c0020518 <lockStuff()>:
c0020518:	fa                   	cli    
c0020519:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002051f:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c0020525:	c3                   	ret    

c0020526 <unlockStuff()>:
c0020526:	83 ec 0c             	sub    esp,0xc
c0020529:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002052e:	48                   	dec    eax
c002052f:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020534:	75 18                	jne    c002054e <unlockStuff()+0x28>
c0020536:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c002053d:	74 0f                	je     c002054e <unlockStuff()+0x28>
c002053f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020549:	e8 9e 50 00 00       	call   c00255ec <schedule()>
c002054e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020553:	48                   	dec    eax
c0020554:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020559:	75 01                	jne    c002055c <unlockStuff()+0x36>
c002055b:	fb                   	sti    
c002055c:	83 c4 0c             	add    esp,0xc
c002055f:	c3                   	ret    

c0020560 <Virt::getAKernelVAS()>:
c0020560:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020565:	c3                   	ret    

c0020566 <__not_memcpy>:
c0020566:	57                   	push   edi
c0020567:	56                   	push   esi
c0020568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002056c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020570:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020574:	89 c7                	mov    edi,eax
c0020576:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020578:	5e                   	pop    esi
c0020579:	5f                   	pop    edi
c002057a:	c3                   	ret    
c002057b:	90                   	nop

c002057c <Mutex::Mutex()>:
c002057c:	83 ec 0c             	sub    esp,0xc
c002057f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020583:	83 ec 08             	sub    esp,0x8
c0020586:	6a 01                	push   0x1
c0020588:	50                   	push   eax
c0020589:	e8 ae 03 00 00       	call   c002093c <Semaphore::Semaphore(int)>
c002058e:	83 c4 10             	add    esp,0x10
c0020591:	90                   	nop
c0020592:	83 c4 0c             	add    esp,0xc
c0020595:	c3                   	ret    

c0020596 <KePanic(char const*)>:
c0020596:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c002059d:	e9 19 6e 00 00       	jmp    c00273bb <HalPanic(char const*)>

c00205a2 <KePowerThread(void*)>:
c00205a2:	83 ec 0c             	sub    esp,0xc
c00205a5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00205aa:	48                   	dec    eax
c00205ab:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00205b0:	75 01                	jne    c00205b3 <KePowerThread(void*)+0x11>
c00205b2:	fb                   	sti    
c00205b3:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c00205ba:	83 ec 0c             	sub    esp,0xc
c00205bd:	6a 0a                	push   0xa
c00205bf:	e8 14 52 00 00       	call   c00257d8 <sleep(unsigned int)>
c00205c4:	83 c4 10             	add    esp,0x10
c00205c7:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c00205ce:	eb e3                	jmp    c00205b3 <KePowerThread(void*)+0x11>

c00205d0 <KeChangePowerSettings(PowerSettings)>:
c00205d0:	57                   	push   edi
c00205d1:	b9 09 00 00 00       	mov    ecx,0x9
c00205d6:	56                   	push   esi
c00205d7:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00205dc:	fc                   	cld    
c00205dd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00205e1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00205e3:	5e                   	pop    esi
c00205e4:	5f                   	pop    edi
c00205e5:	c3                   	ret    

c00205e6 <KeUserIOReceived()>:
c00205e6:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00205f0:	c3                   	ret    

c00205f1 <KeHandlePowerButton()>:
c00205f1:	83 ec 0c             	sub    esp,0xc
c00205f4:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00205f9:	83 f8 02             	cmp    eax,0x2
c00205fc:	75 10                	jne    c002060e <KeHandlePowerButton()+0x1d>
c00205fe:	83 ec 0c             	sub    esp,0xc
c0020601:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020607:	e8 8a 56 ff ff       	call   c0015c96 <Computer::shutdown()>
c002060c:	eb 11                	jmp    c002061f <KeHandlePowerButton()+0x2e>
c002060e:	48                   	dec    eax
c002060f:	75 11                	jne    c0020622 <KeHandlePowerButton()+0x31>
c0020611:	83 ec 0c             	sub    esp,0xc
c0020614:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002061a:	e8 a7 56 ff ff       	call   c0015cc6 <Computer::sleep()>
c002061f:	83 c4 10             	add    esp,0x10
c0020622:	83 c4 0c             	add    esp,0xc
c0020625:	c3                   	ret    

c0020626 <KeHandleSleepButton()>:
c0020626:	83 ec 0c             	sub    esp,0xc
c0020629:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c002062e:	83 f8 02             	cmp    eax,0x2
c0020631:	75 10                	jne    c0020643 <KeHandleSleepButton()+0x1d>
c0020633:	83 ec 0c             	sub    esp,0xc
c0020636:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002063c:	e8 55 56 ff ff       	call   c0015c96 <Computer::shutdown()>
c0020641:	eb 11                	jmp    c0020654 <KeHandleSleepButton()+0x2e>
c0020643:	48                   	dec    eax
c0020644:	75 11                	jne    c0020657 <KeHandleSleepButton()+0x31>
c0020646:	83 ec 0c             	sub    esp,0xc
c0020649:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002064f:	e8 72 56 ff ff       	call   c0015cc6 <Computer::sleep()>
c0020654:	83 c4 10             	add    esp,0x10
c0020657:	83 c4 0c             	add    esp,0xc
c002065a:	c3                   	ret    

c002065b <KeSetupPowerManager()>:
c002065b:	83 ec 0c             	sub    esp,0xc
c002065e:	68 f0 00 00 00       	push   0xf0
c0020663:	6a 00                	push   0x0
c0020665:	68 a2 05 02 c0       	push   0xc00205a2
c002066a:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020670:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c002067a:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020681:	e8 1a 4d 00 00       	call   c00253a0 <Process::createThread(void (*)(void*), void*, int)>
c0020686:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c0020690:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c002069a:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c00206a4:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c00206ae:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c00206b8:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c00206c2:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c00206cc:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00206d6:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00206e0:	83 c4 1c             	add    esp,0x1c
c00206e3:	c3                   	ret    

c00206e4 <KeRand()>:
c00206e4:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00206ee:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00206f8:	53                   	push   ebx
c00206f9:	01 c1                	add    ecx,eax
c00206fb:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0020700:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c0020706:	01 ca                	add    edx,ecx
c0020708:	05 ef 04 b5 00       	add    eax,0xb504ef
c002070d:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020712:	83 d2 00             	adc    edx,0x0
c0020715:	0f b7 da             	movzx  ebx,dx
c0020718:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c002071e:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0020722:	5b                   	pop    ebx
c0020723:	c3                   	ret    

c0020724 <KeSeedRand(unsigned int)>:
c0020724:	53                   	push   ebx
c0020725:	83 ec 08             	sub    esp,0x8
c0020728:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002072c:	e8 a9 6f 00 00       	call   c00276da <HalGetRand()>
c0020731:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c002073b:	31 d8                	xor    eax,ebx
c002073d:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020742:	e8 9d ff ff ff       	call   c00206e4 <KeRand()>
c0020747:	83 c4 08             	add    esp,0x8
c002074a:	5b                   	pop    ebx
c002074b:	eb 97                	jmp    c00206e4 <KeRand()>

c002074d <KeInitRand()>:
c002074d:	83 ec 0c             	sub    esp,0xc
c0020750:	e8 7a 6d 00 00       	call   c00274cf <HalQueryPerformanceCounter()>
c0020755:	0f 20 da             	mov    edx,cr3
c0020758:	0f 22 da             	mov    cr3,edx
c002075b:	0f 20 da             	mov    edx,cr3
c002075e:	0f 22 da             	mov    cr3,edx
c0020761:	0f 20 da             	mov    edx,cr3
c0020764:	0f 22 da             	mov    cr3,edx
c0020767:	0f 20 da             	mov    edx,cr3
c002076a:	0f 22 da             	mov    cr3,edx
c002076d:	83 ec 0c             	sub    esp,0xc
c0020770:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020775:	50                   	push   eax
c0020776:	e8 a9 ff ff ff       	call   c0020724 <KeSeedRand(unsigned int)>
c002077b:	83 c4 1c             	add    esp,0x1c
c002077e:	c3                   	ret    
c002077f:	90                   	nop

c0020780 <KeResolveCompatibilitySymbol(char*)>:
c0020780:	83 ec 0c             	sub    esp,0xc
c0020783:	83 ec 08             	sub    esp,0x8
c0020786:	68 08 2f 03 c0       	push   0xc0032f08
c002078b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002078f:	e8 ec ff fd ff       	call   c0000780 <strcmp>
c0020794:	83 c4 10             	add    esp,0x10
c0020797:	85 c0                	test   eax,eax
c0020799:	0f 94 c0             	sete   al
c002079c:	0f b6 c0             	movzx  eax,al
c002079f:	85 c0                	test   eax,eax
c00207a1:	74 0d                	je     c00207b0 <KeResolveCompatibilitySymbol(char*)+0x30>
c00207a3:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c00207a8:	e9 8b 01 00 00       	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207ad:	8d 76 00             	lea    esi,[esi+0x0]
c00207b0:	83 ec 08             	sub    esp,0x8
c00207b3:	68 11 2f 03 c0       	push   0xc0032f11
c00207b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207bc:	e8 bf ff fd ff       	call   c0000780 <strcmp>
c00207c1:	83 c4 10             	add    esp,0x10
c00207c4:	85 c0                	test   eax,eax
c00207c6:	0f 94 c0             	sete   al
c00207c9:	0f b6 c0             	movzx  eax,al
c00207cc:	85 c0                	test   eax,eax
c00207ce:	74 0c                	je     c00207dc <KeResolveCompatibilitySymbol(char*)+0x5c>
c00207d0:	b8 80 eb 02 c0       	mov    eax,0xc002eb80
c00207d5:	e9 5e 01 00 00       	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207da:	66 90                	xchg   ax,ax
c00207dc:	83 ec 08             	sub    esp,0x8
c00207df:	68 1b 2f 03 c0       	push   0xc0032f1b
c00207e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207e8:	e8 93 ff fd ff       	call   c0000780 <strcmp>
c00207ed:	83 c4 10             	add    esp,0x10
c00207f0:	85 c0                	test   eax,eax
c00207f2:	0f 94 c0             	sete   al
c00207f5:	0f b6 c0             	movzx  eax,al
c00207f8:	85 c0                	test   eax,eax
c00207fa:	74 0c                	je     c0020808 <KeResolveCompatibilitySymbol(char*)+0x88>
c00207fc:	b8 b4 e8 02 c0       	mov    eax,0xc002e8b4
c0020801:	e9 32 01 00 00       	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020806:	66 90                	xchg   ax,ax
c0020808:	83 ec 08             	sub    esp,0x8
c002080b:	68 24 2f 03 c0       	push   0xc0032f24
c0020810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020814:	e8 67 ff fd ff       	call   c0000780 <strcmp>
c0020819:	83 c4 10             	add    esp,0x10
c002081c:	85 c0                	test   eax,eax
c002081e:	0f 94 c0             	sete   al
c0020821:	0f b6 c0             	movzx  eax,al
c0020824:	85 c0                	test   eax,eax
c0020826:	74 0c                	je     c0020834 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020828:	b8 96 05 02 c0       	mov    eax,0xc0020596
c002082d:	e9 06 01 00 00       	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020832:	66 90                	xchg   ax,ax
c0020834:	83 ec 08             	sub    esp,0x8
c0020837:	68 37 2f 03 c0       	push   0xc0032f37
c002083c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020840:	e8 3b ff fd ff       	call   c0000780 <strcmp>
c0020845:	83 c4 10             	add    esp,0x10
c0020848:	85 c0                	test   eax,eax
c002084a:	0f 94 c0             	sete   al
c002084d:	0f b6 c0             	movzx  eax,al
c0020850:	85 c0                	test   eax,eax
c0020852:	74 0c                	je     c0020860 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020854:	b8 35 fe 01 c0       	mov    eax,0xc001fe35
c0020859:	e9 da 00 00 00       	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002085e:	66 90                	xchg   ax,ax
c0020860:	83 ec 08             	sub    esp,0x8
c0020863:	68 54 2f 03 c0       	push   0xc0032f54
c0020868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002086c:	e8 0f ff fd ff       	call   c0000780 <strcmp>
c0020871:	83 c4 10             	add    esp,0x10
c0020874:	85 c0                	test   eax,eax
c0020876:	0f 94 c0             	sete   al
c0020879:	0f b6 c0             	movzx  eax,al
c002087c:	85 c0                	test   eax,eax
c002087e:	74 0c                	je     c002088c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020880:	b8 80 ec 02 c0       	mov    eax,0xc002ec80
c0020885:	e9 ae 00 00 00       	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002088a:	66 90                	xchg   ax,ax
c002088c:	83 ec 08             	sub    esp,0x8
c002088f:	68 5e 2f 03 c0       	push   0xc0032f5e
c0020894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020898:	e8 e3 fe fd ff       	call   c0000780 <strcmp>
c002089d:	83 c4 10             	add    esp,0x10
c00208a0:	85 c0                	test   eax,eax
c00208a2:	0f 94 c0             	sete   al
c00208a5:	0f b6 c0             	movzx  eax,al
c00208a8:	85 c0                	test   eax,eax
c00208aa:	74 0c                	je     c00208b8 <KeResolveCompatibilitySymbol(char*)+0x138>
c00208ac:	b8 00 ea 02 c0       	mov    eax,0xc002ea00
c00208b1:	e9 82 00 00 00       	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00208b6:	66 90                	xchg   ax,ax
c00208b8:	83 ec 08             	sub    esp,0x8
c00208bb:	68 67 2f 03 c0       	push   0xc0032f67
c00208c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208c4:	e8 b7 fe fd ff       	call   c0000780 <strcmp>
c00208c9:	83 c4 10             	add    esp,0x10
c00208cc:	85 c0                	test   eax,eax
c00208ce:	0f 94 c0             	sete   al
c00208d1:	0f b6 c0             	movzx  eax,al
c00208d4:	85 c0                	test   eax,eax
c00208d6:	74 08                	je     c00208e0 <KeResolveCompatibilitySymbol(char*)+0x160>
c00208d8:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00208dd:	eb 59                	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00208df:	90                   	nop
c00208e0:	83 ec 08             	sub    esp,0x8
c00208e3:	68 7f 2f 03 c0       	push   0xc0032f7f
c00208e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208ec:	e8 8f fe fd ff       	call   c0000780 <strcmp>
c00208f1:	83 c4 10             	add    esp,0x10
c00208f4:	85 c0                	test   eax,eax
c00208f6:	0f 94 c0             	sete   al
c00208f9:	0f b6 c0             	movzx  eax,al
c00208fc:	85 c0                	test   eax,eax
c00208fe:	74 08                	je     c0020908 <KeResolveCompatibilitySymbol(char*)+0x188>
c0020900:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020905:	eb 31                	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020907:	90                   	nop
c0020908:	83 ec 08             	sub    esp,0x8
c002090b:	68 8c 2f 03 c0       	push   0xc0032f8c
c0020910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020914:	e8 67 fe fd ff       	call   c0000780 <strcmp>
c0020919:	83 c4 10             	add    esp,0x10
c002091c:	85 c0                	test   eax,eax
c002091e:	0f 94 c0             	sete   al
c0020921:	0f b6 c0             	movzx  eax,al
c0020924:	85 c0                	test   eax,eax
c0020926:	74 08                	je     c0020930 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020928:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c002092d:	eb 09                	jmp    c0020938 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002092f:	90                   	nop
c0020930:	b8 00 00 00 00       	mov    eax,0x0
c0020935:	8d 76 00             	lea    esi,[esi+0x0]
c0020938:	83 c4 0c             	add    esp,0xc
c002093b:	c3                   	ret    

c002093c <Semaphore::Semaphore(int)>:
c002093c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020940:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020944:	89 10                	mov    DWORD PTR [eax],edx
c0020946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002094a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020955:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002095c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020960:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020967:	90                   	nop
c0020968:	c3                   	ret    
c0020969:	90                   	nop
c002096a:	66 90                	xchg   ax,ax

c002096c <Semaphore::tryAcquire()>:
c002096c:	83 ec 0c             	sub    esp,0xc
c002096f:	fa                   	cli    
c0020970:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020975:	83 c0 01             	add    eax,0x1
c0020978:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002097d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020982:	83 c0 01             	add    eax,0x1
c0020985:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002098a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002098e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020995:	8b 00                	mov    eax,DWORD PTR [eax]
c0020997:	39 c2                	cmp    edx,eax
c0020999:	7d 5d                	jge    c00209f8 <Semaphore::tryAcquire()+0x8c>
c002099b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002099f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00209a2:	8d 50 01             	lea    edx,[eax+0x1]
c00209a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00209ac:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209b1:	83 e8 01             	sub    eax,0x1
c00209b4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209b9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209be:	85 c0                	test   eax,eax
c00209c0:	75 1a                	jne    c00209dc <Semaphore::tryAcquire()+0x70>
c00209c2:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00209c7:	85 c0                	test   eax,eax
c00209c9:	74 11                	je     c00209dc <Semaphore::tryAcquire()+0x70>
c00209cb:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00209d5:	e8 12 4c 00 00       	call   c00255ec <schedule()>
c00209da:	66 90                	xchg   ax,ax
c00209dc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00209e1:	83 e8 01             	sub    eax,0x1
c00209e4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00209e9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00209ee:	85 c0                	test   eax,eax
c00209f0:	75 02                	jne    c00209f4 <Semaphore::tryAcquire()+0x88>
c00209f2:	fb                   	sti    
c00209f3:	90                   	nop
c00209f4:	b0 01                	mov    al,0x1
c00209f6:	eb 4c                	jmp    c0020a44 <Semaphore::tryAcquire()+0xd8>
c00209f8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209fd:	83 e8 01             	sub    eax,0x1
c0020a00:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020a05:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020a0a:	85 c0                	test   eax,eax
c0020a0c:	75 1a                	jne    c0020a28 <Semaphore::tryAcquire()+0xbc>
c0020a0e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020a13:	85 c0                	test   eax,eax
c0020a15:	74 11                	je     c0020a28 <Semaphore::tryAcquire()+0xbc>
c0020a17:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020a21:	e8 c6 4b 00 00       	call   c00255ec <schedule()>
c0020a26:	66 90                	xchg   ax,ax
c0020a28:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a2d:	83 e8 01             	sub    eax,0x1
c0020a30:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a35:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a3a:	85 c0                	test   eax,eax
c0020a3c:	75 02                	jne    c0020a40 <Semaphore::tryAcquire()+0xd4>
c0020a3e:	fb                   	sti    
c0020a3f:	90                   	nop
c0020a40:	b0 00                	mov    al,0x0
c0020a42:	66 90                	xchg   ax,ax
c0020a44:	83 c4 0c             	add    esp,0xc
c0020a47:	c3                   	ret    

c0020a48 <Semaphore::assertLocked(char const*)>:
c0020a48:	83 ec 0c             	sub    esp,0xc
c0020a4b:	fa                   	cli    
c0020a4c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a51:	83 c0 01             	add    eax,0x1
c0020a54:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a59:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020a5e:	83 c0 01             	add    eax,0x1
c0020a61:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a6a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a71:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a73:	39 c2                	cmp    edx,eax
c0020a75:	7d 11                	jge    c0020a88 <Semaphore::assertLocked(char const*)+0x40>
c0020a77:	83 ec 0c             	sub    esp,0xc
c0020a7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020a7e:	e8 13 fb ff ff       	call   c0020596 <KePanic(char const*)>
c0020a83:	83 c4 10             	add    esp,0x10
c0020a86:	66 90                	xchg   ax,ax
c0020a88:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020a8d:	83 e8 01             	sub    eax,0x1
c0020a90:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020a95:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020a9a:	85 c0                	test   eax,eax
c0020a9c:	75 1a                	jne    c0020ab8 <Semaphore::assertLocked(char const*)+0x70>
c0020a9e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020aa3:	85 c0                	test   eax,eax
c0020aa5:	74 11                	je     c0020ab8 <Semaphore::assertLocked(char const*)+0x70>
c0020aa7:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020ab1:	e8 36 4b 00 00       	call   c00255ec <schedule()>
c0020ab6:	66 90                	xchg   ax,ax
c0020ab8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020abd:	83 e8 01             	sub    eax,0x1
c0020ac0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020ac5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020aca:	85 c0                	test   eax,eax
c0020acc:	75 02                	jne    c0020ad0 <Semaphore::assertLocked(char const*)+0x88>
c0020ace:	fb                   	sti    
c0020acf:	90                   	nop
c0020ad0:	90                   	nop
c0020ad1:	83 c4 0c             	add    esp,0xc
c0020ad4:	c3                   	ret    
c0020ad5:	90                   	nop
c0020ad6:	66 90                	xchg   ax,ax

c0020ad8 <Semaphore::acquire(int)>:
c0020ad8:	83 ec 1c             	sub    esp,0x1c
c0020adb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ae0:	0f 84 9a 00 00 00    	je     c0020b80 <Semaphore::acquire(int)+0xa8>
c0020ae6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020aee:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0020af3:	90                   	nop
c0020af4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0020af9:	85 c0                	test   eax,eax
c0020afb:	74 77                	je     c0020b74 <Semaphore::acquire(int)+0x9c>
c0020afd:	83 ec 0c             	sub    esp,0xc
c0020b00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b04:	e8 63 fe ff ff       	call   c002096c <Semaphore::tryAcquire()>
c0020b09:	83 c4 10             	add    esp,0x10
c0020b0c:	83 f0 01             	xor    eax,0x1
c0020b0f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020b13:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0020b17:	83 f0 01             	xor    eax,0x1
c0020b1a:	0f b6 c0             	movzx  eax,al
c0020b1d:	85 c0                	test   eax,eax
c0020b1f:	75 4f                	jne    c0020b70 <Semaphore::acquire(int)+0x98>
c0020b21:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0020b26:	7f 2c                	jg     c0020b54 <Semaphore::acquire(int)+0x7c>
c0020b28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020b2c:	89 d0                	mov    eax,edx
c0020b2e:	c1 e0 02             	shl    eax,0x2
c0020b31:	01 d0                	add    eax,edx
c0020b33:	d1 e0                	shl    eax,1
c0020b35:	83 ec 0c             	sub    esp,0xc
c0020b38:	50                   	push   eax
c0020b39:	e8 86 4c 00 00       	call   c00257c4 <milliTenthSleep(unsigned int)>
c0020b3e:	83 c4 10             	add    esp,0x10
c0020b41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020b45:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020b49:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020b51:	eb a1                	jmp    c0020af4 <Semaphore::acquire(int)+0x1c>
c0020b53:	90                   	nop
c0020b54:	83 ec 0c             	sub    esp,0xc
c0020b57:	68 90 01 00 00       	push   0x190
c0020b5c:	e8 63 4c 00 00       	call   c00257c4 <milliTenthSleep(unsigned int)>
c0020b61:	83 c4 10             	add    esp,0x10
c0020b64:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020b69:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020b6e:	eb 84                	jmp    c0020af4 <Semaphore::acquire(int)+0x1c>
c0020b70:	90                   	nop
c0020b71:	8d 76 00             	lea    esi,[esi+0x0]
c0020b74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b78:	e9 ff 00 00 00       	jmp    c0020c7c <Semaphore::acquire(int)+0x1a4>
c0020b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0020b80:	fa                   	cli    
c0020b81:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020b86:	83 c0 01             	add    eax,0x1
c0020b89:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020b8e:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020b93:	83 c0 01             	add    eax,0x1
c0020b96:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b9f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020ba2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ba8:	39 c2                	cmp    edx,eax
c0020baa:	7d 14                	jge    c0020bc0 <Semaphore::acquire(int)+0xe8>
c0020bac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020bb3:	8d 50 01             	lea    edx,[eax+0x1]
c0020bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020bbd:	eb 6d                	jmp    c0020c2c <Semaphore::acquire(int)+0x154>
c0020bbf:	90                   	nop
c0020bc0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020bc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bc7:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020bd5:	85 c0                	test   eax,eax
c0020bd7:	75 13                	jne    c0020bec <Semaphore::acquire(int)+0x114>
c0020bd9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020bde:	8b 10                	mov    edx,DWORD PTR [eax]
c0020be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020be7:	eb 17                	jmp    c0020c00 <Semaphore::acquire(int)+0x128>
c0020be9:	8d 76 00             	lea    esi,[esi+0x0]
c0020bec:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0020bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020bf8:	8b 12                	mov    edx,DWORD PTR [edx]
c0020bfa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0020c00:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020c05:	8b 10                	mov    edx,DWORD PTR [eax]
c0020c07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c0b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020c0e:	83 ec 0c             	sub    esp,0xc
c0020c11:	68 9c 2f 03 c0       	push   0xc0032f9c
c0020c16:	e8 b7 88 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0020c1b:	83 c4 10             	add    esp,0x10
c0020c1e:	83 ec 0c             	sub    esp,0xc
c0020c21:	6a 05                	push   0x5
c0020c23:	e8 80 4a 00 00       	call   c00256a8 <blockTask(TaskState)>
c0020c28:	83 c4 10             	add    esp,0x10
c0020c2b:	90                   	nop
c0020c2c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020c31:	83 e8 01             	sub    eax,0x1
c0020c34:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020c39:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020c3e:	85 c0                	test   eax,eax
c0020c40:	75 1a                	jne    c0020c5c <Semaphore::acquire(int)+0x184>
c0020c42:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020c47:	85 c0                	test   eax,eax
c0020c49:	74 11                	je     c0020c5c <Semaphore::acquire(int)+0x184>
c0020c4b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020c55:	e8 92 49 00 00       	call   c00255ec <schedule()>
c0020c5a:	66 90                	xchg   ax,ax
c0020c5c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c61:	83 e8 01             	sub    eax,0x1
c0020c64:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020c69:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c6e:	85 c0                	test   eax,eax
c0020c70:	75 02                	jne    c0020c74 <Semaphore::acquire(int)+0x19c>
c0020c72:	fb                   	sti    
c0020c73:	90                   	nop
c0020c74:	b8 00 00 00 00       	mov    eax,0x0
c0020c79:	8d 76 00             	lea    esi,[esi+0x0]
c0020c7c:	83 c4 1c             	add    esp,0x1c
c0020c7f:	c3                   	ret    

c0020c80 <Semaphore::acquire()>:
c0020c80:	83 ec 0c             	sub    esp,0xc
c0020c83:	83 ec 08             	sub    esp,0x8
c0020c86:	6a 00                	push   0x0
c0020c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c8c:	e8 47 fe ff ff       	call   c0020ad8 <Semaphore::acquire(int)>
c0020c91:	83 c4 10             	add    esp,0x10
c0020c94:	90                   	nop
c0020c95:	83 c4 0c             	add    esp,0xc
c0020c98:	c3                   	ret    
c0020c99:	90                   	nop
c0020c9a:	66 90                	xchg   ax,ax

c0020c9c <Semaphore::release()>:
c0020c9c:	83 ec 1c             	sub    esp,0x1c
c0020c9f:	fa                   	cli    
c0020ca0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020ca5:	83 c0 01             	add    eax,0x1
c0020ca8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020cad:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020cb2:	83 c0 01             	add    eax,0x1
c0020cb5:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020cc1:	85 c0                	test   eax,eax
c0020cc3:	74 2b                	je     c0020cf0 <Semaphore::release()+0x54>
c0020cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cd4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020cd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cdb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020cde:	83 ec 0c             	sub    esp,0xc
c0020ce1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ce5:	e8 ee 4b 00 00       	call   c00258d8 <unblockTask(ThreadControlBlock*)>
c0020cea:	83 c4 10             	add    esp,0x10
c0020ced:	eb 15                	jmp    c0020d04 <Semaphore::release()+0x68>
c0020cef:	90                   	nop
c0020cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cf4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020cf7:	8d 50 ff             	lea    edx,[eax-0x1]
c0020cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020d01:	8d 76 00             	lea    esi,[esi+0x0]
c0020d04:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020d09:	83 e8 01             	sub    eax,0x1
c0020d0c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020d11:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020d16:	85 c0                	test   eax,eax
c0020d18:	75 1a                	jne    c0020d34 <Semaphore::release()+0x98>
c0020d1a:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020d1f:	85 c0                	test   eax,eax
c0020d21:	74 11                	je     c0020d34 <Semaphore::release()+0x98>
c0020d23:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020d2d:	e8 ba 48 00 00       	call   c00255ec <schedule()>
c0020d32:	66 90                	xchg   ax,ax
c0020d34:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020d39:	83 e8 01             	sub    eax,0x1
c0020d3c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020d41:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020d46:	85 c0                	test   eax,eax
c0020d48:	75 02                	jne    c0020d4c <Semaphore::release()+0xb0>
c0020d4a:	fb                   	sti    
c0020d4b:	90                   	nop
c0020d4c:	90                   	nop
c0020d4d:	83 c4 1c             	add    esp,0x1c
c0020d50:	c3                   	ret    

c0020d51 <KiSigKill(int)>:
c0020d51:	83 ec 0c             	sub    esp,0xc
c0020d54:	6a 00                	push   0x0
c0020d56:	6a 00                	push   0x0
c0020d58:	6a ff                	push   0xffffffff
c0020d5a:	6a 01                	push   0x1
c0020d5c:	e8 f1 42 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020d61:	83 c4 1c             	add    esp,0x1c
c0020d64:	c3                   	ret    

c0020d65 <KiDefaultSignalHandlerIgnore(int)>:
c0020d65:	c3                   	ret    

c0020d66 <KiDefaultSignalHandlerPause(int)>:
c0020d66:	57                   	push   edi
c0020d67:	b9 07 00 00 00       	mov    ecx,0x7
c0020d6c:	56                   	push   esi
c0020d6d:	be f7 2f 03 c0       	mov    esi,0xc0032ff7
c0020d72:	83 ec 24             	sub    esp,0x24
c0020d75:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020d79:	fc                   	cld    
c0020d7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020d7c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020d80:	50                   	push   eax
c0020d81:	6a 00                	push   0x0
c0020d83:	6a 00                	push   0x0
c0020d85:	6a 27                	push   0x27
c0020d87:	e8 c6 42 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020d8c:	83 c4 34             	add    esp,0x34
c0020d8f:	5e                   	pop    esi
c0020d90:	5f                   	pop    edi
c0020d91:	c3                   	ret    

c0020d92 <KiDefaultSignalHandlerResume(int)>:
c0020d92:	57                   	push   edi
c0020d93:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020d98:	56                   	push   esi
c0020d99:	be 13 30 03 c0       	mov    esi,0xc0033013
c0020d9e:	83 ec 24             	sub    esp,0x24
c0020da1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020da5:	fc                   	cld    
c0020da6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020da8:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020dac:	50                   	push   eax
c0020dad:	6a 00                	push   0x0
c0020daf:	6a 00                	push   0x0
c0020db1:	6a 27                	push   0x27
c0020db3:	e8 9a 42 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020db8:	83 c4 34             	add    esp,0x34
c0020dbb:	5e                   	pop    esi
c0020dbc:	5f                   	pop    edi
c0020dbd:	c3                   	ret    

c0020dbe <KeDeinitSignals(SigHandlerBlock*)>:
c0020dbe:	e9 e9 58 ff ff       	jmp    c00166ac <free>

c0020dc3 <KeInitSignals()>:
c0020dc3:	53                   	push   ebx
c0020dc4:	83 ec 14             	sub    esp,0x14
c0020dc7:	68 c8 00 00 00       	push   0xc8
c0020dcc:	e8 cb 58 ff ff       	call   c001669c <malloc>
c0020dd1:	83 c4 0c             	add    esp,0xc
c0020dd4:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020dde:	89 c3                	mov    ebx,eax
c0020de0:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020dea:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020df0:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0020df4:	6a 20                	push   0x20
c0020df6:	6a 00                	push   0x0
c0020df8:	50                   	push   eax
c0020df9:	e8 f2 f6 fd ff       	call   c00004f0 <memset>
c0020dfe:	83 c4 0c             	add    esp,0xc
c0020e01:	6a 44                	push   0x44
c0020e03:	6a 00                	push   0x0
c0020e05:	53                   	push   ebx
c0020e06:	e8 e5 f6 fd ff       	call   c00004f0 <memset>
c0020e0b:	83 c4 18             	add    esp,0x18
c0020e0e:	89 d8                	mov    eax,ebx
c0020e10:	5b                   	pop    ebx
c0020e11:	c3                   	ret    

c0020e12 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020e12:	53                   	push   ebx
c0020e13:	b8 01 00 00 00       	mov    eax,0x1
c0020e18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020e1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e20:	83 f9 10             	cmp    ecx,0x10
c0020e23:	7f 21                	jg     c0020e46 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e29:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020e2c:	89 03                	mov    DWORD PTR [ebx],eax
c0020e2e:	b8 01 00 00 00       	mov    eax,0x1
c0020e33:	d3 e0                	shl    eax,cl
c0020e35:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020e39:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020e3c:	31 c0                	xor    eax,eax
c0020e3e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020e46:	5b                   	pop    ebx
c0020e47:	c3                   	ret    

c0020e48 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020e48:	55                   	push   ebp
c0020e49:	57                   	push   edi
c0020e4a:	bf 08 00 00 00       	mov    edi,0x8
c0020e4f:	56                   	push   esi
c0020e50:	53                   	push   ebx
c0020e51:	83 ec 18             	sub    esp,0x18
c0020e54:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020e58:	68 30 30 03 c0       	push   0xc0033030
c0020e5d:	e8 70 86 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0020e62:	83 c4 10             	add    esp,0x10
c0020e65:	31 c9                	xor    ecx,ecx
c0020e67:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020e6e:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020e74:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020e78:	99                   	cdq    
c0020e79:	f7 ff                	idiv   edi
c0020e7b:	8d 42 24             	lea    eax,[edx+0x24]
c0020e7e:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020e82:	85 f6                	test   esi,esi
c0020e84:	75 1a                	jne    c0020ea0 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020e86:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020e8a:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020e8e:	50                   	push   eax
c0020e8f:	50                   	push   eax
c0020e90:	52                   	push   edx
c0020e91:	68 41 30 03 c0       	push   0xc0033041
c0020e96:	e8 37 86 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0020e9b:	83 c4 10             	add    esp,0x10
c0020e9e:	eb 1b                	jmp    c0020ebb <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020ea0:	41                   	inc    ecx
c0020ea1:	83 f9 08             	cmp    ecx,0x8
c0020ea4:	75 ce                	jne    c0020e74 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020ea6:	83 ec 0c             	sub    esp,0xc
c0020ea9:	be 01 00 00 00       	mov    esi,0x1
c0020eae:	68 62 30 03 c0       	push   0xc0033062
c0020eb3:	e8 1a 86 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0020eb8:	83 c4 10             	add    esp,0x10
c0020ebb:	83 c4 0c             	add    esp,0xc
c0020ebe:	89 f0                	mov    eax,esi
c0020ec0:	5b                   	pop    ebx
c0020ec1:	5e                   	pop    esi
c0020ec2:	5f                   	pop    edi
c0020ec3:	5d                   	pop    ebp
c0020ec4:	c3                   	ret    

c0020ec5 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020ec5:	55                   	push   ebp
c0020ec6:	57                   	push   edi
c0020ec7:	56                   	push   esi
c0020ec8:	53                   	push   ebx
c0020ec9:	51                   	push   ecx
c0020eca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020ece:	85 db                	test   ebx,ebx
c0020ed0:	0f 84 bc 00 00 00    	je     c0020f92 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020ed6:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020edd:	0f 84 af 00 00 00    	je     c0020f92 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020ee3:	31 c9                	xor    ecx,ecx
c0020ee5:	bf 08 00 00 00       	mov    edi,0x8
c0020eea:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020ef0:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020ef3:	99                   	cdq    
c0020ef4:	f7 ff                	idiv   edi
c0020ef6:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020efd:	85 ed                	test   ebp,ebp
c0020eff:	0f 84 9e 00 00 00    	je     c0020fa3 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020f05:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020f0b:	89 e9                	mov    ecx,ebp
c0020f0d:	bf 01 00 00 00       	mov    edi,0x1
c0020f12:	d3 e7                	shl    edi,cl
c0020f14:	31 c9                	xor    ecx,ecx
c0020f16:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f19:	b8 01 00 00 00       	mov    eax,0x1
c0020f1e:	d3 e0                	shl    eax,cl
c0020f20:	85 04 24             	test   DWORD PTR [esp],eax
c0020f23:	74 06                	je     c0020f2b <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020f25:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020f29:	75 67                	jne    c0020f92 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020f2b:	41                   	inc    ecx
c0020f2c:	83 f9 11             	cmp    ecx,0x11
c0020f2f:	75 e8                	jne    c0020f19 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020f31:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020f34:	46                   	inc    esi
c0020f35:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020f3b:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020f46:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020f4d:	09 f8                	or     eax,edi
c0020f4f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020f55:	31 c0                	xor    eax,eax
c0020f57:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020f5f:	74 09                	je     c0020f6a <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020f61:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020f68:	eb 06                	jmp    c0020f70 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020f6a:	40                   	inc    eax
c0020f6b:	83 f8 08             	cmp    eax,0x8
c0020f6e:	75 e7                	jne    c0020f57 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020f70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f74:	83 fd 09             	cmp    ebp,0x9
c0020f77:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020f7a:	89 2a                	mov    DWORD PTR [edx],ebp
c0020f7c:	75 07                	jne    c0020f85 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020f7e:	b8 51 0d 02 c0       	mov    eax,0xc0020d51
c0020f83:	eb 31                	jmp    c0020fb6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020f85:	83 f8 01             	cmp    eax,0x1
c0020f88:	75 0c                	jne    c0020f96 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020f8a:	f7 d7                	not    edi
c0020f8c:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020f92:	31 c0                	xor    eax,eax
c0020f94:	eb 20                	jmp    c0020fb6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020f96:	85 c0                	test   eax,eax
c0020f98:	75 1c                	jne    c0020fb6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020f9a:	8b 04 ad 20 49 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcb6e0]
c0020fa1:	eb 13                	jmp    c0020fb6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020fa3:	41                   	inc    ecx
c0020fa4:	46                   	inc    esi
c0020fa5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020fab:	83 f9 08             	cmp    ecx,0x8
c0020fae:	0f 85 36 ff ff ff    	jne    c0020eea <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020fb4:	eb dc                	jmp    c0020f92 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020fb6:	5a                   	pop    edx
c0020fb7:	5b                   	pop    ebx
c0020fb8:	5e                   	pop    esi
c0020fb9:	5f                   	pop    edi
c0020fba:	5d                   	pop    ebp
c0020fbb:	c3                   	ret    

c0020fbc <KiCheckSignalZ>:
c0020fbc:	83 ec 10             	sub    esp,0x10
c0020fbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fc3:	50                   	push   eax
c0020fc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020fc9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020fcc:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020fd2:	e8 ee fe ff ff       	call   c0020ec5 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020fd7:	5a                   	pop    edx
c0020fd8:	31 d2                	xor    edx,edx
c0020fda:	59                   	pop    ecx
c0020fdb:	85 c0                	test   eax,eax
c0020fdd:	74 19                	je     c0020ff8 <KiCheckSignalZ+0x3c>
c0020fdf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020fe5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020fe8:	89 02                	mov    DWORD PTR [edx],eax
c0020fea:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020ff1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ff5:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020ff8:	89 d0                	mov    eax,edx
c0020ffa:	83 c4 10             	add    esp,0x10
c0020ffd:	c3                   	ret    

c0020ffe <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020ffe:	56                   	push   esi
c0020fff:	53                   	push   ebx
c0021000:	bb 01 00 00 00       	mov    ebx,0x1
c0021005:	52                   	push   edx
c0021006:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002100a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002100e:	d3 e3                	shl    ebx,cl
c0021010:	83 f9 10             	cmp    ecx,0x10
c0021013:	7f 08                	jg     c002101d <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0021015:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c002101b:	75 10                	jne    c002102d <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c002101d:	83 ec 0c             	sub    esp,0xc
c0021020:	68 73 30 03 c0       	push   0xc0033073
c0021025:	e8 6c f5 ff ff       	call   c0020596 <KePanic(char const*)>
c002102a:	83 c4 10             	add    esp,0x10
c002102d:	f7 d3                	not    ebx
c002102f:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0021035:	58                   	pop    eax
c0021036:	5b                   	pop    ebx
c0021037:	5e                   	pop    esi
c0021038:	c3                   	ret    

c0021039 <KiFinishSignalZ>:
c0021039:	53                   	push   ebx
c002103a:	83 ec 10             	sub    esp,0x10
c002103d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021041:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0021044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021049:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002104c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0021052:	e8 a7 ff ff ff       	call   c0020ffe <KeCompleteSignal(SigHandlerBlock*, int)>
c0021057:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002105d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021064:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c002106b:	83 c4 18             	add    esp,0x18
c002106e:	5b                   	pop    ebx
c002106f:	c3                   	ret    

c0021070 <SysSeekDir(regs*)>:
c0021070:	31 c0                	xor    eax,eax
c0021072:	31 d2                	xor    edx,edx
c0021074:	c3                   	ret    

c0021075 <SysTellDir(regs*)>:
c0021075:	31 c0                	xor    eax,eax
c0021077:	31 d2                	xor    edx,edx
c0021079:	c3                   	ret    

c002107a <SysVerify(regs*)>:
c002107a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002107e:	31 d2                	xor    edx,edx
c0021080:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021083:	c3                   	ret    

c0021084 <SysGetArgc(regs*)>:
c0021084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021089:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002108c:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0021092:	89 c2                	mov    edx,eax
c0021094:	c1 fa 1f             	sar    edx,0x1f
c0021097:	c3                   	ret    

c0021098 <SysTTYName(regs*)>:
c0021098:	b8 01 00 00 00       	mov    eax,0x1
c002109d:	31 d2                	xor    edx,edx
c002109f:	c3                   	ret    

c00210a0 <SysFormatDisk(regs*)>:
c00210a0:	56                   	push   esi
c00210a1:	53                   	push   ebx
c00210a2:	83 ec 04             	sub    esp,0x4
c00210a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00210a9:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c00210af:	eb 2a                	jmp    c00210db <SysFormatDisk(regs*)+0x3b>
c00210b1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00210b4:	83 ec 0c             	sub    esp,0xc
c00210b7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00210ba:	8b 13                	mov    edx,DWORD PTR [ebx]
c00210bc:	51                   	push   ecx
c00210bd:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00210c0:	51                   	push   ecx
c00210c1:	50                   	push   eax
c00210c2:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c00210c9:	50                   	push   eax
c00210ca:	53                   	push   ebx
c00210cb:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00210ce:	83 c4 20             	add    esp,0x20
c00210d1:	83 f8 08             	cmp    eax,0x8
c00210d4:	89 c1                	mov    ecx,eax
c00210d6:	75 14                	jne    c00210ec <SysFormatDisk(regs*)+0x4c>
c00210d8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00210db:	85 db                	test   ebx,ebx
c00210dd:	75 d2                	jne    c00210b1 <SysFormatDisk(regs*)+0x11>
c00210df:	b8 03 00 00 00       	mov    eax,0x3
c00210e4:	31 d2                	xor    edx,edx
c00210e6:	83 c4 04             	add    esp,0x4
c00210e9:	5b                   	pop    ebx
c00210ea:	5e                   	pop    esi
c00210eb:	c3                   	ret    
c00210ec:	85 c0                	test   eax,eax
c00210ee:	74 13                	je     c0021103 <SysFormatDisk(regs*)+0x63>
c00210f0:	31 d2                	xor    edx,edx
c00210f2:	83 f9 09             	cmp    ecx,0x9
c00210f5:	b8 01 00 00 00       	mov    eax,0x1
c00210fa:	74 ea                	je     c00210e6 <SysFormatDisk(regs*)+0x46>
c00210fc:	b8 02 00 00 00       	mov    eax,0x2
c0021101:	eb e1                	jmp    c00210e4 <SysFormatDisk(regs*)+0x44>
c0021103:	31 c0                	xor    eax,eax
c0021105:	eb dd                	jmp    c00210e4 <SysFormatDisk(regs*)+0x44>

c0021107 <SysSetDiskVolumeLabel(regs*)>:
c0021107:	56                   	push   esi
c0021108:	53                   	push   ebx
c0021109:	83 ec 04             	sub    esp,0x4
c002110c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021110:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021113:	83 f8 19             	cmp    eax,0x19
c0021116:	77 33                	ja     c002114b <SysSetDiskVolumeLabel(regs*)+0x44>
c0021118:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c002111f:	85 c9                	test   ecx,ecx
c0021121:	74 28                	je     c002114b <SysSetDiskVolumeLabel(regs*)+0x44>
c0021123:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0021126:	85 db                	test   ebx,ebx
c0021128:	74 21                	je     c002114b <SysSetDiskVolumeLabel(regs*)+0x44>
c002112a:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0021130:	85 d2                	test   edx,edx
c0021132:	74 17                	je     c002114b <SysSetDiskVolumeLabel(regs*)+0x44>
c0021134:	8b 32                	mov    esi,DWORD PTR [edx]
c0021136:	53                   	push   ebx
c0021137:	50                   	push   eax
c0021138:	51                   	push   ecx
c0021139:	52                   	push   edx
c002113a:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c002113d:	83 c4 10             	add    esp,0x10
c0021140:	83 c4 04             	add    esp,0x4
c0021143:	5b                   	pop    ebx
c0021144:	5e                   	pop    esi
c0021145:	89 c2                	mov    edx,eax
c0021147:	c1 fa 1f             	sar    edx,0x1f
c002114a:	c3                   	ret    
c002114b:	83 c4 04             	add    esp,0x4
c002114e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0021153:	5b                   	pop    ebx
c0021154:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021159:	5e                   	pop    esi
c002115a:	c3                   	ret    

c002115b <SysGetDiskVolumeLabel(regs*)>:
c002115b:	57                   	push   edi
c002115c:	56                   	push   esi
c002115d:	53                   	push   ebx
c002115e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021162:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021165:	83 fa 19             	cmp    edx,0x19
c0021168:	77 3c                	ja     c00211a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c002116a:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0021171:	85 c9                	test   ecx,ecx
c0021173:	74 31                	je     c00211a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021175:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0021178:	85 db                	test   ebx,ebx
c002117a:	74 2a                	je     c00211a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c002117c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c002117f:	85 f6                	test   esi,esi
c0021181:	74 23                	je     c00211a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021183:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0021189:	85 c0                	test   eax,eax
c002118b:	74 19                	je     c00211a6 <SysGetDiskVolumeLabel(regs*)+0x4b>
c002118d:	83 ec 0c             	sub    esp,0xc
c0021190:	8b 38                	mov    edi,DWORD PTR [eax]
c0021192:	56                   	push   esi
c0021193:	53                   	push   ebx
c0021194:	52                   	push   edx
c0021195:	51                   	push   ecx
c0021196:	50                   	push   eax
c0021197:	ff 57 58             	call   DWORD PTR [edi+0x58]
c002119a:	83 c4 20             	add    esp,0x20
c002119d:	5b                   	pop    ebx
c002119e:	5e                   	pop    esi
c002119f:	89 c2                	mov    edx,eax
c00211a1:	c1 fa 1f             	sar    edx,0x1f
c00211a4:	5f                   	pop    edi
c00211a5:	c3                   	ret    
c00211a6:	5b                   	pop    ebx
c00211a7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00211ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00211b1:	5e                   	pop    esi
c00211b2:	5f                   	pop    edi
c00211b3:	c3                   	ret    

c00211b4 <SysShutdown(regs*)>:
c00211b4:	57                   	push   edi
c00211b5:	56                   	push   esi
c00211b6:	83 ec 04             	sub    esp,0x4
c00211b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00211c0:	85 c0                	test   eax,eax
c00211c2:	74 1e                	je     c00211e2 <SysShutdown(regs*)+0x2e>
c00211c4:	83 f8 01             	cmp    eax,0x1
c00211c7:	74 5f                	je     c0021228 <SysShutdown(regs*)+0x74>
c00211c9:	83 f8 02             	cmp    eax,0x2
c00211cc:	be ff ff ff ff       	mov    esi,0xffffffff
c00211d1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00211d6:	74 32                	je     c002120a <SysShutdown(regs*)+0x56>
c00211d8:	83 c4 04             	add    esp,0x4
c00211db:	89 f0                	mov    eax,esi
c00211dd:	5e                   	pop    esi
c00211de:	89 fa                	mov    edx,edi
c00211e0:	5f                   	pop    edi
c00211e1:	c3                   	ret    
c00211e2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00211e7:	be ff ff ff ff       	mov    esi,0xffffffff
c00211ec:	bf ff ff ff ff       	mov    edi,0xffffffff
c00211f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00211f3:	6a 00                	push   0x0
c00211f5:	6a 00                	push   0x0
c00211f7:	6a 00                	push   0x0
c00211f9:	50                   	push   eax
c00211fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00211fd:	83 c4 10             	add    esp,0x10
c0021200:	89 f0                	mov    eax,esi
c0021202:	83 c4 04             	add    esp,0x4
c0021205:	89 fa                	mov    edx,edi
c0021207:	5e                   	pop    esi
c0021208:	5f                   	pop    edi
c0021209:	c3                   	ret    
c002120a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002120f:	8b 10                	mov    edx,DWORD PTR [eax]
c0021211:	6a 00                	push   0x0
c0021213:	6a 00                	push   0x0
c0021215:	6a 01                	push   0x1
c0021217:	50                   	push   eax
c0021218:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002121b:	83 c4 10             	add    esp,0x10
c002121e:	89 f0                	mov    eax,esi
c0021220:	83 c4 04             	add    esp,0x4
c0021223:	89 fa                	mov    edx,edi
c0021225:	5e                   	pop    esi
c0021226:	5f                   	pop    edi
c0021227:	c3                   	ret    
c0021228:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c002122d:	85 c0                	test   eax,eax
c002122f:	74 02                	je     c0021233 <SysShutdown(regs*)+0x7f>
c0021231:	ff d0                	call   eax
c0021233:	31 f6                	xor    esi,esi
c0021235:	83 c4 04             	add    esp,0x4
c0021238:	89 f0                	mov    eax,esi
c002123a:	31 ff                	xor    edi,edi
c002123c:	5e                   	pop    esi
c002123d:	89 fa                	mov    edx,edi
c002123f:	5f                   	pop    edi
c0021240:	c3                   	ret    

c0021241 <SysRealpath(regs*)>:
c0021241:	53                   	push   ebx
c0021242:	83 ec 08             	sub    esp,0x8
c0021245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021249:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c002124c:	85 c9                	test   ecx,ecx
c002124e:	74 36                	je     c0021286 <SysRealpath(regs*)+0x45>
c0021250:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0021253:	31 d2                	xor    edx,edx
c0021255:	b8 01 00 00 00       	mov    eax,0x1
c002125a:	85 db                	test   ebx,ebx
c002125c:	75 05                	jne    c0021263 <SysRealpath(regs*)+0x22>
c002125e:	83 c4 08             	add    esp,0x8
c0021261:	5b                   	pop    ebx
c0021262:	c3                   	ret    
c0021263:	6a 00                	push   0x0
c0021265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002126a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002126d:	05 0c 01 00 00       	add    eax,0x10c
c0021272:	50                   	push   eax
c0021273:	51                   	push   ecx
c0021274:	53                   	push   ebx
c0021275:	e8 64 91 ff ff       	call   c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002127a:	83 c4 10             	add    esp,0x10
c002127d:	31 c0                	xor    eax,eax
c002127f:	31 d2                	xor    edx,edx
c0021281:	83 c4 08             	add    esp,0x8
c0021284:	5b                   	pop    ebx
c0021285:	c3                   	ret    
c0021286:	b8 01 00 00 00       	mov    eax,0x1
c002128b:	31 d2                	xor    edx,edx
c002128d:	eb f2                	jmp    c0021281 <SysRealpath(regs*)+0x40>

c002128f <SysReadDir(regs*)>:
c002128f:	53                   	push   ebx
c0021290:	83 ec 18             	sub    esp,0x18
c0021293:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021297:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002129a:	83 f8 02             	cmp    eax,0x2
c002129d:	76 4f                	jbe    c00212ee <SysReadDir(regs*)+0x5f>
c002129f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00212a6:	77 52                	ja     c00212fa <SysReadDir(regs*)+0x6b>
c00212a8:	83 ec 0c             	sub    esp,0xc
c00212ab:	50                   	push   eax
c00212ac:	e8 b2 6d ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c00212b1:	83 c4 10             	add    esp,0x10
c00212b4:	85 c0                	test   eax,eax
c00212b6:	74 42                	je     c00212fa <SysReadDir(regs*)+0x6b>
c00212b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00212c0:	83 ec 0c             	sub    esp,0xc
c00212c3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00212c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00212c9:	51                   	push   ecx
c00212ca:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00212cd:	51                   	push   ecx
c00212ce:	6a 00                	push   0x0
c00212d0:	68 10 01 00 00       	push   0x110
c00212d5:	50                   	push   eax
c00212d6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00212d9:	83 c4 20             	add    esp,0x20
c00212dc:	85 c0                	test   eax,eax
c00212de:	89 c1                	mov    ecx,eax
c00212e0:	74 27                	je     c0021309 <SysReadDir(regs*)+0x7a>
c00212e2:	31 d2                	xor    edx,edx
c00212e4:	83 f9 07             	cmp    ecx,0x7
c00212e7:	b8 02 00 00 00       	mov    eax,0x2
c00212ec:	75 16                	jne    c0021304 <SysReadDir(regs*)+0x75>
c00212ee:	b8 01 00 00 00       	mov    eax,0x1
c00212f3:	31 d2                	xor    edx,edx
c00212f5:	83 c4 18             	add    esp,0x18
c00212f8:	5b                   	pop    ebx
c00212f9:	c3                   	ret    
c00212fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00212ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021304:	83 c4 18             	add    esp,0x18
c0021307:	5b                   	pop    ebx
c0021308:	c3                   	ret    
c0021309:	31 c0                	xor    eax,eax
c002130b:	31 d2                	xor    edx,edx
c002130d:	eb e6                	jmp    c00212f5 <SysReadDir(regs*)+0x66>

c002130f <SysIsATTY(regs*)>:
c002130f:	83 ec 0c             	sub    esp,0xc
c0021312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021316:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021319:	83 f8 02             	cmp    eax,0x2
c002131c:	76 07                	jbe    c0021325 <SysIsATTY(regs*)+0x16>
c002131e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0021323:	75 26                	jne    c002134b <SysIsATTY(regs*)+0x3c>
c0021325:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002132a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002132d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0021333:	85 c0                	test   eax,eax
c0021335:	74 24                	je     c002135b <SysIsATTY(regs*)+0x4c>
c0021337:	8b 10                	mov    edx,DWORD PTR [eax]
c0021339:	83 ec 0c             	sub    esp,0xc
c002133c:	50                   	push   eax
c002133d:	ff 12                	call   DWORD PTR [edx]
c002133f:	83 c4 10             	add    esp,0x10
c0021342:	31 d2                	xor    edx,edx
c0021344:	83 c4 0c             	add    esp,0xc
c0021347:	0f b6 c0             	movzx  eax,al
c002134a:	c3                   	ret    
c002134b:	83 ec 0c             	sub    esp,0xc
c002134e:	50                   	push   eax
c002134f:	e8 0f 6d ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c0021354:	83 c4 10             	add    esp,0x10
c0021357:	85 c0                	test   eax,eax
c0021359:	75 dc                	jne    c0021337 <SysIsATTY(regs*)+0x28>
c002135b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021360:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021365:	83 c4 0c             	add    esp,0xc
c0021368:	c3                   	ret    

c0021369 <SysSeek(regs*)>:
c0021369:	56                   	push   esi
c002136a:	53                   	push   ebx
c002136b:	83 ec 04             	sub    esp,0x4
c002136e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021372:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021375:	8d 71 fd             	lea    esi,[ecx-0x3]
c0021378:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c002137e:	77 33                	ja     c00213b3 <SysSeek(regs*)+0x4a>
c0021380:	83 ec 0c             	sub    esp,0xc
c0021383:	51                   	push   ecx
c0021384:	e8 da 6c ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c0021389:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002138c:	83 c4 0c             	add    esp,0xc
c002138f:	31 db                	xor    ebx,ebx
c0021391:	53                   	push   ebx
c0021392:	51                   	push   ecx
c0021393:	50                   	push   eax
c0021394:	e8 2d 94 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0021399:	83 c4 10             	add    esp,0x10
c002139c:	85 c0                	test   eax,eax
c002139e:	0f 95 c0             	setne  al
c00213a1:	31 d2                	xor    edx,edx
c00213a3:	0f b6 c0             	movzx  eax,al
c00213a6:	f7 d8                	neg    eax
c00213a8:	83 d2 00             	adc    edx,0x0
c00213ab:	83 c4 04             	add    esp,0x4
c00213ae:	5b                   	pop    ebx
c00213af:	f7 da                	neg    edx
c00213b1:	5e                   	pop    esi
c00213b2:	c3                   	ret    
c00213b3:	83 c4 04             	add    esp,0x4
c00213b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213bb:	5b                   	pop    ebx
c00213bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213c1:	5e                   	pop    esi
c00213c2:	c3                   	ret    

c00213c3 <SysTell(regs*)>:
c00213c3:	53                   	push   ebx
c00213c4:	83 ec 08             	sub    esp,0x8
c00213c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00213cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00213ce:	83 f8 02             	cmp    eax,0x2
c00213d1:	76 4e                	jbe    c0021421 <SysTell(regs*)+0x5e>
c00213d3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00213d8:	76 19                	jbe    c00213f3 <SysTell(regs*)+0x30>
c00213da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00213dd:	31 d2                	xor    edx,edx
c00213df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213ec:	83 c4 08             	add    esp,0x8
c00213ef:	31 c0                	xor    eax,eax
c00213f1:	5b                   	pop    ebx
c00213f2:	c3                   	ret    
c00213f3:	83 ec 0c             	sub    esp,0xc
c00213f6:	50                   	push   eax
c00213f7:	e8 67 6c ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c00213fc:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00213ff:	5a                   	pop    edx
c0021400:	59                   	pop    ecx
c0021401:	53                   	push   ebx
c0021402:	50                   	push   eax
c0021403:	e8 6a 94 ff ff       	call   c001a872 <File::tell(unsigned long long*)>
c0021408:	83 c4 10             	add    esp,0x10
c002140b:	85 c0                	test   eax,eax
c002140d:	0f 95 c0             	setne  al
c0021410:	31 d2                	xor    edx,edx
c0021412:	0f b6 c0             	movzx  eax,al
c0021415:	f7 d8                	neg    eax
c0021417:	83 d2 00             	adc    edx,0x0
c002141a:	83 c4 08             	add    esp,0x8
c002141d:	5b                   	pop    ebx
c002141e:	f7 da                	neg    edx
c0021420:	c3                   	ret    
c0021421:	83 c4 08             	add    esp,0x8
c0021424:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021429:	5b                   	pop    ebx
c002142a:	ba ff ff ff ff       	mov    edx,0xffffffff
c002142f:	c3                   	ret    

c0021430 <SysSize(regs*)>:
c0021430:	53                   	push   ebx
c0021431:	83 ec 18             	sub    esp,0x18
c0021434:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021438:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002143b:	83 f8 02             	cmp    eax,0x2
c002143e:	76 54                	jbe    c0021494 <SysSize(regs*)+0x64>
c0021440:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021445:	76 19                	jbe    c0021460 <SysSize(regs*)+0x30>
c0021447:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002144a:	31 d2                	xor    edx,edx
c002144c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021452:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021459:	83 c4 18             	add    esp,0x18
c002145c:	31 c0                	xor    eax,eax
c002145e:	5b                   	pop    ebx
c002145f:	c3                   	ret    
c0021460:	83 ec 0c             	sub    esp,0xc
c0021463:	50                   	push   eax
c0021464:	e8 fa 6b ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c0021469:	83 c4 0c             	add    esp,0xc
c002146c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0021470:	52                   	push   edx
c0021471:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021474:	52                   	push   edx
c0021475:	50                   	push   eax
c0021476:	e8 8f 95 ff ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c002147b:	83 c4 10             	add    esp,0x10
c002147e:	85 c0                	test   eax,eax
c0021480:	0f 95 c0             	setne  al
c0021483:	31 d2                	xor    edx,edx
c0021485:	0f b6 c0             	movzx  eax,al
c0021488:	f7 d8                	neg    eax
c002148a:	83 d2 00             	adc    edx,0x0
c002148d:	83 c4 18             	add    esp,0x18
c0021490:	5b                   	pop    ebx
c0021491:	f7 da                	neg    edx
c0021493:	c3                   	ret    
c0021494:	83 c4 18             	add    esp,0x18
c0021497:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002149c:	5b                   	pop    ebx
c002149d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214a2:	c3                   	ret    

c00214a3 <SysSizeFromFilename(regs*)>:
c00214a3:	55                   	push   ebp
c00214a4:	57                   	push   edi
c00214a5:	56                   	push   esi
c00214a6:	53                   	push   ebx
c00214a7:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00214ad:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00214b4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00214b7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00214ba:	85 f6                	test   esi,esi
c00214bc:	89 f8                	mov    eax,edi
c00214be:	74 09                	je     c00214c9 <SysSizeFromFilename(regs*)+0x26>
c00214c0:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00214c6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00214c9:	83 f8 02             	cmp    eax,0x2
c00214cc:	0f 86 ca 00 00 00    	jbe    c002159c <SysSizeFromFilename(regs*)+0xf9>
c00214d2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00214d7:	76 1f                	jbe    c00214f8 <SysSizeFromFilename(regs*)+0x55>
c00214d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00214dc:	31 d2                	xor    edx,edx
c00214de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214eb:	31 c0                	xor    eax,eax
c00214ed:	81 c4 4c 02 00 00    	add    esp,0x24c
c00214f3:	5b                   	pop    ebx
c00214f4:	5e                   	pop    esi
c00214f5:	5f                   	pop    edi
c00214f6:	5d                   	pop    ebp
c00214f7:	c3                   	ret    
c00214f8:	83 ec 0c             	sub    esp,0xc
c00214fb:	68 14 01 00 00       	push   0x114
c0021500:	e8 97 51 ff ff       	call   c001669c <malloc>
c0021505:	6a 01                	push   0x1
c0021507:	89 c5                	mov    ebp,eax
c0021509:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002150e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021511:	51                   	push   ecx
c0021512:	57                   	push   edi
c0021513:	55                   	push   ebp
c0021514:	e8 f3 90 ff ff       	call   c001a60c <File::File(char const*, Process*, bool)>
c0021519:	83 c4 1c             	add    esp,0x1c
c002151c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0021520:	50                   	push   eax
c0021521:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021524:	53                   	push   ebx
c0021525:	55                   	push   ebp
c0021526:	e8 df 94 ff ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c002152b:	83 c4 10             	add    esp,0x10
c002152e:	85 ed                	test   ebp,ebp
c0021530:	89 c3                	mov    ebx,eax
c0021532:	74 0d                	je     c0021541 <SysSizeFromFilename(regs*)+0x9e>
c0021534:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021537:	83 ec 0c             	sub    esp,0xc
c002153a:	55                   	push   ebp
c002153b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002153e:	83 c4 10             	add    esp,0x10
c0021541:	85 db                	test   ebx,ebx
c0021543:	75 57                	jne    c002159c <SysSizeFromFilename(regs*)+0xf9>
c0021545:	6a 00                	push   0x0
c0021547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002154c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002154f:	05 0c 01 00 00       	add    eax,0x10c
c0021554:	50                   	push   eax
c0021555:	57                   	push   edi
c0021556:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002155d:	53                   	push   ebx
c002155e:	e8 7b 8e ff ff       	call   c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021563:	58                   	pop    eax
c0021564:	5a                   	pop    edx
c0021565:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021569:	50                   	push   eax
c002156a:	53                   	push   ebx
c002156b:	e8 d6 88 ff ff       	call   c0019e46 <KeDereferenceSymlink(char const*, char*)>
c0021570:	83 c4 10             	add    esp,0x10
c0021573:	ba 00 00 00 00       	mov    edx,0x0
c0021578:	83 f8 01             	cmp    eax,0x1
c002157b:	b8 00 00 00 00       	mov    eax,0x0
c0021580:	74 2f                	je     c00215b1 <SysSizeFromFilename(regs*)+0x10e>
c0021582:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021587:	74 3b                	je     c00215c4 <SysSizeFromFilename(regs*)+0x121>
c0021589:	85 f6                	test   esi,esi
c002158b:	0f 84 5c ff ff ff    	je     c00214ed <SysSizeFromFilename(regs*)+0x4a>
c0021591:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021597:	e9 51 ff ff ff       	jmp    c00214ed <SysSizeFromFilename(regs*)+0x4a>
c002159c:	81 c4 4c 02 00 00    	add    esp,0x24c
c00215a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00215a7:	5b                   	pop    ebx
c00215a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00215ad:	5e                   	pop    esi
c00215ae:	5f                   	pop    edi
c00215af:	5d                   	pop    ebp
c00215b0:	c3                   	ret    
c00215b1:	85 f6                	test   esi,esi
c00215b3:	0f 84 34 ff ff ff    	je     c00214ed <SysSizeFromFilename(regs*)+0x4a>
c00215b9:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00215bf:	e9 29 ff ff ff       	jmp    c00214ed <SysSizeFromFilename(regs*)+0x4a>
c00215c4:	85 f6                	test   esi,esi
c00215c6:	0f 84 21 ff ff ff    	je     c00214ed <SysSizeFromFilename(regs*)+0x4a>
c00215cc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00215d2:	e9 16 ff ff ff       	jmp    c00214ed <SysSizeFromFilename(regs*)+0x4a>

c00215d7 <SysSizeFromFilenameNoSymlink(regs*)>:
c00215d7:	55                   	push   ebp
c00215d8:	57                   	push   edi
c00215d9:	56                   	push   esi
c00215da:	53                   	push   ebx
c00215db:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00215e1:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00215e8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00215eb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00215ee:	85 f6                	test   esi,esi
c00215f0:	89 f8                	mov    eax,edi
c00215f2:	74 09                	je     c00215fd <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c00215f4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00215fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00215fd:	83 f8 02             	cmp    eax,0x2
c0021600:	0f 86 ca 00 00 00    	jbe    c00216d0 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0021606:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c002160b:	76 1f                	jbe    c002162c <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c002160d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021610:	31 d2                	xor    edx,edx
c0021612:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021618:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002161f:	31 c0                	xor    eax,eax
c0021621:	81 c4 4c 02 00 00    	add    esp,0x24c
c0021627:	5b                   	pop    ebx
c0021628:	5e                   	pop    esi
c0021629:	5f                   	pop    edi
c002162a:	5d                   	pop    ebp
c002162b:	c3                   	ret    
c002162c:	83 ec 0c             	sub    esp,0xc
c002162f:	68 14 01 00 00       	push   0x114
c0021634:	e8 63 50 ff ff       	call   c001669c <malloc>
c0021639:	6a 00                	push   0x0
c002163b:	89 c5                	mov    ebp,eax
c002163d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021642:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021645:	51                   	push   ecx
c0021646:	57                   	push   edi
c0021647:	55                   	push   ebp
c0021648:	e8 bf 8f ff ff       	call   c001a60c <File::File(char const*, Process*, bool)>
c002164d:	83 c4 1c             	add    esp,0x1c
c0021650:	8d 44 24 13          	lea    eax,[esp+0x13]
c0021654:	50                   	push   eax
c0021655:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021658:	53                   	push   ebx
c0021659:	55                   	push   ebp
c002165a:	e8 ab 93 ff ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c002165f:	83 c4 10             	add    esp,0x10
c0021662:	85 ed                	test   ebp,ebp
c0021664:	89 c3                	mov    ebx,eax
c0021666:	74 0d                	je     c0021675 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0021668:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002166b:	83 ec 0c             	sub    esp,0xc
c002166e:	55                   	push   ebp
c002166f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021672:	83 c4 10             	add    esp,0x10
c0021675:	85 db                	test   ebx,ebx
c0021677:	75 57                	jne    c00216d0 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0021679:	6a 00                	push   0x0
c002167b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021680:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021683:	05 0c 01 00 00       	add    eax,0x10c
c0021688:	50                   	push   eax
c0021689:	57                   	push   edi
c002168a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0021691:	53                   	push   ebx
c0021692:	e8 47 8d ff ff       	call   c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021697:	58                   	pop    eax
c0021698:	5a                   	pop    edx
c0021699:	8d 44 24 18          	lea    eax,[esp+0x18]
c002169d:	50                   	push   eax
c002169e:	53                   	push   ebx
c002169f:	e8 a2 87 ff ff       	call   c0019e46 <KeDereferenceSymlink(char const*, char*)>
c00216a4:	83 c4 10             	add    esp,0x10
c00216a7:	ba 00 00 00 00       	mov    edx,0x0
c00216ac:	83 f8 01             	cmp    eax,0x1
c00216af:	b8 00 00 00 00       	mov    eax,0x0
c00216b4:	74 2f                	je     c00216e5 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c00216b6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00216bb:	74 3b                	je     c00216f8 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c00216bd:	85 f6                	test   esi,esi
c00216bf:	0f 84 5c ff ff ff    	je     c0021621 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00216c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00216cb:	e9 51 ff ff ff       	jmp    c0021621 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00216d0:	81 c4 4c 02 00 00    	add    esp,0x24c
c00216d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00216db:	5b                   	pop    ebx
c00216dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00216e1:	5e                   	pop    esi
c00216e2:	5f                   	pop    edi
c00216e3:	5d                   	pop    ebp
c00216e4:	c3                   	ret    
c00216e5:	85 f6                	test   esi,esi
c00216e7:	0f 84 34 ff ff ff    	je     c0021621 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00216ed:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00216f3:	e9 29 ff ff ff       	jmp    c0021621 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00216f8:	85 f6                	test   esi,esi
c00216fa:	0f 84 21 ff ff ff    	je     c0021621 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021700:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021706:	e9 16 ff ff ff       	jmp    c0021621 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c002170b <SysClose(regs*)>:
c002170b:	53                   	push   ebx
c002170c:	83 ec 08             	sub    esp,0x8
c002170f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021713:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021716:	83 f8 02             	cmp    eax,0x2
c0021719:	76 41                	jbe    c002175c <SysClose(regs*)+0x51>
c002171b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0021721:	83 fa 01             	cmp    edx,0x1
c0021724:	76 2d                	jbe    c0021753 <SysClose(regs*)+0x48>
c0021726:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c002172b:	77 2f                	ja     c002175c <SysClose(regs*)+0x51>
c002172d:	83 ec 0c             	sub    esp,0xc
c0021730:	50                   	push   eax
c0021731:	e8 2d 69 ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c0021736:	89 04 24             	mov    DWORD PTR [esp],eax
c0021739:	89 c3                	mov    ebx,eax
c002173b:	e8 26 90 ff ff       	call   c001a766 <File::close()>
c0021740:	83 c4 10             	add    esp,0x10
c0021743:	85 db                	test   ebx,ebx
c0021745:	74 0c                	je     c0021753 <SysClose(regs*)+0x48>
c0021747:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021749:	83 ec 0c             	sub    esp,0xc
c002174c:	53                   	push   ebx
c002174d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021750:	83 c4 10             	add    esp,0x10
c0021753:	83 c4 08             	add    esp,0x8
c0021756:	31 c0                	xor    eax,eax
c0021758:	5b                   	pop    ebx
c0021759:	31 d2                	xor    edx,edx
c002175b:	c3                   	ret    
c002175c:	83 c4 08             	add    esp,0x8
c002175f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021764:	5b                   	pop    ebx
c0021765:	ba ff ff ff ff       	mov    edx,0xffffffff
c002176a:	c3                   	ret    

c002176b <SysOpenDir(regs*)>:
c002176b:	56                   	push   esi
c002176c:	53                   	push   ebx
c002176d:	83 ec 04             	sub    esp,0x4
c0021770:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021774:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021777:	85 c9                	test   ecx,ecx
c0021779:	74 5d                	je     c00217d8 <SysOpenDir(regs*)+0x6d>
c002177b:	83 ec 0c             	sub    esp,0xc
c002177e:	68 14 01 00 00       	push   0x114
c0021783:	e8 14 4f ff ff       	call   c001669c <malloc>
c0021788:	83 c4 0c             	add    esp,0xc
c002178b:	89 c6                	mov    esi,eax
c002178d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021792:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021795:	50                   	push   eax
c0021796:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021799:	52                   	push   edx
c002179a:	56                   	push   esi
c002179b:	e8 2a 94 ff ff       	call   c001abca <Directory::Directory(char const*, Process*)>
c00217a0:	83 c4 10             	add    esp,0x10
c00217a3:	85 f6                	test   esi,esi
c00217a5:	74 31                	je     c00217d8 <SysOpenDir(regs*)+0x6d>
c00217a7:	83 ec 0c             	sub    esp,0xc
c00217aa:	56                   	push   esi
c00217ab:	e8 e2 94 ff ff       	call   c001ac92 <Directory::open()>
c00217b0:	83 c4 10             	add    esp,0x10
c00217b3:	85 c0                	test   eax,eax
c00217b5:	75 21                	jne    c00217d8 <SysOpenDir(regs*)+0x6d>
c00217b7:	83 ec 0c             	sub    esp,0xc
c00217ba:	56                   	push   esi
c00217bb:	e8 a6 65 ff ff       	call   c0017d66 <UnixFile::getFileDescriptor()>
c00217c0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00217c3:	83 c4 10             	add    esp,0x10
c00217c6:	89 02                	mov    DWORD PTR [edx],eax
c00217c8:	c1 f8 1f             	sar    eax,0x1f
c00217cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00217ce:	83 c4 04             	add    esp,0x4
c00217d1:	31 c0                	xor    eax,eax
c00217d3:	5b                   	pop    ebx
c00217d4:	31 d2                	xor    edx,edx
c00217d6:	5e                   	pop    esi
c00217d7:	c3                   	ret    
c00217d8:	83 c4 04             	add    esp,0x4
c00217db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00217e0:	5b                   	pop    ebx
c00217e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00217e6:	5e                   	pop    esi
c00217e7:	c3                   	ret    

c00217e8 <SysMakeDir(regs*)>:
c00217e8:	56                   	push   esi
c00217e9:	53                   	push   ebx
c00217ea:	83 ec 10             	sub    esp,0x10
c00217ed:	68 14 01 00 00       	push   0x114
c00217f2:	e8 a5 4e ff ff       	call   c001669c <malloc>
c00217f7:	83 c4 0c             	add    esp,0xc
c00217fa:	89 c3                	mov    ebx,eax
c00217fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021801:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021804:	50                   	push   eax
c0021805:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021809:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c002180c:	52                   	push   edx
c002180d:	53                   	push   ebx
c002180e:	e8 b7 93 ff ff       	call   c001abca <Directory::Directory(char const*, Process*)>
c0021813:	83 c4 10             	add    esp,0x10
c0021816:	85 db                	test   ebx,ebx
c0021818:	74 2c                	je     c0021846 <SysMakeDir(regs*)+0x5e>
c002181a:	83 ec 0c             	sub    esp,0xc
c002181d:	53                   	push   ebx
c002181e:	e8 4f 96 ff ff       	call   c001ae72 <Directory::create()>
c0021823:	89 c6                	mov    esi,eax
c0021825:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021827:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002182a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002182d:	83 c4 10             	add    esp,0x10
c0021830:	31 c0                	xor    eax,eax
c0021832:	85 f6                	test   esi,esi
c0021834:	0f 95 c0             	setne  al
c0021837:	31 d2                	xor    edx,edx
c0021839:	f7 d8                	neg    eax
c002183b:	83 d2 00             	adc    edx,0x0
c002183e:	83 c4 04             	add    esp,0x4
c0021841:	5b                   	pop    ebx
c0021842:	f7 da                	neg    edx
c0021844:	5e                   	pop    esi
c0021845:	c3                   	ret    
c0021846:	83 c4 04             	add    esp,0x4
c0021849:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002184e:	5b                   	pop    ebx
c002184f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021854:	5e                   	pop    esi
c0021855:	c3                   	ret    

c0021856 <SysCloseDir(regs*)>:
c0021856:	53                   	push   ebx
c0021857:	ba ff ff ff ff       	mov    edx,0xffffffff
c002185c:	83 ec 08             	sub    esp,0x8
c002185f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021863:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0021866:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002186b:	8d 59 fd             	lea    ebx,[ecx-0x3]
c002186e:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0021874:	77 2a                	ja     c00218a0 <SysCloseDir(regs*)+0x4a>
c0021876:	83 ec 0c             	sub    esp,0xc
c0021879:	51                   	push   ecx
c002187a:	e8 e4 67 ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c002187f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021882:	89 c3                	mov    ebx,eax
c0021884:	e8 65 94 ff ff       	call   c001acee <Directory::close()>
c0021889:	83 c4 10             	add    esp,0x10
c002188c:	85 db                	test   ebx,ebx
c002188e:	74 0c                	je     c002189c <SysCloseDir(regs*)+0x46>
c0021890:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021892:	83 ec 0c             	sub    esp,0xc
c0021895:	53                   	push   ebx
c0021896:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021899:	83 c4 10             	add    esp,0x10
c002189c:	31 c0                	xor    eax,eax
c002189e:	31 d2                	xor    edx,edx
c00218a0:	83 c4 08             	add    esp,0x8
c00218a3:	5b                   	pop    ebx
c00218a4:	c3                   	ret    

c00218a5 <SysWait(regs*)>:
c00218a5:	83 ec 10             	sub    esp,0x10
c00218a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00218ac:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00218af:	52                   	push   edx
c00218b0:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00218b3:	51                   	push   ecx
c00218b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00218b7:	50                   	push   eax
c00218b8:	e8 23 3e 00 00       	call   c00256e0 <waitTask(int, int*, int)>
c00218bd:	83 c4 1c             	add    esp,0x1c
c00218c0:	89 c2                	mov    edx,eax
c00218c2:	c1 fa 1f             	sar    edx,0x1f
c00218c5:	c3                   	ret    

c00218c6 <SysNotImpl(regs*)>:
c00218c6:	83 ec 18             	sub    esp,0x18
c00218c9:	68 84 30 03 c0       	push   0xc0033084
c00218ce:	e8 c3 ec ff ff       	call   c0020596 <KePanic(char const*)>
c00218d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00218d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00218dd:	83 c4 1c             	add    esp,0x1c
c00218e0:	c3                   	ret    

c00218e1 <SysPanic(regs*)>:
c00218e1:	83 ec 18             	sub    esp,0x18
c00218e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00218e8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00218eb:	50                   	push   eax
c00218ec:	e8 a5 ec ff ff       	call   c0020596 <KePanic(char const*)>
c00218f1:	b8 01 00 00 00       	mov    eax,0x1
c00218f6:	31 d2                	xor    edx,edx
c00218f8:	83 c4 1c             	add    esp,0x1c
c00218fb:	c3                   	ret    

c00218fc <SysRmdir(regs*)>:
c00218fc:	56                   	push   esi
c00218fd:	53                   	push   ebx
c00218fe:	83 ec 10             	sub    esp,0x10
c0021901:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021905:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021908:	68 14 01 00 00       	push   0x114
c002190d:	e8 8a 4d ff ff       	call   c001669c <malloc>
c0021912:	6a 00                	push   0x0
c0021914:	89 c3                	mov    ebx,eax
c0021916:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002191b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002191e:	50                   	push   eax
c002191f:	56                   	push   esi
c0021920:	53                   	push   ebx
c0021921:	e8 e6 8c ff ff       	call   c001a60c <File::File(char const*, Process*, bool)>
c0021926:	83 c4 14             	add    esp,0x14
c0021929:	53                   	push   ebx
c002192a:	e8 a7 8f ff ff       	call   c001a8d6 <File::unlink()>
c002192f:	83 c4 10             	add    esp,0x10
c0021932:	85 db                	test   ebx,ebx
c0021934:	89 c6                	mov    esi,eax
c0021936:	74 0c                	je     c0021944 <SysRmdir(regs*)+0x48>
c0021938:	8b 03                	mov    eax,DWORD PTR [ebx]
c002193a:	83 ec 0c             	sub    esp,0xc
c002193d:	53                   	push   ebx
c002193e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021941:	83 c4 10             	add    esp,0x10
c0021944:	31 c0                	xor    eax,eax
c0021946:	85 f6                	test   esi,esi
c0021948:	0f 95 c0             	setne  al
c002194b:	31 d2                	xor    edx,edx
c002194d:	f7 d8                	neg    eax
c002194f:	83 d2 00             	adc    edx,0x0
c0021952:	83 c4 04             	add    esp,0x4
c0021955:	5b                   	pop    ebx
c0021956:	f7 da                	neg    edx
c0021958:	5e                   	pop    esi
c0021959:	c3                   	ret    

c002195a <SysUnlink(regs*)>:
c002195a:	56                   	push   esi
c002195b:	53                   	push   ebx
c002195c:	83 ec 10             	sub    esp,0x10
c002195f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021963:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021966:	68 14 01 00 00       	push   0x114
c002196b:	e8 2c 4d ff ff       	call   c001669c <malloc>
c0021970:	6a 00                	push   0x0
c0021972:	89 c3                	mov    ebx,eax
c0021974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021979:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002197c:	50                   	push   eax
c002197d:	56                   	push   esi
c002197e:	53                   	push   ebx
c002197f:	e8 88 8c ff ff       	call   c001a60c <File::File(char const*, Process*, bool)>
c0021984:	83 c4 14             	add    esp,0x14
c0021987:	53                   	push   ebx
c0021988:	e8 49 8f ff ff       	call   c001a8d6 <File::unlink()>
c002198d:	83 c4 10             	add    esp,0x10
c0021990:	85 db                	test   ebx,ebx
c0021992:	89 c6                	mov    esi,eax
c0021994:	74 0c                	je     c00219a2 <SysUnlink(regs*)+0x48>
c0021996:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021998:	83 ec 0c             	sub    esp,0xc
c002199b:	53                   	push   ebx
c002199c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002199f:	83 c4 10             	add    esp,0x10
c00219a2:	31 c0                	xor    eax,eax
c00219a4:	85 f6                	test   esi,esi
c00219a6:	0f 95 c0             	setne  al
c00219a9:	31 d2                	xor    edx,edx
c00219ab:	f7 d8                	neg    eax
c00219ad:	83 d2 00             	adc    edx,0x0
c00219b0:	83 c4 04             	add    esp,0x4
c00219b3:	5b                   	pop    ebx
c00219b4:	f7 da                	neg    edx
c00219b6:	5e                   	pop    esi
c00219b7:	c3                   	ret    

c00219b8 <SysGetArgv(regs*)>:
c00219b8:	83 ec 0c             	sub    esp,0xc
c00219bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00219bf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00219c2:	85 c0                	test   eax,eax
c00219c4:	78 2c                	js     c00219f2 <SysGetArgv(regs*)+0x3a>
c00219c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00219cc:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00219cf:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00219d5:	7d 1b                	jge    c00219f2 <SysGetArgv(regs*)+0x3a>
c00219d7:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00219de:	85 c0                	test   eax,eax
c00219e0:	74 18                	je     c00219fa <SysGetArgv(regs*)+0x42>
c00219e2:	83 ec 08             	sub    esp,0x8
c00219e5:	50                   	push   eax
c00219e6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00219e9:	50                   	push   eax
c00219ea:	e8 61 ec fd ff       	call   c0000650 <strcpy>
c00219ef:	83 c4 10             	add    esp,0x10
c00219f2:	31 c0                	xor    eax,eax
c00219f4:	31 d2                	xor    edx,edx
c00219f6:	83 c4 0c             	add    esp,0xc
c00219f9:	c3                   	ret    
c00219fa:	b8 01 00 00 00       	mov    eax,0x1
c00219ff:	31 d2                	xor    edx,edx
c0021a01:	83 c4 0c             	add    esp,0xc
c0021a04:	c3                   	ret    

c0021a05 <SysUSleep(regs*)>:
c0021a05:	83 ec 1c             	sub    esp,0x1c
c0021a08:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021a0c:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0021a0f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0021a12:	6a 00                	push   0x0
c0021a14:	6a 64                	push   0x64
c0021a16:	52                   	push   edx
c0021a17:	50                   	push   eax
c0021a18:	e8 63 d1 00 00       	call   c002eb80 <__udivdi3>
c0021a1d:	83 c4 14             	add    esp,0x14
c0021a20:	50                   	push   eax
c0021a21:	e8 9e 3d 00 00       	call   c00257c4 <milliTenthSleep(unsigned int)>
c0021a26:	31 c0                	xor    eax,eax
c0021a28:	31 d2                	xor    edx,edx
c0021a2a:	83 c4 1c             	add    esp,0x1c
c0021a2d:	c3                   	ret    

c0021a2e <SysSpawn(regs*)>:
c0021a2e:	56                   	push   esi
c0021a2f:	53                   	push   ebx
c0021a30:	83 ec 04             	sub    esp,0x4
c0021a33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a37:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021a3a:	85 f6                	test   esi,esi
c0021a3c:	75 0a                	jne    c0021a48 <SysSpawn(regs*)+0x1a>
c0021a3e:	83 c4 04             	add    esp,0x4
c0021a41:	31 c0                	xor    eax,eax
c0021a43:	5b                   	pop    ebx
c0021a44:	31 d2                	xor    edx,edx
c0021a46:	5e                   	pop    esi
c0021a47:	c3                   	ret    
c0021a48:	83 ec 0c             	sub    esp,0xc
c0021a4b:	68 24 07 00 00       	push   0x724
c0021a50:	e8 47 4c ff ff       	call   c001669c <malloc>
c0021a55:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021a58:	83 c4 10             	add    esp,0x10
c0021a5b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021a5e:	89 c6                	mov    esi,eax
c0021a60:	31 c0                	xor    eax,eax
c0021a62:	85 c9                	test   ecx,ecx
c0021a64:	75 08                	jne    c0021a6e <SysSpawn(regs*)+0x40>
c0021a66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021a6b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021a6e:	52                   	push   edx
c0021a6f:	50                   	push   eax
c0021a70:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a73:	50                   	push   eax
c0021a74:	56                   	push   esi
c0021a75:	e8 f2 34 00 00       	call   c0024f6c <Process::Process(char const*, Process*, char**)>
c0021a7a:	83 c4 10             	add    esp,0x10
c0021a7d:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021a84:	75 b8                	jne    c0021a3e <SysSpawn(regs*)+0x10>
c0021a86:	83 ec 0c             	sub    esp,0xc
c0021a89:	56                   	push   esi
c0021a8a:	e8 19 3a 00 00       	call   c00254a8 <Process::createUserThread()>
c0021a8f:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a91:	83 c4 10             	add    esp,0x10
c0021a94:	83 c4 04             	add    esp,0x4
c0021a97:	5b                   	pop    ebx
c0021a98:	89 c2                	mov    edx,eax
c0021a9a:	c1 fa 1f             	sar    edx,0x1f
c0021a9d:	5e                   	pop    esi
c0021a9e:	c3                   	ret    

c0021a9f <SysGetEnv(regs*)>:
c0021a9f:	57                   	push   edi
c0021aa0:	56                   	push   esi
c0021aa1:	53                   	push   ebx
c0021aa2:	83 ec 1c             	sub    esp,0x1c
c0021aa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021aaa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021aae:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021ab1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021ab4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021ab7:	51                   	push   ecx
c0021ab8:	e8 76 e9 ff ff       	call   c0020433 <KeGetProcessTotalEnvCount(Process*)>
c0021abd:	83 c4 10             	add    esp,0x10
c0021ac0:	39 c7                	cmp    edi,eax
c0021ac2:	7c 12                	jl     c0021ad6 <SysGetEnv(regs*)+0x37>
c0021ac4:	31 c0                	xor    eax,eax
c0021ac6:	31 d2                	xor    edx,edx
c0021ac8:	85 f6                	test   esi,esi
c0021aca:	74 03                	je     c0021acf <SysGetEnv(regs*)+0x30>
c0021acc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021acf:	83 c4 10             	add    esp,0x10
c0021ad2:	5b                   	pop    ebx
c0021ad3:	5e                   	pop    esi
c0021ad4:	5f                   	pop    edi
c0021ad5:	c3                   	ret    
c0021ad6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021ada:	83 ec 04             	sub    esp,0x4
c0021add:	57                   	push   edi
c0021ade:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0021ae4:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0021ae7:	57                   	push   edi
c0021ae8:	50                   	push   eax
c0021ae9:	e8 65 e9 ff ff       	call   c0020453 <KeGetProcessEnvPair(Process*, int)>
c0021aee:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021af1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021af5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021af9:	83 c4 0c             	add    esp,0xc
c0021afc:	85 d2                	test   edx,edx
c0021afe:	75 23                	jne    c0021b23 <SysGetEnv(regs*)+0x84>
c0021b00:	83 ec 0c             	sub    esp,0xc
c0021b03:	50                   	push   eax
c0021b04:	e8 77 ea fd ff       	call   c0000580 <strlen>
c0021b09:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021b0c:	89 c3                	mov    ebx,eax
c0021b0e:	e8 6d ea fd ff       	call   c0000580 <strlen>
c0021b13:	83 c4 10             	add    esp,0x10
c0021b16:	31 d2                	xor    edx,edx
c0021b18:	83 c4 10             	add    esp,0x10
c0021b1b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0021b1f:	5b                   	pop    ebx
c0021b20:	5e                   	pop    esi
c0021b21:	5f                   	pop    edi
c0021b22:	c3                   	ret    
c0021b23:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021b26:	83 ec 08             	sub    esp,0x8
c0021b29:	50                   	push   eax
c0021b2a:	56                   	push   esi
c0021b2b:	e8 20 eb fd ff       	call   c0000650 <strcpy>
c0021b30:	58                   	pop    eax
c0021b31:	5a                   	pop    edx
c0021b32:	68 9e 30 03 c0       	push   0xc003309e
c0021b37:	56                   	push   esi
c0021b38:	e8 33 ed fd ff       	call   c0000870 <strcat>
c0021b3d:	59                   	pop    ecx
c0021b3e:	5b                   	pop    ebx
c0021b3f:	57                   	push   edi
c0021b40:	56                   	push   esi
c0021b41:	e8 2a ed fd ff       	call   c0000870 <strcat>
c0021b46:	83 c4 10             	add    esp,0x10
c0021b49:	31 c0                	xor    eax,eax
c0021b4b:	83 c4 10             	add    esp,0x10
c0021b4e:	31 d2                	xor    edx,edx
c0021b50:	5b                   	pop    ebx
c0021b51:	5e                   	pop    esi
c0021b52:	5f                   	pop    edi
c0021b53:	c3                   	ret    

c0021b54 <SysSetFatAttrib(regs*)>:
c0021b54:	57                   	push   edi
c0021b55:	56                   	push   esi
c0021b56:	53                   	push   ebx
c0021b57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021b5b:	83 ec 0c             	sub    esp,0xc
c0021b5e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021b61:	68 14 01 00 00       	push   0x114
c0021b66:	e8 31 4b ff ff       	call   c001669c <malloc>
c0021b6b:	83 c4 0c             	add    esp,0xc
c0021b6e:	89 c3                	mov    ebx,eax
c0021b70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021b75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021b78:	50                   	push   eax
c0021b79:	57                   	push   edi
c0021b7a:	53                   	push   ebx
c0021b7b:	e8 6a 8b ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0021b80:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021b83:	83 c4 0c             	add    esp,0xc
c0021b86:	0f b6 d4             	movzx  edx,ah
c0021b89:	0f b6 c0             	movzx  eax,al
c0021b8c:	52                   	push   edx
c0021b8d:	50                   	push   eax
c0021b8e:	53                   	push   ebx
c0021b8f:	e8 dc 8d ff ff       	call   c001a970 <File::chfatattr(unsigned char, unsigned char)>
c0021b94:	83 c4 10             	add    esp,0x10
c0021b97:	85 db                	test   ebx,ebx
c0021b99:	89 c6                	mov    esi,eax
c0021b9b:	74 0c                	je     c0021ba9 <SysSetFatAttrib(regs*)+0x55>
c0021b9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021b9f:	83 ec 0c             	sub    esp,0xc
c0021ba2:	53                   	push   ebx
c0021ba3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021ba6:	83 c4 10             	add    esp,0x10
c0021ba9:	5b                   	pop    ebx
c0021baa:	31 c0                	xor    eax,eax
c0021bac:	85 f6                	test   esi,esi
c0021bae:	0f 95 c0             	setne  al
c0021bb1:	31 d2                	xor    edx,edx
c0021bb3:	5e                   	pop    esi
c0021bb4:	f7 d8                	neg    eax
c0021bb6:	83 d2 00             	adc    edx,0x0
c0021bb9:	f7 da                	neg    edx
c0021bbb:	5f                   	pop    edi
c0021bbc:	c3                   	ret    

c0021bbd <SysPipe(regs*)>:
c0021bbd:	57                   	push   edi
c0021bbe:	56                   	push   esi
c0021bbf:	53                   	push   ebx
c0021bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc4:	83 ec 0c             	sub    esp,0xc
c0021bc7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021bca:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021bcd:	6a 20                	push   0x20
c0021bcf:	e8 c8 4a ff ff       	call   c001669c <malloc>
c0021bd4:	89 c3                	mov    ebx,eax
c0021bd6:	58                   	pop    eax
c0021bd7:	5a                   	pop    edx
c0021bd8:	68 00 50 00 00       	push   0x5000
c0021bdd:	53                   	push   ebx
c0021bde:	e8 23 54 ff ff       	call   c0017006 <Pipe::Pipe(int)>
c0021be3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021be6:	e8 7b 61 ff ff       	call   c0017d66 <UnixFile::getFileDescriptor()>
c0021beb:	89 07                	mov    DWORD PTR [edi],eax
c0021bed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021bf0:	e8 71 61 ff ff       	call   c0017d66 <UnixFile::getFileDescriptor()>
c0021bf5:	83 c4 10             	add    esp,0x10
c0021bf8:	31 d2                	xor    edx,edx
c0021bfa:	89 06                	mov    DWORD PTR [esi],eax
c0021bfc:	31 c0                	xor    eax,eax
c0021bfe:	5b                   	pop    ebx
c0021bff:	5e                   	pop    esi
c0021c00:	5f                   	pop    edi
c0021c01:	c3                   	ret    

c0021c02 <SysGetUnixTime(regs*)>:
c0021c02:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021c07:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021c0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c11:	e9 dc 95 ff ff       	jmp    c001b1f2 <Clock::timeInSecondsLocal()>

c0021c16 <string_ends_with(char const*, char const*)>:
c0021c16:	57                   	push   edi
c0021c17:	56                   	push   esi
c0021c18:	53                   	push   ebx
c0021c19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021c1d:	83 ec 0c             	sub    esp,0xc
c0021c20:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021c24:	53                   	push   ebx
c0021c25:	e8 56 e9 fd ff       	call   c0000580 <strlen>
c0021c2a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021c2d:	89 c6                	mov    esi,eax
c0021c2f:	e8 4c e9 fd ff       	call   c0000580 <strlen>
c0021c34:	83 c4 10             	add    esp,0x10
c0021c37:	31 d2                	xor    edx,edx
c0021c39:	39 c6                	cmp    esi,eax
c0021c3b:	7d 06                	jge    c0021c43 <string_ends_with(char const*, char const*)+0x2d>
c0021c3d:	5b                   	pop    ebx
c0021c3e:	89 d0                	mov    eax,edx
c0021c40:	5e                   	pop    esi
c0021c41:	5f                   	pop    edi
c0021c42:	c3                   	ret    
c0021c43:	83 ec 08             	sub    esp,0x8
c0021c46:	29 c6                	sub    esi,eax
c0021c48:	57                   	push   edi
c0021c49:	01 f3                	add    ebx,esi
c0021c4b:	53                   	push   ebx
c0021c4c:	e8 2f eb fd ff       	call   c0000780 <strcmp>
c0021c51:	83 c4 10             	add    esp,0x10
c0021c54:	31 d2                	xor    edx,edx
c0021c56:	5b                   	pop    ebx
c0021c57:	5e                   	pop    esi
c0021c58:	85 c0                	test   eax,eax
c0021c5a:	5f                   	pop    edi
c0021c5b:	0f 94 c2             	sete   dl
c0021c5e:	89 d0                	mov    eax,edx
c0021c60:	c3                   	ret    

c0021c61 <SysOpen(regs*)>:
c0021c61:	56                   	push   esi
c0021c62:	53                   	push   ebx
c0021c63:	81 ec 04 01 00 00    	sub    esp,0x104
c0021c69:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021c70:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021c73:	85 c0                	test   eax,eax
c0021c75:	0f 84 c4 01 00 00    	je     c0021e3f <SysOpen(regs*)+0x1de>
c0021c7b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c7e:	85 c0                	test   eax,eax
c0021c80:	0f 84 b9 01 00 00    	je     c0021e3f <SysOpen(regs*)+0x1de>
c0021c86:	6a 00                	push   0x0
c0021c88:	68 a0 30 03 c0       	push   0xc00330a0
c0021c8d:	50                   	push   eax
c0021c8e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021c92:	56                   	push   esi
c0021c93:	e8 46 87 ff ff       	call   c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021c98:	89 34 24             	mov    DWORD PTR [esp],esi
c0021c9b:	e8 e0 e8 fd ff       	call   c0000580 <strlen>
c0021ca0:	83 c4 10             	add    esp,0x10
c0021ca3:	83 e8 01             	sub    eax,0x1
c0021ca6:	74 29                	je     c0021cd1 <SysOpen(regs*)+0x70>
c0021ca8:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021cac:	83 fa 2e             	cmp    edx,0x2e
c0021caf:	74 1c                	je     c0021ccd <SysOpen(regs*)+0x6c>
c0021cb1:	83 fa 3a             	cmp    edx,0x3a
c0021cb4:	74 17                	je     c0021ccd <SysOpen(regs*)+0x6c>
c0021cb6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021cba:	83 e8 01             	sub    eax,0x1
c0021cbd:	74 12                	je     c0021cd1 <SysOpen(regs*)+0x70>
c0021cbf:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021cc3:	83 fa 3a             	cmp    edx,0x3a
c0021cc6:	74 05                	je     c0021ccd <SysOpen(regs*)+0x6c>
c0021cc8:	83 fa 2e             	cmp    edx,0x2e
c0021ccb:	75 e9                	jne    c0021cb6 <SysOpen(regs*)+0x55>
c0021ccd:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021cd1:	83 ec 08             	sub    esp,0x8
c0021cd4:	68 a4 30 03 c0       	push   0xc00330a4
c0021cd9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021cdc:	50                   	push   eax
c0021cdd:	e8 34 ff ff ff       	call   c0021c16 <string_ends_with(char const*, char const*)>
c0021ce2:	83 c4 10             	add    esp,0x10
c0021ce5:	85 c0                	test   eax,eax
c0021ce7:	74 1d                	je     c0021d06 <SysOpen(regs*)+0xa5>
c0021ce9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021cec:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0021cf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021cf9:	81 c4 04 01 00 00    	add    esp,0x104
c0021cff:	31 c0                	xor    eax,eax
c0021d01:	5b                   	pop    ebx
c0021d02:	31 d2                	xor    edx,edx
c0021d04:	5e                   	pop    esi
c0021d05:	c3                   	ret    
c0021d06:	83 ec 08             	sub    esp,0x8
c0021d09:	68 a9 30 03 c0       	push   0xc00330a9
c0021d0e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021d11:	50                   	push   eax
c0021d12:	e8 ff fe ff ff       	call   c0021c16 <string_ends_with(char const*, char const*)>
c0021d17:	83 c4 10             	add    esp,0x10
c0021d1a:	85 c0                	test   eax,eax
c0021d1c:	75 cb                	jne    c0021ce9 <SysOpen(regs*)+0x88>
c0021d1e:	83 ec 08             	sub    esp,0x8
c0021d21:	68 a5 30 03 c0       	push   0xc00330a5
c0021d26:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021d29:	50                   	push   eax
c0021d2a:	e8 51 ea fd ff       	call   c0000780 <strcmp>
c0021d2f:	83 c4 10             	add    esp,0x10
c0021d32:	85 c0                	test   eax,eax
c0021d34:	74 b3                	je     c0021ce9 <SysOpen(regs*)+0x88>
c0021d36:	83 ec 08             	sub    esp,0x8
c0021d39:	68 a4 30 03 c0       	push   0xc00330a4
c0021d3e:	56                   	push   esi
c0021d3f:	e8 d2 fe ff ff       	call   c0021c16 <string_ends_with(char const*, char const*)>
c0021d44:	83 c4 10             	add    esp,0x10
c0021d47:	85 c0                	test   eax,eax
c0021d49:	75 9e                	jne    c0021ce9 <SysOpen(regs*)+0x88>
c0021d4b:	83 ec 08             	sub    esp,0x8
c0021d4e:	68 ae 30 03 c0       	push   0xc00330ae
c0021d53:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021d56:	50                   	push   eax
c0021d57:	e8 ba fe ff ff       	call   c0021c16 <string_ends_with(char const*, char const*)>
c0021d5c:	83 c4 10             	add    esp,0x10
c0021d5f:	85 c0                	test   eax,eax
c0021d61:	0f 85 eb 00 00 00    	jne    c0021e52 <SysOpen(regs*)+0x1f1>
c0021d67:	83 ec 08             	sub    esp,0x8
c0021d6a:	68 b3 30 03 c0       	push   0xc00330b3
c0021d6f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021d72:	50                   	push   eax
c0021d73:	e8 9e fe ff ff       	call   c0021c16 <string_ends_with(char const*, char const*)>
c0021d78:	83 c4 10             	add    esp,0x10
c0021d7b:	85 c0                	test   eax,eax
c0021d7d:	0f 85 cf 00 00 00    	jne    c0021e52 <SysOpen(regs*)+0x1f1>
c0021d83:	83 ec 08             	sub    esp,0x8
c0021d86:	68 af 30 03 c0       	push   0xc00330af
c0021d8b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021d8e:	51                   	push   ecx
c0021d8f:	e8 ec e9 fd ff       	call   c0000780 <strcmp>
c0021d94:	83 c4 10             	add    esp,0x10
c0021d97:	85 c0                	test   eax,eax
c0021d99:	0f 84 b3 00 00 00    	je     c0021e52 <SysOpen(regs*)+0x1f1>
c0021d9f:	83 ec 08             	sub    esp,0x8
c0021da2:	68 ae 30 03 c0       	push   0xc00330ae
c0021da7:	56                   	push   esi
c0021da8:	e8 69 fe ff ff       	call   c0021c16 <string_ends_with(char const*, char const*)>
c0021dad:	83 c4 10             	add    esp,0x10
c0021db0:	85 c0                	test   eax,eax
c0021db2:	0f 85 9a 00 00 00    	jne    c0021e52 <SysOpen(regs*)+0x1f1>
c0021db8:	83 ec 0c             	sub    esp,0xc
c0021dbb:	68 14 01 00 00       	push   0x114
c0021dc0:	e8 d7 48 ff ff       	call   c001669c <malloc>
c0021dc5:	83 c4 0c             	add    esp,0xc
c0021dc8:	89 c6                	mov    esi,eax
c0021dca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021dcf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021dd2:	50                   	push   eax
c0021dd3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021dd6:	52                   	push   edx
c0021dd7:	56                   	push   esi
c0021dd8:	e8 0d 89 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0021ddd:	83 c4 10             	add    esp,0x10
c0021de0:	85 f6                	test   esi,esi
c0021de2:	74 5b                	je     c0021e3f <SysOpen(regs*)+0x1de>
c0021de4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021de7:	0f b6 c2             	movzx  eax,dl
c0021dea:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021ded:	89 d0                	mov    eax,edx
c0021def:	83 e0 01             	and    eax,0x1
c0021df2:	f6 c2 02             	test   dl,0x2
c0021df5:	74 03                	je     c0021dfa <SysOpen(regs*)+0x199>
c0021df7:	83 c8 02             	or     eax,0x2
c0021dfa:	f6 c2 04             	test   dl,0x4
c0021dfd:	74 03                	je     c0021e02 <SysOpen(regs*)+0x1a1>
c0021dff:	83 c8 04             	or     eax,0x4
c0021e02:	f6 c2 08             	test   dl,0x8
c0021e05:	74 03                	je     c0021e0a <SysOpen(regs*)+0x1a9>
c0021e07:	83 c8 0a             	or     eax,0xa
c0021e0a:	80 e2 10             	and    dl,0x10
c0021e0d:	74 03                	je     c0021e12 <SysOpen(regs*)+0x1b1>
c0021e0f:	83 c8 12             	or     eax,0x12
c0021e12:	83 ec 08             	sub    esp,0x8
c0021e15:	50                   	push   eax
c0021e16:	56                   	push   esi
c0021e17:	e8 ec 88 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c0021e1c:	83 c4 10             	add    esp,0x10
c0021e1f:	85 c0                	test   eax,eax
c0021e21:	75 1c                	jne    c0021e3f <SysOpen(regs*)+0x1de>
c0021e23:	83 ec 0c             	sub    esp,0xc
c0021e26:	56                   	push   esi
c0021e27:	e8 3a 5f ff ff       	call   c0017d66 <UnixFile::getFileDescriptor()>
c0021e2c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021e2f:	83 c4 10             	add    esp,0x10
c0021e32:	89 02                	mov    DWORD PTR [edx],eax
c0021e34:	c1 f8 1f             	sar    eax,0x1f
c0021e37:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021e3a:	e9 ba fe ff ff       	jmp    c0021cf9 <SysOpen(regs*)+0x98>
c0021e3f:	81 c4 04 01 00 00    	add    esp,0x104
c0021e45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021e4a:	5b                   	pop    ebx
c0021e4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021e50:	5e                   	pop    esi
c0021e51:	c3                   	ret    
c0021e52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021e55:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021e5b:	e9 92 fe ff ff       	jmp    c0021cf2 <SysOpen(regs*)+0x91>

c0021e60 <KeSystemCall(regs*, void*)>:
c0021e60:	53                   	push   ebx
c0021e61:	83 ec 08             	sub    esp,0x8
c0021e64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e68:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021e6b:	83 f8 3e             	cmp    eax,0x3e
c0021e6e:	77 16                	ja     c0021e86 <KeSystemCall(regs*, void*)+0x26>
c0021e70:	8b 14 85 80 49 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcb680]
c0021e77:	85 d2                	test   edx,edx
c0021e79:	74 0b                	je     c0021e86 <KeSystemCall(regs*, void*)+0x26>
c0021e7b:	83 ec 0c             	sub    esp,0xc
c0021e7e:	53                   	push   ebx
c0021e7f:	ff d2                	call   edx
c0021e81:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021e84:	eb 0d                	jmp    c0021e93 <KeSystemCall(regs*, void*)+0x33>
c0021e86:	52                   	push   edx
c0021e87:	52                   	push   edx
c0021e88:	50                   	push   eax
c0021e89:	68 b8 30 03 c0       	push   0xc00330b8
c0021e8e:	e8 3f 76 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0021e93:	83 c4 10             	add    esp,0x10
c0021e96:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021e9b:	83 c4 08             	add    esp,0x8
c0021e9e:	31 d2                	xor    edx,edx
c0021ea0:	5b                   	pop    ebx
c0021ea1:	c3                   	ret    
c0021ea2:	66 90                	xchg   ax,ax

c0021ea4 <KeSwitchEndian16(unsigned short)>:
c0021ea4:	83 ec 04             	sub    esp,0x4
c0021ea7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021eab:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021eaf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021eb3:	c1 f8 08             	sar    eax,0x8
c0021eb6:	89 c2                	mov    edx,eax
c0021eb8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021ebc:	c1 e0 08             	shl    eax,0x8
c0021ebf:	09 d0                	or     eax,edx
c0021ec1:	83 c4 04             	add    esp,0x4
c0021ec4:	c3                   	ret    
c0021ec5:	8d 76 00             	lea    esi,[esi+0x0]

c0021ec8 <KeSwitchEndian32(unsigned int)>:
c0021ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ecc:	c1 e8 18             	shr    eax,0x18
c0021ecf:	89 c2                	mov    edx,eax
c0021ed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ed5:	c1 e0 08             	shl    eax,0x8
c0021ed8:	25 00 00 ff 00       	and    eax,0xff0000
c0021edd:	09 c2                	or     edx,eax
c0021edf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ee3:	c1 e8 08             	shr    eax,0x8
c0021ee6:	25 00 ff 00 00       	and    eax,0xff00
c0021eeb:	09 c2                	or     edx,eax
c0021eed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ef1:	c1 e0 18             	shl    eax,0x18
c0021ef4:	09 d0                	or     eax,edx
c0021ef6:	c3                   	ret    
c0021ef7:	90                   	nop

c0021ef8 <EthernetCRC32(unsigned char*, int)>:
c0021ef8:	83 ec 10             	sub    esp,0x10
c0021efb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021f00:	75 0a                	jne    c0021f0c <EthernetCRC32(unsigned char*, int)+0x14>
c0021f02:	b8 00 00 00 00       	mov    eax,0x0
c0021f07:	e9 8c 00 00 00       	jmp    c0021f98 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021f0c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021f11:	7f 09                	jg     c0021f1c <EthernetCRC32(unsigned char*, int)+0x24>
c0021f13:	b8 00 00 00 00       	mov    eax,0x0
c0021f18:	eb 7e                	jmp    c0021f98 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021f1a:	66 90                	xchg   ax,ax
c0021f1c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021f24:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f30:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021f34:	7d 5a                	jge    c0021f90 <EthernetCRC32(unsigned char*, int)+0x98>
c0021f36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021f3e:	01 d0                	add    eax,edx
c0021f40:	8a 00                	mov    al,BYTE PTR [eax]
c0021f42:	0f b6 c0             	movzx  eax,al
c0021f45:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021f49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f51:	8d 76 00             	lea    esi,[esi+0x0]
c0021f54:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021f59:	7f 2d                	jg     c0021f88 <EthernetCRC32(unsigned char*, int)+0x90>
c0021f5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f5f:	83 e0 01             	and    eax,0x1
c0021f62:	74 10                	je     c0021f74 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f68:	d1 e8                	shr    eax,1
c0021f6a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021f6f:	eb 0b                	jmp    c0021f7c <EthernetCRC32(unsigned char*, int)+0x84>
c0021f71:	8d 76 00             	lea    esi,[esi+0x0]
c0021f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f78:	d1 e8                	shr    eax,1
c0021f7a:	66 90                	xchg   ax,ax
c0021f7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f80:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021f85:	eb cd                	jmp    c0021f54 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021f87:	90                   	nop
c0021f88:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021f8d:	eb 9d                	jmp    c0021f2c <EthernetCRC32(unsigned char*, int)+0x34>
c0021f8f:	90                   	nop
c0021f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f94:	f7 d0                	not    eax
c0021f96:	66 90                	xchg   ax,ax
c0021f98:	83 c4 10             	add    esp,0x10
c0021f9b:	c3                   	ret    

c0021f9c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021f9c:	83 ec 2c             	sub    esp,0x2c
c0021f9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021fa3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021fa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021fb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021fb7:	0f b7 c0             	movzx  eax,ax
c0021fba:	3d 06 08 00 00       	cmp    eax,0x806
c0021fbf:	75 13                	jne    c0021fd4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021fc1:	83 ec 0c             	sub    esp,0xc
c0021fc4:	68 cc 30 03 c0       	push   0xc00330cc
c0021fc9:	e8 04 75 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0021fce:	83 c4 10             	add    esp,0x10
c0021fd1:	eb 25                	jmp    c0021ff8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021fd3:	90                   	nop
c0021fd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021fdb:	0f b7 c0             	movzx  eax,ax
c0021fde:	3d 00 08 00 00       	cmp    eax,0x800
c0021fe3:	75 13                	jne    c0021ff8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021fe5:	83 ec 0c             	sub    esp,0xc
c0021fe8:	68 e2 30 03 c0       	push   0xc00330e2
c0021fed:	e8 e0 74 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0021ff2:	83 c4 10             	add    esp,0x10
c0021ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ff8:	90                   	nop
c0021ff9:	83 c4 2c             	add    esp,0x2c
c0021ffc:	c3                   	ret    
c0021ffd:	66 90                	xchg   ax,ax
c0021fff:	90                   	nop

c0022000 <KeNetCreateSemaphore>:
c0022000:	53                   	push   ebx
c0022001:	83 ec 18             	sub    esp,0x18
c0022004:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c002200c:	83 ec 0c             	sub    esp,0xc
c002200f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022013:	e8 84 46 ff ff       	call   c001669c <malloc>
c0022018:	83 c4 10             	add    esp,0x10
c002201b:	89 c3                	mov    ebx,eax
c002201d:	83 ec 08             	sub    esp,0x8
c0022020:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022024:	53                   	push   ebx
c0022025:	e8 12 e9 ff ff       	call   c002093c <Semaphore::Semaphore(int)>
c002202a:	83 c4 10             	add    esp,0x10
c002202d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0022031:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022039:	89 10                	mov    DWORD PTR [eax],edx
c002203b:	90                   	nop
c002203c:	83 c4 18             	add    esp,0x18
c002203f:	5b                   	pop    ebx
c0022040:	c3                   	ret    
c0022041:	8d 76 00             	lea    esi,[esi+0x0]

c0022044 <KeNetFreeSemaphore>:
c0022044:	83 ec 0c             	sub    esp,0xc
c0022047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204b:	8b 00                	mov    eax,DWORD PTR [eax]
c002204d:	83 ec 08             	sub    esp,0x8
c0022050:	6a 10                	push   0x10
c0022052:	50                   	push   eax
c0022053:	e8 7c 73 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c0022058:	83 c4 10             	add    esp,0x10
c002205b:	90                   	nop
c002205c:	83 c4 0c             	add    esp,0xc
c002205f:	c3                   	ret    

c0022060 <KeNetSignalSemaphore>:
c0022060:	83 ec 0c             	sub    esp,0xc
c0022063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022067:	8b 00                	mov    eax,DWORD PTR [eax]
c0022069:	83 ec 0c             	sub    esp,0xc
c002206c:	50                   	push   eax
c002206d:	e8 2a ec ff ff       	call   c0020c9c <Semaphore::release()>
c0022072:	83 c4 10             	add    esp,0x10
c0022075:	90                   	nop
c0022076:	83 c4 0c             	add    esp,0xc
c0022079:	c3                   	ret    
c002207a:	66 90                	xchg   ax,ax

c002207c <KeNetWaitSemaphore>:
c002207c:	83 ec 0c             	sub    esp,0xc
c002207f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022083:	8b 00                	mov    eax,DWORD PTR [eax]
c0022085:	83 ec 08             	sub    esp,0x8
c0022088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002208c:	50                   	push   eax
c002208d:	e8 46 ea ff ff       	call   c0020ad8 <Semaphore::acquire(int)>
c0022092:	83 c4 10             	add    esp,0x10
c0022095:	83 c4 0c             	add    esp,0xc
c0022098:	c3                   	ret    
c0022099:	8d 76 00             	lea    esi,[esi+0x0]

c002209c <KeNetCreateThread>:
c002209c:	83 ec 0c             	sub    esp,0xc
c002209f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00220a4:	68 80 00 00 00       	push   0x80
c00220a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00220ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00220b1:	50                   	push   eax
c00220b2:	e8 e9 32 00 00       	call   c00253a0 <Process::createThread(void (*)(void*), void*, int)>
c00220b7:	83 c4 10             	add    esp,0x10
c00220ba:	90                   	nop
c00220bb:	83 c4 0c             	add    esp,0xc
c00220be:	c3                   	ret    
c00220bf:	90                   	nop

c00220c0 <KeCPanic>:
c00220c0:	83 ec 0c             	sub    esp,0xc
c00220c3:	83 ec 0c             	sub    esp,0xc
c00220c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220ca:	e8 c7 e4 ff ff       	call   c0020596 <KePanic(char const*)>
c00220cf:	83 c4 10             	add    esp,0x10
c00220d2:	90                   	nop
c00220d3:	83 c4 0c             	add    esp,0xc
c00220d6:	c3                   	ret    
c00220d7:	90                   	nop

c00220d8 <KeCPuts>:
c00220d8:	83 ec 0c             	sub    esp,0xc
c00220db:	83 ec 08             	sub    esp,0x8
c00220de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00220e2:	68 b2 37 03 c0       	push   0xc00337b2
c00220e7:	e8 e6 73 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00220ec:	83 c4 10             	add    esp,0x10
c00220ef:	90                   	nop
c00220f0:	83 c4 0c             	add    esp,0xc
c00220f3:	c3                   	ret    

c00220f4 <CmOpen(char const*)>:
c00220f4:	57                   	push   edi
c00220f5:	56                   	push   esi
c00220f6:	53                   	push   ebx
c00220f7:	83 ec 1c             	sub    esp,0x1c
c00220fa:	6a 30                	push   0x30
c00220fc:	e8 9b 45 ff ff       	call   c001669c <malloc>
c0022101:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022108:	89 c3                	mov    ebx,eax
c002210a:	e8 8d 45 ff ff       	call   c001669c <malloc>
c002210f:	83 c4 0c             	add    esp,0xc
c0022112:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022118:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002211c:	89 c6                	mov    esi,eax
c002211e:	50                   	push   eax
c002211f:	e8 c6 85 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0022124:	83 c4 0c             	add    esp,0xc
c0022127:	89 33                	mov    DWORD PTR [ebx],esi
c0022129:	8d 44 24 07          	lea    eax,[esp+0x7]
c002212d:	50                   	push   eax
c002212e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022132:	50                   	push   eax
c0022133:	56                   	push   esi
c0022134:	e8 d1 88 ff ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c0022139:	5a                   	pop    edx
c002213a:	59                   	pop    ecx
c002213b:	6a 01                	push   0x1
c002213d:	ff 33                	push   DWORD PTR [ebx]
c002213f:	e8 c4 85 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c0022144:	5e                   	pop    esi
c0022145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022149:	e8 4e 45 ff ff       	call   c001669c <malloc>
c002214e:	5a                   	pop    edx
c002214f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0022153:	89 c7                	mov    edi,eax
c0022155:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022157:	8b 10                	mov    edx,DWORD PTR [eax]
c0022159:	56                   	push   esi
c002215a:	57                   	push   edi
c002215b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002215f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022163:	50                   	push   eax
c0022164:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022167:	83 c4 14             	add    esp,0x14
c002216a:	ff 33                	push   DWORD PTR [ebx]
c002216c:	e8 f5 85 ff ff       	call   c001a766 <File::close()>
c0022171:	59                   	pop    ecx
c0022172:	58                   	pop    eax
c0022173:	6a 13                	push   0x13
c0022175:	ff 33                	push   DWORD PTR [ebx]
c0022177:	e8 8c 85 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c002217c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002217e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022180:	89 34 24             	mov    DWORD PTR [esp],esi
c0022183:	57                   	push   edi
c0022184:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022188:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002218c:	50                   	push   eax
c002218d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022190:	83 c4 14             	add    esp,0x14
c0022193:	57                   	push   edi
c0022194:	e8 13 45 ff ff       	call   c00166ac <free>
c0022199:	83 c4 10             	add    esp,0x10
c002219c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c002219f:	75 10                	jne    c00221b1 <CmOpen(char const*)+0xbd>
c00221a1:	83 ec 0c             	sub    esp,0xc
c00221a4:	68 f7 30 03 c0       	push   0xc00330f7
c00221a9:	e8 e8 e3 ff ff       	call   c0020596 <KePanic(char const*)>
c00221ae:	83 c4 10             	add    esp,0x10
c00221b1:	50                   	push   eax
c00221b2:	6a 00                	push   0x0
c00221b4:	6a 00                	push   0x0
c00221b6:	ff 33                	push   DWORD PTR [ebx]
c00221b8:	8d 7b 05             	lea    edi,[ebx+0x5]
c00221bb:	e8 06 86 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c00221c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00221c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00221c4:	89 34 24             	mov    DWORD PTR [esp],esi
c00221c7:	57                   	push   edi
c00221c8:	6a 00                	push   0x0
c00221ca:	6a 2b                	push   0x2b
c00221cc:	50                   	push   eax
c00221cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00221d0:	83 c4 1c             	add    esp,0x1c
c00221d3:	6a 00                	push   0x0
c00221d5:	6a 00                	push   0x0
c00221d7:	ff 33                	push   DWORD PTR [ebx]
c00221d9:	e8 e8 85 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c00221de:	83 c4 0c             	add    esp,0xc
c00221e1:	6a 08                	push   0x8
c00221e3:	68 08 31 03 c0       	push   0xc0033108
c00221e8:	57                   	push   edi
c00221e9:	e8 92 e1 fd ff       	call   c0000380 <memcmp>
c00221ee:	83 c4 10             	add    esp,0x10
c00221f1:	85 c0                	test   eax,eax
c00221f3:	74 10                	je     c0022205 <CmOpen(char const*)+0x111>
c00221f5:	83 ec 0c             	sub    esp,0xc
c00221f8:	68 11 31 03 c0       	push   0xc0033111
c00221fd:	e8 94 e3 ff ff       	call   c0020596 <KePanic(char const*)>
c0022202:	83 c4 10             	add    esp,0x10
c0022205:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0022209:	83 c4 10             	add    esp,0x10
c002220c:	89 d8                	mov    eax,ebx
c002220e:	5b                   	pop    ebx
c002220f:	5e                   	pop    esi
c0022210:	5f                   	pop    edi
c0022211:	c3                   	ret    

c0022212 <CmClose(Reghive_Tag*)>:
c0022212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022216:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c002221a:	74 0b                	je     c0022227 <CmClose(Reghive_Tag*)+0x15>
c002221c:	8b 00                	mov    eax,DWORD PTR [eax]
c002221e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022222:	e9 3f 85 ff ff       	jmp    c001a766 <File::close()>
c0022227:	c3                   	ret    

c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0022228:	53                   	push   ebx
c0022229:	83 ec 18             	sub    esp,0x18
c002222c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022230:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022234:	74 29                	je     c002225f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022236:	50                   	push   eax
c0022237:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c002223c:	99                   	cdq    
c002223d:	52                   	push   edx
c002223e:	50                   	push   eax
c002223f:	ff 33                	push   DWORD PTR [ebx]
c0022241:	e8 80 85 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0022246:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022248:	5a                   	pop    edx
c0022249:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002224d:	8b 10                	mov    edx,DWORD PTR [eax]
c002224f:	51                   	push   ecx
c0022250:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022254:	6a 00                	push   0x0
c0022256:	6a 2b                	push   0x2b
c0022258:	50                   	push   eax
c0022259:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002225c:	83 c4 20             	add    esp,0x20
c002225f:	83 c4 18             	add    esp,0x18
c0022262:	5b                   	pop    ebx
c0022263:	c3                   	ret    

c0022264 <CmGetString(Reghive_Tag*, int, char*)>:
c0022264:	55                   	push   ebp
c0022265:	57                   	push   edi
c0022266:	56                   	push   esi
c0022267:	53                   	push   ebx
c0022268:	31 db                	xor    ebx,ebx
c002226a:	83 ec 70             	sub    esp,0x70
c002226d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0022271:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0022278:	50                   	push   eax
c0022279:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022280:	55                   	push   ebp
c0022281:	e8 a2 ff ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022286:	83 c4 10             	add    esp,0x10
c0022289:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c002228e:	c1 e0 08             	shl    eax,0x8
c0022291:	89 c2                	mov    edx,eax
c0022293:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0022298:	09 d0                	or     eax,edx
c002229a:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c002229f:	c1 e0 08             	shl    eax,0x8
c00222a2:	09 d0                	or     eax,edx
c00222a4:	74 25                	je     c00222cb <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00222a6:	52                   	push   edx
c00222a7:	8d 54 24 39          	lea    edx,[esp+0x39]
c00222ab:	52                   	push   edx
c00222ac:	6b fb 0d             	imul   edi,ebx,0xd
c00222af:	50                   	push   eax
c00222b0:	55                   	push   ebp
c00222b1:	e8 72 ff ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00222b6:	8d 74 24 49          	lea    esi,[esp+0x49]
c00222ba:	b9 27 00 00 00       	mov    ecx,0x27
c00222bf:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00222c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00222c8:	83 c4 10             	add    esp,0x10
c00222cb:	83 c3 03             	add    ebx,0x3
c00222ce:	83 fb 15             	cmp    ebx,0x15
c00222d1:	75 b6                	jne    c0022289 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00222d3:	83 c4 6c             	add    esp,0x6c
c00222d6:	5b                   	pop    ebx
c00222d7:	5e                   	pop    esi
c00222d8:	5f                   	pop    edi
c00222d9:	5d                   	pop    ebp
c00222da:	c3                   	ret    

c00222db <CmEnterDirectory(Reghive_Tag*, int)>:
c00222db:	83 ec 40             	sub    esp,0x40
c00222de:	8d 44 24 09          	lea    eax,[esp+0x9]
c00222e2:	50                   	push   eax
c00222e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00222e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00222eb:	e8 38 ff ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00222f0:	83 c4 10             	add    esp,0x10
c00222f3:	83 c8 ff             	or     eax,0xffffffff
c00222f6:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00222fb:	75 19                	jne    c0022316 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00222fd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0022302:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0022307:	c1 e0 08             	shl    eax,0x8
c002230a:	09 c2                	or     edx,eax
c002230c:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0022311:	c1 e0 10             	shl    eax,0x10
c0022314:	09 d0                	or     eax,edx
c0022316:	83 c4 3c             	add    esp,0x3c
c0022319:	c3                   	ret    

c002231a <CmGetNext(Reghive_Tag*, int)>:
c002231a:	83 ec 40             	sub    esp,0x40
c002231d:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022321:	50                   	push   eax
c0022322:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022326:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002232a:	e8 f9 fe ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002232f:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0022334:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0022339:	c1 e0 08             	shl    eax,0x8
c002233c:	09 c2                	or     edx,eax
c002233e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0022343:	83 c4 4c             	add    esp,0x4c
c0022346:	c1 e0 10             	shl    eax,0x10
c0022349:	09 d0                	or     eax,edx
c002234b:	c3                   	ret    

c002234c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c002234c:	53                   	push   ebx
c002234d:	83 ec 18             	sub    esp,0x18
c0022350:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022354:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022358:	74 29                	je     c0022383 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c002235a:	50                   	push   eax
c002235b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022360:	99                   	cdq    
c0022361:	52                   	push   edx
c0022362:	50                   	push   eax
c0022363:	ff 33                	push   DWORD PTR [ebx]
c0022365:	e8 5c 84 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c002236a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002236c:	5a                   	pop    edx
c002236d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022371:	8b 10                	mov    edx,DWORD PTR [eax]
c0022373:	51                   	push   ecx
c0022374:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022378:	6a 00                	push   0x0
c002237a:	6a 2b                	push   0x2b
c002237c:	50                   	push   eax
c002237d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022380:	83 c4 20             	add    esp,0x20
c0022383:	83 c4 18             	add    esp,0x18
c0022386:	5b                   	pop    ebx
c0022387:	c3                   	ret    

c0022388 <CmFreeExtent(Reghive_Tag*, int)>:
c0022388:	53                   	push   ebx
c0022389:	83 ec 3c             	sub    esp,0x3c
c002238c:	6a 2b                	push   0x2b
c002238e:	6a 00                	push   0x0
c0022390:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022394:	53                   	push   ebx
c0022395:	e8 56 e1 fd ff       	call   c00004f0 <memset>
c002239a:	83 c4 0c             	add    esp,0xc
c002239d:	53                   	push   ebx
c002239e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00223a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00223a6:	e8 a1 ff ff ff       	call   c002234c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00223ab:	83 c4 48             	add    esp,0x48
c00223ae:	5b                   	pop    ebx
c00223af:	c3                   	ret    

c00223b0 <CmUpdateHeader(Reghive_Tag*)>:
c00223b0:	83 ec 0c             	sub    esp,0xc
c00223b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00223bb:	74 10                	je     c00223cd <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00223bd:	52                   	push   edx
c00223be:	8d 50 05             	lea    edx,[eax+0x5]
c00223c1:	52                   	push   edx
c00223c2:	6a 00                	push   0x0
c00223c4:	50                   	push   eax
c00223c5:	e8 82 ff ff ff       	call   c002234c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00223ca:	83 c4 10             	add    esp,0x10
c00223cd:	83 c4 0c             	add    esp,0xc
c00223d0:	c3                   	ret    

c00223d1 <CmExpand(Reghive_Tag*, int)>:
c00223d1:	55                   	push   ebp
c00223d2:	57                   	push   edi
c00223d3:	83 cf ff             	or     edi,0xffffffff
c00223d6:	56                   	push   esi
c00223d7:	53                   	push   ebx
c00223d8:	83 ec 3c             	sub    esp,0x3c
c00223db:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00223df:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00223e3:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00223e7:	74 59                	je     c0022442 <CmExpand(Reghive_Tag*, int)+0x71>
c00223e9:	50                   	push   eax
c00223ea:	31 d2                	xor    edx,edx
c00223ec:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00223f0:	31 ff                	xor    edi,edi
c00223f2:	52                   	push   edx
c00223f3:	50                   	push   eax
c00223f4:	ff 33                	push   DWORD PTR [ebx]
c00223f6:	e8 cb 83 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c00223fb:	83 c4 0c             	add    esp,0xc
c00223fe:	6a 2b                	push   0x2b
c0022400:	6a 00                	push   0x0
c0022402:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0022406:	55                   	push   ebp
c0022407:	e8 e4 e0 fd ff       	call   c00004f0 <memset>
c002240c:	83 c4 10             	add    esp,0x10
c002240f:	39 f7                	cmp    edi,esi
c0022411:	7d 1b                	jge    c002242e <CmExpand(Reghive_Tag*, int)+0x5d>
c0022413:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022415:	83 ec 0c             	sub    esp,0xc
c0022418:	47                   	inc    edi
c0022419:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c002241d:	8b 10                	mov    edx,DWORD PTR [eax]
c002241f:	51                   	push   ecx
c0022420:	55                   	push   ebp
c0022421:	6a 00                	push   0x0
c0022423:	6a 2b                	push   0x2b
c0022425:	50                   	push   eax
c0022426:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022429:	83 c4 20             	add    esp,0x20
c002242c:	eb e1                	jmp    c002240f <CmExpand(Reghive_Tag*, int)+0x3e>
c002242e:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0022431:	83 ec 0c             	sub    esp,0xc
c0022434:	01 fe                	add    esi,edi
c0022436:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0022439:	53                   	push   ebx
c002243a:	e8 71 ff ff ff       	call   c00223b0 <CmUpdateHeader(Reghive_Tag*)>
c002243f:	83 c4 10             	add    esp,0x10
c0022442:	83 c4 3c             	add    esp,0x3c
c0022445:	89 f8                	mov    eax,edi
c0022447:	5b                   	pop    ebx
c0022448:	5e                   	pop    esi
c0022449:	5f                   	pop    edi
c002244a:	5d                   	pop    ebp
c002244b:	c3                   	ret    

c002244c <CmFindUnusedExtent(Reghive_Tag*)>:
c002244c:	55                   	push   ebp
c002244d:	57                   	push   edi
c002244e:	56                   	push   esi
c002244f:	53                   	push   ebx
c0022450:	83 cb ff             	or     ebx,0xffffffff
c0022453:	83 ec 1c             	sub    esp,0x1c
c0022456:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002245a:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c002245e:	74 68                	je     c00224c8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022460:	51                   	push   ecx
c0022461:	be 2b 00 00 00       	mov    esi,0x2b
c0022466:	6a 00                	push   0x0
c0022468:	31 ff                	xor    edi,edi
c002246a:	6a 00                	push   0x0
c002246c:	31 db                	xor    ebx,ebx
c002246e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022471:	e8 50 83 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0022476:	83 c4 10             	add    esp,0x10
c0022479:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c002247c:	76 3b                	jbe    c00224b9 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c002247e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022481:	83 ec 0c             	sub    esp,0xc
c0022484:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022488:	8b 10                	mov    edx,DWORD PTR [eax]
c002248a:	51                   	push   ecx
c002248b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c002248f:	51                   	push   ecx
c0022490:	6a 00                	push   0x0
c0022492:	6a 01                	push   0x1
c0022494:	50                   	push   eax
c0022495:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022498:	83 c4 20             	add    esp,0x20
c002249b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00224a0:	74 26                	je     c00224c8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00224a2:	52                   	push   edx
c00224a3:	43                   	inc    ebx
c00224a4:	57                   	push   edi
c00224a5:	56                   	push   esi
c00224a6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00224a9:	e8 18 83 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c00224ae:	83 c6 2b             	add    esi,0x2b
c00224b1:	83 d7 00             	adc    edi,0x0
c00224b4:	83 c4 10             	add    esp,0x10
c00224b7:	eb c0                	jmp    c0022479 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00224b9:	50                   	push   eax
c00224ba:	50                   	push   eax
c00224bb:	6a 40                	push   0x40
c00224bd:	55                   	push   ebp
c00224be:	e8 0e ff ff ff       	call   c00223d1 <CmExpand(Reghive_Tag*, int)>
c00224c3:	83 c4 10             	add    esp,0x10
c00224c6:	89 c3                	mov    ebx,eax
c00224c8:	83 c4 1c             	add    esp,0x1c
c00224cb:	89 d8                	mov    eax,ebx
c00224cd:	5b                   	pop    ebx
c00224ce:	5e                   	pop    esi
c00224cf:	5f                   	pop    edi
c00224d0:	5d                   	pop    ebp
c00224d1:	c3                   	ret    

c00224d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00224d2:	55                   	push   ebp
c00224d3:	57                   	push   edi
c00224d4:	56                   	push   esi
c00224d5:	53                   	push   ebx
c00224d6:	81 ec 88 00 00 00    	sub    esp,0x88
c00224dc:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00224e3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00224ea:	e8 5d ff ff ff       	call   c002244c <CmFindUnusedExtent(Reghive_Tag*)>
c00224ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00224f3:	83 c4 0c             	add    esp,0xc
c00224f6:	6a 2b                	push   0x2b
c00224f8:	6a 00                	push   0x0
c00224fa:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00224fe:	55                   	push   ebp
c00224ff:	e8 ec df fd ff       	call   c00004f0 <memset>
c0022504:	83 c4 10             	add    esp,0x10
c0022507:	85 db                	test   ebx,ebx
c0022509:	74 12                	je     c002251d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c002250b:	51                   	push   ecx
c002250c:	55                   	push   ebp
c002250d:	53                   	push   ebx
c002250e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022515:	e8 0e fd ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002251a:	83 c4 10             	add    esp,0x10
c002251d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0022521:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022528:	b9 2b 00 00 00       	mov    ecx,0x2b
c002252d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002252f:	85 db                	test   ebx,ebx
c0022531:	74 49                	je     c002257c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0022533:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0022538:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c002253d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022541:	c1 e0 08             	shl    eax,0x8
c0022544:	81 e2 ff ff ff 00    	and    edx,0xffffff
c002254a:	09 c8                	or     eax,ecx
c002254c:	74 11                	je     c002255f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c002254e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0022552:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0022556:	c1 e8 10             	shr    eax,0x10
c0022559:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c002255d:	eb 0f                	jmp    c002256e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c002255f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022564:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022569:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002256e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0022572:	c1 ea 08             	shr    edx,0x8
c0022575:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c002257a:	eb 0f                	jmp    c002258b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c002257c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022581:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022586:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002258b:	52                   	push   edx
c002258c:	8d 44 24 49          	lea    eax,[esp+0x49]
c0022590:	50                   	push   eax
c0022591:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022595:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002259c:	e8 ab fd ff ff       	call   c002234c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00225a1:	83 c4 10             	add    esp,0x10
c00225a4:	85 db                	test   ebx,ebx
c00225a6:	74 12                	je     c00225ba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00225a8:	50                   	push   eax
c00225a9:	55                   	push   ebp
c00225aa:	53                   	push   ebx
c00225ab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00225b2:	e8 95 fd ff ff       	call   c002234c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00225b7:	83 c4 10             	add    esp,0x10
c00225ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225be:	83 c4 7c             	add    esp,0x7c
c00225c1:	5b                   	pop    ebx
c00225c2:	5e                   	pop    esi
c00225c3:	5f                   	pop    edi
c00225c4:	5d                   	pop    ebp
c00225c5:	c3                   	ret    

c00225c6 <CmSetString(Reghive_Tag*, int, char const*)>:
c00225c6:	55                   	push   ebp
c00225c7:	57                   	push   edi
c00225c8:	56                   	push   esi
c00225c9:	53                   	push   ebx
c00225ca:	bb 27 00 00 00       	mov    ebx,0x27
c00225cf:	81 ec 88 00 00 00    	sub    esp,0x88
c00225d5:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00225dc:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00225e3:	e8 98 df fd ff       	call   c0000580 <strlen>
c00225e8:	8d 48 26             	lea    ecx,[eax+0x26]
c00225eb:	89 c8                	mov    eax,ecx
c00225ed:	99                   	cdq    
c00225ee:	f7 fb                	idiv   ebx
c00225f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00225f4:	83 c4 10             	add    esp,0x10
c00225f7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00225fd:	7e 10                	jle    c002260f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00225ff:	83 ec 0c             	sub    esp,0xc
c0022602:	68 22 31 03 c0       	push   0xc0033122
c0022607:	e8 8a df ff ff       	call   c0020596 <KePanic(char const*)>
c002260c:	83 c4 10             	add    esp,0x10
c002260f:	53                   	push   ebx
c0022610:	31 ed                	xor    ebp,ebp
c0022612:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0022616:	53                   	push   ebx
c0022617:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002261e:	57                   	push   edi
c002261f:	e8 04 fc ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022624:	83 c4 10             	add    esp,0x10
c0022627:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c002262b:	89 f0                	mov    eax,esi
c002262d:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0022631:	c1 e0 08             	shl    eax,0x8
c0022634:	09 c6                	or     esi,eax
c0022636:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c002263a:	c1 e6 08             	shl    esi,0x8
c002263d:	09 c6                	or     esi,eax
c002263f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0022643:	7e 72                	jle    c00226b7 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0022645:	85 f6                	test   esi,esi
c0022647:	75 25                	jne    c002266e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0022649:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c002264e:	8d 44 24 45          	lea    eax,[esp+0x45]
c0022652:	50                   	push   eax
c0022653:	6a 00                	push   0x0
c0022655:	6a 00                	push   0x0
c0022657:	57                   	push   edi
c0022658:	e8 75 fe ff ff       	call   c00224d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002265d:	83 c4 10             	add    esp,0x10
c0022660:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022663:	89 c6                	mov    esi,eax
c0022665:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0022668:	c1 f8 10             	sar    eax,0x10
c002266b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c002266e:	51                   	push   ecx
c002266f:	8d 54 24 49          	lea    edx,[esp+0x49]
c0022673:	52                   	push   edx
c0022674:	56                   	push   esi
c0022675:	57                   	push   edi
c0022676:	e8 ad fb ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002267b:	83 c4 0c             	add    esp,0xc
c002267e:	6a 27                	push   0x27
c0022680:	6a 00                	push   0x0
c0022682:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022686:	51                   	push   ecx
c0022687:	e8 64 de fd ff       	call   c00004f0 <memset>
c002268c:	6b c5 27             	imul   eax,ebp,0x27
c002268f:	83 c4 0c             	add    esp,0xc
c0022692:	6a 27                	push   0x27
c0022694:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c002269b:	50                   	push   eax
c002269c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00226a0:	51                   	push   ecx
c00226a1:	e8 ea df fd ff       	call   c0000690 <strncpy>
c00226a6:	83 c4 0c             	add    esp,0xc
c00226a9:	8d 54 24 49          	lea    edx,[esp+0x49]
c00226ad:	52                   	push   edx
c00226ae:	56                   	push   esi
c00226af:	57                   	push   edi
c00226b0:	e8 97 fc ff ff       	call   c002234c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00226b5:	eb 19                	jmp    c00226d0 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c00226b7:	85 f6                	test   esi,esi
c00226b9:	74 18                	je     c00226d3 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c00226bb:	52                   	push   edx
c00226bc:	52                   	push   edx
c00226bd:	56                   	push   esi
c00226be:	57                   	push   edi
c00226bf:	e8 c4 fc ff ff       	call   c0022388 <CmFreeExtent(Reghive_Tag*, int)>
c00226c4:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00226c8:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00226cc:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00226d0:	83 c4 10             	add    esp,0x10
c00226d3:	45                   	inc    ebp
c00226d4:	83 c3 03             	add    ebx,0x3
c00226d7:	83 fd 07             	cmp    ebp,0x7
c00226da:	0f 85 47 ff ff ff    	jne    c0022627 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00226e0:	50                   	push   eax
c00226e1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00226e5:	50                   	push   eax
c00226e6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00226ed:	57                   	push   edi
c00226ee:	e8 59 fc ff ff       	call   c002234c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00226f3:	81 c4 8c 00 00 00    	add    esp,0x8c
c00226f9:	5b                   	pop    ebx
c00226fa:	5e                   	pop    esi
c00226fb:	5f                   	pop    edi
c00226fc:	5d                   	pop    ebp
c00226fd:	c3                   	ret    

c00226fe <CmGetMatch(char*, char*, bool, bool*)>:
c00226fe:	56                   	push   esi
c00226ff:	53                   	push   ebx
c0022700:	50                   	push   eax
c0022701:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022706:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002270a:	74 25                	je     c0022731 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c002270c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002270f:	31 db                	xor    ebx,ebx
c0022711:	50                   	push   eax
c0022712:	50                   	push   eax
c0022713:	8d 04 9d 80 4a 03 c0 	lea    eax,[ebx*4-0x3ffcb580]
c002271a:	50                   	push   eax
c002271b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002271f:	e8 5c e0 fd ff       	call   c0000780 <strcmp>
c0022724:	83 c4 10             	add    esp,0x10
c0022727:	85 c0                	test   eax,eax
c0022729:	74 2e                	je     c0022759 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c002272b:	43                   	inc    ebx
c002272c:	83 fb 3f             	cmp    ebx,0x3f
c002272f:	75 e0                	jne    c0022711 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0022731:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022734:	31 db                	xor    ebx,ebx
c0022736:	51                   	push   ecx
c0022737:	51                   	push   ecx
c0022738:	8d 04 9d 80 4a 03 c0 	lea    eax,[ebx*4-0x3ffcb580]
c002273f:	50                   	push   eax
c0022740:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022744:	e8 37 e0 fd ff       	call   c0000780 <strcmp>
c0022749:	83 c4 10             	add    esp,0x10
c002274c:	85 c0                	test   eax,eax
c002274e:	74 09                	je     c0022759 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022750:	43                   	inc    ebx
c0022751:	83 fb 3f             	cmp    ebx,0x3f
c0022754:	75 e0                	jne    c0022736 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0022756:	83 cb ff             	or     ebx,0xffffffff
c0022759:	5a                   	pop    edx
c002275a:	89 d8                	mov    eax,ebx
c002275c:	5b                   	pop    ebx
c002275d:	5e                   	pop    esi
c002275e:	c3                   	ret    

c002275f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c002275f:	55                   	push   ebp
c0022760:	31 c0                	xor    eax,eax
c0022762:	57                   	push   edi
c0022763:	56                   	push   esi
c0022764:	53                   	push   ebx
c0022765:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022769:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002276d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022771:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022775:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0022777:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c002277a:	83 fd 1f             	cmp    ebp,0x1f
c002277d:	7f 0b                	jg     c002278a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c002277f:	0f b6 c2             	movzx  eax,dl
c0022782:	d3 e0                	shl    eax,cl
c0022784:	09 07                	or     DWORD PTR [edi],eax
c0022786:	b0 01                	mov    al,0x1
c0022788:	01 33                	add    DWORD PTR [ebx],esi
c002278a:	5b                   	pop    ebx
c002278b:	5e                   	pop    esi
c002278c:	5f                   	pop    edi
c002278d:	5d                   	pop    ebp
c002278e:	c3                   	ret    

c002278f <CmGetShift(unsigned int*, int*, int, bool*)>:
c002278f:	57                   	push   edi
c0022790:	56                   	push   esi
c0022791:	53                   	push   ebx
c0022792:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022796:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002279a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002279e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00227a2:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00227a4:	7c 17                	jl     c00227bd <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00227a6:	8b 17                	mov    edx,DWORD PTR [edi]
c00227a8:	b8 01 00 00 00       	mov    eax,0x1
c00227ad:	d3 e0                	shl    eax,cl
c00227af:	48                   	dec    eax
c00227b0:	21 d0                	and    eax,edx
c00227b2:	d3 ea                	shr    edx,cl
c00227b4:	89 17                	mov    DWORD PTR [edi],edx
c00227b6:	29 0b                	sub    DWORD PTR [ebx],ecx
c00227b8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00227bb:	eb 05                	jmp    c00227c2 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00227bd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00227c0:	31 c0                	xor    eax,eax
c00227c2:	5b                   	pop    ebx
c00227c3:	5e                   	pop    esi
c00227c4:	5f                   	pop    edi
c00227c5:	c3                   	ret    

c00227c6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00227c6:	83 ec 40             	sub    esp,0x40
c00227c9:	8d 44 24 09          	lea    eax,[esp+0x9]
c00227cd:	50                   	push   eax
c00227ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00227d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00227d6:	e8 4d fa ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227db:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00227df:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00227e3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00227e7:	89 10                	mov    DWORD PTR [eax],edx
c00227e9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00227ec:	83 c4 4c             	add    esp,0x4c
c00227ef:	c3                   	ret    

c00227f0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00227f0:	55                   	push   ebp
c00227f1:	57                   	push   edi
c00227f2:	56                   	push   esi
c00227f3:	53                   	push   ebx
c00227f4:	83 ec 40             	sub    esp,0x40
c00227f7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00227fb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00227ff:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0022803:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0022807:	53                   	push   ebx
c0022808:	56                   	push   esi
c0022809:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002280d:	e8 16 fa ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022812:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0022816:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c002281a:	83 c4 0c             	add    esp,0xc
c002281d:	53                   	push   ebx
c002281e:	56                   	push   esi
c002281f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022823:	e8 24 fb ff ff       	call   c002234c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022828:	83 c4 4c             	add    esp,0x4c
c002282b:	5b                   	pop    ebx
c002282c:	5e                   	pop    esi
c002282d:	5f                   	pop    edi
c002282e:	5d                   	pop    ebp
c002282f:	c3                   	ret    

c0022830 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0022830:	55                   	push   ebp
c0022831:	57                   	push   edi
c0022832:	56                   	push   esi
c0022833:	31 f6                	xor    esi,esi
c0022835:	53                   	push   ebx
c0022836:	31 db                	xor    ebx,ebx
c0022838:	83 ec 40             	sub    esp,0x40
c002283b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022843:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002284b:	6a 12                	push   0x12
c002284d:	68 ee 00 00 00       	push   0xee
c0022852:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022856:	e8 95 dc fd ff       	call   c00004f0 <memset>
c002285b:	83 c4 10             	add    esp,0x10
c002285e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022862:	6a 08                	push   0x8
c0022864:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022868:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c002286c:	50                   	push   eax
c002286d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022871:	55                   	push   ebp
c0022872:	57                   	push   edi
c0022873:	e8 e7 fe ff ff       	call   c002275f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022878:	83 c4 10             	add    esp,0x10
c002287b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002287f:	50                   	push   eax
c0022880:	6a 06                	push   0x6
c0022882:	55                   	push   ebp
c0022883:	57                   	push   edi
c0022884:	e8 06 ff ff ff       	call   c002278f <CmGetShift(unsigned int*, int*, int, bool*)>
c0022889:	83 c4 10             	add    esp,0x10
c002288c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022891:	74 07                	je     c002289a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0022893:	46                   	inc    esi
c0022894:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022898:	eb e1                	jmp    c002287b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c002289a:	43                   	inc    ebx
c002289b:	83 fb 12             	cmp    ebx,0x12
c002289e:	75 c2                	jne    c0022862 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00228a0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00228a4:	31 f6                	xor    esi,esi
c00228a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00228a9:	50                   	push   eax
c00228aa:	50                   	push   eax
c00228ab:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c00228b0:	46                   	inc    esi
c00228b1:	8d 04 85 80 4a 03 c0 	lea    eax,[eax*4-0x3ffcb580]
c00228b8:	50                   	push   eax
c00228b9:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00228bd:	e8 ae df fd ff       	call   c0000870 <strcat>
c00228c2:	83 c4 10             	add    esp,0x10
c00228c5:	83 fe 18             	cmp    esi,0x18
c00228c8:	75 df                	jne    c00228a9 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00228ca:	83 c4 3c             	add    esp,0x3c
c00228cd:	31 c0                	xor    eax,eax
c00228cf:	5b                   	pop    ebx
c00228d0:	5e                   	pop    esi
c00228d1:	5f                   	pop    edi
c00228d2:	5d                   	pop    ebp
c00228d3:	c3                   	ret    

c00228d4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00228d4:	83 ec 40             	sub    esp,0x40
c00228d7:	8d 44 24 09          	lea    eax,[esp+0x9]
c00228db:	50                   	push   eax
c00228dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00228e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00228e4:	e8 3f f9 ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00228e9:	58                   	pop    eax
c00228ea:	5a                   	pop    edx
c00228eb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228ef:	8d 44 24 15          	lea    eax,[esp+0x15]
c00228f3:	50                   	push   eax
c00228f4:	e8 37 ff ff ff       	call   c0022830 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00228f9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00228fe:	83 c4 4c             	add    esp,0x4c
c0022901:	c3                   	ret    

c0022902 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0022902:	55                   	push   ebp
c0022903:	57                   	push   edi
c0022904:	56                   	push   esi
c0022905:	53                   	push   ebx
c0022906:	31 db                	xor    ebx,ebx
c0022908:	83 ec 70             	sub    esp,0x70
c002290b:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0022912:	6a 30                	push   0x30
c0022914:	6a 00                	push   0x0
c0022916:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c002291a:	56                   	push   esi
c002291b:	e8 d0 db fd ff       	call   c00004f0 <memset>
c0022920:	83 c4 10             	add    esp,0x10
c0022923:	83 ec 0c             	sub    esp,0xc
c0022926:	57                   	push   edi
c0022927:	e8 54 dc fd ff       	call   c0000580 <strlen>
c002292c:	83 c4 10             	add    esp,0x10
c002292f:	39 d8                	cmp    eax,ebx
c0022931:	76 16                	jbe    c0022949 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0022933:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0022937:	83 ec 0c             	sub    esp,0xc
c002293a:	50                   	push   eax
c002293b:	e8 20 e0 fd ff       	call   c0000960 <toupper>
c0022940:	83 c4 10             	add    esp,0x10
c0022943:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022946:	43                   	inc    ebx
c0022947:	eb da                	jmp    c0022923 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0022949:	52                   	push   edx
c002294a:	31 db                	xor    ebx,ebx
c002294c:	6a 18                	push   0x18
c002294e:	31 ff                	xor    edi,edi
c0022950:	6a 3f                	push   0x3f
c0022952:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022956:	50                   	push   eax
c0022957:	e8 94 db fd ff       	call   c00004f0 <memset>
c002295c:	83 c4 10             	add    esp,0x10
c002295f:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0022963:	8d 74 24 10          	lea    esi,[esp+0x10]
c0022967:	84 c0                	test   al,al
c0022969:	0f 84 af 00 00 00    	je     c0022a1e <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c002296f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022973:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022976:	83 ec 0c             	sub    esp,0xc
c0022979:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c002297e:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022982:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022986:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c002298b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c002298f:	56                   	push   esi
c0022990:	e8 eb db fd ff       	call   c0000580 <strlen>
c0022995:	83 c4 10             	add    esp,0x10
c0022998:	85 c0                	test   eax,eax
c002299a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002299e:	74 0b                	je     c00229ab <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00229a0:	50                   	push   eax
c00229a1:	6a 01                	push   0x1
c00229a3:	56                   	push   esi
c00229a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00229a8:	50                   	push   eax
c00229a9:	eb 0a                	jmp    c00229b5 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00229ab:	50                   	push   eax
c00229ac:	6a 00                	push   0x0
c00229ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229b2:	50                   	push   eax
c00229b3:	6a 00                	push   0x0
c00229b5:	e8 44 fd ff ff       	call   c00226fe <CmGetMatch(char*, char*, bool, bool*)>
c00229ba:	83 c4 10             	add    esp,0x10
c00229bd:	83 f8 ff             	cmp    eax,0xffffffff
c00229c0:	75 1a                	jne    c00229dc <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00229c2:	83 ec 0c             	sub    esp,0xc
c00229c5:	68 37 31 03 c0       	push   0xc0033137
c00229ca:	e8 c7 db ff ff       	call   c0020596 <KePanic(char const*)>
c00229cf:	83 c4 10             	add    esp,0x10
c00229d2:	b8 02 00 00 00       	mov    eax,0x2
c00229d7:	e9 bb 00 00 00       	jmp    c0022a97 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00229dc:	83 ff 18             	cmp    edi,0x18
c00229df:	75 1a                	jne    c00229fb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00229e1:	83 ec 0c             	sub    esp,0xc
c00229e4:	68 4c 31 03 c0       	push   0xc003314c
c00229e9:	e8 a8 db ff ff       	call   c0020596 <KePanic(char const*)>
c00229ee:	83 c4 10             	add    esp,0x10
c00229f1:	b8 01 00 00 00       	mov    eax,0x1
c00229f6:	e9 9c 00 00 00       	jmp    c0022a97 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00229fb:	47                   	inc    edi
c00229fc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022a01:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0022a05:	0f 45 dd             	cmovne ebx,ebp
c0022a08:	83 ec 0c             	sub    esp,0xc
c0022a0b:	56                   	push   esi
c0022a0c:	e8 6f db fd ff       	call   c0000580 <strlen>
c0022a11:	83 c4 10             	add    esp,0x10
c0022a14:	85 c0                	test   eax,eax
c0022a16:	74 06                	je     c0022a1e <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0022a18:	43                   	inc    ebx
c0022a19:	e9 41 ff ff ff       	jmp    c002295f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0022a1e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022a26:	31 db                	xor    ebx,ebx
c0022a28:	31 ff                	xor    edi,edi
c0022a2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022a32:	50                   	push   eax
c0022a33:	6a 12                	push   0x12
c0022a35:	68 ee 00 00 00       	push   0xee
c0022a3a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022a41:	e8 aa da fd ff       	call   c00004f0 <memset>
c0022a46:	83 c4 10             	add    esp,0x10
c0022a49:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0022a4d:	83 fb 17             	cmp    ebx,0x17
c0022a50:	7e 26                	jle    c0022a78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0022a52:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022a56:	50                   	push   eax
c0022a57:	6a 08                	push   0x8
c0022a59:	55                   	push   ebp
c0022a5a:	56                   	push   esi
c0022a5b:	e8 2f fd ff ff       	call   c002278f <CmGetShift(unsigned int*, int*, int, bool*)>
c0022a60:	83 c4 10             	add    esp,0x10
c0022a63:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022a68:	74 26                	je     c0022a90 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0022a6a:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022a71:	4b                   	dec    ebx
c0022a72:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022a75:	47                   	inc    edi
c0022a76:	eb 1c                	jmp    c0022a94 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0022a78:	6a 06                	push   0x6
c0022a7a:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0022a7f:	50                   	push   eax
c0022a80:	55                   	push   ebp
c0022a81:	56                   	push   esi
c0022a82:	e8 d8 fc ff ff       	call   c002275f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022a87:	83 c4 10             	add    esp,0x10
c0022a8a:	84 c0                	test   al,al
c0022a8c:	75 06                	jne    c0022a94 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0022a8e:	eb c2                	jmp    c0022a52 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0022a90:	31 c0                	xor    eax,eax
c0022a92:	eb 03                	jmp    c0022a97 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022a94:	43                   	inc    ebx
c0022a95:	eb b2                	jmp    c0022a49 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0022a97:	83 c4 6c             	add    esp,0x6c
c0022a9a:	5b                   	pop    ebx
c0022a9b:	5e                   	pop    esi
c0022a9c:	5f                   	pop    edi
c0022a9d:	5d                   	pop    ebp
c0022a9e:	c3                   	ret    

c0022a9f <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022a9f:	53                   	push   ebx
c0022aa0:	83 ec 3c             	sub    esp,0x3c
c0022aa3:	6a 2b                	push   0x2b
c0022aa5:	6a 00                	push   0x0
c0022aa7:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022aab:	53                   	push   ebx
c0022aac:	e8 3f da fd ff       	call   c00004f0 <memset>
c0022ab1:	58                   	pop    eax
c0022ab2:	5a                   	pop    edx
c0022ab3:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022ab7:	50                   	push   eax
c0022ab8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022abc:	e8 41 fe ff ff       	call   c0022902 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022ac1:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022ac6:	83 c4 0c             	add    esp,0xc
c0022ac9:	6a 15                	push   0x15
c0022acb:	6a 00                	push   0x0
c0022acd:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022ad1:	50                   	push   eax
c0022ad2:	e8 19 da fd ff       	call   c00004f0 <memset>
c0022ad7:	53                   	push   ebx
c0022ad8:	6a 00                	push   0x0
c0022ada:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022ade:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022ae2:	e8 eb f9 ff ff       	call   c00224d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022ae7:	83 c4 58             	add    esp,0x58
c0022aea:	5b                   	pop    ebx
c0022aeb:	c3                   	ret    

c0022aec <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022aec:	56                   	push   esi
c0022aed:	53                   	push   ebx
c0022aee:	83 ec 48             	sub    esp,0x48
c0022af1:	6a 12                	push   0x12
c0022af3:	68 ff 00 00 00       	push   0xff
c0022af8:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022afc:	56                   	push   esi
c0022afd:	e8 ee d9 fd ff       	call   c00004f0 <memset>
c0022b02:	5a                   	pop    edx
c0022b03:	59                   	pop    ecx
c0022b04:	56                   	push   esi
c0022b05:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022b09:	e8 f4 fd ff ff       	call   c0022902 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022b0e:	83 c4 10             	add    esp,0x10
c0022b11:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022b15:	85 db                	test   ebx,ebx
c0022b17:	74 42                	je     c0022b5b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0022b19:	50                   	push   eax
c0022b1a:	8d 44 24 19          	lea    eax,[esp+0x19]
c0022b1e:	50                   	push   eax
c0022b1f:	53                   	push   ebx
c0022b20:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022b24:	e8 ff f6 ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022b29:	83 c4 0c             	add    esp,0xc
c0022b2c:	6a 12                	push   0x12
c0022b2e:	8d 44 24 21          	lea    eax,[esp+0x21]
c0022b32:	50                   	push   eax
c0022b33:	56                   	push   esi
c0022b34:	e8 47 d8 fd ff       	call   c0000380 <memcmp>
c0022b39:	83 c4 10             	add    esp,0x10
c0022b3c:	85 c0                	test   eax,eax
c0022b3e:	74 1e                	je     c0022b5e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022b40:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022b45:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022b4a:	c1 e3 08             	shl    ebx,0x8
c0022b4d:	09 d8                	or     eax,ebx
c0022b4f:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022b54:	c1 e3 10             	shl    ebx,0x10
c0022b57:	09 c3                	or     ebx,eax
c0022b59:	eb ba                	jmp    c0022b15 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022b5b:	83 cb ff             	or     ebx,0xffffffff
c0022b5e:	83 c4 44             	add    esp,0x44
c0022b61:	89 d8                	mov    eax,ebx
c0022b63:	5b                   	pop    ebx
c0022b64:	5e                   	pop    esi
c0022b65:	c3                   	ret    

c0022b66 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022b66:	57                   	push   edi
c0022b67:	56                   	push   esi
c0022b68:	53                   	push   ebx
c0022b69:	83 ec 34             	sub    esp,0x34
c0022b6c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022b70:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022b74:	6a 2b                	push   0x2b
c0022b76:	6a 00                	push   0x0
c0022b78:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022b7c:	53                   	push   ebx
c0022b7d:	e8 6e d9 fd ff       	call   c00004f0 <memset>
c0022b82:	58                   	pop    eax
c0022b83:	5a                   	pop    edx
c0022b84:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022b88:	50                   	push   eax
c0022b89:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022b8d:	e8 70 fd ff ff       	call   c0022902 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022b92:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0022b96:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022b9a:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022b9e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022ba2:	53                   	push   ebx
c0022ba3:	6a 00                	push   0x0
c0022ba5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022ba9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022bad:	e8 20 f9 ff ff       	call   c00224d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022bb2:	83 c4 50             	add    esp,0x50
c0022bb5:	5b                   	pop    ebx
c0022bb6:	5e                   	pop    esi
c0022bb7:	5f                   	pop    edi
c0022bb8:	c3                   	ret    

c0022bb9 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022bb9:	55                   	push   ebp
c0022bba:	57                   	push   edi
c0022bbb:	56                   	push   esi
c0022bbc:	53                   	push   ebx
c0022bbd:	83 ec 40             	sub    esp,0x40
c0022bc0:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022bc4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022bc8:	6a 2b                	push   0x2b
c0022bca:	6a 00                	push   0x0
c0022bcc:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022bd0:	56                   	push   esi
c0022bd1:	e8 1a d9 fd ff       	call   c00004f0 <memset>
c0022bd6:	5f                   	pop    edi
c0022bd7:	89 ef                	mov    edi,ebp
c0022bd9:	58                   	pop    eax
c0022bda:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022bde:	50                   	push   eax
c0022bdf:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022be3:	e8 1a fd ff ff       	call   c0022902 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022be8:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022bed:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022bf2:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022bf7:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022bfc:	83 c4 10             	add    esp,0x10
c0022bff:	85 ed                	test   ebp,ebp
c0022c01:	74 14                	je     c0022c17 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022c03:	51                   	push   ecx
c0022c04:	51                   	push   ecx
c0022c05:	57                   	push   edi
c0022c06:	53                   	push   ebx
c0022c07:	e8 0e f7 ff ff       	call   c002231a <CmGetNext(Reghive_Tag*, int)>
c0022c0c:	83 c4 10             	add    esp,0x10
c0022c0f:	85 c0                	test   eax,eax
c0022c11:	74 04                	je     c0022c17 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022c13:	89 c7                	mov    edi,eax
c0022c15:	eb e8                	jmp    c0022bff <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0022c17:	56                   	push   esi
c0022c18:	6a 00                	push   0x0
c0022c1a:	57                   	push   edi
c0022c1b:	53                   	push   ebx
c0022c1c:	e8 b1 f8 ff ff       	call   c00224d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022c21:	83 c4 0c             	add    esp,0xc
c0022c24:	56                   	push   esi
c0022c25:	50                   	push   eax
c0022c26:	89 c7                	mov    edi,eax
c0022c28:	53                   	push   ebx
c0022c29:	e8 fa f5 ff ff       	call   c0022228 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022c2e:	58                   	pop    eax
c0022c2f:	5a                   	pop    edx
c0022c30:	6a 6c                	push   0x6c
c0022c32:	6a 00                	push   0x0
c0022c34:	6a 00                	push   0x0
c0022c36:	68 5d 31 03 c0       	push   0xc003315d
c0022c3b:	57                   	push   edi
c0022c3c:	53                   	push   ebx
c0022c3d:	e8 24 ff ff ff       	call   c0022b66 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022c42:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0022c46:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0022c4a:	c1 e8 10             	shr    eax,0x10
c0022c4d:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022c51:	83 c4 1c             	add    esp,0x1c
c0022c54:	56                   	push   esi
c0022c55:	57                   	push   edi
c0022c56:	53                   	push   ebx
c0022c57:	e8 f0 f6 ff ff       	call   c002234c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022c5c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c61:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022c66:	c1 e0 08             	shl    eax,0x8
c0022c69:	09 c2                	or     edx,eax
c0022c6b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022c70:	83 c4 4c             	add    esp,0x4c
c0022c73:	5b                   	pop    ebx
c0022c74:	5e                   	pop    esi
c0022c75:	c1 e0 10             	shl    eax,0x10
c0022c78:	09 d0                	or     eax,edx
c0022c7a:	5f                   	pop    edi
c0022c7b:	5d                   	pop    ebp
c0022c7c:	c3                   	ret    

c0022c7d <zStrtok(char*, char const*)>:
c0022c7d:	55                   	push   ebp
c0022c7e:	57                   	push   edi
c0022c7f:	56                   	push   esi
c0022c80:	53                   	push   ebx
c0022c81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022c85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c89:	85 db                	test   ebx,ebx
c0022c8b:	74 2f                	je     c0022cbc <zStrtok(char*, char const*)+0x3f>
c0022c8d:	85 c0                	test   eax,eax
c0022c8f:	75 09                	jne    c0022c9a <zStrtok(char*, char const*)+0x1d>
c0022c91:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022c96:	85 c0                	test   eax,eax
c0022c98:	74 50                	je     c0022cea <zStrtok(char*, char const*)+0x6d>
c0022c9a:	31 c9                	xor    ecx,ecx
c0022c9c:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022ca0:	74 03                	je     c0022ca5 <zStrtok(char*, char const*)+0x28>
c0022ca2:	41                   	inc    ecx
c0022ca3:	eb f7                	jmp    c0022c9c <zStrtok(char*, char const*)+0x1f>
c0022ca5:	31 d2                	xor    edx,edx
c0022ca7:	39 ca                	cmp    edx,ecx
c0022ca9:	74 15                	je     c0022cc0 <zStrtok(char*, char const*)+0x43>
c0022cab:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022caf:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022cb2:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022cb5:	39 ee                	cmp    esi,ebp
c0022cb7:	74 13                	je     c0022ccc <zStrtok(char*, char const*)+0x4f>
c0022cb9:	42                   	inc    edx
c0022cba:	eb eb                	jmp    c0022ca7 <zStrtok(char*, char const*)+0x2a>
c0022cbc:	31 c0                	xor    eax,eax
c0022cbe:	eb 2a                	jmp    c0022cea <zStrtok(char*, char const*)+0x6d>
c0022cc0:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022cca:	eb 1e                	jmp    c0022cea <zStrtok(char*, char const*)+0x6d>
c0022ccc:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022ccf:	39 ce                	cmp    esi,ecx
c0022cd1:	75 0a                	jne    c0022cdd <zStrtok(char*, char const*)+0x60>
c0022cd3:	40                   	inc    eax
c0022cd4:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c0022cd9:	89 d8                	mov    eax,ebx
c0022cdb:	eb 0d                	jmp    c0022cea <zStrtok(char*, char const*)+0x6d>
c0022cdd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022ce0:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022ce4:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c0022cea:	5b                   	pop    ebx
c0022ceb:	5e                   	pop    esi
c0022cec:	5f                   	pop    edi
c0022ced:	5d                   	pop    ebp
c0022cee:	c3                   	ret    

c0022cef <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022cef:	57                   	push   edi
c0022cf0:	56                   	push   esi
c0022cf1:	53                   	push   ebx
c0022cf2:	81 ec 08 01 00 00    	sub    esp,0x108
c0022cf8:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022cff:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0022d06:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0022d0a:	53                   	push   ebx
c0022d0b:	e8 40 d9 fd ff       	call   c0000650 <strcpy>
c0022d10:	59                   	pop    ecx
c0022d11:	5e                   	pop    esi
c0022d12:	68 ff 34 03 c0       	push   0xc00334ff
c0022d17:	53                   	push   ebx
c0022d18:	bb 01 00 00 00       	mov    ebx,0x1
c0022d1d:	e8 5b ff ff ff       	call   c0022c7d <zStrtok(char*, char const*)>
c0022d22:	83 c4 10             	add    esp,0x10
c0022d25:	85 c0                	test   eax,eax
c0022d27:	74 3b                	je     c0022d64 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022d29:	52                   	push   edx
c0022d2a:	50                   	push   eax
c0022d2b:	6a 01                	push   0x1
c0022d2d:	57                   	push   edi
c0022d2e:	e8 b9 fd ff ff       	call   c0022aec <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022d33:	59                   	pop    ecx
c0022d34:	5e                   	pop    esi
c0022d35:	89 c3                	mov    ebx,eax
c0022d37:	68 ff 34 03 c0       	push   0xc00334ff
c0022d3c:	6a 00                	push   0x0
c0022d3e:	e8 3a ff ff ff       	call   c0022c7d <zStrtok(char*, char const*)>
c0022d43:	83 c4 10             	add    esp,0x10
c0022d46:	85 c0                	test   eax,eax
c0022d48:	89 c6                	mov    esi,eax
c0022d4a:	74 18                	je     c0022d64 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022d4c:	52                   	push   edx
c0022d4d:	52                   	push   edx
c0022d4e:	53                   	push   ebx
c0022d4f:	57                   	push   edi
c0022d50:	e8 86 f5 ff ff       	call   c00222db <CmEnterDirectory(Reghive_Tag*, int)>
c0022d55:	83 c4 10             	add    esp,0x10
c0022d58:	83 f8 ff             	cmp    eax,0xffffffff
c0022d5b:	89 c3                	mov    ebx,eax
c0022d5d:	74 05                	je     c0022d64 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022d5f:	50                   	push   eax
c0022d60:	56                   	push   esi
c0022d61:	53                   	push   ebx
c0022d62:	eb c9                	jmp    c0022d2d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022d64:	81 c4 00 01 00 00    	add    esp,0x100
c0022d6a:	89 d8                	mov    eax,ebx
c0022d6c:	5b                   	pop    ebx
c0022d6d:	5e                   	pop    esi
c0022d6e:	5f                   	pop    edi
c0022d6f:	c3                   	ret    

c0022d70 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022d70:	55                   	push   ebp
c0022d71:	57                   	push   edi
c0022d72:	56                   	push   esi
c0022d73:	53                   	push   ebx
c0022d74:	83 ec 5c             	sub    esp,0x5c
c0022d77:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022d7b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022d7f:	85 db                	test   ebx,ebx
c0022d81:	0f 8e 84 00 00 00    	jle    c0022e0b <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022d87:	57                   	push   edi
c0022d88:	31 ed                	xor    ebp,ebp
c0022d8a:	6a 32                	push   0x32
c0022d8c:	6a 00                	push   0x0
c0022d8e:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022d92:	57                   	push   edi
c0022d93:	e8 58 d7 fd ff       	call   c00004f0 <memset>
c0022d98:	83 c4 0c             	add    esp,0xc
c0022d9b:	57                   	push   edi
c0022d9c:	53                   	push   ebx
c0022d9d:	56                   	push   esi
c0022d9e:	e8 31 fb ff ff       	call   c00228d4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022da3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022da7:	83 c4 10             	add    esp,0x10
c0022daa:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022dae:	7d 13                	jge    c0022dc3 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022db0:	83 ec 0c             	sub    esp,0xc
c0022db3:	45                   	inc    ebp
c0022db4:	68 9f 38 03 c0       	push   0xc003389f
c0022db9:	e8 14 67 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0022dbe:	83 c4 10             	add    esp,0x10
c0022dc1:	eb e7                	jmp    c0022daa <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022dc3:	51                   	push   ecx
c0022dc4:	57                   	push   edi
c0022dc5:	53                   	push   ebx
c0022dc6:	68 63 31 03 c0       	push   0xc0033163
c0022dcb:	e8 02 67 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0022dd0:	83 c4 10             	add    esp,0x10
c0022dd3:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022dd8:	75 1e                	jne    c0022df8 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022dda:	52                   	push   edx
c0022ddb:	52                   	push   edx
c0022ddc:	53                   	push   ebx
c0022ddd:	56                   	push   esi
c0022dde:	e8 f8 f4 ff ff       	call   c00222db <CmEnterDirectory(Reghive_Tag*, int)>
c0022de3:	83 c4 0c             	add    esp,0xc
c0022de6:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022dea:	8d 51 04             	lea    edx,[ecx+0x4]
c0022ded:	52                   	push   edx
c0022dee:	50                   	push   eax
c0022def:	56                   	push   esi
c0022df0:	e8 7b ff ff ff       	call   c0022d70 <CmDisplayTree(Reghive_Tag*, int, int)>
c0022df5:	83 c4 10             	add    esp,0x10
c0022df8:	50                   	push   eax
c0022df9:	50                   	push   eax
c0022dfa:	53                   	push   ebx
c0022dfb:	56                   	push   esi
c0022dfc:	e8 19 f5 ff ff       	call   c002231a <CmGetNext(Reghive_Tag*, int)>
c0022e01:	83 c4 10             	add    esp,0x10
c0022e04:	89 c3                	mov    ebx,eax
c0022e06:	e9 74 ff ff ff       	jmp    c0022d7f <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022e0b:	83 c4 5c             	add    esp,0x5c
c0022e0e:	5b                   	pop    ebx
c0022e0f:	5e                   	pop    esi
c0022e10:	5f                   	pop    edi
c0022e11:	5d                   	pop    ebp
c0022e12:	c3                   	ret    

c0022e13 <CmSplitFinalSlashInPlace(char*)>:
c0022e13:	53                   	push   ebx
c0022e14:	83 ec 14             	sub    esp,0x14
c0022e17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022e1b:	53                   	push   ebx
c0022e1c:	e8 5f d7 fd ff       	call   c0000580 <strlen>
c0022e21:	83 c4 10             	add    esp,0x10
c0022e24:	48                   	dec    eax
c0022e25:	85 c0                	test   eax,eax
c0022e27:	74 15                	je     c0022e3e <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022e29:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022e2d:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022e30:	75 09                	jne    c0022e3b <CmSplitFinalSlashInPlace(char*)+0x28>
c0022e32:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022e35:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022e39:	eb 05                	jmp    c0022e40 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022e3b:	48                   	dec    eax
c0022e3c:	eb e7                	jmp    c0022e25 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022e3e:	31 c0                	xor    eax,eax
c0022e40:	83 c4 08             	add    esp,0x8
c0022e43:	5b                   	pop    ebx
c0022e44:	c3                   	ret    

c0022e45 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022e45:	55                   	push   ebp
c0022e46:	57                   	push   edi
c0022e47:	56                   	push   esi
c0022e48:	53                   	push   ebx
c0022e49:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022e4f:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022e56:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0022e59:	8d 43 01             	lea    eax,[ebx+0x1]
c0022e5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e60:	89 f0                	mov    eax,esi
c0022e62:	3c 40                	cmp    al,0x40
c0022e64:	75 1b                	jne    c0022e81 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0022e66:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0022e69:	85 c0                	test   eax,eax
c0022e6b:	74 08                	je     c0022e75 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022e6d:	83 f8 3a             	cmp    eax,0x3a
c0022e70:	74 03                	je     c0022e75 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022e72:	43                   	inc    ebx
c0022e73:	eb f1                	jmp    c0022e66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0022e75:	85 c0                	test   eax,eax
c0022e77:	0f 84 45 01 00 00    	je     c0022fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022e7d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022e80:	43                   	inc    ebx
c0022e81:	50                   	push   eax
c0022e82:	6a 40                	push   0x40
c0022e84:	6a 00                	push   0x0
c0022e86:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022e8a:	50                   	push   eax
c0022e8b:	e8 60 d6 fd ff       	call   c00004f0 <memset>
c0022e90:	89 f1                	mov    ecx,esi
c0022e92:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022e99:	31 c0                	xor    eax,eax
c0022e9b:	83 c4 10             	add    esp,0x10
c0022e9e:	0f be f1             	movsx  esi,cl
c0022ea1:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022ea4:	85 d2                	test   edx,edx
c0022ea6:	89 d1                	mov    ecx,edx
c0022ea8:	0f 84 14 01 00 00    	je     c0022fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022eae:	3d c7 00 00 00       	cmp    eax,0xc7
c0022eb3:	0f 8f 09 01 00 00    	jg     c0022fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022eb9:	83 fa 0a             	cmp    edx,0xa
c0022ebc:	0f 85 f1 00 00 00    	jne    c0022fb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0022ec2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022ec7:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022ecc:	89 c8                	mov    eax,ecx
c0022ece:	a8 df                	test   al,0xdf
c0022ed0:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022ed5:	83 f9 23             	cmp    ecx,0x23
c0022ed8:	0f 94 c2             	sete   dl
c0022edb:	89 d5                	mov    ebp,edx
c0022edd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ee1:	09 ea                	or     edx,ebp
c0022ee3:	80 e2 01             	and    dl,0x1
c0022ee6:	75 47                	jne    c0022f2f <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022ee8:	83 e8 09             	sub    eax,0x9
c0022eeb:	3c 01                	cmp    al,0x1
c0022eed:	76 40                	jbe    c0022f2f <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022eef:	83 f9 5b             	cmp    ecx,0x5b
c0022ef2:	75 42                	jne    c0022f36 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022ef4:	83 fe 40             	cmp    esi,0x40
c0022ef7:	75 36                	jne    c0022f2f <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022ef9:	83 ec 0c             	sub    esp,0xc
c0022efc:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0022f00:	55                   	push   ebp
c0022f01:	e8 7a d6 fd ff       	call   c0000580 <strlen>
c0022f06:	83 c4 10             	add    esp,0x10
c0022f09:	83 f8 3f             	cmp    eax,0x3f
c0022f0c:	0f 87 b0 00 00 00    	ja     c0022fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022f12:	50                   	push   eax
c0022f13:	50                   	push   eax
c0022f14:	55                   	push   ebp
c0022f15:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0022f19:	55                   	push   ebp
c0022f1a:	e8 31 d7 fd ff       	call   c0000650 <strcpy>
c0022f1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0022f22:	e8 59 d6 fd ff       	call   c0000580 <strlen>
c0022f27:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022f2c:	83 c4 10             	add    esp,0x10
c0022f2f:	31 d2                	xor    edx,edx
c0022f31:	e9 84 00 00 00       	jmp    c0022fba <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0022f36:	83 fe 40             	cmp    esi,0x40
c0022f39:	74 06                	je     c0022f41 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0022f3b:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022f3f:	eb 19                	jmp    c0022f5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022f41:	51                   	push   ecx
c0022f42:	51                   	push   ecx
c0022f43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022f47:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022f4b:	50                   	push   eax
c0022f4c:	e8 2f d8 fd ff       	call   c0000780 <strcmp>
c0022f51:	83 c4 10             	add    esp,0x10
c0022f54:	85 c0                	test   eax,eax
c0022f56:	75 d7                	jne    c0022f2f <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022f58:	eb e1                	jmp    c0022f3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0022f5a:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0022f5d:	85 c9                	test   ecx,ecx
c0022f5f:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022f64:	83 f9 3d             	cmp    ecx,0x3d
c0022f67:	0f 94 c0             	sete   al
c0022f6a:	89 c5                	mov    ebp,eax
c0022f6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f70:	09 e8                	or     eax,ebp
c0022f72:	a8 01                	test   al,0x1
c0022f74:	89 c5                	mov    ebp,eax
c0022f76:	75 03                	jne    c0022f7b <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0022f78:	42                   	inc    edx
c0022f79:	eb df                	jmp    c0022f5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022f7b:	85 c9                	test   ecx,ecx
c0022f7d:	74 43                	je     c0022fc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022f7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022f83:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022f86:	52                   	push   edx
c0022f87:	52                   	push   edx
c0022f88:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022f8c:	50                   	push   eax
c0022f8d:	53                   	push   ebx
c0022f8e:	e8 ed d7 fd ff       	call   c0000780 <strcmp>
c0022f93:	83 c4 10             	add    esp,0x10
c0022f96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022f9a:	85 c0                	test   eax,eax
c0022f9c:	75 91                	jne    c0022f2f <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022f9e:	50                   	push   eax
c0022f9f:	42                   	inc    edx
c0022fa0:	50                   	push   eax
c0022fa1:	52                   	push   edx
c0022fa2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022fa9:	e8 a2 d6 fd ff       	call   c0000650 <strcpy>
c0022fae:	83 c4 10             	add    esp,0x10
c0022fb1:	eb 11                	jmp    c0022fc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0022fb3:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022fb7:	8d 50 01             	lea    edx,[eax+0x1]
c0022fba:	47                   	inc    edi
c0022fbb:	89 d0                	mov    eax,edx
c0022fbd:	e9 df fe ff ff       	jmp    c0022ea1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0022fc2:	31 ed                	xor    ebp,ebp
c0022fc4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022fca:	89 e8                	mov    eax,ebp
c0022fcc:	5b                   	pop    ebx
c0022fcd:	5e                   	pop    esi
c0022fce:	5f                   	pop    edi
c0022fcf:	5d                   	pop    ebp
c0022fd0:	c3                   	ret    

c0022fd1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022fd1:	57                   	push   edi
c0022fd2:	56                   	push   esi
c0022fd3:	53                   	push   ebx
c0022fd4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022fda:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022fe1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022fe8:	53                   	push   ebx
c0022fe9:	e8 92 d5 fd ff       	call   c0000580 <strlen>
c0022fee:	89 34 24             	mov    DWORD PTR [esp],esi
c0022ff1:	89 c7                	mov    edi,eax
c0022ff3:	e8 88 d5 fd ff       	call   c0000580 <strlen>
c0022ff8:	83 c4 10             	add    esp,0x10
c0022ffb:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022fff:	3d ff 00 00 00       	cmp    eax,0xff
c0023004:	0f 87 d3 00 00 00    	ja     c00230dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c002300a:	57                   	push   edi
c002300b:	57                   	push   edi
c002300c:	56                   	push   esi
c002300d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0023011:	56                   	push   esi
c0023012:	e8 39 d6 fd ff       	call   c0000650 <strcpy>
c0023017:	58                   	pop    eax
c0023018:	5a                   	pop    edx
c0023019:	68 ff 34 03 c0       	push   0xc00334ff
c002301e:	56                   	push   esi
c002301f:	e8 4c d8 fd ff       	call   c0000870 <strcat>
c0023024:	59                   	pop    ecx
c0023025:	5f                   	pop    edi
c0023026:	53                   	push   ebx
c0023027:	56                   	push   esi
c0023028:	e8 43 d8 fd ff       	call   c0000870 <strcat>
c002302d:	58                   	pop    eax
c002302e:	5a                   	pop    edx
c002302f:	68 6d 31 03 c0       	push   0xc003316d
c0023034:	56                   	push   esi
c0023035:	e8 36 d8 fd ff       	call   c0000870 <strcat>
c002303a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0023041:	e8 56 36 ff ff       	call   c001669c <malloc>
c0023046:	83 c4 0c             	add    esp,0xc
c0023049:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002304f:	56                   	push   esi
c0023050:	50                   	push   eax
c0023051:	89 c3                	mov    ebx,eax
c0023053:	e8 92 76 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0023058:	83 c4 10             	add    esp,0x10
c002305b:	85 db                	test   ebx,ebx
c002305d:	74 7e                	je     c00230dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c002305f:	51                   	push   ecx
c0023060:	51                   	push   ecx
c0023061:	6a 01                	push   0x1
c0023063:	53                   	push   ebx
c0023064:	e8 9f 76 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c0023069:	83 c4 10             	add    esp,0x10
c002306c:	85 c0                	test   eax,eax
c002306e:	74 08                	je     c0023078 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0023070:	83 ec 0c             	sub    esp,0xc
c0023073:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023075:	53                   	push   ebx
c0023076:	eb 5f                	jmp    c00230d7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0023078:	52                   	push   edx
c0023079:	8d 44 24 17          	lea    eax,[esp+0x17]
c002307d:	50                   	push   eax
c002307e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0023082:	50                   	push   eax
c0023083:	53                   	push   ebx
c0023084:	e8 81 79 ff ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c0023089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002308d:	83 c4 10             	add    esp,0x10
c0023090:	89 c1                	mov    ecx,eax
c0023092:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0023096:	74 31                	je     c00230c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0023098:	83 ec 0c             	sub    esp,0xc
c002309b:	50                   	push   eax
c002309c:	e8 fb 35 ff ff       	call   c001669c <malloc>
c00230a1:	89 c6                	mov    esi,eax
c00230a3:	58                   	pop    eax
c00230a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00230a6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00230aa:	52                   	push   edx
c00230ab:	56                   	push   esi
c00230ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00230b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00230b4:	53                   	push   ebx
c00230b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00230b8:	83 c4 20             	add    esp,0x20
c00230bb:	85 c0                	test   eax,eax
c00230bd:	75 0a                	jne    c00230c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00230bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00230c3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00230c7:	74 18                	je     c00230e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00230c9:	83 ec 0c             	sub    esp,0xc
c00230cc:	53                   	push   ebx
c00230cd:	e8 94 76 ff ff       	call   c001a766 <File::close()>
c00230d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00230d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00230d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00230da:	83 c4 10             	add    esp,0x10
c00230dd:	31 c0                	xor    eax,eax
c00230df:	eb 3b                	jmp    c002311c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00230e1:	83 ec 0c             	sub    esp,0xc
c00230e4:	53                   	push   ebx
c00230e5:	e8 7c 76 ff ff       	call   c001a766 <File::close()>
c00230ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00230ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00230ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00230f2:	83 c4 0c             	add    esp,0xc
c00230f5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00230fc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0023103:	56                   	push   esi
c0023104:	e8 3c fd ff ff       	call   c0022e45 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0023109:	89 34 24             	mov    DWORD PTR [esp],esi
c002310c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023110:	e8 97 35 ff ff       	call   c00166ac <free>
c0023115:	83 c4 10             	add    esp,0x10
c0023118:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002311c:	81 c4 20 01 00 00    	add    esp,0x120
c0023122:	5b                   	pop    ebx
c0023123:	5e                   	pop    esi
c0023124:	5f                   	pop    edi
c0023125:	c3                   	ret    

c0023126 <Reg::getLine(char*, char*, char*)>:
c0023126:	57                   	push   edi
c0023127:	56                   	push   esi
c0023128:	53                   	push   ebx
c0023129:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002312d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023131:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023135:	57                   	push   edi
c0023136:	56                   	push   esi
c0023137:	53                   	push   ebx
c0023138:	68 72 31 03 c0       	push   0xc0033172
c002313d:	e8 8f fe ff ff       	call   c0022fd1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0023142:	83 c4 10             	add    esp,0x10
c0023145:	84 c0                	test   al,al
c0023147:	75 10                	jne    c0023159 <Reg::getLine(char*, char*, char*)+0x33>
c0023149:	57                   	push   edi
c002314a:	56                   	push   esi
c002314b:	53                   	push   ebx
c002314c:	68 97 31 03 c0       	push   0xc0033197
c0023151:	e8 7b fe ff ff       	call   c0022fd1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0023156:	83 c4 10             	add    esp,0x10
c0023159:	5b                   	pop    ebx
c002315a:	5e                   	pop    esi
c002315b:	5f                   	pop    edi
c002315c:	c3                   	ret    

c002315d <Reg::readInt(char*, char*, int*)>:
c002315d:	55                   	push   ebp
c002315e:	57                   	push   edi
c002315f:	56                   	push   esi
c0023160:	53                   	push   ebx
c0023161:	81 ec f0 00 00 00    	sub    esp,0xf0
c0023167:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c002316b:	55                   	push   ebp
c002316c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0023173:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c002317a:	e8 a7 ff ff ff       	call   c0023126 <Reg::getLine(char*, char*, char*)>
c002317f:	83 c4 10             	add    esp,0x10
c0023182:	84 c0                	test   al,al
c0023184:	0f 84 b6 00 00 00    	je     c0023240 <Reg::readInt(char*, char*, int*)+0xe3>
c002318a:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c002318f:	83 fa 2b             	cmp    edx,0x2b
c0023192:	74 0c                	je     c00231a0 <Reg::readInt(char*, char*, int*)+0x43>
c0023194:	83 fa 2d             	cmp    edx,0x2d
c0023197:	75 0e                	jne    c00231a7 <Reg::readInt(char*, char*, int*)+0x4a>
c0023199:	ba 01 00 00 00       	mov    edx,0x1
c002319e:	eb 0b                	jmp    c00231ab <Reg::readInt(char*, char*, int*)+0x4e>
c00231a0:	ba 01 00 00 00       	mov    edx,0x1
c00231a5:	eb 02                	jmp    c00231a9 <Reg::readInt(char*, char*, int*)+0x4c>
c00231a7:	31 d2                	xor    edx,edx
c00231a9:	31 c0                	xor    eax,eax
c00231ab:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00231b0:	be 0a 00 00 00       	mov    esi,0xa
c00231b5:	75 21                	jne    c00231d8 <Reg::readInt(char*, char*, int*)+0x7b>
c00231b7:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00231bc:	83 f9 78             	cmp    ecx,0x78
c00231bf:	75 0a                	jne    c00231cb <Reg::readInt(char*, char*, int*)+0x6e>
c00231c1:	83 c2 02             	add    edx,0x2
c00231c4:	be 10 00 00 00       	mov    esi,0x10
c00231c9:	eb 0d                	jmp    c00231d8 <Reg::readInt(char*, char*, int*)+0x7b>
c00231cb:	83 f9 62             	cmp    ecx,0x62
c00231ce:	75 08                	jne    c00231d8 <Reg::readInt(char*, char*, int*)+0x7b>
c00231d0:	83 c2 02             	add    edx,0x2
c00231d3:	be 02 00 00 00       	mov    esi,0x2
c00231d8:	01 d5                	add    ebp,edx
c00231da:	31 d2                	xor    edx,edx
c00231dc:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00231e0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00231e4:	85 c9                	test   ecx,ecx
c00231e6:	0f 94 c3             	sete   bl
c00231e9:	83 f9 0d             	cmp    ecx,0xd
c00231ec:	89 df                	mov    edi,ebx
c00231ee:	0f 94 c3             	sete   bl
c00231f1:	09 df                	or     edi,ebx
c00231f3:	89 fb                	mov    ebx,edi
c00231f5:	83 e7 01             	and    edi,0x1
c00231f8:	75 35                	jne    c002322f <Reg::readInt(char*, char*, int*)+0xd2>
c00231fa:	0f af d6             	imul   edx,esi
c00231fd:	83 fe 10             	cmp    esi,0x10
c0023200:	75 26                	jne    c0023228 <Reg::readInt(char*, char*, int*)+0xcb>
c0023202:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023206:	83 ef 41             	sub    edi,0x41
c0023209:	89 fb                	mov    ebx,edi
c002320b:	80 fb 05             	cmp    bl,0x5
c002320e:	77 06                	ja     c0023216 <Reg::readInt(char*, char*, int*)+0xb9>
c0023210:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0023214:	eb 16                	jmp    c002322c <Reg::readInt(char*, char*, int*)+0xcf>
c0023216:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002321a:	83 eb 61             	sub    ebx,0x61
c002321d:	80 fb 05             	cmp    bl,0x5
c0023220:	77 06                	ja     c0023228 <Reg::readInt(char*, char*, int*)+0xcb>
c0023222:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0023226:	eb 04                	jmp    c002322c <Reg::readInt(char*, char*, int*)+0xcf>
c0023228:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c002322c:	45                   	inc    ebp
c002322d:	eb ad                	jmp    c00231dc <Reg::readInt(char*, char*, int*)+0x7f>
c002322f:	84 c0                	test   al,al
c0023231:	74 02                	je     c0023235 <Reg::readInt(char*, char*, int*)+0xd8>
c0023233:	f7 da                	neg    edx
c0023235:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c002323c:	89 10                	mov    DWORD PTR [eax],edx
c002323e:	88 d8                	mov    al,bl
c0023240:	81 c4 ec 00 00 00    	add    esp,0xec
c0023246:	5b                   	pop    ebx
c0023247:	5e                   	pop    esi
c0023248:	5f                   	pop    edi
c0023249:	5d                   	pop    ebp
c002324a:	c3                   	ret    

c002324b <Reg::readString(char*, char*, char*, int)>:
c002324b:	57                   	push   edi
c002324c:	56                   	push   esi
c002324d:	53                   	push   ebx
c002324e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0023254:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0023258:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c002325f:	57                   	push   edi
c0023260:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0023267:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c002326e:	e8 b3 fe ff ff       	call   c0023126 <Reg::getLine(char*, char*, char*)>
c0023273:	83 c4 10             	add    esp,0x10
c0023276:	84 c0                	test   al,al
c0023278:	89 c6                	mov    esi,eax
c002327a:	74 44                	je     c00232c0 <Reg::readString(char*, char*, char*, int)+0x75>
c002327c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0023283:	31 c0                	xor    eax,eax
c0023285:	4a                   	dec    edx
c0023286:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0023289:	84 c9                	test   cl,cl
c002328b:	74 0f                	je     c002329c <Reg::readString(char*, char*, char*, int)+0x51>
c002328d:	39 c2                	cmp    edx,eax
c002328f:	7e 0b                	jle    c002329c <Reg::readString(char*, char*, char*, int)+0x51>
c0023291:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0023294:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0023299:	40                   	inc    eax
c002329a:	eb ea                	jmp    c0023286 <Reg::readString(char*, char*, char*, int)+0x3b>
c002329c:	83 ec 0c             	sub    esp,0xc
c002329f:	53                   	push   ebx
c00232a0:	e8 db d2 fd ff       	call   c0000580 <strlen>
c00232a5:	83 c4 10             	add    esp,0x10
c00232a8:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00232ad:	75 11                	jne    c00232c0 <Reg::readString(char*, char*, char*, int)+0x75>
c00232af:	83 ec 0c             	sub    esp,0xc
c00232b2:	53                   	push   ebx
c00232b3:	e8 c8 d2 fd ff       	call   c0000580 <strlen>
c00232b8:	83 c4 10             	add    esp,0x10
c00232bb:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00232c0:	81 c4 d0 00 00 00    	add    esp,0xd0
c00232c6:	89 f0                	mov    eax,esi
c00232c8:	5b                   	pop    ebx
c00232c9:	5e                   	pop    esi
c00232ca:	5f                   	pop    edi
c00232cb:	c3                   	ret    

c00232cc <Reg::readBool(char*, char*, bool*)>:
c00232cc:	83 ec 20             	sub    esp,0x20
c00232cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00232d3:	50                   	push   eax
c00232d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00232d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00232dc:	e8 7c fe ff ff       	call   c002315d <Reg::readInt(char*, char*, int*)>
c00232e1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00232e5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00232ea:	0f 95 02             	setne  BYTE PTR [edx]
c00232ed:	83 c4 2c             	add    esp,0x2c
c00232f0:	c3                   	ret    

c00232f1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00232f1:	53                   	push   ebx
c00232f2:	83 ec 1c             	sub    esp,0x1c
c00232f5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00232f9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00232fd:	50                   	push   eax
c00232fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023302:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023306:	e8 c1 ff ff ff       	call   c00232cc <Reg::readBool(char*, char*, bool*)>
c002330b:	83 c4 10             	add    esp,0x10
c002330e:	84 c0                	test   al,al
c0023310:	74 04                	je     c0023316 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0023312:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0023316:	83 c4 18             	add    esp,0x18
c0023319:	88 d8                	mov    al,bl
c002331b:	5b                   	pop    ebx
c002331c:	c3                   	ret    

c002331d <Reg::readIntWithDefault(char*, char*, int)>:
c002331d:	53                   	push   ebx
c002331e:	83 ec 1c             	sub    esp,0x1c
c0023321:	8d 44 24 10          	lea    eax,[esp+0x10]
c0023325:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023329:	50                   	push   eax
c002332a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002332e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023332:	e8 26 fe ff ff       	call   c002315d <Reg::readInt(char*, char*, int*)>
c0023337:	83 c4 10             	add    esp,0x10
c002333a:	84 c0                	test   al,al
c002333c:	74 04                	je     c0023342 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c002333e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023342:	83 c4 18             	add    esp,0x18
c0023345:	89 d8                	mov    eax,ebx
c0023347:	5b                   	pop    ebx
c0023348:	c3                   	ret    

c0023349 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0023349:	57                   	push   edi
c002334a:	56                   	push   esi
c002334b:	53                   	push   ebx
c002334c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0023350:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023354:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023358:	56                   	push   esi
c0023359:	57                   	push   edi
c002335a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002335e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023362:	e8 e4 fe ff ff       	call   c002324b <Reg::readString(char*, char*, char*, int)>
c0023367:	83 c4 10             	add    esp,0x10
c002336a:	84 c0                	test   al,al
c002336c:	75 16                	jne    c0023384 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c002336e:	50                   	push   eax
c002336f:	56                   	push   esi
c0023370:	6a 00                	push   0x0
c0023372:	57                   	push   edi
c0023373:	e8 78 d1 fd ff       	call   c00004f0 <memset>
c0023378:	8d 4e ff             	lea    ecx,[esi-0x1]
c002337b:	89 de                	mov    esi,ebx
c002337d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002337f:	83 c4 10             	add    esp,0x10
c0023382:	89 df                	mov    edi,ebx
c0023384:	5b                   	pop    ebx
c0023385:	89 f8                	mov    eax,edi
c0023387:	5e                   	pop    esi
c0023388:	5f                   	pop    edi
c0023389:	c3                   	ret    

c002338a <SysEject(regs*)>:
c002338a:	83 ec 0c             	sub    esp,0xc
c002338d:	83 ca ff             	or     edx,0xffffffff
c0023390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023394:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023397:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002339c:	83 e9 41             	sub    ecx,0x41
c002339f:	83 f9 19             	cmp    ecx,0x19
c00233a2:	77 18                	ja     c00233bc <SysEject(regs*)+0x32>
c00233a4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c00233ab:	85 c9                	test   ecx,ecx
c00233ad:	74 0d                	je     c00233bc <SysEject(regs*)+0x32>
c00233af:	83 ec 0c             	sub    esp,0xc
c00233b2:	51                   	push   ecx
c00233b3:	e8 78 96 ff ff       	call   c001ca30 <LogicalDisk::eject()>
c00233b8:	83 c4 10             	add    esp,0x10
c00233bb:	99                   	cdq    
c00233bc:	83 c4 0c             	add    esp,0xc
c00233bf:	c3                   	ret    

c00233c0 <SysExit(regs*)>:
c00233c0:	83 ec 18             	sub    esp,0x18
c00233c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233c7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00233ca:	e8 91 29 00 00       	call   c0025d60 <terminateTask(int)>
c00233cf:	83 c8 ff             	or     eax,0xffffffff
c00233d2:	83 c4 1c             	add    esp,0x1c
c00233d5:	89 c2                	mov    edx,eax
c00233d7:	c3                   	ret    

c00233d8 <SysGetCwd(regs*)>:
c00233d8:	83 ec 10             	sub    esp,0x10
c00233db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00233df:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00233e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00233e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00233ea:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00233ed:	e8 98 6f ff ff       	call   c001a38a <Fs::getcwd(Process*, char*, int)>
c00233f2:	83 c4 1c             	add    esp,0x1c
c00233f5:	99                   	cdq    
c00233f6:	c3                   	ret    

c00233f7 <SysGetPID(regs*)>:
c00233f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00233fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00233ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0023401:	99                   	cdq    
c0023402:	c3                   	ret    

c0023403 <SysGetRAMData(regs*)>:
c0023403:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c002340d:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0023413:	99                   	cdq    
c0023414:	f7 f9                	idiv   ecx
c0023416:	c1 e0 18             	shl    eax,0x18
c0023419:	09 c8                	or     eax,ecx
c002341b:	99                   	cdq    
c002341c:	c3                   	ret    

c002341d <SysGetVGAPtr(regs*)>:
c002341d:	55                   	push   ebp
c002341e:	57                   	push   edi
c002341f:	56                   	push   esi
c0023420:	53                   	push   ebx
c0023421:	83 ec 18             	sub    esp,0x18
c0023424:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023428:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002342b:	e8 fc 23 00 00       	call   c002582c <Thr::processFromPID(int)>
c0023430:	83 c4 10             	add    esp,0x10
c0023433:	89 c1                	mov    ecx,eax
c0023435:	b8 01 00 00 00       	mov    eax,0x1
c002343a:	85 c9                	test   ecx,ecx
c002343c:	74 57                	je     c0023495 <SysGetVGAPtr(regs*)+0x78>
c002343e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0023442:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0023448:	74 0c                	je     c0023456 <SysGetVGAPtr(regs*)+0x39>
c002344a:	83 ec 0c             	sub    esp,0xc
c002344d:	55                   	push   ebp
c002344e:	e8 e4 3e ff ff       	call   c0017337 <setActiveTerminal(VgaText*)>
c0023453:	83 c4 10             	add    esp,0x10
c0023456:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023459:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c002345e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0023461:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023463:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0023466:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023469:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c002346f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023472:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023475:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c002347b:	50                   	push   eax
c002347c:	50                   	push   eax
c002347d:	68 b2 31 03 c0       	push   0xc00331b2
c0023482:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023485:	05 a8 0f 00 00       	add    eax,0xfa8
c002348a:	50                   	push   eax
c002348b:	e8 c0 d1 fd ff       	call   c0000650 <strcpy>
c0023490:	83 c4 10             	add    esp,0x10
c0023493:	31 c0                	xor    eax,eax
c0023495:	83 c4 0c             	add    esp,0xc
c0023498:	31 d2                	xor    edx,edx
c002349a:	5b                   	pop    ebx
c002349b:	5e                   	pop    esi
c002349c:	5f                   	pop    edi
c002349d:	5d                   	pop    ebp
c002349e:	c3                   	ret    
c002349f:	90                   	nop

c00234a0 <SysKill(regs*)>:
c00234a0:	53                   	push   ebx
c00234a1:	83 ec 08             	sub    esp,0x8
c00234a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00234a8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00234ac:	75 16                	jne    c00234c4 <SysKill(regs*)+0x24>
c00234ae:	83 ec 0c             	sub    esp,0xc
c00234b1:	68 bc 31 03 c0       	push   0xc00331bc
c00234b6:	e8 db d0 ff ff       	call   c0020596 <KePanic(char const*)>
c00234bb:	83 c4 10             	add    esp,0x10
c00234be:	e9 89 00 00 00       	jmp    c002354c <SysKill(regs*)+0xac>
c00234c3:	90                   	nop
c00234c4:	83 ec 0c             	sub    esp,0xc
c00234c7:	68 ec 01 04 c0       	push   0xc00401ec
c00234cc:	e8 9b bc 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00234d1:	8d 76 00             	lea    esi,[esi+0x0]
c00234d4:	83 c4 10             	add    esp,0x10
c00234d7:	85 c0                	test   eax,eax
c00234d9:	74 19                	je     c00234f4 <SysKill(regs*)+0x54>
c00234db:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00234de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00234e1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00234e3:	74 33                	je     c0023518 <SysKill(regs*)+0x78>
c00234e5:	52                   	push   edx
c00234e6:	52                   	push   edx
c00234e7:	50                   	push   eax
c00234e8:	68 ec 01 04 c0       	push   0xc00401ec
c00234ed:	e8 9a bf 00 00       	call   c002f48c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00234f2:	eb e0                	jmp    c00234d4 <SysKill(regs*)+0x34>
c00234f4:	83 ec 0c             	sub    esp,0xc
c00234f7:	68 e0 01 04 c0       	push   0xc00401e0
c00234fc:	e8 6b bc 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023501:	8d 76 00             	lea    esi,[esi+0x0]
c0023504:	83 c4 10             	add    esp,0x10
c0023507:	85 c0                	test   eax,eax
c0023509:	74 41                	je     c002354c <SysKill(regs*)+0xac>
c002350b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002350e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023511:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023513:	75 27                	jne    c002353c <SysKill(regs*)+0x9c>
c0023515:	8d 76 00             	lea    esi,[esi+0x0]
c0023518:	51                   	push   ecx
c0023519:	51                   	push   ecx
c002351a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002351d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023522:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023525:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c002352b:	e8 18 d9 ff ff       	call   c0020e48 <KeRaiseSignal(SigHandlerBlock*, int)>
c0023530:	83 c4 10             	add    esp,0x10
c0023533:	31 c0                	xor    eax,eax
c0023535:	31 d2                	xor    edx,edx
c0023537:	eb 1b                	jmp    c0023554 <SysKill(regs*)+0xb4>
c0023539:	8d 76 00             	lea    esi,[esi+0x0]
c002353c:	52                   	push   edx
c002353d:	52                   	push   edx
c002353e:	50                   	push   eax
c002353f:	68 e0 01 04 c0       	push   0xc00401e0
c0023544:	e8 43 bf 00 00       	call   c002f48c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023549:	eb b9                	jmp    c0023504 <SysKill(regs*)+0x64>
c002354b:	90                   	nop
c002354c:	83 c8 ff             	or     eax,0xffffffff
c002354f:	89 c2                	mov    edx,eax
c0023551:	8d 76 00             	lea    esi,[esi+0x0]
c0023554:	83 c4 08             	add    esp,0x8
c0023557:	5b                   	pop    ebx
c0023558:	c3                   	ret    

c0023559 <SysLoadDLL(regs*)>:
c0023559:	56                   	push   esi
c002355a:	31 d2                	xor    edx,edx
c002355c:	53                   	push   ebx
c002355d:	b8 01 00 00 00       	mov    eax,0x1
c0023562:	51                   	push   ecx
c0023563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023567:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c002356b:	0f 84 8c 00 00 00    	je     c00235fd <SysLoadDLL(regs*)+0xa4>
c0023571:	83 ec 0c             	sub    esp,0xc
c0023574:	68 14 01 00 00       	push   0x114
c0023579:	e8 1e 31 ff ff       	call   c001669c <malloc>
c002357e:	83 c4 0c             	add    esp,0xc
c0023581:	89 c3                	mov    ebx,eax
c0023583:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023588:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002358b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002358e:	53                   	push   ebx
c002358f:	e8 56 71 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0023594:	83 c4 10             	add    esp,0x10
c0023597:	31 d2                	xor    edx,edx
c0023599:	85 db                	test   ebx,ebx
c002359b:	b8 02 00 00 00       	mov    eax,0x2
c00235a0:	74 5b                	je     c00235fd <SysLoadDLL(regs*)+0xa4>
c00235a2:	83 ec 0c             	sub    esp,0xc
c00235a5:	53                   	push   ebx
c00235a6:	e8 21 74 ff ff       	call   c001a9cc <File::exists()>
c00235ab:	83 c4 10             	add    esp,0x10
c00235ae:	84 c0                	test   al,al
c00235b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235b2:	75 11                	jne    c00235c5 <SysLoadDLL(regs*)+0x6c>
c00235b4:	83 ec 0c             	sub    esp,0xc
c00235b7:	53                   	push   ebx
c00235b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00235bb:	83 c4 10             	add    esp,0x10
c00235be:	b8 03 00 00 00       	mov    eax,0x3
c00235c3:	eb 36                	jmp    c00235fb <SysLoadDLL(regs*)+0xa2>
c00235c5:	83 ec 0c             	sub    esp,0xc
c00235c8:	53                   	push   ebx
c00235c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00235cc:	58                   	pop    eax
c00235cd:	5a                   	pop    edx
c00235ce:	6a 00                	push   0x0
c00235d0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00235d3:	e8 84 15 00 00       	call   c0024b5c <Thr::loadDLL(char const*, bool)>
c00235d8:	83 c4 10             	add    esp,0x10
c00235db:	31 d2                	xor    edx,edx
c00235dd:	89 c1                	mov    ecx,eax
c00235df:	b8 04 00 00 00       	mov    eax,0x4
c00235e4:	85 c9                	test   ecx,ecx
c00235e6:	74 15                	je     c00235fd <SysLoadDLL(regs*)+0xa4>
c00235e8:	53                   	push   ebx
c00235e9:	53                   	push   ebx
c00235ea:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00235f0:	51                   	push   ecx
c00235f1:	e8 c7 17 00 00       	call   c0024dbd <Thr::executeDLL(unsigned long, void*)>
c00235f6:	83 c4 10             	add    esp,0x10
c00235f9:	31 c0                	xor    eax,eax
c00235fb:	31 d2                	xor    edx,edx
c00235fd:	59                   	pop    ecx
c00235fe:	5b                   	pop    ebx
c00235ff:	5e                   	pop    esi
c0023600:	c3                   	ret    

c0023601 <SysRead(regs*)>:
c0023601:	57                   	push   edi
c0023602:	56                   	push   esi
c0023603:	53                   	push   ebx
c0023604:	83 ec 10             	sub    esp,0x10
c0023607:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002360b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002360e:	83 f8 02             	cmp    eax,0x2
c0023611:	77 10                	ja     c0023623 <SysRead(regs*)+0x22>
c0023613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023618:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002361b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0023621:	eb 0e                	jmp    c0023631 <SysRead(regs*)+0x30>
c0023623:	83 ec 0c             	sub    esp,0xc
c0023626:	50                   	push   eax
c0023627:	e8 37 4a ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c002362c:	83 c4 10             	add    esp,0x10
c002362f:	89 c1                	mov    ecx,eax
c0023631:	83 c8 ff             	or     eax,0xffffffff
c0023634:	85 c9                	test   ecx,ecx
c0023636:	89 c2                	mov    edx,eax
c0023638:	74 28                	je     c0023662 <SysRead(regs*)+0x61>
c002363a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023642:	83 ec 0c             	sub    esp,0xc
c0023645:	31 ff                	xor    edi,edi
c0023647:	8d 54 24 18          	lea    edx,[esp+0x18]
c002364b:	8b 01                	mov    eax,DWORD PTR [ecx]
c002364d:	52                   	push   edx
c002364e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023651:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023654:	57                   	push   edi
c0023655:	56                   	push   esi
c0023656:	51                   	push   ecx
c0023657:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002365a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002365e:	83 c4 20             	add    esp,0x20
c0023661:	99                   	cdq    
c0023662:	83 c4 10             	add    esp,0x10
c0023665:	5b                   	pop    ebx
c0023666:	5e                   	pop    esi
c0023667:	5f                   	pop    edi
c0023668:	c3                   	ret    

c0023669 <SysRegisterSignal(regs*)>:
c0023669:	83 ec 18             	sub    esp,0x18
c002366c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023670:	6a 00                	push   0x0
c0023672:	6a 00                	push   0x0
c0023674:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023677:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002367a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002367f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023682:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023688:	e8 85 d7 ff ff       	call   c0020e12 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c002368d:	83 c4 2c             	add    esp,0x2c
c0023690:	99                   	cdq    
c0023691:	c3                   	ret    

c0023692 <SysRegistryGetTypeFromPath(regs*)>:
c0023692:	57                   	push   edi
c0023693:	56                   	push   esi
c0023694:	53                   	push   ebx
c0023695:	81 ec 38 01 00 00    	sub    esp,0x138
c002369b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00236a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00236a5:	68 dd 31 03 c0       	push   0xc00331dd
c00236aa:	e8 23 5e ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00236af:	5a                   	pop    edx
c00236b0:	59                   	pop    ecx
c00236b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00236b4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236b7:	e8 33 f6 ff ff       	call   c0022cef <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00236bc:	5f                   	pop    edi
c00236bd:	5a                   	pop    edx
c00236be:	89 c6                	mov    esi,eax
c00236c0:	50                   	push   eax
c00236c1:	68 fd 31 03 c0       	push   0xc00331fd
c00236c6:	e8 07 5e ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00236cb:	83 c4 10             	add    esp,0x10
c00236ce:	85 f6                	test   esi,esi
c00236d0:	74 28                	je     c00236fa <SysRegistryGetTypeFromPath(regs*)+0x68>
c00236d2:	50                   	push   eax
c00236d3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00236d7:	57                   	push   edi
c00236d8:	56                   	push   esi
c00236d9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236dc:	e8 f3 f1 ff ff       	call   c00228d4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00236e1:	83 c4 0c             	add    esp,0xc
c00236e4:	57                   	push   edi
c00236e5:	50                   	push   eax
c00236e6:	89 c3                	mov    ebx,eax
c00236e8:	68 05 32 03 c0       	push   0xc0033205
c00236ed:	e8 e0 5d ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00236f2:	89 d8                	mov    eax,ebx
c00236f4:	83 c4 10             	add    esp,0x10
c00236f7:	99                   	cdq    
c00236f8:	eb 05                	jmp    c00236ff <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00236fa:	83 c8 ff             	or     eax,0xffffffff
c00236fd:	89 c2                	mov    edx,eax
c00236ff:	81 c4 30 01 00 00    	add    esp,0x130
c0023705:	5b                   	pop    ebx
c0023706:	5e                   	pop    esi
c0023707:	5f                   	pop    edi
c0023708:	c3                   	ret    

c0023709 <SysRegistryReadExtent(regs*)>:
c0023709:	83 ec 1c             	sub    esp,0x1c
c002370c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0023710:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023713:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0023716:	85 c0                	test   eax,eax
c0023718:	79 1f                	jns    c0023739 <SysRegistryReadExtent(regs*)+0x30>
c002371a:	52                   	push   edx
c002371b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023720:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023724:	52                   	push   edx
c0023725:	50                   	push   eax
c0023726:	51                   	push   ecx
c0023727:	e8 9a f0 ff ff       	call   c00227c6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c002372c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023730:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023734:	83 c4 10             	add    esp,0x10
c0023737:	eb 14                	jmp    c002374d <SysRegistryReadExtent(regs*)+0x44>
c0023739:	83 ec 04             	sub    esp,0x4
c002373c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c002373f:	50                   	push   eax
c0023740:	51                   	push   ecx
c0023741:	e8 1e eb ff ff       	call   c0022264 <CmGetString(Reghive_Tag*, int, char*)>
c0023746:	83 c4 10             	add    esp,0x10
c0023749:	31 c0                	xor    eax,eax
c002374b:	31 d2                	xor    edx,edx
c002374d:	83 c4 1c             	add    esp,0x1c
c0023750:	c3                   	ret    

c0023751 <SysRegistryPathToExtentLookup(regs*)>:
c0023751:	53                   	push   ebx
c0023752:	83 ec 10             	sub    esp,0x10
c0023755:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023759:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002375c:	68 1b 32 03 c0       	push   0xc003321b
c0023761:	e8 6c 5d ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0023766:	58                   	pop    eax
c0023767:	5a                   	pop    edx
c0023768:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002376b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002376e:	e8 7c f5 ff ff       	call   c0022cef <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023773:	83 c4 18             	add    esp,0x18
c0023776:	5b                   	pop    ebx
c0023777:	99                   	cdq    
c0023778:	c3                   	ret    

c0023779 <SysRegistryEnterDirectory(regs*)>:
c0023779:	53                   	push   ebx
c002377a:	83 ec 10             	sub    esp,0x10
c002377d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023781:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023784:	68 3e 32 03 c0       	push   0xc003323e
c0023789:	e8 44 5d ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002378e:	58                   	pop    eax
c002378f:	5a                   	pop    edx
c0023790:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023793:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023796:	e8 40 eb ff ff       	call   c00222db <CmEnterDirectory(Reghive_Tag*, int)>
c002379b:	83 c4 18             	add    esp,0x18
c002379e:	5b                   	pop    ebx
c002379f:	99                   	cdq    
c00237a0:	c3                   	ret    

c00237a1 <SysRegistryGetNext(regs*)>:
c00237a1:	53                   	push   ebx
c00237a2:	83 ec 10             	sub    esp,0x10
c00237a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00237a9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00237ac:	68 5c 32 03 c0       	push   0xc003325c
c00237b1:	e8 1c 5d ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00237b6:	58                   	pop    eax
c00237b7:	5a                   	pop    edx
c00237b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00237bb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00237be:	e8 57 eb ff ff       	call   c002231a <CmGetNext(Reghive_Tag*, int)>
c00237c3:	83 c4 18             	add    esp,0x18
c00237c6:	5b                   	pop    ebx
c00237c7:	99                   	cdq    
c00237c8:	c3                   	ret    

c00237c9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00237c9:	57                   	push   edi
c00237ca:	56                   	push   esi
c00237cb:	53                   	push   ebx
c00237cc:	81 ec 34 01 00 00    	sub    esp,0x134
c00237d2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00237d9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00237dd:	57                   	push   edi
c00237de:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00237e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00237e4:	e8 eb f0 ff ff       	call   c00228d4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00237e9:	89 c3                	mov    ebx,eax
c00237eb:	58                   	pop    eax
c00237ec:	5a                   	pop    edx
c00237ed:	57                   	push   edi
c00237ee:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00237f1:	e8 5a ce fd ff       	call   c0000650 <strcpy>
c00237f6:	81 c4 40 01 00 00    	add    esp,0x140
c00237fc:	89 d8                	mov    eax,ebx
c00237fe:	5b                   	pop    ebx
c00237ff:	99                   	cdq    
c0023800:	5e                   	pop    esi
c0023801:	5f                   	pop    edi
c0023802:	c3                   	ret    

c0023803 <SysRegistryOpen(regs*)>:
c0023803:	83 ec 18             	sub    esp,0x18
c0023806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002380a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002380d:	e8 e2 e8 ff ff       	call   c00220f4 <CmOpen(char const*)>
c0023812:	83 c4 1c             	add    esp,0x1c
c0023815:	99                   	cdq    
c0023816:	c3                   	ret    

c0023817 <SysRegistryClose(regs*)>:
c0023817:	83 ec 18             	sub    esp,0x18
c002381a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002381e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023821:	e8 ec e9 ff ff       	call   c0022212 <CmClose(Reghive_Tag*)>
c0023826:	31 c0                	xor    eax,eax
c0023828:	31 d2                	xor    edx,edx
c002382a:	83 c4 1c             	add    esp,0x1c
c002382d:	c3                   	ret    

c002382e <SysSbrk(regs*)>:
c002382e:	56                   	push   esi
c002382f:	53                   	push   ebx
c0023830:	50                   	push   eax
c0023831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023836:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002383a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002383d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0023840:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0023846:	85 db                	test   ebx,ebx
c0023848:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c002384b:	74 02                	je     c002384f <SysSbrk(regs*)+0x21>
c002384d:	79 06                	jns    c0023855 <SysSbrk(regs*)+0x27>
c002384f:	89 f0                	mov    eax,esi
c0023851:	31 d2                	xor    edx,edx
c0023853:	eb 2a                	jmp    c002387f <SysSbrk(regs*)+0x51>
c0023855:	83 c8 ff             	or     eax,0xffffffff
c0023858:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c002385e:	89 c2                	mov    edx,eax
c0023860:	77 1d                	ja     c002387f <SysSbrk(regs*)+0x51>
c0023862:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0023868:	50                   	push   eax
c0023869:	68 07 0c 00 00       	push   0xc07
c002386e:	c1 ea 0c             	shr    edx,0xc
c0023871:	52                   	push   edx
c0023872:	51                   	push   ecx
c0023873:	e8 56 51 ff ff       	call   c00189ce <VAS::allocatePages(int, int)>
c0023878:	89 f0                	mov    eax,esi
c002387a:	31 d2                	xor    edx,edx
c002387c:	83 c4 10             	add    esp,0x10
c002387f:	59                   	pop    ecx
c0023880:	5b                   	pop    ebx
c0023881:	5e                   	pop    esi
c0023882:	c3                   	ret    

c0023883 <SysSetCwd(regs*)>:
c0023883:	83 ec 14             	sub    esp,0x14
c0023886:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002388a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002388d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023892:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023895:	e8 d1 71 ff ff       	call   c001aa6b <Fs::setcwd(Process*, char*)>
c002389a:	83 c4 1c             	add    esp,0x1c
c002389d:	99                   	cdq    
c002389e:	c3                   	ret    

c002389f <SysSetTime(regs*)>:
c002389f:	55                   	push   ebp
c00238a0:	31 c9                	xor    ecx,ecx
c00238a2:	57                   	push   edi
c00238a3:	bd 0c 00 00 00       	mov    ebp,0xc
c00238a8:	56                   	push   esi
c00238a9:	53                   	push   ebx
c00238aa:	31 db                	xor    ebx,ebx
c00238ac:	83 ec 10             	sub    esp,0x10
c00238af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00238b3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00238b6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00238b9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00238bc:	89 c2                	mov    edx,eax
c00238be:	c1 e8 05             	shr    eax,0x5
c00238c1:	83 e2 1f             	and    edx,0x1f
c00238c4:	42                   	inc    edx
c00238c5:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00238cb:	c1 e7 10             	shl    edi,0x10
c00238ce:	88 d1                	mov    cl,dl
c00238d0:	31 d2                	xor    edx,edx
c00238d2:	f7 f5                	div    ebp
c00238d4:	89 dd                	mov    ebp,ebx
c00238d6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00238dc:	88 d5                	mov    ch,dl
c00238de:	31 d2                	xor    edx,edx
c00238e0:	0f b7 c1             	movzx  eax,cx
c00238e3:	09 f8                	or     eax,edi
c00238e5:	bf 3c 00 00 00       	mov    edi,0x3c
c00238ea:	89 c1                	mov    ecx,eax
c00238ec:	89 f0                	mov    eax,esi
c00238ee:	f7 f7                	div    edi
c00238f0:	c1 e2 10             	shl    edx,0x10
c00238f3:	09 d5                	or     ebp,edx
c00238f5:	31 d2                	xor    edx,edx
c00238f7:	f7 f7                	div    edi
c00238f9:	89 eb                	mov    ebx,ebp
c00238fb:	bf 10 0e 00 00       	mov    edi,0xe10
c0023900:	89 f0                	mov    eax,esi
c0023902:	88 d7                	mov    bh,dl
c0023904:	31 d2                	xor    edx,edx
c0023906:	f7 f7                	div    edi
c0023908:	bf 18 00 00 00       	mov    edi,0x18
c002390d:	31 d2                	xor    edx,edx
c002390f:	f7 f7                	div    edi
c0023911:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0023916:	88 d3                	mov    bl,dl
c0023918:	53                   	push   ebx
c0023919:	51                   	push   ecx
c002391a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0023920:	e8 93 7a ff ff       	call   c001b3b8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0023925:	83 c4 1c             	add    esp,0x1c
c0023928:	31 d2                	xor    edx,edx
c002392a:	5b                   	pop    ebx
c002392b:	5e                   	pop    esi
c002392c:	83 f0 01             	xor    eax,0x1
c002392f:	5f                   	pop    edi
c0023930:	0f b6 c0             	movzx  eax,al
c0023933:	5d                   	pop    ebp
c0023934:	c3                   	ret    

c0023935 <SysSymlink(regs*)>:
c0023935:	56                   	push   esi
c0023936:	83 c8 ff             	or     eax,0xffffffff
c0023939:	53                   	push   ebx
c002393a:	89 c2                	mov    edx,eax
c002393c:	81 ec 34 02 00 00    	sub    esp,0x234
c0023942:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0023949:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c002394d:	74 50                	je     c002399f <SysSymlink(regs*)+0x6a>
c002394f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0023952:	85 c9                	test   ecx,ecx
c0023954:	74 49                	je     c002399f <SysSymlink(regs*)+0x6a>
c0023956:	6a 01                	push   0x1
c0023958:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002395d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023960:	05 0c 01 00 00       	add    eax,0x10c
c0023965:	50                   	push   eax
c0023966:	51                   	push   ecx
c0023967:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002396b:	56                   	push   esi
c002396c:	e8 6d 6a ff ff       	call   c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023971:	6a 01                	push   0x1
c0023973:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023978:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002397b:	05 0c 01 00 00       	add    eax,0x10c
c0023980:	50                   	push   eax
c0023981:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023984:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002398b:	53                   	push   ebx
c002398c:	e8 4d 6a ff ff       	call   c001a3de <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023991:	83 c4 18             	add    esp,0x18
c0023994:	56                   	push   esi
c0023995:	53                   	push   ebx
c0023996:	e8 52 66 ff ff       	call   c0019fed <KeCreateSymlink(char const*, char const*)>
c002399b:	83 c4 10             	add    esp,0x10
c002399e:	99                   	cdq    
c002399f:	81 c4 34 02 00 00    	add    esp,0x234
c00239a5:	5b                   	pop    ebx
c00239a6:	5e                   	pop    esi
c00239a7:	c3                   	ret    

c00239a8 <SysTimezone(regs*)>:
c00239a8:	83 ec 0c             	sub    esp,0xc
c00239ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239af:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00239b3:	75 17                	jne    c00239cc <SysTimezone(regs*)+0x24>
c00239b5:	83 ec 0c             	sub    esp,0xc
c00239b8:	68 73 32 03 c0       	push   0xc0033273
c00239bd:	e8 10 5b ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00239c2:	83 c8 ff             	or     eax,0xffffffff
c00239c5:	83 c4 10             	add    esp,0x10
c00239c8:	89 c2                	mov    edx,eax
c00239ca:	eb 17                	jmp    c00239e3 <SysTimezone(regs*)+0x3b>
c00239cc:	83 ec 0c             	sub    esp,0xc
c00239cf:	68 88 32 03 c0       	push   0xc0033288
c00239d4:	e8 f9 5a ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00239d9:	83 c4 10             	add    esp,0x10
c00239dc:	b8 01 00 00 00       	mov    eax,0x1
c00239e1:	31 d2                	xor    edx,edx
c00239e3:	83 c4 0c             	add    esp,0xc
c00239e6:	c3                   	ret    

c00239e7 <SysTruncate(regs*)>:
c00239e7:	55                   	push   ebp
c00239e8:	57                   	push   edi
c00239e9:	31 ff                	xor    edi,edi
c00239eb:	56                   	push   esi
c00239ec:	53                   	push   ebx
c00239ed:	83 ec 0c             	sub    esp,0xc
c00239f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00239f4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00239f7:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00239fb:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00239fe:	89 ce                	mov    esi,ecx
c0023a00:	0f 84 9a 00 00 00    	je     c0023aa0 <SysTruncate(regs*)+0xb9>
c0023a06:	83 ec 0c             	sub    esp,0xc
c0023a09:	68 14 01 00 00       	push   0x114
c0023a0e:	e8 89 2c ff ff       	call   c001669c <malloc>
c0023a13:	83 c4 0c             	add    esp,0xc
c0023a16:	89 c3                	mov    ebx,eax
c0023a18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a1d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023a20:	55                   	push   ebp
c0023a21:	53                   	push   ebx
c0023a22:	e8 c3 6c ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0023a27:	83 c4 10             	add    esp,0x10
c0023a2a:	31 d2                	xor    edx,edx
c0023a2c:	85 db                	test   ebx,ebx
c0023a2e:	b8 03 00 00 00       	mov    eax,0x3
c0023a33:	0f 84 a2 00 00 00    	je     c0023adb <SysTruncate(regs*)+0xf4>
c0023a39:	51                   	push   ecx
c0023a3a:	51                   	push   ecx
c0023a3b:	6a 02                	push   0x2
c0023a3d:	53                   	push   ebx
c0023a3e:	e8 c5 6c ff ff       	call   c001a708 <File::open(FileOpenMode)>
c0023a43:	83 c4 10             	add    esp,0x10
c0023a46:	85 c0                	test   eax,eax
c0023a48:	74 13                	je     c0023a5d <SysTruncate(regs*)+0x76>
c0023a4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023a4c:	83 ec 0c             	sub    esp,0xc
c0023a4f:	53                   	push   ebx
c0023a50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a53:	83 c4 10             	add    esp,0x10
c0023a56:	b8 04 00 00 00       	mov    eax,0x4
c0023a5b:	eb 7c                	jmp    c0023ad9 <SysTruncate(regs*)+0xf2>
c0023a5d:	52                   	push   edx
c0023a5e:	57                   	push   edi
c0023a5f:	56                   	push   esi
c0023a60:	53                   	push   ebx
c0023a61:	e8 b6 6d ff ff       	call   c001a81c <File::truncate(unsigned long long)>
c0023a66:	83 c4 10             	add    esp,0x10
c0023a69:	85 c0                	test   eax,eax
c0023a6b:	74 1b                	je     c0023a88 <SysTruncate(regs*)+0xa1>
c0023a6d:	83 ec 0c             	sub    esp,0xc
c0023a70:	53                   	push   ebx
c0023a71:	e8 f0 6c ff ff       	call   c001a766 <File::close()>
c0023a76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023a78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a7e:	83 c4 10             	add    esp,0x10
c0023a81:	b8 05 00 00 00       	mov    eax,0x5
c0023a86:	eb 51                	jmp    c0023ad9 <SysTruncate(regs*)+0xf2>
c0023a88:	83 ec 0c             	sub    esp,0xc
c0023a8b:	53                   	push   ebx
c0023a8c:	e8 d5 6c ff ff       	call   c001a766 <File::close()>
c0023a91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023a93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a99:	83 c4 10             	add    esp,0x10
c0023a9c:	31 c0                	xor    eax,eax
c0023a9e:	eb 39                	jmp    c0023ad9 <SysTruncate(regs*)+0xf2>
c0023aa0:	31 d2                	xor    edx,edx
c0023aa2:	83 fd 02             	cmp    ebp,0x2
c0023aa5:	b8 01 00 00 00       	mov    eax,0x1
c0023aaa:	7e 2f                	jle    c0023adb <SysTruncate(regs*)+0xf4>
c0023aac:	83 ec 0c             	sub    esp,0xc
c0023aaf:	51                   	push   ecx
c0023ab0:	e8 ae 45 ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c0023ab5:	83 c4 10             	add    esp,0x10
c0023ab8:	31 d2                	xor    edx,edx
c0023aba:	89 c1                	mov    ecx,eax
c0023abc:	b8 02 00 00 00       	mov    eax,0x2
c0023ac1:	85 c9                	test   ecx,ecx
c0023ac3:	74 16                	je     c0023adb <SysTruncate(regs*)+0xf4>
c0023ac5:	50                   	push   eax
c0023ac6:	57                   	push   edi
c0023ac7:	56                   	push   esi
c0023ac8:	51                   	push   ecx
c0023ac9:	e8 4e 6d ff ff       	call   c001a81c <File::truncate(unsigned long long)>
c0023ace:	83 c4 10             	add    esp,0x10
c0023ad1:	85 c0                	test   eax,eax
c0023ad3:	0f 95 c0             	setne  al
c0023ad6:	0f b6 c0             	movzx  eax,al
c0023ad9:	31 d2                	xor    edx,edx
c0023adb:	83 c4 0c             	add    esp,0xc
c0023ade:	5b                   	pop    ebx
c0023adf:	5e                   	pop    esi
c0023ae0:	5f                   	pop    edi
c0023ae1:	5d                   	pop    ebp
c0023ae2:	c3                   	ret    

c0023ae3 <SysWrite(regs*)>:
c0023ae3:	57                   	push   edi
c0023ae4:	56                   	push   esi
c0023ae5:	53                   	push   ebx
c0023ae6:	83 ec 10             	sub    esp,0x10
c0023ae9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023aed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023af0:	83 f8 02             	cmp    eax,0x2
c0023af3:	77 10                	ja     c0023b05 <SysWrite(regs*)+0x22>
c0023af5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023afa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023afd:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0023b03:	eb 0e                	jmp    c0023b13 <SysWrite(regs*)+0x30>
c0023b05:	83 ec 0c             	sub    esp,0xc
c0023b08:	50                   	push   eax
c0023b09:	e8 55 45 ff ff       	call   c0018063 <KeGetFileFromDescriptor(int)>
c0023b0e:	83 c4 10             	add    esp,0x10
c0023b11:	89 c1                	mov    ecx,eax
c0023b13:	83 c8 ff             	or     eax,0xffffffff
c0023b16:	85 c9                	test   ecx,ecx
c0023b18:	89 c2                	mov    edx,eax
c0023b1a:	74 28                	je     c0023b44 <SysWrite(regs*)+0x61>
c0023b1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023b24:	83 ec 0c             	sub    esp,0xc
c0023b27:	31 ff                	xor    edi,edi
c0023b29:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023b2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023b2f:	52                   	push   edx
c0023b30:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023b33:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023b36:	57                   	push   edi
c0023b37:	56                   	push   esi
c0023b38:	51                   	push   ecx
c0023b39:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0023b3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023b40:	83 c4 20             	add    esp,0x20
c0023b43:	99                   	cdq    
c0023b44:	83 c4 10             	add    esp,0x10
c0023b47:	5b                   	pop    ebx
c0023b48:	5e                   	pop    esi
c0023b49:	5f                   	pop    edi
c0023b4a:	c3                   	ret    

c0023b4b <SysWsbe(regs*)>:
c0023b4b:	57                   	push   edi
c0023b4c:	b9 0b 00 00 00       	mov    ecx,0xb
c0023b51:	56                   	push   esi
c0023b52:	be c7 32 03 c0       	mov    esi,0xc00332c7
c0023b57:	53                   	push   ebx
c0023b58:	83 ec 30             	sub    esp,0x30
c0023b5b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023b5f:	fc                   	cld    
c0023b60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023b62:	83 ec 0c             	sub    esp,0xc
c0023b65:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023b69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023b6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023b71:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023b77:	8b 06                	mov    eax,DWORD PTR [esi]
c0023b79:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023b7c:	57                   	push   edi
c0023b7d:	e8 fe c9 fd ff       	call   c0000580 <strlen>
c0023b82:	5a                   	pop    edx
c0023b83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023b87:	52                   	push   edx
c0023b88:	31 d2                	xor    edx,edx
c0023b8a:	57                   	push   edi
c0023b8b:	52                   	push   edx
c0023b8c:	50                   	push   eax
c0023b8d:	56                   	push   esi
c0023b8e:	ff d3                	call   ebx
c0023b90:	83 c4 14             	add    esp,0x14
c0023b93:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023b97:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023b9a:	e8 c1 21 00 00       	call   c0025d60 <terminateTask(int)>
c0023b9f:	83 c4 40             	add    esp,0x40
c0023ba2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023ba7:	5b                   	pop    ebx
c0023ba8:	31 d2                	xor    edx,edx
c0023baa:	5e                   	pop    esi
c0023bab:	5f                   	pop    edi
c0023bac:	c3                   	ret    

c0023bad <SysYield(regs*)>:
c0023bad:	83 ec 0c             	sub    esp,0xc
c0023bb0:	fa                   	cli    
c0023bb1:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023bb7:	e8 30 1a 00 00       	call   c00255ec <schedule()>
c0023bbc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023bc1:	48                   	dec    eax
c0023bc2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023bc7:	75 01                	jne    c0023bca <SysYield(regs*)+0x1d>
c0023bc9:	fb                   	sti    
c0023bca:	31 c0                	xor    eax,eax
c0023bcc:	31 d2                	xor    edx,edx
c0023bce:	83 c4 0c             	add    esp,0xc
c0023bd1:	c3                   	ret    

c0023bd2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023bd2:	55                   	push   ebp
c0023bd3:	57                   	push   edi
c0023bd4:	56                   	push   esi
c0023bd5:	53                   	push   ebx
c0023bd6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023bdc:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023be7:	74 3b                	je     c0023c24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023be9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023bf1:	74 31                	je     c0023c24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023bf3:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023bfb:	75 27                	jne    c0023c24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023bfd:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023c04:	05 00 10 00 00       	add    eax,0x1000
c0023c09:	89 c2                	mov    edx,eax
c0023c0b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023c10:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0023c17:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0023c1d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0023c24:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0023c2b:	83 ec 0c             	sub    esp,0xc
c0023c2e:	6a 01                	push   0x1
c0023c30:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023c36:	e8 82 45 ff ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c0023c3b:	83 c4 10             	add    esp,0x10
c0023c3e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023c44:	89 c3                	mov    ebx,eax
c0023c46:	0f 86 26 01 00 00    	jbe    c0023d72 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0023c4c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023c54:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023c5b:	c1 ee 0c             	shr    esi,0xc
c0023c5e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023c62:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023c69:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023c70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023c74:	29 ef                	sub    edi,ebp
c0023c76:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0023c7a:	0f 83 f9 00 00 00    	jae    c0023d79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023c80:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023c86:	b8 00 10 00 00       	mov    eax,0x1000
c0023c8b:	0f 47 f8             	cmova  edi,eax
c0023c8e:	83 ec 0c             	sub    esp,0xc
c0023c91:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023c98:	31 d2                	xor    edx,edx
c0023c9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c9c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023ca0:	50                   	push   eax
c0023ca1:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023ca5:	56                   	push   esi
c0023ca6:	52                   	push   edx
c0023ca7:	57                   	push   edi
c0023ca8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023caf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023cb2:	83 c4 20             	add    esp,0x20
c0023cb5:	85 c0                	test   eax,eax
c0023cb7:	75 06                	jne    c0023cbf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0023cb9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023cbd:	74 13                	je     c0023cd2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0023cbf:	83 ec 0c             	sub    esp,0xc
c0023cc2:	53                   	push   ebx
c0023cc3:	e8 09 48 ff ff       	call   c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0023cc8:	83 c4 10             	add    esp,0x10
c0023ccb:	31 c0                	xor    eax,eax
c0023ccd:	e9 7c 01 00 00       	jmp    c0023e4e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0023cd2:	fa                   	cli    
c0023cd3:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023cd9:	e8 cd 2c ff ff       	call   c00169ab <Phys::allocatePage()>
c0023cde:	6a 07                	push   0x7
c0023ce0:	53                   	push   ebx
c0023ce1:	50                   	push   eax
c0023ce2:	89 c7                	mov    edi,eax
c0023ce4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023ce9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023cec:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023cf2:	e8 cf 4b ff ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023cf7:	83 c4 0c             	add    esp,0xc
c0023cfa:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023d01:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d07:	6a 00                	push   0x0
c0023d09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023d0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023d11:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d17:	e8 10 4a ff ff       	call   c001872c <VAS::mapOtherVASIn(bool, VAS*)>
c0023d1c:	58                   	pop    eax
c0023d1d:	5a                   	pop    edx
c0023d1e:	68 07 0c 00 00       	push   0xc07
c0023d23:	55                   	push   ebp
c0023d24:	57                   	push   edi
c0023d25:	89 df                	mov    edi,ebx
c0023d27:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023d2e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d34:	6a 00                	push   0x0
c0023d36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023d3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023d3e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d44:	e8 e1 4d ff ff       	call   c0018b2a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023d49:	b9 00 10 00 00       	mov    ecx,0x1000
c0023d4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023d50:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023d55:	83 c4 20             	add    esp,0x20
c0023d58:	48                   	dec    eax
c0023d59:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023d5e:	85 c0                	test   eax,eax
c0023d60:	75 01                	jne    c0023d63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0023d62:	fb                   	sti    
c0023d63:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023d67:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023d6d:	e9 f0 fe ff ff       	jmp    c0023c62 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0023d72:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023d79:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023d80:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023d86:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023d8c:	0f 86 ae 00 00 00    	jbe    c0023e40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023d92:	fa                   	cli    
c0023d93:	51                   	push   ecx
c0023d94:	31 ff                	xor    edi,edi
c0023d96:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023d9d:	c1 ee 0c             	shr    esi,0xc
c0023da0:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023da6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023dac:	6a 00                	push   0x0
c0023dae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023db3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023db6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023dbc:	e8 6b 49 ff ff       	call   c001872c <VAS::mapOtherVASIn(bool, VAS*)>
c0023dc1:	83 c4 10             	add    esp,0x10
c0023dc4:	e8 e2 2b ff ff       	call   c00169ab <Phys::allocatePage()>
c0023dc9:	47                   	inc    edi
c0023dca:	6a 07                	push   0x7
c0023dcc:	53                   	push   ebx
c0023dcd:	50                   	push   eax
c0023dce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023dd2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023dd8:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023ddb:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023de1:	e8 e0 4a ff ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023de6:	58                   	pop    eax
c0023de7:	5a                   	pop    edx
c0023de8:	68 07 0c 00 00       	push   0xc07
c0023ded:	55                   	push   ebp
c0023dee:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023df4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023df8:	50                   	push   eax
c0023df9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023e00:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023e06:	6a 00                	push   0x0
c0023e08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023e0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023e10:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023e16:	e8 0f 4d ff ff       	call   c0018b2a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023e1b:	83 c4 1c             	add    esp,0x1c
c0023e1e:	68 00 10 00 00       	push   0x1000
c0023e23:	6a 00                	push   0x0
c0023e25:	53                   	push   ebx
c0023e26:	e8 c5 c6 fd ff       	call   c00004f0 <memset>
c0023e2b:	83 c4 10             	add    esp,0x10
c0023e2e:	39 fe                	cmp    esi,edi
c0023e30:	77 92                	ja     c0023dc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0023e32:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023e37:	48                   	dec    eax
c0023e38:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023e3d:	75 01                	jne    c0023e40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023e3f:	fb                   	sti    
c0023e40:	83 ec 0c             	sub    esp,0xc
c0023e43:	53                   	push   ebx
c0023e44:	e8 88 46 ff ff       	call   c00184d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0023e49:	83 c4 10             	add    esp,0x10
c0023e4c:	b0 01                	mov    al,0x1
c0023e4e:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023e54:	5b                   	pop    ebx
c0023e55:	5e                   	pop    esi
c0023e56:	5f                   	pop    edi
c0023e57:	5d                   	pop    ebp
c0023e58:	c3                   	ret    

c0023e59 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023e59:	55                   	push   ebp
c0023e5a:	57                   	push   edi
c0023e5b:	56                   	push   esi
c0023e5c:	53                   	push   ebx
c0023e5d:	83 ec 48             	sub    esp,0x48
c0023e60:	68 14 01 00 00       	push   0x114
c0023e65:	e8 32 28 ff ff       	call   c001669c <malloc>
c0023e6a:	83 c4 0c             	add    esp,0xc
c0023e6d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023e71:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023e75:	89 c7                	mov    edi,eax
c0023e77:	50                   	push   eax
c0023e78:	e8 6d 68 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0023e7d:	58                   	pop    eax
c0023e7e:	5a                   	pop    edx
c0023e7f:	6a 01                	push   0x1
c0023e81:	57                   	push   edi
c0023e82:	e8 81 68 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c0023e87:	83 c4 10             	add    esp,0x10
c0023e8a:	85 c0                	test   eax,eax
c0023e8c:	0f 85 4c 01 00 00    	jne    c0023fde <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023e92:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023e9a:	83 ec 0c             	sub    esp,0xc
c0023e9d:	6a 34                	push   0x34
c0023e9f:	e8 f8 27 ff ff       	call   c001669c <malloc>
c0023ea4:	89 c3                	mov    ebx,eax
c0023ea6:	58                   	pop    eax
c0023ea7:	8b 07                	mov    eax,DWORD PTR [edi]
c0023ea9:	8d 74 24 38          	lea    esi,[esp+0x38]
c0023ead:	56                   	push   esi
c0023eae:	53                   	push   ebx
c0023eaf:	6a 00                	push   0x0
c0023eb1:	6a 34                	push   0x34
c0023eb3:	57                   	push   edi
c0023eb4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023eb7:	83 c4 20             	add    esp,0x20
c0023eba:	85 c0                	test   eax,eax
c0023ebc:	0f 85 1c 01 00 00    	jne    c0023fde <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023ec2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023ec8:	0f 85 10 01 00 00    	jne    c0023fde <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023ece:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023ed1:	85 c0                	test   eax,eax
c0023ed3:	0f 84 05 01 00 00    	je     c0023fde <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023ed9:	31 d2                	xor    edx,edx
c0023edb:	55                   	push   ebp
c0023edc:	52                   	push   edx
c0023edd:	50                   	push   eax
c0023ede:	57                   	push   edi
c0023edf:	e8 e2 68 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0023ee4:	83 c4 10             	add    esp,0x10
c0023ee7:	85 c0                	test   eax,eax
c0023ee9:	0f 85 ef 00 00 00    	jne    c0023fde <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023eef:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023ef2:	83 ec 0c             	sub    esp,0xc
c0023ef5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023ef9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0023efd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023f01:	0f af c2             	imul   eax,edx
c0023f04:	50                   	push   eax
c0023f05:	e8 92 27 ff ff       	call   c001669c <malloc>
c0023f0a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023f0c:	89 34 24             	mov    DWORD PTR [esp],esi
c0023f0f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023f13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023f17:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023f1b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023f1f:	0f af c2             	imul   eax,edx
c0023f22:	99                   	cdq    
c0023f23:	52                   	push   edx
c0023f24:	50                   	push   eax
c0023f25:	57                   	push   edi
c0023f26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023f29:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023f2c:	83 c4 20             	add    esp,0x20
c0023f2f:	85 c0                	test   eax,eax
c0023f31:	0f 84 a7 00 00 00    	je     c0023fde <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023f37:	31 d2                	xor    edx,edx
c0023f39:	51                   	push   ecx
c0023f3a:	52                   	push   edx
c0023f3b:	50                   	push   eax
c0023f3c:	57                   	push   edi
c0023f3d:	e8 84 68 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0023f42:	83 c4 10             	add    esp,0x10
c0023f45:	85 c0                	test   eax,eax
c0023f47:	0f 85 91 00 00 00    	jne    c0023fde <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023f4d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023f51:	83 ec 0c             	sub    esp,0xc
c0023f54:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023f58:	0f af c2             	imul   eax,edx
c0023f5b:	50                   	push   eax
c0023f5c:	e8 3b 27 ff ff       	call   c001669c <malloc>
c0023f61:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023f63:	89 34 24             	mov    DWORD PTR [esp],esi
c0023f66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f6e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023f72:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023f76:	0f af c2             	imul   eax,edx
c0023f79:	99                   	cdq    
c0023f7a:	52                   	push   edx
c0023f7b:	50                   	push   eax
c0023f7c:	57                   	push   edi
c0023f7d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023f80:	83 c4 20             	add    esp,0x20
c0023f83:	31 c9                	xor    ecx,ecx
c0023f85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023f8d:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0023f91:	0f b7 e9             	movzx  ebp,cx
c0023f94:	0f 83 86 00 00 00    	jae    c0024020 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0023f9a:	c1 e5 05             	shl    ebp,0x5
c0023f9d:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0023fa1:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0023fa5:	75 73                	jne    c002401a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0023fa7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023fab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023fae:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0023fb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023fb5:	52                   	push   edx
c0023fb6:	31 d2                	xor    edx,edx
c0023fb8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0023fbb:	52                   	push   edx
c0023fbc:	50                   	push   eax
c0023fbd:	57                   	push   edi
c0023fbe:	e8 03 68 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0023fc3:	83 c4 10             	add    esp,0x10
c0023fc6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023fca:	85 c0                	test   eax,eax
c0023fcc:	74 17                	je     c0023fe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0023fce:	83 ec 0c             	sub    esp,0xc
c0023fd1:	68 f3 32 03 c0       	push   0xc00332f3
c0023fd6:	e8 f7 54 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0023fdb:	83 c4 10             	add    esp,0x10
c0023fde:	31 c0                	xor    eax,eax
c0023fe0:	e9 8b 00 00 00       	jmp    c0024070 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0023fe5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023fe9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023fec:	83 ec 0c             	sub    esp,0xc
c0023fef:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0023ff2:	50                   	push   eax
c0023ff3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023ff7:	56                   	push   esi
c0023ff8:	57                   	push   edi
c0023ff9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023ffd:	e8 d0 fb ff ff       	call   c0023bd2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0024002:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0024006:	83 c4 20             	add    esp,0x20
c0024009:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c002400d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024011:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0024016:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002401a:	41                   	inc    ecx
c002401b:	e9 6d ff ff ff       	jmp    c0023f8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0024020:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0024024:	83 ec 0c             	sub    esp,0xc
c0024027:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002402b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002402f:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0024035:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c002403b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024040:	05 00 10 00 00       	add    eax,0x1000
c0024045:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0024048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002404c:	e8 5b 26 ff ff       	call   c00166ac <free>
c0024051:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024054:	e8 53 26 ff ff       	call   c00166ac <free>
c0024059:	58                   	pop    eax
c002405a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002405e:	e8 49 26 ff ff       	call   c00166ac <free>
c0024063:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024066:	e8 fb 66 ff ff       	call   c001a766 <File::close()>
c002406b:	83 c4 10             	add    esp,0x10
c002406e:	b0 01                	mov    al,0x1
c0024070:	83 c4 3c             	add    esp,0x3c
c0024073:	5b                   	pop    ebx
c0024074:	5e                   	pop    esi
c0024075:	5f                   	pop    edi
c0024076:	5d                   	pop    ebp
c0024077:	c3                   	ret    

c0024078 <Thr::runtimeReferenceHelper()>:
c0024078:	83 ec 18             	sub    esp,0x18
c002407b:	68 fb 32 03 c0       	push   0xc00332fb
c0024080:	e8 4d 54 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0024085:	fa                   	cli    
c0024086:	83 c4 10             	add    esp,0x10
c0024089:	eb fe                	jmp    c0024089 <Thr::runtimeReferenceHelper()+0x11>

c002408b <Thr::getAddressOfKernelSymbol(char const*)>:
c002408b:	57                   	push   edi
c002408c:	56                   	push   esi
c002408d:	53                   	push   ebx
c002408e:	31 db                	xor    ebx,ebx
c0024090:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0024096:	7e 3c                	jle    c00240d4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0024098:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c002409f:	31 ff                	xor    edi,edi
c00240a1:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c00240a8:	7e 27                	jle    c00240d1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00240aa:	50                   	push   eax
c00240ab:	50                   	push   eax
c00240ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00240b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00240b2:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c00240b9:	50                   	push   eax
c00240ba:	e8 c1 c6 fd ff       	call   c0000780 <strcmp>
c00240bf:	83 c4 10             	add    esp,0x10
c00240c2:	85 c0                	test   eax,eax
c00240c4:	75 05                	jne    c00240cb <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00240c6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00240c9:	eb 0b                	jmp    c00240d6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00240cb:	83 c6 10             	add    esi,0x10
c00240ce:	47                   	inc    edi
c00240cf:	eb d0                	jmp    c00240a1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00240d1:	43                   	inc    ebx
c00240d2:	eb bc                	jmp    c0024090 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00240d4:	31 c0                	xor    eax,eax
c00240d6:	5b                   	pop    ebx
c00240d7:	5e                   	pop    esi
c00240d8:	5f                   	pop    edi
c00240d9:	c3                   	ret    

c00240da <Thr::loadKernelSymbolTable(char const*)>:
c00240da:	55                   	push   ebp
c00240db:	57                   	push   edi
c00240dc:	56                   	push   esi
c00240dd:	53                   	push   ebx
c00240de:	83 ec 68             	sub    esp,0x68
c00240e1:	68 14 01 00 00       	push   0x114
c00240e6:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c00240ec:	e8 ab 25 ff ff       	call   c001669c <malloc>
c00240f1:	83 c4 0c             	add    esp,0xc
c00240f4:	56                   	push   esi
c00240f5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00240f9:	89 c3                	mov    ebx,eax
c00240fb:	50                   	push   eax
c00240fc:	e8 e9 65 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0024101:	5e                   	pop    esi
c0024102:	5f                   	pop    edi
c0024103:	6a 01                	push   0x1
c0024105:	53                   	push   ebx
c0024106:	e8 fd 65 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c002410b:	83 c4 10             	add    esp,0x10
c002410e:	85 c0                	test   eax,eax
c0024110:	74 0a                	je     c002411c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0024112:	83 ec 0c             	sub    esp,0xc
c0024115:	68 1d 33 03 c0       	push   0xc003331d
c002411a:	eb 34                	jmp    c0024150 <Thr::loadKernelSymbolTable(char const*)+0x76>
c002411c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0024124:	83 ec 0c             	sub    esp,0xc
c0024127:	6a 34                	push   0x34
c0024129:	e8 6e 25 ff ff       	call   c001669c <malloc>
c002412e:	59                   	pop    ecx
c002412f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0024133:	89 c7                	mov    edi,eax
c0024135:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024137:	56                   	push   esi
c0024138:	57                   	push   edi
c0024139:	6a 00                	push   0x0
c002413b:	6a 34                	push   0x34
c002413d:	53                   	push   ebx
c002413e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024141:	83 c4 20             	add    esp,0x20
c0024144:	85 c0                	test   eax,eax
c0024146:	74 17                	je     c002415f <Thr::loadKernelSymbolTable(char const*)+0x85>
c0024148:	83 ec 0c             	sub    esp,0xc
c002414b:	68 34 33 03 c0       	push   0xc0033334
c0024150:	e8 41 c4 ff ff       	call   c0020596 <KePanic(char const*)>
c0024155:	83 c4 10             	add    esp,0x10
c0024158:	31 c0                	xor    eax,eax
c002415a:	e9 31 02 00 00       	jmp    c0024390 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c002415f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0024165:	75 e1                	jne    c0024148 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024167:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c002416a:	85 c0                	test   eax,eax
c002416c:	74 da                	je     c0024148 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c002416e:	52                   	push   edx
c002416f:	31 d2                	xor    edx,edx
c0024171:	52                   	push   edx
c0024172:	50                   	push   eax
c0024173:	53                   	push   ebx
c0024174:	e8 4d 66 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0024179:	83 c4 10             	add    esp,0x10
c002417c:	85 c0                	test   eax,eax
c002417e:	75 c8                	jne    c0024148 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024180:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024184:	83 ec 0c             	sub    esp,0xc
c0024187:	31 ed                	xor    ebp,ebp
c0024189:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002418d:	0f af c2             	imul   eax,edx
c0024190:	50                   	push   eax
c0024191:	e8 06 25 ff ff       	call   c001669c <malloc>
c0024196:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024198:	89 34 24             	mov    DWORD PTR [esp],esi
c002419b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002419f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00241a3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00241a7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00241ab:	0f af c2             	imul   eax,edx
c00241ae:	99                   	cdq    
c00241af:	52                   	push   edx
c00241b0:	50                   	push   eax
c00241b1:	53                   	push   ebx
c00241b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00241b5:	83 c4 20             	add    esp,0x20
c00241b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00241c0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00241c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00241d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00241d8:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00241dc:	0f b7 f5             	movzx  esi,bp
c00241df:	0f 83 a7 00 00 00    	jae    c002428c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00241e5:	6b f6 28             	imul   esi,esi,0x28
c00241e8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00241ec:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00241ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00241f3:	50                   	push   eax
c00241f4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00241f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00241fc:	8b 16                	mov    edx,DWORD PTR [esi]
c00241fe:	6b c0 28             	imul   eax,eax,0x28
c0024201:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0024205:	89 d0                	mov    eax,edx
c0024207:	31 d2                	xor    edx,edx
c0024209:	52                   	push   edx
c002420a:	50                   	push   eax
c002420b:	53                   	push   ebx
c002420c:	e8 b5 65 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0024211:	83 c4 0c             	add    esp,0xc
c0024214:	6a 20                	push   0x20
c0024216:	6a 00                	push   0x0
c0024218:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c002421c:	52                   	push   edx
c002421d:	e8 ce c2 fd ff       	call   c00004f0 <memset>
c0024222:	58                   	pop    eax
c0024223:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024225:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0024229:	51                   	push   ecx
c002422a:	8d 54 24 40          	lea    edx,[esp+0x40]
c002422e:	52                   	push   edx
c002422f:	6a 00                	push   0x0
c0024231:	6a 1f                	push   0x1f
c0024233:	53                   	push   ebx
c0024234:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024237:	83 c4 18             	add    esp,0x18
c002423a:	68 4b 33 03 c0       	push   0xc003334b
c002423f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0024243:	52                   	push   edx
c0024244:	e8 37 c5 fd ff       	call   c0000780 <strcmp>
c0024249:	83 c4 10             	add    esp,0x10
c002424c:	85 c0                	test   eax,eax
c002424e:	75 0f                	jne    c002425f <Thr::loadKernelSymbolTable(char const*)+0x185>
c0024250:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024253:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024257:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002425b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002425f:	50                   	push   eax
c0024260:	50                   	push   eax
c0024261:	68 53 33 03 c0       	push   0xc0033353
c0024266:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002426a:	50                   	push   eax
c002426b:	e8 10 c5 fd ff       	call   c0000780 <strcmp>
c0024270:	83 c4 10             	add    esp,0x10
c0024273:	85 c0                	test   eax,eax
c0024275:	75 0f                	jne    c0024286 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0024277:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002427a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002427e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024286:	45                   	inc    ebp
c0024287:	e9 4c ff ff ff       	jmp    c00241d8 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c002428c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024291:	75 10                	jne    c00242a3 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0024293:	83 ec 0c             	sub    esp,0xc
c0024296:	68 5b 33 03 c0       	push   0xc003335b
c002429b:	e8 f6 c2 ff ff       	call   c0020596 <KePanic(char const*)>
c00242a0:	83 c4 10             	add    esp,0x10
c00242a3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00242a8:	75 10                	jne    c00242ba <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00242aa:	83 ec 0c             	sub    esp,0xc
c00242ad:	68 5b 33 03 c0       	push   0xc003335b
c00242b2:	e8 df c2 ff ff       	call   c0020596 <KePanic(char const*)>
c00242b7:	83 c4 10             	add    esp,0x10
c00242ba:	50                   	push   eax
c00242bb:	31 d2                	xor    edx,edx
c00242bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242c1:	52                   	push   edx
c00242c2:	50                   	push   eax
c00242c3:	53                   	push   ebx
c00242c4:	e8 fd 64 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c00242c9:	5a                   	pop    edx
c00242ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00242ce:	e8 c9 23 ff ff       	call   c001669c <malloc>
c00242d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00242d7:	31 c9                	xor    ecx,ecx
c00242d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00242dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00242df:	5e                   	pop    esi
c00242e0:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00242e4:	55                   	push   ebp
c00242e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00242e9:	51                   	push   ecx
c00242ea:	52                   	push   edx
c00242eb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00242ef:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00242f3:	53                   	push   ebx
c00242f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00242f7:	83 c4 14             	add    esp,0x14
c00242fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00242fe:	e8 99 23 ff ff       	call   c001669c <malloc>
c0024303:	89 c6                	mov    esi,eax
c0024305:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024307:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002430a:	56                   	push   esi
c002430b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002430f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024313:	51                   	push   ecx
c0024314:	52                   	push   edx
c0024315:	53                   	push   ebx
c0024316:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024319:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002431d:	83 c4 1c             	add    esp,0x1c
c0024320:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0024326:	c1 e8 04             	shr    eax,0x4
c0024329:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0024330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024334:	31 d2                	xor    edx,edx
c0024336:	52                   	push   edx
c0024337:	50                   	push   eax
c0024338:	53                   	push   ebx
c0024339:	e8 88 64 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c002433e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024340:	31 d2                	xor    edx,edx
c0024342:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024345:	56                   	push   esi
c0024346:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002434a:	52                   	push   edx
c002434b:	50                   	push   eax
c002434c:	53                   	push   ebx
c002434d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024350:	83 c4 14             	add    esp,0x14
c0024353:	53                   	push   ebx
c0024354:	e8 0d 64 ff ff       	call   c001a766 <File::close()>
c0024359:	5d                   	pop    ebp
c002435a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002435e:	e8 49 23 ff ff       	call   c00166ac <free>
c0024363:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024366:	e8 41 23 ff ff       	call   c00166ac <free>
c002436b:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0024370:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024374:	83 c4 10             	add    esp,0x10
c0024377:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c002437e:	8d 50 01             	lea    edx,[eax+0x1]
c0024381:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0024388:	b0 01                	mov    al,0x1
c002438a:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0024390:	83 c4 5c             	add    esp,0x5c
c0024393:	5b                   	pop    ebx
c0024394:	5e                   	pop    esi
c0024395:	5f                   	pop    edi
c0024396:	5d                   	pop    ebp
c0024397:	c3                   	ret    

c0024398 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0024398:	55                   	push   ebp
c0024399:	57                   	push   edi
c002439a:	56                   	push   esi
c002439b:	53                   	push   ebx
c002439c:	81 ec 68 03 00 00    	sub    esp,0x368
c00243a2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00243a9:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c00243af:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00243b3:	68 14 01 00 00       	push   0x114
c00243b8:	e8 df 22 ff ff       	call   c001669c <malloc>
c00243bd:	83 c4 0c             	add    esp,0xc
c00243c0:	56                   	push   esi
c00243c1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00243c8:	50                   	push   eax
c00243c9:	89 c3                	mov    ebx,eax
c00243cb:	e8 1a 63 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c00243d0:	5f                   	pop    edi
c00243d1:	5d                   	pop    ebp
c00243d2:	6a 01                	push   0x1
c00243d4:	53                   	push   ebx
c00243d5:	e8 2e 63 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c00243da:	83 c4 10             	add    esp,0x10
c00243dd:	85 c0                	test   eax,eax
c00243df:	0f 85 b3 06 00 00    	jne    c0024a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00243e5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00243ed:	83 ec 0c             	sub    esp,0xc
c00243f0:	6a 34                	push   0x34
c00243f2:	e8 a5 22 ff ff       	call   c001669c <malloc>
c00243f7:	5e                   	pop    esi
c00243f8:	8d 74 24 54          	lea    esi,[esp+0x54]
c00243fc:	89 c5                	mov    ebp,eax
c00243fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024400:	56                   	push   esi
c0024401:	55                   	push   ebp
c0024402:	6a 00                	push   0x0
c0024404:	6a 34                	push   0x34
c0024406:	53                   	push   ebx
c0024407:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002440a:	83 c4 20             	add    esp,0x20
c002440d:	85 c0                	test   eax,eax
c002440f:	0f 85 83 06 00 00    	jne    c0024a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024415:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c002441c:	0f 85 76 06 00 00    	jne    c0024a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024422:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0024425:	85 c0                	test   eax,eax
c0024427:	0f 84 6b 06 00 00    	je     c0024a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002442d:	31 d2                	xor    edx,edx
c002442f:	51                   	push   ecx
c0024430:	52                   	push   edx
c0024431:	50                   	push   eax
c0024432:	53                   	push   ebx
c0024433:	e8 8e 63 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0024438:	83 c4 10             	add    esp,0x10
c002443b:	85 c0                	test   eax,eax
c002443d:	0f 85 55 06 00 00    	jne    c0024a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024443:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024446:	83 ec 0c             	sub    esp,0xc
c0024449:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c002444d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024451:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024455:	0f af c2             	imul   eax,edx
c0024458:	50                   	push   eax
c0024459:	e8 3e 22 ff ff       	call   c001669c <malloc>
c002445e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024460:	89 34 24             	mov    DWORD PTR [esp],esi
c0024463:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002446b:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c002446f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024473:	0f af c2             	imul   eax,edx
c0024476:	99                   	cdq    
c0024477:	52                   	push   edx
c0024478:	50                   	push   eax
c0024479:	53                   	push   ebx
c002447a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002447d:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0024480:	83 c4 20             	add    esp,0x20
c0024483:	85 c0                	test   eax,eax
c0024485:	0f 84 0d 06 00 00    	je     c0024a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002448b:	52                   	push   edx
c002448c:	31 d2                	xor    edx,edx
c002448e:	52                   	push   edx
c002448f:	50                   	push   eax
c0024490:	53                   	push   ebx
c0024491:	e8 30 63 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0024496:	83 c4 10             	add    esp,0x10
c0024499:	85 c0                	test   eax,eax
c002449b:	0f 85 f7 05 00 00    	jne    c0024a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00244a1:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00244a5:	83 ec 0c             	sub    esp,0xc
c00244a8:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00244ac:	0f af c2             	imul   eax,edx
c00244af:	50                   	push   eax
c00244b0:	e8 e7 21 ff ff       	call   c001669c <malloc>
c00244b5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00244b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00244ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00244be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00244c2:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00244c6:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00244ca:	0f af c2             	imul   eax,edx
c00244cd:	99                   	cdq    
c00244ce:	52                   	push   edx
c00244cf:	50                   	push   eax
c00244d0:	53                   	push   ebx
c00244d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00244d4:	83 c4 20             	add    esp,0x20
c00244d7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00244dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00244e0:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c00244e4:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c00244e8:	73 78                	jae    c0024562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c00244ea:	c1 e7 05             	shl    edi,0x5
c00244ed:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00244f1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00244f4:	75 63                	jne    c0024559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00244f6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00244f9:	31 d2                	xor    edx,edx
c00244fb:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00244fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024502:	50                   	push   eax
c0024503:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0024506:	52                   	push   edx
c0024507:	50                   	push   eax
c0024508:	53                   	push   ebx
c0024509:	e8 b8 62 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c002450e:	83 c4 10             	add    esp,0x10
c0024511:	85 c0                	test   eax,eax
c0024513:	0f 85 7f 05 00 00    	jne    c0024a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024519:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0024520:	83 ec 0c             	sub    esp,0xc
c0024523:	31 d2                	xor    edx,edx
c0024525:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0024529:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002452b:	01 c6                	add    esi,eax
c002452d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024534:	50                   	push   eax
c0024535:	56                   	push   esi
c0024536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002453a:	52                   	push   edx
c002453b:	50                   	push   eax
c002453c:	53                   	push   ebx
c002453d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024540:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024543:	83 c4 1c             	add    esp,0x1c
c0024546:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0024549:	50                   	push   eax
c002454a:	6a 00                	push   0x0
c002454c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0024550:	56                   	push   esi
c0024551:	e8 9a bf fd ff       	call   c00004f0 <memset>
c0024556:	83 c4 10             	add    esp,0x10
c0024559:	66 ff 04 24          	inc    WORD PTR [esp]
c002455d:	e9 7b ff ff ff       	jmp    c00244dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0024562:	50                   	push   eax
c0024563:	68 00 01 00 00       	push   0x100
c0024568:	6a 00                	push   0x0
c002456a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002456e:	50                   	push   eax
c002456f:	e8 7c bf fd ff       	call   c00004f0 <memset>
c0024574:	83 c4 0c             	add    esp,0xc
c0024577:	68 00 01 00 00       	push   0x100
c002457c:	6a 00                	push   0x0
c002457e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024585:	50                   	push   eax
c0024586:	e8 65 bf fd ff       	call   c00004f0 <memset>
c002458b:	83 c4 10             	add    esp,0x10
c002458e:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0024595:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002459c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00245a4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00245ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00245b4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00245bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00245c0:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c00245c4:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00245c9:	0f 83 16 01 00 00    	jae    c00246e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c00245cf:	6b ff 28             	imul   edi,edi,0x28
c00245d2:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c00245d6:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00245d9:	51                   	push   ecx
c00245da:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c00245de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00245e2:	8b 07                	mov    eax,DWORD PTR [edi]
c00245e4:	6b d2 28             	imul   edx,edx,0x28
c00245e7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00245eb:	31 d2                	xor    edx,edx
c00245ed:	52                   	push   edx
c00245ee:	50                   	push   eax
c00245ef:	53                   	push   ebx
c00245f0:	e8 d1 61 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c00245f5:	83 c4 0c             	add    esp,0xc
c00245f8:	6a 20                	push   0x20
c00245fa:	6a 00                	push   0x0
c00245fc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024603:	51                   	push   ecx
c0024604:	e8 e7 be fd ff       	call   c00004f0 <memset>
c0024609:	58                   	pop    eax
c002460a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002460c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024610:	52                   	push   edx
c0024611:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0024618:	51                   	push   ecx
c0024619:	6a 00                	push   0x0
c002461b:	6a 1f                	push   0x1f
c002461d:	53                   	push   ebx
c002461e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024621:	83 c4 1c             	add    esp,0x1c
c0024624:	6a 09                	push   0x9
c0024626:	68 75 33 03 c0       	push   0xc0033375
c002462b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024632:	51                   	push   ecx
c0024633:	e8 48 bd fd ff       	call   c0000380 <memcmp>
c0024638:	83 c4 10             	add    esp,0x10
c002463b:	85 c0                	test   eax,eax
c002463d:	75 1a                	jne    c0024659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c002463f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024642:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0024645:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0024649:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c002464c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024653:	89 d0                	mov    eax,edx
c0024655:	40                   	inc    eax
c0024656:	89 04 24             	mov    DWORD PTR [esp],eax
c0024659:	52                   	push   edx
c002465a:	6a 09                	push   0x9
c002465c:	68 7f 33 03 c0       	push   0xc003337f
c0024661:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024668:	50                   	push   eax
c0024669:	e8 12 bd fd ff       	call   c0000380 <memcmp>
c002466e:	83 c4 10             	add    esp,0x10
c0024671:	85 c0                	test   eax,eax
c0024673:	75 1a                	jne    c002468f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0024675:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024678:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002467b:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c002467f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024682:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0024689:	89 c8                	mov    eax,ecx
c002468b:	40                   	inc    eax
c002468c:	89 04 24             	mov    DWORD PTR [esp],eax
c002468f:	50                   	push   eax
c0024690:	50                   	push   eax
c0024691:	68 4b 33 03 c0       	push   0xc003334b
c0024696:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002469d:	50                   	push   eax
c002469e:	e8 dd c0 fd ff       	call   c0000780 <strcmp>
c00246a3:	83 c4 10             	add    esp,0x10
c00246a6:	85 c0                	test   eax,eax
c00246a8:	75 0b                	jne    c00246b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00246aa:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00246ae:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00246b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00246b5:	50                   	push   eax
c00246b6:	50                   	push   eax
c00246b7:	68 53 33 03 c0       	push   0xc0033353
c00246bc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00246c3:	50                   	push   eax
c00246c4:	e8 b7 c0 fd ff       	call   c0000780 <strcmp>
c00246c9:	83 c4 10             	add    esp,0x10
c00246cc:	85 c0                	test   eax,eax
c00246ce:	75 0b                	jne    c00246db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00246d0:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c00246d4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00246d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00246db:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c00246e0:	e9 d7 fe ff ff       	jmp    c00245bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00246e5:	50                   	push   eax
c00246e6:	31 d2                	xor    edx,edx
c00246e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00246ec:	52                   	push   edx
c00246ed:	50                   	push   eax
c00246ee:	53                   	push   ebx
c00246ef:	e8 d2 60 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c00246f4:	58                   	pop    eax
c00246f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00246f9:	e8 9e 1f ff ff       	call   c001669c <malloc>
c00246fe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024700:	31 d2                	xor    edx,edx
c0024702:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0024706:	58                   	pop    eax
c0024707:	8d 74 24 54          	lea    esi,[esp+0x54]
c002470b:	56                   	push   esi
c002470c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024714:	52                   	push   edx
c0024715:	50                   	push   eax
c0024716:	53                   	push   ebx
c0024717:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002471a:	83 c4 14             	add    esp,0x14
c002471d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024721:	e8 76 1f ff ff       	call   c001669c <malloc>
c0024726:	31 d2                	xor    edx,edx
c0024728:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002472c:	83 c4 0c             	add    esp,0xc
c002472f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024733:	52                   	push   edx
c0024734:	50                   	push   eax
c0024735:	53                   	push   ebx
c0024736:	e8 8b 60 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c002473b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002473d:	31 d2                	xor    edx,edx
c002473f:	89 34 24             	mov    DWORD PTR [esp],esi
c0024742:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024746:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002474a:	52                   	push   edx
c002474b:	50                   	push   eax
c002474c:	53                   	push   ebx
c002474d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024750:	83 c4 20             	add    esp,0x20
c0024753:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0024758:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0024760:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024764:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024768:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002476b:	0f 84 2b 03 00 00    	je     c0024a9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0024771:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0024778:	31 d2                	xor    edx,edx
c002477a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002477e:	c1 e8 03             	shr    eax,0x3
c0024781:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0024785:	51                   	push   ecx
c0024786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002478a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c002478e:	52                   	push   edx
c002478f:	50                   	push   eax
c0024790:	53                   	push   ebx
c0024791:	e8 30 60 ff ff       	call   c001a7c6 <File::seek(unsigned long long)>
c0024796:	5e                   	pop    esi
c0024797:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002479b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00247a2:	e8 f5 1e ff ff       	call   c001669c <malloc>
c00247a7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00247a9:	31 d2                	xor    edx,edx
c00247ab:	89 c7                	mov    edi,eax
c00247ad:	58                   	pop    eax
c00247ae:	8d 44 24 58          	lea    eax,[esp+0x58]
c00247b2:	50                   	push   eax
c00247b3:	57                   	push   edi
c00247b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00247b8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00247bf:	52                   	push   edx
c00247c0:	50                   	push   eax
c00247c1:	53                   	push   ebx
c00247c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00247c5:	83 c4 20             	add    esp,0x20
c00247c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00247d0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00247d4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00247d8:	0f 8d a5 02 00 00    	jge    c0024a83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00247de:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00247e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247e7:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c00247ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00247ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247f2:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00247f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00247fa:	c1 e8 08             	shr    eax,0x8
c00247fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024801:	89 c2                	mov    edx,eax
c0024803:	c1 e2 04             	shl    edx,0x4
c0024806:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c002480a:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c002480d:	85 f6                	test   esi,esi
c002480f:	0f 85 cf 00 00 00    	jne    c00248e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0024815:	83 ec 0c             	sub    esp,0xc
c0024818:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c002481c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024820:	03 02                	add    eax,DWORD PTR [edx]
c0024822:	50                   	push   eax
c0024823:	e8 63 f8 ff ff       	call   c002408b <Thr::getAddressOfKernelSymbol(char const*)>
c0024828:	83 c4 10             	add    esp,0x10
c002482b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002482f:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0024834:	85 c0                	test   eax,eax
c0024836:	89 c6                	mov    esi,eax
c0024838:	0f 85 a6 00 00 00    	jne    c00248e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c002483e:	83 ec 0c             	sub    esp,0xc
c0024841:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0024845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024849:	03 02                	add    eax,DWORD PTR [edx]
c002484b:	50                   	push   eax
c002484c:	e8 2f bf ff ff       	call   c0020780 <KeResolveCompatibilitySymbol(char*)>
c0024851:	83 c4 10             	add    esp,0x10
c0024854:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024858:	85 c0                	test   eax,eax
c002485a:	89 c6                	mov    esi,eax
c002485c:	0f 85 82 00 00 00    	jne    c00248e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0024862:	50                   	push   eax
c0024863:	50                   	push   eax
c0024864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024868:	03 02                	add    eax,DWORD PTR [edx]
c002486a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002486e:	50                   	push   eax
c002486f:	68 89 33 03 c0       	push   0xc0033389
c0024874:	e8 59 4c ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0024879:	58                   	pop    eax
c002487a:	5a                   	pop    edx
c002487b:	68 a3 33 03 c0       	push   0xc00333a3
c0024880:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024887:	51                   	push   ecx
c0024888:	e8 c3 bd fd ff       	call   c0000650 <strcpy>
c002488d:	59                   	pop    ecx
c002488e:	58                   	pop    eax
c002488f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024897:	03 02                	add    eax,DWORD PTR [edx]
c0024899:	50                   	push   eax
c002489a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00248a1:	51                   	push   ecx
c00248a2:	e8 c9 bf fd ff       	call   c0000870 <strcat>
c00248a7:	58                   	pop    eax
c00248a8:	5a                   	pop    edx
c00248a9:	68 3d 34 03 c0       	push   0xc003343d
c00248ae:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00248b5:	51                   	push   ecx
c00248b6:	e8 b5 bf fd ff       	call   c0000870 <strcat>
c00248bb:	83 c4 10             	add    esp,0x10
c00248be:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00248c3:	0f 84 77 01 00 00    	je     c0024a40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00248c9:	83 ec 0c             	sub    esp,0xc
c00248cc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00248d3:	51                   	push   ecx
c00248d4:	e8 bd bc ff ff       	call   c0020596 <KePanic(char const*)>
c00248d9:	83 c4 10             	add    esp,0x10
c00248dc:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00248e0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00248e4:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00248e9:	83 f8 01             	cmp    eax,0x1
c00248ec:	0f 85 9b 00 00 00    	jne    c002498d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00248f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00248f6:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00248fd:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0024901:	01 d0                	add    eax,edx
c0024903:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c002490b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002490f:	0f 94 c0             	sete   al
c0024912:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c002491a:	0f 94 c1             	sete   cl
c002491d:	09 c1                	or     ecx,eax
c002491f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024923:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0024928:	0f b6 c9             	movzx  ecx,cl
c002492b:	8b 00                	mov    eax,DWORD PTR [eax]
c002492d:	74 41                	je     c0024970 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c002492f:	8d 14 06             	lea    edx,[esi+eax*1]
c0024932:	85 c9                	test   ecx,ecx
c0024934:	75 15                	jne    c002494b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0024936:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c002493a:	66 83 f8 0c          	cmp    ax,0xc
c002493e:	76 05                	jbe    c0024945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0024940:	b8 0c 00 00 00       	mov    eax,0xc
c0024945:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0024949:	76 37                	jbe    c0024982 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c002494b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024950:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024954:	0f 84 e6 00 00 00    	je     c0024a40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c002495a:	83 ec 0c             	sub    esp,0xc
c002495d:	68 ba 33 03 c0       	push   0xc00333ba
c0024962:	e8 2f bc ff ff       	call   c0020596 <KePanic(char const*)>
c0024967:	83 c4 10             	add    esp,0x10
c002496a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002496e:	eb 12                	jmp    c0024982 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024970:	01 c2                	add    edx,eax
c0024972:	85 c9                	test   ecx,ecx
c0024974:	75 0c                	jne    c0024982 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024976:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c002497a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c002497e:	77 02                	ja     c0024982 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024980:	01 f2                	add    edx,esi
c0024982:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024986:	89 10                	mov    DWORD PTR [eax],edx
c0024988:	e9 ed 00 00 00       	jmp    c0024a7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c002498d:	83 f8 02             	cmp    eax,0x2
c0024990:	0f 85 81 00 00 00    	jne    c0024a17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0024996:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002499d:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00249a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00249a5:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00249ad:	74 21                	je     c00249d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00249af:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00249b7:	74 17                	je     c00249d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00249b9:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00249bd:	ba 0a 00 00 00       	mov    edx,0xa
c00249c2:	83 f9 0e             	cmp    ecx,0xe
c00249c5:	77 03                	ja     c00249ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00249c7:	8d 51 fc             	lea    edx,[ecx-0x4]
c00249ca:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00249ce:	76 1f                	jbe    c00249ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00249d0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00249d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00249d9:	74 65                	je     c0024a40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00249db:	83 ec 0c             	sub    esp,0xc
c00249de:	68 d6 33 03 c0       	push   0xc00333d6
c00249e3:	e8 ae bb ff ff       	call   c0020596 <KePanic(char const*)>
c00249e8:	83 c4 10             	add    esp,0x10
c00249eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249ef:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00249f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00249f6:	74 15                	je     c0024a0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00249f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00249fc:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0024a03:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0024a07:	01 d1                	add    ecx,edx
c0024a09:	01 ce                	add    esi,ecx
c0024a0b:	eb 06                	jmp    c0024a13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0024a0d:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0024a11:	01 d6                	add    esi,edx
c0024a13:	89 30                	mov    DWORD PTR [eax],esi
c0024a15:	eb 63                	jmp    c0024a7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0024a17:	56                   	push   esi
c0024a18:	56                   	push   esi
c0024a19:	50                   	push   eax
c0024a1a:	68 f2 33 03 c0       	push   0xc00333f2
c0024a1f:	e8 ae 4a ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0024a24:	83 c4 10             	add    esp,0x10
c0024a27:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024a2c:	74 12                	je     c0024a40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024a2e:	83 ec 0c             	sub    esp,0xc
c0024a31:	68 fd 33 03 c0       	push   0xc00333fd
c0024a36:	e8 5b bb ff ff       	call   c0020596 <KePanic(char const*)>
c0024a3b:	83 c4 10             	add    esp,0x10
c0024a3e:	eb 3a                	jmp    c0024a7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0024a40:	83 ec 0c             	sub    esp,0xc
c0024a43:	53                   	push   ebx
c0024a44:	e8 1d 5d ff ff       	call   c001a766 <File::close()>
c0024a49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024a4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024a51:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024a54:	e8 53 1c ff ff       	call   c00166ac <free>
c0024a59:	59                   	pop    ecx
c0024a5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024a5e:	e8 49 1c ff ff       	call   c00166ac <free>
c0024a63:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024a66:	e8 41 1c ff ff       	call   c00166ac <free>
c0024a6b:	5b                   	pop    ebx
c0024a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024a70:	e8 37 1c ff ff       	call   c00166ac <free>
c0024a75:	83 c4 10             	add    esp,0x10
c0024a78:	eb 1e                	jmp    c0024a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024a7a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0024a7e:	e9 4d fd ff ff       	jmp    c00247d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0024a83:	83 ec 0c             	sub    esp,0xc
c0024a86:	57                   	push   edi
c0024a87:	e8 20 1c ff ff       	call   c00166ac <free>
c0024a8c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0024a90:	83 c4 10             	add    esp,0x10
c0024a93:	e9 cc fc ff ff       	jmp    c0024764 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0024a98:	31 c0                	xor    eax,eax
c0024a9a:	eb 32                	jmp    c0024ace <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0024a9c:	83 ec 0c             	sub    esp,0xc
c0024a9f:	53                   	push   ebx
c0024aa0:	e8 c1 5c ff ff       	call   c001a766 <File::close()>
c0024aa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024aa7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024aaa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024aad:	58                   	pop    eax
c0024aae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024ab2:	e8 f5 1b ff ff       	call   c00166ac <free>
c0024ab7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024aba:	e8 ed 1b ff ff       	call   c00166ac <free>
c0024abf:	5a                   	pop    edx
c0024ac0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024ac4:	e8 e3 1b ff ff       	call   c00166ac <free>
c0024ac9:	83 c4 10             	add    esp,0x10
c0024acc:	b0 01                	mov    al,0x1
c0024ace:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024ad4:	5b                   	pop    ebx
c0024ad5:	5e                   	pop    esi
c0024ad6:	5f                   	pop    edi
c0024ad7:	5d                   	pop    ebp
c0024ad8:	c3                   	ret    

c0024ad9 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024ad9:	56                   	push   esi
c0024ada:	31 d2                	xor    edx,edx
c0024adc:	53                   	push   ebx
c0024add:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024ae3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024ae7:	39 d3                	cmp    ebx,edx
c0024ae9:	7e 1b                	jle    c0024b06 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024aeb:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c0024af2:	39 c8                	cmp    eax,ecx
c0024af4:	77 0d                	ja     c0024b03 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0024af6:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c0024afd:	01 c6                	add    esi,eax
c0024aff:	39 ce                	cmp    esi,ecx
c0024b01:	77 05                	ja     c0024b08 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024b03:	42                   	inc    edx
c0024b04:	eb e1                	jmp    c0024ae7 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0024b06:	31 c0                	xor    eax,eax
c0024b08:	5b                   	pop    ebx
c0024b09:	5e                   	pop    esi
c0024b0a:	c3                   	ret    

c0024b0b <Thr::getDriverNameFromAddress(unsigned long)>:
c0024b0b:	53                   	push   ebx
c0024b0c:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024b12:	31 c0                	xor    eax,eax
c0024b14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024b18:	39 c3                	cmp    ebx,eax
c0024b1a:	7e 22                	jle    c0024b3e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024b1c:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c0024b23:	39 ca                	cmp    edx,ecx
c0024b25:	77 14                	ja     c0024b3b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024b27:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c0024b2e:	39 ca                	cmp    edx,ecx
c0024b30:	76 09                	jbe    c0024b3b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024b32:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c0024b39:	eb 05                	jmp    c0024b40 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0024b3b:	40                   	inc    eax
c0024b3c:	eb da                	jmp    c0024b18 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0024b3e:	31 c0                	xor    eax,eax
c0024b40:	5b                   	pop    ebx
c0024b41:	c3                   	ret    

c0024b42 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0024b42:	53                   	push   ebx
c0024b43:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0024b47:	53                   	push   ebx
c0024b48:	e8 8c ff ff ff       	call   c0024ad9 <Thr::getDriverBaseFromAddress(unsigned long)>
c0024b4d:	5a                   	pop    edx
c0024b4e:	31 d2                	xor    edx,edx
c0024b50:	85 c0                	test   eax,eax
c0024b52:	74 04                	je     c0024b58 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024b54:	89 da                	mov    edx,ebx
c0024b56:	29 c2                	sub    edx,eax
c0024b58:	5b                   	pop    ebx
c0024b59:	89 d0                	mov    eax,edx
c0024b5b:	c3                   	ret    

c0024b5c <Thr::loadDLL(char const*, bool)>:
c0024b5c:	55                   	push   ebp
c0024b5d:	57                   	push   edi
c0024b5e:	56                   	push   esi
c0024b5f:	53                   	push   ebx
c0024b60:	81 ec 34 01 00 00    	sub    esp,0x134
c0024b66:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024b6d:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0024b74:	56                   	push   esi
c0024b75:	68 15 34 03 c0       	push   0xc0033415
c0024b7a:	e8 53 49 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0024b7f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024b86:	e8 11 1b ff ff       	call   c001669c <malloc>
c0024b8b:	83 c4 0c             	add    esp,0xc
c0024b8e:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024b94:	56                   	push   esi
c0024b95:	50                   	push   eax
c0024b96:	89 c3                	mov    ebx,eax
c0024b98:	e8 4d 5b ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0024b9d:	83 c4 10             	add    esp,0x10
c0024ba0:	85 db                	test   ebx,ebx
c0024ba2:	75 3c                	jne    c0024be0 <Thr::loadDLL(char const*, bool)+0x84>
c0024ba4:	89 e8                	mov    eax,ebp
c0024ba6:	84 c0                	test   al,al
c0024ba8:	0f 84 02 02 00 00    	je     c0024db0 <Thr::loadDLL(char const*, bool)+0x254>
c0024bae:	50                   	push   eax
c0024baf:	50                   	push   eax
c0024bb0:	68 26 34 03 c0       	push   0xc0033426
c0024bb5:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0024bb9:	57                   	push   edi
c0024bba:	e8 91 ba fd ff       	call   c0000650 <strcpy>
c0024bbf:	58                   	pop    eax
c0024bc0:	5a                   	pop    edx
c0024bc1:	56                   	push   esi
c0024bc2:	57                   	push   edi
c0024bc3:	e8 a8 bc fd ff       	call   c0000870 <strcat>
c0024bc8:	59                   	pop    ecx
c0024bc9:	58                   	pop    eax
c0024bca:	68 3d 34 03 c0       	push   0xc003343d
c0024bcf:	57                   	push   edi
c0024bd0:	e8 9b bc fd ff       	call   c0000870 <strcat>
c0024bd5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024bd8:	e8 b9 b9 ff ff       	call   c0020596 <KePanic(char const*)>
c0024bdd:	83 c4 10             	add    esp,0x10
c0024be0:	50                   	push   eax
c0024be1:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024be5:	50                   	push   eax
c0024be6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024bea:	50                   	push   eax
c0024beb:	53                   	push   ebx
c0024bec:	e8 19 5e ff ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c0024bf1:	83 c4 10             	add    esp,0x10
c0024bf4:	85 db                	test   ebx,ebx
c0024bf6:	89 c7                	mov    edi,eax
c0024bf8:	74 0c                	je     c0024c06 <Thr::loadDLL(char const*, bool)+0xaa>
c0024bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024bfc:	83 ec 0c             	sub    esp,0xc
c0024bff:	53                   	push   ebx
c0024c00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024c03:	83 c4 10             	add    esp,0x10
c0024c06:	83 ec 0c             	sub    esp,0xc
c0024c09:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024c0e:	50                   	push   eax
c0024c0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c17:	57                   	push   edi
c0024c18:	68 3f 34 03 c0       	push   0xc003343f
c0024c1d:	e8 b0 48 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0024c22:	83 c4 20             	add    esp,0x20
c0024c25:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024c2a:	75 0a                	jne    c0024c36 <Thr::loadDLL(char const*, bool)+0xda>
c0024c2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c30:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0024c34:	75 3e                	jne    c0024c74 <Thr::loadDLL(char const*, bool)+0x118>
c0024c36:	89 e8                	mov    eax,ebp
c0024c38:	31 db                	xor    ebx,ebx
c0024c3a:	84 c0                	test   al,al
c0024c3c:	0f 84 6e 01 00 00    	je     c0024db0 <Thr::loadDLL(char const*, bool)+0x254>
c0024c42:	50                   	push   eax
c0024c43:	50                   	push   eax
c0024c44:	68 60 34 03 c0       	push   0xc0033460
c0024c49:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0024c4d:	53                   	push   ebx
c0024c4e:	e8 fd b9 fd ff       	call   c0000650 <strcpy>
c0024c53:	58                   	pop    eax
c0024c54:	5a                   	pop    edx
c0024c55:	56                   	push   esi
c0024c56:	53                   	push   ebx
c0024c57:	e8 14 bc fd ff       	call   c0000870 <strcat>
c0024c5c:	59                   	pop    ecx
c0024c5d:	5f                   	pop    edi
c0024c5e:	68 3d 34 03 c0       	push   0xc003343d
c0024c63:	53                   	push   ebx
c0024c64:	e8 07 bc fd ff       	call   c0000870 <strcat>
c0024c69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c6c:	e8 25 b9 ff ff       	call   c0020596 <KePanic(char const*)>
c0024c71:	83 c4 10             	add    esp,0x10
c0024c74:	53                   	push   ebx
c0024c75:	6a 03                	push   0x3
c0024c77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c7b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024c7f:	05 ff 0f 00 00       	add    eax,0xfff
c0024c84:	83 d2 00             	adc    edx,0x0
c0024c87:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024c8b:	50                   	push   eax
c0024c8c:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024c92:	e8 37 3d ff ff       	call   c00189ce <VAS::allocatePages(int, int)>
c0024c97:	89 c3                	mov    ebx,eax
c0024c99:	58                   	pop    eax
c0024c9a:	5a                   	pop    edx
c0024c9b:	53                   	push   ebx
c0024c9c:	68 6e 17 03 c0       	push   0xc003176e
c0024ca1:	e8 2c 48 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0024ca6:	89 34 24             	mov    DWORD PTR [esp],esi
c0024ca9:	e8 d2 b8 fd ff       	call   c0000580 <strlen>
c0024cae:	8b 3d 00 fa 03 c0    	mov    edi,DWORD PTR ds:0xc003fa00
c0024cb4:	40                   	inc    eax
c0024cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0024cb8:	e8 df 19 ff ff       	call   c001669c <malloc>
c0024cbd:	59                   	pop    ecx
c0024cbe:	89 04 bd 20 fe 03 c0 	mov    DWORD PTR [edi*4-0x3ffc01e0],eax
c0024cc5:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024cca:	5f                   	pop    edi
c0024ccb:	56                   	push   esi
c0024ccc:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c0024cd3:	e8 78 b9 fd ff       	call   c0000650 <strcpy>
c0024cd8:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024cdd:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024ce4:	8d 50 01             	lea    edx,[eax+0x1]
c0024ce7:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024ced:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024cf1:	83 c4 0c             	add    esp,0xc
c0024cf4:	6a 01                	push   0x1
c0024cf6:	53                   	push   ebx
c0024cf7:	56                   	push   esi
c0024cf8:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c0024cff:	e8 94 f6 ff ff       	call   c0024398 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0024d04:	83 c4 10             	add    esp,0x10
c0024d07:	89 c7                	mov    edi,eax
c0024d09:	89 f8                	mov    eax,edi
c0024d0b:	83 f0 01             	xor    eax,0x1
c0024d0e:	84 c0                	test   al,al
c0024d10:	74 18                	je     c0024d2a <Thr::loadDLL(char const*, bool)+0x1ce>
c0024d12:	89 e8                	mov    eax,ebp
c0024d14:	84 c0                	test   al,al
c0024d16:	74 12                	je     c0024d2a <Thr::loadDLL(char const*, bool)+0x1ce>
c0024d18:	83 ec 0c             	sub    esp,0xc
c0024d1b:	68 79 34 03 c0       	push   0xc0033479
c0024d20:	e8 71 b8 ff ff       	call   c0020596 <KePanic(char const*)>
c0024d25:	83 c4 10             	add    esp,0x10
c0024d28:	eb 06                	jmp    c0024d30 <Thr::loadDLL(char const*, bool)+0x1d4>
c0024d2a:	89 f8                	mov    eax,edi
c0024d2c:	84 c0                	test   al,al
c0024d2e:	75 10                	jne    c0024d40 <Thr::loadDLL(char const*, bool)+0x1e4>
c0024d30:	83 ec 0c             	sub    esp,0xc
c0024d33:	68 98 34 03 c0       	push   0xc0033498
c0024d38:	e8 59 b8 ff ff       	call   c0020596 <KePanic(char const*)>
c0024d3d:	83 c4 10             	add    esp,0x10
c0024d40:	31 f6                	xor    esi,esi
c0024d42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d4a:	05 ff 0f 00 00       	add    eax,0xfff
c0024d4f:	83 d2 00             	adc    edx,0x0
c0024d52:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024d56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d5a:	c1 ea 0c             	shr    edx,0xc
c0024d5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024d61:	ba 00 00 00 00       	mov    edx,0x0
c0024d66:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0024d6a:	89 d0                	mov    eax,edx
c0024d6c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0024d70:	73 32                	jae    c0024da4 <Thr::loadDLL(char const*, bool)+0x248>
c0024d72:	50                   	push   eax
c0024d73:	50                   	push   eax
c0024d74:	89 f0                	mov    eax,esi
c0024d76:	c1 e0 0c             	shl    eax,0xc
c0024d79:	01 d8                	add    eax,ebx
c0024d7b:	50                   	push   eax
c0024d7c:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024d82:	e8 2b 37 ff ff       	call   c00184b2 <VAS::getPageTableEntry(unsigned long)>
c0024d87:	83 c4 10             	add    esp,0x10
c0024d8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d8c:	a8 60                	test   al,0x60
c0024d8e:	75 11                	jne    c0024da1 <Thr::loadDLL(char const*, bool)+0x245>
c0024d90:	83 ec 0c             	sub    esp,0xc
c0024d93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024d98:	50                   	push   eax
c0024d99:	e8 a4 1b ff ff       	call   c0016942 <Phys::freePage(unsigned long)>
c0024d9e:	83 c4 10             	add    esp,0x10
c0024da1:	46                   	inc    esi
c0024da2:	eb 9e                	jmp    c0024d42 <Thr::loadDLL(char const*, bool)+0x1e6>
c0024da4:	89 f8                	mov    eax,edi
c0024da6:	84 c0                	test   al,al
c0024da8:	b8 00 00 00 00       	mov    eax,0x0
c0024dad:	0f 44 d8             	cmove  ebx,eax
c0024db0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024db6:	89 d8                	mov    eax,ebx
c0024db8:	5b                   	pop    ebx
c0024db9:	5e                   	pop    esi
c0024dba:	5f                   	pop    edi
c0024dbb:	5d                   	pop    ebp
c0024dbc:	c3                   	ret    

c0024dbd <Thr::executeDLL(unsigned long, void*)>:
c0024dbd:	56                   	push   esi
c0024dbe:	53                   	push   ebx
c0024dbf:	52                   	push   edx
c0024dc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024dc4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024dc8:	85 db                	test   ebx,ebx
c0024dca:	75 10                	jne    c0024ddc <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024dcc:	83 ec 0c             	sub    esp,0xc
c0024dcf:	68 b4 34 03 c0       	push   0xc00334b4
c0024dd4:	e8 bd b7 ff ff       	call   c0020596 <KePanic(char const*)>
c0024dd9:	83 c4 10             	add    esp,0x10
c0024ddc:	50                   	push   eax
c0024ddd:	50                   	push   eax
c0024dde:	53                   	push   ebx
c0024ddf:	68 de 34 03 c0       	push   0xc00334de
c0024de4:	e8 e9 46 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0024de9:	89 d8                	mov    eax,ebx
c0024deb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024def:	83 c4 14             	add    esp,0x14
c0024df2:	5b                   	pop    ebx
c0024df3:	5e                   	pop    esi
c0024df4:	ff e0                	jmp    eax
c0024df6:	66 90                	xchg   ax,ax

c0024df8 <userModeEntryPoint(void*)>:
c0024df8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024dfd:	83 e8 01             	sub    eax,0x1
c0024e00:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024e05:	75 01                	jne    c0024e08 <userModeEntryPoint(void*)+0x10>
c0024e07:	fb                   	sti    
c0024e08:	fb                   	sti    
c0024e09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024e11:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024e17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024e1b:	e9 1f b4 fd ff       	jmp    c000023f <goToUsermode>

c0024e20 <changeTSS>:
c0024e20:	83 ec 14             	sub    esp,0x14
c0024e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024e28:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024e2b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024e30:	c1 e2 15             	shl    edx,0x15
c0024e33:	29 d0                	sub    eax,edx
c0024e35:	50                   	push   eax
c0024e36:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024e3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e41:	05 7c 11 00 00       	add    eax,0x117c
c0024e46:	50                   	push   eax
c0024e47:	e8 b8 2c ff ff       	call   c0017b04 <TSS::setESP(unsigned long)>
c0024e4c:	83 c4 1c             	add    esp,0x1c
c0024e4f:	c3                   	ret    

c0024e50 <switchToThread(ThreadControlBlock*)>:
c0024e50:	57                   	push   edi
c0024e51:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024e57:	56                   	push   esi
c0024e58:	53                   	push   ebx
c0024e59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e5d:	85 c9                	test   ecx,ecx
c0024e5f:	0f 85 8b 00 00 00    	jne    c0024ef0 <switchToThread(ThreadControlBlock*)+0xa0>
c0024e65:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024e69:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024e6f:	74 7b                	je     c0024eec <switchToThread(ThreadControlBlock*)+0x9c>
c0024e71:	b8 00 04 00 00       	mov    eax,0x400
c0024e76:	29 d0                	sub    eax,edx
c0024e78:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024e7b:	d1 f8                	sar    eax,1
c0024e7d:	01 d0                	add    eax,edx
c0024e7f:	90                   	nop
c0024e80:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024e83:	e8 47 26 00 00       	call   c00274cf <HalQueryPerformanceCounter()>
c0024e88:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024e8d:	89 c6                	mov    esi,eax
c0024e8f:	89 d7                	mov    edi,edx
c0024e91:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024e97:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024e9c:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024ea2:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024ea8:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024eae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024eb4:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024eba:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024ec0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024ec3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024ec6:	01 c6                	add    esi,eax
c0024ec8:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024ecb:	11 d7                	adc    edi,edx
c0024ecd:	83 ec 0c             	sub    esp,0xc
c0024ed0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024ed3:	53                   	push   ebx
c0024ed4:	e8 9e b3 fd ff       	call   c0000277 <switchToThreadASM>
c0024ed9:	0f 20 c0             	mov    eax,cr0
c0024edc:	83 c8 08             	or     eax,0x8
c0024edf:	0f 22 c0             	mov    cr0,eax
c0024ee2:	83 c4 10             	add    esp,0x10
c0024ee5:	5b                   	pop    ebx
c0024ee6:	5e                   	pop    esi
c0024ee7:	5f                   	pop    edi
c0024ee8:	c3                   	ret    
c0024ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0024eec:	31 c0                	xor    eax,eax
c0024eee:	eb 90                	jmp    c0024e80 <switchToThread(ThreadControlBlock*)+0x30>
c0024ef0:	5b                   	pop    ebx
c0024ef1:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024efb:	5e                   	pop    esi
c0024efc:	5f                   	pop    edi
c0024efd:	c3                   	ret    
c0024efe:	66 90                	xchg   ax,ax

c0024f00 <Process::addArgs(char**)>:
c0024f00:	57                   	push   edi
c0024f01:	56                   	push   esi
c0024f02:	53                   	push   ebx
c0024f03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024f07:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024f0b:	85 f6                	test   esi,esi
c0024f0d:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0024f17:	74 4f                	je     c0024f68 <Process::addArgs(char**)+0x68>
c0024f19:	8b 06                	mov    eax,DWORD PTR [esi]
c0024f1b:	85 c0                	test   eax,eax
c0024f1d:	74 49                	je     c0024f68 <Process::addArgs(char**)+0x68>
c0024f1f:	31 db                	xor    ebx,ebx
c0024f21:	8d 76 00             	lea    esi,[esi+0x0]
c0024f24:	83 ec 0c             	sub    esp,0xc
c0024f27:	50                   	push   eax
c0024f28:	e8 53 b6 fd ff       	call   c0000580 <strlen>
c0024f2d:	83 c0 01             	add    eax,0x1
c0024f30:	89 04 24             	mov    DWORD PTR [esp],eax
c0024f33:	e8 64 17 ff ff       	call   c001669c <malloc>
c0024f38:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0024f3f:	5a                   	pop    edx
c0024f40:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0024f43:	83 c3 01             	add    ebx,0x1
c0024f46:	59                   	pop    ecx
c0024f47:	52                   	push   edx
c0024f48:	50                   	push   eax
c0024f49:	e8 02 b7 fd ff       	call   c0000650 <strcpy>
c0024f4e:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0024f54:	83 c4 10             	add    esp,0x10
c0024f57:	83 c1 01             	add    ecx,0x1
c0024f5a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0024f60:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0024f63:	85 c0                	test   eax,eax
c0024f65:	75 bd                	jne    c0024f24 <Process::addArgs(char**)+0x24>
c0024f67:	90                   	nop
c0024f68:	5b                   	pop    ebx
c0024f69:	5e                   	pop    esi
c0024f6a:	5f                   	pop    edi
c0024f6b:	c3                   	ret    

c0024f6c <Process::Process(char const*, Process*, char**)>:
c0024f6c:	56                   	push   esi
c0024f6d:	53                   	push   ebx
c0024f6e:	83 ec 14             	sub    esp,0x14
c0024f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f75:	05 0c 02 00 00       	add    eax,0x20c
c0024f7a:	bb 07 00 00 00       	mov    ebx,0x7
c0024f7f:	89 c6                	mov    esi,eax
c0024f81:	8d 76 00             	lea    esi,[esi+0x0]
c0024f84:	85 db                	test   ebx,ebx
c0024f86:	78 14                	js     c0024f9c <Process::Process(char const*, Process*, char**)+0x30>
c0024f88:	83 ec 0c             	sub    esp,0xc
c0024f8b:	56                   	push   esi
c0024f8c:	e8 07 a5 00 00       	call   c002f498 <ThreadControlBlock::ThreadControlBlock()>
c0024f91:	83 c4 10             	add    esp,0x10
c0024f94:	83 c6 5f             	add    esi,0x5f
c0024f97:	83 eb 01             	sub    ebx,0x1
c0024f9a:	eb e8                	jmp    c0024f84 <Process::Process(char const*, Process*, char**)+0x18>
c0024f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fa0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fab:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024fb2:	83 ec 0c             	sub    esp,0xc
c0024fb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024fb9:	e8 b2 b3 ff ff       	call   c0020370 <KeNewProcessEnv(Process*)>
c0024fbe:	83 c4 10             	add    esp,0x10
c0024fc1:	89 c2                	mov    edx,eax
c0024fc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fc7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fd1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024fda:	a1 80 4b 03 c0       	mov    eax,ds:0xc0034b80
c0024fdf:	8d 50 01             	lea    edx,[eax+0x1]
c0024fe2:	89 15 80 4b 03 c0    	mov    DWORD PTR ds:0xc0034b80,edx
c0024fe8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024fec:	89 02                	mov    DWORD PTR [edx],eax
c0024fee:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024ff6:	83 ec 0c             	sub    esp,0xc
c0024ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024ffd:	e8 9a 16 ff ff       	call   c001669c <malloc>
c0025002:	83 c4 10             	add    esp,0x10
c0025005:	89 c3                	mov    ebx,eax
c0025007:	83 ec 08             	sub    esp,0x8
c002500a:	6a 00                	push   0x0
c002500c:	53                   	push   ebx
c002500d:	e8 08 3c ff ff       	call   c0018c1a <VAS::VAS(bool)>
c0025012:	83 c4 10             	add    esp,0x10
c0025015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025019:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c002501f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025023:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c002502d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025031:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0025035:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c002503b:	e8 83 bd ff ff       	call   c0020dc3 <KeInitSignals()>
c0025040:	89 c2                	mov    edx,eax
c0025042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025046:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c002504c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025050:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025056:	85 c0                	test   eax,eax
c0025058:	74 42                	je     c002509c <Process::Process(char const*, Process*, char**)+0x130>
c002505a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002505e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025064:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c002506a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002506e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0025074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025078:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002507e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0025084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025088:	05 0c 01 00 00       	add    eax,0x10c
c002508d:	83 ec 08             	sub    esp,0x8
c0025090:	52                   	push   edx
c0025091:	50                   	push   eax
c0025092:	e8 b9 b5 fd ff       	call   c0000650 <strcpy>
c0025097:	83 c4 10             	add    esp,0x10
c002509a:	eb 64                	jmp    c0025100 <Process::Process(char const*, Process*, char**)+0x194>
c002509c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00250a4:	83 ec 0c             	sub    esp,0xc
c00250a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00250ab:	e8 ec 15 ff ff       	call   c001669c <malloc>
c00250b0:	83 c4 10             	add    esp,0x10
c00250b3:	89 c3                	mov    ebx,eax
c00250b5:	83 ec 08             	sub    esp,0x8
c00250b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00250bc:	53                   	push   ebx
c00250bd:	e8 72 27 ff ff       	call   c0017834 <VgaText::VgaText(char const*)>
c00250c2:	83 c4 10             	add    esp,0x10
c00250c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250c9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00250cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00250d9:	83 ec 0c             	sub    esp,0xc
c00250dc:	50                   	push   eax
c00250dd:	e8 00 20 ff ff       	call   c00170e2 <addToTerminalCycle(VgaText*)>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250e9:	05 0c 01 00 00       	add    eax,0x10c
c00250ee:	83 ec 08             	sub    esp,0x8
c00250f1:	68 fd 34 03 c0       	push   0xc00334fd
c00250f6:	50                   	push   eax
c00250f7:	e8 54 b5 fd ff       	call   c0000650 <strcpy>
c00250fc:	83 c4 10             	add    esp,0x10
c00250ff:	90                   	nop
c0025100:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025104:	83 c0 0c             	add    eax,0xc
c0025107:	83 ec 08             	sub    esp,0x8
c002510a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002510e:	50                   	push   eax
c002510f:	e8 3c b5 fd ff       	call   c0000650 <strcpy>
c0025114:	83 c4 10             	add    esp,0x10
c0025117:	83 ec 08             	sub    esp,0x8
c002511a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002511e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025122:	e8 d9 fd ff ff       	call   c0024f00 <Process::addArgs(char**)>
c0025127:	83 c4 10             	add    esp,0x10
c002512a:	83 ec 08             	sub    esp,0x8
c002512d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025135:	e8 1f ed ff ff       	call   c0023e59 <Thr::loadProgramIntoMemory(Process*, char const*)>
c002513a:	83 c4 10             	add    esp,0x10
c002513d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025141:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025145:	83 f0 01             	xor    eax,0x1
c0025148:	88 c2                	mov    dl,al
c002514a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002514e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0025154:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025159:	83 ec 04             	sub    esp,0x4
c002515c:	50                   	push   eax
c002515d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025161:	68 54 35 03 c0       	push   0xc0033554
c0025166:	e8 67 43 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002516b:	83 c4 10             	add    esp,0x10
c002516e:	90                   	nop
c002516f:	83 c4 14             	add    esp,0x14
c0025172:	5b                   	pop    ebx
c0025173:	5e                   	pop    esi
c0025174:	c3                   	ret    
c0025175:	90                   	nop
c0025176:	66 90                	xchg   ax,ax

c0025178 <Process::Process(bool, char const*, Process*, char**)>:
c0025178:	56                   	push   esi
c0025179:	53                   	push   ebx
c002517a:	83 ec 24             	sub    esp,0x24
c002517d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0025181:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0025185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025189:	05 0c 02 00 00       	add    eax,0x20c
c002518e:	bb 07 00 00 00       	mov    ebx,0x7
c0025193:	89 c6                	mov    esi,eax
c0025195:	8d 76 00             	lea    esi,[esi+0x0]
c0025198:	85 db                	test   ebx,ebx
c002519a:	78 14                	js     c00251b0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c002519c:	83 ec 0c             	sub    esp,0xc
c002519f:	56                   	push   esi
c00251a0:	e8 f3 a2 00 00       	call   c002f498 <ThreadControlBlock::ThreadControlBlock()>
c00251a5:	83 c4 10             	add    esp,0x10
c00251a8:	83 c6 5f             	add    esi,0x5f
c00251ab:	83 eb 01             	sub    ebx,0x1
c00251ae:	eb e8                	jmp    c0025198 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00251b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251b4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00251bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251bf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00251c6:	83 ec 0c             	sub    esp,0xc
c00251c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251cd:	e8 9e b1 ff ff       	call   c0020370 <KeNewProcessEnv(Process*)>
c00251d2:	83 c4 10             	add    esp,0x10
c00251d5:	89 c2                	mov    edx,eax
c00251d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251db:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00251e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251e5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00251ee:	a1 80 4b 03 c0       	mov    eax,ds:0xc0034b80
c00251f3:	8d 50 01             	lea    edx,[eax+0x1]
c00251f6:	89 15 80 4b 03 c0    	mov    DWORD PTR ds:0xc0034b80,edx
c00251fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025200:	89 02                	mov    DWORD PTR [edx],eax
c0025202:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c002520a:	83 ec 0c             	sub    esp,0xc
c002520d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0025211:	e8 86 14 ff ff       	call   c001669c <malloc>
c0025216:	83 c4 10             	add    esp,0x10
c0025219:	89 c3                	mov    ebx,eax
c002521b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0025220:	83 ec 08             	sub    esp,0x8
c0025223:	50                   	push   eax
c0025224:	53                   	push   ebx
c0025225:	e8 f0 39 ff ff       	call   c0018c1a <VAS::VAS(bool)>
c002522a:	83 c4 10             	add    esp,0x10
c002522d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025231:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0025237:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002523b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025245:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025249:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002524d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0025253:	e8 6b bb ff ff       	call   c0020dc3 <KeInitSignals()>
c0025258:	89 c2                	mov    edx,eax
c002525a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002525e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0025264:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025268:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002526e:	85 c0                	test   eax,eax
c0025270:	74 42                	je     c00252b4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0025272:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025276:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002527c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025282:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025286:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c002528c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025290:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025296:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c002529c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00252a0:	05 0c 01 00 00       	add    eax,0x10c
c00252a5:	83 ec 08             	sub    esp,0x8
c00252a8:	52                   	push   edx
c00252a9:	50                   	push   eax
c00252aa:	e8 a1 b3 fd ff       	call   c0000650 <strcpy>
c00252af:	83 c4 10             	add    esp,0x10
c00252b2:	eb 64                	jmp    c0025318 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00252b4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00252bc:	83 ec 0c             	sub    esp,0xc
c00252bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00252c3:	e8 d4 13 ff ff       	call   c001669c <malloc>
c00252c8:	83 c4 10             	add    esp,0x10
c00252cb:	89 c3                	mov    ebx,eax
c00252cd:	83 ec 08             	sub    esp,0x8
c00252d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00252d4:	53                   	push   ebx
c00252d5:	e8 5a 25 ff ff       	call   c0017834 <VgaText::VgaText(char const*)>
c00252da:	83 c4 10             	add    esp,0x10
c00252dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00252e1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00252e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00252eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00252f1:	83 ec 0c             	sub    esp,0xc
c00252f4:	50                   	push   eax
c00252f5:	e8 e8 1d ff ff       	call   c00170e2 <addToTerminalCycle(VgaText*)>
c00252fa:	83 c4 10             	add    esp,0x10
c00252fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025301:	05 0c 01 00 00       	add    eax,0x10c
c0025306:	83 ec 08             	sub    esp,0x8
c0025309:	68 fd 34 03 c0       	push   0xc00334fd
c002530e:	50                   	push   eax
c002530f:	e8 3c b3 fd ff       	call   c0000650 <strcpy>
c0025314:	83 c4 10             	add    esp,0x10
c0025317:	90                   	nop
c0025318:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002531c:	83 c0 0c             	add    eax,0xc
c002531f:	83 ec 08             	sub    esp,0x8
c0025322:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025326:	50                   	push   eax
c0025327:	e8 24 b3 fd ff       	call   c0000650 <strcpy>
c002532c:	83 c4 10             	add    esp,0x10
c002532f:	83 ec 08             	sub    esp,0x8
c0025332:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025336:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002533a:	e8 c1 fb ff ff       	call   c0024f00 <Process::addArgs(char**)>
c002533f:	83 c4 10             	add    esp,0x10
c0025342:	90                   	nop
c0025343:	83 c4 24             	add    esp,0x24
c0025346:	5b                   	pop    ebx
c0025347:	5e                   	pop    esi
c0025348:	c3                   	ret    
c0025349:	8d 76 00             	lea    esi,[esi+0x0]

c002534c <taskStartupFunction>:
c002534c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025351:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0025354:	c3                   	ret    
c0025355:	8d 76 00             	lea    esi,[esi+0x0]

c0025358 <KeDisablePreemption()>:
c0025358:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c002535d:	85 c0                	test   eax,eax
c002535f:	75 13                	jne    c0025374 <KeDisablePreemption()+0x1c>
c0025361:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0025367:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c002536e:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0025374:	83 c0 01             	add    eax,0x1
c0025377:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002537c:	c3                   	ret    
c002537d:	8d 76 00             	lea    esi,[esi+0x0]

c0025380 <KeRestorePreemption()>:
c0025380:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0025385:	83 e8 01             	sub    eax,0x1
c0025388:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002538d:	75 0d                	jne    c002539c <KeRestorePreemption()+0x1c>
c002538f:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0025394:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0025399:	8d 76 00             	lea    esi,[esi+0x0]
c002539c:	c3                   	ret    
c002539d:	90                   	nop
c002539e:	66 90                	xchg   ax,ax

c00253a0 <Process::createThread(void (*)(void*), void*, int)>:
c00253a0:	57                   	push   edi
c00253a1:	31 c9                	xor    ecx,ecx
c00253a3:	56                   	push   esi
c00253a4:	53                   	push   ebx
c00253a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253a9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00253b0:	89 f2                	mov    edx,esi
c00253b2:	66 90                	xchg   ax,ax
c00253b4:	0f b7 c2             	movzx  eax,dx
c00253b7:	80 e2 01             	and    dl,0x1
c00253ba:	74 14                	je     c00253d0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00253bc:	d1 f8                	sar    eax,1
c00253be:	83 c1 01             	add    ecx,0x1
c00253c1:	83 f9 10             	cmp    ecx,0x10
c00253c4:	89 c2                	mov    edx,eax
c00253c6:	75 ec                	jne    c00253b4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00253c8:	31 db                	xor    ebx,ebx
c00253ca:	89 d8                	mov    eax,ebx
c00253cc:	5b                   	pop    ebx
c00253cd:	5e                   	pop    esi
c00253ce:	5f                   	pop    edi
c00253cf:	c3                   	ret    
c00253d0:	b8 01 00 00 00       	mov    eax,0x1
c00253d5:	d3 e0                	shl    eax,cl
c00253d7:	09 c6                	or     esi,eax
c00253d9:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00253e0:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00253e3:	c1 e0 05             	shl    eax,0x5
c00253e6:	29 c8                	sub    eax,ecx
c00253e8:	01 d8                	add    eax,ebx
c00253ea:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00253f1:	75 0d                	jne    c0025400 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00253f3:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00253fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025400:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025406:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0025409:	83 ec 0c             	sub    esp,0xc
c002540c:	c1 e6 05             	shl    esi,0x5
c002540f:	29 ce                	sub    esi,ecx
c0025411:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0025414:	8d 04 33             	lea    eax,[ebx+esi*1]
c0025417:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c002541d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0025423:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0025429:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0025430:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0025436:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002543a:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0025440:	89 ca                	mov    edx,ecx
c0025442:	f7 da                	neg    edx
c0025444:	c1 e2 15             	shl    edx,0x15
c0025447:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c002544d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0025453:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0025457:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0025461:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0025467:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002546b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0025471:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c002547b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0025485:	68 00 01 00 00       	push   0x100
c002548a:	e8 0d 12 ff ff       	call   c001669c <malloc>
c002548f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0025492:	58                   	pop    eax
c0025493:	5a                   	pop    edx
c0025494:	53                   	push   ebx
c0025495:	68 ec 01 04 c0       	push   0xc00401ec
c002549a:	e8 91 9d 00 00       	call   c002f230 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002549f:	83 c4 10             	add    esp,0x10
c00254a2:	89 d8                	mov    eax,ebx
c00254a4:	5b                   	pop    ebx
c00254a5:	5e                   	pop    esi
c00254a6:	5f                   	pop    edi
c00254a7:	c3                   	ret    

c00254a8 <Process::createUserThread()>:
c00254a8:	83 ec 0c             	sub    esp,0xc
c00254ab:	68 80 00 00 00       	push   0x80
c00254b0:	6a 00                	push   0x0
c00254b2:	68 f8 4d 02 c0       	push   0xc0024df8
c00254b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00254bb:	50                   	push   eax
c00254bc:	e8 df fe ff ff       	call   c00253a0 <Process::createThread(void (*)(void*), void*, int)>
c00254c1:	83 c4 1c             	add    esp,0x1c
c00254c4:	c3                   	ret    
c00254c5:	8d 76 00             	lea    esi,[esi+0x0]

c00254c8 <setupMultitasking(void (*)())>:
c00254c8:	56                   	push   esi
c00254c9:	53                   	push   ebx
c00254ca:	83 ec 04             	sub    esp,0x4
c00254cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00254d1:	eb 11                	jmp    c00254e4 <setupMultitasking(void (*)())+0x1c>
c00254d3:	90                   	nop
c00254d4:	83 ec 0c             	sub    esp,0xc
c00254d7:	68 ec 01 04 c0       	push   0xc00401ec
c00254dc:	e8 93 9c 00 00       	call   c002f174 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00254e1:	83 c4 10             	add    esp,0x10
c00254e4:	83 ec 0c             	sub    esp,0xc
c00254e7:	68 ec 01 04 c0       	push   0xc00401ec
c00254ec:	e8 5f 9c 00 00       	call   c002f150 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00254f1:	83 c4 10             	add    esp,0x10
c00254f4:	84 c0                	test   al,al
c00254f6:	74 dc                	je     c00254d4 <setupMultitasking(void (*)())+0xc>
c00254f8:	83 ec 0c             	sub    esp,0xc
c00254fb:	68 24 07 00 00       	push   0x724
c0025500:	e8 97 11 ff ff       	call   c001669c <malloc>
c0025505:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002550c:	6a 00                	push   0x0
c002550e:	68 01 35 03 c0       	push   0xc0033501
c0025513:	6a 01                	push   0x1
c0025515:	50                   	push   eax
c0025516:	89 c3                	mov    ebx,eax
c0025518:	e8 5b fc ff ff       	call   c0025178 <Process::Process(bool, char const*, Process*, char**)>
c002551d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0025523:	83 c4 14             	add    esp,0x14
c0025526:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c002552c:	50                   	push   eax
c002552d:	e8 05 1e ff ff       	call   c0017337 <setActiveTerminal(VgaText*)>
c0025532:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0025539:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0025543:	83 c8 01             	or     eax,0x1
c0025546:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c002554d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025553:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0025556:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025560:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0025566:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025570:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0025576:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0025580:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c002558a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025590:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025596:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00255a0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00255aa:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00255b1:	e8 e6 10 ff ff       	call   c001669c <malloc>
c00255b6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00255bc:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00255c2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00255c8:	5a                   	pop    edx
c00255c9:	59                   	pop    ecx
c00255ca:	68 fd 34 03 c0       	push   0xc00334fd
c00255cf:	50                   	push   eax
c00255d0:	e8 7b b0 fd ff       	call   c0000650 <strcpy>
c00255d5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00255dc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00255e0:	83 c4 14             	add    esp,0x14
c00255e3:	5b                   	pop    ebx
c00255e4:	5e                   	pop    esi
c00255e5:	e9 7f ac fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00255ea:	66 90                	xchg   ax,ax

c00255ec <schedule()>:
c00255ec:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c00255f2:	85 d2                	test   edx,edx
c00255f4:	74 0e                	je     c0025604 <schedule()+0x18>
c00255f6:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0025600:	c3                   	ret    
c0025601:	8d 76 00             	lea    esi,[esi+0x0]
c0025604:	53                   	push   ebx
c0025605:	83 ec 14             	sub    esp,0x14
c0025608:	68 ec 01 04 c0       	push   0xc00401ec
c002560d:	e8 3e 9b 00 00       	call   c002f150 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025612:	83 c4 10             	add    esp,0x10
c0025615:	84 c0                	test   al,al
c0025617:	75 3f                	jne    c0025658 <schedule()+0x6c>
c0025619:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002561e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0025621:	83 fa 01             	cmp    edx,0x1
c0025624:	74 3a                	je     c0025660 <schedule()+0x74>
c0025626:	66 90                	xchg   ax,ax
c0025628:	83 ec 0c             	sub    esp,0xc
c002562b:	68 ec 01 04 c0       	push   0xc00401ec
c0025630:	e8 37 9b 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025635:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c002563c:	89 c3                	mov    ebx,eax
c002563e:	e8 31 9b 00 00       	call   c002f174 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025643:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c002564a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002564d:	e8 fe f7 ff ff       	call   c0024e50 <switchToThread(ThreadControlBlock*)>
c0025652:	83 c4 10             	add    esp,0x10
c0025655:	8d 76 00             	lea    esi,[esi+0x0]
c0025658:	83 c4 08             	add    esp,0x8
c002565b:	5b                   	pop    ebx
c002565c:	c3                   	ret    
c002565d:	8d 76 00             	lea    esi,[esi+0x0]
c0025660:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0025667:	83 ec 08             	sub    esp,0x8
c002566a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002566f:	50                   	push   eax
c0025670:	68 ec 01 04 c0       	push   0xc00401ec
c0025675:	e8 b6 9b 00 00       	call   c002f230 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002567a:	83 c4 10             	add    esp,0x10
c002567d:	eb a9                	jmp    c0025628 <schedule()+0x3c>
c002567f:	90                   	nop

c0025680 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025680:	83 ec 0c             	sub    esp,0xc
c0025683:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025688:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002568c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002568f:	e8 58 ff ff ff       	call   c00255ec <schedule()>
c0025694:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025699:	83 e8 01             	sub    eax,0x1
c002569c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256a1:	75 01                	jne    c00256a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00256a3:	fb                   	sti    
c00256a4:	83 c4 0c             	add    esp,0xc
c00256a7:	c3                   	ret    

c00256a8 <blockTask(TaskState)>:
c00256a8:	83 ec 0c             	sub    esp,0xc
c00256ab:	fa                   	cli    
c00256ac:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00256b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00256b5:	83 c0 01             	add    eax,0x1
c00256b8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00256c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00256c5:	e8 22 ff ff ff       	call   c00255ec <schedule()>
c00256ca:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00256cf:	83 e8 01             	sub    eax,0x1
c00256d2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256d7:	75 03                	jne    c00256dc <blockTask(TaskState)+0x34>
c00256d9:	fb                   	sti    
c00256da:	66 90                	xchg   ax,ax
c00256dc:	83 c4 0c             	add    esp,0xc
c00256df:	c3                   	ret    

c00256e0 <waitTask(int, int*, int)>:
c00256e0:	83 ec 18             	sub    esp,0x18
c00256e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00256e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00256ec:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00256ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00256f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00256f8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00256fb:	6a 07                	push   0x7
c00256fd:	e8 a6 ff ff ff       	call   c00256a8 <blockTask(TaskState)>
c0025702:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025707:	83 c4 10             	add    esp,0x10
c002570a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c002570d:	85 d2                	test   edx,edx
c002570f:	74 0b                	je     c002571c <waitTask(int, int*, int)+0x3c>
c0025711:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0025714:	89 02                	mov    DWORD PTR [edx],eax
c0025716:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002571b:	90                   	nop
c002571c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c002571f:	83 c4 0c             	add    esp,0xc
c0025722:	c3                   	ret    
c0025723:	90                   	nop

c0025724 <milliTenthSleepUntil(unsigned int)>:
c0025724:	83 ec 0c             	sub    esp,0xc
c0025727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572b:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c0025731:	76 05                	jbe    c0025738 <milliTenthSleepUntil(unsigned int)+0x14>
c0025733:	90                   	nop
c0025734:	83 c4 0c             	add    esp,0xc
c0025737:	c3                   	ret    
c0025738:	fa                   	cli    
c0025739:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002573f:	83 ec 08             	sub    esp,0x8
c0025742:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025748:	83 c2 01             	add    edx,0x1
c002574b:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025751:	83 c1 01             	add    ecx,0x1
c0025754:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002575a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025760:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0025763:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025768:	50                   	push   eax
c0025769:	68 e0 01 04 c0       	push   0xc00401e0
c002576e:	e8 bd 9a 00 00       	call   c002f230 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025773:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c002577a:	e8 29 ff ff ff       	call   c00256a8 <blockTask(TaskState)>
c002577f:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025784:	83 c4 10             	add    esp,0x10
c0025787:	83 e8 01             	sub    eax,0x1
c002578a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002578f:	85 c0                	test   eax,eax
c0025791:	75 09                	jne    c002579c <milliTenthSleepUntil(unsigned int)+0x78>
c0025793:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025798:	85 c0                	test   eax,eax
c002579a:	75 14                	jne    c00257b0 <milliTenthSleepUntil(unsigned int)+0x8c>
c002579c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00257a1:	83 e8 01             	sub    eax,0x1
c00257a4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00257a9:	75 89                	jne    c0025734 <milliTenthSleepUntil(unsigned int)+0x10>
c00257ab:	fb                   	sti    
c00257ac:	83 c4 0c             	add    esp,0xc
c00257af:	c3                   	ret    
c00257b0:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00257ba:	e8 2d fe ff ff       	call   c00255ec <schedule()>
c00257bf:	eb db                	jmp    c002579c <milliTenthSleepUntil(unsigned int)+0x78>
c00257c1:	8d 76 00             	lea    esi,[esi+0x0]

c00257c4 <milliTenthSleep(unsigned int)>:
c00257c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00257c8:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c00257cd:	01 c2                	add    edx,eax
c00257cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00257d3:	e9 4c ff ff ff       	jmp    c0025724 <milliTenthSleepUntil(unsigned int)>

c00257d8 <sleep(unsigned int)>:
c00257d8:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00257e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00257e4:	eb de                	jmp    c00257c4 <milliTenthSleep(unsigned int)>
c00257e6:	66 90                	xchg   ax,ax

c00257e8 <taskReturned>:
c00257e8:	83 ec 18             	sub    esp,0x18
c00257eb:	68 80 35 03 c0       	push   0xc0033580
c00257f0:	e8 a1 ad ff ff       	call   c0020596 <KePanic(char const*)>
c00257f5:	83 c4 10             	add    esp,0x10
c00257f8:	83 ec 0c             	sub    esp,0xc
c00257fb:	6a 02                	push   0x2
c00257fd:	e8 a6 fe ff ff       	call   c00256a8 <blockTask(TaskState)>
c0025802:	fa                   	cli    
c0025803:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025808:	83 c0 01             	add    eax,0x1
c002580b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025810:	e8 d7 fd ff ff       	call   c00255ec <schedule()>
c0025815:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002581a:	83 c4 10             	add    esp,0x10
c002581d:	83 e8 01             	sub    eax,0x1
c0025820:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025825:	85 c0                	test   eax,eax
c0025827:	75 cf                	jne    c00257f8 <taskReturned+0x10>
c0025829:	fb                   	sti    
c002582a:	eb cc                	jmp    c00257f8 <taskReturned+0x10>

c002582c <Thr::processFromPID(int)>:
c002582c:	57                   	push   edi
c002582d:	56                   	push   esi
c002582e:	53                   	push   ebx
c002582f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025833:	fa                   	cli    
c0025834:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c002583a:	83 ec 0c             	sub    esp,0xc
c002583d:	68 ec 01 04 c0       	push   0xc00401ec
c0025842:	83 c1 01             	add    ecx,0x1
c0025845:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c002584b:	e8 1c 99 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025850:	83 c4 10             	add    esp,0x10
c0025853:	89 c7                	mov    edi,eax
c0025855:	eb 15                	jmp    c002586c <Thr::processFromPID(int)+0x40>
c0025857:	90                   	nop
c0025858:	83 ec 0c             	sub    esp,0xc
c002585b:	68 ec 01 04 c0       	push   0xc00401ec
c0025860:	e8 07 99 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025865:	83 c4 10             	add    esp,0x10
c0025868:	39 f8                	cmp    eax,edi
c002586a:	74 50                	je     c00258bc <Thr::processFromPID(int)+0x90>
c002586c:	83 ec 0c             	sub    esp,0xc
c002586f:	68 ec 01 04 c0       	push   0xc00401ec
c0025874:	e8 f3 98 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025879:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025880:	89 c3                	mov    ebx,eax
c0025882:	e8 ed 98 00 00       	call   c002f174 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025887:	58                   	pop    eax
c0025888:	5a                   	pop    edx
c0025889:	53                   	push   ebx
c002588a:	68 ec 01 04 c0       	push   0xc00401ec
c002588f:	e8 9c 99 00 00       	call   c002f230 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025894:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025897:	83 c4 10             	add    esp,0x10
c002589a:	39 30                	cmp    DWORD PTR [eax],esi
c002589c:	75 ba                	jne    c0025858 <Thr::processFromPID(int)+0x2c>
c002589e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258a3:	83 e8 01             	sub    eax,0x1
c00258a6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00258ab:	74 0b                	je     c00258b8 <Thr::processFromPID(int)+0x8c>
c00258ad:	8d 76 00             	lea    esi,[esi+0x0]
c00258b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258b3:	90                   	nop
c00258b4:	5b                   	pop    ebx
c00258b5:	5e                   	pop    esi
c00258b6:	5f                   	pop    edi
c00258b7:	c3                   	ret    
c00258b8:	fb                   	sti    
c00258b9:	eb f5                	jmp    c00258b0 <Thr::processFromPID(int)+0x84>
c00258bb:	90                   	nop
c00258bc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258c1:	8d 50 ff             	lea    edx,[eax-0x1]
c00258c4:	31 c0                	xor    eax,eax
c00258c6:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00258cc:	85 d2                	test   edx,edx
c00258ce:	75 e4                	jne    c00258b4 <Thr::processFromPID(int)+0x88>
c00258d0:	fb                   	sti    
c00258d1:	5b                   	pop    ebx
c00258d2:	5e                   	pop    esi
c00258d3:	5f                   	pop    edi
c00258d4:	c3                   	ret    
c00258d5:	8d 76 00             	lea    esi,[esi+0x0]

c00258d8 <unblockTask(ThreadControlBlock*)>:
c00258d8:	53                   	push   ebx
c00258d9:	83 ec 08             	sub    esp,0x8
c00258dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00258e0:	fa                   	cli    
c00258e1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258e6:	83 c0 01             	add    eax,0x1
c00258e9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00258ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00258f1:	85 c0                	test   eax,eax
c00258f3:	74 67                	je     c002595c <unblockTask(ThreadControlBlock*)+0x84>
c00258f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00258f8:	83 f8 01             	cmp    eax,0x1
c00258fb:	74 37                	je     c0025934 <unblockTask(ThreadControlBlock*)+0x5c>
c00258fd:	83 ec 0c             	sub    esp,0xc
c0025900:	68 ec 01 04 c0       	push   0xc00401ec
c0025905:	e8 62 98 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002590a:	83 c4 10             	add    esp,0x10
c002590d:	85 c0                	test   eax,eax
c002590f:	75 1b                	jne    c002592c <unblockTask(ThreadControlBlock*)+0x54>
c0025911:	eb 5d                	jmp    c0025970 <unblockTask(ThreadControlBlock*)+0x98>
c0025913:	90                   	nop
c0025914:	83 ec 08             	sub    esp,0x8
c0025917:	50                   	push   eax
c0025918:	68 ec 01 04 c0       	push   0xc00401ec
c002591d:	e8 6a 9b 00 00       	call   c002f48c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0025922:	83 c4 10             	add    esp,0x10
c0025925:	85 c0                	test   eax,eax
c0025927:	74 47                	je     c0025970 <unblockTask(ThreadControlBlock*)+0x98>
c0025929:	8d 76 00             	lea    esi,[esi+0x0]
c002592c:	39 c3                	cmp    ebx,eax
c002592e:	75 e4                	jne    c0025914 <unblockTask(ThreadControlBlock*)+0x3c>
c0025930:	eb 12                	jmp    c0025944 <unblockTask(ThreadControlBlock*)+0x6c>
c0025932:	66 90                	xchg   ax,ax
c0025934:	83 ec 0c             	sub    esp,0xc
c0025937:	68 1f 35 03 c0       	push   0xc003351f
c002593c:	e8 91 3b ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0025941:	83 c4 10             	add    esp,0x10
c0025944:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025949:	83 e8 01             	sub    eax,0x1
c002594c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025951:	75 01                	jne    c0025954 <unblockTask(ThreadControlBlock*)+0x7c>
c0025953:	fb                   	sti    
c0025954:	83 c4 08             	add    esp,0x8
c0025957:	5b                   	pop    ebx
c0025958:	c3                   	ret    
c0025959:	8d 76 00             	lea    esi,[esi+0x0]
c002595c:	83 ec 0c             	sub    esp,0xc
c002595f:	68 08 35 03 c0       	push   0xc0033508
c0025964:	e8 69 3b ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0025969:	83 c4 10             	add    esp,0x10
c002596c:	eb d6                	jmp    c0025944 <unblockTask(ThreadControlBlock*)+0x6c>
c002596e:	66 90                	xchg   ax,ax
c0025970:	83 ec 08             	sub    esp,0x8
c0025973:	53                   	push   ebx
c0025974:	68 ec 01 04 c0       	push   0xc00401ec
c0025979:	e8 b2 98 00 00       	call   c002f230 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002597e:	83 c4 10             	add    esp,0x10
c0025981:	eb c1                	jmp    c0025944 <unblockTask(ThreadControlBlock*)+0x6c>
c0025983:	90                   	nop

c0025984 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025984:	55                   	push   ebp
c0025985:	57                   	push   edi
c0025986:	56                   	push   esi
c0025987:	53                   	push   ebx
c0025988:	83 ec 1c             	sub    esp,0x1c
c002598b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002598f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025992:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025998:	85 ed                	test   ebp,ebp
c002599a:	7e 28                	jle    c00259c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c002599c:	31 f6                	xor    esi,esi
c002599e:	66 90                	xchg   ax,ax
c00259a0:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00259a7:	83 ec 0c             	sub    esp,0xc
c00259aa:	83 c6 01             	add    esi,0x1
c00259ad:	57                   	push   edi
c00259ae:	e8 f9 0c ff ff       	call   c00166ac <free>
c00259b3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00259b6:	83 c4 10             	add    esp,0x10
c00259b9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00259bf:	7f df                	jg     c00259a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00259c1:	8d 76 00             	lea    esi,[esi+0x0]
c00259c4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00259ce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00259d3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00259d6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00259d9:	d3 c0                	rol    eax,cl
c00259db:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00259e2:	21 c8                	and    eax,ecx
c00259e4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00259eb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00259ee:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00259f6:	89 f7                	mov    edi,esi
c00259f8:	0f 85 72 01 00 00    	jne    c0025b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00259fe:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0025a04:	85 ed                	test   ebp,ebp
c0025a06:	74 1c                	je     c0025a24 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025a08:	83 ec 0c             	sub    esp,0xc
c0025a0b:	55                   	push   ebp
c0025a0c:	e8 7b a8 ff ff       	call   c002028c <EnvVarContainer::~EnvVarContainer()>
c0025a11:	59                   	pop    ecx
c0025a12:	5e                   	pop    esi
c0025a13:	6a 0c                	push   0xc
c0025a15:	55                   	push   ebp
c0025a16:	e8 b9 39 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c0025a1b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025a1e:	83 c4 10             	add    esp,0x10
c0025a21:	89 f7                	mov    edi,esi
c0025a23:	90                   	nop
c0025a24:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025a2a:	85 c0                	test   eax,eax
c0025a2c:	0f 84 b2 00 00 00    	je     c0025ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025a32:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0025a35:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025a39:	31 c9                	xor    ecx,ecx
c0025a3b:	eb 17                	jmp    c0025a54 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0025a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0025a40:	83 c1 01             	add    ecx,0x1
c0025a43:	83 f9 10             	cmp    ecx,0x10
c0025a46:	0f 84 98 00 00 00    	je     c0025ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025a4c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025a52:	66 90                	xchg   ax,ax
c0025a54:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0025a5b:	d3 fa                	sar    edx,cl
c0025a5d:	80 e2 01             	and    dl,0x1
c0025a60:	74 de                	je     c0025a40 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025a62:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0025a65:	c1 e2 05             	shl    edx,0x5
c0025a68:	29 ca                	sub    edx,ecx
c0025a6a:	01 d0                	add    eax,edx
c0025a6c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025a72:	83 fd 07             	cmp    ebp,0x7
c0025a75:	75 c9                	jne    c0025a40 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025a77:	05 40 02 00 00       	add    eax,0x240
c0025a7c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0025a7f:	83 fd ff             	cmp    ebp,0xffffffff
c0025a82:	0f 8c f0 00 00 00    	jl     c0025b78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025a88:	0f 84 ae 01 00 00    	je     c0025c3c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025a8e:	85 ed                	test   ebp,ebp
c0025a90:	0f 84 92 01 00 00    	je     c0025c28 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025a96:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025a98:	75 a6                	jne    c0025a40 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025a9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025a9e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025aa4:	01 d0                	add    eax,edx
c0025aa6:	66 90                	xchg   ax,ax
c0025aa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025aac:	83 ec 0c             	sub    esp,0xc
c0025aaf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025ab5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025ab8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025abe:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025ac5:	50                   	push   eax
c0025ac6:	e8 0d fe ff ff       	call   c00258d8 <unblockTask(ThreadControlBlock*)>
c0025acb:	83 c4 10             	add    esp,0x10
c0025ace:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025ad1:	89 f7                	mov    edi,esi
c0025ad3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025ad7:	83 c1 01             	add    ecx,0x1
c0025ada:	83 f9 10             	cmp    ecx,0x10
c0025add:	0f 85 69 ff ff ff    	jne    c0025a4c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025ae3:	90                   	nop
c0025ae4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025aea:	85 c0                	test   eax,eax
c0025aec:	74 62                	je     c0025b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025aee:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025af4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025afa:	74 54                	je     c0025b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025afc:	83 ec 0c             	sub    esp,0xc
c0025aff:	68 ec 01 04 c0       	push   0xc00401ec
c0025b04:	e8 63 96 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025b09:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025b10:	89 c7                	mov    edi,eax
c0025b12:	e8 39 96 00 00       	call   c002f150 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025b17:	83 c4 10             	add    esp,0x10
c0025b1a:	84 c0                	test   al,al
c0025b1c:	0f 84 ce 00 00 00    	je     c0025bf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0025b22:	66 90                	xchg   ax,ax
c0025b24:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b27:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025b2d:	85 d2                	test   edx,edx
c0025b2f:	74 0f                	je     c0025b40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0025b31:	8b 02                	mov    eax,DWORD PTR [edx]
c0025b33:	83 ec 0c             	sub    esp,0xc
c0025b36:	52                   	push   edx
c0025b37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0025b3a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b3d:	83 c4 10             	add    esp,0x10
c0025b40:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0025b4a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0025b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0025b50:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025b56:	85 db                	test   ebx,ebx
c0025b58:	74 16                	je     c0025b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025b5a:	83 ec 0c             	sub    esp,0xc
c0025b5d:	53                   	push   ebx
c0025b5e:	e8 f5 2b ff ff       	call   c0018758 <VAS::~VAS()>
c0025b63:	58                   	pop    eax
c0025b64:	5a                   	pop    edx
c0025b65:	6a 14                	push   0x14
c0025b67:	53                   	push   ebx
c0025b68:	e8 67 38 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c0025b6d:	83 c4 10             	add    esp,0x10
c0025b70:	83 c4 1c             	add    esp,0x1c
c0025b73:	5b                   	pop    ebx
c0025b74:	5e                   	pop    esi
c0025b75:	5f                   	pop    edi
c0025b76:	5d                   	pop    ebp
c0025b77:	c3                   	ret    
c0025b78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025b7c:	83 ec 0c             	sub    esp,0xc
c0025b7f:	68 b4 35 03 c0       	push   0xc00335b4
c0025b84:	e8 0d aa ff ff       	call   c0020596 <KePanic(char const*)>
c0025b89:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025b8c:	83 c4 10             	add    esp,0x10
c0025b8f:	89 f7                	mov    edi,esi
c0025b91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025b95:	e9 a6 fe ff ff       	jmp    c0025a40 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025b9a:	66 90                	xchg   ax,ax
c0025b9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025ba2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025ba8:	75 1e                	jne    c0025bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025baa:	83 ec 0c             	sub    esp,0xc
c0025bad:	68 1c 36 03 c0       	push   0xc003361c
c0025bb2:	e8 1b 39 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0025bb7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025bbe:	e8 e5 fa ff ff       	call   c00256a8 <blockTask(TaskState)>
c0025bc3:	83 c4 10             	add    esp,0x10
c0025bc6:	66 90                	xchg   ax,ax
c0025bc8:	83 ec 08             	sub    esp,0x8
c0025bcb:	56                   	push   esi
c0025bcc:	68 ec 01 04 c0       	push   0xc00401ec
c0025bd1:	e8 5a 96 00 00       	call   c002f230 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025bd6:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025bdd:	e8 8a 95 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025be2:	83 c4 10             	add    esp,0x10
c0025be5:	39 f8                	cmp    eax,edi
c0025be7:	0f 84 37 ff ff ff    	je     c0025b24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025bed:	8d 76 00             	lea    esi,[esi+0x0]
c0025bf0:	83 ec 0c             	sub    esp,0xc
c0025bf3:	68 ec 01 04 c0       	push   0xc00401ec
c0025bf8:	e8 6f 95 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025bfd:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025c04:	89 c6                	mov    esi,eax
c0025c06:	e8 69 95 00 00       	call   c002f174 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025c0b:	83 c4 10             	add    esp,0x10
c0025c0e:	39 f3                	cmp    ebx,esi
c0025c10:	74 b6                	je     c0025bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025c12:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025c15:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025c18:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0025c1e:	75 a8                	jne    c0025bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025c20:	e9 77 ff ff ff       	jmp    c0025b9c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025c25:	8d 76 00             	lea    esi,[esi+0x0]
c0025c28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025c2c:	83 ec 0c             	sub    esp,0xc
c0025c2f:	68 e8 35 03 c0       	push   0xc00335e8
c0025c34:	e9 4b ff ff ff       	jmp    c0025b84 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025c39:	8d 76 00             	lea    esi,[esi+0x0]
c0025c3c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025c40:	8b 36                	mov    esi,DWORD PTR [esi]
c0025c42:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025c45:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025c48:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0025c4e:	01 d7                	add    edi,edx
c0025c50:	89 f8                	mov    eax,edi
c0025c52:	e9 51 fe ff ff       	jmp    c0025aa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025c57:	90                   	nop

c0025c58 <cleanerTaskFunction(void*)>:
c0025c58:	53                   	push   ebx
c0025c59:	83 ec 08             	sub    esp,0x8
c0025c5c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c61:	83 e8 01             	sub    eax,0x1
c0025c64:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c69:	75 01                	jne    c0025c6c <cleanerTaskFunction(void*)+0x14>
c0025c6b:	fb                   	sti    
c0025c6c:	fa                   	cli    
c0025c6d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c72:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025c79:	8d 50 01             	lea    edx,[eax+0x1]
c0025c7c:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025c82:	0f 84 c4 00 00 00    	je     c0025d4c <cleanerTaskFunction(void*)+0xf4>
c0025c88:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c8d:	85 c0                	test   eax,eax
c0025c8f:	75 03                	jne    c0025c94 <cleanerTaskFunction(void*)+0x3c>
c0025c91:	fb                   	sti    
c0025c92:	66 90                	xchg   ax,ax
c0025c94:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025c9b:	fa                   	cli    
c0025c9c:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025ca2:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025ca8:	83 c2 01             	add    edx,0x1
c0025cab:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025cb1:	83 c1 01             	add    ecx,0x1
c0025cb4:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025cba:	fa                   	cli    
c0025cbb:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025cc1:	83 c3 01             	add    ebx,0x1
c0025cc4:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025cca:	eb 28                	jmp    c0025cf4 <cleanerTaskFunction(void*)+0x9c>
c0025ccc:	83 ec 0c             	sub    esp,0xc
c0025ccf:	68 d4 01 04 c0       	push   0xc00401d4
c0025cd4:	e8 93 94 00 00       	call   c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025cd9:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025ce0:	89 c3                	mov    ebx,eax
c0025ce2:	e8 8d 94 00 00       	call   c002f174 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025ce7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025cea:	e8 95 fc ff ff       	call   c0025984 <cleanupTerminatedTask(ThreadControlBlock*)>
c0025cef:	83 c4 10             	add    esp,0x10
c0025cf2:	66 90                	xchg   ax,ax
c0025cf4:	83 ec 0c             	sub    esp,0xc
c0025cf7:	68 d4 01 04 c0       	push   0xc00401d4
c0025cfc:	e8 4f 94 00 00       	call   c002f150 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025d01:	83 c4 10             	add    esp,0x10
c0025d04:	84 c0                	test   al,al
c0025d06:	74 c4                	je     c0025ccc <cleanerTaskFunction(void*)+0x74>
c0025d08:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d0d:	83 e8 01             	sub    eax,0x1
c0025d10:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d15:	75 01                	jne    c0025d18 <cleanerTaskFunction(void*)+0xc0>
c0025d17:	fb                   	sti    
c0025d18:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025d1d:	83 e8 01             	sub    eax,0x1
c0025d20:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025d25:	0f 85 31 ff ff ff    	jne    c0025c5c <cleanerTaskFunction(void*)+0x4>
c0025d2b:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025d30:	85 c0                	test   eax,eax
c0025d32:	0f 84 24 ff ff ff    	je     c0025c5c <cleanerTaskFunction(void*)+0x4>
c0025d38:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025d42:	e8 a5 f8 ff ff       	call   c00255ec <schedule()>
c0025d47:	e9 10 ff ff ff       	jmp    c0025c5c <cleanerTaskFunction(void*)+0x4>
c0025d4c:	83 ec 0c             	sub    esp,0xc
c0025d4f:	6a 02                	push   0x2
c0025d51:	e8 2a f9 ff ff       	call   c0025680 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025d56:	83 c4 10             	add    esp,0x10
c0025d59:	e9 36 ff ff ff       	jmp    c0025c94 <cleanerTaskFunction(void*)+0x3c>
c0025d5e:	66 90                	xchg   ax,ax

c0025d60 <terminateTask(int)>:
c0025d60:	83 ec 14             	sub    esp,0x14
c0025d63:	fa                   	cli    
c0025d64:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025d6a:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025d70:	83 c2 01             	add    edx,0x1
c0025d73:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025d79:	83 c1 01             	add    ecx,0x1
c0025d7c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025d82:	fa                   	cli    
c0025d83:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025d8c:	83 c0 01             	add    eax,0x1
c0025d8f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025d99:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025d9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025da1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025da4:	50                   	push   eax
c0025da5:	68 d4 01 04 c0       	push   0xc00401d4
c0025daa:	e8 81 94 00 00       	call   c002f230 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025daf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025db4:	83 c4 10             	add    esp,0x10
c0025db7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025dbe:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025dc3:	85 c0                	test   eax,eax
c0025dc5:	74 65                	je     c0025e2c <terminateTask(int)+0xcc>
c0025dc7:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025dce:	83 ec 0c             	sub    esp,0xc
c0025dd1:	50                   	push   eax
c0025dd2:	e8 01 fb ff ff       	call   c00258d8 <unblockTask(ThreadControlBlock*)>
c0025dd7:	83 c4 10             	add    esp,0x10
c0025dda:	66 90                	xchg   ax,ax
c0025ddc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025de1:	83 e8 01             	sub    eax,0x1
c0025de4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025de9:	75 01                	jne    c0025dec <terminateTask(int)+0x8c>
c0025deb:	fb                   	sti    
c0025dec:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025df1:	83 e8 01             	sub    eax,0x1
c0025df4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025df9:	75 09                	jne    c0025e04 <terminateTask(int)+0xa4>
c0025dfb:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025e02:	75 3c                	jne    c0025e40 <terminateTask(int)+0xe0>
c0025e04:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e09:	83 e8 01             	sub    eax,0x1
c0025e0c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e11:	75 01                	jne    c0025e14 <terminateTask(int)+0xb4>
c0025e13:	fb                   	sti    
c0025e14:	fa                   	cli    
c0025e15:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e1a:	83 c0 01             	add    eax,0x1
c0025e1d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e22:	66 90                	xchg   ax,ax
c0025e24:	e8 c3 f7 ff ff       	call   c00255ec <schedule()>
c0025e29:	eb d9                	jmp    c0025e04 <terminateTask(int)+0xa4>
c0025e2b:	90                   	nop
c0025e2c:	83 ec 0c             	sub    esp,0xc
c0025e2f:	68 36 35 03 c0       	push   0xc0033536
c0025e34:	e8 99 36 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0025e39:	83 c4 10             	add    esp,0x10
c0025e3c:	eb 9e                	jmp    c0025ddc <terminateTask(int)+0x7c>
c0025e3e:	66 90                	xchg   ax,ax
c0025e40:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025e4a:	eb d8                	jmp    c0025e24 <terminateTask(int)+0xc4>

c0025e4c <Thr::terminateFromIRQ(int)>:
c0025e4c:	83 ec 18             	sub    esp,0x18
c0025e4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e53:	50                   	push   eax
c0025e54:	e8 07 ff ff ff       	call   c0025d60 <terminateTask(int)>
c0025e59:	8d 76 00             	lea    esi,[esi+0x0]

c0025e5c <__static_initialization_and_destruction_0(int, int)>:
c0025e5c:	83 ec 0c             	sub    esp,0xc
c0025e5f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025e64:	0f 85 8e 00 00 00    	jne    c0025ef8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025e6a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025e72:	0f 85 80 00 00 00    	jne    c0025ef8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025e78:	83 ec 0c             	sub    esp,0xc
c0025e7b:	68 ec 01 04 c0       	push   0xc00401ec
c0025e80:	e8 5f 96 00 00       	call   c002f4e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025e85:	83 c4 10             	add    esp,0x10
c0025e88:	83 ec 04             	sub    esp,0x4
c0025e8b:	68 78 42 03 c0       	push   0xc0034278
c0025e90:	68 ec 01 04 c0       	push   0xc00401ec
c0025e95:	68 94 f4 02 c0       	push   0xc002f494
c0025e9a:	e8 e5 34 ff ff       	call   c0019384 <__cxa_atexit>
c0025e9f:	83 c4 10             	add    esp,0x10
c0025ea2:	83 ec 0c             	sub    esp,0xc
c0025ea5:	68 e0 01 04 c0       	push   0xc00401e0
c0025eaa:	e8 35 96 00 00       	call   c002f4e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025eaf:	83 c4 10             	add    esp,0x10
c0025eb2:	83 ec 04             	sub    esp,0x4
c0025eb5:	68 78 42 03 c0       	push   0xc0034278
c0025eba:	68 e0 01 04 c0       	push   0xc00401e0
c0025ebf:	68 94 f4 02 c0       	push   0xc002f494
c0025ec4:	e8 bb 34 ff ff       	call   c0019384 <__cxa_atexit>
c0025ec9:	83 c4 10             	add    esp,0x10
c0025ecc:	83 ec 0c             	sub    esp,0xc
c0025ecf:	68 d4 01 04 c0       	push   0xc00401d4
c0025ed4:	e8 0b 96 00 00       	call   c002f4e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025ed9:	83 c4 10             	add    esp,0x10
c0025edc:	83 ec 04             	sub    esp,0x4
c0025edf:	68 78 42 03 c0       	push   0xc0034278
c0025ee4:	68 d4 01 04 c0       	push   0xc00401d4
c0025ee9:	68 94 f4 02 c0       	push   0xc002f494
c0025eee:	e8 91 34 ff ff       	call   c0019384 <__cxa_atexit>
c0025ef3:	83 c4 10             	add    esp,0x10
c0025ef6:	66 90                	xchg   ax,ax
c0025ef8:	90                   	nop
c0025ef9:	83 c4 0c             	add    esp,0xc
c0025efc:	c3                   	ret    
c0025efd:	8d 76 00             	lea    esi,[esi+0x0]

c0025f00 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025f00:	83 ec 0c             	sub    esp,0xc
c0025f03:	83 ec 08             	sub    esp,0x8
c0025f06:	68 ff ff 00 00       	push   0xffff
c0025f0b:	6a 01                	push   0x1
c0025f0d:	e8 4a ff ff ff       	call   c0025e5c <__static_initialization_and_destruction_0(int, int)>
c0025f12:	83 c4 10             	add    esp,0x10
c0025f15:	83 c4 0c             	add    esp,0xc
c0025f18:	c3                   	ret    

c0025f19 <Vm::inbv(unsigned short)>:
c0025f19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025f1d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025f22:	75 06                	jne    c0025f2a <Vm::inbv(unsigned short)+0x11>
c0025f24:	a0 30 02 04 c0       	mov    al,ds:0xc0040230
c0025f29:	c3                   	ret    
c0025f2a:	ec                   	in     al,dx
c0025f2b:	c3                   	ret    

c0025f2c <Vm::outbv(unsigned short, unsigned char)>:
c0025f2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025f30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025f34:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025f39:	75 25                	jne    c0025f60 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025f3b:	8b 0d 30 02 04 c0    	mov    ecx,DWORD PTR ds:0xc0040230
c0025f41:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025f47:	8d 51 01             	lea    edx,[ecx+0x1]
c0025f4a:	89 15 30 02 04 c0    	mov    DWORD PTR ds:0xc0040230,edx
c0025f50:	83 fa 20             	cmp    edx,0x20
c0025f53:	75 0c                	jne    c0025f61 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025f55:	c7 05 30 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0040230,0x1f
c0025f5f:	c3                   	ret    
c0025f60:	ee                   	out    dx,al
c0025f61:	c3                   	ret    

c0025f62 <Vm::realToLinear(unsigned short, unsigned short)>:
c0025f62:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f67:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f6c:	c1 e0 04             	shl    eax,0x4
c0025f6f:	01 d0                	add    eax,edx
c0025f71:	c3                   	ret    

c0025f72 <Vm::getSegment(unsigned int)>:
c0025f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025f76:	c1 e8 10             	shr    eax,0x10
c0025f79:	c3                   	ret    

c0025f7a <Vm::getOffset(unsigned int)>:
c0025f7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025f7e:	c3                   	ret    

c0025f7f <Vm::mainloop2()>:
c0025f7f:	83 ec 18             	sub    esp,0x18
c0025f82:	fa                   	cli    
c0025f83:	6a 02                	push   0x2
c0025f85:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025f8b:	c6 05 29 02 04 c0 01 	mov    BYTE PTR ds:0xc0040229,0x1
c0025f92:	e8 e9 f6 ff ff       	call   c0025680 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025f97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f9c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025fa0:	52                   	push   edx
c0025fa1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025fa5:	52                   	push   edx
c0025fa6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025faa:	52                   	push   edx
c0025fab:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025faf:	50                   	push   eax
c0025fb0:	e8 5a a2 fd ff       	call   c000020f <goToVM86>
c0025fb5:	83 c4 2c             	add    esp,0x2c
c0025fb8:	c3                   	ret    

c0025fb9 <Vm::mainVm8086Loop(void*)>:
c0025fb9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025fbe:	48                   	dec    eax
c0025fbf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025fc4:	75 01                	jne    c0025fc7 <Vm::mainVm8086Loop(void*)+0xe>
c0025fc6:	fb                   	sti    
c0025fc7:	eb b6                	jmp    c0025f7f <Vm::mainloop2()>

c0025fc9 <Vm::mainloop3(unsigned long)>:
c0025fc9:	83 ec 18             	sub    esp,0x18
c0025fcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fd0:	fa                   	cli    
c0025fd1:	6a 02                	push   0x2
c0025fd3:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025fd9:	c6 05 28 02 04 c0 01 	mov    BYTE PTR ds:0xc0040228,0x1
c0025fe0:	a3 24 02 04 c0       	mov    ds:0xc0040224,eax
c0025fe5:	e8 96 f6 ff ff       	call   c0025680 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025fea:	83 c4 1c             	add    esp,0x1c
c0025fed:	eb 90                	jmp    c0025f7f <Vm::mainloop2()>

c0025fef <Vm::initialise8086()>:
c0025fef:	83 ec 0c             	sub    esp,0xc
c0025ff2:	68 80 00 00 00       	push   0x80
c0025ff7:	6a 00                	push   0x0
c0025ff9:	68 b9 5f 02 c0       	push   0xc0025fb9
c0025ffe:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0026004:	e8 97 f3 ff ff       	call   c00253a0 <Process::createThread(void (*)(void*), void*, int)>
c0026009:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0026010:	68 10 01 00 00       	push   0x110
c0026015:	6a 00                	push   0x0
c0026017:	6a 00                	push   0x0
c0026019:	a3 2c 02 04 c0       	mov    ds:0xc004022c,eax
c002601e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026023:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0026029:	e8 a2 2a ff ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002602e:	83 c4 2c             	add    esp,0x2c
c0026031:	c3                   	ret    

c0026032 <Vm::resetConventionalMemory8086()>:
c0026032:	c3                   	ret    

c0026033 <Vm::finish8086()>:
c0026033:	53                   	push   ebx
c0026034:	83 ec 08             	sub    esp,0x8
c0026037:	fa                   	cli    
c0026038:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002603e:	80 3d 28 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040228,0x0
c0026045:	75 15                	jne    c002605c <Vm::finish8086()+0x29>
c0026047:	e8 a0 f5 ff ff       	call   c00255ec <schedule()>
c002604c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026051:	48                   	dec    eax
c0026052:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026057:	75 de                	jne    c0026037 <Vm::finish8086()+0x4>
c0026059:	fb                   	sti    
c002605a:	eb db                	jmp    c0026037 <Vm::finish8086()+0x4>
c002605c:	c6 05 28 02 04 c0 00 	mov    BYTE PTR ds:0xc0040228,0x0
c0026063:	83 ec 0c             	sub    esp,0xc
c0026066:	8b 1d 24 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040224
c002606c:	ff 35 2c 02 04 c0    	push   DWORD PTR ds:0xc004022c
c0026072:	e8 61 f8 ff ff       	call   c00258d8 <unblockTask(ThreadControlBlock*)>
c0026077:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002607c:	83 c4 10             	add    esp,0x10
c002607f:	8d 50 ff             	lea    edx,[eax-0x1]
c0026082:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0026088:	85 d2                	test   edx,edx
c002608a:	75 01                	jne    c002608d <Vm::finish8086()+0x5a>
c002608c:	fb                   	sti    
c002608d:	83 c4 08             	add    esp,0x8
c0026090:	89 d8                	mov    eax,ebx
c0026092:	5b                   	pop    ebx
c0026093:	c3                   	ret    

c0026094 <Vm::getOutput8086(unsigned char*)>:
c0026094:	57                   	push   edi
c0026095:	8b 0d 30 02 04 c0    	mov    ecx,DWORD PTR ds:0xc0040230
c002609b:	56                   	push   esi
c002609c:	be 40 02 04 c0       	mov    esi,0xc0040240
c00260a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00260a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00260a7:	5e                   	pop    esi
c00260a8:	a1 30 02 04 c0       	mov    eax,ds:0xc0040230
c00260ad:	c7 05 30 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040230,0x0
c00260b7:	5f                   	pop    edi
c00260b8:	c3                   	ret    

c00260b9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00260b9:	55                   	push   ebp
c00260ba:	57                   	push   edi
c00260bb:	56                   	push   esi
c00260bc:	53                   	push   ebx
c00260bd:	83 ec 2c             	sub    esp,0x2c
c00260c0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00260c4:	80 3d 20 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040220,0x0
c00260cb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00260cf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00260d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00260d7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00260db:	75 5d                	jne    c002613a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00260dd:	83 ec 0c             	sub    esp,0xc
c00260e0:	68 14 01 00 00       	push   0x114
c00260e5:	e8 b2 05 ff ff       	call   c001669c <malloc>
c00260ea:	83 c4 0c             	add    esp,0xc
c00260ed:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00260f3:	68 44 36 03 c0       	push   0xc0033644
c00260f8:	50                   	push   eax
c00260f9:	89 c7                	mov    edi,eax
c00260fb:	e8 ea 45 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0026100:	58                   	pop    eax
c0026101:	5a                   	pop    edx
c0026102:	6a 12                	push   0x12
c0026104:	57                   	push   edi
c0026105:	e8 fe 45 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c002610a:	8b 07                	mov    eax,DWORD PTR [edi]
c002610c:	59                   	pop    ecx
c002610d:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0026111:	51                   	push   ecx
c0026112:	6a 00                	push   0x0
c0026114:	6a 00                	push   0x0
c0026116:	68 00 00 11 00       	push   0x110000
c002611b:	57                   	push   edi
c002611c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c002611f:	83 c4 14             	add    esp,0x14
c0026122:	57                   	push   edi
c0026123:	e8 3e 46 ff ff       	call   c001a766 <File::close()>
c0026128:	8b 07                	mov    eax,DWORD PTR [edi]
c002612a:	89 3c 24             	mov    DWORD PTR [esp],edi
c002612d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0026130:	83 c4 10             	add    esp,0x10
c0026133:	c6 05 20 02 04 c0 01 	mov    BYTE PTR ds:0xc0040220,0x1
c002613a:	fa                   	cli    
c002613b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0026141:	80 3d 29 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040229,0x0
c0026148:	75 15                	jne    c002615f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa6>
c002614a:	e8 9d f4 ff ff       	call   c00255ec <schedule()>
c002614f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026154:	48                   	dec    eax
c0026155:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002615a:	75 de                	jne    c002613a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c002615c:	fb                   	sti    
c002615d:	eb db                	jmp    c002613a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c002615f:	c7 05 30 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040230,0x0
c0026169:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002616d:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0026172:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0026176:	0f b7 f6             	movzx  esi,si
c0026179:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c002617d:	0f b7 db             	movzx  ebx,bx
c0026180:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0026184:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0026188:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c002618c:	50                   	push   eax
c002618d:	6a 20                	push   0x20
c002618f:	6a 00                	push   0x0
c0026191:	68 40 02 04 c0       	push   0xc0040240
c0026196:	e8 55 a3 fd ff       	call   c00004f0 <memset>
c002619b:	5a                   	pop    edx
c002619c:	59                   	pop    ecx
c002619d:	56                   	push   esi
c002619e:	53                   	push   ebx
c002619f:	e8 be fd ff ff       	call   c0025f62 <Vm::realToLinear(unsigned short, unsigned short)>
c00261a4:	83 c4 10             	add    esp,0x10
c00261a7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00261ab:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00261af:	89 c7                	mov    edi,eax
c00261b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00261b3:	c6 05 29 02 04 c0 00 	mov    BYTE PTR ds:0xc0040229,0x0
c00261ba:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00261bf:	48                   	dec    eax
c00261c0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00261c5:	75 01                	jne    c00261c8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x10f>
c00261c7:	fb                   	sti    
c00261c8:	83 ec 0c             	sub    esp,0xc
c00261cb:	ff 35 2c 02 04 c0    	push   DWORD PTR ds:0xc004022c
c00261d1:	e8 02 f7 ff ff       	call   c00258d8 <unblockTask(ThreadControlBlock*)>
c00261d6:	83 c4 3c             	add    esp,0x3c
c00261d9:	b0 01                	mov    al,0x1
c00261db:	5b                   	pop    ebx
c00261dc:	5e                   	pop    esi
c00261dd:	5f                   	pop    edi
c00261de:	5d                   	pop    ebp
c00261df:	c3                   	ret    

c00261e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00261e0:	55                   	push   ebp
c00261e1:	57                   	push   edi
c00261e2:	56                   	push   esi
c00261e3:	53                   	push   ebx
c00261e4:	83 ec 2c             	sub    esp,0x2c
c00261e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00261eb:	80 3d 20 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040220,0x0
c00261f2:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00261f6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00261fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261fe:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0026202:	75 5d                	jne    c0026261 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0026204:	83 ec 0c             	sub    esp,0xc
c0026207:	68 14 01 00 00       	push   0x114
c002620c:	e8 8b 04 ff ff       	call   c001669c <malloc>
c0026211:	83 c4 0c             	add    esp,0xc
c0026214:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002621a:	68 44 36 03 c0       	push   0xc0033644
c002621f:	50                   	push   eax
c0026220:	89 c3                	mov    ebx,eax
c0026222:	e8 c3 44 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c0026227:	58                   	pop    eax
c0026228:	5a                   	pop    edx
c0026229:	6a 12                	push   0x12
c002622b:	53                   	push   ebx
c002622c:	e8 d7 44 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c0026231:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026233:	59                   	pop    ecx
c0026234:	8d 54 24 24          	lea    edx,[esp+0x24]
c0026238:	52                   	push   edx
c0026239:	6a 00                	push   0x0
c002623b:	6a 00                	push   0x0
c002623d:	68 00 00 11 00       	push   0x110000
c0026242:	53                   	push   ebx
c0026243:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0026246:	83 c4 14             	add    esp,0x14
c0026249:	53                   	push   ebx
c002624a:	e8 17 45 ff ff       	call   c001a766 <File::close()>
c002624f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026251:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0026254:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0026257:	83 c4 10             	add    esp,0x10
c002625a:	c6 05 20 02 04 c0 01 	mov    BYTE PTR ds:0xc0040220,0x1
c0026261:	50                   	push   eax
c0026262:	50                   	push   eax
c0026263:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026267:	68 5f 36 03 c0       	push   0xc003365f
c002626c:	e8 61 32 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026271:	83 c4 10             	add    esp,0x10
c0026274:	fa                   	cli    
c0026275:	8a 1d 29 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040229
c002627b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0026281:	84 db                	test   bl,bl
c0026283:	75 15                	jne    c002629a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0026285:	e8 62 f3 ff ff       	call   c00255ec <schedule()>
c002628a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002628f:	48                   	dec    eax
c0026290:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026295:	75 dd                	jne    c0026274 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0026297:	fb                   	sti    
c0026298:	eb da                	jmp    c0026274 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c002629a:	c7 05 30 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040230,0x0
c00262a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00262a8:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c00262ad:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00262b1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00262b5:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00262b9:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00262bd:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00262c1:	50                   	push   eax
c00262c2:	6a 20                	push   0x20
c00262c4:	6a 00                	push   0x0
c00262c6:	68 40 02 04 c0       	push   0xc0040240
c00262cb:	e8 20 a2 fd ff       	call   c00004f0 <memset>
c00262d0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00262d7:	e8 c0 03 ff ff       	call   c001669c <malloc>
c00262dc:	83 c4 0c             	add    esp,0xc
c00262df:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00262e5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00262e9:	89 c5                	mov    ebp,eax
c00262eb:	50                   	push   eax
c00262ec:	e8 f9 43 ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c00262f1:	83 c4 10             	add    esp,0x10
c00262f4:	85 ed                	test   ebp,ebp
c00262f6:	75 0a                	jne    c0026302 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x122>
c00262f8:	83 ec 0c             	sub    esp,0xc
c00262fb:	68 81 36 03 c0       	push   0xc0033681
c0026300:	eb 2b                	jmp    c002632d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0026302:	50                   	push   eax
c0026303:	8d 44 24 17          	lea    eax,[esp+0x17]
c0026307:	50                   	push   eax
c0026308:	8d 44 24 20          	lea    eax,[esp+0x20]
c002630c:	50                   	push   eax
c002630d:	55                   	push   ebp
c002630e:	e8 f7 46 ff ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c0026313:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0026317:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002631b:	83 c4 10             	add    esp,0x10
c002631e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0026323:	74 27                	je     c002634c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0026325:	83 ec 0c             	sub    esp,0xc
c0026328:	68 95 36 03 c0       	push   0xc0033695
c002632d:	e8 64 a2 ff ff       	call   c0020596 <KePanic(char const*)>
c0026332:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026337:	83 c4 10             	add    esp,0x10
c002633a:	48                   	dec    eax
c002633b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026340:	85 c0                	test   eax,eax
c0026342:	75 01                	jne    c0026345 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x165>
c0026344:	fb                   	sti    
c0026345:	31 db                	xor    ebx,ebx
c0026347:	e9 90 00 00 00       	jmp    c00263dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fc>
c002634c:	51                   	push   ecx
c002634d:	51                   	push   ecx
c002634e:	6a 01                	push   0x1
c0026350:	55                   	push   ebp
c0026351:	e8 b2 43 ff ff       	call   c001a708 <File::open(FileOpenMode)>
c0026356:	83 c4 10             	add    esp,0x10
c0026359:	85 c0                	test   eax,eax
c002635b:	74 26                	je     c0026383 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a3>
c002635d:	83 ec 0c             	sub    esp,0xc
c0026360:	68 ae 36 03 c0       	push   0xc00336ae
c0026365:	e8 2c a2 ff ff       	call   c0020596 <KePanic(char const*)>
c002636a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002636f:	83 c4 10             	add    esp,0x10
c0026372:	48                   	dec    eax
c0026373:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026378:	85 c0                	test   eax,eax
c002637a:	75 c9                	jne    c0026345 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x165>
c002637c:	fb                   	sti    
c002637d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0026381:	eb 59                	jmp    c00263dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fc>
c0026383:	50                   	push   eax
c0026384:	0f b7 ff             	movzx  edi,di
c0026387:	50                   	push   eax
c0026388:	0f b7 f6             	movzx  esi,si
c002638b:	57                   	push   edi
c002638c:	56                   	push   esi
c002638d:	e8 d0 fb ff ff       	call   c0025f62 <Vm::realToLinear(unsigned short, unsigned short)>
c0026392:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0026395:	5a                   	pop    edx
c0026396:	8d 74 24 20          	lea    esi,[esp+0x20]
c002639a:	56                   	push   esi
c002639b:	50                   	push   eax
c002639c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00263a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00263a4:	55                   	push   ebp
c00263a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00263a8:	83 c4 14             	add    esp,0x14
c00263ab:	55                   	push   ebp
c00263ac:	e8 b5 43 ff ff       	call   c001a766 <File::close()>
c00263b1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00263b6:	83 c4 10             	add    esp,0x10
c00263b9:	c6 05 29 02 04 c0 00 	mov    BYTE PTR ds:0xc0040229,0x0
c00263c0:	48                   	dec    eax
c00263c1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00263c6:	85 c0                	test   eax,eax
c00263c8:	75 01                	jne    c00263cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>
c00263ca:	fb                   	sti    
c00263cb:	83 ec 0c             	sub    esp,0xc
c00263ce:	ff 35 2c 02 04 c0    	push   DWORD PTR ds:0xc004022c
c00263d4:	e8 ff f4 ff ff       	call   c00258d8 <unblockTask(ThreadControlBlock*)>
c00263d9:	83 c4 10             	add    esp,0x10
c00263dc:	83 c4 2c             	add    esp,0x2c
c00263df:	88 d8                	mov    al,bl
c00263e1:	5b                   	pop    ebx
c00263e2:	5e                   	pop    esi
c00263e3:	5f                   	pop    edi
c00263e4:	5d                   	pop    ebp
c00263e5:	c3                   	ret    

c00263e6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00263e6:	57                   	push   edi
c00263e7:	56                   	push   esi
c00263e8:	53                   	push   ebx
c00263e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00263ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00263f1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00263f5:	83 e8 06             	sub    eax,0x6
c00263f8:	0f b7 c0             	movzx  eax,ax
c00263fb:	50                   	push   eax
c00263fc:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0026401:	50                   	push   eax
c0026402:	e8 5b fb ff ff       	call   c0025f62 <Vm::realToLinear(unsigned short, unsigned short)>
c0026407:	5a                   	pop    edx
c0026408:	59                   	pop    ecx
c0026409:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c002640c:	8d 51 fa             	lea    edx,[ecx-0x6]
c002640f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0026412:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026418:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c002641b:	8d 51 02             	lea    edx,[ecx+0x2]
c002641e:	66 89 10             	mov    WORD PTR [eax],dx
c0026421:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0026425:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0026429:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c002642d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0026430:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026434:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002643a:	89 f1                	mov    ecx,esi
c002643c:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0026440:	89 f2                	mov    edx,esi
c0026442:	0f b6 d6             	movzx  edx,dh
c0026445:	0f b6 f1             	movzx  esi,cl
c0026448:	74 0a                	je     c0026454 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c002644a:	c1 e2 08             	shl    edx,0x8
c002644d:	09 f2                	or     edx,esi
c002644f:	80 ce 02             	or     dh,0x2
c0026452:	eb 08                	jmp    c002645c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0026454:	c1 e2 08             	shl    edx,0x8
c0026457:	09 f2                	or     edx,esi
c0026459:	80 e6 fd             	and    dh,0xfd
c002645c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026460:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026465:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026469:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0026471:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0026474:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c002647c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c002647f:	5b                   	pop    ebx
c0026480:	5e                   	pop    esi
c0026481:	5f                   	pop    edi
c0026482:	c3                   	ret    

c0026483 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0026483:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026488:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002648d:	c1 e0 04             	shl    eax,0x4
c0026490:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0026493:	c3                   	ret    

c0026494 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0026494:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026499:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002649e:	c1 e0 04             	shl    eax,0x4
c00264a1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00264a5:	c3                   	ret    

c00264a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00264a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00264ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00264b0:	c1 e0 04             	shl    eax,0x4
c00264b3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00264b6:	c3                   	ret    

c00264b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00264b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00264bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00264c1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00264c5:	c1 e0 04             	shl    eax,0x4
c00264c8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00264cb:	c3                   	ret    

c00264cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00264cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00264d1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00264d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00264da:	c1 e0 04             	shl    eax,0x4
c00264dd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00264e1:	c3                   	ret    

c00264e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00264e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00264e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00264ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00264f0:	c1 e0 04             	shl    eax,0x4
c00264f3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00264f6:	c3                   	ret    

c00264f7 <Vm::faultHandler(regs*)>:
c00264f7:	55                   	push   ebp
c00264f8:	57                   	push   edi
c00264f9:	56                   	push   esi
c00264fa:	53                   	push   ebx
c00264fb:	83 ec 2c             	sub    esp,0x2c
c00264fe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0026502:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0026505:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0026509:	0f b7 f8             	movzx  edi,ax
c002650c:	0f b7 c0             	movzx  eax,ax
c002650f:	52                   	push   edx
c0026510:	50                   	push   eax
c0026511:	e8 4c fa ff ff       	call   c0025f62 <Vm::realToLinear(unsigned short, unsigned short)>
c0026516:	5a                   	pop    edx
c0026517:	59                   	pop    ecx
c0026518:	89 c1                	mov    ecx,eax
c002651a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002651d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026521:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0026526:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002652a:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c002652d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0026531:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0026536:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002653a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002653e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0026542:	e8 1b fa ff ff       	call   c0025f62 <Vm::realToLinear(unsigned short, unsigned short)>
c0026547:	5e                   	pop    esi
c0026548:	be 06 00 00 00       	mov    esi,0x6
c002654d:	5d                   	pop    ebp
c002654e:	31 ed                	xor    ebp,ebp
c0026550:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026555:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026558:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c002655e:	0f 84 74 02 00 00    	je     c00267d8 <Vm::faultHandler(regs*)+0x2e1>
c0026564:	0f 87 94 00 00 00    	ja     c00265fe <Vm::faultHandler(regs*)+0x107>
c002656a:	83 fa 66             	cmp    edx,0x66
c002656d:	0f 84 e2 01 00 00    	je     c0026755 <Vm::faultHandler(regs*)+0x25e>
c0026573:	77 47                	ja     c00265bc <Vm::faultHandler(regs*)+0xc5>
c0026575:	83 fa 36             	cmp    edx,0x36
c0026578:	0f 84 ca 01 00 00    	je     c0026748 <Vm::faultHandler(regs*)+0x251>
c002657e:	77 1a                	ja     c002659a <Vm::faultHandler(regs*)+0xa3>
c0026580:	83 fa 26             	cmp    edx,0x26
c0026583:	0f 84 98 01 00 00    	je     c0026721 <Vm::faultHandler(regs*)+0x22a>
c0026589:	83 fa 2e             	cmp    edx,0x2e
c002658c:	0f 85 27 06 00 00    	jne    c0026bb9 <Vm::faultHandler(regs*)+0x6c2>
c0026592:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026595:	31 f6                	xor    esi,esi
c0026597:	41                   	inc    ecx
c0026598:	eb bb                	jmp    c0026555 <Vm::faultHandler(regs*)+0x5e>
c002659a:	83 fa 64             	cmp    edx,0x64
c002659d:	0f 84 8b 01 00 00    	je     c002672e <Vm::faultHandler(regs*)+0x237>
c00265a3:	0f 87 92 01 00 00    	ja     c002673b <Vm::faultHandler(regs*)+0x244>
c00265a9:	83 fa 3e             	cmp    edx,0x3e
c00265ac:	0f 85 07 06 00 00    	jne    c0026bb9 <Vm::faultHandler(regs*)+0x6c2>
c00265b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00265b5:	be 01 00 00 00       	mov    esi,0x1
c00265ba:	eb db                	jmp    c0026597 <Vm::faultHandler(regs*)+0xa0>
c00265bc:	83 fa 6d             	cmp    edx,0x6d
c00265bf:	0f 84 34 03 00 00    	je     c00268f9 <Vm::faultHandler(regs*)+0x402>
c00265c5:	77 17                	ja     c00265de <Vm::faultHandler(regs*)+0xe7>
c00265c7:	83 fa 67             	cmp    edx,0x67
c00265ca:	0f 84 92 01 00 00    	je     c0026762 <Vm::faultHandler(regs*)+0x26b>
c00265d0:	83 fa 6c             	cmp    edx,0x6c
c00265d3:	0f 84 b1 02 00 00    	je     c002688a <Vm::faultHandler(regs*)+0x393>
c00265d9:	e9 db 05 00 00       	jmp    c0026bb9 <Vm::faultHandler(regs*)+0x6c2>
c00265de:	83 fa 6f             	cmp    edx,0x6f
c00265e1:	0f 84 40 04 00 00    	je     c0026a27 <Vm::faultHandler(regs*)+0x530>
c00265e7:	0f 82 a2 03 00 00    	jb     c002698f <Vm::faultHandler(regs*)+0x498>
c00265ed:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00265f3:	0f 84 76 01 00 00    	je     c002676f <Vm::faultHandler(regs*)+0x278>
c00265f9:	e9 bb 05 00 00       	jmp    c0026bb9 <Vm::faultHandler(regs*)+0x6c2>
c00265fe:	81 fa ec 00 00 00    	cmp    edx,0xec
c0026604:	0f 84 57 05 00 00    	je     c0026b61 <Vm::faultHandler(regs*)+0x66a>
c002660a:	0f 87 a9 00 00 00    	ja     c00266b9 <Vm::faultHandler(regs*)+0x1c2>
c0026610:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0026616:	0f 84 d6 04 00 00    	je     c0026af2 <Vm::faultHandler(regs*)+0x5fb>
c002661c:	77 78                	ja     c0026696 <Vm::faultHandler(regs*)+0x19f>
c002661e:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0026624:	0f 84 0e 02 00 00    	je     c0026838 <Vm::faultHandler(regs*)+0x341>
c002662a:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0026630:	0f 85 83 05 00 00    	jne    c0026bb9 <Vm::faultHandler(regs*)+0x6c2>
c0026636:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c002663a:	89 d1                	mov    ecx,edx
c002663c:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c002663f:	c1 e1 08             	shl    ecx,0x8
c0026642:	09 ca                	or     edx,ecx
c0026644:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0026647:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c002664b:	89 d1                	mov    ecx,edx
c002664d:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0026651:	c1 e1 08             	shl    ecx,0x8
c0026654:	09 ca                	or     edx,ecx
c0026656:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0026659:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c002665d:	89 d1                	mov    ecx,edx
c002665f:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0026663:	c1 e1 08             	shl    ecx,0x8
c0026666:	09 ca                	or     edx,ecx
c0026668:	81 ca 00 02 02 00    	or     edx,0x20200
c002666e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026671:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0026675:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002667b:	d1 e8                	shr    eax,1
c002667d:	83 e0 01             	and    eax,0x1
c0026680:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026683:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026686:	83 c0 06             	add    eax,0x6
c0026689:	25 ff ff 00 00       	and    eax,0xffff
c002668e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026691:	e9 1f 05 00 00       	jmp    c0026bb5 <Vm::faultHandler(regs*)+0x6be>
c0026696:	81 fa e6 00 00 00    	cmp    edx,0xe6
c002669c:	0f 84 95 04 00 00    	je     c0026b37 <Vm::faultHandler(regs*)+0x640>
c00266a2:	0f 82 66 04 00 00    	jb     c0026b0e <Vm::faultHandler(regs*)+0x617>
c00266a8:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00266ae:	0f 84 9a 04 00 00    	je     c0026b4e <Vm::faultHandler(regs*)+0x657>
c00266b4:	e9 00 05 00 00       	jmp    c0026bb9 <Vm::faultHandler(regs*)+0x6c2>
c00266b9:	81 fa ef 00 00 00    	cmp    edx,0xef
c00266bf:	0f 84 dd 04 00 00    	je     c0026ba2 <Vm::faultHandler(regs*)+0x6ab>
c00266c5:	77 2e                	ja     c00266f5 <Vm::faultHandler(regs*)+0x1fe>
c00266c7:	81 fa ed 00 00 00    	cmp    edx,0xed
c00266cd:	0f 84 aa 04 00 00    	je     c0026b7d <Vm::faultHandler(regs*)+0x686>
c00266d3:	81 fa ee 00 00 00    	cmp    edx,0xee
c00266d9:	0f 85 da 04 00 00    	jne    c0026bb9 <Vm::faultHandler(regs*)+0x6c2>
c00266df:	50                   	push   eax
c00266e0:	50                   	push   eax
c00266e1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00266e5:	50                   	push   eax
c00266e6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00266ea:	50                   	push   eax
c00266eb:	e8 3c f8 ff ff       	call   c0025f2c <Vm::outbv(unsigned short, unsigned char)>
c00266f0:	e9 a5 04 00 00       	jmp    c0026b9a <Vm::faultHandler(regs*)+0x6a3>
c00266f5:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00266fb:	0f 84 6d 01 00 00    	je     c002686e <Vm::faultHandler(regs*)+0x377>
c0026701:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0026707:	0f 84 6f 01 00 00    	je     c002687c <Vm::faultHandler(regs*)+0x385>
c002670d:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0026713:	0f 85 a0 04 00 00    	jne    c0026bb9 <Vm::faultHandler(regs*)+0x6c2>
c0026719:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002671c:	e9 76 fe ff ff       	jmp    c0026597 <Vm::faultHandler(regs*)+0xa0>
c0026721:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026724:	be 02 00 00 00       	mov    esi,0x2
c0026729:	e9 69 fe ff ff       	jmp    c0026597 <Vm::faultHandler(regs*)+0xa0>
c002672e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026731:	be 03 00 00 00       	mov    esi,0x3
c0026736:	e9 5c fe ff ff       	jmp    c0026597 <Vm::faultHandler(regs*)+0xa0>
c002673b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002673e:	be 04 00 00 00       	mov    esi,0x4
c0026743:	e9 4f fe ff ff       	jmp    c0026597 <Vm::faultHandler(regs*)+0xa0>
c0026748:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002674b:	be 05 00 00 00       	mov    esi,0x5
c0026750:	e9 42 fe ff ff       	jmp    c0026597 <Vm::faultHandler(regs*)+0xa0>
c0026755:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026758:	bd 01 00 00 00       	mov    ebp,0x1
c002675d:	e9 35 fe ff ff       	jmp    c0026597 <Vm::faultHandler(regs*)+0xa0>
c0026762:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026765:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c002676a:	e9 28 fe ff ff       	jmp    c0026597 <Vm::faultHandler(regs*)+0xa0>
c002676f:	83 e5 01             	and    ebp,0x1
c0026772:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0026775:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026779:	74 30                	je     c00267ab <Vm::faultHandler(regs*)+0x2b4>
c002677b:	83 e9 04             	sub    ecx,0x4
c002677e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026784:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002678a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c002678d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026790:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026796:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002679a:	0f 84 12 04 00 00    	je     c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c00267a0:	80 ce 02             	or     dh,0x2
c00267a3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00267a6:	e9 07 04 00 00       	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c00267ab:	83 e9 02             	sub    ecx,0x2
c00267ae:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00267b4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00267b7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00267bb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00267c1:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00267c5:	74 05                	je     c00267cc <Vm::faultHandler(regs*)+0x2d5>
c00267c7:	80 ce 02             	or     dh,0x2
c00267ca:	eb 03                	jmp    c00267cf <Vm::faultHandler(regs*)+0x2d8>
c00267cc:	80 e6 fd             	and    dh,0xfd
c00267cf:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00267d3:	e9 da 03 00 00       	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c00267d8:	83 e5 01             	and    ebp,0x1
c00267db:	74 2a                	je     c0026807 <Vm::faultHandler(regs*)+0x310>
c00267dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00267df:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00267e5:	81 ca 00 02 02 00    	or     edx,0x20200
c00267eb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00267ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00267f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00267f6:	c1 e8 09             	shr    eax,0x9
c00267f9:	83 e0 01             	and    eax,0x1
c00267fc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00267ff:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026802:	83 c0 04             	add    eax,0x4
c0026805:	eb 24                	jmp    c002682b <Vm::faultHandler(regs*)+0x334>
c0026807:	0f b7 10             	movzx  edx,WORD PTR [eax]
c002680a:	81 ca 00 02 02 00    	or     edx,0x20200
c0026810:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026813:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0026816:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002681c:	c1 e8 09             	shr    eax,0x9
c002681f:	83 e0 01             	and    eax,0x1
c0026822:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026825:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026828:	83 c0 02             	add    eax,0x2
c002682b:	25 ff ff 00 00       	and    eax,0xffff
c0026830:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026833:	e9 7a 03 00 00       	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c0026838:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002683c:	3d ee 00 00 00       	cmp    eax,0xee
c0026841:	75 10                	jne    c0026853 <Vm::faultHandler(regs*)+0x35c>
c0026843:	83 ec 0c             	sub    esp,0xc
c0026846:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0026849:	e8 7b f7 ff ff       	call   c0025fc9 <Vm::mainloop3(unsigned long)>
c002684e:	e9 4a 03 00 00       	jmp    c0026b9d <Vm::faultHandler(regs*)+0x6a6>
c0026853:	83 ec 0c             	sub    esp,0xc
c0026856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002685a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002685e:	51                   	push   ecx
c002685f:	50                   	push   eax
c0026860:	53                   	push   ebx
c0026861:	e8 80 fb ff ff       	call   c00263e6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0026866:	83 c4 20             	add    esp,0x20
c0026869:	e9 47 03 00 00       	jmp    c0026bb5 <Vm::faultHandler(regs*)+0x6be>
c002686e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026873:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026877:	e9 36 03 00 00       	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c002687c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026881:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0026885:	e9 28 03 00 00       	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c002688a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002688f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026892:	74 2b                	je     c00268bf <Vm::faultHandler(regs*)+0x3c8>
c0026894:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c002689b:	76 22                	jbe    c00268bf <Vm::faultHandler(regs*)+0x3c8>
c002689d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00268a1:	50                   	push   eax
c00268a2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00268a6:	50                   	push   eax
c00268a7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00268ab:	50                   	push   eax
c00268ac:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00268b0:	50                   	push   eax
c00268b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00268b5:	50                   	push   eax
c00268b6:	6a 6c                	push   0x6c
c00268b8:	6a 6c                	push   0x6c
c00268ba:	e9 c0 01 00 00       	jmp    c0026a7f <Vm::faultHandler(regs*)+0x588>
c00268bf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00268c3:	83 ec 0c             	sub    esp,0xc
c00268c6:	0f b7 f6             	movzx  esi,si
c00268c9:	50                   	push   eax
c00268ca:	e8 4a f6 ff ff       	call   c0025f19 <Vm::inbv(unsigned short)>
c00268cf:	83 c4 0c             	add    esp,0xc
c00268d2:	0f b6 c0             	movzx  eax,al
c00268d5:	50                   	push   eax
c00268d6:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00268da:	50                   	push   eax
c00268db:	56                   	push   esi
c00268dc:	e8 d6 fb ff ff       	call   c00264b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00268e1:	83 c4 10             	add    esp,0x10
c00268e4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00268e7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00268eb:	74 03                	je     c00268f0 <Vm::faultHandler(regs*)+0x3f9>
c00268ed:	48                   	dec    eax
c00268ee:	eb 01                	jmp    c00268f1 <Vm::faultHandler(regs*)+0x3fa>
c00268f0:	40                   	inc    eax
c00268f1:	0f b7 c0             	movzx  eax,ax
c00268f4:	e9 8e 00 00 00       	jmp    c0026987 <Vm::faultHandler(regs*)+0x490>
c00268f9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00268fe:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026901:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026904:	74 29                	je     c002692f <Vm::faultHandler(regs*)+0x438>
c0026906:	3d ff ff 00 00       	cmp    eax,0xffff
c002690b:	76 22                	jbe    c002692f <Vm::faultHandler(regs*)+0x438>
c002690d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026911:	50                   	push   eax
c0026912:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026916:	50                   	push   eax
c0026917:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002691b:	50                   	push   eax
c002691c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026920:	50                   	push   eax
c0026921:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026925:	50                   	push   eax
c0026926:	6a 6d                	push   0x6d
c0026928:	6a 6d                	push   0x6d
c002692a:	e9 50 01 00 00       	jmp    c0026a7f <Vm::faultHandler(regs*)+0x588>
c002692f:	83 e5 01             	and    ebp,0x1
c0026932:	0f b7 c8             	movzx  ecx,ax
c0026935:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026938:	0f b7 f6             	movzx  esi,si
c002693b:	74 1e                	je     c002695b <Vm::faultHandler(regs*)+0x464>
c002693d:	ed                   	in     eax,dx
c002693e:	55                   	push   ebp
c002693f:	50                   	push   eax
c0026940:	51                   	push   ecx
c0026941:	56                   	push   esi
c0026942:	e8 9b fb ff ff       	call   c00264e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026947:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002694a:	83 c4 10             	add    esp,0x10
c002694d:	8d 50 04             	lea    edx,[eax+0x4]
c0026950:	83 e8 04             	sub    eax,0x4
c0026953:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026959:	eb 20                	jmp    c002697b <Vm::faultHandler(regs*)+0x484>
c002695b:	66 ed                	in     ax,dx
c002695d:	57                   	push   edi
c002695e:	0f b7 c0             	movzx  eax,ax
c0026961:	50                   	push   eax
c0026962:	51                   	push   ecx
c0026963:	56                   	push   esi
c0026964:	e8 63 fb ff ff       	call   c00264cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026969:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002696c:	83 c4 10             	add    esp,0x10
c002696f:	8d 50 02             	lea    edx,[eax+0x2]
c0026972:	83 e8 02             	sub    eax,0x2
c0026975:	81 e2 ff ff 00 00    	and    edx,0xffff
c002697b:	25 ff ff 00 00       	and    eax,0xffff
c0026980:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026984:	0f 44 c2             	cmove  eax,edx
c0026987:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c002698a:	e9 23 02 00 00       	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c002698f:	8d 46 ff             	lea    eax,[esi-0x1]
c0026992:	0f b6 f0             	movzx  esi,al
c0026995:	83 fe 05             	cmp    esi,0x5
c0026998:	77 23                	ja     c00269bd <Vm::faultHandler(regs*)+0x4c6>
c002699a:	ff 24 b5 24 37 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcc8dc]
c00269a1:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00269a6:	eb 15                	jmp    c00269bd <Vm::faultHandler(regs*)+0x4c6>
c00269a8:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00269ac:	eb 0f                	jmp    c00269bd <Vm::faultHandler(regs*)+0x4c6>
c00269ae:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00269b2:	eb 09                	jmp    c00269bd <Vm::faultHandler(regs*)+0x4c6>
c00269b4:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00269b8:	eb 03                	jmp    c00269bd <Vm::faultHandler(regs*)+0x4c6>
c00269ba:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00269bd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00269c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00269c5:	74 29                	je     c00269f0 <Vm::faultHandler(regs*)+0x4f9>
c00269c7:	3d ff ff 00 00       	cmp    eax,0xffff
c00269cc:	76 22                	jbe    c00269f0 <Vm::faultHandler(regs*)+0x4f9>
c00269ce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00269d2:	50                   	push   eax
c00269d3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00269d7:	50                   	push   eax
c00269d8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00269dc:	50                   	push   eax
c00269dd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00269e1:	50                   	push   eax
c00269e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00269e6:	50                   	push   eax
c00269e7:	6a 6e                	push   0x6e
c00269e9:	6a 6e                	push   0x6e
c00269eb:	e9 8f 00 00 00       	jmp    c0026a7f <Vm::faultHandler(regs*)+0x588>
c00269f0:	52                   	push   edx
c00269f1:	0f b7 c0             	movzx  eax,ax
c00269f4:	52                   	push   edx
c00269f5:	50                   	push   eax
c00269f6:	57                   	push   edi
c00269f7:	e8 87 fa ff ff       	call   c0026483 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00269fc:	59                   	pop    ecx
c00269fd:	5e                   	pop    esi
c00269fe:	0f b6 c0             	movzx  eax,al
c0026a01:	50                   	push   eax
c0026a02:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026a06:	50                   	push   eax
c0026a07:	e8 20 f5 ff ff       	call   c0025f2c <Vm::outbv(unsigned short, unsigned char)>
c0026a0c:	83 c4 10             	add    esp,0x10
c0026a0f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026a12:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026a16:	74 03                	je     c0026a1b <Vm::faultHandler(regs*)+0x524>
c0026a18:	48                   	dec    eax
c0026a19:	eb 01                	jmp    c0026a1c <Vm::faultHandler(regs*)+0x525>
c0026a1b:	40                   	inc    eax
c0026a1c:	0f b7 c0             	movzx  eax,ax
c0026a1f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0026a22:	e9 8b 01 00 00       	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c0026a27:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a2a:	0f b6 f0             	movzx  esi,al
c0026a2d:	83 fe 05             	cmp    esi,0x5
c0026a30:	77 1e                	ja     c0026a50 <Vm::faultHandler(regs*)+0x559>
c0026a32:	ff 24 b5 3c 37 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcc8c4]
c0026a39:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026a3d:	eb 11                	jmp    c0026a50 <Vm::faultHandler(regs*)+0x559>
c0026a3f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026a42:	eb 0c                	jmp    c0026a50 <Vm::faultHandler(regs*)+0x559>
c0026a44:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026a47:	eb 07                	jmp    c0026a50 <Vm::faultHandler(regs*)+0x559>
c0026a49:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0026a4c:	eb 02                	jmp    c0026a50 <Vm::faultHandler(regs*)+0x559>
c0026a4e:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026a50:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026a55:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026a58:	74 37                	je     c0026a91 <Vm::faultHandler(regs*)+0x59a>
c0026a5a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026a60:	76 2f                	jbe    c0026a91 <Vm::faultHandler(regs*)+0x59a>
c0026a62:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026a66:	50                   	push   eax
c0026a67:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026a6b:	50                   	push   eax
c0026a6c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026a70:	50                   	push   eax
c0026a71:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026a75:	50                   	push   eax
c0026a76:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026a7a:	50                   	push   eax
c0026a7b:	6a 6f                	push   0x6f
c0026a7d:	6a 6f                	push   0x6f
c0026a7f:	68 c7 36 03 c0       	push   0xc00336c7
c0026a84:	e8 49 2a ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026a89:	83 c4 20             	add    esp,0x20
c0026a8c:	e9 86 01 00 00       	jmp    c0026c17 <Vm::faultHandler(regs*)+0x720>
c0026a91:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026a94:	0f b7 d7             	movzx  edx,di
c0026a97:	0f b7 c6             	movzx  eax,si
c0026a9a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026a9d:	81 e1 00 04 00 00    	and    ecx,0x400
c0026aa3:	83 e5 01             	and    ebp,0x1
c0026aa6:	74 1c                	je     c0026ac4 <Vm::faultHandler(regs*)+0x5cd>
c0026aa8:	55                   	push   ebp
c0026aa9:	55                   	push   ebp
c0026aaa:	50                   	push   eax
c0026aab:	52                   	push   edx
c0026aac:	e8 f5 f9 ff ff       	call   c00264a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026ab1:	83 c4 10             	add    esp,0x10
c0026ab4:	89 fa                	mov    edx,edi
c0026ab6:	ef                   	out    dx,eax
c0026ab7:	8d 46 04             	lea    eax,[esi+0x4]
c0026aba:	83 ee 04             	sub    esi,0x4
c0026abd:	25 ff ff 00 00       	and    eax,0xffff
c0026ac2:	eb 1b                	jmp    c0026adf <Vm::faultHandler(regs*)+0x5e8>
c0026ac4:	55                   	push   ebp
c0026ac5:	55                   	push   ebp
c0026ac6:	50                   	push   eax
c0026ac7:	52                   	push   edx
c0026ac8:	e8 c7 f9 ff ff       	call   c0026494 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0026acd:	83 c4 10             	add    esp,0x10
c0026ad0:	89 fa                	mov    edx,edi
c0026ad2:	66 ef                	out    dx,ax
c0026ad4:	8d 46 02             	lea    eax,[esi+0x2]
c0026ad7:	83 ee 02             	sub    esi,0x2
c0026ada:	25 ff ff 00 00       	and    eax,0xffff
c0026adf:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026ae5:	85 c9                	test   ecx,ecx
c0026ae7:	0f 44 f0             	cmove  esi,eax
c0026aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0026aed:	e9 c0 00 00 00       	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c0026af2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026af9:	83 ec 0c             	sub    esp,0xc
c0026afc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026b00:	50                   	push   eax
c0026b01:	e8 13 f4 ff ff       	call   c0025f19 <Vm::inbv(unsigned short)>
c0026b06:	0f b6 c0             	movzx  eax,al
c0026b09:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026b0c:	eb 3a                	jmp    c0026b48 <Vm::faultHandler(regs*)+0x651>
c0026b0e:	83 e5 01             	and    ebp,0x1
c0026b11:	74 07                	je     c0026b1a <Vm::faultHandler(regs*)+0x623>
c0026b13:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026b17:	ed                   	in     eax,dx
c0026b18:	eb 14                	jmp    c0026b2e <Vm::faultHandler(regs*)+0x637>
c0026b1a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0026b1d:	66 31 f6             	xor    si,si
c0026b20:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0026b23:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026b27:	66 ed                	in     ax,dx
c0026b29:	0f b7 c0             	movzx  eax,ax
c0026b2c:	09 f0                	or     eax,esi
c0026b2e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026b31:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026b35:	eb 7e                	jmp    c0026bb5 <Vm::faultHandler(regs*)+0x6be>
c0026b37:	52                   	push   edx
c0026b38:	52                   	push   edx
c0026b39:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026b3d:	50                   	push   eax
c0026b3e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026b42:	50                   	push   eax
c0026b43:	e8 e4 f3 ff ff       	call   c0025f2c <Vm::outbv(unsigned short, unsigned char)>
c0026b48:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026b4c:	eb 4f                	jmp    c0026b9d <Vm::faultHandler(regs*)+0x6a6>
c0026b4e:	83 e5 01             	and    ebp,0x1
c0026b51:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026b54:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026b58:	74 03                	je     c0026b5d <Vm::faultHandler(regs*)+0x666>
c0026b5a:	ef                   	out    dx,eax
c0026b5b:	eb d4                	jmp    c0026b31 <Vm::faultHandler(regs*)+0x63a>
c0026b5d:	66 ef                	out    dx,ax
c0026b5f:	eb d0                	jmp    c0026b31 <Vm::faultHandler(regs*)+0x63a>
c0026b61:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026b65:	83 ec 0c             	sub    esp,0xc
c0026b68:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026b6f:	50                   	push   eax
c0026b70:	e8 a4 f3 ff ff       	call   c0025f19 <Vm::inbv(unsigned short)>
c0026b75:	0f b6 c0             	movzx  eax,al
c0026b78:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026b7b:	eb 1d                	jmp    c0026b9a <Vm::faultHandler(regs*)+0x6a3>
c0026b7d:	83 e5 01             	and    ebp,0x1
c0026b80:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026b83:	74 03                	je     c0026b88 <Vm::faultHandler(regs*)+0x691>
c0026b85:	ed                   	in     eax,dx
c0026b86:	eb 0d                	jmp    c0026b95 <Vm::faultHandler(regs*)+0x69e>
c0026b88:	66 ed                	in     ax,dx
c0026b8a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026b8d:	0f b7 c0             	movzx  eax,ax
c0026b90:	66 31 d2             	xor    dx,dx
c0026b93:	09 d0                	or     eax,edx
c0026b95:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026b98:	eb 18                	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c0026b9a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026b9d:	83 c4 10             	add    esp,0x10
c0026ba0:	eb 13                	jmp    c0026bb5 <Vm::faultHandler(regs*)+0x6be>
c0026ba2:	83 e5 01             	and    ebp,0x1
c0026ba5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026ba8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026bab:	74 03                	je     c0026bb0 <Vm::faultHandler(regs*)+0x6b9>
c0026bad:	ef                   	out    dx,eax
c0026bae:	eb 02                	jmp    c0026bb2 <Vm::faultHandler(regs*)+0x6bb>
c0026bb0:	66 ef                	out    dx,ax
c0026bb2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026bb5:	b0 01                	mov    al,0x1
c0026bb7:	eb 60                	jmp    c0026c19 <Vm::faultHandler(regs*)+0x722>
c0026bb9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026bbd:	50                   	push   eax
c0026bbe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026bc2:	50                   	push   eax
c0026bc3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026bc7:	50                   	push   eax
c0026bc8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026bcc:	50                   	push   eax
c0026bcd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026bd1:	50                   	push   eax
c0026bd2:	52                   	push   edx
c0026bd3:	52                   	push   edx
c0026bd4:	68 f4 36 03 c0       	push   0xc00336f4
c0026bd9:	e8 f4 28 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026bde:	83 c4 20             	add    esp,0x20
c0026be1:	83 ec 0c             	sub    esp,0xc
c0026be4:	6a 60                	push   0x60
c0026be6:	e8 2e f3 ff ff       	call   c0025f19 <Vm::inbv(unsigned short)>
c0026beb:	83 c4 10             	add    esp,0x10
c0026bee:	0f b6 d0             	movzx  edx,al
c0026bf1:	83 fa 1c             	cmp    edx,0x1c
c0026bf4:	74 05                	je     c0026bfb <Vm::faultHandler(regs*)+0x704>
c0026bf6:	83 fa 5a             	cmp    edx,0x5a
c0026bf9:	75 e6                	jne    c0026be1 <Vm::faultHandler(regs*)+0x6ea>
c0026bfb:	0f b6 c0             	movzx  eax,al
c0026bfe:	83 f8 1c             	cmp    eax,0x1c
c0026c01:	74 05                	je     c0026c08 <Vm::faultHandler(regs*)+0x711>
c0026c03:	83 f8 5a             	cmp    eax,0x5a
c0026c06:	75 0f                	jne    c0026c17 <Vm::faultHandler(regs*)+0x720>
c0026c08:	83 ec 0c             	sub    esp,0xc
c0026c0b:	6a 60                	push   0x60
c0026c0d:	e8 07 f3 ff ff       	call   c0025f19 <Vm::inbv(unsigned short)>
c0026c12:	83 c4 10             	add    esp,0x10
c0026c15:	eb e4                	jmp    c0026bfb <Vm::faultHandler(regs*)+0x704>
c0026c17:	31 c0                	xor    eax,eax
c0026c19:	83 c4 2c             	add    esp,0x2c
c0026c1c:	5b                   	pop    ebx
c0026c1d:	5e                   	pop    esi
c0026c1e:	5f                   	pop    edi
c0026c1f:	5d                   	pop    ebp
c0026c20:	c3                   	ret    

c0026c21 <noCopro(unsigned long)>:
c0026c21:	c3                   	ret    

c0026c22 <nmiHandler(regs*, void*)>:
c0026c22:	83 ec 0c             	sub    esp,0xc
c0026c25:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026c2a:	83 ec 0c             	sub    esp,0xc
c0026c2d:	50                   	push   eax
c0026c2e:	e8 ef f1 fe ff       	call   c0015e22 <Computer::handleNMI()>
c0026c33:	83 c4 10             	add    esp,0x10
c0026c36:	90                   	nop
c0026c37:	83 c4 0c             	add    esp,0xc
c0026c3a:	c3                   	ret    

c0026c3b <doubleFault(regs*, void*)>:
c0026c3b:	55                   	push   ebp
c0026c3c:	89 e5                	mov    ebp,esp
c0026c3e:	83 ec 08             	sub    esp,0x8
c0026c41:	83 ec 0c             	sub    esp,0xc
c0026c44:	68 54 37 03 c0       	push   0xc0033754
c0026c49:	e8 48 99 ff ff       	call   c0020596 <KePanic(char const*)>
c0026c4e:	83 c4 10             	add    esp,0x10
c0026c51:	90                   	nop
c0026c52:	c9                   	leave  
c0026c53:	c3                   	ret    

c0026c54 <displayDebugInfo(regs*)>:
c0026c54:	83 ec 1c             	sub    esp,0x1c
c0026c57:	0f 20 c0             	mov    eax,cr0
c0026c5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c5e:	0f 20 d0             	mov    eax,cr2
c0026c61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c65:	0f 20 d8             	mov    eax,cr3
c0026c68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026c6c:	0f 20 e0             	mov    eax,cr4
c0026c6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0026c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c76:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026c79:	83 ec 08             	sub    esp,0x8
c0026c7c:	50                   	push   eax
c0026c7d:	68 70 37 03 c0       	push   0xc0033770
c0026c82:	e8 4b 28 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026c87:	83 c4 10             	add    esp,0x10
c0026c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c8e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026c91:	83 ec 08             	sub    esp,0x8
c0026c94:	50                   	push   eax
c0026c95:	68 61 37 03 c0       	push   0xc0033761
c0026c9a:	e8 33 28 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026c9f:	83 c4 10             	add    esp,0x10
c0026ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ca6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026ca9:	83 ec 08             	sub    esp,0x8
c0026cac:	50                   	push   eax
c0026cad:	68 6c 37 03 c0       	push   0xc003376c
c0026cb2:	e8 1b 28 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026cb7:	83 c4 10             	add    esp,0x10
c0026cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026cbe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026cc1:	83 ec 08             	sub    esp,0x8
c0026cc4:	50                   	push   eax
c0026cc5:	68 7b 37 03 c0       	push   0xc003377b
c0026cca:	e8 03 28 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026ccf:	83 c4 10             	add    esp,0x10
c0026cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026cd6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026cd9:	83 ec 08             	sub    esp,0x8
c0026cdc:	50                   	push   eax
c0026cdd:	68 86 37 03 c0       	push   0xc0033786
c0026ce2:	e8 eb 27 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026ce7:	83 c4 10             	add    esp,0x10
c0026cea:	83 ec 08             	sub    esp,0x8
c0026ced:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026cf1:	68 91 37 03 c0       	push   0xc0033791
c0026cf6:	e8 d7 27 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026cfb:	83 c4 10             	add    esp,0x10
c0026cfe:	83 ec 08             	sub    esp,0x8
c0026d01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026d05:	68 9c 37 03 c0       	push   0xc003379c
c0026d0a:	e8 c3 27 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026d0f:	83 c4 10             	add    esp,0x10
c0026d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026d16:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026d19:	c1 e0 05             	shl    eax,0x5
c0026d1c:	8d 90 a0 4b 03 c0    	lea    edx,[eax-0x3ffcb460]
c0026d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026d26:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026d29:	83 ec 04             	sub    esp,0x4
c0026d2c:	52                   	push   edx
c0026d2d:	50                   	push   eax
c0026d2e:	68 a7 37 03 c0       	push   0xc00337a7
c0026d33:	e8 9a 27 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0026d38:	83 c4 10             	add    esp,0x10
c0026d3b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d40:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d46:	83 ec 0c             	sub    esp,0xc
c0026d49:	50                   	push   eax
c0026d4a:	e8 e8 05 ff ff       	call   c0017337 <setActiveTerminal(VgaText*)>
c0026d4f:	83 c4 10             	add    esp,0x10
c0026d52:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d5d:	83 ec 08             	sub    esp,0x8
c0026d60:	68 b6 37 03 c0       	push   0xc00337b6
c0026d65:	50                   	push   eax
c0026d66:	e8 09 09 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026d6b:	83 c4 10             	add    esp,0x10
c0026d6e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d73:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026d7d:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026d80:	83 ec 08             	sub    esp,0x8
c0026d83:	52                   	push   edx
c0026d84:	50                   	push   eax
c0026d85:	e8 a4 08 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026d8a:	83 c4 10             	add    esp,0x10
c0026d8d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d98:	83 ec 08             	sub    esp,0x8
c0026d9b:	68 c4 37 03 c0       	push   0xc00337c4
c0026da0:	50                   	push   eax
c0026da1:	e8 ce 08 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026da6:	83 c4 10             	add    esp,0x10
c0026da9:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026dae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026db4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026db9:	8b 12                	mov    edx,DWORD PTR [edx]
c0026dbb:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026dbe:	83 c2 0c             	add    edx,0xc
c0026dc1:	83 ec 08             	sub    esp,0x8
c0026dc4:	52                   	push   edx
c0026dc5:	50                   	push   eax
c0026dc6:	e8 a9 08 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026dcb:	83 c4 10             	add    esp,0x10
c0026dce:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026dd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026dd9:	83 ec 08             	sub    esp,0x8
c0026ddc:	68 cd 37 03 c0       	push   0xc00337cd
c0026de1:	50                   	push   eax
c0026de2:	e8 8d 08 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026de7:	83 c4 10             	add    esp,0x10
c0026dea:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026def:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026df5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026df9:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026dfc:	83 ec 08             	sub    esp,0x8
c0026dff:	52                   	push   edx
c0026e00:	50                   	push   eax
c0026e01:	e8 28 08 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026e06:	83 c4 10             	add    esp,0x10
c0026e09:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026e0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e14:	83 ec 08             	sub    esp,0x8
c0026e17:	68 d5 37 03 c0       	push   0xc00337d5
c0026e1c:	50                   	push   eax
c0026e1d:	e8 52 08 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026e22:	83 c4 10             	add    esp,0x10
c0026e25:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026e2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026e34:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026e37:	83 ec 08             	sub    esp,0x8
c0026e3a:	52                   	push   edx
c0026e3b:	50                   	push   eax
c0026e3c:	e8 ed 07 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026e41:	83 c4 10             	add    esp,0x10
c0026e44:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026e49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e4f:	83 ec 08             	sub    esp,0x8
c0026e52:	68 dd 37 03 c0       	push   0xc00337dd
c0026e57:	50                   	push   eax
c0026e58:	e8 17 08 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026e5d:	83 c4 10             	add    esp,0x10
c0026e60:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026e65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026e6f:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026e72:	83 ec 08             	sub    esp,0x8
c0026e75:	52                   	push   edx
c0026e76:	50                   	push   eax
c0026e77:	e8 b2 07 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026e7c:	83 c4 10             	add    esp,0x10
c0026e7f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026e84:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e8a:	83 ec 08             	sub    esp,0x8
c0026e8d:	68 e5 37 03 c0       	push   0xc00337e5
c0026e92:	50                   	push   eax
c0026e93:	e8 dc 07 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026e98:	83 c4 10             	add    esp,0x10
c0026e9b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ea0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ea6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026eaa:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026ead:	83 ec 08             	sub    esp,0x8
c0026eb0:	52                   	push   edx
c0026eb1:	50                   	push   eax
c0026eb2:	e8 77 07 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026eb7:	83 c4 10             	add    esp,0x10
c0026eba:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ebf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ec5:	83 ec 08             	sub    esp,0x8
c0026ec8:	68 ed 37 03 c0       	push   0xc00337ed
c0026ecd:	50                   	push   eax
c0026ece:	e8 a1 07 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026ed3:	83 c4 10             	add    esp,0x10
c0026ed6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026edb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ee1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ee5:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026ee8:	83 ec 08             	sub    esp,0x8
c0026eeb:	52                   	push   edx
c0026eec:	50                   	push   eax
c0026eed:	e8 3c 07 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026ef2:	83 c4 10             	add    esp,0x10
c0026ef5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026efa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f00:	83 ec 08             	sub    esp,0x8
c0026f03:	68 f5 37 03 c0       	push   0xc00337f5
c0026f08:	50                   	push   eax
c0026f09:	e8 66 07 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026f0e:	83 c4 10             	add    esp,0x10
c0026f11:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026f16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026f20:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026f23:	83 ec 08             	sub    esp,0x8
c0026f26:	52                   	push   edx
c0026f27:	50                   	push   eax
c0026f28:	e8 01 07 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026f2d:	83 c4 10             	add    esp,0x10
c0026f30:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026f35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f3b:	83 ec 08             	sub    esp,0x8
c0026f3e:	68 fd 37 03 c0       	push   0xc00337fd
c0026f43:	50                   	push   eax
c0026f44:	e8 2b 07 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026f49:	83 c4 10             	add    esp,0x10
c0026f4c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026f51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f57:	83 ec 08             	sub    esp,0x8
c0026f5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026f5e:	50                   	push   eax
c0026f5f:	e8 ca 06 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026f64:	83 c4 10             	add    esp,0x10
c0026f67:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026f6c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f72:	83 ec 08             	sub    esp,0x8
c0026f75:	68 06 38 03 c0       	push   0xc0033806
c0026f7a:	50                   	push   eax
c0026f7b:	e8 f4 06 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026f80:	83 c4 10             	add    esp,0x10
c0026f83:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026f88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f8e:	83 ec 08             	sub    esp,0x8
c0026f91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026f95:	50                   	push   eax
c0026f96:	e8 93 06 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026f9b:	83 c4 10             	add    esp,0x10
c0026f9e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026fa3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026fa9:	83 ec 08             	sub    esp,0x8
c0026fac:	68 0e 38 03 c0       	push   0xc003380e
c0026fb1:	50                   	push   eax
c0026fb2:	e8 bd 06 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0026fb7:	83 c4 10             	add    esp,0x10
c0026fba:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026fbf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026fc5:	83 ec 08             	sub    esp,0x8
c0026fc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026fcc:	50                   	push   eax
c0026fcd:	e8 5c 06 ff ff       	call   c001762e <VgaText::putx(unsigned int)>
c0026fd2:	83 c4 10             	add    esp,0x10
c0026fd5:	fa                   	cli    
c0026fd6:	f4                   	hlt    
c0026fd7:	eb fe                	jmp    c0026fd7 <displayDebugInfo(regs*)+0x383>

c0026fd9 <HalSystemIdle()>:
c0026fd9:	56                   	push   esi
c0026fda:	53                   	push   ebx
c0026fdb:	83 ec 14             	sub    esp,0x14
c0026fde:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026fe3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026fe9:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026fef:	83 e0 04             	and    eax,0x4
c0026ff2:	0f b6 c0             	movzx  eax,al
c0026ff5:	85 c0                	test   eax,eax
c0026ff7:	0f 95 c0             	setne  al
c0026ffa:	0f b6 c0             	movzx  eax,al
c0026ffd:	85 c0                	test   eax,eax
c0026fff:	74 4c                	je     c002704d <HalSystemIdle()+0x74>
c0027001:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027006:	83 ec 08             	sub    esp,0x8
c0027009:	68 e1 00 00 00       	push   0xe1
c002700e:	50                   	push   eax
c002700f:	e8 1a ec fe ff       	call   c0015c2e <Computer::rdmsr(unsigned int)>
c0027014:	83 c4 10             	add    esp,0x10
c0027017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002701b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002701f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0027028:	83 e2 02             	and    edx,0x2
c002702b:	89 d3                	mov    ebx,edx
c002702d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027031:	83 e2 00             	and    edx,0x0
c0027034:	89 d6                	mov    esi,edx
c0027036:	56                   	push   esi
c0027037:	53                   	push   ebx
c0027038:	68 e1 00 00 00       	push   0xe1
c002703d:	50                   	push   eax
c002703e:	e8 17 ec fe ff       	call   c0015c5a <Computer::wrmsr(unsigned int, unsigned long long)>
c0027043:	83 c4 10             	add    esp,0x10
c0027046:	e8 49 91 fd ff       	call   c0000194 <doTPAUSE>
c002704b:	eb 01                	jmp    c002704e <HalSystemIdle()+0x75>
c002704d:	f4                   	hlt    
c002704e:	90                   	nop
c002704f:	83 c4 14             	add    esp,0x14
c0027052:	5b                   	pop    ebx
c0027053:	5e                   	pop    esi
c0027054:	c3                   	ret    

c0027055 <displayProgramFault(char const*)>:
c0027055:	83 ec 0c             	sub    esp,0xc
c0027058:	83 ec 0c             	sub    esp,0xc
c002705b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002705f:	e8 6e 24 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0027064:	83 c4 10             	add    esp,0x10
c0027067:	b8 00 20 00 c2       	mov    eax,0xc2002000
c002706c:	8b 00                	mov    eax,DWORD PTR [eax]
c002706e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0027071:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027077:	85 c0                	test   eax,eax
c0027079:	74 21                	je     c002709c <displayProgramFault(char const*)+0x47>
c002707b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0027080:	8b 00                	mov    eax,DWORD PTR [eax]
c0027082:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0027085:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002708b:	6a 04                	push   0x4
c002708d:	6a 0f                	push   0xf
c002708f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0027093:	50                   	push   eax
c0027094:	e8 4d 06 ff ff       	call   c00176e6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0027099:	83 c4 10             	add    esp,0x10
c002709c:	90                   	nop
c002709d:	83 c4 0c             	add    esp,0xc
c00270a0:	c3                   	ret    

c00270a1 <gpFault(regs*, void*)>:
c00270a1:	83 ec 1c             	sub    esp,0x1c
c00270a4:	c7 05 74 02 04 c0 f7 64 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc00264f7
c00270ae:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c00270b3:	85 c0                	test   eax,eax
c00270b5:	74 1e                	je     c00270d5 <gpFault(regs*, void*)+0x34>
c00270b7:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c00270bc:	83 ec 0c             	sub    esp,0xc
c00270bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00270c3:	ff d0                	call   eax
c00270c5:	83 c4 10             	add    esp,0x10
c00270c8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00270cc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00270d1:	85 c0                	test   eax,eax
c00270d3:	75 2e                	jne    c0027103 <gpFault(regs*, void*)+0x62>
c00270d5:	83 ec 0c             	sub    esp,0xc
c00270d8:	68 16 38 03 c0       	push   0xc0033816
c00270dd:	e8 73 ff ff ff       	call   c0027055 <displayProgramFault(char const*)>
c00270e2:	83 c4 10             	add    esp,0x10
c00270e5:	83 ec 0c             	sub    esp,0xc
c00270e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00270ec:	e8 63 fb ff ff       	call   c0026c54 <displayDebugInfo(regs*)>
c00270f1:	83 c4 10             	add    esp,0x10
c00270f4:	83 ec 0c             	sub    esp,0xc
c00270f7:	6a 00                	push   0x0
c00270f9:	e8 4e ed ff ff       	call   c0025e4c <Thr::terminateFromIRQ(int)>
c00270fe:	83 c4 10             	add    esp,0x10
c0027101:	eb 01                	jmp    c0027104 <gpFault(regs*, void*)+0x63>
c0027103:	90                   	nop
c0027104:	83 c4 1c             	add    esp,0x1c
c0027107:	c3                   	ret    

c0027108 <pgFault(regs*, void*)>:
c0027108:	83 ec 1c             	sub    esp,0x1c
c002710b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002710f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0027112:	0f 20 d0             	mov    eax,cr2
c0027115:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002711d:	83 ec 04             	sub    esp,0x4
c0027120:	52                   	push   edx
c0027121:	50                   	push   eax
c0027122:	68 f4 38 03 c0       	push   0xc00338f4
c0027127:	e8 a6 23 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002712c:	83 c4 10             	add    esp,0x10
c002712f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0027134:	8b 00                	mov    eax,DWORD PTR [eax]
c0027136:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0027139:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c002713f:	0f 20 d2             	mov    edx,cr2
c0027142:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0027146:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002714a:	83 ec 08             	sub    esp,0x8
c002714d:	52                   	push   edx
c002714e:	50                   	push   eax
c002714f:	e8 ee 1d ff ff       	call   c0018f42 <VAS::tryLoadBackOffDisk(unsigned long)>
c0027154:	83 c4 10             	add    esp,0x10
c0027157:	0f b6 c0             	movzx  eax,al
c002715a:	85 c0                	test   eax,eax
c002715c:	75 2e                	jne    c002718c <pgFault(regs*, void*)+0x84>
c002715e:	83 ec 0c             	sub    esp,0xc
c0027161:	68 2f 38 03 c0       	push   0xc003382f
c0027166:	e8 ea fe ff ff       	call   c0027055 <displayProgramFault(char const*)>
c002716b:	83 c4 10             	add    esp,0x10
c002716e:	83 ec 0c             	sub    esp,0xc
c0027171:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027175:	e8 da fa ff ff       	call   c0026c54 <displayDebugInfo(regs*)>
c002717a:	83 c4 10             	add    esp,0x10
c002717d:	83 ec 0c             	sub    esp,0xc
c0027180:	6a 00                	push   0x0
c0027182:	e8 c5 ec ff ff       	call   c0025e4c <Thr::terminateFromIRQ(int)>
c0027187:	83 c4 10             	add    esp,0x10
c002718a:	eb 01                	jmp    c002718d <pgFault(regs*, void*)+0x85>
c002718c:	90                   	nop
c002718d:	83 c4 1c             	add    esp,0x1c
c0027190:	c3                   	ret    

c0027191 <otherISRHandler(regs*, void*)>:
c0027191:	83 ec 0c             	sub    esp,0xc
c0027194:	83 ec 0c             	sub    esp,0xc
c0027197:	68 1c 39 03 c0       	push   0xc003391c
c002719c:	e8 b4 fe ff ff       	call   c0027055 <displayProgramFault(char const*)>
c00271a1:	83 c4 10             	add    esp,0x10
c00271a4:	83 ec 0c             	sub    esp,0xc
c00271a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271ab:	e8 a4 fa ff ff       	call   c0026c54 <displayDebugInfo(regs*)>
c00271b0:	83 c4 10             	add    esp,0x10
c00271b3:	83 ec 0c             	sub    esp,0xc
c00271b6:	6a 00                	push   0x0
c00271b8:	e8 8f ec ff ff       	call   c0025e4c <Thr::terminateFromIRQ(int)>
c00271bd:	83 c4 10             	add    esp,0x10
c00271c0:	90                   	nop
c00271c1:	83 c4 0c             	add    esp,0xc
c00271c4:	c3                   	ret    

c00271c5 <opcodeFault(regs*, void*)>:
c00271c5:	55                   	push   ebp
c00271c6:	89 e5                	mov    ebp,esp
c00271c8:	83 ec 08             	sub    esp,0x8
c00271cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00271ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00271d1:	83 ec 08             	sub    esp,0x8
c00271d4:	50                   	push   eax
c00271d5:	68 3a 38 03 c0       	push   0xc003383a
c00271da:	e8 f3 22 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00271df:	83 c4 10             	add    esp,0x10
c00271e2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00271e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00271ed:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00271f3:	0f b6 c0             	movzx  eax,al
c00271f6:	85 c0                	test   eax,eax
c00271f8:	74 21                	je     c002721b <opcodeFault(regs*, void*)+0x56>
c00271fa:	83 ec 0c             	sub    esp,0xc
c00271fd:	68 44 39 03 c0       	push   0xc0033944
c0027202:	e8 cb 22 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0027207:	83 c4 10             	add    esp,0x10
c002720a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002720d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0027210:	8d 50 19             	lea    edx,[eax+0x19]
c0027213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027216:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0027219:	eb 2b                	jmp    c0027246 <opcodeFault(regs*, void*)+0x81>
c002721b:	83 ec 0c             	sub    esp,0xc
c002721e:	68 48 38 03 c0       	push   0xc0033848
c0027223:	e8 2d fe ff ff       	call   c0027055 <displayProgramFault(char const*)>
c0027228:	83 c4 10             	add    esp,0x10
c002722b:	83 ec 0c             	sub    esp,0xc
c002722e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027231:	e8 1e fa ff ff       	call   c0026c54 <displayDebugInfo(regs*)>
c0027236:	83 c4 10             	add    esp,0x10
c0027239:	83 ec 0c             	sub    esp,0xc
c002723c:	6a 00                	push   0x0
c002723e:	e8 09 ec ff ff       	call   c0025e4c <Thr::terminateFromIRQ(int)>
c0027243:	83 c4 10             	add    esp,0x10
c0027246:	c9                   	leave  
c0027247:	c3                   	ret    

c0027248 <i386SaveCoprocessor(void*)>:
c0027248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002724c:	83 c0 3f             	add    eax,0x3f
c002724f:	83 e0 c0             	and    eax,0xffffffc0
c0027252:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027256:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c002725c <i386LoadCoprocessor(void*)>:
c002725c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027260:	83 c0 3f             	add    eax,0x3f
c0027263:	83 e0 c0             	and    eax,0xffffffc0
c0027266:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002726a:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0027270 <x87EmulHandler(regs*, void*)>:
c0027270:	53                   	push   ebx
c0027271:	83 ec 08             	sub    esp,0x8
c0027274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0027279:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c002727d:	74 10                	je     c002728f <x87EmulHandler(regs*, void*)+0x1f>
c002727f:	83 ec 0c             	sub    esp,0xc
c0027282:	68 55 38 03 c0       	push   0xc0033855
c0027287:	e8 0a 93 ff ff       	call   c0020596 <KePanic(char const*)>
c002728c:	83 c4 10             	add    esp,0x10
c002728f:	0f 20 c0             	mov    eax,cr0
c0027292:	a8 08                	test   al,0x8
c0027294:	74 59                	je     c00272ef <x87EmulHandler(regs*, void*)+0x7f>
c0027296:	0f 06                	clts   
c0027298:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c002729d:	85 c0                	test   eax,eax
c002729f:	74 0e                	je     c00272af <x87EmulHandler(regs*, void*)+0x3f>
c00272a1:	83 ec 0c             	sub    esp,0xc
c00272a4:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00272a7:	e8 9c ff ff ff       	call   c0027248 <i386SaveCoprocessor(void*)>
c00272ac:	83 c4 10             	add    esp,0x10
c00272af:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00272b5:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00272b9:	75 12                	jne    c00272cd <x87EmulHandler(regs*, void*)+0x5d>
c00272bb:	83 ec 0c             	sub    esp,0xc
c00272be:	68 40 02 00 00       	push   0x240
c00272c3:	e8 d4 f3 fe ff       	call   c001669c <malloc>
c00272c8:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00272cb:	eb 10                	jmp    c00272dd <x87EmulHandler(regs*, void*)+0x6d>
c00272cd:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c00272d2:	83 ec 0c             	sub    esp,0xc
c00272d5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00272d8:	e8 7f ff ff ff       	call   c002725c <i386LoadCoprocessor(void*)>
c00272dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00272e2:	83 c4 10             	add    esp,0x10
c00272e5:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c00272ea:	83 c4 08             	add    esp,0x8
c00272ed:	5b                   	pop    ebx
c00272ee:	c3                   	ret    
c00272ef:	83 ec 0c             	sub    esp,0xc
c00272f2:	68 69 38 03 c0       	push   0xc0033869
c00272f7:	e8 d6 21 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00272fc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0027304:	83 c4 18             	add    esp,0x18
c0027307:	5b                   	pop    ebx
c0027308:	e9 3f eb ff ff       	jmp    c0025e4c <Thr::terminateFromIRQ(int)>

c002730d <HalInitialiseCoprocessor()>:
c002730d:	83 ec 10             	sub    esp,0x10
c0027310:	6a 00                	push   0x0
c0027312:	68 70 72 02 c0       	push   0xc0027270
c0027317:	6a 07                	push   0x7
c0027319:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0027323:	e8 c6 48 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027328:	e8 63 71 00 00       	call   c002e490 <avxDetect>
c002732d:	83 c4 10             	add    esp,0x10
c0027330:	85 c0                	test   eax,eax
c0027332:	74 1c                	je     c0027350 <HalInitialiseCoprocessor()+0x43>
c0027334:	c7 05 70 02 04 c0 ba e4 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e4ba
c002733e:	c7 05 6c 02 04 c0 cb e4 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e4cb
c0027348:	83 c4 0c             	add    esp,0xc
c002734b:	e9 8c 71 00 00       	jmp    c002e4dc <avxInit>
c0027350:	e8 ab 74 00 00       	call   c002e800 <sseDetect>
c0027355:	85 c0                	test   eax,eax
c0027357:	74 1c                	je     c0027375 <HalInitialiseCoprocessor()+0x68>
c0027359:	c7 05 70 02 04 c0 18 e8 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e818
c0027363:	c7 05 6c 02 04 c0 20 e8 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e820
c002736d:	83 c4 0c             	add    esp,0xc
c0027370:	e9 b3 74 00 00       	jmp    c002e828 <sseInit>
c0027375:	e8 cc 74 00 00       	call   c002e846 <x87Detect>
c002737a:	85 c0                	test   eax,eax
c002737c:	74 1c                	je     c002739a <HalInitialiseCoprocessor()+0x8d>
c002737e:	c7 05 70 02 04 c0 61 e8 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e861
c0027388:	c7 05 6c 02 04 c0 68 e8 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e868
c0027392:	83 c4 0c             	add    esp,0xc
c0027395:	e9 d5 74 00 00       	jmp    c002e86f <x87Init>
c002739a:	c7 05 70 02 04 c0 21 6c 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc0026c21
c00273a4:	c7 05 6c 02 04 c0 21 6c 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc0026c21
c00273ae:	0f 20 c0             	mov    eax,cr0
c00273b1:	83 c8 04             	or     eax,0x4
c00273b4:	0f 22 c0             	mov    cr0,eax
c00273b7:	83 c4 0c             	add    esp,0xc
c00273ba:	c3                   	ret    

c00273bb <HalPanic(char const*)>:
c00273bb:	53                   	push   ebx
c00273bc:	83 ec 10             	sub    esp,0x10
c00273bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00273c3:	fa                   	cli    
c00273c4:	53                   	push   ebx
c00273c5:	68 7f 38 03 c0       	push   0xc003387f
c00273ca:	e8 03 21 ff ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00273cf:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c00273d4:	83 c4 10             	add    esp,0x10
c00273d7:	85 c0                	test   eax,eax
c00273d9:	74 09                	je     c00273e4 <HalPanic(char const*)+0x29>
c00273db:	83 ec 0c             	sub    esp,0xc
c00273de:	53                   	push   ebx
c00273df:	ff d0                	call   eax
c00273e1:	83 c4 10             	add    esp,0x10
c00273e4:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c00273e9:	85 c0                	test   eax,eax
c00273eb:	0f 84 dc 00 00 00    	je     c00274cd <HalPanic(char const*)+0x112>
c00273f1:	52                   	push   edx
c00273f2:	6a 01                	push   0x1
c00273f4:	6a 0f                	push   0xf
c00273f6:	50                   	push   eax
c00273f7:	e8 96 fd fe ff       	call   c0017192 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00273fc:	59                   	pop    ecx
c00273fd:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027403:	e8 7a ff fe ff       	call   c0017382 <VgaText::clearScreen()>
c0027408:	58                   	pop    eax
c0027409:	5a                   	pop    edx
c002740a:	68 20 18 03 c0       	push   0xc0031820
c002740f:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027415:	e8 b0 fd fe ff       	call   c00171ca <VgaText::setTitle(char*)>
c002741a:	83 c4 0c             	add    esp,0xc
c002741d:	6a 01                	push   0x1
c002741f:	6a 0f                	push   0xf
c0027421:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027427:	e8 66 fd fe ff       	call   c0017192 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002742c:	59                   	pop    ecx
c002742d:	58                   	pop    eax
c002742e:	68 98 38 03 c0       	push   0xc0033898
c0027433:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027439:	e8 36 02 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c002743e:	83 c4 0c             	add    esp,0xc
c0027441:	6a 0f                	push   0xf
c0027443:	6a 01                	push   0x1
c0027445:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002744b:	e8 42 fd fe ff       	call   c0017192 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027450:	58                   	pop    eax
c0027451:	5a                   	pop    edx
c0027452:	68 a1 38 03 c0       	push   0xc00338a1
c0027457:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002745d:	e8 12 02 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0027462:	83 c4 0c             	add    esp,0xc
c0027465:	6a 01                	push   0x1
c0027467:	6a 0f                	push   0xf
c0027469:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002746f:	e8 1e fd fe ff       	call   c0017192 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027474:	59                   	pop    ecx
c0027475:	58                   	pop    eax
c0027476:	68 e5 38 03 c0       	push   0xc00338e5
c002747b:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027481:	e8 ee 01 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0027486:	58                   	pop    eax
c0027487:	5a                   	pop    edx
c0027488:	68 ae 38 03 c0       	push   0xc00338ae
c002748d:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027493:	e8 dc 01 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c0027498:	59                   	pop    ecx
c0027499:	58                   	pop    eax
c002749a:	68 e8 38 03 c0       	push   0xc00338e8
c002749f:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00274a5:	e8 ca 01 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c00274aa:	58                   	pop    eax
c00274ab:	5a                   	pop    edx
c00274ac:	53                   	push   ebx
c00274ad:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00274b3:	e8 bc 01 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c00274b8:	59                   	pop    ecx
c00274b9:	5b                   	pop    ebx
c00274ba:	68 e5 38 03 c0       	push   0xc00338e5
c00274bf:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00274c5:	e8 aa 01 ff ff       	call   c0017674 <VgaText::puts(char const*)>
c00274ca:	83 c4 10             	add    esp,0x10
c00274cd:	eb fe                	jmp    c00274cd <HalPanic(char const*)+0x112>

c00274cf <HalQueryPerformanceCounter()>:
c00274cf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00274d4:	31 d2                	xor    edx,edx
c00274d6:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00274dc:	31 c0                	xor    eax,eax
c00274de:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00274e5:	74 02                	je     c00274e9 <HalQueryPerformanceCounter()+0x1a>
c00274e7:	0f 31                	rdtsc  
c00274e9:	c3                   	ret    

c00274ea <HalInitialise()>:
c00274ea:	53                   	push   ebx
c00274eb:	83 ec 08             	sub    esp,0x8
c00274ee:	e8 32 49 ff ff       	call   c001be25 <setupINTS()>
c00274f3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00274f8:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c00274ff:	75 0f                	jne    c0027510 <HalInitialise()+0x26>
c0027501:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0027507:	83 e2 fe             	and    edx,0xfffffffe
c002750a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0027510:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0027517:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c002751d:	83 e2 fe             	and    edx,0xfffffffe
c0027520:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0027526:	e8 a1 02 00 00       	call   c00277cc <picOpen()>
c002752b:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0027532:	74 0a                	je     c002753e <HalInitialise()+0x54>
c0027534:	e8 e3 01 00 00       	call   c002771c <picDisable()>
c0027539:	e8 c4 68 00 00       	call   c002de02 <apicOpen()>
c002753e:	50                   	push   eax
c002753f:	bb 0f 00 00 00       	mov    ebx,0xf
c0027544:	6a 00                	push   0x0
c0027546:	68 91 71 02 c0       	push   0xc0027191
c002754b:	6a 00                	push   0x0
c002754d:	e8 9c 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027552:	83 c4 0c             	add    esp,0xc
c0027555:	6a 00                	push   0x0
c0027557:	68 91 71 02 c0       	push   0xc0027191
c002755c:	6a 01                	push   0x1
c002755e:	e8 8b 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027563:	83 c4 0c             	add    esp,0xc
c0027566:	6a 00                	push   0x0
c0027568:	68 22 6c 02 c0       	push   0xc0026c22
c002756d:	6a 02                	push   0x2
c002756f:	e8 7a 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027574:	83 c4 0c             	add    esp,0xc
c0027577:	6a 00                	push   0x0
c0027579:	68 91 71 02 c0       	push   0xc0027191
c002757e:	6a 03                	push   0x3
c0027580:	e8 69 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027585:	83 c4 0c             	add    esp,0xc
c0027588:	6a 00                	push   0x0
c002758a:	68 91 71 02 c0       	push   0xc0027191
c002758f:	6a 04                	push   0x4
c0027591:	e8 58 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027596:	83 c4 0c             	add    esp,0xc
c0027599:	6a 00                	push   0x0
c002759b:	68 91 71 02 c0       	push   0xc0027191
c00275a0:	6a 05                	push   0x5
c00275a2:	e8 47 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275a7:	83 c4 0c             	add    esp,0xc
c00275aa:	6a 00                	push   0x0
c00275ac:	68 c5 71 02 c0       	push   0xc00271c5
c00275b1:	6a 06                	push   0x6
c00275b3:	e8 36 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275b8:	83 c4 0c             	add    esp,0xc
c00275bb:	6a 00                	push   0x0
c00275bd:	68 3b 6c 02 c0       	push   0xc0026c3b
c00275c2:	6a 08                	push   0x8
c00275c4:	e8 25 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275c9:	83 c4 0c             	add    esp,0xc
c00275cc:	6a 00                	push   0x0
c00275ce:	68 91 71 02 c0       	push   0xc0027191
c00275d3:	6a 09                	push   0x9
c00275d5:	e8 14 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275da:	83 c4 0c             	add    esp,0xc
c00275dd:	6a 00                	push   0x0
c00275df:	68 91 71 02 c0       	push   0xc0027191
c00275e4:	6a 0a                	push   0xa
c00275e6:	e8 03 46 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275eb:	83 c4 0c             	add    esp,0xc
c00275ee:	6a 00                	push   0x0
c00275f0:	68 91 71 02 c0       	push   0xc0027191
c00275f5:	6a 0b                	push   0xb
c00275f7:	e8 f2 45 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275fc:	83 c4 0c             	add    esp,0xc
c00275ff:	6a 00                	push   0x0
c0027601:	68 a1 70 02 c0       	push   0xc00270a1
c0027606:	6a 0d                	push   0xd
c0027608:	e8 e1 45 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c002760d:	83 c4 0c             	add    esp,0xc
c0027610:	6a 00                	push   0x0
c0027612:	68 08 71 02 c0       	push   0xc0027108
c0027617:	6a 0e                	push   0xe
c0027619:	e8 d0 45 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c002761e:	83 c4 10             	add    esp,0x10
c0027621:	50                   	push   eax
c0027622:	6a 00                	push   0x0
c0027624:	68 91 71 02 c0       	push   0xc0027191
c0027629:	53                   	push   ebx
c002762a:	43                   	inc    ebx
c002762b:	e8 be 45 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027630:	83 c4 10             	add    esp,0x10
c0027633:	83 fb 1e             	cmp    ebx,0x1e
c0027636:	75 e9                	jne    c0027621 <HalInitialise()+0x137>
c0027638:	50                   	push   eax
c0027639:	6a 00                	push   0x0
c002763b:	68 60 1e 02 c0       	push   0xc0021e60
c0027640:	6a 60                	push   0x60
c0027642:	e8 a7 45 ff ff       	call   c001bbee <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027647:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002764c:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0027656:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c002765d:	e8 3a f0 fe ff       	call   c001669c <malloc>
c0027662:	89 04 24             	mov    DWORD PTR [esp],eax
c0027665:	89 c3                	mov    ebx,eax
c0027667:	e8 38 09 00 00       	call   c0027fa4 <RTC::RTC()>
c002766c:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0027676:	5a                   	pop    edx
c0027677:	59                   	pop    ecx
c0027678:	53                   	push   ebx
c0027679:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002767f:	e8 20 40 ff ff       	call   c001b6a4 <Device::addChild(Device*)>
c0027684:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027686:	6a 00                	push   0x0
c0027688:	6a 00                	push   0x0
c002768a:	6a 00                	push   0x0
c002768c:	53                   	push   ebx
c002768d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027690:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027695:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c002769b:	83 c4 28             	add    esp,0x28
c002769e:	5b                   	pop    ebx
c002769f:	c3                   	ret    

c00276a0 <HalMakeBeep(int)>:
c00276a0:	53                   	push   ebx
c00276a1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00276a5:	85 db                	test   ebx,ebx
c00276a7:	75 07                	jne    c00276b0 <HalMakeBeep(int)+0x10>
c00276a9:	e4 61                	in     al,0x61
c00276ab:	83 e0 fc             	and    eax,0xfffffffc
c00276ae:	eb 26                	jmp    c00276d6 <HalMakeBeep(int)+0x36>
c00276b0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00276b5:	99                   	cdq    
c00276b6:	f7 fb                	idiv   ebx
c00276b8:	89 c1                	mov    ecx,eax
c00276ba:	b0 b6                	mov    al,0xb6
c00276bc:	e6 43                	out    0x43,al
c00276be:	88 c8                	mov    al,cl
c00276c0:	e6 42                	out    0x42,al
c00276c2:	89 c8                	mov    eax,ecx
c00276c4:	c1 e8 08             	shr    eax,0x8
c00276c7:	e6 42                	out    0x42,al
c00276c9:	e4 61                	in     al,0x61
c00276cb:	89 c2                	mov    edx,eax
c00276cd:	83 ca 03             	or     edx,0x3
c00276d0:	38 d0                	cmp    al,dl
c00276d2:	74 04                	je     c00276d8 <HalMakeBeep(int)+0x38>
c00276d4:	88 d0                	mov    al,dl
c00276d6:	e6 61                	out    0x61,al
c00276d8:	5b                   	pop    ebx
c00276d9:	c3                   	ret    

c00276da <HalGetRand()>:
c00276da:	31 c0                	xor    eax,eax
c00276dc:	c3                   	ret    

c00276dd <HalEndOfInterrupt(int)>:
c00276dd:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00276e4:	74 23                	je     c0027709 <HalEndOfInterrupt(int)+0x2c>
c00276e6:	83 ec 14             	sub    esp,0x14
c00276e9:	6a 1b                	push   0x1b
c00276eb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276f1:	e8 38 e5 fe ff       	call   c0015c2e <Computer::rdmsr(unsigned int)>
c00276f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00276fb:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0027705:	83 c4 1c             	add    esp,0x1c
c0027708:	c3                   	ret    
c0027709:	e9 42 02 00 00       	jmp    c0027950 <picEOI(int)>

c002770e <HalRestart()>:
c002770e:	c3                   	ret    

c002770f <HalShutdown()>:
c002770f:	c3                   	ret    

c0027710 <HalSleep()>:
c0027710:	c3                   	ret    
c0027711:	66 90                	xchg   ax,ax
c0027713:	90                   	nop

c0027714 <picIoWait()>:
c0027714:	eb 00                	jmp    c0027716 <picIoWait()+0x2>
c0027716:	eb 00                	jmp    c0027718 <picIoWait()+0x4>
c0027718:	90                   	nop
c0027719:	c3                   	ret    
c002771a:	66 90                	xchg   ax,ax

c002771c <picDisable()>:
c002771c:	83 ec 10             	sub    esp,0x10
c002771f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0027726:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c002772b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002772f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027734:	ee                   	out    dx,al
c0027735:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c002773c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0027741:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027745:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c002774a:	ee                   	out    dx,al
c002774b:	90                   	nop
c002774c:	83 c4 10             	add    esp,0x10
c002774f:	c3                   	ret    

c0027750 <picGetIRQReg(int)>:
c0027750:	83 ec 10             	sub    esp,0x10
c0027753:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027757:	0f b6 c0             	movzx  eax,al
c002775a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027761:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0027765:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027769:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002776e:	ee                   	out    dx,al
c002776f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027773:	0f b6 c0             	movzx  eax,al
c0027776:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002777d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027781:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027785:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002778a:	ee                   	out    dx,al
c002778b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0027792:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0027797:	89 c2                	mov    edx,eax
c0027799:	ec                   	in     al,dx
c002779a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002779e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00277a2:	0f b6 c0             	movzx  eax,al
c00277a5:	c1 e0 08             	shl    eax,0x8
c00277a8:	89 c1                	mov    ecx,eax
c00277aa:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00277b1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00277b6:	89 c2                	mov    edx,eax
c00277b8:	ec                   	in     al,dx
c00277b9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00277bd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00277c1:	0f b6 c0             	movzx  eax,al
c00277c4:	09 c8                	or     eax,ecx
c00277c6:	83 c4 10             	add    esp,0x10
c00277c9:	c3                   	ret    
c00277ca:	66 90                	xchg   ax,ax

c00277cc <picOpen()>:
c00277cc:	83 ec 50             	sub    esp,0x50
c00277cf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00277d6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00277db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00277df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00277e3:	ee                   	out    dx,al
c00277e4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00277eb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00277f0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00277f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00277f8:	ee                   	out    dx,al
c00277f9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0027801:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0027809:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0027810:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027814:	89 c2                	mov    edx,eax
c0027816:	ec                   	in     al,dx
c0027817:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c002781b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c002781f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0027823:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c002782a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002782e:	89 c2                	mov    edx,eax
c0027830:	ec                   	in     al,dx
c0027831:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027835:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027839:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c002783d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0027844:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027849:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c002784d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027851:	ee                   	out    dx,al
c0027852:	e8 bd fe ff ff       	call   c0027714 <picIoWait()>
c0027857:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c002785e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0027863:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0027867:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002786b:	ee                   	out    dx,al
c002786c:	e8 a3 fe ff ff       	call   c0027714 <picIoWait()>
c0027871:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0027875:	0f b6 c0             	movzx  eax,al
c0027878:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c002787f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0027883:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0027887:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002788b:	ee                   	out    dx,al
c002788c:	e8 83 fe ff ff       	call   c0027714 <picIoWait()>
c0027891:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027895:	0f b6 c0             	movzx  eax,al
c0027898:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c002789f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00278a3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00278a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00278ab:	ee                   	out    dx,al
c00278ac:	e8 63 fe ff ff       	call   c0027714 <picIoWait()>
c00278b1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00278b8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00278bd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00278c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00278c5:	ee                   	out    dx,al
c00278c6:	e8 49 fe ff ff       	call   c0027714 <picIoWait()>
c00278cb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00278d2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00278d7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00278db:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00278df:	ee                   	out    dx,al
c00278e0:	e8 2f fe ff ff       	call   c0027714 <picIoWait()>
c00278e5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00278ec:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00278f1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00278f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00278f9:	ee                   	out    dx,al
c00278fa:	e8 15 fe ff ff       	call   c0027714 <picIoWait()>
c00278ff:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0027906:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c002790b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c002790f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027913:	ee                   	out    dx,al
c0027914:	e8 fb fd ff ff       	call   c0027714 <picIoWait()>
c0027919:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c002791e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0027925:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027929:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c002792d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0027931:	ee                   	out    dx,al
c0027932:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0027937:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c002793e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0027942:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0027946:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c002794a:	ee                   	out    dx,al
c002794b:	90                   	nop
c002794c:	83 c4 50             	add    esp,0x50
c002794f:	c3                   	ret    

c0027950 <picEOI(int)>:
c0027950:	83 ec 10             	sub    esp,0x10
c0027953:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027958:	75 1e                	jne    c0027978 <picEOI(int)+0x28>
c002795a:	6a 0b                	push   0xb
c002795c:	e8 ef fd ff ff       	call   c0027750 <picGetIRQReg(int)>
c0027961:	83 c4 04             	add    esp,0x4
c0027964:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027969:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c002796e:	25 80 00 00 00       	and    eax,0x80
c0027973:	74 73                	je     c00279e8 <picEOI(int)+0x98>
c0027975:	8d 76 00             	lea    esi,[esi+0x0]
c0027978:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c002797d:	75 31                	jne    c00279b0 <picEOI(int)+0x60>
c002797f:	6a 0b                	push   0xb
c0027981:	e8 ca fd ff ff       	call   c0027750 <picGetIRQReg(int)>
c0027986:	83 c4 04             	add    esp,0x4
c0027989:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c002798e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027992:	98                   	cwde   
c0027993:	85 c0                	test   eax,eax
c0027995:	78 19                	js     c00279b0 <picEOI(int)+0x60>
c0027997:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c002799e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00279a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00279a7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00279ac:	ee                   	out    dx,al
c00279ad:	eb 3d                	jmp    c00279ec <picEOI(int)+0x9c>
c00279af:	90                   	nop
c00279b0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00279b5:	7e 19                	jle    c00279d0 <picEOI(int)+0x80>
c00279b7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00279be:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00279c3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00279c7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00279cc:	ee                   	out    dx,al
c00279cd:	8d 76 00             	lea    esi,[esi+0x0]
c00279d0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00279d7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00279dc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00279e0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00279e5:	ee                   	out    dx,al
c00279e6:	eb 04                	jmp    c00279ec <picEOI(int)+0x9c>
c00279e8:	90                   	nop
c00279e9:	8d 76 00             	lea    esi,[esi+0x0]
c00279ec:	83 c4 10             	add    esp,0x10
c00279ef:	c3                   	ret    

c00279f0 <RTC::open(int, int, void*)>:
c00279f0:	31 c0                	xor    eax,eax
c00279f2:	c3                   	ret    
c00279f3:	90                   	nop

c00279f4 <RTC::close(int, int, void*)>:
c00279f4:	31 c0                	xor    eax,eax
c00279f6:	c3                   	ret    
c00279f7:	90                   	nop

c00279f8 <RTC::timeInSecondsUTC()>:
c00279f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00279fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0027a02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0027a08:	c3                   	ret    
c0027a09:	90                   	nop

c0027a0a <RTC::timeInDatetimeUTC()>:
c0027a0a:	53                   	push   ebx
c0027a0b:	83 ec 14             	sub    esp,0x14
c0027a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027a16:	8b 10                	mov    edx,DWORD PTR [eax]
c0027a18:	50                   	push   eax
c0027a19:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0027a1c:	83 c4 0c             	add    esp,0xc
c0027a1f:	52                   	push   edx
c0027a20:	50                   	push   eax
c0027a21:	53                   	push   ebx
c0027a22:	e8 f1 39 ff ff       	call   c001b418 <secondsToDatetime(unsigned long long)>
c0027a27:	89 d8                	mov    eax,ebx
c0027a29:	83 c4 14             	add    esp,0x14
c0027a2c:	5b                   	pop    ebx
c0027a2d:	c2 04 00             	ret    0x4

c0027a30 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027a30:	56                   	push   esi
c0027a31:	53                   	push   ebx
c0027a32:	83 ec 14             	sub    esp,0x14
c0027a35:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027a39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027a3b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0027a3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027a42:	52                   	push   edx
c0027a43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027a47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027a4b:	50                   	push   eax
c0027a4c:	e8 c7 39 ff ff       	call   c001b418 <secondsToDatetime(unsigned long long)>
c0027a51:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0027a55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027a59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027a5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027a61:	89 f0                	mov    eax,esi
c0027a63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0027a67:	83 c4 20             	add    esp,0x20
c0027a6a:	5b                   	pop    ebx
c0027a6b:	5e                   	pop    esi
c0027a6c:	ff e0                	jmp    eax

c0027a6e <RTC::~RTC()>:
c0027a6e:	83 ec 0c             	sub    esp,0xc
c0027a71:	ba 84 39 03 c0       	mov    edx,0xc0033984
c0027a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a7a:	89 10                	mov    DWORD PTR [eax],edx
c0027a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a80:	83 ec 0c             	sub    esp,0xc
c0027a83:	50                   	push   eax
c0027a84:	e8 1b 37 ff ff       	call   c001b1a4 <Clock::~Clock()>
c0027a89:	83 c4 10             	add    esp,0x10
c0027a8c:	90                   	nop
c0027a8d:	83 c4 0c             	add    esp,0xc
c0027a90:	c3                   	ret    
c0027a91:	90                   	nop

c0027a92 <RTC::~RTC()>:
c0027a92:	83 ec 0c             	sub    esp,0xc
c0027a95:	83 ec 0c             	sub    esp,0xc
c0027a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a9c:	e8 cd ff ff ff       	call   c0027a6e <RTC::~RTC()>
c0027aa1:	83 c4 10             	add    esp,0x10
c0027aa4:	83 ec 08             	sub    esp,0x8
c0027aa7:	68 60 01 00 00       	push   0x160
c0027aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ab0:	e8 1f 19 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c0027ab5:	83 c4 10             	add    esp,0x10
c0027ab8:	83 c4 0c             	add    esp,0xc
c0027abb:	c3                   	ret    

c0027abc <RTC::get_update_in_progress_flag()>:
c0027abc:	83 ec 14             	sub    esp,0x14
c0027abf:	6a 0a                	push   0xa
c0027ac1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ac7:	e8 1a e2 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027acc:	83 c4 1c             	add    esp,0x1c
c0027acf:	0f b6 c0             	movzx  eax,al
c0027ad2:	c1 e8 07             	shr    eax,0x7
c0027ad5:	c3                   	ret    

c0027ad6 <RTC::completeRTCRefresh()>:
c0027ad6:	55                   	push   ebp
c0027ad7:	57                   	push   edi
c0027ad8:	56                   	push   esi
c0027ad9:	53                   	push   ebx
c0027ada:	83 ec 3c             	sub    esp,0x3c
c0027add:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027ae3:	83 ec 0c             	sub    esp,0xc
c0027ae6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027aea:	e8 cd ff ff ff       	call   c0027abc <RTC::get_update_in_progress_flag()>
c0027aef:	83 c4 10             	add    esp,0x10
c0027af2:	84 c0                	test   al,al
c0027af4:	74 0e                	je     c0027b04 <RTC::completeRTCRefresh()+0x2e>
c0027af6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027afc:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027b02:	73 df                	jae    c0027ae3 <RTC::completeRTCRefresh()+0xd>
c0027b04:	50                   	push   eax
c0027b05:	50                   	push   eax
c0027b06:	6a 00                	push   0x0
c0027b08:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b0e:	e8 d3 e1 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027b13:	89 c7                	mov    edi,eax
c0027b15:	58                   	pop    eax
c0027b16:	5a                   	pop    edx
c0027b17:	6a 02                	push   0x2
c0027b19:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b1f:	e8 c2 e1 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027b24:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027b28:	59                   	pop    ecx
c0027b29:	5b                   	pop    ebx
c0027b2a:	6a 04                	push   0x4
c0027b2c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b32:	e8 af e1 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027b37:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0027b3b:	5e                   	pop    esi
c0027b3c:	5d                   	pop    ebp
c0027b3d:	6a 07                	push   0x7
c0027b3f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b45:	e8 9c e1 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027b4a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0027b4e:	58                   	pop    eax
c0027b4f:	5a                   	pop    edx
c0027b50:	6a 08                	push   0x8
c0027b52:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b58:	e8 89 e1 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027b5d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027b61:	59                   	pop    ecx
c0027b62:	5b                   	pop    ebx
c0027b63:	6a 09                	push   0x9
c0027b65:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b6b:	e8 76 e1 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027b70:	0f b6 c0             	movzx  eax,al
c0027b73:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027b77:	83 c4 10             	add    esp,0x10
c0027b7a:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027b80:	83 ec 0c             	sub    esp,0xc
c0027b83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027b87:	e8 30 ff ff ff       	call   c0027abc <RTC::get_update_in_progress_flag()>
c0027b8c:	83 c4 10             	add    esp,0x10
c0027b8f:	84 c0                	test   al,al
c0027b91:	74 0e                	je     c0027ba1 <RTC::completeRTCRefresh()+0xcb>
c0027b93:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027b99:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027b9f:	73 df                	jae    c0027b80 <RTC::completeRTCRefresh()+0xaa>
c0027ba1:	51                   	push   ecx
c0027ba2:	51                   	push   ecx
c0027ba3:	6a 00                	push   0x0
c0027ba5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027bab:	e8 36 e1 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027bb0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027bb4:	5b                   	pop    ebx
c0027bb5:	5e                   	pop    esi
c0027bb6:	6a 02                	push   0x2
c0027bb8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027bbe:	e8 23 e1 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027bc3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027bc7:	5d                   	pop    ebp
c0027bc8:	58                   	pop    eax
c0027bc9:	6a 04                	push   0x4
c0027bcb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027bd1:	e8 10 e1 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027bd6:	88 c3                	mov    bl,al
c0027bd8:	58                   	pop    eax
c0027bd9:	5a                   	pop    edx
c0027bda:	6a 07                	push   0x7
c0027bdc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027be2:	e8 ff e0 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027be7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027beb:	59                   	pop    ecx
c0027bec:	5e                   	pop    esi
c0027bed:	6a 08                	push   0x8
c0027bef:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027bf5:	e8 ec e0 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027bfa:	5d                   	pop    ebp
c0027bfb:	89 c6                	mov    esi,eax
c0027bfd:	58                   	pop    eax
c0027bfe:	6a 09                	push   0x9
c0027c00:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027c06:	e8 db e0 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027c0b:	89 f9                	mov    ecx,edi
c0027c0d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027c11:	83 c4 10             	add    esp,0x10
c0027c14:	0f b6 e8             	movzx  ebp,al
c0027c17:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027c1c:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0027c20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027c24:	74 27                	je     c0027c4d <RTC::completeRTCRefresh()+0x177>
c0027c26:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027c2a:	89 f0                	mov    eax,esi
c0027c2c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027c30:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027c34:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027c38:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027c3c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027c40:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027c44:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027c48:	e9 2d ff ff ff       	jmp    c0027b7a <RTC::completeRTCRefresh()+0xa4>
c0027c4d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027c52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0027c56:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027c5a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0027c5e:	75 c6                	jne    c0027c26 <RTC::completeRTCRefresh()+0x150>
c0027c60:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0027c65:	89 f1                	mov    ecx,esi
c0027c67:	0f b6 fb             	movzx  edi,bl
c0027c6a:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027c6e:	0f b6 c9             	movzx  ecx,cl
c0027c71:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027c75:	89 f1                	mov    ecx,esi
c0027c77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027c7b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027c7f:	0f 94 c2             	sete   dl
c0027c82:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027c86:	0f 94 c0             	sete   al
c0027c89:	21 d0                	and    eax,edx
c0027c8b:	31 d2                	xor    edx,edx
c0027c8d:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027c91:	0f 94 c2             	sete   dl
c0027c94:	85 c2                	test   edx,eax
c0027c96:	74 8e                	je     c0027c26 <RTC::completeRTCRefresh()+0x150>
c0027c98:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027c9c:	75 88                	jne    c0027c26 <RTC::completeRTCRefresh()+0x150>
c0027c9e:	52                   	push   edx
c0027c9f:	52                   	push   edx
c0027ca0:	6a 0b                	push   0xb
c0027ca2:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ca8:	e8 39 e0 fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027cad:	83 c4 10             	add    esp,0x10
c0027cb0:	a8 04                	test   al,0x4
c0027cb2:	75 7a                	jne    c0027d2e <RTC::completeRTCRefresh()+0x258>
c0027cb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027cb8:	c1 ef 04             	shr    edi,0x4
c0027cbb:	83 e6 0f             	and    esi,0xf
c0027cbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027cc2:	c1 ed 04             	shr    ebp,0x4
c0027cc5:	6b ed 0a             	imul   ebp,ebp,0xa
c0027cc8:	c1 ea 04             	shr    edx,0x4
c0027ccb:	6b d2 0a             	imul   edx,edx,0xa
c0027cce:	83 e1 0f             	and    ecx,0xf
c0027cd1:	01 d1                	add    ecx,edx
c0027cd3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027cd7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027cdb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027cdf:	c1 ea 04             	shr    edx,0x4
c0027ce2:	6b d2 0a             	imul   edx,edx,0xa
c0027ce5:	83 e1 0f             	and    ecx,0xf
c0027ce8:	01 d1                	add    ecx,edx
c0027cea:	89 fa                	mov    edx,edi
c0027cec:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0027cf0:	83 e2 07             	and    edx,0x7
c0027cf3:	89 d9                	mov    ecx,ebx
c0027cf5:	6b d2 0a             	imul   edx,edx,0xa
c0027cf8:	83 e1 0f             	and    ecx,0xf
c0027cfb:	83 e3 80             	and    ebx,0xffffff80
c0027cfe:	01 d1                	add    ecx,edx
c0027d00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027d04:	09 cb                	or     ebx,ecx
c0027d06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027d0a:	c1 ea 04             	shr    edx,0x4
c0027d0d:	6b d2 0a             	imul   edx,edx,0xa
c0027d10:	83 e1 0f             	and    ecx,0xf
c0027d13:	01 d1                	add    ecx,edx
c0027d15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d19:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0027d1d:	c1 ea 04             	shr    edx,0x4
c0027d20:	6b d2 0a             	imul   edx,edx,0xa
c0027d23:	01 d6                	add    esi,edx
c0027d25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027d29:	83 e2 0f             	and    edx,0xf
c0027d2c:	01 d5                	add    ebp,edx
c0027d2e:	a8 02                	test   al,0x2
c0027d30:	75 15                	jne    c0027d47 <RTC::completeRTCRefresh()+0x271>
c0027d32:	f6 c3 80             	test   bl,0x80
c0027d35:	74 10                	je     c0027d47 <RTC::completeRTCRefresh()+0x271>
c0027d37:	83 e3 7f             	and    ebx,0x7f
c0027d3a:	b9 18 00 00 00       	mov    ecx,0x18
c0027d3f:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027d42:	99                   	cdq    
c0027d43:	f7 f9                	idiv   ecx
c0027d45:	88 d3                	mov    bl,dl
c0027d47:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027d4d:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027d53:	77 06                	ja     c0027d5b <RTC::completeRTCRefresh()+0x285>
c0027d55:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027d5b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027d60:	31 c9                	xor    ecx,ecx
c0027d62:	31 d2                	xor    edx,edx
c0027d64:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0027d68:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0027d6c:	89 cd                	mov    ebp,ecx
c0027d6e:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0027d72:	c1 e7 10             	shl    edi,0x10
c0027d75:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027d7b:	c1 e0 10             	shl    eax,0x10
c0027d7e:	09 c5                	or     ebp,eax
c0027d80:	89 e9                	mov    ecx,ebp
c0027d82:	0f b7 c2             	movzx  eax,dx
c0027d85:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027d89:	09 f8                	or     eax,edi
c0027d8b:	89 c2                	mov    edx,eax
c0027d8d:	50                   	push   eax
c0027d8e:	50                   	push   eax
c0027d8f:	88 d9                	mov    cl,bl
c0027d91:	51                   	push   ecx
c0027d92:	52                   	push   edx
c0027d93:	e8 fb 34 ff ff       	call   c001b293 <datetimeToSeconds(datetime_t)>
c0027d98:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027d9c:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027da2:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027da8:	83 c4 4c             	add    esp,0x4c
c0027dab:	5b                   	pop    ebx
c0027dac:	5e                   	pop    esi
c0027dad:	5f                   	pop    edi
c0027dae:	5d                   	pop    ebp
c0027daf:	c3                   	ret    

c0027db0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027db0:	55                   	push   ebp
c0027db1:	57                   	push   edi
c0027db2:	56                   	push   esi
c0027db3:	53                   	push   ebx
c0027db4:	83 ec 30             	sub    esp,0x30
c0027db7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027dbb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027dbf:	6a 00                	push   0x0
c0027dc1:	6a 00                	push   0x0
c0027dc3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027dc9:	e8 30 e0 fe ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c0027dce:	83 c4 0c             	add    esp,0xc
c0027dd1:	6a 00                	push   0x0
c0027dd3:	6a 02                	push   0x2
c0027dd5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ddb:	e8 1e e0 fe ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c0027de0:	89 f8                	mov    eax,edi
c0027de2:	89 f9                	mov    ecx,edi
c0027de4:	0f b6 c4             	movzx  eax,ah
c0027de7:	31 d2                	xor    edx,edx
c0027de9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027ded:	c1 e9 10             	shr    ecx,0x10
c0027df0:	89 f0                	mov    eax,esi
c0027df2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027df6:	89 f0                	mov    eax,esi
c0027df8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027dfc:	0f b6 c4             	movzx  eax,ah
c0027dff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027e03:	89 f0                	mov    eax,esi
c0027e05:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027e09:	c1 e8 10             	shr    eax,0x10
c0027e0c:	b9 64 00 00 00       	mov    ecx,0x64
c0027e11:	f7 f1                	div    ecx
c0027e13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0027e17:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0027e1b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027e1f:	59                   	pop    ecx
c0027e20:	5b                   	pop    ebx
c0027e21:	89 fb                	mov    ebx,edi
c0027e23:	6a 0b                	push   0xb
c0027e25:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027e2b:	e8 b6 de fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027e30:	83 c4 10             	add    esp,0x10
c0027e33:	a8 04                	test   al,0x4
c0027e35:	89 c5                	mov    ebp,eax
c0027e37:	75 6e                	jne    c0027ea7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027e39:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027e3d:	31 d2                	xor    edx,edx
c0027e3f:	0f b6 c1             	movzx  eax,cl
c0027e42:	b9 0a 00 00 00       	mov    ecx,0xa
c0027e47:	f7 f1                	div    ecx
c0027e49:	c1 e0 04             	shl    eax,0x4
c0027e4c:	09 d0                	or     eax,edx
c0027e4e:	31 d2                	xor    edx,edx
c0027e50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027e54:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027e59:	f7 f1                	div    ecx
c0027e5b:	c1 e0 04             	shl    eax,0x4
c0027e5e:	09 d0                	or     eax,edx
c0027e60:	31 d2                	xor    edx,edx
c0027e62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027e66:	0f b6 c3             	movzx  eax,bl
c0027e69:	f7 f1                	div    ecx
c0027e6b:	c1 e0 04             	shl    eax,0x4
c0027e6e:	09 d0                	or     eax,edx
c0027e70:	31 d2                	xor    edx,edx
c0027e72:	89 c3                	mov    ebx,eax
c0027e74:	89 f0                	mov    eax,esi
c0027e76:	0f b6 c0             	movzx  eax,al
c0027e79:	f7 f1                	div    ecx
c0027e7b:	c1 e0 04             	shl    eax,0x4
c0027e7e:	09 d0                	or     eax,edx
c0027e80:	31 d2                	xor    edx,edx
c0027e82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027e86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027e8b:	f7 f1                	div    ecx
c0027e8d:	c1 e0 04             	shl    eax,0x4
c0027e90:	09 d0                	or     eax,edx
c0027e92:	31 d2                	xor    edx,edx
c0027e94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027e98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027e9c:	f7 f1                	div    ecx
c0027e9e:	c1 e0 04             	shl    eax,0x4
c0027ea1:	09 d0                	or     eax,edx
c0027ea3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027ea7:	83 e5 02             	and    ebp,0x2
c0027eaa:	75 1e                	jne    c0027eca <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027eac:	0f b6 c3             	movzx  eax,bl
c0027eaf:	83 f8 0b             	cmp    eax,0xb
c0027eb2:	76 10                	jbe    c0027ec4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027eb4:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027eb7:	84 d2                	test   dl,dl
c0027eb9:	88 d3                	mov    bl,dl
c0027ebb:	75 02                	jne    c0027ebf <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027ebd:	b3 0c                	mov    bl,0xc
c0027ebf:	83 cb 80             	or     ebx,0xffffff80
c0027ec2:	eb 06                	jmp    c0027eca <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027ec4:	85 c0                	test   eax,eax
c0027ec6:	75 02                	jne    c0027eca <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027ec8:	b3 0c                	mov    bl,0xc
c0027eca:	50                   	push   eax
c0027ecb:	0f b6 db             	movzx  ebx,bl
c0027ece:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027ed3:	52                   	push   edx
c0027ed4:	6a 00                	push   0x0
c0027ed6:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027edc:	e8 1d df fe ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ee1:	83 c4 0c             	add    esp,0xc
c0027ee4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027ee9:	50                   	push   eax
c0027eea:	6a 02                	push   0x2
c0027eec:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ef2:	e8 07 df fe ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ef7:	83 c4 0c             	add    esp,0xc
c0027efa:	53                   	push   ebx
c0027efb:	6a 04                	push   0x4
c0027efd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027f03:	e8 f6 de fe ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f08:	83 c4 0c             	add    esp,0xc
c0027f0b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027f10:	52                   	push   edx
c0027f11:	6a 07                	push   0x7
c0027f13:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027f19:	e8 e0 de fe ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f1e:	83 c4 0c             	add    esp,0xc
c0027f21:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027f26:	50                   	push   eax
c0027f27:	6a 08                	push   0x8
c0027f29:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027f2f:	e8 ca de fe ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f34:	83 c4 0c             	add    esp,0xc
c0027f37:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027f3c:	55                   	push   ebp
c0027f3d:	6a 09                	push   0x9
c0027f3f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027f45:	e8 b4 de fe ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f4a:	5a                   	pop    edx
c0027f4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027f4f:	e8 82 fb ff ff       	call   c0027ad6 <RTC::completeRTCRefresh()>
c0027f54:	83 c4 3c             	add    esp,0x3c
c0027f57:	b0 01                	mov    al,0x1
c0027f59:	5b                   	pop    ebx
c0027f5a:	5e                   	pop    esi
c0027f5b:	5f                   	pop    edi
c0027f5c:	5d                   	pop    ebp
c0027f5d:	c3                   	ret    

c0027f5e <rtcIRQHandler(regs*, void*)>:
c0027f5e:	53                   	push   ebx
c0027f5f:	83 ec 10             	sub    esp,0x10
c0027f62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027f66:	6a 0c                	push   0xc
c0027f68:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027f6e:	e8 73 dd fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c0027f73:	83 c4 10             	add    esp,0x10
c0027f76:	a8 80                	test   al,0x80
c0027f78:	74 24                	je     c0027f9e <rtcIRQHandler(regs*, void*)+0x40>
c0027f7a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027f81:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027f88:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027f8f:	75 0d                	jne    c0027f9e <rtcIRQHandler(regs*, void*)+0x40>
c0027f91:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027f95:	83 c4 08             	add    esp,0x8
c0027f98:	5b                   	pop    ebx
c0027f99:	e9 38 fb ff ff       	jmp    c0027ad6 <RTC::completeRTCRefresh()>
c0027f9e:	83 c4 08             	add    esp,0x8
c0027fa1:	5b                   	pop    ebx
c0027fa2:	c3                   	ret    
c0027fa3:	90                   	nop

c0027fa4 <RTC::RTC()>:
c0027fa4:	83 ec 1c             	sub    esp,0x1c
c0027fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027fab:	83 ec 08             	sub    esp,0x8
c0027fae:	68 67 39 03 c0       	push   0xc0033967
c0027fb3:	50                   	push   eax
c0027fb4:	e8 b5 31 ff ff       	call   c001b16e <Clock::Clock(char const*)>
c0027fb9:	83 c4 10             	add    esp,0x10
c0027fbc:	ba 84 39 03 c0       	mov    edx,0xc0033984
c0027fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027fc5:	89 10                	mov    DWORD PTR [eax],edx
c0027fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027fcb:	83 ec 0c             	sub    esp,0xc
c0027fce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027fd2:	6a 01                	push   0x1
c0027fd4:	68 5e 7f 02 c0       	push   0xc0027f5e
c0027fd9:	6a 08                	push   0x8
c0027fdb:	50                   	push   eax
c0027fdc:	e8 6f 36 ff ff       	call   c001b650 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027fe1:	83 c4 20             	add    esp,0x20
c0027fe4:	89 c2                	mov    edx,eax
c0027fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027fea:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027ff0:	fa                   	cli    
c0027ff1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027ff6:	83 c0 01             	add    eax,0x1
c0027ff9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027ffe:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0028003:	83 ec 08             	sub    esp,0x8
c0028006:	6a 0b                	push   0xb
c0028008:	50                   	push   eax
c0028009:	e8 d8 dc fe ff       	call   c0015ce6 <Computer::readCMOS(unsigned char)>
c002800e:	83 c4 10             	add    esp,0x10
c0028011:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0028015:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002801a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002801e:	83 ca 10             	or     edx,0x10
c0028021:	0f b6 d2             	movzx  edx,dl
c0028024:	83 ec 04             	sub    esp,0x4
c0028027:	52                   	push   edx
c0028028:	6a 0b                	push   0xb
c002802a:	50                   	push   eax
c002802b:	e8 ce dd fe ff       	call   c0015dfe <Computer::writeCMOS(unsigned char, unsigned char)>
c0028030:	83 c4 10             	add    esp,0x10
c0028033:	83 ec 0c             	sub    esp,0xc
c0028036:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002803a:	e8 97 fa ff ff       	call   c0027ad6 <RTC::completeRTCRefresh()>
c002803f:	83 c4 10             	add    esp,0x10
c0028042:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0028047:	83 e8 01             	sub    eax,0x1
c002804a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002804f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0028054:	85 c0                	test   eax,eax
c0028056:	75 01                	jne    c0028059 <RTC::RTC()+0xb5>
c0028058:	fb                   	sti    
c0028059:	90                   	nop
c002805a:	83 c4 1c             	add    esp,0x1c
c002805d:	c3                   	ret    
c002805e:	66 90                	xchg   ax,ax

c0028060 <HalConsoleScroll(int, int)>:
c0028060:	83 ec 10             	sub    esp,0x10
c0028063:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c002806b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0028073:	90                   	nop
c0028074:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0028079:	0f 8f e1 00 00 00    	jg     c0028160 <HalConsoleScroll(int, int)+0x100>
c002807f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0028087:	90                   	nop
c0028088:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0028090:	0f 8f be 00 00 00    	jg     c0028154 <HalConsoleScroll(int, int)+0xf4>
c0028096:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002809a:	89 d0                	mov    eax,edx
c002809c:	c1 e0 02             	shl    eax,0x2
c002809f:	01 d0                	add    eax,edx
c00280a1:	c1 e0 05             	shl    eax,0x5
c00280a4:	89 c2                	mov    edx,eax
c00280a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00280aa:	01 d0                	add    eax,edx
c00280ac:	89 c2                	mov    edx,eax
c00280ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00280b2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00280b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00280b9:	89 d0                	mov    eax,edx
c00280bb:	c1 e0 02             	shl    eax,0x2
c00280be:	01 d0                	add    eax,edx
c00280c0:	c1 e0 05             	shl    eax,0x5
c00280c3:	89 c2                	mov    edx,eax
c00280c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00280c9:	01 d0                	add    eax,edx
c00280cb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00280d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00280d5:	01 d0                	add    eax,edx
c00280d7:	8a 11                	mov    dl,BYTE PTR [ecx]
c00280d9:	88 10                	mov    BYTE PTR [eax],dl
c00280db:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00280e0:	75 66                	jne    c0028148 <HalConsoleScroll(int, int)+0xe8>
c00280e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00280e6:	83 e0 01             	and    eax,0x1
c00280e9:	74 39                	je     c0028124 <HalConsoleScroll(int, int)+0xc4>
c00280eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00280ef:	83 e0 0f             	and    eax,0xf
c00280f2:	88 c2                	mov    dl,al
c00280f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00280f8:	c1 e0 04             	shl    eax,0x4
c00280fb:	09 d0                	or     eax,edx
c00280fd:	88 c1                	mov    cl,al
c00280ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028103:	89 d0                	mov    eax,edx
c0028105:	c1 e0 02             	shl    eax,0x2
c0028108:	01 d0                	add    eax,edx
c002810a:	c1 e0 05             	shl    eax,0x5
c002810d:	89 c2                	mov    edx,eax
c002810f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028113:	01 d0                	add    eax,edx
c0028115:	89 c2                	mov    edx,eax
c0028117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002811b:	01 d0                	add    eax,edx
c002811d:	88 ca                	mov    dl,cl
c002811f:	88 10                	mov    BYTE PTR [eax],dl
c0028121:	eb 25                	jmp    c0028148 <HalConsoleScroll(int, int)+0xe8>
c0028123:	90                   	nop
c0028124:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028128:	89 d0                	mov    eax,edx
c002812a:	c1 e0 02             	shl    eax,0x2
c002812d:	01 d0                	add    eax,edx
c002812f:	c1 e0 05             	shl    eax,0x5
c0028132:	89 c2                	mov    edx,eax
c0028134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028138:	01 d0                	add    eax,edx
c002813a:	89 c2                	mov    edx,eax
c002813c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028140:	01 d0                	add    eax,edx
c0028142:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0028145:	8d 76 00             	lea    esi,[esi+0x0]
c0028148:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c002814d:	e9 36 ff ff ff       	jmp    c0028088 <HalConsoleScroll(int, int)+0x28>
c0028152:	66 90                	xchg   ax,ax
c0028154:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028159:	e9 16 ff ff ff       	jmp    c0028074 <HalConsoleScroll(int, int)+0x14>
c002815e:	66 90                	xchg   ax,ax
c0028160:	90                   	nop
c0028161:	83 c4 10             	add    esp,0x10
c0028164:	c3                   	ret    
c0028165:	8d 76 00             	lea    esi,[esi+0x0]

c0028168 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0028168:	83 ec 14             	sub    esp,0x14
c002816b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002816f:	88 04 24             	mov    BYTE PTR [esp],al
c0028172:	8a 04 24             	mov    al,BYTE PTR [esp]
c0028175:	0f b6 c0             	movzx  eax,al
c0028178:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002817c:	89 d1                	mov    ecx,edx
c002817e:	83 e1 0f             	and    ecx,0xf
c0028181:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0028185:	c1 e2 04             	shl    edx,0x4
c0028188:	0f b6 d2             	movzx  edx,dl
c002818b:	09 ca                	or     edx,ecx
c002818d:	c1 e2 08             	shl    edx,0x8
c0028190:	09 d0                	or     eax,edx
c0028192:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0028197:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c002819f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00281a3:	89 d0                	mov    eax,edx
c00281a5:	c1 e0 02             	shl    eax,0x2
c00281a8:	01 d0                	add    eax,edx
c00281aa:	c1 e0 04             	shl    eax,0x4
c00281ad:	89 c2                	mov    edx,eax
c00281af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00281b3:	01 d0                	add    eax,edx
c00281b5:	d1 e0                	shl    eax,1
c00281b7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00281bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00281bf:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00281c4:	66 89 10             	mov    WORD PTR [eax],dx
c00281c7:	90                   	nop
c00281c8:	83 c4 14             	add    esp,0x14
c00281cb:	c3                   	ret    

c00281cc <HalConsoleCursorUpdate(int, int)>:
c00281cc:	83 ec 20             	sub    esp,0x20
c00281cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00281d3:	89 c2                	mov    edx,eax
c00281d5:	c1 e2 02             	shl    edx,0x2
c00281d8:	01 d0                	add    eax,edx
c00281da:	c1 e0 04             	shl    eax,0x4
c00281dd:	89 c2                	mov    edx,eax
c00281df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00281e3:	01 d0                	add    eax,edx
c00281e5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00281ea:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00281f1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00281f6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00281fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00281fe:	ee                   	out    dx,al
c00281ff:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0028204:	0f b6 c0             	movzx  eax,al
c0028207:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c002820e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0028212:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0028216:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002821a:	ee                   	out    dx,al
c002821b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0028222:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0028227:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c002822b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002822f:	ee                   	out    dx,al
c0028230:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0028235:	c1 e8 08             	shr    eax,0x8
c0028238:	0f b6 c0             	movzx  eax,al
c002823b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0028242:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0028246:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c002824a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002824e:	ee                   	out    dx,al
c002824f:	90                   	nop
c0028250:	83 c4 20             	add    esp,0x20
c0028253:	c3                   	ret    

c0028254 <FAT::getName()>:
c0028254:	b8 b8 39 03 c0       	mov    eax,0xc00339b8
c0028259:	c3                   	ret    
c002825a:	66 90                	xchg   ax,ax

c002825c <FAT::tell(void*, unsigned long long*)>:
c002825c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0028261:	75 09                	jne    c002826c <FAT::tell(void*, unsigned long long*)+0x10>
c0028263:	b8 04 00 00 00       	mov    eax,0x4
c0028268:	c3                   	ret    
c0028269:	8d 76 00             	lea    esi,[esi+0x0]
c002826c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028271:	75 09                	jne    c002827c <FAT::tell(void*, unsigned long long*)+0x20>
c0028273:	b8 04 00 00 00       	mov    eax,0x4
c0028278:	c3                   	ret    
c0028279:	8d 76 00             	lea    esi,[esi+0x0]
c002827c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028280:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028283:	ba 00 00 00 00       	mov    edx,0x0
c0028288:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002828c:	89 01                	mov    DWORD PTR [ecx],eax
c002828e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028291:	b8 00 00 00 00       	mov    eax,0x0
c0028296:	c3                   	ret    
c0028297:	90                   	nop

c0028298 <FAT::stat(void*, unsigned long long*)>:
c0028298:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002829d:	75 09                	jne    c00282a8 <FAT::stat(void*, unsigned long long*)+0x10>
c002829f:	b8 04 00 00 00       	mov    eax,0x4
c00282a4:	c3                   	ret    
c00282a5:	8d 76 00             	lea    esi,[esi+0x0]
c00282a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00282ad:	75 09                	jne    c00282b8 <FAT::stat(void*, unsigned long long*)+0x20>
c00282af:	b8 04 00 00 00       	mov    eax,0x4
c00282b4:	c3                   	ret    
c00282b5:	8d 76 00             	lea    esi,[esi+0x0]
c00282b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00282bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00282bf:	ba 00 00 00 00       	mov    edx,0x0
c00282c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00282c8:	89 01                	mov    DWORD PTR [ecx],eax
c00282ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00282cd:	b8 00 00 00 00       	mov    eax,0x0
c00282d2:	c3                   	ret    
c00282d3:	90                   	nop

c00282d4 <FAT::~FAT()>:
c00282d4:	83 ec 0c             	sub    esp,0xc
c00282d7:	ba 04 3a 03 c0       	mov    edx,0xc0033a04
c00282dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e0:	89 10                	mov    DWORD PTR [eax],edx
c00282e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e6:	83 ec 0c             	sub    esp,0xc
c00282e9:	50                   	push   eax
c00282ea:	e8 69 20 ff ff       	call   c001a358 <Filesystem::~Filesystem()>
c00282ef:	83 c4 10             	add    esp,0x10
c00282f2:	90                   	nop
c00282f3:	83 c4 0c             	add    esp,0xc
c00282f6:	c3                   	ret    
c00282f7:	90                   	nop

c00282f8 <FAT::~FAT()>:
c00282f8:	83 ec 0c             	sub    esp,0xc
c00282fb:	83 ec 0c             	sub    esp,0xc
c00282fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028302:	e8 cd ff ff ff       	call   c00282d4 <FAT::~FAT()>
c0028307:	83 c4 10             	add    esp,0x10
c002830a:	83 ec 08             	sub    esp,0x8
c002830d:	6a 08                	push   0x8
c002830f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028313:	e8 bc 10 ff ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c0028318:	83 c4 10             	add    esp,0x10
c002831b:	83 c4 0c             	add    esp,0xc
c002831e:	c3                   	ret    
c002831f:	90                   	nop

c0028320 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0028320:	83 ec 1c             	sub    esp,0x1c
c0028323:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002832a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002832f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028333:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002833a:	83 f8 ff             	cmp    eax,0xffffffff
c002833d:	75 35                	jne    c0028374 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c002833f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0028343:	88 c2                	mov    dl,al
c0028345:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002834a:	01 d0                	add    eax,edx
c002834c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0028350:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0028356:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002835a:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028361:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028366:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002836a:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028371:	eb 19                	jmp    c002838c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0028373:	90                   	nop
c0028374:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0028378:	88 c2                	mov    dl,al
c002837a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002837e:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028385:	01 d0                	add    eax,edx
c0028387:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002838b:	90                   	nop
c002838c:	83 ec 04             	sub    esp,0x4
c002838f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028397:	8d 44 24 15          	lea    eax,[esp+0x15]
c002839b:	50                   	push   eax
c002839c:	e8 96 cf fd ff       	call   c0005337 <f_getlabel>
c00283a1:	83 c4 10             	add    esp,0x10
c00283a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00283a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00283ad:	75 09                	jne    c00283b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00283af:	b8 00 00 00 00       	mov    eax,0x0
c00283b4:	eb 0a                	jmp    c00283c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00283b6:	66 90                	xchg   ax,ax
c00283b8:	b8 01 00 00 00       	mov    eax,0x1
c00283bd:	8d 76 00             	lea    esi,[esi+0x0]
c00283c0:	83 c4 1c             	add    esp,0x1c
c00283c3:	c3                   	ret    

c00283c4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00283c4:	53                   	push   ebx
c00283c5:	83 ec 58             	sub    esp,0x58
c00283c8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00283d0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00283d4:	b9 00 00 00 00       	mov    ecx,0x0
c00283d9:	b8 3c 00 00 00       	mov    eax,0x3c
c00283de:	83 e0 f8             	and    eax,0xfffffff8
c00283e1:	89 c3                	mov    ebx,eax
c00283e3:	b8 00 00 00 00       	mov    eax,0x0
c00283e8:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c00283ec:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c00283f0:	83 c0 08             	add    eax,0x8
c00283f3:	39 d8                	cmp    eax,ebx
c00283f5:	72 f1                	jb     c00283e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c00283f7:	01 c2                	add    edx,eax
c00283f9:	89 0a                	mov    DWORD PTR [edx],ecx
c00283fb:	83 c2 04             	add    edx,0x4
c00283fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028402:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028409:	83 f8 ff             	cmp    eax,0xffffffff
c002840c:	75 36                	jne    c0028444 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c002840e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028412:	88 c2                	mov    dl,al
c0028414:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028419:	01 d0                	add    eax,edx
c002841b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002841f:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0028425:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028429:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028430:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028435:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0028439:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028440:	eb 1a                	jmp    c002845c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0028442:	66 90                	xchg   ax,ax
c0028444:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028448:	88 c2                	mov    dl,al
c002844a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002844e:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028455:	01 d0                	add    eax,edx
c0028457:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002845b:	90                   	nop
c002845c:	83 ec 08             	sub    esp,0x8
c002845f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0028463:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028467:	50                   	push   eax
c0028468:	e8 03 84 fd ff       	call   c0000870 <strcat>
c002846d:	83 c4 10             	add    esp,0x10
c0028470:	83 ec 0c             	sub    esp,0xc
c0028473:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028477:	50                   	push   eax
c0028478:	e8 0e d0 fd ff       	call   c000548b <f_setlabel>
c002847d:	83 c4 10             	add    esp,0x10
c0028480:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0028484:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0028489:	75 09                	jne    c0028494 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c002848b:	b8 00 00 00 00       	mov    eax,0x0
c0028490:	eb 0a                	jmp    c002849c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0028492:	66 90                	xchg   ax,ax
c0028494:	b8 01 00 00 00       	mov    eax,0x1
c0028499:	8d 76 00             	lea    esi,[esi+0x0]
c002849c:	83 c4 58             	add    esp,0x58
c002849f:	5b                   	pop    ebx
c00284a0:	c3                   	ret    
c00284a1:	90                   	nop
c00284a2:	66 90                	xchg   ax,ax

c00284a4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00284a4:	83 ec 2c             	sub    esp,0x2c
c00284a7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00284af:	83 ec 08             	sub    esp,0x8
c00284b2:	68 dc 39 03 c0       	push   0xc00339dc
c00284b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00284bb:	e8 c0 82 fd ff       	call   c0000780 <strcmp>
c00284c0:	83 c4 10             	add    esp,0x10
c00284c3:	85 c0                	test   eax,eax
c00284c5:	0f 94 c0             	sete   al
c00284c8:	0f b6 c0             	movzx  eax,al
c00284cb:	85 c0                	test   eax,eax
c00284cd:	74 0d                	je     c00284dc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00284cf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00284d7:	e9 c0 00 00 00       	jmp    c002859c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00284dc:	83 ec 08             	sub    esp,0x8
c00284df:	68 ce 39 03 c0       	push   0xc00339ce
c00284e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00284e8:	e8 93 82 fd ff       	call   c0000780 <strcmp>
c00284ed:	83 c4 10             	add    esp,0x10
c00284f0:	85 c0                	test   eax,eax
c00284f2:	0f 94 c0             	sete   al
c00284f5:	0f b6 c0             	movzx  eax,al
c00284f8:	85 c0                	test   eax,eax
c00284fa:	74 10                	je     c002850c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00284fc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028504:	e9 93 00 00 00       	jmp    c002859c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028509:	8d 76 00             	lea    esi,[esi+0x0]
c002850c:	83 ec 08             	sub    esp,0x8
c002850f:	68 d4 39 03 c0       	push   0xc00339d4
c0028514:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028518:	e8 63 82 fd ff       	call   c0000780 <strcmp>
c002851d:	83 c4 10             	add    esp,0x10
c0028520:	85 c0                	test   eax,eax
c0028522:	0f 94 c0             	sete   al
c0028525:	0f b6 c0             	movzx  eax,al
c0028528:	85 c0                	test   eax,eax
c002852a:	74 0c                	je     c0028538 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c002852c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028534:	eb 66                	jmp    c002859c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028536:	66 90                	xchg   ax,ax
c0028538:	83 ec 08             	sub    esp,0x8
c002853b:	68 38 fa 02 c0       	push   0xc002fa38
c0028540:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028544:	e8 37 82 fd ff       	call   c0000780 <strcmp>
c0028549:	83 c4 10             	add    esp,0x10
c002854c:	85 c0                	test   eax,eax
c002854e:	0f 94 c0             	sete   al
c0028551:	0f b6 c0             	movzx  eax,al
c0028554:	85 c0                	test   eax,eax
c0028556:	74 0c                	je     c0028564 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0028558:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0028560:	eb 3a                	jmp    c002859c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028562:	66 90                	xchg   ax,ax
c0028564:	83 ec 08             	sub    esp,0x8
c0028567:	68 da 39 03 c0       	push   0xc00339da
c002856c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028570:	e8 0b 82 fd ff       	call   c0000780 <strcmp>
c0028575:	83 c4 10             	add    esp,0x10
c0028578:	85 c0                	test   eax,eax
c002857a:	0f 94 c0             	sete   al
c002857d:	0f b6 c0             	movzx  eax,al
c0028580:	85 c0                	test   eax,eax
c0028582:	74 0c                	je     c0028590 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0028584:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002858c:	eb 0e                	jmp    c002859c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002858e:	66 90                	xchg   ax,ax
c0028590:	b8 08 00 00 00       	mov    eax,0x8
c0028595:	e9 ea 00 00 00       	jmp    c0028684 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002859a:	66 90                	xchg   ax,ax
c002859c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00285a3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00285a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00285ac:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00285b3:	83 f8 ff             	cmp    eax,0xffffffff
c00285b6:	75 34                	jne    c00285ec <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00285b8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00285bc:	88 c2                	mov    dl,al
c00285be:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00285c3:	01 d0                	add    eax,edx
c00285c5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00285c9:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00285cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00285d3:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00285da:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00285df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00285e3:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00285ea:	eb 18                	jmp    c0028604 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00285ec:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00285f0:	88 c2                	mov    dl,al
c00285f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00285f6:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00285fd:	01 d0                	add    eax,edx
c00285ff:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028603:	90                   	nop
c0028604:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028608:	88 04 24             	mov    BYTE PTR [esp],al
c002860b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002860f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028613:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002861b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0028620:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0028628:	83 ec 0c             	sub    esp,0xc
c002862b:	68 00 20 00 00       	push   0x2000
c0028630:	e8 67 e0 fe ff       	call   c001669c <malloc>
c0028635:	83 c4 10             	add    esp,0x10
c0028638:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002863c:	68 00 20 00 00       	push   0x2000
c0028641:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028645:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028649:	50                   	push   eax
c002864a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002864e:	50                   	push   eax
c002864f:	e8 34 d1 fd ff       	call   c0005788 <f_mkfs>
c0028654:	83 c4 10             	add    esp,0x10
c0028657:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002865b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028660:	75 0a                	jne    c002866c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0028662:	b8 00 00 00 00       	mov    eax,0x0
c0028667:	eb 1b                	jmp    c0028684 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028669:	8d 76 00             	lea    esi,[esi+0x0]
c002866c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028671:	75 09                	jne    c002867c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0028673:	b8 09 00 00 00       	mov    eax,0x9
c0028678:	eb 0a                	jmp    c0028684 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002867a:	66 90                	xchg   ax,ax
c002867c:	b8 01 00 00 00       	mov    eax,0x1
c0028681:	8d 76 00             	lea    esi,[esi+0x0]
c0028684:	83 c4 2c             	add    esp,0x2c
c0028687:	c3                   	ret    

c0028688 <FAT::tryMount(LogicalDisk*, int)>:
c0028688:	81 ec 4c 03 00 00    	sub    esp,0x34c
c002868e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028693:	83 f8 14             	cmp    eax,0x14
c0028696:	75 18                	jne    c00286b0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028698:	83 ec 0c             	sub    esp,0xc
c002869b:	68 e0 39 03 c0       	push   0xc00339e0
c00286a0:	e8 f1 7e ff ff       	call   c0020596 <KePanic(char const*)>
c00286a5:	83 c4 10             	add    esp,0x10
c00286a8:	b0 00                	mov    al,0x0
c00286aa:	e9 ed 01 00 00       	jmp    c002889c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00286af:	90                   	nop
c00286b0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00286b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00286bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00286c3:	3d 00 02 00 00       	cmp    eax,0x200
c00286c8:	74 0a                	je     c00286d4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00286ca:	b0 00                	mov    al,0x0
c00286cc:	e9 cb 01 00 00       	jmp    c002889c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00286d1:	8d 76 00             	lea    esi,[esi+0x0]
c00286d4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00286dc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00286e3:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00286ea:	83 f8 ff             	cmp    eax,0xffffffff
c00286ed:	74 09                	je     c00286f8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00286ef:	b0 01                	mov    al,0x1
c00286f1:	e9 a6 01 00 00       	jmp    c002889c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00286f6:	66 90                	xchg   ax,ax
c00286f8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0028702:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c002870a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0028711:	88 c2                	mov    dl,al
c0028713:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028718:	01 d0                	add    eax,edx
c002871a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0028721:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0028727:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c002872e:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028735:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002873a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0028741:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028748:	83 ec 0c             	sub    esp,0xc
c002874b:	68 34 02 00 00       	push   0x234
c0028750:	e8 47 df fe ff       	call   c001669c <malloc>
c0028755:	83 c4 10             	add    esp,0x10
c0028758:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c002875f:	83 ec 04             	sub    esp,0x4
c0028762:	6a 00                	push   0x0
c0028764:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002876b:	50                   	push   eax
c002876c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028773:	e8 0a b8 fd ff       	call   c0003f82 <f_mount>
c0028778:	83 c4 10             	add    esp,0x10
c002877b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028782:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c002878a:	74 1c                	je     c00287a8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c002878c:	83 ec 0c             	sub    esp,0xc
c002878f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028796:	e8 21 df fe ff       	call   c00166bc <rfree>
c002879b:	83 c4 10             	add    esp,0x10
c002879e:	b0 00                	mov    al,0x0
c00287a0:	e9 f7 00 00 00       	jmp    c002889c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00287a5:	8d 76 00             	lea    esi,[esi+0x0]
c00287a8:	83 ec 04             	sub    esp,0x4
c00287ab:	68 00 01 00 00       	push   0x100
c00287b0:	6a 00                	push   0x0
c00287b2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00287b9:	50                   	push   eax
c00287ba:	e8 31 7d fd ff       	call   c00004f0 <memset>
c00287bf:	83 c4 10             	add    esp,0x10
c00287c2:	83 ec 08             	sub    esp,0x8
c00287c5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00287cc:	50                   	push   eax
c00287cd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00287d4:	50                   	push   eax
c00287d5:	e8 96 80 fd ff       	call   c0000870 <strcat>
c00287da:	83 c4 10             	add    esp,0x10
c00287dd:	83 ec 08             	sub    esp,0x8
c00287e0:	68 ee 39 03 c0       	push   0xc00339ee
c00287e5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00287ec:	50                   	push   eax
c00287ed:	e8 7e 80 fd ff       	call   c0000870 <strcat>
c00287f2:	83 c4 10             	add    esp,0x10
c00287f5:	83 ec 04             	sub    esp,0x4
c00287f8:	6a 01                	push   0x1
c00287fa:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0028801:	50                   	push   eax
c0028802:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028806:	50                   	push   eax
c0028807:	e8 d8 b7 fd ff       	call   c0003fe4 <f_open>
c002880c:	83 c4 10             	add    esp,0x10
c002880f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028816:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c002881d:	85 c0                	test   eax,eax
c002881f:	74 0b                	je     c002882c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0028821:	78 31                	js     c0028854 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0028823:	83 e8 04             	sub    eax,0x4
c0028826:	83 f8 01             	cmp    eax,0x1
c0028829:	77 29                	ja     c0028854 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c002882b:	90                   	nop
c002882c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0028834:	83 ec 0c             	sub    esp,0xc
c0028837:	8d 44 24 14          	lea    eax,[esp+0x14]
c002883b:	50                   	push   eax
c002883c:	e8 53 bf fd ff       	call   c0004794 <f_close>
c0028841:	83 c4 10             	add    esp,0x10
c0028844:	90                   	nop
c0028845:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c002884d:	85 c0                	test   eax,eax
c002884f:	74 43                	je     c0028894 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0028851:	eb 31                	jmp    c0028884 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0028853:	90                   	nop
c0028854:	83 ec 0c             	sub    esp,0xc
c0028857:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002885e:	e8 59 de fe ff       	call   c00166bc <rfree>
c0028863:	83 c4 10             	add    esp,0x10
c0028866:	83 ec 04             	sub    esp,0x4
c0028869:	6a 00                	push   0x0
c002886b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028872:	50                   	push   eax
c0028873:	6a 00                	push   0x0
c0028875:	e8 08 b7 fd ff       	call   c0003f82 <f_mount>
c002887a:	83 c4 10             	add    esp,0x10
c002887d:	b0 00                	mov    al,0x0
c002887f:	eb 1b                	jmp    c002889c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028881:	8d 76 00             	lea    esi,[esi+0x0]
c0028884:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028889:	83 c0 01             	add    eax,0x1
c002888c:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028891:	8d 76 00             	lea    esi,[esi+0x0]
c0028894:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c002889b:	90                   	nop
c002889c:	81 c4 4c 03 00 00    	add    esp,0x34c
c00288a2:	c3                   	ret    
c00288a3:	90                   	nop

c00288a4 <FAT::allocateSwapfile(char const*, int)>:
c00288a4:	55                   	push   ebp
c00288a5:	57                   	push   edi
c00288a6:	56                   	push   esi
c00288a7:	53                   	push   ebx
c00288a8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00288ae:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00288b9:	83 ec 0c             	sub    esp,0xc
c00288bc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00288c3:	e8 d4 dd fe ff       	call   c001669c <malloc>
c00288c8:	83 c4 10             	add    esp,0x10
c00288cb:	89 c7                	mov    edi,eax
c00288cd:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00288d2:	83 ec 04             	sub    esp,0x4
c00288d5:	50                   	push   eax
c00288d6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00288dd:	57                   	push   edi
c00288de:	e8 07 1e ff ff       	call   c001a6ea <File::File(char const*, Process*)>
c00288e3:	83 c4 10             	add    esp,0x10
c00288e6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00288ed:	83 ec 04             	sub    esp,0x4
c00288f0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00288f4:	50                   	push   eax
c00288f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00288f9:	50                   	push   eax
c00288fa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028901:	e8 04 21 ff ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c0028906:	83 c4 10             	add    esp,0x10
c0028909:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028910:	c1 e0 14             	shl    eax,0x14
c0028913:	89 c7                	mov    edi,eax
c0028915:	89 c5                	mov    ebp,eax
c0028917:	c1 fd 1f             	sar    ebp,0x1f
c002891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028922:	89 f9                	mov    ecx,edi
c0028924:	31 c1                	xor    ecx,eax
c0028926:	89 cb                	mov    ebx,ecx
c0028928:	89 e9                	mov    ecx,ebp
c002892a:	31 d1                	xor    ecx,edx
c002892c:	89 ce                	mov    esi,ecx
c002892e:	89 f0                	mov    eax,esi
c0028930:	09 d8                	or     eax,ebx
c0028932:	0f 84 9c 00 00 00    	je     c00289d4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0028938:	83 ec 0c             	sub    esp,0xc
c002893b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028942:	e8 8f 1f ff ff       	call   c001a8d6 <File::unlink()>
c0028947:	83 c4 10             	add    esp,0x10
c002894a:	83 ec 08             	sub    esp,0x8
c002894d:	6a 12                	push   0x12
c002894f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028956:	e8 ad 1d ff ff       	call   c001a708 <File::open(FileOpenMode)>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028965:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002896b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028972:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028979:	c1 e0 14             	shl    eax,0x14
c002897c:	83 ec 04             	sub    esp,0x4
c002897f:	6a 01                	push   0x1
c0028981:	50                   	push   eax
c0028982:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028989:	e8 8d cc fd ff       	call   c000561b <f_expand>
c002898e:	83 c4 10             	add    esp,0x10
c0028991:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028998:	8b 00                	mov    eax,DWORD PTR [eax]
c002899a:	83 c0 10             	add    eax,0x10
c002899d:	8b 00                	mov    eax,DWORD PTR [eax]
c002899f:	83 ec 0c             	sub    esp,0xc
c00289a2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00289a6:	52                   	push   edx
c00289a7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00289ab:	52                   	push   edx
c00289ac:	6a 00                	push   0x0
c00289ae:	68 00 04 00 00       	push   0x400
c00289b3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00289ba:	ff d0                	call   eax
c00289bc:	83 c4 20             	add    esp,0x20
c00289bf:	83 ec 0c             	sub    esp,0xc
c00289c2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00289c9:	e8 98 1d ff ff       	call   c001a766 <File::close()>
c00289ce:	83 c4 10             	add    esp,0x10
c00289d1:	8d 76 00             	lea    esi,[esi+0x0]
c00289d4:	83 ec 08             	sub    esp,0x8
c00289d7:	6a 01                	push   0x1
c00289d9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00289e0:	e8 23 1d ff ff       	call   c001a708 <File::open(FileOpenMode)>
c00289e5:	83 c4 10             	add    esp,0x10
c00289e8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00289ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00289f1:	83 c0 0c             	add    eax,0xc
c00289f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00289f6:	83 ec 0c             	sub    esp,0xc
c00289f9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00289fd:	52                   	push   edx
c00289fe:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0028a02:	52                   	push   edx
c0028a03:	6a 00                	push   0x0
c0028a05:	6a 04                	push   0x4
c0028a07:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028a0e:	ff d0                	call   eax
c0028a10:	83 c4 20             	add    esp,0x20
c0028a13:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028a1a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028a20:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028a27:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028a2e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028a31:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028a38:	83 ec 0c             	sub    esp,0xc
c0028a3b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028a42:	e8 1f 1d ff ff       	call   c001a766 <File::close()>
c0028a47:	83 c4 10             	add    esp,0x10
c0028a4a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028a51:	ba 00 00 00 00       	mov    edx,0x0
c0028a56:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028a5c:	5b                   	pop    ebx
c0028a5d:	5e                   	pop    esi
c0028a5e:	5f                   	pop    edi
c0028a5f:	5d                   	pop    ebp
c0028a60:	c3                   	ret    
c0028a61:	90                   	nop
c0028a62:	66 90                	xchg   ax,ax

c0028a64 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0028a64:	57                   	push   edi
c0028a65:	56                   	push   esi
c0028a66:	53                   	push   ebx
c0028a67:	81 ec 50 02 00 00    	sub    esp,0x250
c0028a6d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0028a75:	74 0d                	je     c0028a84 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0028a77:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028a7f:	75 0f                	jne    c0028a90 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028a81:	8d 76 00             	lea    esi,[esi+0x0]
c0028a84:	b8 04 00 00 00       	mov    eax,0x4
c0028a89:	e9 3a 01 00 00       	jmp    c0028bc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028a8e:	66 90                	xchg   ax,ax
c0028a90:	83 ec 08             	sub    esp,0x8
c0028a93:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028a9a:	50                   	push   eax
c0028a9b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028aa2:	e8 b9 bf fd ff       	call   c0004a60 <f_readdir>
c0028aa7:	83 c4 10             	add    esp,0x10
c0028aaa:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028ab1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028ab8:	83 ec 0c             	sub    esp,0xc
c0028abb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028ac2:	83 c0 16             	add    eax,0x16
c0028ac5:	50                   	push   eax
c0028ac6:	e8 b5 7a fd ff       	call   c0000580 <strlen>
c0028acb:	83 c4 10             	add    esp,0x10
c0028ace:	ba 00 00 00 00       	mov    edx,0x0
c0028ad3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028ad7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0028adb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028ae2:	0f b6 c0             	movzx  eax,al
c0028ae5:	83 e0 10             	and    eax,0x10
c0028ae8:	74 0a                	je     c0028af4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0028aea:	b8 02 00 00 00       	mov    eax,0x2
c0028aef:	eb 0b                	jmp    c0028afc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028af1:	8d 76 00             	lea    esi,[esi+0x0]
c0028af4:	b8 01 00 00 00       	mov    eax,0x1
c0028af9:	8d 76 00             	lea    esi,[esi+0x0]
c0028afc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028b00:	83 ec 08             	sub    esp,0x8
c0028b03:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028b0a:	83 c0 16             	add    eax,0x16
c0028b0d:	50                   	push   eax
c0028b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028b12:	83 c0 10             	add    eax,0x10
c0028b15:	50                   	push   eax
c0028b16:	e8 35 7b fd ff       	call   c0000650 <strcpy>
c0028b1b:	83 c4 10             	add    esp,0x10
c0028b1e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0028b25:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028b2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028b30:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0028b37:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0028b3e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0028b45:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0028b4c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0028b53:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0028b5a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028b61:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028b68:	89 c6                	mov    esi,eax
c0028b6a:	89 d7                	mov    edi,edx
c0028b6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028b6e:	89 c8                	mov    eax,ecx
c0028b70:	89 fa                	mov    edx,edi
c0028b72:	89 f3                	mov    ebx,esi
c0028b74:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0028b7b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028b82:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028b89:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028b90:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028b96:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028b9d:	0f be c0             	movsx  eax,al
c0028ba0:	85 c0                	test   eax,eax
c0028ba2:	75 08                	jne    c0028bac <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028ba4:	b8 07 00 00 00       	mov    eax,0x7
c0028ba9:	eb 1d                	jmp    c0028bc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028bab:	90                   	nop
c0028bac:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028bb3:	85 c0                	test   eax,eax
c0028bb5:	75 09                	jne    c0028bc0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028bb7:	b8 00 00 00 00       	mov    eax,0x0
c0028bbc:	eb 0a                	jmp    c0028bc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028bbe:	66 90                	xchg   ax,ax
c0028bc0:	b8 01 00 00 00       	mov    eax,0x1
c0028bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0028bc8:	81 c4 50 02 00 00    	add    esp,0x250
c0028bce:	5b                   	pop    ebx
c0028bcf:	5e                   	pop    esi
c0028bd0:	5f                   	pop    edi
c0028bd1:	c3                   	ret    
c0028bd2:	66 90                	xchg   ax,ax

c0028bd4 <FAT::read(void*, unsigned long, void*, int*)>:
c0028bd4:	83 ec 1c             	sub    esp,0x1c
c0028bd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028bdc:	74 0a                	je     c0028be8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0028bde:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028be3:	75 0b                	jne    c0028bf0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028be5:	8d 76 00             	lea    esi,[esi+0x0]
c0028be8:	b8 04 00 00 00       	mov    eax,0x4
c0028bed:	eb 41                	jmp    c0028c30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028bef:	90                   	nop
c0028bf0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028bf4:	50                   	push   eax
c0028bf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028bf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028bfd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c01:	e8 a1 b6 fd ff       	call   c00042a7 <f_read>
c0028c06:	83 c4 10             	add    esp,0x10
c0028c09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c11:	89 c2                	mov    edx,eax
c0028c13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028c17:	89 10                	mov    DWORD PTR [eax],edx
c0028c19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028c1d:	85 c0                	test   eax,eax
c0028c1f:	75 07                	jne    c0028c28 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0028c21:	b8 00 00 00 00       	mov    eax,0x0
c0028c26:	eb 08                	jmp    c0028c30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028c28:	b8 01 00 00 00       	mov    eax,0x1
c0028c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0028c30:	83 c4 1c             	add    esp,0x1c
c0028c33:	c3                   	ret    

c0028c34 <FAT::write(void*, unsigned long, void*, int*)>:
c0028c34:	83 ec 1c             	sub    esp,0x1c
c0028c37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028c3c:	74 0a                	je     c0028c48 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028c3e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028c43:	75 0b                	jne    c0028c50 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0028c45:	8d 76 00             	lea    esi,[esi+0x0]
c0028c48:	b8 04 00 00 00       	mov    eax,0x4
c0028c4d:	eb 41                	jmp    c0028c90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028c4f:	90                   	nop
c0028c50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028c54:	50                   	push   eax
c0028c55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028c59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028c5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c61:	e8 22 b8 fd ff       	call   c0004488 <f_write>
c0028c66:	83 c4 10             	add    esp,0x10
c0028c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c71:	89 c2                	mov    edx,eax
c0028c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028c77:	89 10                	mov    DWORD PTR [eax],edx
c0028c79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028c7d:	85 c0                	test   eax,eax
c0028c7f:	75 07                	jne    c0028c88 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028c81:	b8 00 00 00 00       	mov    eax,0x0
c0028c86:	eb 08                	jmp    c0028c90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028c88:	b8 01 00 00 00       	mov    eax,0x1
c0028c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0028c90:	83 c4 1c             	add    esp,0x1c
c0028c93:	c3                   	ret    

c0028c94 <FAT::close(void*)>:
c0028c94:	83 ec 1c             	sub    esp,0x1c
c0028c97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028c9c:	75 0a                	jne    c0028ca8 <FAT::close(void*)+0x14>
c0028c9e:	b8 04 00 00 00       	mov    eax,0x4
c0028ca3:	eb 3f                	jmp    c0028ce4 <FAT::close(void*)+0x50>
c0028ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ca8:	83 ec 0c             	sub    esp,0xc
c0028cab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028caf:	e8 e0 ba fd ff       	call   c0004794 <f_close>
c0028cb4:	83 c4 10             	add    esp,0x10
c0028cb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028cbb:	83 ec 0c             	sub    esp,0xc
c0028cbe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028cc2:	e8 e5 d9 fe ff       	call   c00166ac <free>
c0028cc7:	83 c4 10             	add    esp,0x10
c0028cca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028cce:	85 c0                	test   eax,eax
c0028cd0:	75 0a                	jne    c0028cdc <FAT::close(void*)+0x48>
c0028cd2:	b8 00 00 00 00       	mov    eax,0x0
c0028cd7:	eb 0b                	jmp    c0028ce4 <FAT::close(void*)+0x50>
c0028cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0028cdc:	b8 01 00 00 00       	mov    eax,0x1
c0028ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ce4:	83 c4 1c             	add    esp,0x1c
c0028ce7:	c3                   	ret    

c0028ce8 <FAT::closeDir(void*)>:
c0028ce8:	83 ec 1c             	sub    esp,0x1c
c0028ceb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028cf0:	75 0a                	jne    c0028cfc <FAT::closeDir(void*)+0x14>
c0028cf2:	b8 04 00 00 00       	mov    eax,0x4
c0028cf7:	eb 3f                	jmp    c0028d38 <FAT::closeDir(void*)+0x50>
c0028cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0028cfc:	83 ec 0c             	sub    esp,0xc
c0028cff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028d03:	e8 36 bd fd ff       	call   c0004a3e <f_closedir>
c0028d08:	83 c4 10             	add    esp,0x10
c0028d0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028d0f:	83 ec 0c             	sub    esp,0xc
c0028d12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028d16:	e8 91 d9 fe ff       	call   c00166ac <free>
c0028d1b:	83 c4 10             	add    esp,0x10
c0028d1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028d22:	85 c0                	test   eax,eax
c0028d24:	75 0a                	jne    c0028d30 <FAT::closeDir(void*)+0x48>
c0028d26:	b8 00 00 00 00       	mov    eax,0x0
c0028d2b:	eb 0b                	jmp    c0028d38 <FAT::closeDir(void*)+0x50>
c0028d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0028d30:	b8 01 00 00 00       	mov    eax,0x1
c0028d35:	8d 76 00             	lea    esi,[esi+0x0]
c0028d38:	83 c4 1c             	add    esp,0x1c
c0028d3b:	c3                   	ret    

c0028d3c <FAT::truncate(void*, unsigned long long)>:
c0028d3c:	83 ec 2c             	sub    esp,0x2c
c0028d3f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028d43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028d47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028d4f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028d54:	75 0a                	jne    c0028d60 <FAT::truncate(void*, unsigned long long)+0x24>
c0028d56:	b8 04 00 00 00       	mov    eax,0x4
c0028d5b:	eb 47                	jmp    c0028da4 <FAT::truncate(void*, unsigned long long)+0x68>
c0028d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0028d60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028d64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028d67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028d6b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028d73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d77:	83 ec 08             	sub    esp,0x8
c0028d7a:	50                   	push   eax
c0028d7b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028d7f:	e8 3f ba fd ff       	call   c00047c3 <f_lseek>
c0028d84:	83 c4 10             	add    esp,0x10
c0028d87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028d8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028d8f:	85 c0                	test   eax,eax
c0028d91:	75 09                	jne    c0028d9c <FAT::truncate(void*, unsigned long long)+0x60>
c0028d93:	b8 00 00 00 00       	mov    eax,0x0
c0028d98:	eb 0a                	jmp    c0028da4 <FAT::truncate(void*, unsigned long long)+0x68>
c0028d9a:	66 90                	xchg   ax,ax
c0028d9c:	b8 01 00 00 00       	mov    eax,0x1
c0028da1:	8d 76 00             	lea    esi,[esi+0x0]
c0028da4:	83 c4 2c             	add    esp,0x2c
c0028da7:	c3                   	ret    

c0028da8 <FAT::seek(void*, unsigned long long)>:
c0028da8:	83 ec 2c             	sub    esp,0x2c
c0028dab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028daf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028db3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028dbb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028dc0:	75 0a                	jne    c0028dcc <FAT::seek(void*, unsigned long long)+0x24>
c0028dc2:	b8 04 00 00 00       	mov    eax,0x4
c0028dc7:	eb 33                	jmp    c0028dfc <FAT::seek(void*, unsigned long long)+0x54>
c0028dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0028dcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dd0:	83 ec 08             	sub    esp,0x8
c0028dd3:	50                   	push   eax
c0028dd4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028dd8:	e8 e6 b9 fd ff       	call   c00047c3 <f_lseek>
c0028ddd:	83 c4 10             	add    esp,0x10
c0028de0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028de8:	85 c0                	test   eax,eax
c0028dea:	75 08                	jne    c0028df4 <FAT::seek(void*, unsigned long long)+0x4c>
c0028dec:	b8 00 00 00 00       	mov    eax,0x0
c0028df1:	eb 09                	jmp    c0028dfc <FAT::seek(void*, unsigned long long)+0x54>
c0028df3:	90                   	nop
c0028df4:	b8 01 00 00 00       	mov    eax,0x1
c0028df9:	8d 76 00             	lea    esi,[esi+0x0]
c0028dfc:	83 c4 2c             	add    esp,0x2c
c0028dff:	c3                   	ret    

c0028e00 <fatWrapperReadDisk>:
c0028e00:	53                   	push   ebx
c0028e01:	83 ec 18             	sub    esp,0x18
c0028e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028e0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028e11:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028e18:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028e1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028e20:	ba 00 00 00 00       	mov    edx,0x0
c0028e25:	83 ec 0c             	sub    esp,0xc
c0028e28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028e2c:	53                   	push   ebx
c0028e2d:	52                   	push   edx
c0028e2e:	50                   	push   eax
c0028e2f:	51                   	push   ecx
c0028e30:	e8 65 3c ff ff       	call   c001ca9a <LogicalDisk::read(unsigned long long, int, void*)>
c0028e35:	83 c4 20             	add    esp,0x20
c0028e38:	83 c4 18             	add    esp,0x18
c0028e3b:	5b                   	pop    ebx
c0028e3c:	c3                   	ret    
c0028e3d:	8d 76 00             	lea    esi,[esi+0x0]

c0028e40 <fatWrapperWriteDisk>:
c0028e40:	53                   	push   ebx
c0028e41:	83 ec 18             	sub    esp,0x18
c0028e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e48:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028e4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028e51:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028e58:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028e5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028e60:	ba 00 00 00 00       	mov    edx,0x0
c0028e65:	83 ec 0c             	sub    esp,0xc
c0028e68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028e6c:	53                   	push   ebx
c0028e6d:	52                   	push   edx
c0028e6e:	50                   	push   eax
c0028e6f:	51                   	push   ecx
c0028e70:	e8 91 3c ff ff       	call   c001cb06 <LogicalDisk::write(unsigned long long, int, void*)>
c0028e75:	83 c4 20             	add    esp,0x20
c0028e78:	83 c4 18             	add    esp,0x18
c0028e7b:	5b                   	pop    ebx
c0028e7c:	c3                   	ret    
c0028e7d:	8d 76 00             	lea    esi,[esi+0x0]

c0028e80 <fatWrapperIoctl>:
c0028e80:	53                   	push   ebx
c0028e81:	83 ec 28             	sub    esp,0x28
c0028e84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028e88:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0028e8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028e90:	88 d0                	mov    al,dl
c0028e92:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028e96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028e9b:	83 f8 02             	cmp    eax,0x2
c0028e9e:	75 34                	jne    c0028ed4 <fatWrapperIoctl+0x54>
c0028ea0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028ea4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028ea8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028ead:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028eb4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028eba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028ec0:	89 c2                	mov    edx,eax
c0028ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028ec6:	66 89 10             	mov    WORD PTR [eax],dx
c0028ec9:	b8 00 00 00 00       	mov    eax,0x0
c0028ece:	e9 c5 00 00 00       	jmp    c0028f98 <fatWrapperIoctl+0x118>
c0028ed3:	90                   	nop
c0028ed4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ed9:	83 f8 01             	cmp    eax,0x1
c0028edc:	75 6a                	jne    c0028f48 <fatWrapperIoctl+0xc8>
c0028ede:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028ee2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028ee6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028eeb:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028ef2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028ef8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028efe:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028f04:	89 c8                	mov    eax,ecx
c0028f06:	89 da                	mov    edx,ebx
c0028f08:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028f0c:	c1 e0 0a             	shl    eax,0xa
c0028f0f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028f14:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028f1b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028f21:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028f27:	89 cb                	mov    ebx,ecx
c0028f29:	c1 fb 1f             	sar    ebx,0x1f
c0028f2c:	53                   	push   ebx
c0028f2d:	51                   	push   ecx
c0028f2e:	52                   	push   edx
c0028f2f:	50                   	push   eax
c0028f30:	e8 4b 5c 00 00       	call   c002eb80 <__udivdi3>
c0028f35:	83 c4 10             	add    esp,0x10
c0028f38:	89 c2                	mov    edx,eax
c0028f3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028f3e:	89 10                	mov    DWORD PTR [eax],edx
c0028f40:	b8 00 00 00 00       	mov    eax,0x0
c0028f45:	eb 51                	jmp    c0028f98 <fatWrapperIoctl+0x118>
c0028f47:	90                   	nop
c0028f48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f4d:	85 c0                	test   eax,eax
c0028f4f:	75 07                	jne    c0028f58 <fatWrapperIoctl+0xd8>
c0028f51:	b8 00 00 00 00       	mov    eax,0x0
c0028f56:	eb 40                	jmp    c0028f98 <fatWrapperIoctl+0x118>
c0028f58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f5d:	83 f8 03             	cmp    eax,0x3
c0028f60:	75 1a                	jne    c0028f7c <fatWrapperIoctl+0xfc>
c0028f62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028f66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028f6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028f6e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028f74:	b8 00 00 00 00       	mov    eax,0x0
c0028f79:	eb 1d                	jmp    c0028f98 <fatWrapperIoctl+0x118>
c0028f7b:	90                   	nop
c0028f7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f81:	83 f8 04             	cmp    eax,0x4
c0028f84:	75 0a                	jne    c0028f90 <fatWrapperIoctl+0x110>
c0028f86:	b8 00 00 00 00       	mov    eax,0x0
c0028f8b:	eb 0b                	jmp    c0028f98 <fatWrapperIoctl+0x118>
c0028f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0028f90:	b8 04 00 00 00       	mov    eax,0x4
c0028f95:	8d 76 00             	lea    esi,[esi+0x0]
c0028f98:	83 c4 28             	add    esp,0x28
c0028f9b:	5b                   	pop    ebx
c0028f9c:	c3                   	ret    
c0028f9d:	90                   	nop
c0028f9e:	66 90                	xchg   ax,ax

c0028fa0 <FAT::FAT()>:
c0028fa0:	83 ec 1c             	sub    esp,0x1c
c0028fa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028fa7:	83 ec 0c             	sub    esp,0xc
c0028faa:	50                   	push   eax
c0028fab:	e8 84 13 ff ff       	call   c001a334 <Filesystem::Filesystem()>
c0028fb0:	83 c4 10             	add    esp,0x10
c0028fb3:	ba 04 3a 03 c0       	mov    edx,0xc0033a04
c0028fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028fbc:	89 10                	mov    DWORD PTR [eax],edx
c0028fbe:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028fc8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028fd0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028fd5:	7f 19                	jg     c0028ff0 <FAT::FAT()+0x50>
c0028fd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028fdb:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028fe6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028feb:	eb e3                	jmp    c0028fd0 <FAT::FAT()+0x30>
c0028fed:	8d 76 00             	lea    esi,[esi+0x0]
c0028ff0:	90                   	nop
c0028ff1:	83 c4 1c             	add    esp,0x1c
c0028ff4:	c3                   	ret    
c0028ff5:	90                   	nop
c0028ff6:	66 90                	xchg   ax,ax

c0028ff8 <FAT::fixFilepath(char*)>:
c0028ff8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ffc:	8a 00                	mov    al,BYTE PTR [eax]
c0028ffe:	0f be c0             	movsx  eax,al
c0029001:	83 f8 40             	cmp    eax,0x40
c0029004:	7e 2e                	jle    c0029034 <FAT::fixFilepath(char*)+0x3c>
c0029006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002900a:	8a 00                	mov    al,BYTE PTR [eax]
c002900c:	83 e8 41             	sub    eax,0x41
c002900f:	88 c2                	mov    dl,al
c0029011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029015:	88 10                	mov    BYTE PTR [eax],dl
c0029017:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002901b:	8a 00                	mov    al,BYTE PTR [eax]
c002901d:	0f be c0             	movsx  eax,al
c0029020:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0029027:	83 c0 30             	add    eax,0x30
c002902a:	88 c2                	mov    dl,al
c002902c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029030:	88 10                	mov    BYTE PTR [eax],dl
c0029032:	66 90                	xchg   ax,ax
c0029034:	90                   	nop
c0029035:	c3                   	ret    
c0029036:	66 90                	xchg   ax,ax

c0029038 <FAT::open(char const*, void**, FileOpenMode)>:
c0029038:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002903e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029046:	74 0c                	je     c0029054 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0029048:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0029050:	75 0e                	jne    c0029060 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0029052:	66 90                	xchg   ax,ax
c0029054:	b8 04 00 00 00       	mov    eax,0x4
c0029059:	e9 46 01 00 00       	jmp    c00291a4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c002905e:	66 90                	xchg   ax,ax
c0029060:	83 ec 08             	sub    esp,0x8
c0029063:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002906a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002906e:	50                   	push   eax
c002906f:	e8 dc 75 fd ff       	call   c0000650 <strcpy>
c0029074:	83 c4 10             	add    esp,0x10
c0029077:	83 ec 08             	sub    esp,0x8
c002907a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002907e:	50                   	push   eax
c002907f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029086:	e8 6d ff ff ff       	call   c0028ff8 <FAT::fixFilepath(char*)>
c002908b:	83 c4 10             	add    esp,0x10
c002908e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0029096:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002909d:	83 e0 01             	and    eax,0x1
c00290a0:	74 12                	je     c00290b4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00290a2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00290a9:	83 c8 01             	or     eax,0x1
c00290ac:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00290b3:	90                   	nop
c00290b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00290bb:	83 e0 04             	and    eax,0x4
c00290be:	74 24                	je     c00290e4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00290c0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00290c7:	83 c8 30             	or     eax,0x30
c00290ca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00290d1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00290d8:	83 c8 02             	or     eax,0x2
c00290db:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00290e2:	66 90                	xchg   ax,ax
c00290e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00290eb:	83 e0 02             	and    eax,0x2
c00290ee:	74 14                	je     c0029104 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00290f0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00290f7:	83 c8 02             	or     eax,0x2
c00290fa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0029101:	8d 76 00             	lea    esi,[esi+0x0]
c0029104:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002910b:	83 e0 08             	and    eax,0x8
c002910e:	74 14                	je     c0029124 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0029110:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029117:	83 c8 04             	or     eax,0x4
c002911a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0029121:	8d 76 00             	lea    esi,[esi+0x0]
c0029124:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002912b:	83 e0 10             	and    eax,0x10
c002912e:	74 14                	je     c0029144 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0029130:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029137:	83 c8 08             	or     eax,0x8
c002913a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0029141:	8d 76 00             	lea    esi,[esi+0x0]
c0029144:	83 ec 0c             	sub    esp,0xc
c0029147:	68 28 02 00 00       	push   0x228
c002914c:	e8 4b d5 fe ff       	call   c001669c <malloc>
c0029151:	83 c4 10             	add    esp,0x10
c0029154:	89 c2                	mov    edx,eax
c0029156:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002915d:	89 10                	mov    DWORD PTR [eax],edx
c002915f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0029167:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002916e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029170:	83 ec 04             	sub    esp,0x4
c0029173:	52                   	push   edx
c0029174:	8d 54 24 10          	lea    edx,[esp+0x10]
c0029178:	52                   	push   edx
c0029179:	50                   	push   eax
c002917a:	e8 65 ae fd ff       	call   c0003fe4 <f_open>
c002917f:	83 c4 10             	add    esp,0x10
c0029182:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0029189:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0029191:	74 09                	je     c002919c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0029193:	b8 01 00 00 00       	mov    eax,0x1
c0029198:	eb 0a                	jmp    c00291a4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c002919a:	66 90                	xchg   ax,ax
c002919c:	b8 00 00 00 00       	mov    eax,0x0
c00291a1:	8d 76 00             	lea    esi,[esi+0x0]
c00291a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00291aa:	c3                   	ret    
c00291ab:	90                   	nop

c00291ac <FAT::openDir(char const*, void**)>:
c00291ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00291b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00291ba:	74 0c                	je     c00291c8 <FAT::openDir(char const*, void**)+0x1c>
c00291bc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00291c4:	75 0e                	jne    c00291d4 <FAT::openDir(char const*, void**)+0x28>
c00291c6:	66 90                	xchg   ax,ax
c00291c8:	b8 04 00 00 00       	mov    eax,0x4
c00291cd:	e9 82 00 00 00       	jmp    c0029254 <FAT::openDir(char const*, void**)+0xa8>
c00291d2:	66 90                	xchg   ax,ax
c00291d4:	83 ec 08             	sub    esp,0x8
c00291d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00291de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00291e2:	50                   	push   eax
c00291e3:	e8 68 74 fd ff       	call   c0000650 <strcpy>
c00291e8:	83 c4 10             	add    esp,0x10
c00291eb:	83 ec 08             	sub    esp,0x8
c00291ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00291f2:	50                   	push   eax
c00291f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00291fa:	e8 f9 fd ff ff       	call   c0028ff8 <FAT::fixFilepath(char*)>
c00291ff:	83 c4 10             	add    esp,0x10
c0029202:	83 ec 0c             	sub    esp,0xc
c0029205:	6a 30                	push   0x30
c0029207:	e8 90 d4 fe ff       	call   c001669c <malloc>
c002920c:	83 c4 10             	add    esp,0x10
c002920f:	89 c2                	mov    edx,eax
c0029211:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0029218:	89 10                	mov    DWORD PTR [eax],edx
c002921a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0029221:	8b 00                	mov    eax,DWORD PTR [eax]
c0029223:	83 ec 08             	sub    esp,0x8
c0029226:	8d 54 24 14          	lea    edx,[esp+0x14]
c002922a:	52                   	push   edx
c002922b:	50                   	push   eax
c002922c:	e8 42 b7 fd ff       	call   c0004973 <f_opendir>
c0029231:	83 c4 10             	add    esp,0x10
c0029234:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002923b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0029243:	74 07                	je     c002924c <FAT::openDir(char const*, void**)+0xa0>
c0029245:	b8 01 00 00 00       	mov    eax,0x1
c002924a:	eb 08                	jmp    c0029254 <FAT::openDir(char const*, void**)+0xa8>
c002924c:	b8 00 00 00 00       	mov    eax,0x0
c0029251:	8d 76 00             	lea    esi,[esi+0x0]
c0029254:	81 c4 1c 01 00 00    	add    esp,0x11c
c002925a:	c3                   	ret    
c002925b:	90                   	nop

c002925c <FAT::stat(char const*, unsigned long long*, bool*)>:
c002925c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0029262:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002926a:	75 0c                	jne    c0029278 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c002926c:	b8 04 00 00 00       	mov    eax,0x4
c0029271:	e9 d6 00 00 00       	jmp    c002934c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029276:	66 90                	xchg   ax,ax
c0029278:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0029280:	75 0a                	jne    c002928c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0029282:	b8 04 00 00 00       	mov    eax,0x4
c0029287:	e9 c0 00 00 00       	jmp    c002934c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c002928c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0029294:	75 0a                	jne    c00292a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0029296:	b8 04 00 00 00       	mov    eax,0x4
c002929b:	e9 ac 00 00 00       	jmp    c002934c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00292a0:	83 ec 08             	sub    esp,0x8
c00292a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00292aa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00292b1:	50                   	push   eax
c00292b2:	e8 99 73 fd ff       	call   c0000650 <strcpy>
c00292b7:	83 c4 10             	add    esp,0x10
c00292ba:	83 ec 08             	sub    esp,0x8
c00292bd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00292c4:	50                   	push   eax
c00292c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00292cc:	e8 27 fd ff ff       	call   c0028ff8 <FAT::fixFilepath(char*)>
c00292d1:	83 c4 10             	add    esp,0x10
c00292d4:	83 ec 08             	sub    esp,0x8
c00292d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00292db:	50                   	push   eax
c00292dc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00292e3:	50                   	push   eax
c00292e4:	e8 09 b8 fd ff       	call   c0004af2 <f_stat>
c00292e9:	83 c4 10             	add    esp,0x10
c00292ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00292f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00292fa:	85 c0                	test   eax,eax
c00292fc:	74 0a                	je     c0029308 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00292fe:	83 f8 04             	cmp    eax,0x4
c0029301:	74 39                	je     c002933c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029303:	eb 3f                	jmp    c0029344 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0029305:	8d 76 00             	lea    esi,[esi+0x0]
c0029308:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002930c:	0f b6 c0             	movzx  eax,al
c002930f:	83 e0 10             	and    eax,0x10
c0029312:	0f 95 c2             	setne  dl
c0029315:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002931c:	88 10                	mov    BYTE PTR [eax],dl
c002931e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029322:	ba 00 00 00 00       	mov    edx,0x0
c0029327:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002932e:	89 01                	mov    DWORD PTR [ecx],eax
c0029330:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0029333:	b8 00 00 00 00       	mov    eax,0x0
c0029338:	eb 12                	jmp    c002934c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c002933a:	66 90                	xchg   ax,ax
c002933c:	b8 02 00 00 00       	mov    eax,0x2
c0029341:	eb 09                	jmp    c002934c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029343:	90                   	nop
c0029344:	b8 01 00 00 00       	mov    eax,0x1
c0029349:	8d 76 00             	lea    esi,[esi+0x0]
c002934c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0029352:	c3                   	ret    
c0029353:	90                   	nop

c0029354 <FAT::unlink(char const*)>:
c0029354:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002935a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029362:	75 08                	jne    c002936c <FAT::unlink(char const*)+0x18>
c0029364:	b8 04 00 00 00       	mov    eax,0x4
c0029369:	eb 61                	jmp    c00293cc <FAT::unlink(char const*)+0x78>
c002936b:	90                   	nop
c002936c:	83 ec 08             	sub    esp,0x8
c002936f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029376:	8d 44 24 18          	lea    eax,[esp+0x18]
c002937a:	50                   	push   eax
c002937b:	e8 d0 72 fd ff       	call   c0000650 <strcpy>
c0029380:	83 c4 10             	add    esp,0x10
c0029383:	83 ec 08             	sub    esp,0x8
c0029386:	8d 44 24 14          	lea    eax,[esp+0x14]
c002938a:	50                   	push   eax
c002938b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029392:	e8 61 fc ff ff       	call   c0028ff8 <FAT::fixFilepath(char*)>
c0029397:	83 c4 10             	add    esp,0x10
c002939a:	83 ec 0c             	sub    esp,0xc
c002939d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00293a1:	50                   	push   eax
c00293a2:	e8 bd b9 fd ff       	call   c0004d64 <f_unlink>
c00293a7:	83 c4 10             	add    esp,0x10
c00293aa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00293b1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00293b8:	85 c0                	test   eax,eax
c00293ba:	75 08                	jne    c00293c4 <FAT::unlink(char const*)+0x70>
c00293bc:	b8 00 00 00 00       	mov    eax,0x0
c00293c1:	eb 09                	jmp    c00293cc <FAT::unlink(char const*)+0x78>
c00293c3:	90                   	nop
c00293c4:	b8 01 00 00 00       	mov    eax,0x1
c00293c9:	8d 76 00             	lea    esi,[esi+0x0]
c00293cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00293d2:	c3                   	ret    
c00293d3:	90                   	nop

c00293d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00293d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00293da:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c00293e1:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c00293e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00293ec:	88 d0                	mov    al,dl
c00293ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00293f2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00293fa:	75 0c                	jne    c0029408 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c00293fc:	b8 04 00 00 00       	mov    eax,0x4
c0029401:	e9 7e 01 00 00       	jmp    c0029584 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0029406:	66 90                	xchg   ax,ax
c0029408:	83 ec 08             	sub    esp,0x8
c002940b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0029412:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029416:	50                   	push   eax
c0029417:	e8 34 72 fd ff       	call   c0000650 <strcpy>
c002941c:	83 c4 10             	add    esp,0x10
c002941f:	83 ec 08             	sub    esp,0x8
c0029422:	8d 44 24 20          	lea    eax,[esp+0x20]
c0029426:	50                   	push   eax
c0029427:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002942e:	e8 c5 fb ff ff       	call   c0028ff8 <FAT::fixFilepath(char*)>
c0029433:	83 c4 10             	add    esp,0x10
c0029436:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002943e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0029446:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002944b:	83 e0 01             	and    eax,0x1
c002944e:	74 14                	je     c0029464 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0029450:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029457:	83 c8 01             	or     eax,0x1
c002945a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029461:	8d 76 00             	lea    esi,[esi+0x0]
c0029464:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029469:	83 e0 02             	and    eax,0x2
c002946c:	74 12                	je     c0029480 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c002946e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029475:	83 c8 20             	or     eax,0x20
c0029478:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002947f:	90                   	nop
c0029480:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029485:	83 e0 04             	and    eax,0x4
c0029488:	74 12                	je     c002949c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002948a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029491:	83 c8 04             	or     eax,0x4
c0029494:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002949b:	90                   	nop
c002949c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00294a1:	83 e0 08             	and    eax,0x8
c00294a4:	74 12                	je     c00294b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00294a6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00294ad:	83 c8 02             	or     eax,0x2
c00294b0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00294b7:	90                   	nop
c00294b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00294bd:	83 e0 01             	and    eax,0x1
c00294c0:	74 12                	je     c00294d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c00294c2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00294c9:	83 c8 01             	or     eax,0x1
c00294cc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00294d3:	90                   	nop
c00294d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00294d9:	83 e0 02             	and    eax,0x2
c00294dc:	74 12                	je     c00294f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c00294de:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00294e5:	83 c8 20             	or     eax,0x20
c00294e8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00294ef:	90                   	nop
c00294f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00294f5:	83 e0 04             	and    eax,0x4
c00294f8:	74 12                	je     c002950c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c00294fa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029501:	83 c8 04             	or     eax,0x4
c0029504:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002950b:	90                   	nop
c002950c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029511:	83 e0 08             	and    eax,0x8
c0029514:	74 12                	je     c0029528 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0029516:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002951d:	83 c8 02             	or     eax,0x2
c0029520:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029527:	90                   	nop
c0029528:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c002952f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029536:	09 d0                	or     eax,edx
c0029538:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002953f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0029547:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002954f:	83 ec 04             	sub    esp,0x4
c0029552:	52                   	push   edx
c0029553:	50                   	push   eax
c0029554:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029558:	50                   	push   eax
c0029559:	e8 79 bc fd ff       	call   c00051d7 <f_chmod>
c002955e:	83 c4 10             	add    esp,0x10
c0029561:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0029568:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002956f:	85 c0                	test   eax,eax
c0029571:	75 09                	jne    c002957c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0029573:	b8 00 00 00 00       	mov    eax,0x0
c0029578:	eb 0a                	jmp    c0029584 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c002957a:	66 90                	xchg   ax,ax
c002957c:	b8 01 00 00 00       	mov    eax,0x1
c0029581:	8d 76 00             	lea    esi,[esi+0x0]
c0029584:	81 c4 2c 01 00 00    	add    esp,0x12c
c002958a:	c3                   	ret    
c002958b:	90                   	nop

c002958c <FAT::rename(char const*, char const*)>:
c002958c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0029592:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002959a:	74 0c                	je     c00295a8 <FAT::rename(char const*, char const*)+0x1c>
c002959c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00295a4:	75 0e                	jne    c00295b4 <FAT::rename(char const*, char const*)+0x28>
c00295a6:	66 90                	xchg   ax,ax
c00295a8:	b8 04 00 00 00       	mov    eax,0x4
c00295ad:	e9 9e 00 00 00       	jmp    c0029650 <FAT::rename(char const*, char const*)+0xc4>
c00295b2:	66 90                	xchg   ax,ax
c00295b4:	83 ec 08             	sub    esp,0x8
c00295b7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00295be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00295c5:	50                   	push   eax
c00295c6:	e8 85 70 fd ff       	call   c0000650 <strcpy>
c00295cb:	83 c4 10             	add    esp,0x10
c00295ce:	83 ec 08             	sub    esp,0x8
c00295d1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00295d8:	50                   	push   eax
c00295d9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00295e0:	e8 13 fa ff ff       	call   c0028ff8 <FAT::fixFilepath(char*)>
c00295e5:	83 c4 10             	add    esp,0x10
c00295e8:	83 ec 08             	sub    esp,0x8
c00295eb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00295f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00295f6:	50                   	push   eax
c00295f7:	e8 54 70 fd ff       	call   c0000650 <strcpy>
c00295fc:	83 c4 10             	add    esp,0x10
c00295ff:	83 ec 08             	sub    esp,0x8
c0029602:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029606:	50                   	push   eax
c0029607:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002960e:	e8 e5 f9 ff ff       	call   c0028ff8 <FAT::fixFilepath(char*)>
c0029613:	83 c4 10             	add    esp,0x10
c0029616:	83 ec 08             	sub    esp,0x8
c0029619:	8d 44 24 14          	lea    eax,[esp+0x14]
c002961d:	50                   	push   eax
c002961e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029625:	50                   	push   eax
c0029626:	e8 f4 b9 fd ff       	call   c000501f <f_rename>
c002962b:	83 c4 10             	add    esp,0x10
c002962e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0029635:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002963c:	85 c0                	test   eax,eax
c002963e:	75 08                	jne    c0029648 <FAT::rename(char const*, char const*)+0xbc>
c0029640:	b8 00 00 00 00       	mov    eax,0x0
c0029645:	eb 09                	jmp    c0029650 <FAT::rename(char const*, char const*)+0xc4>
c0029647:	90                   	nop
c0029648:	b8 01 00 00 00       	mov    eax,0x1
c002964d:	8d 76 00             	lea    esi,[esi+0x0]
c0029650:	81 c4 1c 02 00 00    	add    esp,0x21c
c0029656:	c3                   	ret    
c0029657:	90                   	nop

c0029658 <FAT::mkdir(char const*)>:
c0029658:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002965e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029666:	75 08                	jne    c0029670 <FAT::mkdir(char const*)+0x18>
c0029668:	b8 04 00 00 00       	mov    eax,0x4
c002966d:	eb 61                	jmp    c00296d0 <FAT::mkdir(char const*)+0x78>
c002966f:	90                   	nop
c0029670:	83 ec 08             	sub    esp,0x8
c0029673:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002967a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002967e:	50                   	push   eax
c002967f:	e8 cc 6f fd ff       	call   c0000650 <strcpy>
c0029684:	83 c4 10             	add    esp,0x10
c0029687:	83 ec 08             	sub    esp,0x8
c002968a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002968e:	50                   	push   eax
c002968f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029696:	e8 5d f9 ff ff       	call   c0028ff8 <FAT::fixFilepath(char*)>
c002969b:	83 c4 10             	add    esp,0x10
c002969e:	83 ec 0c             	sub    esp,0xc
c00296a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00296a5:	50                   	push   eax
c00296a6:	e8 d9 b7 fd ff       	call   c0004e84 <f_mkdir>
c00296ab:	83 c4 10             	add    esp,0x10
c00296ae:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00296b5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00296bc:	85 c0                	test   eax,eax
c00296be:	75 08                	jne    c00296c8 <FAT::mkdir(char const*)+0x70>
c00296c0:	b8 00 00 00 00       	mov    eax,0x0
c00296c5:	eb 09                	jmp    c00296d0 <FAT::mkdir(char const*)+0x78>
c00296c7:	90                   	nop
c00296c8:	b8 01 00 00 00       	mov    eax,0x1
c00296cd:	8d 76 00             	lea    esi,[esi+0x0]
c00296d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00296d6:	c3                   	ret    
c00296d7:	90                   	nop

c00296d8 <FAT::exists(char const*)>:
c00296d8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00296de:	83 ec 08             	sub    esp,0x8
c00296e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00296e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00296ec:	50                   	push   eax
c00296ed:	e8 5e 6f fd ff       	call   c0000650 <strcpy>
c00296f2:	83 c4 10             	add    esp,0x10
c00296f5:	83 ec 08             	sub    esp,0x8
c00296f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00296fc:	50                   	push   eax
c00296fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029704:	e8 ef f8 ff ff       	call   c0028ff8 <FAT::fixFilepath(char*)>
c0029709:	83 c4 10             	add    esp,0x10
c002970c:	83 ec 08             	sub    esp,0x8
c002970f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0029716:	50                   	push   eax
c0029717:	8d 44 24 10          	lea    eax,[esp+0x10]
c002971b:	50                   	push   eax
c002971c:	e8 d1 b3 fd ff       	call   c0004af2 <f_stat>
c0029721:	83 c4 10             	add    esp,0x10
c0029724:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002972b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0029732:	85 c0                	test   eax,eax
c0029734:	75 06                	jne    c002973c <FAT::exists(char const*)+0x64>
c0029736:	b0 01                	mov    al,0x1
c0029738:	eb 06                	jmp    c0029740 <FAT::exists(char const*)+0x68>
c002973a:	66 90                	xchg   ax,ax
c002973c:	b0 00                	mov    al,0x0
c002973e:	66 90                	xchg   ax,ax
c0029740:	81 c4 2c 02 00 00    	add    esp,0x22c
c0029746:	c3                   	ret    
c0029747:	90                   	nop

c0029748 <isoReadDiscSectorHelper>:
c0029748:	83 ec 2c             	sub    esp,0x2c
c002974b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002974f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0029753:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0029758:	83 e8 41             	sub    eax,0x41
c002975b:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0029762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029766:	ba 00 00 00 00       	mov    edx,0x0
c002976b:	83 ec 0c             	sub    esp,0xc
c002976e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0029772:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0029776:	52                   	push   edx
c0029777:	50                   	push   eax
c0029778:	51                   	push   ecx
c0029779:	e8 1c 33 ff ff       	call   c001ca9a <LogicalDisk::read(unsigned long long, int, void*)>
c002977e:	83 c4 20             	add    esp,0x20
c0029781:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0029785:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002978a:	74 0c                	je     c0029798 <isoReadDiscSectorHelper+0x50>
c002978c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029790:	c1 e0 0b             	shl    eax,0xb
c0029793:	eb 0b                	jmp    c00297a0 <isoReadDiscSectorHelper+0x58>
c0029795:	8d 76 00             	lea    esi,[esi+0x0]
c0029798:	b8 00 00 00 00       	mov    eax,0x0
c002979d:	8d 76 00             	lea    esi,[esi+0x0]
c00297a0:	83 c4 2c             	add    esp,0x2c
c00297a3:	c3                   	ret    

c00297a4 <iso_kprintf>:
c00297a4:	83 ec 0c             	sub    esp,0xc
c00297a7:	83 ec 08             	sub    esp,0x8
c00297aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00297ae:	68 b2 37 03 c0       	push   0xc00337b2
c00297b3:	e8 1a fd fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00297b8:	83 c4 10             	add    esp,0x10
c00297bb:	90                   	nop
c00297bc:	83 c4 0c             	add    esp,0xc
c00297bf:	c3                   	ret    

c00297c0 <iso_kprintfd>:
c00297c0:	83 ec 0c             	sub    esp,0xc
c00297c3:	83 ec 08             	sub    esp,0x8
c00297c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00297ca:	68 b6 1c 03 c0       	push   0xc0031cb6
c00297cf:	e8 fe fc fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00297d4:	83 c4 10             	add    esp,0x10
c00297d7:	90                   	nop
c00297d8:	83 c4 0c             	add    esp,0xc
c00297db:	c3                   	ret    

c00297dc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00297dc:	b8 08 00 00 00       	mov    eax,0x8
c00297e1:	c3                   	ret    

c00297e2 <ISO9660::truncate(void*, unsigned long long)>:
c00297e2:	b8 01 00 00 00       	mov    eax,0x1
c00297e7:	c3                   	ret    

c00297e8 <ISO9660::getName()>:
c00297e8:	b8 68 3a 03 c0       	mov    eax,0xc0033a68
c00297ed:	c3                   	ret    

c00297ee <ISO9660::closeDir(void*)>:
c00297ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00297f4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00297f7:	90                   	nop

c00297f8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00297f8:	b8 01 00 00 00       	mov    eax,0x1
c00297fd:	c3                   	ret    

c00297fe <ISO9660::unlink(char const*)>:
c00297fe:	b8 01 00 00 00       	mov    eax,0x1
c0029803:	c3                   	ret    

c0029804 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0029804:	b8 03 00 00 00       	mov    eax,0x3
c0029809:	c3                   	ret    

c002980a <ISO9660::rename(char const*, char const*)>:
c002980a:	b8 01 00 00 00       	mov    eax,0x1
c002980f:	c3                   	ret    

c0029810 <ISO9660::mkdir(char const*)>:
c0029810:	b8 01 00 00 00       	mov    eax,0x1
c0029815:	c3                   	ret    

c0029816 <ISO9660::~ISO9660()>:
c0029816:	83 ec 0c             	sub    esp,0xc
c0029819:	ba a8 3b 03 c0       	mov    edx,0xc0033ba8
c002981e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029822:	89 10                	mov    DWORD PTR [eax],edx
c0029824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029828:	83 ec 0c             	sub    esp,0xc
c002982b:	50                   	push   eax
c002982c:	e8 27 0b ff ff       	call   c001a358 <Filesystem::~Filesystem()>
c0029831:	83 c4 10             	add    esp,0x10
c0029834:	90                   	nop
c0029835:	83 c4 0c             	add    esp,0xc
c0029838:	c3                   	ret    
c0029839:	90                   	nop

c002983a <ISO9660::~ISO9660()>:
c002983a:	83 ec 0c             	sub    esp,0xc
c002983d:	83 ec 0c             	sub    esp,0xc
c0029840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029844:	e8 cd ff ff ff       	call   c0029816 <ISO9660::~ISO9660()>
c0029849:	83 c4 10             	add    esp,0x10
c002984c:	83 ec 08             	sub    esp,0x8
c002984f:	6a 08                	push   0x8
c0029851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029855:	e8 7a fb fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002985a:	83 c4 10             	add    esp,0x10
c002985d:	83 c4 0c             	add    esp,0xc
c0029860:	c3                   	ret    
c0029861:	90                   	nop

c0029862 <ISO9660::exists(char const*)>:
c0029862:	83 ec 18             	sub    esp,0x18
c0029865:	68 83 3a 03 c0       	push   0xc0033a83
c002986a:	e8 27 6d ff ff       	call   c0020596 <KePanic(char const*)>
c002986f:	31 c0                	xor    eax,eax
c0029871:	83 c4 1c             	add    esp,0x1c
c0029874:	c3                   	ret    
c0029875:	90                   	nop

c0029876 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0029876:	56                   	push   esi
c0029877:	53                   	push   ebx
c0029878:	53                   	push   ebx
c0029879:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002987d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029881:	85 db                	test   ebx,ebx
c0029883:	0f 84 ca 00 00 00    	je     c0029953 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029889:	85 f6                	test   esi,esi
c002988b:	0f 84 c2 00 00 00    	je     c0029953 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029891:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029896:	b8 03 00 00 00       	mov    eax,0x3
c002989b:	0f 85 b7 00 00 00    	jne    c0029958 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00298a1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00298a3:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00298a9:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00298b0:	74 1b                	je     c00298cd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00298b2:	85 c0                	test   eax,eax
c00298b4:	74 10                	je     c00298c6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00298b6:	83 ec 0c             	sub    esp,0xc
c00298b9:	68 a1 3a 03 c0       	push   0xc0033aa1
c00298be:	e8 d3 6c ff ff       	call   c0020596 <KePanic(char const*)>
c00298c3:	83 c4 10             	add    esp,0x10
c00298c6:	8a 03                	mov    al,BYTE PTR [ebx]
c00298c8:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00298cd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00298d0:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00298d7:	85 c0                	test   eax,eax
c00298d9:	74 09                	je     c00298e4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00298db:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00298e2:	74 48                	je     c002992c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00298e4:	83 ec 0c             	sub    esp,0xc
c00298e7:	68 b1 3a 03 c0       	push   0xc0033ab1
c00298ec:	e8 e1 fb fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c00298f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00298f4:	83 c4 10             	add    esp,0x10
c00298f7:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00298fe:	85 c0                	test   eax,eax
c0029900:	74 17                	je     c0029919 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0029902:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029909:	83 ec 0c             	sub    esp,0xc
c002990c:	68 d1 3a 03 c0       	push   0xc0033ad1
c0029911:	e8 bc fb fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0029916:	83 c4 10             	add    esp,0x10
c0029919:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029920:	83 ec 0c             	sub    esp,0xc
c0029923:	50                   	push   eax
c0029924:	e8 82 d4 fd ff       	call   c0006dab <init_percd>
c0029929:	83 c4 10             	add    esp,0x10
c002992c:	51                   	push   ecx
c002992d:	83 c3 03             	add    ebx,0x3
c0029930:	51                   	push   ecx
c0029931:	6a 00                	push   0x0
c0029933:	53                   	push   ebx
c0029934:	e8 35 cf fd ff       	call   c000686e <iso_open>
c0029939:	83 c4 10             	add    esp,0x10
c002993c:	89 c2                	mov    edx,eax
c002993e:	b8 01 00 00 00       	mov    eax,0x1
c0029943:	83 fa ff             	cmp    edx,0xffffffff
c0029946:	74 10                	je     c0029958 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029948:	83 c2 32             	add    edx,0x32
c002994b:	31 c0                	xor    eax,eax
c002994d:	01 d2                	add    edx,edx
c002994f:	89 16                	mov    DWORD PTR [esi],edx
c0029951:	eb 05                	jmp    c0029958 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029953:	b8 04 00 00 00       	mov    eax,0x4
c0029958:	5a                   	pop    edx
c0029959:	5b                   	pop    ebx
c002995a:	5e                   	pop    esi
c002995b:	c3                   	ret    

c002995c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002995c:	53                   	push   ebx
c002995d:	83 ec 08             	sub    esp,0x8
c0029960:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029964:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029968:	85 c0                	test   eax,eax
c002996a:	74 2d                	je     c0029999 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c002996c:	85 db                	test   ebx,ebx
c002996e:	74 29                	je     c0029999 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029970:	52                   	push   edx
c0029971:	b9 02 00 00 00       	mov    ecx,0x2
c0029976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002997a:	99                   	cdq    
c002997b:	f7 f9                	idiv   ecx
c002997d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029981:	83 e8 32             	sub    eax,0x32
c0029984:	50                   	push   eax
c0029985:	e8 8c cf fd ff       	call   c0006916 <iso_read>
c002998a:	83 c4 10             	add    esp,0x10
c002998d:	89 03                	mov    DWORD PTR [ebx],eax
c002998f:	09 d0                	or     eax,edx
c0029991:	0f 94 c0             	sete   al
c0029994:	0f b6 c0             	movzx  eax,al
c0029997:	eb 05                	jmp    c002999e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029999:	b8 04 00 00 00       	mov    eax,0x4
c002999e:	83 c4 08             	add    esp,0x8
c00299a1:	5b                   	pop    ebx
c00299a2:	c3                   	ret    
c00299a3:	90                   	nop

c00299a4 <ISO9660::seek(void*, unsigned long long)>:
c00299a4:	57                   	push   edi
c00299a5:	b8 04 00 00 00       	mov    eax,0x4
c00299aa:	56                   	push   esi
c00299ab:	51                   	push   ecx
c00299ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00299b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00299b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00299b8:	85 d2                	test   edx,edx
c00299ba:	74 26                	je     c00299e2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00299bc:	89 d0                	mov    eax,edx
c00299be:	b9 02 00 00 00       	mov    ecx,0x2
c00299c3:	6a 00                	push   0x0
c00299c5:	99                   	cdq    
c00299c6:	f7 f9                	idiv   ecx
c00299c8:	57                   	push   edi
c00299c9:	56                   	push   esi
c00299ca:	83 e8 32             	sub    eax,0x32
c00299cd:	50                   	push   eax
c00299ce:	e8 59 d0 fd ff       	call   c0006a2c <iso_seek>
c00299d3:	83 c4 10             	add    esp,0x10
c00299d6:	31 f0                	xor    eax,esi
c00299d8:	31 fa                	xor    edx,edi
c00299da:	09 d0                	or     eax,edx
c00299dc:	0f 95 c0             	setne  al
c00299df:	0f b6 c0             	movzx  eax,al
c00299e2:	5a                   	pop    edx
c00299e3:	5e                   	pop    esi
c00299e4:	5f                   	pop    edi
c00299e5:	c3                   	ret    

c00299e6 <ISO9660::tell(void*, unsigned long long*)>:
c00299e6:	53                   	push   ebx
c00299e7:	83 ec 08             	sub    esp,0x8
c00299ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00299ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00299f2:	85 c0                	test   eax,eax
c00299f4:	74 24                	je     c0029a1a <ISO9660::tell(void*, unsigned long long*)+0x34>
c00299f6:	85 db                	test   ebx,ebx
c00299f8:	74 20                	je     c0029a1a <ISO9660::tell(void*, unsigned long long*)+0x34>
c00299fa:	b9 02 00 00 00       	mov    ecx,0x2
c00299ff:	99                   	cdq    
c0029a00:	f7 f9                	idiv   ecx
c0029a02:	83 ec 0c             	sub    esp,0xc
c0029a05:	83 e8 32             	sub    eax,0x32
c0029a08:	50                   	push   eax
c0029a09:	e8 a2 d0 fd ff       	call   c0006ab0 <iso_tell>
c0029a0e:	83 c4 10             	add    esp,0x10
c0029a11:	89 03                	mov    DWORD PTR [ebx],eax
c0029a13:	31 c0                	xor    eax,eax
c0029a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0029a18:	eb 05                	jmp    c0029a1f <ISO9660::tell(void*, unsigned long long*)+0x39>
c0029a1a:	b8 04 00 00 00       	mov    eax,0x4
c0029a1f:	83 c4 08             	add    esp,0x8
c0029a22:	5b                   	pop    ebx
c0029a23:	c3                   	ret    

c0029a24 <ISO9660::stat(void*, unsigned long long*)>:
c0029a24:	56                   	push   esi
c0029a25:	53                   	push   ebx
c0029a26:	83 ec 10             	sub    esp,0x10
c0029a29:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029a2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029a31:	68 f5 3a 03 c0       	push   0xc0033af5
c0029a36:	e8 97 fa fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0029a3b:	83 c4 10             	add    esp,0x10
c0029a3e:	85 db                	test   ebx,ebx
c0029a40:	74 2a                	je     c0029a6c <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029a42:	85 f6                	test   esi,esi
c0029a44:	74 26                	je     c0029a6c <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029a46:	89 d8                	mov    eax,ebx
c0029a48:	b9 02 00 00 00       	mov    ecx,0x2
c0029a4d:	99                   	cdq    
c0029a4e:	83 ec 0c             	sub    esp,0xc
c0029a51:	f7 f9                	idiv   ecx
c0029a53:	83 e8 32             	sub    eax,0x32
c0029a56:	50                   	push   eax
c0029a57:	e8 85 d0 fd ff       	call   c0006ae1 <iso_total>
c0029a5c:	83 c4 10             	add    esp,0x10
c0029a5f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0029a66:	89 06                	mov    DWORD PTR [esi],eax
c0029a68:	31 c0                	xor    eax,eax
c0029a6a:	eb 05                	jmp    c0029a71 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0029a6c:	b8 04 00 00 00       	mov    eax,0x4
c0029a71:	5a                   	pop    edx
c0029a72:	5b                   	pop    ebx
c0029a73:	5e                   	pop    esi
c0029a74:	c3                   	ret    
c0029a75:	90                   	nop

c0029a76 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029a76:	55                   	push   ebp
c0029a77:	57                   	push   edi
c0029a78:	56                   	push   esi
c0029a79:	53                   	push   ebx
c0029a7a:	83 ec 18             	sub    esp,0x18
c0029a7d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029a81:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0029a85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029a89:	68 fd 3a 03 c0       	push   0xc0033afd
c0029a8e:	e8 3f fa fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0029a93:	83 c4 10             	add    esp,0x10
c0029a96:	85 ff                	test   edi,edi
c0029a98:	0f 94 c0             	sete   al
c0029a9b:	85 f6                	test   esi,esi
c0029a9d:	0f 94 c2             	sete   dl
c0029aa0:	09 d0                	or     eax,edx
c0029aa2:	a8 01                	test   al,0x1
c0029aa4:	0f 85 dd 00 00 00    	jne    c0029b87 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029aaa:	85 db                	test   ebx,ebx
c0029aac:	0f 84 d5 00 00 00    	je     c0029b87 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029ab2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029ab5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029abb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029ac2:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029ac9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029acb:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029ad1:	74 1b                	je     c0029aee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0029ad3:	85 c0                	test   eax,eax
c0029ad5:	74 10                	je     c0029ae7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0029ad7:	83 ec 0c             	sub    esp,0xc
c0029ada:	68 a1 3a 03 c0       	push   0xc0033aa1
c0029adf:	e8 b2 6a ff ff       	call   c0020596 <KePanic(char const*)>
c0029ae4:	83 c4 10             	add    esp,0x10
c0029ae7:	8a 03                	mov    al,BYTE PTR [ebx]
c0029ae9:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029aee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029af1:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029af8:	85 c0                	test   eax,eax
c0029afa:	74 09                	je     c0029b05 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029afc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029b03:	74 51                	je     c0029b56 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029b05:	83 ec 0c             	sub    esp,0xc
c0029b08:	68 05 3b 03 c0       	push   0xc0033b05
c0029b0d:	e8 c0 f9 fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0029b12:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029b15:	83 c4 10             	add    esp,0x10
c0029b18:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c0029b20:	74 21                	je     c0029b43 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0029b22:	83 ec 0c             	sub    esp,0xc
c0029b25:	68 25 3b 03 c0       	push   0xc0033b25
c0029b2a:	e8 a3 f9 fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0029b2f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029b32:	83 c4 10             	add    esp,0x10
c0029b35:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029b3c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029b43:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029b4a:	83 ec 0c             	sub    esp,0xc
c0029b4d:	50                   	push   eax
c0029b4e:	e8 58 d2 fd ff       	call   c0006dab <init_percd>
c0029b53:	83 c4 10             	add    esp,0x10
c0029b56:	52                   	push   edx
c0029b57:	83 c3 03             	add    ebx,0x3
c0029b5a:	52                   	push   edx
c0029b5b:	6a 00                	push   0x0
c0029b5d:	53                   	push   ebx
c0029b5e:	e8 0b cd fd ff       	call   c000686e <iso_open>
c0029b63:	83 c4 10             	add    esp,0x10
c0029b66:	83 f8 ff             	cmp    eax,0xffffffff
c0029b69:	89 c5                	mov    ebp,eax
c0029b6b:	75 21                	jne    c0029b8e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0029b6d:	50                   	push   eax
c0029b6e:	50                   	push   eax
c0029b6f:	6a 01                	push   0x1
c0029b71:	53                   	push   ebx
c0029b72:	e8 f7 cc fd ff       	call   c000686e <iso_open>
c0029b77:	83 c4 10             	add    esp,0x10
c0029b7a:	ba 02 00 00 00       	mov    edx,0x2
c0029b7f:	40                   	inc    eax
c0029b80:	74 2b                	je     c0029bad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029b82:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0029b85:	eb 24                	jmp    c0029bab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0029b87:	ba 04 00 00 00       	mov    edx,0x4
c0029b8c:	eb 1f                	jmp    c0029bad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029b8e:	83 ec 0c             	sub    esp,0xc
c0029b91:	50                   	push   eax
c0029b92:	e8 4a cf fd ff       	call   c0006ae1 <iso_total>
c0029b97:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029b9e:	89 07                	mov    DWORD PTR [edi],eax
c0029ba0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029ba3:	e8 50 cd fd ff       	call   c00068f8 <iso_close>
c0029ba8:	83 c4 10             	add    esp,0x10
c0029bab:	31 d2                	xor    edx,edx
c0029bad:	83 c4 0c             	add    esp,0xc
c0029bb0:	89 d0                	mov    eax,edx
c0029bb2:	5b                   	pop    ebx
c0029bb3:	5e                   	pop    esi
c0029bb4:	5f                   	pop    edi
c0029bb5:	5d                   	pop    ebp
c0029bb6:	c3                   	ret    
c0029bb7:	90                   	nop

c0029bb8 <ISO9660::close(void*)>:
c0029bb8:	83 ec 0c             	sub    esp,0xc
c0029bbb:	b8 04 00 00 00       	mov    eax,0x4
c0029bc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029bc4:	85 d2                	test   edx,edx
c0029bc6:	74 1b                	je     c0029be3 <ISO9660::close(void*)+0x2b>
c0029bc8:	89 d0                	mov    eax,edx
c0029bca:	b9 02 00 00 00       	mov    ecx,0x2
c0029bcf:	99                   	cdq    
c0029bd0:	83 ec 0c             	sub    esp,0xc
c0029bd3:	f7 f9                	idiv   ecx
c0029bd5:	83 e8 32             	sub    eax,0x32
c0029bd8:	50                   	push   eax
c0029bd9:	e8 1a cd fd ff       	call   c00068f8 <iso_close>
c0029bde:	83 c4 10             	add    esp,0x10
c0029be1:	31 c0                	xor    eax,eax
c0029be3:	83 c4 0c             	add    esp,0xc
c0029be6:	c3                   	ret    
c0029be7:	90                   	nop

c0029be8 <ISO9660::openDir(char const*, void**)>:
c0029be8:	56                   	push   esi
c0029be9:	53                   	push   ebx
c0029bea:	50                   	push   eax
c0029beb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029bef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029bf3:	85 db                	test   ebx,ebx
c0029bf5:	0f 84 bd 00 00 00    	je     c0029cb8 <ISO9660::openDir(char const*, void**)+0xd0>
c0029bfb:	85 f6                	test   esi,esi
c0029bfd:	0f 84 b5 00 00 00    	je     c0029cb8 <ISO9660::openDir(char const*, void**)+0xd0>
c0029c03:	8a 13                	mov    dl,BYTE PTR [ebx]
c0029c05:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c0029c0b:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029c12:	74 1b                	je     c0029c2f <ISO9660::openDir(char const*, void**)+0x47>
c0029c14:	85 c0                	test   eax,eax
c0029c16:	74 10                	je     c0029c28 <ISO9660::openDir(char const*, void**)+0x40>
c0029c18:	83 ec 0c             	sub    esp,0xc
c0029c1b:	68 a1 3a 03 c0       	push   0xc0033aa1
c0029c20:	e8 71 69 ff ff       	call   c0020596 <KePanic(char const*)>
c0029c25:	83 c4 10             	add    esp,0x10
c0029c28:	8a 03                	mov    al,BYTE PTR [ebx]
c0029c2a:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029c2f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029c32:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029c39:	85 c0                	test   eax,eax
c0029c3b:	74 10                	je     c0029c4d <ISO9660::openDir(char const*, void**)+0x65>
c0029c3d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029c44:	74 1a                	je     c0029c60 <ISO9660::openDir(char const*, void**)+0x78>
c0029c46:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029c4d:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029c54:	83 ec 0c             	sub    esp,0xc
c0029c57:	50                   	push   eax
c0029c58:	e8 4e d1 fd ff       	call   c0006dab <init_percd>
c0029c5d:	83 c4 10             	add    esp,0x10
c0029c60:	50                   	push   eax
c0029c61:	83 c3 03             	add    ebx,0x3
c0029c64:	50                   	push   eax
c0029c65:	6a 01                	push   0x1
c0029c67:	53                   	push   ebx
c0029c68:	e8 01 cc fd ff       	call   c000686e <iso_open>
c0029c6d:	83 c4 10             	add    esp,0x10
c0029c70:	83 f8 ff             	cmp    eax,0xffffffff
c0029c73:	89 c3                	mov    ebx,eax
c0029c75:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029c7a:	75 1c                	jne    c0029c98 <ISO9660::openDir(char const*, void**)+0xb0>
c0029c7c:	53                   	push   ebx
c0029c7d:	53                   	push   ebx
c0029c7e:	68 49 3b 03 c0       	push   0xc0033b49
c0029c83:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029c89:	e8 e6 d9 fe ff       	call   c0017674 <VgaText::puts(char const*)>
c0029c8e:	83 c4 10             	add    esp,0x10
c0029c91:	b8 01 00 00 00       	mov    eax,0x1
c0029c96:	eb 25                	jmp    c0029cbd <ISO9660::openDir(char const*, void**)+0xd5>
c0029c98:	51                   	push   ecx
c0029c99:	01 db                	add    ebx,ebx
c0029c9b:	51                   	push   ecx
c0029c9c:	83 c3 65             	add    ebx,0x65
c0029c9f:	68 5c 3b 03 c0       	push   0xc0033b5c
c0029ca4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029caa:	e8 c5 d9 fe ff       	call   c0017674 <VgaText::puts(char const*)>
c0029caf:	83 c4 10             	add    esp,0x10
c0029cb2:	31 c0                	xor    eax,eax
c0029cb4:	89 1e                	mov    DWORD PTR [esi],ebx
c0029cb6:	eb 05                	jmp    c0029cbd <ISO9660::openDir(char const*, void**)+0xd5>
c0029cb8:	b8 04 00 00 00       	mov    eax,0x4
c0029cbd:	5a                   	pop    edx
c0029cbe:	5b                   	pop    ebx
c0029cbf:	5e                   	pop    esi
c0029cc0:	c3                   	ret    
c0029cc1:	90                   	nop

c0029cc2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029cc2:	55                   	push   ebp
c0029cc3:	57                   	push   edi
c0029cc4:	56                   	push   esi
c0029cc5:	53                   	push   ebx
c0029cc6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029ccc:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0029cd3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029cda:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0029ce1:	85 db                	test   ebx,ebx
c0029ce3:	0f 84 e4 00 00 00    	je     c0029dcd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0029ce9:	85 ed                	test   ebp,ebp
c0029ceb:	0f 84 dc 00 00 00    	je     c0029dcd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0029cf1:	83 ec 0c             	sub    esp,0xc
c0029cf4:	68 6f 3b 03 c0       	push   0xc0033b6f
c0029cf9:	e8 d4 f7 fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c0029cfe:	89 d8                	mov    eax,ebx
c0029d00:	b9 02 00 00 00       	mov    ecx,0x2
c0029d05:	99                   	cdq    
c0029d06:	f7 f9                	idiv   ecx
c0029d08:	83 e8 32             	sub    eax,0x32
c0029d0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0029d0e:	e8 20 ce fd ff       	call   c0006b33 <iso_readdir>
c0029d13:	83 c4 10             	add    esp,0x10
c0029d16:	85 c0                	test   eax,eax
c0029d18:	89 c3                	mov    ebx,eax
c0029d1a:	75 38                	jne    c0029d54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0029d1c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029d21:	53                   	push   ebx
c0029d22:	53                   	push   ebx
c0029d23:	68 7a 3b 03 c0       	push   0xc0033b7a
c0029d28:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029d2e:	e8 41 d9 fe ff       	call   c0017674 <VgaText::puts(char const*)>
c0029d33:	83 c4 0c             	add    esp,0xc
c0029d36:	68 10 01 00 00       	push   0x110
c0029d3b:	6a 00                	push   0x0
c0029d3d:	57                   	push   edi
c0029d3e:	e8 ad 67 fd ff       	call   c00004f0 <memset>
c0029d43:	83 c4 10             	add    esp,0x10
c0029d46:	b8 01 00 00 00       	mov    eax,0x1
c0029d4b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0029d52:	eb 7e                	jmp    c0029dd2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0029d54:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029d5a:	8d 70 08             	lea    esi,[eax+0x8]
c0029d5d:	83 ec 0c             	sub    esp,0xc
c0029d60:	56                   	push   esi
c0029d61:	e8 1a 68 fd ff       	call   c0000580 <strlen>
c0029d66:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029d6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029d72:	83 c4 10             	add    esp,0x10
c0029d75:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0029d79:	75 0a                	jne    c0029d85 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0029d7b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0029d7e:	b8 02 00 00 00       	mov    eax,0x2
c0029d83:	74 05                	je     c0029d8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0029d85:	b8 01 00 00 00       	mov    eax,0x1
c0029d8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029d8e:	50                   	push   eax
c0029d8f:	50                   	push   eax
c0029d90:	56                   	push   esi
c0029d91:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029d95:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029d99:	50                   	push   eax
c0029d9a:	e8 b1 68 fd ff       	call   c0000650 <strcpy>
c0029d9f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029da6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029da8:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0029daf:	5a                   	pop    edx
c0029db0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029db5:	59                   	pop    ecx
c0029db6:	68 8d 3b 03 c0       	push   0xc0033b8d
c0029dbb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029dc1:	e8 ae d8 fe ff       	call   c0017674 <VgaText::puts(char const*)>
c0029dc6:	83 c4 10             	add    esp,0x10
c0029dc9:	31 c0                	xor    eax,eax
c0029dcb:	eb 05                	jmp    c0029dd2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0029dcd:	b8 04 00 00 00       	mov    eax,0x4
c0029dd2:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029dd8:	5b                   	pop    ebx
c0029dd9:	5e                   	pop    esi
c0029dda:	5f                   	pop    edi
c0029ddb:	5d                   	pop    ebp
c0029ddc:	c3                   	ret    

c0029ddd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029ddd:	57                   	push   edi
c0029dde:	56                   	push   esi
c0029ddf:	53                   	push   ebx
c0029de0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029de4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029de8:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c0029dee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029df2:	0f be cb             	movsx  ecx,bl
c0029df5:	75 0b                	jne    c0029e02 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029df7:	0f be 05 40 4e 03 c0 	movsx  eax,BYTE PTR ds:0xc0034e40
c0029dfe:	39 c8                	cmp    eax,ecx
c0029e00:	74 47                	je     c0029e49 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029e02:	83 ec 0c             	sub    esp,0xc
c0029e05:	31 d2                	xor    edx,edx
c0029e07:	68 a0 03 04 c0       	push   0xc00403a0
c0029e0c:	6a 01                	push   0x1
c0029e0e:	52                   	push   edx
c0029e0f:	56                   	push   esi
c0029e10:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c0029e17:	e8 7e 2c ff ff       	call   c001ca9a <LogicalDisk::read(unsigned long long, int, void*)>
c0029e1c:	83 c4 20             	add    esp,0x20
c0029e1f:	85 c0                	test   eax,eax
c0029e21:	75 0e                	jne    c0029e31 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029e23:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c0029e29:	88 1d 40 4e 03 c0    	mov    BYTE PTR ds:0xc0034e40,bl
c0029e2f:	eb 18                	jmp    c0029e49 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029e31:	50                   	push   eax
c0029e32:	68 00 08 00 00       	push   0x800
c0029e37:	6a 00                	push   0x0
c0029e39:	57                   	push   edi
c0029e3a:	e8 b1 66 fd ff       	call   c00004f0 <memset>
c0029e3f:	83 c4 10             	add    esp,0x10
c0029e42:	b8 01 00 00 00       	mov    eax,0x1
c0029e47:	eb 0e                	jmp    c0029e57 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029e49:	be a0 03 04 c0       	mov    esi,0xc00403a0
c0029e4e:	b9 00 08 00 00       	mov    ecx,0x800
c0029e53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029e55:	31 c0                	xor    eax,eax
c0029e57:	5b                   	pop    ebx
c0029e58:	5e                   	pop    esi
c0029e59:	5f                   	pop    edi
c0029e5a:	c3                   	ret    
c0029e5b:	90                   	nop

c0029e5c <ISO9660::tryMount(LogicalDisk*, int)>:
c0029e5c:	53                   	push   ebx
c0029e5d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029e63:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c0029e6d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029e74:	8d 58 41             	lea    ebx,[eax+0x41]
c0029e77:	0f be db             	movsx  ebx,bl
c0029e7a:	53                   	push   ebx
c0029e7b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029e7f:	50                   	push   eax
c0029e80:	6a 10                	push   0x10
c0029e82:	e8 56 ff ff ff       	call   c0029ddd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029e87:	83 c4 10             	add    esp,0x10
c0029e8a:	31 d2                	xor    edx,edx
c0029e8c:	85 c0                	test   eax,eax
c0029e8e:	75 33                	jne    c0029ec3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029e90:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029e95:	75 2c                	jne    c0029ec3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029e97:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029e9c:	75 25                	jne    c0029ec3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029e9e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029ea3:	75 1e                	jne    c0029ec3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029ea5:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029eaa:	75 17                	jne    c0029ec3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029eac:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029eb1:	75 10                	jne    c0029ec3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029eb3:	83 ec 0c             	sub    esp,0xc
c0029eb6:	53                   	push   ebx
c0029eb7:	e8 ef ce fd ff       	call   c0006dab <init_percd>
c0029ebc:	83 c4 10             	add    esp,0x10
c0029ebf:	40                   	inc    eax
c0029ec0:	0f 95 c2             	setne  dl
c0029ec3:	81 c4 08 08 00 00    	add    esp,0x808
c0029ec9:	88 d0                	mov    al,dl
c0029ecb:	5b                   	pop    ebx
c0029ecc:	c3                   	ret    
c0029ecd:	90                   	nop

c0029ece <ISO9660::ISO9660()>:
c0029ece:	83 ec 0c             	sub    esp,0xc
c0029ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ed5:	83 ec 0c             	sub    esp,0xc
c0029ed8:	50                   	push   eax
c0029ed9:	e8 56 04 ff ff       	call   c001a334 <Filesystem::Filesystem()>
c0029ede:	83 c4 10             	add    esp,0x10
c0029ee1:	ba a8 3b 03 c0       	mov    edx,0xc0033ba8
c0029ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029eea:	89 10                	mov    DWORD PTR [eax],edx
c0029eec:	e8 cc cf fd ff       	call   c0006ebd <fs_iso9660_init>
c0029ef1:	90                   	nop
c0029ef2:	83 c4 0c             	add    esp,0xc
c0029ef5:	c3                   	ret    

c0029ef6 <SoundCard::beginPlayback()>:
c0029ef6:	c7 44 24 04 0c 3c 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033c0c
c0029efe:	e9 93 66 ff ff       	jmp    c0020596 <KePanic(char const*)>
c0029f03:	90                   	nop

c0029f04 <SoundCard::stopPlayback()>:
c0029f04:	c7 44 24 04 0c 3c 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033c0c
c0029f0c:	e9 85 66 ff ff       	jmp    c0020596 <KePanic(char const*)>
c0029f11:	90                   	nop

c0029f12 <SoundCard::SoundCard(char const*)>:
c0029f12:	83 ec 1c             	sub    esp,0x1c
c0029f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f19:	83 ec 08             	sub    esp,0x8
c0029f1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029f20:	50                   	push   eax
c0029f21:	e8 e0 18 ff ff       	call   c001b806 <Device::Device(char const*)>
c0029f26:	83 c4 10             	add    esp,0x10
c0029f29:	ba 58 3c 03 c0       	mov    edx,0xc0033c58
c0029f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f32:	89 10                	mov    DWORD PTR [eax],edx
c0029f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f38:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029f3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f43:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f51:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f5f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f6d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029f77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029f7f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029f84:	7f 1a                	jg     c0029fa0 <SoundCard::SoundCard(char const*)+0x8e>
c0029f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029f8e:	83 c2 54             	add    edx,0x54
c0029f91:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029f99:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029f9e:	eb df                	jmp    c0029f7f <SoundCard::SoundCard(char const*)+0x6d>
c0029fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029fa4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029fab:	90                   	nop
c0029fac:	83 c4 1c             	add    esp,0x1c
c0029faf:	c3                   	ret    

c0029fb0 <SoundCard::~SoundCard()>:
c0029fb0:	83 ec 0c             	sub    esp,0xc
c0029fb3:	ba 58 3c 03 c0       	mov    edx,0xc0033c58
c0029fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fbc:	89 10                	mov    DWORD PTR [eax],edx
c0029fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fc2:	83 ec 0c             	sub    esp,0xc
c0029fc5:	50                   	push   eax
c0029fc6:	e8 db 15 ff ff       	call   c001b5a6 <Device::~Device()>
c0029fcb:	83 c4 10             	add    esp,0x10
c0029fce:	90                   	nop
c0029fcf:	83 c4 0c             	add    esp,0xc
c0029fd2:	c3                   	ret    
c0029fd3:	90                   	nop

c0029fd4 <SoundCard::~SoundCard()>:
c0029fd4:	83 ec 0c             	sub    esp,0xc
c0029fd7:	83 ec 0c             	sub    esp,0xc
c0029fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029fde:	e8 cd ff ff ff       	call   c0029fb0 <SoundCard::~SoundCard()>
c0029fe3:	83 c4 10             	add    esp,0x10
c0029fe6:	83 ec 08             	sub    esp,0x8
c0029fe9:	68 e8 01 00 00       	push   0x1e8
c0029fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ff2:	e8 dd f3 fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c0029ff7:	83 c4 10             	add    esp,0x10
c0029ffa:	83 c4 0c             	add    esp,0xc
c0029ffd:	c3                   	ret    

c0029ffe <SoundCard::configureRates(int, int, int)>:
c0029ffe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002a002:	31 c0                	xor    eax,eax
c002a004:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c002a00b:	75 20                	jne    c002a02d <SoundCard::configureRates(int, int, int)+0x2f>
c002a00d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002a011:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c002a017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a01b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c002a021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a025:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c002a02b:	b0 01                	mov    al,0x1
c002a02d:	c3                   	ret    

c002a02e <SoundCard::getSamples16(int, short*)>:
c002a02e:	55                   	push   ebp
c002a02f:	57                   	push   edi
c002a030:	31 ff                	xor    edi,edi
c002a032:	56                   	push   esi
c002a033:	53                   	push   ebx
c002a034:	31 db                	xor    ebx,ebx
c002a036:	83 ec 10             	sub    esp,0x10
c002a039:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002a03d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a041:	8d 04 36             	lea    eax,[esi+esi*1]
c002a044:	50                   	push   eax
c002a045:	6a 00                	push   0x0
c002a047:	55                   	push   ebp
c002a048:	e8 a3 64 fd ff       	call   c00004f0 <memset>
c002a04d:	83 c4 10             	add    esp,0x10
c002a050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a054:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c002a05b:	85 c0                	test   eax,eax
c002a05d:	74 1a                	je     c002a079 <SoundCard::getSamples16(int, short*)+0x4b>
c002a05f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c002a063:	75 14                	jne    c002a079 <SoundCard::getSamples16(int, short*)+0x4b>
c002a065:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002a069:	55                   	push   ebp
c002a06a:	56                   	push   esi
c002a06b:	50                   	push   eax
c002a06c:	e8 f3 02 00 00       	call   c002a364 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c002a071:	83 c4 10             	add    esp,0x10
c002a074:	39 c3                	cmp    ebx,eax
c002a076:	0f 4c d8             	cmovl  ebx,eax
c002a079:	47                   	inc    edi
c002a07a:	83 ff 20             	cmp    edi,0x20
c002a07d:	75 d1                	jne    c002a050 <SoundCard::getSamples16(int, short*)+0x22>
c002a07f:	83 c4 0c             	add    esp,0xc
c002a082:	89 d8                	mov    eax,ebx
c002a084:	5b                   	pop    ebx
c002a085:	5e                   	pop    esi
c002a086:	5f                   	pop    edi
c002a087:	5d                   	pop    ebp
c002a088:	c3                   	ret    
c002a089:	90                   	nop

c002a08a <SoundCard::getSamples32(int, int*)>:
c002a08a:	55                   	push   ebp
c002a08b:	57                   	push   edi
c002a08c:	31 ff                	xor    edi,edi
c002a08e:	56                   	push   esi
c002a08f:	31 f6                	xor    esi,esi
c002a091:	53                   	push   ebx
c002a092:	83 ec 10             	sub    esp,0x10
c002a095:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002a099:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a09d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002a0a1:	c1 e0 02             	shl    eax,0x2
c002a0a4:	50                   	push   eax
c002a0a5:	6a 00                	push   0x0
c002a0a7:	55                   	push   ebp
c002a0a8:	e8 43 64 fd ff       	call   c00004f0 <memset>
c002a0ad:	83 c4 10             	add    esp,0x10
c002a0b0:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c002a0b7:	85 c0                	test   eax,eax
c002a0b9:	74 1a                	je     c002a0d5 <SoundCard::getSamples32(int, int*)+0x4b>
c002a0bb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c002a0bf:	75 14                	jne    c002a0d5 <SoundCard::getSamples32(int, int*)+0x4b>
c002a0c1:	53                   	push   ebx
c002a0c2:	55                   	push   ebp
c002a0c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a0c7:	50                   	push   eax
c002a0c8:	e8 67 03 00 00       	call   c002a434 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c002a0cd:	83 c4 10             	add    esp,0x10
c002a0d0:	39 c6                	cmp    esi,eax
c002a0d2:	0f 4c f0             	cmovl  esi,eax
c002a0d5:	47                   	inc    edi
c002a0d6:	83 ff 20             	cmp    edi,0x20
c002a0d9:	75 d5                	jne    c002a0b0 <SoundCard::getSamples32(int, int*)+0x26>
c002a0db:	85 f6                	test   esi,esi
c002a0dd:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c002a0e4:	75 0f                	jne    c002a0f5 <SoundCard::getSamples32(int, int*)+0x6b>
c002a0e6:	85 c0                	test   eax,eax
c002a0e8:	74 1b                	je     c002a105 <SoundCard::getSamples32(int, int*)+0x7b>
c002a0ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c002a0ec:	83 ec 0c             	sub    esp,0xc
c002a0ef:	53                   	push   ebx
c002a0f0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c002a0f3:	eb 0d                	jmp    c002a102 <SoundCard::getSamples32(int, int*)+0x78>
c002a0f5:	85 c0                	test   eax,eax
c002a0f7:	75 0c                	jne    c002a105 <SoundCard::getSamples32(int, int*)+0x7b>
c002a0f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c002a0fb:	83 ec 0c             	sub    esp,0xc
c002a0fe:	53                   	push   ebx
c002a0ff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c002a102:	83 c4 10             	add    esp,0x10
c002a105:	83 c4 0c             	add    esp,0xc
c002a108:	89 f0                	mov    eax,esi
c002a10a:	5b                   	pop    ebx
c002a10b:	5e                   	pop    esi
c002a10c:	5f                   	pop    edi
c002a10d:	5d                   	pop    ebp
c002a10e:	c3                   	ret    
c002a10f:	90                   	nop

c002a110 <SoundCard::addChannel(SoundPort*)>:
c002a110:	83 ec 0c             	sub    esp,0xc
c002a113:	31 c0                	xor    eax,eax
c002a115:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a119:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c002a121:	74 1b                	je     c002a13e <SoundCard::addChannel(SoundPort*)+0x2e>
c002a123:	40                   	inc    eax
c002a124:	83 f8 20             	cmp    eax,0x20
c002a127:	75 f0                	jne    c002a119 <SoundCard::addChannel(SoundPort*)+0x9>
c002a129:	83 ec 0c             	sub    esp,0xc
c002a12c:	68 31 3c 03 c0       	push   0xc0033c31
c002a131:	e8 60 64 ff ff       	call   c0020596 <KePanic(char const*)>
c002a136:	83 c4 10             	add    esp,0x10
c002a139:	83 c8 ff             	or     eax,0xffffffff
c002a13c:	eb 0b                	jmp    c002a149 <SoundCard::addChannel(SoundPort*)+0x39>
c002a13e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002a142:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c002a149:	83 c4 0c             	add    esp,0xc
c002a14c:	c3                   	ret    
c002a14d:	90                   	nop

c002a14e <SoundCard::removeChannel(int)>:
c002a14e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a152:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a156:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c002a161:	c3                   	ret    
c002a162:	66 90                	xchg   ax,ax

c002a164 <SoundPort::SoundPort(int, int, int, int)>:
c002a164:	83 ec 0c             	sub    esp,0xc
c002a167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a16b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a176:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a17e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a182:	89 10                	mov    DWORD PTR [eax],edx
c002a184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a188:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a18c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002a18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a193:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002a197:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002a19a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c002a19f:	75 13                	jne    c002a1b4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c002a1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1a5:	8b 00                	mov    eax,DWORD PTR [eax]
c002a1a7:	05 a0 0f 00 00       	add    eax,0xfa0
c002a1ac:	d1 e0                	shl    eax,1
c002a1ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a1b2:	66 90                	xchg   ax,ax
c002a1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a1bc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002a1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1c3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c002a1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a1d1:	c1 e0 02             	shl    eax,0x2
c002a1d4:	83 ec 0c             	sub    esp,0xc
c002a1d7:	50                   	push   eax
c002a1d8:	e8 bf c4 fe ff       	call   c001669c <malloc>
c002a1dd:	83 c4 10             	add    esp,0x10
c002a1e0:	89 c2                	mov    edx,eax
c002a1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1e6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002a1e9:	90                   	nop
c002a1ea:	83 c4 0c             	add    esp,0xc
c002a1ed:	c3                   	ret    
c002a1ee:	66 90                	xchg   ax,ax

c002a1f0 <SoundPort::~SoundPort()>:
c002a1f0:	83 ec 0c             	sub    esp,0xc
c002a1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a1fa:	85 c0                	test   eax,eax
c002a1fc:	74 1e                	je     c002a21c <SoundPort::~SoundPort()+0x2c>
c002a1fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a202:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a205:	83 ec 0c             	sub    esp,0xc
c002a208:	50                   	push   eax
c002a209:	e8 9e c4 fe ff       	call   c00166ac <free>
c002a20e:	83 c4 10             	add    esp,0x10
c002a211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a215:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a21c:	90                   	nop
c002a21d:	83 c4 0c             	add    esp,0xc
c002a220:	c3                   	ret    
c002a221:	90                   	nop
c002a222:	66 90                	xchg   ax,ax

c002a224 <SoundPort::unpause()>:
c002a224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a228:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c002a22c:	c3                   	ret    
c002a22d:	90                   	nop
c002a22e:	66 90                	xchg   ax,ax

c002a230 <SoundPort::pause()>:
c002a230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a234:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a238:	c3                   	ret    
c002a239:	90                   	nop
c002a23a:	66 90                	xchg   ax,ax

c002a23c <SoundPort::getBufferUsed()>:
c002a23c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a240:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002a243:	c3                   	ret    

c002a244 <SoundPort::getBufferSize()>:
c002a244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a248:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a24b:	c3                   	ret    

c002a24c <SoundPort::buffer16(short*, int)>:
c002a24c:	55                   	push   ebp
c002a24d:	57                   	push   edi
c002a24e:	56                   	push   esi
c002a24f:	53                   	push   ebx
c002a250:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a254:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002a258:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002a25b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c002a25e:	74 68                	je     c002a2c8 <SoundPort::buffer16(short*, int)+0x7c>
c002a260:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a264:	85 c9                	test   ecx,ecx
c002a266:	7e 60                	jle    c002a2c8 <SoundPort::buffer16(short*, int)+0x7c>
c002a268:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c002a26c:	8d 70 01             	lea    esi,[eax+0x1]
c002a26f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a272:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a275:	c1 e1 0f             	shl    ecx,0xf
c002a278:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c002a27b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a27e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a281:	74 4d                	je     c002a2d0 <SoundPort::buffer16(short*, int)+0x84>
c002a283:	31 f6                	xor    esi,esi
c002a285:	eb 21                	jmp    c002a2a8 <SoundPort::buffer16(short*, int)+0x5c>
c002a287:	90                   	nop
c002a288:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c002a28d:	8d 79 01             	lea    edi,[ecx+0x1]
c002a290:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c002a293:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c002a296:	c1 e3 0f             	shl    ebx,0xf
c002a299:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c002a29c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a29f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a2a2:	74 1c                	je     c002a2c0 <SoundPort::buffer16(short*, int)+0x74>
c002a2a4:	89 c6                	mov    esi,eax
c002a2a6:	66 90                	xchg   ax,ax
c002a2a8:	8d 46 01             	lea    eax,[esi+0x1]
c002a2ab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002a2af:	75 d7                	jne    c002a288 <SoundPort::buffer16(short*, int)+0x3c>
c002a2b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a2b5:	8d 76 00             	lea    esi,[esi+0x0]
c002a2b8:	5b                   	pop    ebx
c002a2b9:	5e                   	pop    esi
c002a2ba:	5f                   	pop    edi
c002a2bb:	5d                   	pop    ebp
c002a2bc:	c3                   	ret    
c002a2bd:	8d 76 00             	lea    esi,[esi+0x0]
c002a2c0:	5b                   	pop    ebx
c002a2c1:	8d 46 02             	lea    eax,[esi+0x2]
c002a2c4:	5e                   	pop    esi
c002a2c5:	5f                   	pop    edi
c002a2c6:	5d                   	pop    ebp
c002a2c7:	c3                   	ret    
c002a2c8:	5b                   	pop    ebx
c002a2c9:	31 c0                	xor    eax,eax
c002a2cb:	5e                   	pop    esi
c002a2cc:	5f                   	pop    edi
c002a2cd:	5d                   	pop    ebp
c002a2ce:	c3                   	ret    
c002a2cf:	90                   	nop
c002a2d0:	b8 01 00 00 00       	mov    eax,0x1
c002a2d5:	eb e1                	jmp    c002a2b8 <SoundPort::buffer16(short*, int)+0x6c>
c002a2d7:	90                   	nop

c002a2d8 <SoundPort::buffer32(int*, int)>:
c002a2d8:	55                   	push   ebp
c002a2d9:	57                   	push   edi
c002a2da:	56                   	push   esi
c002a2db:	53                   	push   ebx
c002a2dc:	83 ec 04             	sub    esp,0x4
c002a2df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a2e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a2e7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a2eb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a2ee:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a2f1:	89 04 24             	mov    DWORD PTR [esp],eax
c002a2f4:	74 5a                	je     c002a350 <SoundPort::buffer32(int*, int)+0x78>
c002a2f6:	85 c0                	test   eax,eax
c002a2f8:	7e 56                	jle    c002a350 <SoundPort::buffer32(int*, int)+0x78>
c002a2fa:	8d 71 01             	lea    esi,[ecx+0x1]
c002a2fd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a300:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a303:	8b 37                	mov    esi,DWORD PTR [edi]
c002a305:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c002a308:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a30b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a30e:	74 4c                	je     c002a35c <SoundPort::buffer32(int*, int)+0x84>
c002a310:	31 f6                	xor    esi,esi
c002a312:	eb 1c                	jmp    c002a330 <SoundPort::buffer32(int*, int)+0x58>
c002a314:	8d 69 01             	lea    ebp,[ecx+0x1]
c002a317:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c002a31a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c002a31d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c002a320:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c002a324:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a327:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a32a:	74 18                	je     c002a344 <SoundPort::buffer32(int*, int)+0x6c>
c002a32c:	89 de                	mov    esi,ebx
c002a32e:	66 90                	xchg   ax,ax
c002a330:	8d 5e 01             	lea    ebx,[esi+0x1]
c002a333:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c002a336:	75 dc                	jne    c002a314 <SoundPort::buffer32(int*, int)+0x3c>
c002a338:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a33b:	90                   	nop
c002a33c:	83 c4 04             	add    esp,0x4
c002a33f:	5b                   	pop    ebx
c002a340:	5e                   	pop    esi
c002a341:	5f                   	pop    edi
c002a342:	5d                   	pop    ebp
c002a343:	c3                   	ret    
c002a344:	8d 46 02             	lea    eax,[esi+0x2]
c002a347:	83 c4 04             	add    esp,0x4
c002a34a:	5b                   	pop    ebx
c002a34b:	5e                   	pop    esi
c002a34c:	5f                   	pop    edi
c002a34d:	5d                   	pop    ebp
c002a34e:	c3                   	ret    
c002a34f:	90                   	nop
c002a350:	83 c4 04             	add    esp,0x4
c002a353:	31 c0                	xor    eax,eax
c002a355:	5b                   	pop    ebx
c002a356:	5e                   	pop    esi
c002a357:	5f                   	pop    edi
c002a358:	5d                   	pop    ebp
c002a359:	c3                   	ret    
c002a35a:	66 90                	xchg   ax,ax
c002a35c:	b8 01 00 00 00       	mov    eax,0x1
c002a361:	eb d9                	jmp    c002a33c <SoundPort::buffer32(int*, int)+0x64>
c002a363:	90                   	nop

c002a364 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c002a364:	55                   	push   ebp
c002a365:	57                   	push   edi
c002a366:	56                   	push   esi
c002a367:	53                   	push   ebx
c002a368:	83 ec 0c             	sub    esp,0xc
c002a36b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a36f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002a377:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002a37b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c002a381:	39 03                	cmp    DWORD PTR [ebx],eax
c002a383:	74 13                	je     c002a398 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c002a385:	83 ec 0c             	sub    esp,0xc
c002a388:	68 84 3c 03 c0       	push   0xc0033c84
c002a38d:	e8 04 62 ff ff       	call   c0020596 <KePanic(char const*)>
c002a392:	83 c4 10             	add    esp,0x10
c002a395:	8d 76 00             	lea    esi,[esi+0x0]
c002a398:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002a39e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a3a1:	74 11                	je     c002a3b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c002a3a3:	83 ec 0c             	sub    esp,0xc
c002a3a6:	68 c3 3c 03 c0       	push   0xc0033cc3
c002a3ab:	e8 e6 61 ff ff       	call   c0020596 <KePanic(char const*)>
c002a3b0:	83 c4 10             	add    esp,0x10
c002a3b3:	90                   	nop
c002a3b4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002a3ba:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a3bd:	74 11                	je     c002a3d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c002a3bf:	83 ec 0c             	sub    esp,0xc
c002a3c2:	68 c3 3c 03 c0       	push   0xc0033cc3
c002a3c7:	e8 ca 61 ff ff       	call   c0020596 <KePanic(char const*)>
c002a3cc:	83 c4 10             	add    esp,0x10
c002a3cf:	90                   	nop
c002a3d0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c002a3d3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c002a3d7:	85 f6                	test   esi,esi
c002a3d9:	7e 2d                	jle    c002a408 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c002a3db:	31 c0                	xor    eax,eax
c002a3dd:	8d 76 00             	lea    esi,[esi+0x0]
c002a3e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a3e3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c002a3e6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c002a3ec:	85 c9                	test   ecx,ecx
c002a3ee:	0f 49 d1             	cmovns edx,ecx
c002a3f1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c002a3f5:	c1 fa 0f             	sar    edx,0xf
c002a3f8:	01 d1                	add    ecx,edx
c002a3fa:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c002a3fe:	83 c0 01             	add    eax,0x1
c002a401:	39 f0                	cmp    eax,esi
c002a403:	75 db                	jne    c002a3e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c002a405:	8d 76 00             	lea    esi,[esi+0x0]
c002a408:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a40b:	83 ec 04             	sub    esp,0x4
c002a40e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a411:	29 f0                	sub    eax,esi
c002a413:	c1 e0 02             	shl    eax,0x2
c002a416:	50                   	push   eax
c002a417:	8d 04 b2             	lea    eax,[edx+esi*4]
c002a41a:	50                   	push   eax
c002a41b:	52                   	push   edx
c002a41c:	e8 af 5f fd ff       	call   c00003d0 <memmove>
c002a421:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a424:	29 f0                	sub    eax,esi
c002a426:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a429:	83 c4 1c             	add    esp,0x1c
c002a42c:	89 f0                	mov    eax,esi
c002a42e:	5b                   	pop    ebx
c002a42f:	5e                   	pop    esi
c002a430:	5f                   	pop    edi
c002a431:	5d                   	pop    ebp
c002a432:	c3                   	ret    
c002a433:	90                   	nop

c002a434 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a434:	55                   	push   ebp
c002a435:	57                   	push   edi
c002a436:	56                   	push   esi
c002a437:	53                   	push   ebx
c002a438:	83 ec 0c             	sub    esp,0xc
c002a43b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a43f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a443:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a447:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002a44b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c002a451:	39 03                	cmp    DWORD PTR [ebx],eax
c002a453:	74 13                	je     c002a468 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c002a455:	83 ec 0c             	sub    esp,0xc
c002a458:	68 a4 3c 03 c0       	push   0xc0033ca4
c002a45d:	e8 34 61 ff ff       	call   c0020596 <KePanic(char const*)>
c002a462:	83 c4 10             	add    esp,0x10
c002a465:	8d 76 00             	lea    esi,[esi+0x0]
c002a468:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002a46e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a471:	74 11                	je     c002a484 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c002a473:	83 ec 0c             	sub    esp,0xc
c002a476:	68 df 3c 03 c0       	push   0xc0033cdf
c002a47b:	e8 16 61 ff ff       	call   c0020596 <KePanic(char const*)>
c002a480:	83 c4 10             	add    esp,0x10
c002a483:	90                   	nop
c002a484:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002a48a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a48d:	74 11                	je     c002a4a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c002a48f:	83 ec 0c             	sub    esp,0xc
c002a492:	68 df 3c 03 c0       	push   0xc0033cdf
c002a497:	e8 fa 60 ff ff       	call   c0020596 <KePanic(char const*)>
c002a49c:	83 c4 10             	add    esp,0x10
c002a49f:	90                   	nop
c002a4a0:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c002a4a3:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c002a4a7:	85 ff                	test   edi,edi
c002a4a9:	7e 21                	jle    c002a4cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c002a4ab:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a4b2:	31 c0                	xor    eax,eax
c002a4b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a4b7:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c002a4ba:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a4bd:	01 d5                	add    ebp,edx
c002a4bf:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c002a4c2:	83 c0 04             	add    eax,0x4
c002a4c5:	39 c1                	cmp    ecx,eax
c002a4c7:	75 eb                	jne    c002a4b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c002a4c9:	8d 76 00             	lea    esi,[esi+0x0]
c002a4cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a4cf:	83 ec 04             	sub    esp,0x4
c002a4d2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a4d5:	29 f8                	sub    eax,edi
c002a4d7:	c1 e0 02             	shl    eax,0x2
c002a4da:	50                   	push   eax
c002a4db:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a4de:	50                   	push   eax
c002a4df:	52                   	push   edx
c002a4e0:	e8 eb 5e fd ff       	call   c00003d0 <memmove>
c002a4e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a4e8:	29 f8                	sub    eax,edi
c002a4ea:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a4ed:	83 c4 1c             	add    esp,0x1c
c002a4f0:	89 f8                	mov    eax,edi
c002a4f2:	5b                   	pop    ebx
c002a4f3:	5e                   	pop    esi
c002a4f4:	5f                   	pop    edi
c002a4f5:	5d                   	pop    ebp
c002a4f6:	c3                   	ret    
c002a4f7:	90                   	nop

c002a4f8 <PCI::open(int, int, void*)>:
c002a4f8:	83 ec 18             	sub    esp,0x18
c002a4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a4ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a503:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a509:	8b 10                	mov    edx,DWORD PTR [eax]
c002a50b:	50                   	push   eax
c002a50c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a50f:	31 c0                	xor    eax,eax
c002a511:	83 c4 1c             	add    esp,0x1c
c002a514:	c3                   	ret    
c002a515:	90                   	nop

c002a516 <PCI::close(int, int, void*)>:
c002a516:	31 c0                	xor    eax,eax
c002a518:	c3                   	ret    
c002a519:	90                   	nop

c002a51a <PCI::PCI()>:
c002a51a:	83 ec 0c             	sub    esp,0xc
c002a51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a521:	83 ec 08             	sub    esp,0x8
c002a524:	68 fb 3c 03 c0       	push   0xc0033cfb
c002a529:	50                   	push   eax
c002a52a:	e8 95 09 ff ff       	call   c001aec4 <Bus::Bus(char const*)>
c002a52f:	83 c4 10             	add    esp,0x10
c002a532:	ba 08 3e 03 c0       	mov    edx,0xc0033e08
c002a537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a53b:	89 10                	mov    DWORD PTR [eax],edx
c002a53d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a541:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a54f:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a558:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a55e:	0f b6 d0             	movzx  edx,al
c002a561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a565:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a570:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a576:	0f b6 d0             	movzx  edx,al
c002a579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a57d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a586:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a58c:	8d 50 01             	lea    edx,[eax+0x1]
c002a58f:	88 d1                	mov    cl,dl
c002a591:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a595:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a59b:	0f b6 d0             	movzx  edx,al
c002a59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a5a2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a5a6:	83 c9 c0             	or     ecx,0xffffffc0
c002a5a9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a5ad:	90                   	nop
c002a5ae:	83 c4 0c             	add    esp,0xc
c002a5b1:	c3                   	ret    

c002a5b2 <PCI::readBAR8(unsigned int, int)>:
c002a5b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a5b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a5ba:	f6 c2 01             	test   dl,0x1
c002a5bd:	74 07                	je     c002a5c6 <PCI::readBAR8(unsigned int, int)+0x14>
c002a5bf:	83 e2 fc             	and    edx,0xfffffffc
c002a5c2:	01 c2                	add    edx,eax
c002a5c4:	ec                   	in     al,dx
c002a5c5:	c3                   	ret    
c002a5c6:	83 e2 f0             	and    edx,0xfffffff0
c002a5c9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a5cc:	c3                   	ret    
c002a5cd:	90                   	nop

c002a5ce <PCI::readBAR16(unsigned int, int)>:
c002a5ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a5d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a5d6:	f6 c2 01             	test   dl,0x1
c002a5d9:	74 08                	je     c002a5e3 <PCI::readBAR16(unsigned int, int)+0x15>
c002a5db:	83 e2 fc             	and    edx,0xfffffffc
c002a5de:	01 c2                	add    edx,eax
c002a5e0:	66 ed                	in     ax,dx
c002a5e2:	c3                   	ret    
c002a5e3:	83 e2 f0             	and    edx,0xfffffff0
c002a5e6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a5ea:	c3                   	ret    
c002a5eb:	90                   	nop

c002a5ec <PCI::readBAR32(unsigned int, int)>:
c002a5ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a5f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a5f4:	f6 c2 01             	test   dl,0x1
c002a5f7:	74 07                	je     c002a600 <PCI::readBAR32(unsigned int, int)+0x14>
c002a5f9:	83 e2 fc             	and    edx,0xfffffffc
c002a5fc:	01 c2                	add    edx,eax
c002a5fe:	ed                   	in     eax,dx
c002a5ff:	c3                   	ret    
c002a600:	83 e2 f0             	and    edx,0xfffffff0
c002a603:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a606:	c3                   	ret    
c002a607:	90                   	nop

c002a608 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a60c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a610:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a614:	f6 c2 01             	test   dl,0x1
c002a617:	74 07                	je     c002a620 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a619:	83 e2 fc             	and    edx,0xfffffffc
c002a61c:	01 ca                	add    edx,ecx
c002a61e:	ee                   	out    dx,al
c002a61f:	c3                   	ret    
c002a620:	83 e2 f0             	and    edx,0xfffffff0
c002a623:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a626:	c3                   	ret    
c002a627:	90                   	nop

c002a628 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a62c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a630:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a634:	f6 c2 01             	test   dl,0x1
c002a637:	74 08                	je     c002a641 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a639:	83 e2 fc             	and    edx,0xfffffffc
c002a63c:	01 ca                	add    edx,ecx
c002a63e:	66 ef                	out    dx,ax
c002a640:	c3                   	ret    
c002a641:	83 e2 f0             	and    edx,0xfffffff0
c002a644:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a648:	c3                   	ret    
c002a649:	90                   	nop

c002a64a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a64a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a64e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a656:	f6 c2 01             	test   dl,0x1
c002a659:	74 07                	je     c002a662 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a65b:	83 e2 fc             	and    edx,0xfffffffc
c002a65e:	01 ca                	add    edx,ecx
c002a660:	ef                   	out    dx,eax
c002a661:	c3                   	ret    
c002a662:	83 e2 f0             	and    edx,0xfffffff0
c002a665:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a668:	c3                   	ret    
c002a669:	90                   	nop

c002a66a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a66a:	55                   	push   ebp
c002a66b:	57                   	push   edi
c002a66c:	56                   	push   esi
c002a66d:	53                   	push   ebx
c002a66e:	83 ec 0c             	sub    esp,0xc
c002a671:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a676:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a67a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a67e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a682:	83 fe 07             	cmp    esi,0x7
c002a685:	76 10                	jbe    c002a697 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a687:	83 ec 0c             	sub    esp,0xc
c002a68a:	68 03 3d 03 c0       	push   0xc0033d03
c002a68f:	e8 02 5f ff ff       	call   c0020596 <KePanic(char const*)>
c002a694:	83 c4 10             	add    esp,0x10
c002a697:	0f b6 db             	movzx  ebx,bl
c002a69a:	83 fb 0f             	cmp    ebx,0xf
c002a69d:	76 10                	jbe    c002a6af <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a69f:	83 ec 0c             	sub    esp,0xc
c002a6a2:	68 33 3d 03 c0       	push   0xc0033d33
c002a6a7:	e8 ea 5e ff ff       	call   c0020596 <KePanic(char const*)>
c002a6ac:	83 c4 10             	add    esp,0x10
c002a6af:	8d 04 36             	lea    eax,[esi+esi*1]
c002a6b2:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a6b7:	83 c8 f0             	or     eax,0xfffffff0
c002a6ba:	ee                   	out    dx,al
c002a6bb:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a6c0:	89 e8                	mov    eax,ebp
c002a6c2:	ee                   	out    dx,al
c002a6c3:	89 f9                	mov    ecx,edi
c002a6c5:	89 d8                	mov    eax,ebx
c002a6c7:	0f b6 d9             	movzx  ebx,cl
c002a6ca:	83 c4 0c             	add    esp,0xc
c002a6cd:	c1 e0 08             	shl    eax,0x8
c002a6d0:	83 e3 fc             	and    ebx,0xfffffffc
c002a6d3:	09 d8                	or     eax,ebx
c002a6d5:	5b                   	pop    ebx
c002a6d6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a6db:	5e                   	pop    esi
c002a6dc:	5f                   	pop    edi
c002a6dd:	5d                   	pop    ebp
c002a6de:	c3                   	ret    
c002a6df:	90                   	nop

c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a6e0:	57                   	push   edi
c002a6e1:	56                   	push   esi
c002a6e2:	53                   	push   ebx
c002a6e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a6e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a6eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a6ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a6f3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a6f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a6fd:	83 ff 01             	cmp    edi,0x1
c002a700:	75 3f                	jne    c002a741 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a702:	89 de                	mov    esi,ebx
c002a704:	0f b6 c0             	movzx  eax,al
c002a707:	c1 e0 10             	shl    eax,0x10
c002a70a:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a710:	0f b6 c9             	movzx  ecx,cl
c002a713:	09 f0                	or     eax,esi
c002a715:	c1 e1 08             	shl    ecx,0x8
c002a718:	0f b6 d2             	movzx  edx,dl
c002a71b:	c1 e2 0b             	shl    edx,0xb
c002a71e:	09 c8                	or     eax,ecx
c002a720:	09 d0                	or     eax,edx
c002a722:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a727:	0d 00 00 00 80       	or     eax,0x80000000
c002a72c:	ef                   	out    dx,eax
c002a72d:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a732:	ed                   	in     eax,dx
c002a733:	83 e3 02             	and    ebx,0x2
c002a736:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a73d:	d3 e8                	shr    eax,cl
c002a73f:	eb 44                	jmp    c002a785 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a741:	83 ff 02             	cmp    edi,0x2
c002a744:	75 2d                	jne    c002a773 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a746:	83 ec 0c             	sub    esp,0xc
c002a749:	0f b6 fb             	movzx  edi,bl
c002a74c:	57                   	push   edi
c002a74d:	0f b6 c9             	movzx  ecx,cl
c002a750:	51                   	push   ecx
c002a751:	0f b6 d2             	movzx  edx,dl
c002a754:	52                   	push   edx
c002a755:	0f b6 c0             	movzx  eax,al
c002a758:	50                   	push   eax
c002a759:	56                   	push   esi
c002a75a:	e8 0b ff ff ff       	call   c002a66a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a75f:	89 c2                	mov    edx,eax
c002a761:	ed                   	in     eax,dx
c002a762:	83 e3 02             	and    ebx,0x2
c002a765:	83 c4 20             	add    esp,0x20
c002a768:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a76f:	d3 e8                	shr    eax,cl
c002a771:	eb 12                	jmp    c002a785 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a773:	83 ec 0c             	sub    esp,0xc
c002a776:	68 63 3d 03 c0       	push   0xc0033d63
c002a77b:	e8 16 5e ff ff       	call   c0020596 <KePanic(char const*)>
c002a780:	83 c4 10             	add    esp,0x10
c002a783:	31 c0                	xor    eax,eax
c002a785:	5b                   	pop    ebx
c002a786:	5e                   	pop    esi
c002a787:	5f                   	pop    edi
c002a788:	c3                   	ret    
c002a789:	90                   	nop

c002a78a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a78a:	83 ec 18             	sub    esp,0x18
c002a78d:	6a 00                	push   0x0
c002a78f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a794:	50                   	push   eax
c002a795:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a79a:	50                   	push   eax
c002a79b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a7a0:	50                   	push   eax
c002a7a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a7a5:	e8 36 ff ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a7aa:	83 c4 2c             	add    esp,0x2c
c002a7ad:	c3                   	ret    

c002a7ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a7ae:	83 ec 18             	sub    esp,0x18
c002a7b1:	6a 0e                	push   0xe
c002a7b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a7b8:	50                   	push   eax
c002a7b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a7be:	50                   	push   eax
c002a7bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a7c4:	50                   	push   eax
c002a7c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a7c9:	e8 12 ff ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a7ce:	83 c4 2c             	add    esp,0x2c
c002a7d1:	0f b6 c0             	movzx  eax,al
c002a7d4:	c3                   	ret    
c002a7d5:	90                   	nop

c002a7d6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a7d6:	55                   	push   ebp
c002a7d7:	57                   	push   edi
c002a7d8:	56                   	push   esi
c002a7d9:	53                   	push   ebx
c002a7da:	83 ec 18             	sub    esp,0x18
c002a7dd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a7e2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a7e7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a7ec:	6a 0a                	push   0xa
c002a7ee:	56                   	push   esi
c002a7ef:	55                   	push   ebp
c002a7f0:	57                   	push   edi
c002a7f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a7f5:	e8 e6 fe ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a7fa:	83 c4 14             	add    esp,0x14
c002a7fd:	6a 0a                	push   0xa
c002a7ff:	56                   	push   esi
c002a800:	55                   	push   ebp
c002a801:	57                   	push   edi
c002a802:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a806:	89 c3                	mov    ebx,eax
c002a808:	0f b6 db             	movzx  ebx,bl
c002a80b:	e8 d0 fe ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a810:	83 c4 2c             	add    esp,0x2c
c002a813:	25 00 ff 00 00       	and    eax,0xff00
c002a818:	09 d8                	or     eax,ebx
c002a81a:	5b                   	pop    ebx
c002a81b:	5e                   	pop    esi
c002a81c:	5f                   	pop    edi
c002a81d:	5d                   	pop    ebp
c002a81e:	c3                   	ret    
c002a81f:	90                   	nop

c002a820 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a820:	83 ec 18             	sub    esp,0x18
c002a823:	6a 08                	push   0x8
c002a825:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a82a:	50                   	push   eax
c002a82b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a830:	50                   	push   eax
c002a831:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a836:	50                   	push   eax
c002a837:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a83b:	e8 a0 fe ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a840:	83 c4 2c             	add    esp,0x2c
c002a843:	0f b6 c4             	movzx  eax,ah
c002a846:	c3                   	ret    
c002a847:	90                   	nop

c002a848 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a848:	83 ec 18             	sub    esp,0x18
c002a84b:	6a 08                	push   0x8
c002a84d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a852:	50                   	push   eax
c002a853:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a858:	50                   	push   eax
c002a859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a85e:	50                   	push   eax
c002a85f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a863:	e8 78 fe ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a868:	83 c4 2c             	add    esp,0x2c
c002a86b:	c3                   	ret    

c002a86c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a86c:	83 ec 18             	sub    esp,0x18
c002a86f:	6a 3c                	push   0x3c
c002a871:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a876:	50                   	push   eax
c002a877:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a87c:	50                   	push   eax
c002a87d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a882:	50                   	push   eax
c002a883:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a887:	e8 54 fe ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a88c:	83 c4 2c             	add    esp,0x2c
c002a88f:	c3                   	ret    

c002a890 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a890:	83 ec 18             	sub    esp,0x18
c002a893:	6a 18                	push   0x18
c002a895:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a89a:	50                   	push   eax
c002a89b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a8a0:	50                   	push   eax
c002a8a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a8a6:	50                   	push   eax
c002a8a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a8ab:	e8 30 fe ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a8b0:	83 c4 2c             	add    esp,0x2c
c002a8b3:	0f b6 c4             	movzx  eax,ah
c002a8b6:	c3                   	ret    
c002a8b7:	90                   	nop

c002a8b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a8b8:	55                   	push   ebp
c002a8b9:	57                   	push   edi
c002a8ba:	56                   	push   esi
c002a8bb:	53                   	push   ebx
c002a8bc:	83 ec 28             	sub    esp,0x28
c002a8bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a8c3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a8c8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a8cd:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a8d2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a8d9:	8d 43 12             	lea    eax,[ebx+0x12]
c002a8dc:	83 c3 10             	add    ebx,0x10
c002a8df:	0f b6 c0             	movzx  eax,al
c002a8e2:	0f b6 db             	movzx  ebx,bl
c002a8e5:	50                   	push   eax
c002a8e6:	51                   	push   ecx
c002a8e7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a8eb:	57                   	push   edi
c002a8ec:	55                   	push   ebp
c002a8ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a8f1:	e8 ea fd ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a8f6:	83 c4 14             	add    esp,0x14
c002a8f9:	53                   	push   ebx
c002a8fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a8fe:	51                   	push   ecx
c002a8ff:	89 c6                	mov    esi,eax
c002a901:	57                   	push   edi
c002a902:	55                   	push   ebp
c002a903:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a907:	c1 e6 10             	shl    esi,0x10
c002a90a:	e8 d1 fd ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a90f:	83 c4 3c             	add    esp,0x3c
c002a912:	5b                   	pop    ebx
c002a913:	0f b7 c0             	movzx  eax,ax
c002a916:	09 f0                	or     eax,esi
c002a918:	5e                   	pop    esi
c002a919:	5f                   	pop    edi
c002a91a:	5d                   	pop    ebp
c002a91b:	c3                   	ret    

c002a91c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a91c:	55                   	push   ebp
c002a91d:	57                   	push   edi
c002a91e:	56                   	push   esi
c002a91f:	53                   	push   ebx
c002a920:	83 ec 0c             	sub    esp,0xc
c002a923:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a927:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a92b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a92f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002a933:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c002a939:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a93d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a941:	83 f9 01             	cmp    ecx,0x1
c002a944:	75 5d                	jne    c002a9a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c002a946:	0f b6 c8             	movzx  ecx,al
c002a949:	89 f0                	mov    eax,esi
c002a94b:	25 fc 00 00 00       	and    eax,0xfc
c002a950:	0f b6 d2             	movzx  edx,dl
c002a953:	c1 e1 10             	shl    ecx,0x10
c002a956:	c1 e2 0b             	shl    edx,0xb
c002a959:	09 c1                	or     ecx,eax
c002a95b:	89 f8                	mov    eax,edi
c002a95d:	0f b6 f8             	movzx  edi,al
c002a960:	c1 e7 08             	shl    edi,0x8
c002a963:	09 f9                	or     ecx,edi
c002a965:	09 d1                	or     ecx,edx
c002a967:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a96c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a972:	89 c8                	mov    eax,ecx
c002a974:	ef                   	out    dx,eax
c002a975:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a97a:	ed                   	in     eax,dx
c002a97b:	83 e6 02             	and    esi,0x2
c002a97e:	0f b7 db             	movzx  ebx,bx
c002a981:	74 0a                	je     c002a98d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c002a983:	c1 e3 10             	shl    ebx,0x10
c002a986:	0f b7 d0             	movzx  edx,ax
c002a989:	09 d3                	or     ebx,edx
c002a98b:	eb 05                	jmp    c002a992 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002a98d:	66 31 c0             	xor    ax,ax
c002a990:	09 c3                	or     ebx,eax
c002a992:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a997:	89 c8                	mov    eax,ecx
c002a999:	ef                   	out    dx,eax
c002a99a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a99f:	89 d8                	mov    eax,ebx
c002a9a1:	eb 41                	jmp    c002a9e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a9a3:	83 f9 02             	cmp    ecx,0x2
c002a9a6:	75 45                	jne    c002a9ed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c002a9a8:	89 f1                	mov    ecx,esi
c002a9aa:	83 ec 0c             	sub    esp,0xc
c002a9ad:	0f b6 f1             	movzx  esi,cl
c002a9b0:	89 f9                	mov    ecx,edi
c002a9b2:	56                   	push   esi
c002a9b3:	0f b6 f9             	movzx  edi,cl
c002a9b6:	57                   	push   edi
c002a9b7:	0f b6 d2             	movzx  edx,dl
c002a9ba:	52                   	push   edx
c002a9bb:	0f b6 c0             	movzx  eax,al
c002a9be:	50                   	push   eax
c002a9bf:	55                   	push   ebp
c002a9c0:	e8 a5 fc ff ff       	call   c002a66a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9c5:	89 c2                	mov    edx,eax
c002a9c7:	ed                   	in     eax,dx
c002a9c8:	83 c4 20             	add    esp,0x20
c002a9cb:	f6 c2 02             	test   dl,0x2
c002a9ce:	0f b7 db             	movzx  ebx,bx
c002a9d1:	74 0c                	je     c002a9df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c002a9d3:	0f b7 c8             	movzx  ecx,ax
c002a9d6:	89 d8                	mov    eax,ebx
c002a9d8:	c1 e0 10             	shl    eax,0x10
c002a9db:	09 c8                	or     eax,ecx
c002a9dd:	eb 05                	jmp    c002a9e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a9df:	66 31 c0             	xor    ax,ax
c002a9e2:	09 d8                	or     eax,ebx
c002a9e4:	ef                   	out    dx,eax
c002a9e5:	83 c4 0c             	add    esp,0xc
c002a9e8:	5b                   	pop    ebx
c002a9e9:	5e                   	pop    esi
c002a9ea:	5f                   	pop    edi
c002a9eb:	5d                   	pop    ebp
c002a9ec:	c3                   	ret    
c002a9ed:	c7 44 24 20 63 3d 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033d63
c002a9f5:	83 c4 0c             	add    esp,0xc
c002a9f8:	5b                   	pop    ebx
c002a9f9:	5e                   	pop    esi
c002a9fa:	5f                   	pop    edi
c002a9fb:	5d                   	pop    ebp
c002a9fc:	e9 95 5b ff ff       	jmp    c0020596 <KePanic(char const*)>
c002aa01:	90                   	nop

c002aa02 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002aa02:	55                   	push   ebp
c002aa03:	57                   	push   edi
c002aa04:	56                   	push   esi
c002aa05:	53                   	push   ebx
c002aa06:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002aa0c:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002aa13:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c002aa1a:	0f 85 bd 00 00 00    	jne    c002aadd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002aa20:	83 ec 0c             	sub    esp,0xc
c002aa23:	68 14 01 00 00       	push   0x114
c002aa28:	e8 6f bc fe ff       	call   c001669c <malloc>
c002aa2d:	83 c4 0c             	add    esp,0xc
c002aa30:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002aa36:	68 69 3d 03 c0       	push   0xc0033d69
c002aa3b:	50                   	push   eax
c002aa3c:	89 c3                	mov    ebx,eax
c002aa3e:	e8 a7 fc fe ff       	call   c001a6ea <File::File(char const*, Process*)>
c002aa43:	83 c4 10             	add    esp,0x10
c002aa46:	85 db                	test   ebx,ebx
c002aa48:	0f 84 6b 02 00 00    	je     c002acb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002aa4e:	57                   	push   edi
c002aa4f:	57                   	push   edi
c002aa50:	6a 01                	push   0x1
c002aa52:	53                   	push   ebx
c002aa53:	e8 b0 fc fe ff       	call   c001a708 <File::open(FileOpenMode)>
c002aa58:	83 c4 10             	add    esp,0x10
c002aa5b:	85 c0                	test   eax,eax
c002aa5d:	0f 85 56 02 00 00    	jne    c002acb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002aa63:	52                   	push   edx
c002aa64:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002aa68:	50                   	push   eax
c002aa69:	8d 44 24 48          	lea    eax,[esp+0x48]
c002aa6d:	50                   	push   eax
c002aa6e:	53                   	push   ebx
c002aa6f:	e8 96 ff fe ff       	call   c001aa0a <File::stat(unsigned long long*, bool*)>
c002aa74:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002aa78:	40                   	inc    eax
c002aa79:	89 04 24             	mov    DWORD PTR [esp],eax
c002aa7c:	e8 1b bc fe ff       	call   c001669c <malloc>
c002aa81:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002aa85:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002aa89:	59                   	pop    ecx
c002aa8a:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002aa8f:	8b 13                	mov    edx,DWORD PTR [ebx]
c002aa91:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002aa95:	51                   	push   ecx
c002aa96:	50                   	push   eax
c002aa97:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002aa9b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002aa9f:	53                   	push   ebx
c002aaa0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002aaa3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002aaa7:	83 c4 20             	add    esp,0x20
c002aaaa:	89 c8                	mov    eax,ecx
c002aaac:	99                   	cdq    
c002aaad:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002aab1:	0f 85 02 02 00 00    	jne    c002acb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002aab7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002aabb:	0f 85 f8 01 00 00    	jne    c002acb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002aac1:	83 ec 0c             	sub    esp,0xc
c002aac4:	53                   	push   ebx
c002aac5:	e8 9c fc fe ff       	call   c001a766 <File::close()>
c002aaca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002aace:	83 c4 10             	add    esp,0x10
c002aad1:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002aad8:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002aadd:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002aae5:	31 c9                	xor    ecx,ecx
c002aae7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c002aaee:	8b 2d a4 0b 04 c0    	mov    ebp,DWORD PTR ds:0xc0040ba4
c002aaf4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002aafb:	8b 15 a8 0b 04 c0    	mov    edx,DWORD PTR ds:0xc0040ba8
c002ab01:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002ab06:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002ab0e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002ab13:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002ab1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002ab1f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002ab27:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002ab2b:	39 cd                	cmp    ebp,ecx
c002ab2d:	0f 8e 86 01 00 00    	jle    c002acb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002ab33:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c002ab36:	d4 40                	aam    0x40
c002ab38:	d5 39                	aad    0x39
c002ab3a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002ab3e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c002ab42:	d4 40                	aam    0x40
c002ab44:	d5 39                	aad    0x39
c002ab46:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002ab4a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c002ab4e:	d4 40                	aam    0x40
c002ab50:	d5 39                	aad    0x39
c002ab52:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002ab56:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c002ab5a:	d4 40                	aam    0x40
c002ab5c:	d5 39                	aad    0x39
c002ab5e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002ab62:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c002ab66:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002ab6a:	3c 56                	cmp    al,0x56
c002ab6c:	74 47                	je     c002abb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c002ab6e:	d4 40                	aam    0x40
c002ab70:	d5 39                	aad    0x39
c002ab72:	8d 58 d0             	lea    ebx,[eax-0x30]
c002ab75:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c002ab79:	0f b6 db             	movzx  ebx,bl
c002ab7c:	c1 e3 04             	shl    ebx,0x4
c002ab7f:	d4 40                	aam    0x40
c002ab81:	d5 39                	aad    0x39
c002ab83:	83 e8 30             	sub    eax,0x30
c002ab86:	0f b6 c0             	movzx  eax,al
c002ab89:	09 c3                	or     ebx,eax
c002ab8b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c002ab8f:	c1 e3 04             	shl    ebx,0x4
c002ab92:	d4 40                	aam    0x40
c002ab94:	d5 39                	aad    0x39
c002ab96:	83 e8 30             	sub    eax,0x30
c002ab99:	0f b6 c0             	movzx  eax,al
c002ab9c:	09 c3                	or     ebx,eax
c002ab9e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c002aba2:	c1 e3 04             	shl    ebx,0x4
c002aba5:	d4 40                	aam    0x40
c002aba7:	d5 39                	aad    0x39
c002aba9:	83 e8 30             	sub    eax,0x30
c002abac:	0f b6 c0             	movzx  eax,al
c002abaf:	09 c3                	or     ebx,eax
c002abb1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002abb5:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c002abb9:	80 fb 58             	cmp    bl,0x58
c002abbc:	74 49                	je     c002ac07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c002abbe:	88 d8                	mov    al,bl
c002abc0:	d4 40                	aam    0x40
c002abc2:	d5 39                	aad    0x39
c002abc4:	83 e8 30             	sub    eax,0x30
c002abc7:	0f b6 f8             	movzx  edi,al
c002abca:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c002abce:	c1 e7 04             	shl    edi,0x4
c002abd1:	d4 40                	aam    0x40
c002abd3:	d5 39                	aad    0x39
c002abd5:	83 e8 30             	sub    eax,0x30
c002abd8:	0f b6 c0             	movzx  eax,al
c002abdb:	09 c7                	or     edi,eax
c002abdd:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c002abe1:	c1 e7 04             	shl    edi,0x4
c002abe4:	d4 40                	aam    0x40
c002abe6:	d5 39                	aad    0x39
c002abe8:	83 e8 30             	sub    eax,0x30
c002abeb:	0f b6 c0             	movzx  eax,al
c002abee:	09 c7                	or     edi,eax
c002abf0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c002abf4:	c1 e7 04             	shl    edi,0x4
c002abf7:	d4 40                	aam    0x40
c002abf9:	d5 39                	aad    0x39
c002abfb:	83 e8 30             	sub    eax,0x30
c002abfe:	0f b6 c0             	movzx  eax,al
c002ac01:	09 c7                	or     edi,eax
c002ac03:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c002ac07:	8d 41 10             	lea    eax,[ecx+0x10]
c002ac0a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002ac0e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c002ac12:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002ac16:	83 f9 0a             	cmp    ecx,0xa
c002ac19:	74 07                	je     c002ac22 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c002ac1b:	47                   	inc    edi
c002ac1c:	39 c5                	cmp    ebp,eax
c002ac1e:	75 16                	jne    c002ac36 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c002ac20:	89 e8                	mov    eax,ebp
c002ac22:	83 f9 0a             	cmp    ecx,0xa
c002ac25:	0f 94 c1             	sete   cl
c002ac28:	0f b6 c9             	movzx  ecx,cl
c002ac2b:	01 c1                	add    ecx,eax
c002ac2d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002ac32:	75 0f                	jne    c002ac43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c002ac34:	eb 1c                	jmp    c002ac52 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c002ac36:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002ac39:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c002ac3d:	40                   	inc    eax
c002ac3e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c002ac41:	eb cb                	jmp    c002ac0e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c002ac43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002ac47:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002ac4c:	0f 85 d9 fe ff ff    	jne    c002ab2b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002ac52:	80 fb 58             	cmp    bl,0x58
c002ac55:	74 10                	je     c002ac67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002ac57:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002ac5c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c002ac61:	0f 85 c4 fe ff ff    	jne    c002ab2b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002ac67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ac6b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ac6f:	83 e8 30             	sub    eax,0x30
c002ac72:	c1 e0 04             	shl    eax,0x4
c002ac75:	83 eb 30             	sub    ebx,0x30
c002ac78:	09 d8                	or     eax,ebx
c002ac7a:	0f b6 c0             	movzx  eax,al
c002ac7d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002ac81:	0f 85 a4 fe ff ff    	jne    c002ab2b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002ac87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002ac8b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002ac8f:	83 e8 30             	sub    eax,0x30
c002ac92:	c1 e0 04             	shl    eax,0x4
c002ac95:	83 eb 30             	sub    ebx,0x30
c002ac98:	09 d8                	or     eax,ebx
c002ac9a:	0f b6 c0             	movzx  eax,al
c002ac9d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002aca1:	0f 85 84 fe ff ff    	jne    c002ab2b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002aca7:	50                   	push   eax
c002aca8:	50                   	push   eax
c002aca9:	8d 44 24 48          	lea    eax,[esp+0x48]
c002acad:	50                   	push   eax
c002acae:	56                   	push   esi
c002acaf:	e8 9c 59 fd ff       	call   c0000650 <strcpy>
c002acb4:	83 c4 10             	add    esp,0x10
c002acb7:	eb 05                	jmp    c002acbe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c002acb9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002acbc:	31 f6                	xor    esi,esi
c002acbe:	81 c4 4c 01 00 00    	add    esp,0x14c
c002acc4:	89 f0                	mov    eax,esi
c002acc6:	5b                   	pop    ebx
c002acc7:	5e                   	pop    esi
c002acc8:	5f                   	pop    edi
c002acc9:	5d                   	pop    ebp
c002acca:	c3                   	ret    
c002accb:	90                   	nop

c002accc <PCI::checkBus(unsigned char)>:
c002accc:	56                   	push   esi
c002accd:	53                   	push   ebx
c002acce:	31 db                	xor    ebx,ebx
c002acd0:	51                   	push   ecx
c002acd1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002acd6:	52                   	push   edx
c002acd7:	53                   	push   ebx
c002acd8:	43                   	inc    ebx
c002acd9:	56                   	push   esi
c002acda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002acde:	e8 6f 03 00 00       	call   c002b052 <PCI::checkDevice(unsigned char, unsigned char)>
c002ace3:	83 c4 10             	add    esp,0x10
c002ace6:	83 fb 20             	cmp    ebx,0x20
c002ace9:	75 eb                	jne    c002acd6 <PCI::checkBus(unsigned char)+0xa>
c002aceb:	58                   	pop    eax
c002acec:	5b                   	pop    ebx
c002aced:	5e                   	pop    esi
c002acee:	c3                   	ret    
c002acef:	90                   	nop

c002acf0 <PCI::foundDevice(PCIDeviceInfo)>:
c002acf0:	55                   	push   ebp
c002acf1:	57                   	push   edi
c002acf2:	56                   	push   esi
c002acf3:	53                   	push   ebx
c002acf4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c002acfa:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c002ad02:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c002ad09:	3d ff ff 00 00       	cmp    eax,0xffff
c002ad0e:	0f 84 b6 01 00 00    	je     c002aeca <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c002ad14:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c002ad1c:	66 81 fd 06 04       	cmp    bp,0x406
c002ad21:	75 32                	jne    c002ad55 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c002ad23:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c002ad2b:	50                   	push   eax
c002ad2c:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c002ad34:	50                   	push   eax
c002ad35:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c002ad3d:	50                   	push   eax
c002ad3e:	53                   	push   ebx
c002ad3f:	e8 4c fb ff ff       	call   c002a890 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002ad44:	59                   	pop    ecx
c002ad45:	5e                   	pop    esi
c002ad46:	0f b6 c0             	movzx  eax,al
c002ad49:	50                   	push   eax
c002ad4a:	53                   	push   ebx
c002ad4b:	e8 7c ff ff ff       	call   c002accc <PCI::checkBus(unsigned char)>
c002ad50:	e9 15 01 00 00       	jmp    c002ae6a <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c002ad55:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c002ad5d:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c002ad63:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c002ad6a:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c002ad71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002ad75:	85 c0                	test   eax,eax
c002ad77:	74 34                	je     c002adad <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c002ad79:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002ad7c:	85 d2                	test   edx,edx
c002ad7e:	74 29                	je     c002ada9 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c002ad80:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002ad86:	31 cf                	xor    edi,ecx
c002ad88:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002ad8e:	75 19                	jne    c002ada9 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c002ad90:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c002ad96:	75 11                	jne    c002ada9 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c002ad98:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c002ad9f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c002ada3:	0f 84 21 01 00 00    	je     c002aeca <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c002ada9:	8b 00                	mov    eax,DWORD PTR [eax]
c002adab:	eb c8                	jmp    c002ad75 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c002adad:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002adb1:	be 9c 3d 03 c0       	mov    esi,0xc0033d9c
c002adb6:	b9 07 00 00 00       	mov    ecx,0x7
c002adbb:	fc                   	cld    
c002adbc:	31 d2                	xor    edx,edx
c002adbe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002adc0:	b9 12 00 00 00       	mov    ecx,0x12
c002adc5:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c002adcc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c002add0:	83 ec 0c             	sub    esp,0xc
c002add3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002add5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c002addd:	b9 0a 00 00 00       	mov    ecx,0xa
c002ade2:	f7 f1                	div    ecx
c002ade4:	83 c0 30             	add    eax,0x30
c002ade7:	83 c2 30             	add    edx,0x30
c002adea:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c002adee:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c002adf6:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c002adfa:	31 d2                	xor    edx,edx
c002adfc:	f7 f1                	div    ecx
c002adfe:	83 c0 30             	add    eax,0x30
c002ae01:	83 c2 30             	add    edx,0x30
c002ae04:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c002ae08:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c002ae0c:	8d 44 24 28          	lea    eax,[esp+0x28]
c002ae10:	50                   	push   eax
c002ae11:	e8 1f 50 ff ff       	call   c001fe35 <KeSetBootMessage(char const*)>
c002ae16:	83 c4 10             	add    esp,0x10
c002ae19:	81 fd 01 06 00 00    	cmp    ebp,0x601
c002ae1f:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c002ae26:	75 47                	jne    c002ae6f <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002ae28:	83 ec 0c             	sub    esp,0xc
c002ae2b:	68 64 01 00 00       	push   0x164
c002ae30:	e8 67 b8 fe ff       	call   c001669c <malloc>
c002ae35:	89 04 24             	mov    DWORD PTR [esp],eax
c002ae38:	89 c5                	mov    ebp,eax
c002ae3a:	e8 7b 0e 00 00       	call   c002bcba <SATABus::SATABus()>
c002ae3f:	58                   	pop    eax
c002ae40:	5a                   	pop    edx
c002ae41:	55                   	push   ebp
c002ae42:	53                   	push   ebx
c002ae43:	e8 5c 08 ff ff       	call   c001b6a4 <Device::addChild(Device*)>
c002ae48:	83 ec 1c             	sub    esp,0x1c
c002ae4b:	b9 09 00 00 00       	mov    ecx,0x9
c002ae50:	89 e7                	mov    edi,esp
c002ae52:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ae54:	55                   	push   ebp
c002ae55:	e8 90 07 ff ff       	call   c001b5ea <Device::preOpenPCI(PCIDeviceInfo)>
c002ae5a:	83 c4 30             	add    esp,0x30
c002ae5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002ae60:	6a 00                	push   0x0
c002ae62:	6a 00                	push   0x0
c002ae64:	6a 00                	push   0x0
c002ae66:	55                   	push   ebp
c002ae67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002ae6a:	83 c4 10             	add    esp,0x10
c002ae6d:	eb 5b                	jmp    c002aeca <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c002ae6f:	81 fd 01 01 00 00    	cmp    ebp,0x101
c002ae75:	75 19                	jne    c002ae90 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c002ae77:	83 ec 0c             	sub    esp,0xc
c002ae7a:	68 70 02 00 00       	push   0x270
c002ae7f:	e8 18 b8 fe ff       	call   c001669c <malloc>
c002ae84:	89 04 24             	mov    DWORD PTR [esp],eax
c002ae87:	89 c5                	mov    ebp,eax
c002ae89:	e8 94 02 00 00       	call   c002b122 <IDE::IDE()>
c002ae8e:	eb af                	jmp    c002ae3f <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c002ae90:	83 ec 0c             	sub    esp,0xc
c002ae93:	68 58 01 00 00       	push   0x158
c002ae98:	e8 ff b7 fe ff       	call   c001669c <malloc>
c002ae9d:	89 c5                	mov    ebp,eax
c002ae9f:	58                   	pop    eax
c002aea0:	5a                   	pop    edx
c002aea1:	68 82 3d 03 c0       	push   0xc0033d82
c002aea6:	55                   	push   ebp
c002aea7:	e8 ac 0a ff ff       	call   c001b958 <DriverlessDevice::DriverlessDevice(char const*)>
c002aeac:	59                   	pop    ecx
c002aead:	5f                   	pop    edi
c002aeae:	55                   	push   ebp
c002aeaf:	53                   	push   ebx
c002aeb0:	e8 ef 07 ff ff       	call   c001b6a4 <Device::addChild(Device*)>
c002aeb5:	83 ec 1c             	sub    esp,0x1c
c002aeb8:	b9 09 00 00 00       	mov    ecx,0x9
c002aebd:	89 e7                	mov    edi,esp
c002aebf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002aec1:	55                   	push   ebp
c002aec2:	e8 23 07 ff ff       	call   c001b5ea <Device::preOpenPCI(PCIDeviceInfo)>
c002aec7:	83 c4 30             	add    esp,0x30
c002aeca:	81 c4 8c 00 00 00    	add    esp,0x8c
c002aed0:	5b                   	pop    ebx
c002aed1:	5e                   	pop    esi
c002aed2:	5f                   	pop    edi
c002aed3:	5d                   	pop    ebp
c002aed4:	c3                   	ret    
c002aed5:	90                   	nop

c002aed6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002aed6:	55                   	push   ebp
c002aed7:	57                   	push   edi
c002aed8:	56                   	push   esi
c002aed9:	53                   	push   ebx
c002aeda:	83 ec 68             	sub    esp,0x68
c002aedd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002aee4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002aee8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002aeec:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002aef3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002aef8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002aefc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002af03:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002af08:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002af0c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002af11:	6a 0c                	push   0xc
c002af13:	57                   	push   edi
c002af14:	53                   	push   ebx
c002af15:	56                   	push   esi
c002af16:	55                   	push   ebp
c002af17:	e8 c4 f7 ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002af1c:	83 c4 20             	add    esp,0x20
c002af1f:	57                   	push   edi
c002af20:	53                   	push   ebx
c002af21:	56                   	push   esi
c002af22:	55                   	push   ebp
c002af23:	e8 ae f8 ff ff       	call   c002a7d6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002af28:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002af2d:	57                   	push   edi
c002af2e:	53                   	push   ebx
c002af2f:	56                   	push   esi
c002af30:	55                   	push   ebp
c002af31:	e8 36 f9 ff ff       	call   c002a86c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002af36:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002af3a:	83 c4 14             	add    esp,0x14
c002af3d:	6a 3c                	push   0x3c
c002af3f:	57                   	push   edi
c002af40:	53                   	push   ebx
c002af41:	56                   	push   esi
c002af42:	55                   	push   ebp
c002af43:	e8 98 f7 ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002af48:	0f b6 c4             	movzx  eax,ah
c002af4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002af4f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002af53:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002af57:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002af5c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002af62:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002af68:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002af6c:	83 c4 20             	add    esp,0x20
c002af6f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002af74:	74 30                	je     c002afa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002af76:	31 c0                	xor    eax,eax
c002af78:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002af7c:	7e 28                	jle    c002afa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002af7e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002af86:	39 cb                	cmp    ebx,ecx
c002af88:	75 19                	jne    c002afa3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002af8a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002af92:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002af96:	75 0b                	jne    c002afa3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002af98:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002af9f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002afa3:	40                   	inc    eax
c002afa4:	eb d2                	jmp    c002af78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002afa6:	31 d2                	xor    edx,edx
c002afa8:	83 ec 0c             	sub    esp,0xc
c002afab:	57                   	push   edi
c002afac:	53                   	push   ebx
c002afad:	56                   	push   esi
c002afae:	52                   	push   edx
c002afaf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002afb3:	55                   	push   ebp
c002afb4:	e8 ff f8 ff ff       	call   c002a8b8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002afb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002afbd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002afc1:	42                   	inc    edx
c002afc2:	83 c4 20             	add    esp,0x20
c002afc5:	83 fa 06             	cmp    edx,0x6
c002afc8:	75 de                	jne    c002afa8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002afca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002afce:	83 ec 0c             	sub    esp,0xc
c002afd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002afd5:	c1 e2 08             	shl    edx,0x8
c002afd8:	0f b6 c4             	movzx  eax,ah
c002afdb:	09 d0                	or     eax,edx
c002afdd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002afe2:	6a 02                	push   0x2
c002afe4:	57                   	push   edi
c002afe5:	53                   	push   ebx
c002afe6:	56                   	push   esi
c002afe7:	55                   	push   ebp
c002afe8:	e8 f3 f6 ff ff       	call   c002a6e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002afed:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002aff2:	83 c4 20             	add    esp,0x20
c002aff5:	57                   	push   edi
c002aff6:	53                   	push   ebx
c002aff7:	56                   	push   esi
c002aff8:	55                   	push   ebp
c002aff9:	e8 22 f8 ff ff       	call   c002a820 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002affe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002b002:	57                   	push   edi
c002b003:	53                   	push   ebx
c002b004:	56                   	push   esi
c002b005:	55                   	push   ebp
c002b006:	e8 7f f7 ff ff       	call   c002a78a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b00b:	b9 09 00 00 00       	mov    ecx,0x9
c002b010:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002b015:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002b019:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002b01d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002b021:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002b025:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002b029:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002b02d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002b031:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002b035:	83 ec 0c             	sub    esp,0xc
c002b038:	fc                   	cld    
c002b039:	8d 74 24 58          	lea    esi,[esp+0x58]
c002b03d:	89 e7                	mov    edi,esp
c002b03f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002b041:	55                   	push   ebp
c002b042:	e8 a9 fc ff ff       	call   c002acf0 <PCI::foundDevice(PCIDeviceInfo)>
c002b047:	81 c4 8c 00 00 00    	add    esp,0x8c
c002b04d:	5b                   	pop    ebx
c002b04e:	5e                   	pop    esi
c002b04f:	5f                   	pop    edi
c002b050:	5d                   	pop    ebp
c002b051:	c3                   	ret    

c002b052 <PCI::checkDevice(unsigned char, unsigned char)>:
c002b052:	55                   	push   ebp
c002b053:	57                   	push   edi
c002b054:	56                   	push   esi
c002b055:	53                   	push   ebx
c002b056:	83 ec 0c             	sub    esp,0xc
c002b059:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002b05e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002b063:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002b067:	6a 00                	push   0x0
c002b069:	56                   	push   esi
c002b06a:	57                   	push   edi
c002b06b:	55                   	push   ebp
c002b06c:	e8 19 f7 ff ff       	call   c002a78a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b071:	6a 00                	push   0x0
c002b073:	56                   	push   esi
c002b074:	57                   	push   edi
c002b075:	55                   	push   ebp
c002b076:	e8 5b fe ff ff       	call   c002aed6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002b07b:	83 c4 20             	add    esp,0x20
c002b07e:	6a 00                	push   0x0
c002b080:	56                   	push   esi
c002b081:	57                   	push   edi
c002b082:	55                   	push   ebp
c002b083:	e8 26 f7 ff ff       	call   c002a7ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002b088:	83 c4 10             	add    esp,0x10
c002b08b:	a8 80                	test   al,0x80
c002b08d:	74 2d                	je     c002b0bc <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002b08f:	bb 01 00 00 00       	mov    ebx,0x1
c002b094:	53                   	push   ebx
c002b095:	56                   	push   esi
c002b096:	57                   	push   edi
c002b097:	55                   	push   ebp
c002b098:	e8 ed f6 ff ff       	call   c002a78a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b09d:	83 c4 10             	add    esp,0x10
c002b0a0:	0f b7 c0             	movzx  eax,ax
c002b0a3:	3d ff ff 00 00       	cmp    eax,0xffff
c002b0a8:	74 0c                	je     c002b0b6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002b0aa:	53                   	push   ebx
c002b0ab:	56                   	push   esi
c002b0ac:	57                   	push   edi
c002b0ad:	55                   	push   ebp
c002b0ae:	e8 23 fe ff ff       	call   c002aed6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002b0b3:	83 c4 10             	add    esp,0x10
c002b0b6:	43                   	inc    ebx
c002b0b7:	83 fb 08             	cmp    ebx,0x8
c002b0ba:	75 d8                	jne    c002b094 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002b0bc:	83 c4 0c             	add    esp,0xc
c002b0bf:	5b                   	pop    ebx
c002b0c0:	5e                   	pop    esi
c002b0c1:	5f                   	pop    edi
c002b0c2:	5d                   	pop    ebp
c002b0c3:	c3                   	ret    

c002b0c4 <PCI::detect()>:
c002b0c4:	56                   	push   esi
c002b0c5:	53                   	push   ebx
c002b0c6:	53                   	push   ebx
c002b0c7:	31 db                	xor    ebx,ebx
c002b0c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b0cd:	6a 00                	push   0x0
c002b0cf:	6a 00                	push   0x0
c002b0d1:	6a 00                	push   0x0
c002b0d3:	56                   	push   esi
c002b0d4:	e8 d5 f6 ff ff       	call   c002a7ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002b0d9:	83 c4 10             	add    esp,0x10
c002b0dc:	a8 80                	test   al,0x80
c002b0de:	75 21                	jne    c002b101 <PCI::detect()+0x3d>
c002b0e0:	51                   	push   ecx
c002b0e1:	51                   	push   ecx
c002b0e2:	6a 00                	push   0x0
c002b0e4:	56                   	push   esi
c002b0e5:	e8 e2 fb ff ff       	call   c002accc <PCI::checkBus(unsigned char)>
c002b0ea:	83 c4 10             	add    esp,0x10
c002b0ed:	eb 2a                	jmp    c002b119 <PCI::detect()+0x55>
c002b0ef:	52                   	push   edx
c002b0f0:	52                   	push   edx
c002b0f1:	53                   	push   ebx
c002b0f2:	43                   	inc    ebx
c002b0f3:	56                   	push   esi
c002b0f4:	e8 d3 fb ff ff       	call   c002accc <PCI::checkBus(unsigned char)>
c002b0f9:	83 c4 10             	add    esp,0x10
c002b0fc:	83 fb 08             	cmp    ebx,0x8
c002b0ff:	74 18                	je     c002b119 <PCI::detect()+0x55>
c002b101:	53                   	push   ebx
c002b102:	6a 00                	push   0x0
c002b104:	6a 00                	push   0x0
c002b106:	56                   	push   esi
c002b107:	e8 7e f6 ff ff       	call   c002a78a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b10c:	83 c4 10             	add    esp,0x10
c002b10f:	0f b7 c0             	movzx  eax,ax
c002b112:	3d ff ff 00 00       	cmp    eax,0xffff
c002b117:	74 d6                	je     c002b0ef <PCI::detect()+0x2b>
c002b119:	58                   	pop    eax
c002b11a:	5b                   	pop    ebx
c002b11b:	5e                   	pop    esi
c002b11c:	c3                   	ret    
c002b11d:	90                   	nop

c002b11e <IDE::close(int, int, void*)>:
c002b11e:	83 c8 ff             	or     eax,0xffffffff
c002b121:	c3                   	ret    

c002b122 <IDE::IDE()>:
c002b122:	83 ec 0c             	sub    esp,0xc
c002b125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b129:	83 ec 08             	sub    esp,0x8
c002b12c:	68 2c 3e 03 c0       	push   0xc0033e2c
c002b131:	50                   	push   eax
c002b132:	e8 c5 08 ff ff       	call   c001b9fc <HardDiskController::HardDiskController(char const*)>
c002b137:	83 c4 10             	add    esp,0x10
c002b13a:	ba bc 3e 03 c0       	mov    edx,0xc0033ebc
c002b13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b143:	89 10                	mov    DWORD PTR [eax],edx
c002b145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b149:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002b150:	90                   	nop
c002b151:	83 c4 0c             	add    esp,0xc
c002b154:	c3                   	ret    
c002b155:	90                   	nop

c002b156 <IDE::prepareInterrupt(unsigned char)>:
c002b156:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002b15b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002b15f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002b167:	c3                   	ret    

c002b168 <selectDrive(unsigned char, unsigned char)>:
c002b168:	c3                   	ret    
c002b169:	90                   	nop

c002b16a <IDE::getBase(unsigned char)>:
c002b16a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002b16f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b173:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002b17b:	c3                   	ret    

c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002b17c:	55                   	push   ebp
c002b17d:	57                   	push   edi
c002b17e:	56                   	push   esi
c002b17f:	53                   	push   ebx
c002b180:	83 ec 1c             	sub    esp,0x1c
c002b183:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002b187:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002b18b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002b18f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b193:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002b196:	80 f9 03             	cmp    cl,0x3
c002b199:	77 4f                	ja     c002b1ea <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002b19b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b19f:	0f b6 f2             	movzx  esi,dl
c002b1a2:	0f b6 db             	movzx  ebx,bl
c002b1a5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002b1a8:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002b1ad:	80 ca 80             	or     dl,0x80
c002b1b0:	52                   	push   edx
c002b1b1:	6a 0c                	push   0xc
c002b1b3:	56                   	push   esi
c002b1b4:	57                   	push   edi
c002b1b5:	e8 c2 ff ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b1ba:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002b1bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002b1c3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002b1c7:	ee                   	out    dx,al
c002b1c8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002b1cd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002b1d1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002b1d5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b1dd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b1e1:	83 c4 2c             	add    esp,0x2c
c002b1e4:	5b                   	pop    ebx
c002b1e5:	5e                   	pop    esi
c002b1e6:	5f                   	pop    edi
c002b1e7:	5d                   	pop    ebp
c002b1e8:	eb 92                	jmp    c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b1ea:	0f b6 cb             	movzx  ecx,bl
c002b1ed:	83 f9 07             	cmp    ecx,0x7
c002b1f0:	77 12                	ja     c002b204 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002b1f2:	0f b6 d2             	movzx  edx,dl
c002b1f5:	0f b6 db             	movzx  ebx,bl
c002b1f8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c002b200:	01 da                	add    edx,ebx
c002b202:	eb 2f                	jmp    c002b233 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b204:	83 f9 0d             	cmp    ecx,0xd
c002b207:	77 13                	ja     c002b21c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002b209:	0f b6 d2             	movzx  edx,dl
c002b20c:	0f b6 db             	movzx  ebx,bl
c002b20f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002b216:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002b21a:	eb 17                	jmp    c002b233 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b21c:	83 f9 15             	cmp    ecx,0x15
c002b21f:	77 13                	ja     c002b234 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002b221:	0f b6 d2             	movzx  edx,dl
c002b224:	0f b6 db             	movzx  ebx,bl
c002b227:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002b22f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002b233:	ee                   	out    dx,al
c002b234:	83 c4 1c             	add    esp,0x1c
c002b237:	5b                   	pop    ebx
c002b238:	5e                   	pop    esi
c002b239:	5f                   	pop    edi
c002b23a:	5d                   	pop    ebp
c002b23b:	c3                   	ret    

c002b23c <IDE::read(unsigned char, unsigned char)>:
c002b23c:	57                   	push   edi
c002b23d:	56                   	push   esi
c002b23e:	53                   	push   ebx
c002b23f:	83 ec 10             	sub    esp,0x10
c002b242:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002b246:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002b24a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002b24e:	8d 42 f8             	lea    eax,[edx-0x8]
c002b251:	3c 03                	cmp    al,0x3
c002b253:	77 48                	ja     c002b29d <IDE::read(unsigned char, unsigned char)+0x61>
c002b255:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002b259:	0f b6 f1             	movzx  esi,cl
c002b25c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c002b25f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c002b264:	0c 80                	or     al,0x80
c002b266:	50                   	push   eax
c002b267:	6a 0c                	push   0xc
c002b269:	56                   	push   esi
c002b26a:	53                   	push   ebx
c002b26b:	e8 0c ff ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002b274:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c002b279:	0f b6 d2             	movzx  edx,dl
c002b27c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b280:	ec                   	in     al,dx
c002b281:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002b285:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c002b28a:	52                   	push   edx
c002b28b:	6a 0c                	push   0xc
c002b28d:	56                   	push   esi
c002b28e:	53                   	push   ebx
c002b28f:	e8 e8 fe ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b294:	83 c4 20             	add    esp,0x20
c002b297:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002b29b:	eb 4c                	jmp    c002b2e9 <IDE::read(unsigned char, unsigned char)+0xad>
c002b29d:	0f b6 f2             	movzx  esi,dl
c002b2a0:	83 fe 07             	cmp    esi,0x7
c002b2a3:	77 12                	ja     c002b2b7 <IDE::read(unsigned char, unsigned char)+0x7b>
c002b2a5:	0f b6 c9             	movzx  ecx,cl
c002b2a8:	0f b6 d2             	movzx  edx,dl
c002b2ab:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c002b2b3:	01 c2                	add    edx,eax
c002b2b5:	eb 31                	jmp    c002b2e8 <IDE::read(unsigned char, unsigned char)+0xac>
c002b2b7:	83 fe 0d             	cmp    esi,0xd
c002b2ba:	77 13                	ja     c002b2cf <IDE::read(unsigned char, unsigned char)+0x93>
c002b2bc:	0f b6 c9             	movzx  ecx,cl
c002b2bf:	0f b6 d2             	movzx  edx,dl
c002b2c2:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c002b2c9:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b2cd:	eb 19                	jmp    c002b2e8 <IDE::read(unsigned char, unsigned char)+0xac>
c002b2cf:	31 c0                	xor    eax,eax
c002b2d1:	83 fe 15             	cmp    esi,0x15
c002b2d4:	77 13                	ja     c002b2e9 <IDE::read(unsigned char, unsigned char)+0xad>
c002b2d6:	0f b6 c9             	movzx  ecx,cl
c002b2d9:	0f b6 d2             	movzx  edx,dl
c002b2dc:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c002b2e4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b2e8:	ec                   	in     al,dx
c002b2e9:	83 c4 10             	add    esp,0x10
c002b2ec:	5b                   	pop    ebx
c002b2ed:	5e                   	pop    esi
c002b2ee:	5f                   	pop    edi
c002b2ef:	c3                   	ret    

c002b2f0 <IDE::waitInterrupt(unsigned char)>:
c002b2f0:	55                   	push   ebp
c002b2f1:	57                   	push   edi
c002b2f2:	56                   	push   esi
c002b2f3:	53                   	push   ebx
c002b2f4:	31 db                	xor    ebx,ebx
c002b2f6:	83 ec 0c             	sub    esp,0xc
c002b2f9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002b2fd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002b302:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002b30a:	89 e8                	mov    eax,ebp
c002b30c:	84 c0                	test   al,al
c002b30e:	75 30                	jne    c002b340 <IDE::waitInterrupt(unsigned char)+0x50>
c002b310:	50                   	push   eax
c002b311:	6a 0c                	push   0xc
c002b313:	56                   	push   esi
c002b314:	57                   	push   edi
c002b315:	e8 22 ff ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b31a:	83 c4 10             	add    esp,0x10
c002b31d:	a8 01                	test   al,0x1
c002b31f:	75 27                	jne    c002b348 <IDE::waitInterrupt(unsigned char)+0x58>
c002b321:	f6 c3 04             	test   bl,0x4
c002b324:	75 12                	jne    c002b338 <IDE::waitInterrupt(unsigned char)+0x48>
c002b326:	83 fb 32             	cmp    ebx,0x32
c002b329:	7e 0d                	jle    c002b338 <IDE::waitInterrupt(unsigned char)+0x48>
c002b32b:	83 ec 0c             	sub    esp,0xc
c002b32e:	6a 64                	push   0x64
c002b330:	e8 8f a4 ff ff       	call   c00257c4 <milliTenthSleep(unsigned int)>
c002b335:	83 c4 10             	add    esp,0x10
c002b338:	83 fb 3c             	cmp    ebx,0x3c
c002b33b:	74 0b                	je     c002b348 <IDE::waitInterrupt(unsigned char)+0x58>
c002b33d:	43                   	inc    ebx
c002b33e:	eb c2                	jmp    c002b302 <IDE::waitInterrupt(unsigned char)+0x12>
c002b340:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002b348:	83 c4 0c             	add    esp,0xc
c002b34b:	89 e8                	mov    eax,ebp
c002b34d:	5b                   	pop    ebx
c002b34e:	5e                   	pop    esi
c002b34f:	5f                   	pop    edi
c002b350:	5d                   	pop    ebp
c002b351:	c3                   	ret    

c002b352 <ideChannel0IRQHandler(regs*, void*)>:
c002b352:	83 ec 10             	sub    esp,0x10
c002b355:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b359:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002b360:	6a 07                	push   0x7
c002b362:	6a 00                	push   0x0
c002b364:	50                   	push   eax
c002b365:	e8 d2 fe ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b36a:	83 c4 1c             	add    esp,0x1c
c002b36d:	c3                   	ret    

c002b36e <ideChannel1IRQHandler(regs*, void*)>:
c002b36e:	83 ec 10             	sub    esp,0x10
c002b371:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b375:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002b37c:	6a 07                	push   0x7
c002b37e:	6a 01                	push   0x1
c002b380:	50                   	push   eax
c002b381:	e8 b6 fe ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b386:	83 c4 1c             	add    esp,0x1c
c002b389:	c3                   	ret    

c002b38a <IDE::enableIRQs(unsigned char, bool)>:
c002b38a:	57                   	push   edi
c002b38b:	b8 02 00 00 00       	mov    eax,0x2
c002b390:	56                   	push   esi
c002b391:	53                   	push   ebx
c002b392:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002b397:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b39b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002b39f:	74 02                	je     c002b3a3 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002b3a1:	31 c0                	xor    eax,eax
c002b3a3:	0f b6 db             	movzx  ebx,bl
c002b3a6:	bf 04 00 00 00       	mov    edi,0x4
c002b3ab:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002b3b2:	50                   	push   eax
c002b3b3:	6a 0c                	push   0xc
c002b3b5:	53                   	push   ebx
c002b3b6:	56                   	push   esi
c002b3b7:	e8 c0 fd ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3bc:	83 c4 10             	add    esp,0x10
c002b3bf:	50                   	push   eax
c002b3c0:	6a 0c                	push   0xc
c002b3c2:	53                   	push   ebx
c002b3c3:	56                   	push   esi
c002b3c4:	e8 73 fe ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b3c9:	83 c4 10             	add    esp,0x10
c002b3cc:	4f                   	dec    edi
c002b3cd:	75 f0                	jne    c002b3bf <IDE::enableIRQs(unsigned char, bool)+0x35>
c002b3cf:	5b                   	pop    ebx
c002b3d0:	5e                   	pop    esi
c002b3d1:	5f                   	pop    edi
c002b3d2:	c3                   	ret    
c002b3d3:	90                   	nop

c002b3d4 <IDE::open(int, int, void*)>:
c002b3d4:	55                   	push   ebp
c002b3d5:	57                   	push   edi
c002b3d6:	56                   	push   esi
c002b3d7:	53                   	push   ebx
c002b3d8:	83 ec 1c             	sub    esp,0x1c
c002b3db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002b3df:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002b3e6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002b3ef:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002b3f8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002b3ff:	0f 85 da 02 00 00    	jne    c002b6df <IDE::open(int, int, void*)+0x30b>
c002b405:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002b40b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c002b40f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b413:	83 e0 7f             	and    eax,0x7f
c002b416:	83 f8 05             	cmp    eax,0x5
c002b419:	74 05                	je     c002b420 <IDE::open(int, int, void*)+0x4c>
c002b41b:	83 f8 0f             	cmp    eax,0xf
c002b41e:	75 32                	jne    c002b452 <IDE::open(int, int, void*)+0x7e>
c002b420:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002b426:	83 e0 fc             	and    eax,0xfffffffc
c002b429:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b430:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002b436:	83 e0 fc             	and    eax,0xfffffffc
c002b439:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b440:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002b446:	83 e0 fc             	and    eax,0xfffffffc
c002b449:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b450:	eb 14                	jmp    c002b466 <IDE::open(int, int, void*)+0x92>
c002b452:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002b45c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002b466:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c002b46d:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b472:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002b479:	89 fa                	mov    edx,edi
c002b47b:	89 f1                	mov    ecx,esi
c002b47d:	c1 e1 10             	shl    ecx,0x10
c002b480:	89 e8                	mov    eax,ebp
c002b482:	c1 e0 0b             	shl    eax,0xb
c002b485:	09 c1                	or     ecx,eax
c002b487:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b48e:	c1 e0 08             	shl    eax,0x8
c002b491:	09 c1                	or     ecx,eax
c002b493:	89 c8                	mov    eax,ecx
c002b495:	0d 08 00 00 80       	or     eax,0x80000008
c002b49a:	ef                   	out    dx,eax
c002b49b:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b4a0:	ed                   	in     eax,dx
c002b4a1:	c1 e8 10             	shr    eax,0x10
c002b4a4:	3d ff ff 00 00       	cmp    eax,0xffff
c002b4a9:	0f 84 f9 00 00 00    	je     c002b5a8 <IDE::open(int, int, void*)+0x1d4>
c002b4af:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b4b5:	89 fa                	mov    edx,edi
c002b4b7:	89 c8                	mov    eax,ecx
c002b4b9:	ef                   	out    dx,eax
c002b4ba:	b0 fe                	mov    al,0xfe
c002b4bc:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b4c1:	ee                   	out    dx,al
c002b4c2:	89 c8                	mov    eax,ecx
c002b4c4:	89 fa                	mov    edx,edi
c002b4c6:	ef                   	out    dx,eax
c002b4c7:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b4cc:	ed                   	in     eax,dx
c002b4cd:	3c fe                	cmp    al,0xfe
c002b4cf:	0f 85 a4 00 00 00    	jne    c002b579 <IDE::open(int, int, void*)+0x1a5>
c002b4d5:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002b4db:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b4e2:	74 30                	je     c002b514 <IDE::open(int, int, void*)+0x140>
c002b4e4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b4ea:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b4ee:	83 ec 0c             	sub    esp,0xc
c002b4f1:	40                   	inc    eax
c002b4f2:	0f b6 c0             	movzx  eax,al
c002b4f5:	50                   	push   eax
c002b4f6:	55                   	push   ebp
c002b4f7:	56                   	push   esi
c002b4f8:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b4fe:	51                   	push   ecx
c002b4ff:	e8 04 34 ff ff       	call   c001e908 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b504:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b509:	83 c4 1c             	add    esp,0x1c
c002b50c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b512:	eb 0a                	jmp    c002b51e <IDE::open(int, int, void*)+0x14a>
c002b514:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b51e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b525:	bd f8 0c 00 00       	mov    ebp,0xcf8
c002b52a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b531:	89 ea                	mov    edx,ebp
c002b533:	c1 e1 10             	shl    ecx,0x10
c002b536:	c1 e0 08             	shl    eax,0x8
c002b539:	09 c1                	or     ecx,eax
c002b53b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b542:	c1 e0 0b             	shl    eax,0xb
c002b545:	09 c1                	or     ecx,eax
c002b547:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b54d:	89 c8                	mov    eax,ecx
c002b54f:	ef                   	out    dx,eax
c002b550:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c002b556:	be fc 0c 00 00       	mov    esi,0xcfc
c002b55b:	89 f2                	mov    edx,esi
c002b55d:	89 f8                	mov    eax,edi
c002b55f:	ee                   	out    dx,al
c002b560:	89 c8                	mov    eax,ecx
c002b562:	89 ea                	mov    edx,ebp
c002b564:	ef                   	out    dx,eax
c002b565:	89 f2                	mov    edx,esi
c002b567:	ed                   	in     eax,dx
c002b568:	0f b6 c0             	movzx  eax,al
c002b56b:	39 f8                	cmp    eax,edi
c002b56d:	74 49                	je     c002b5b8 <IDE::open(int, int, void*)+0x1e4>
c002b56f:	83 ec 0c             	sub    esp,0xc
c002b572:	68 44 3e 03 c0       	push   0xc0033e44
c002b577:	eb 37                	jmp    c002b5b0 <IDE::open(int, int, void*)+0x1dc>
c002b579:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b582:	75 1a                	jne    c002b59e <IDE::open(int, int, void*)+0x1ca>
c002b584:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002b589:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b58e:	74 05                	je     c002b595 <IDE::open(int, int, void*)+0x1c1>
c002b590:	83 c0 80             	add    eax,0xffffff80
c002b593:	75 09                	jne    c002b59e <IDE::open(int, int, void*)+0x1ca>
c002b595:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b59c:	eb 1a                	jmp    c002b5b8 <IDE::open(int, int, void*)+0x1e4>
c002b59e:	83 ec 0c             	sub    esp,0xc
c002b5a1:	68 4c 3e 03 c0       	push   0xc0033e4c
c002b5a6:	eb 08                	jmp    c002b5b0 <IDE::open(int, int, void*)+0x1dc>
c002b5a8:	83 ec 0c             	sub    esp,0xc
c002b5ab:	68 7d 3e 03 c0       	push   0xc0033e7d
c002b5b0:	e8 e1 4f ff ff       	call   c0020596 <KePanic(char const*)>
c002b5b5:	83 c4 10             	add    esp,0x10
c002b5b8:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b5bf:	74 1a                	je     c002b5db <IDE::open(int, int, void*)+0x207>
c002b5c1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b5c7:	83 e0 fc             	and    eax,0xfffffffc
c002b5ca:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b5d1:	83 c0 08             	add    eax,0x8
c002b5d4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b5db:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b5e1:	89 c2                	mov    edx,eax
c002b5e3:	83 e2 0f             	and    edx,0xf
c002b5e6:	83 fa 08             	cmp    edx,0x8
c002b5e9:	75 0a                	jne    c002b5f5 <IDE::open(int, int, void*)+0x221>
c002b5eb:	83 e8 02             	sub    eax,0x2
c002b5ee:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b5f5:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b5fb:	89 c2                	mov    edx,eax
c002b5fd:	83 e2 0f             	and    edx,0xf
c002b600:	83 fa 08             	cmp    edx,0x8
c002b603:	75 0a                	jne    c002b60f <IDE::open(int, int, void*)+0x23b>
c002b605:	83 e8 02             	sub    eax,0x2
c002b608:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b60f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b616:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b61d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b620:	89 d0                	mov    eax,edx
c002b622:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b626:	8d 7a 01             	lea    edi,[edx+0x1]
c002b629:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b62d:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b631:	83 e1 3f             	and    ecx,0x3f
c002b634:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b638:	89 f9                	mov    ecx,edi
c002b63a:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b641:	8d 78 02             	lea    edi,[eax+0x2]
c002b644:	0f b6 c9             	movzx  ecx,cl
c002b647:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b64a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b64e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b652:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b656:	83 e2 3f             	and    edx,0x3f
c002b659:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b65d:	89 f9                	mov    ecx,edi
c002b65f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b665:	8d 78 03             	lea    edi,[eax+0x3]
c002b668:	0f b6 d1             	movzx  edx,cl
c002b66b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b66e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b672:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b676:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b67a:	83 e1 3f             	and    ecx,0x3f
c002b67d:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b681:	89 f9                	mov    ecx,edi
c002b683:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b689:	8d 78 04             	lea    edi,[eax+0x4]
c002b68c:	0f b6 c9             	movzx  ecx,cl
c002b68f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b692:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b696:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b69a:	89 fa                	mov    edx,edi
c002b69c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b6a2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b6a6:	83 e2 3f             	and    edx,0x3f
c002b6a9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b6ad:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b6b4:	66 85 f6             	test   si,si
c002b6b7:	74 65                	je     c002b71e <IDE::open(int, int, void*)+0x34a>
c002b6b9:	89 f9                	mov    ecx,edi
c002b6bb:	83 c0 05             	add    eax,0x5
c002b6be:	0f b6 d1             	movzx  edx,cl
c002b6c1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b6c4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b6c8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b6cc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b6d2:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b6d6:	83 e0 3f             	and    eax,0x3f
c002b6d9:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b6dd:	eb 3f                	jmp    c002b71e <IDE::open(int, int, void*)+0x34a>
c002b6df:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b6e6:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b6ec:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b6f3:	05 06 02 00 00       	add    eax,0x206
c002b6f8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b6ff:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b706:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b70d:	05 06 02 00 00       	add    eax,0x206
c002b712:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b719:	e9 bd fe ff ff       	jmp    c002b5db <IDE::open(int, int, void*)+0x207>
c002b71e:	50                   	push   eax
c002b71f:	50                   	push   eax
c002b720:	6a 00                	push   0x0
c002b722:	53                   	push   ebx
c002b723:	e8 2e fa ff ff       	call   c002b156 <IDE::prepareInterrupt(unsigned char)>
c002b728:	5a                   	pop    edx
c002b729:	59                   	pop    ecx
c002b72a:	6a 01                	push   0x1
c002b72c:	53                   	push   ebx
c002b72d:	e8 24 fa ff ff       	call   c002b156 <IDE::prepareInterrupt(unsigned char)>
c002b732:	83 c4 0c             	add    esp,0xc
c002b735:	6a 00                	push   0x0
c002b737:	6a 00                	push   0x0
c002b739:	53                   	push   ebx
c002b73a:	e8 4b fc ff ff       	call   c002b38a <IDE::enableIRQs(unsigned char, bool)>
c002b73f:	83 c4 0c             	add    esp,0xc
c002b742:	6a 00                	push   0x0
c002b744:	6a 01                	push   0x1
c002b746:	53                   	push   ebx
c002b747:	e8 3e fc ff ff       	call   c002b38a <IDE::enableIRQs(unsigned char, bool)>
c002b74c:	83 c4 10             	add    esp,0x10
c002b74f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b756:	74 34                	je     c002b78c <IDE::open(int, int, void*)+0x3b8>
c002b758:	83 ec 0c             	sub    esp,0xc
c002b75b:	53                   	push   ebx
c002b75c:	6a 01                	push   0x1
c002b75e:	68 52 b3 02 c0       	push   0xc002b352
c002b763:	6a 0e                	push   0xe
c002b765:	53                   	push   ebx
c002b766:	e8 e5 fe fe ff       	call   c001b650 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b76b:	83 c4 14             	add    esp,0x14
c002b76e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b774:	53                   	push   ebx
c002b775:	6a 01                	push   0x1
c002b777:	68 6e b3 02 c0       	push   0xc002b36e
c002b77c:	6a 0f                	push   0xf
c002b77e:	53                   	push   ebx
c002b77f:	e8 cc fe fe ff       	call   c001b650 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b784:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b78a:	eb 38                	jmp    c002b7c4 <IDE::open(int, int, void*)+0x3f0>
c002b78c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b796:	83 ec 0c             	sub    esp,0xc
c002b799:	53                   	push   ebx
c002b79a:	6a 00                	push   0x0
c002b79c:	68 52 b3 02 c0       	push   0xc002b352
c002b7a1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b7a7:	53                   	push   ebx
c002b7a8:	e8 a3 fe fe ff       	call   c001b650 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b7ad:	83 c4 14             	add    esp,0x14
c002b7b0:	53                   	push   ebx
c002b7b1:	6a 00                	push   0x0
c002b7b3:	68 6e b3 02 c0       	push   0xc002b36e
c002b7b8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b7be:	53                   	push   ebx
c002b7bf:	e8 8c fe fe ff       	call   c001b650 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b7c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b7c6:	83 c4 20             	add    esp,0x20
c002b7c9:	83 ec 0c             	sub    esp,0xc
c002b7cc:	53                   	push   ebx
c002b7cd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b7d0:	83 c4 0c             	add    esp,0xc
c002b7d3:	6a 07                	push   0x7
c002b7d5:	6a 00                	push   0x0
c002b7d7:	53                   	push   ebx
c002b7d8:	e8 5f fa ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b7dd:	83 c4 0c             	add    esp,0xc
c002b7e0:	6a 07                	push   0x7
c002b7e2:	6a 01                	push   0x1
c002b7e4:	53                   	push   ebx
c002b7e5:	e8 52 fa ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b7ea:	83 c4 0c             	add    esp,0xc
c002b7ed:	6a 01                	push   0x1
c002b7ef:	6a 00                	push   0x0
c002b7f1:	53                   	push   ebx
c002b7f2:	e8 93 fb ff ff       	call   c002b38a <IDE::enableIRQs(unsigned char, bool)>
c002b7f7:	83 c4 0c             	add    esp,0xc
c002b7fa:	6a 01                	push   0x1
c002b7fc:	6a 01                	push   0x1
c002b7fe:	53                   	push   ebx
c002b7ff:	e8 86 fb ff ff       	call   c002b38a <IDE::enableIRQs(unsigned char, bool)>
c002b804:	83 c4 2c             	add    esp,0x2c
c002b807:	31 c0                	xor    eax,eax
c002b809:	5b                   	pop    ebx
c002b80a:	5e                   	pop    esi
c002b80b:	5f                   	pop    edi
c002b80c:	5d                   	pop    ebp
c002b80d:	c3                   	ret    

c002b80e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b80e:	55                   	push   ebp
c002b80f:	57                   	push   edi
c002b810:	56                   	push   esi
c002b811:	53                   	push   ebx
c002b812:	83 ec 1c             	sub    esp,0x1c
c002b815:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b819:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b81d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b821:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b825:	8d 42 f8             	lea    eax,[edx-0x8]
c002b828:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b82c:	3c 03                	cmp    al,0x3
c002b82e:	77 5a                	ja     c002b88a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b830:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b834:	0f b6 db             	movzx  ebx,bl
c002b837:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b83b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b83e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b843:	0c 80                	or     al,0x80
c002b845:	50                   	push   eax
c002b846:	6a 0c                	push   0xc
c002b848:	53                   	push   ebx
c002b849:	56                   	push   esi
c002b84a:	e8 2d f9 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b84f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b853:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b858:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b85c:	0f b6 d2             	movzx  edx,dl
c002b85f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b863:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b865:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b86a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b86e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b872:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b87a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b87e:	83 c4 2c             	add    esp,0x2c
c002b881:	5b                   	pop    ebx
c002b882:	5e                   	pop    esi
c002b883:	5f                   	pop    edi
c002b884:	5d                   	pop    ebp
c002b885:	e9 f2 f8 ff ff       	jmp    c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b88a:	0f b6 c2             	movzx  eax,dl
c002b88d:	83 f8 07             	cmp    eax,0x7
c002b890:	77 12                	ja     c002b8a4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b892:	0f b6 db             	movzx  ebx,bl
c002b895:	0f b6 c2             	movzx  eax,dl
c002b898:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b8a0:	01 c2                	add    edx,eax
c002b8a2:	eb 2f                	jmp    c002b8d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b8a4:	83 f8 0d             	cmp    eax,0xd
c002b8a7:	77 13                	ja     c002b8bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b8a9:	0f b6 db             	movzx  ebx,bl
c002b8ac:	0f b6 d2             	movzx  edx,dl
c002b8af:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b8b6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b8ba:	eb 17                	jmp    c002b8d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b8bc:	83 f8 15             	cmp    eax,0x15
c002b8bf:	77 14                	ja     c002b8d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b8c1:	0f b6 db             	movzx  ebx,bl
c002b8c4:	0f b6 d2             	movzx  edx,dl
c002b8c7:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b8cf:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b8d3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b8d5:	83 c4 1c             	add    esp,0x1c
c002b8d8:	5b                   	pop    ebx
c002b8d9:	5e                   	pop    esi
c002b8da:	5f                   	pop    edi
c002b8db:	5d                   	pop    ebp
c002b8dc:	c3                   	ret    
c002b8dd:	90                   	nop

c002b8de <IDE::detect()>:
c002b8de:	55                   	push   ebp
c002b8df:	57                   	push   edi
c002b8e0:	56                   	push   esi
c002b8e1:	53                   	push   ebx
c002b8e2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b8e8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b8ef:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b8f6:	0f 85 9e 02 00 00    	jne    c002bb9a <IDE::detect()+0x2bc>
c002b8fc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b903:	31 f6                	xor    esi,esi
c002b905:	31 ff                	xor    edi,edi
c002b907:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b90f:	89 f8                	mov    eax,edi
c002b911:	c1 e0 06             	shl    eax,0x6
c002b914:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b91c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b920:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b928:	c1 e0 04             	shl    eax,0x4
c002b92b:	83 c8 a0             	or     eax,0xffffffa0
c002b92e:	0f b6 c0             	movzx  eax,al
c002b931:	50                   	push   eax
c002b932:	6a 06                	push   0x6
c002b934:	56                   	push   esi
c002b935:	53                   	push   ebx
c002b936:	e8 41 f8 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b93b:	83 c4 0c             	add    esp,0xc
c002b93e:	6a 0c                	push   0xc
c002b940:	56                   	push   esi
c002b941:	53                   	push   ebx
c002b942:	e8 f5 f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b947:	83 c4 0c             	add    esp,0xc
c002b94a:	6a 0c                	push   0xc
c002b94c:	56                   	push   esi
c002b94d:	53                   	push   ebx
c002b94e:	e8 e9 f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b953:	83 c4 0c             	add    esp,0xc
c002b956:	6a 0c                	push   0xc
c002b958:	56                   	push   esi
c002b959:	53                   	push   ebx
c002b95a:	e8 dd f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b95f:	83 c4 0c             	add    esp,0xc
c002b962:	6a 0c                	push   0xc
c002b964:	56                   	push   esi
c002b965:	53                   	push   ebx
c002b966:	e8 d1 f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b96b:	68 ec 00 00 00       	push   0xec
c002b970:	6a 07                	push   0x7
c002b972:	56                   	push   esi
c002b973:	53                   	push   ebx
c002b974:	e8 03 f8 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b979:	83 c4 1c             	add    esp,0x1c
c002b97c:	6a 0c                	push   0xc
c002b97e:	56                   	push   esi
c002b97f:	53                   	push   ebx
c002b980:	e8 b7 f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b985:	83 c4 0c             	add    esp,0xc
c002b988:	6a 0c                	push   0xc
c002b98a:	56                   	push   esi
c002b98b:	53                   	push   ebx
c002b98c:	e8 ab f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b991:	83 c4 0c             	add    esp,0xc
c002b994:	6a 0c                	push   0xc
c002b996:	56                   	push   esi
c002b997:	53                   	push   ebx
c002b998:	e8 9f f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b99d:	83 c4 0c             	add    esp,0xc
c002b9a0:	6a 0c                	push   0xc
c002b9a2:	56                   	push   esi
c002b9a3:	53                   	push   ebx
c002b9a4:	e8 93 f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b9a9:	83 c4 0c             	add    esp,0xc
c002b9ac:	6a 0c                	push   0xc
c002b9ae:	56                   	push   esi
c002b9af:	53                   	push   ebx
c002b9b0:	e8 87 f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b9b5:	83 c4 10             	add    esp,0x10
c002b9b8:	84 c0                	test   al,al
c002b9ba:	0f 84 61 01 00 00    	je     c002bb21 <IDE::detect()+0x243>
c002b9c0:	31 ed                	xor    ebp,ebp
c002b9c2:	50                   	push   eax
c002b9c3:	6a 0c                	push   0xc
c002b9c5:	56                   	push   esi
c002b9c6:	53                   	push   ebx
c002b9c7:	e8 70 f8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002b9cc:	83 c4 10             	add    esp,0x10
c002b9cf:	a8 01                	test   al,0x1
c002b9d1:	0f 85 6b 01 00 00    	jne    c002bb42 <IDE::detect()+0x264>
c002b9d7:	a8 80                	test   al,0x80
c002b9d9:	75 04                	jne    c002b9df <IDE::detect()+0x101>
c002b9db:	a8 08                	test   al,0x8
c002b9dd:	75 23                	jne    c002ba02 <IDE::detect()+0x124>
c002b9df:	45                   	inc    ebp
c002b9e0:	81 fd 17 01 00 00    	cmp    ebp,0x117
c002b9e6:	7e da                	jle    c002b9c2 <IDE::detect()+0xe4>
c002b9e8:	83 ec 0c             	sub    esp,0xc
c002b9eb:	6a 32                	push   0x32
c002b9ed:	e8 d2 9d ff ff       	call   c00257c4 <milliTenthSleep(unsigned int)>
c002b9f2:	83 c4 10             	add    esp,0x10
c002b9f5:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c002b9fb:	75 c5                	jne    c002b9c2 <IDE::detect()+0xe4>
c002b9fd:	e9 40 01 00 00       	jmp    c002bb42 <IDE::detect()+0x264>
c002ba02:	31 c9                	xor    ecx,ecx
c002ba04:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002ba08:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c002ba0c:	83 ec 0c             	sub    esp,0xc
c002ba0f:	68 80 00 00 00       	push   0x80
c002ba14:	55                   	push   ebp
c002ba15:	6a 00                	push   0x0
c002ba17:	56                   	push   esi
c002ba18:	53                   	push   ebx
c002ba19:	e8 f0 fd ff ff       	call   c002b80e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002ba1e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002ba23:	89 f8                	mov    eax,edi
c002ba25:	c1 e0 06             	shl    eax,0x6
c002ba28:	01 d8                	add    eax,ebx
c002ba2a:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002ba31:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002ba38:	89 d1                	mov    ecx,edx
c002ba3a:	89 f2                	mov    edx,esi
c002ba3c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002ba42:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002ba46:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002ba4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002ba50:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002ba57:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002ba5f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002ba66:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002ba6e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002ba74:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002ba7b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002ba81:	8d 54 24 58          	lea    edx,[esp+0x58]
c002ba85:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002ba89:	83 c4 20             	add    esp,0x20
c002ba8c:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c002ba8f:	83 c5 02             	add    ebp,0x2
c002ba92:	83 c0 02             	add    eax,0x2
c002ba95:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002ba9b:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c002ba9e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002baa4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c002baa8:	75 e2                	jne    c002ba8c <IDE::detect()+0x1ae>
c002baaa:	89 f8                	mov    eax,edi
c002baac:	c1 e0 06             	shl    eax,0x6
c002baaf:	01 d8                	add    eax,ebx
c002bab1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002bab8:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002babf:	c1 ea 09             	shr    edx,0x9
c002bac2:	83 e2 01             	and    edx,0x1
c002bac5:	80 e1 01             	and    cl,0x1
c002bac8:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002bace:	75 22                	jne    c002baf2 <IDE::detect()+0x214>
c002bad0:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002bad7:	74 47                	je     c002bb20 <IDE::detect()+0x242>
c002bad9:	83 ec 0c             	sub    esp,0xc
c002badc:	68 7c 01 00 00       	push   0x17c
c002bae1:	e8 b6 ab fe ff       	call   c001669c <malloc>
c002bae6:	89 04 24             	mov    DWORD PTR [esp],eax
c002bae9:	89 c5                	mov    ebp,eax
c002baeb:	e8 2a 05 00 00       	call   c002c01a <ATA::ATA()>
c002baf0:	eb 17                	jmp    c002bb09 <IDE::detect()+0x22b>
c002baf2:	83 ec 0c             	sub    esp,0xc
c002baf5:	68 84 01 00 00       	push   0x184
c002bafa:	e8 9d ab fe ff       	call   c001669c <malloc>
c002baff:	89 04 24             	mov    DWORD PTR [esp],eax
c002bb02:	89 c5                	mov    ebp,eax
c002bb04:	e8 83 0e 00 00       	call   c002c98c <ATAPI::ATAPI()>
c002bb09:	5a                   	pop    edx
c002bb0a:	59                   	pop    ecx
c002bb0b:	55                   	push   ebp
c002bb0c:	53                   	push   ebx
c002bb0d:	e8 92 fb fe ff       	call   c001b6a4 <Device::addChild(Device*)>
c002bb12:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002bb15:	53                   	push   ebx
c002bb16:	57                   	push   edi
c002bb17:	6a 00                	push   0x0
c002bb19:	55                   	push   ebp
c002bb1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002bb1d:	83 c4 20             	add    esp,0x20
c002bb20:	47                   	inc    edi
c002bb21:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002bb26:	74 0d                	je     c002bb35 <IDE::detect()+0x257>
c002bb28:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002bb30:	e9 da fd ff ff       	jmp    c002b90f <IDE::detect()+0x31>
c002bb35:	4e                   	dec    esi
c002bb36:	74 62                	je     c002bb9a <IDE::detect()+0x2bc>
c002bb38:	be 01 00 00 00       	mov    esi,0x1
c002bb3d:	e9 c5 fd ff ff       	jmp    c002b907 <IDE::detect()+0x29>
c002bb42:	50                   	push   eax
c002bb43:	6a 04                	push   0x4
c002bb45:	56                   	push   esi
c002bb46:	53                   	push   ebx
c002bb47:	e8 f0 f6 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002bb4c:	83 c4 0c             	add    esp,0xc
c002bb4f:	6a 05                	push   0x5
c002bb51:	56                   	push   esi
c002bb52:	53                   	push   ebx
c002bb53:	89 c5                	mov    ebp,eax
c002bb55:	e8 e2 f6 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002bb5a:	89 e9                	mov    ecx,ebp
c002bb5c:	83 c4 10             	add    esp,0x10
c002bb5f:	0f b6 e9             	movzx  ebp,cl
c002bb62:	83 fd 14             	cmp    ebp,0x14
c002bb65:	74 2d                	je     c002bb94 <IDE::detect()+0x2b6>
c002bb67:	83 fd 69             	cmp    ebp,0x69
c002bb6a:	75 b5                	jne    c002bb21 <IDE::detect()+0x243>
c002bb6c:	3c 96                	cmp    al,0x96
c002bb6e:	75 b1                	jne    c002bb21 <IDE::detect()+0x243>
c002bb70:	68 a1 00 00 00       	push   0xa1
c002bb75:	6a 07                	push   0x7
c002bb77:	56                   	push   esi
c002bb78:	53                   	push   ebx
c002bb79:	e8 fe f5 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bb7e:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002bb85:	e8 3a 9c ff ff       	call   c00257c4 <milliTenthSleep(unsigned int)>
c002bb8a:	83 c4 10             	add    esp,0x10
c002bb8d:	b1 01                	mov    cl,0x1
c002bb8f:	e9 70 fe ff ff       	jmp    c002ba04 <IDE::detect()+0x126>
c002bb94:	3c eb                	cmp    al,0xeb
c002bb96:	75 cf                	jne    c002bb67 <IDE::detect()+0x289>
c002bb98:	eb d6                	jmp    c002bb70 <IDE::detect()+0x292>
c002bb9a:	81 c4 1c 02 00 00    	add    esp,0x21c
c002bba0:	5b                   	pop    ebx
c002bba1:	5e                   	pop    esi
c002bba2:	5f                   	pop    edi
c002bba3:	5d                   	pop    ebp
c002bba4:	c3                   	ret    
c002bba5:	90                   	nop

c002bba6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002bba6:	55                   	push   ebp
c002bba7:	57                   	push   edi
c002bba8:	56                   	push   esi
c002bba9:	53                   	push   ebx
c002bbaa:	83 ec 1c             	sub    esp,0x1c
c002bbad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002bbb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002bbb5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002bbb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002bbbd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002bbc1:	88 c3                	mov    bl,al
c002bbc3:	25 ff 00 00 00       	and    eax,0xff
c002bbc8:	0f 84 88 00 00 00    	je     c002bc56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bbce:	83 ec 0c             	sub    esp,0xc
c002bbd1:	89 c7                	mov    edi,eax
c002bbd3:	68 a7 3e 03 c0       	push   0xc0033ea7
c002bbd8:	e8 f5 d8 fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002bbdd:	83 c4 10             	add    esp,0x10
c002bbe0:	83 ff 01             	cmp    edi,0x1
c002bbe3:	74 6b                	je     c002bc50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002bbe5:	83 ff 02             	cmp    edi,0x2
c002bbe8:	75 58                	jne    c002bc42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002bbea:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002bbef:	50                   	push   eax
c002bbf0:	6a 01                	push   0x1
c002bbf2:	01 ff                	add    edi,edi
c002bbf4:	09 fe                	or     esi,edi
c002bbf6:	89 f0                	mov    eax,esi
c002bbf8:	0f b6 f0             	movzx  esi,al
c002bbfb:	c1 e6 06             	shl    esi,0x6
c002bbfe:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002bc06:	50                   	push   eax
c002bc07:	55                   	push   ebp
c002bc08:	e8 2f f6 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002bc0d:	83 c4 10             	add    esp,0x10
c002bc10:	a8 01                	test   al,0x1
c002bc12:	74 02                	je     c002bc16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002bc14:	b3 07                	mov    bl,0x7
c002bc16:	a8 02                	test   al,0x2
c002bc18:	74 02                	je     c002bc1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002bc1a:	b3 03                	mov    bl,0x3
c002bc1c:	a8 04                	test   al,0x4
c002bc1e:	74 02                	je     c002bc22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002bc20:	b3 14                	mov    bl,0x14
c002bc22:	a8 08                	test   al,0x8
c002bc24:	74 02                	je     c002bc28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002bc26:	b3 03                	mov    bl,0x3
c002bc28:	a8 10                	test   al,0x10
c002bc2a:	74 02                	je     c002bc2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002bc2c:	b3 15                	mov    bl,0x15
c002bc2e:	a8 20                	test   al,0x20
c002bc30:	74 02                	je     c002bc34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002bc32:	b3 03                	mov    bl,0x3
c002bc34:	a8 40                	test   al,0x40
c002bc36:	74 02                	je     c002bc3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002bc38:	b3 16                	mov    bl,0x16
c002bc3a:	a8 80                	test   al,0x80
c002bc3c:	74 18                	je     c002bc56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bc3e:	b3 0d                	mov    bl,0xd
c002bc40:	eb 14                	jmp    c002bc56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bc42:	83 ff 03             	cmp    edi,0x3
c002bc45:	74 0d                	je     c002bc54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002bc47:	83 ff 04             	cmp    edi,0x4
c002bc4a:	75 0a                	jne    c002bc56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bc4c:	b3 08                	mov    bl,0x8
c002bc4e:	eb 06                	jmp    c002bc56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bc50:	b3 13                	mov    bl,0x13
c002bc52:	eb 02                	jmp    c002bc56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bc54:	b3 17                	mov    bl,0x17
c002bc56:	83 c4 1c             	add    esp,0x1c
c002bc59:	88 d8                	mov    al,bl
c002bc5b:	5b                   	pop    ebx
c002bc5c:	5e                   	pop    esi
c002bc5d:	5f                   	pop    edi
c002bc5e:	5d                   	pop    ebp
c002bc5f:	c3                   	ret    

c002bc60 <IDE::polling(unsigned char, unsigned int)>:
c002bc60:	57                   	push   edi
c002bc61:	56                   	push   esi
c002bc62:	53                   	push   ebx
c002bc63:	bb 04 00 00 00       	mov    ebx,0x4
c002bc68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002bc6c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002bc71:	52                   	push   edx
c002bc72:	6a 0c                	push   0xc
c002bc74:	56                   	push   esi
c002bc75:	57                   	push   edi
c002bc76:	e8 c1 f5 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002bc7b:	83 c4 10             	add    esp,0x10
c002bc7e:	4b                   	dec    ebx
c002bc7f:	75 f0                	jne    c002bc71 <IDE::polling(unsigned char, unsigned int)+0x11>
c002bc81:	bb a0 86 01 00       	mov    ebx,0x186a0
c002bc86:	50                   	push   eax
c002bc87:	6a 0c                	push   0xc
c002bc89:	56                   	push   esi
c002bc8a:	57                   	push   edi
c002bc8b:	e8 ac f5 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002bc90:	83 c4 10             	add    esp,0x10
c002bc93:	a8 01                	test   al,0x1
c002bc95:	75 17                	jne    c002bcae <IDE::polling(unsigned char, unsigned int)+0x4e>
c002bc97:	a8 20                	test   al,0x20
c002bc99:	75 0f                	jne    c002bcaa <IDE::polling(unsigned char, unsigned int)+0x4a>
c002bc9b:	4b                   	dec    ebx
c002bc9c:	74 10                	je     c002bcae <IDE::polling(unsigned char, unsigned int)+0x4e>
c002bc9e:	a8 80                	test   al,0x80
c002bca0:	75 e4                	jne    c002bc86 <IDE::polling(unsigned char, unsigned int)+0x26>
c002bca2:	a8 08                	test   al,0x8
c002bca4:	74 e0                	je     c002bc86 <IDE::polling(unsigned char, unsigned int)+0x26>
c002bca6:	31 c0                	xor    eax,eax
c002bca8:	eb 06                	jmp    c002bcb0 <IDE::polling(unsigned char, unsigned int)+0x50>
c002bcaa:	b0 01                	mov    al,0x1
c002bcac:	eb 02                	jmp    c002bcb0 <IDE::polling(unsigned char, unsigned int)+0x50>
c002bcae:	b0 02                	mov    al,0x2
c002bcb0:	5b                   	pop    ebx
c002bcb1:	5e                   	pop    esi
c002bcb2:	5f                   	pop    edi
c002bcb3:	c3                   	ret    

c002bcb4 <SATABus::close(int, int, void*)>:
c002bcb4:	31 c0                	xor    eax,eax
c002bcb6:	c3                   	ret    
c002bcb7:	90                   	nop

c002bcb8 <SATABus::detect()>:
c002bcb8:	c3                   	ret    
c002bcb9:	90                   	nop

c002bcba <SATABus::SATABus()>:
c002bcba:	83 ec 0c             	sub    esp,0xc
c002bcbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bcc1:	83 ec 08             	sub    esp,0x8
c002bcc4:	68 e0 3e 03 c0       	push   0xc0033ee0
c002bcc9:	50                   	push   eax
c002bcca:	e8 2d fd fe ff       	call   c001b9fc <HardDiskController::HardDiskController(char const*)>
c002bccf:	83 c4 10             	add    esp,0x10
c002bcd2:	ba 0c 3f 03 c0       	mov    edx,0xc0033f0c
c002bcd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bcdb:	89 10                	mov    DWORD PTR [eax],edx
c002bcdd:	83 ec 0c             	sub    esp,0xc
c002bce0:	6a 50                	push   0x50
c002bce2:	e8 93 ad fe ff       	call   c0016a7a <Phys::allocateContiguousPages(int)>
c002bce7:	83 c4 10             	add    esp,0x10
c002bcea:	89 c2                	mov    edx,eax
c002bcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bcf0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002bcf6:	83 ec 0c             	sub    esp,0xc
c002bcf9:	6a 50                	push   0x50
c002bcfb:	e8 bd c4 fe ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c002bd00:	83 c4 10             	add    esp,0x10
c002bd03:	89 c2                	mov    edx,eax
c002bd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bd09:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002bd0f:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002bd14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002bd18:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002bd1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002bd22:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002bd28:	83 ec 0c             	sub    esp,0xc
c002bd2b:	6a 03                	push   0x3
c002bd2d:	6a 50                	push   0x50
c002bd2f:	51                   	push   ecx
c002bd30:	52                   	push   edx
c002bd31:	50                   	push   eax
c002bd32:	e8 99 cd fe ff       	call   c0018ad0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002bd37:	83 c4 20             	add    esp,0x20
c002bd3a:	90                   	nop
c002bd3b:	83 c4 0c             	add    esp,0xc
c002bd3e:	c3                   	ret    
c002bd3f:	90                   	nop

c002bd40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002bd40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bd44:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002bd47:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002bd4a:	09 c2                	or     edx,eax
c002bd4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002bd50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002bd56:	8b 08                	mov    ecx,DWORD PTR [eax]
c002bd58:	31 c0                	xor    eax,eax
c002bd5a:	c1 e9 08             	shr    ecx,0x8
c002bd5d:	83 e1 0f             	and    ecx,0xf
c002bd60:	39 c8                	cmp    eax,ecx
c002bd62:	74 0a                	je     c002bd6e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002bd64:	f6 c2 01             	test   dl,0x1
c002bd67:	74 08                	je     c002bd71 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002bd69:	d1 ea                	shr    edx,1
c002bd6b:	40                   	inc    eax
c002bd6c:	eb f2                	jmp    c002bd60 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002bd6e:	83 c8 ff             	or     eax,0xffffffff
c002bd71:	c3                   	ret    

c002bd72 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002bd72:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bd76:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002bd79:	89 c2                	mov    edx,eax
c002bd7b:	c1 ea 08             	shr    edx,0x8
c002bd7e:	83 e2 0f             	and    edx,0xf
c002bd81:	4a                   	dec    edx
c002bd82:	75 32                	jne    c002bdb6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bd84:	83 e0 0f             	and    eax,0xf
c002bd87:	83 f8 03             	cmp    eax,0x3
c002bd8a:	75 2a                	jne    c002bdb6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bd8c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002bd8f:	b8 02 00 00 00       	mov    eax,0x2
c002bd94:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002bd9a:	74 1c                	je     c002bdb8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bd9c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002bda2:	b8 04 00 00 00       	mov    eax,0x4
c002bda7:	74 0f                	je     c002bdb8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bda9:	31 c0                	xor    eax,eax
c002bdab:	83 fa 03             	cmp    edx,0x3
c002bdae:	0f 94 c0             	sete   al
c002bdb1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002bdb5:	c3                   	ret    
c002bdb6:	31 c0                	xor    eax,eax
c002bdb8:	c3                   	ret    
c002bdb9:	90                   	nop

c002bdba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002bdba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bdbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bdc1:	0f ba e2 0f          	bt     edx,0xf
c002bdc5:	72 f7                	jb     c002bdbe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002bdc7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bdca:	83 ca 10             	or     edx,0x10
c002bdcd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bdd0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bdd3:	83 ca 01             	or     edx,0x1
c002bdd6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bdd9:	c3                   	ret    

c002bdda <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002bdda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bdde:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bde1:	83 e2 fe             	and    edx,0xfffffffe
c002bde4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bde7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bdea:	83 e2 ef             	and    edx,0xffffffef
c002bded:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bdf0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bdf3:	0f ba e2 0e          	bt     edx,0xe
c002bdf7:	72 f7                	jb     c002bdf0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bdf9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bdfc:	0f ba e2 0f          	bt     edx,0xf
c002be00:	72 ee                	jb     c002bdf0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002be02:	c3                   	ret    
c002be03:	90                   	nop

c002be04 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002be04:	55                   	push   ebp
c002be05:	57                   	push   edi
c002be06:	56                   	push   esi
c002be07:	53                   	push   ebx
c002be08:	83 ec 1c             	sub    esp,0x1c
c002be0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002be0f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002be13:	53                   	push   ebx
c002be14:	57                   	push   edi
c002be15:	e8 c0 ff ff ff       	call   c002bdda <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002be1a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002be1e:	83 ec 0c             	sub    esp,0xc
c002be21:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002be27:	c1 e5 0a             	shl    ebp,0xa
c002be2a:	01 e8                	add    eax,ebp
c002be2c:	89 03                	mov    DWORD PTR [ebx],eax
c002be2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c002be30:	68 00 04 00 00       	push   0x400
c002be35:	6a 00                	push   0x0
c002be37:	50                   	push   eax
c002be38:	e8 b3 46 fd ff       	call   c00004f0 <memset>
c002be3d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002be43:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c002be47:	83 c4 1c             	add    esp,0x1c
c002be4a:	01 e8                	add    eax,ebp
c002be4c:	89 03                	mov    DWORD PTR [ebx],eax
c002be4e:	c1 e6 08             	shl    esi,0x8
c002be51:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002be58:	81 c6 00 80 00 00    	add    esi,0x8000
c002be5e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002be64:	01 f0                	add    eax,esi
c002be66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002be69:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002be6c:	68 00 01 00 00       	push   0x100
c002be71:	6a 00                	push   0x0
c002be73:	50                   	push   eax
c002be74:	e8 77 46 fd ff       	call   c00004f0 <memset>
c002be79:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002be7f:	31 d2                	xor    edx,edx
c002be81:	01 f0                	add    eax,esi
c002be83:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002be86:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002be8d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002be93:	01 ee                	add    esi,ebp
c002be95:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002be99:	83 c4 10             	add    esp,0x10
c002be9c:	c1 e5 0d             	shl    ebp,0xd
c002be9f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c002bea5:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c002beab:	83 c6 20             	add    esi,0x20
c002beae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002beb2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002beb8:	01 e8                	add    eax,ebp
c002beba:	01 d0                	add    eax,edx
c002bebc:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002bebf:	52                   	push   edx
c002bec0:	68 00 01 00 00       	push   0x100
c002bec5:	6a 00                	push   0x0
c002bec7:	50                   	push   eax
c002bec8:	e8 23 46 fd ff       	call   c00004f0 <memset>
c002becd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002bed3:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c002beda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bede:	83 c4 10             	add    esp,0x10
c002bee1:	01 e8                	add    eax,ebp
c002bee3:	01 d0                	add    eax,edx
c002bee5:	81 c2 00 01 00 00    	add    edx,0x100
c002beeb:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002beee:	81 fa 00 20 00 00    	cmp    edx,0x2000
c002bef4:	75 af                	jne    c002bea5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c002bef6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002befd:	50                   	push   eax
c002befe:	50                   	push   eax
c002beff:	53                   	push   ebx
c002bf00:	57                   	push   edi
c002bf01:	e8 b4 fe ff ff       	call   c002bdba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002bf06:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bf0d:	83 c4 2c             	add    esp,0x2c
c002bf10:	5b                   	pop    ebx
c002bf11:	5e                   	pop    esi
c002bf12:	5f                   	pop    edi
c002bf13:	5d                   	pop    ebp
c002bf14:	c3                   	ret    
c002bf15:	90                   	nop

c002bf16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002bf16:	55                   	push   ebp
c002bf17:	57                   	push   edi
c002bf18:	56                   	push   esi
c002bf19:	53                   	push   ebx
c002bf1a:	31 db                	xor    ebx,ebx
c002bf1c:	83 ec 0c             	sub    esp,0xc
c002bf1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bf23:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002bf27:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002bf2a:	f7 c7 01 00 00 00    	test   edi,0x1
c002bf30:	74 7a                	je     c002bfac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bf32:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002bf36:	89 d8                	mov    eax,ebx
c002bf38:	c1 e0 07             	shl    eax,0x7
c002bf3b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002bf42:	55                   	push   ebp
c002bf43:	56                   	push   esi
c002bf44:	e8 29 fe ff ff       	call   c002bd72 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002bf49:	5a                   	pop    edx
c002bf4a:	59                   	pop    ecx
c002bf4b:	83 f8 01             	cmp    eax,0x1
c002bf4e:	75 21                	jne    c002bf71 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002bf50:	50                   	push   eax
c002bf51:	53                   	push   ebx
c002bf52:	55                   	push   ebp
c002bf53:	56                   	push   esi
c002bf54:	e8 ab fe ff ff       	call   c002be04 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bf59:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002bf60:	e8 37 a7 fe ff       	call   c001669c <malloc>
c002bf65:	89 04 24             	mov    DWORD PTR [esp],eax
c002bf68:	89 c5                	mov    ebp,eax
c002bf6a:	e8 e3 10 00 00       	call   c002d052 <SATA::SATA()>
c002bf6f:	eb 24                	jmp    c002bf95 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002bf71:	83 f8 04             	cmp    eax,0x4
c002bf74:	75 36                	jne    c002bfac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bf76:	51                   	push   ecx
c002bf77:	53                   	push   ebx
c002bf78:	55                   	push   ebp
c002bf79:	56                   	push   esi
c002bf7a:	e8 85 fe ff ff       	call   c002be04 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bf7f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002bf86:	e8 11 a7 fe ff       	call   c001669c <malloc>
c002bf8b:	89 04 24             	mov    DWORD PTR [esp],eax
c002bf8e:	89 c5                	mov    ebp,eax
c002bf90:	e8 4b 18 00 00       	call   c002d7e0 <SATAPI::SATAPI()>
c002bf95:	58                   	pop    eax
c002bf96:	5a                   	pop    edx
c002bf97:	55                   	push   ebp
c002bf98:	56                   	push   esi
c002bf99:	e8 06 f7 fe ff       	call   c001b6a4 <Device::addChild(Device*)>
c002bf9e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002bfa1:	56                   	push   esi
c002bfa2:	6a 00                	push   0x0
c002bfa4:	53                   	push   ebx
c002bfa5:	55                   	push   ebp
c002bfa6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002bfa9:	83 c4 20             	add    esp,0x20
c002bfac:	d1 ef                	shr    edi,1
c002bfae:	43                   	inc    ebx
c002bfaf:	83 fb 20             	cmp    ebx,0x20
c002bfb2:	0f 85 72 ff ff ff    	jne    c002bf2a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002bfb8:	83 c4 0c             	add    esp,0xc
c002bfbb:	5b                   	pop    ebx
c002bfbc:	5e                   	pop    esi
c002bfbd:	5f                   	pop    edi
c002bfbe:	5d                   	pop    ebp
c002bfbf:	c3                   	ret    

c002bfc0 <SATABus::open(int, int, void*)>:
c002bfc0:	53                   	push   ebx
c002bfc1:	83 ec 08             	sub    esp,0x8
c002bfc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bfc8:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bfce:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bfd4:	e8 7f 93 ff ff       	call   c0025358 <KeDisablePreemption()>
c002bfd9:	52                   	push   edx
c002bfda:	52                   	push   edx
c002bfdb:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002bfe1:	53                   	push   ebx
c002bfe2:	e8 2f ff ff ff       	call   c002bf16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bfe7:	e8 94 93 ff ff       	call   c0025380 <KeRestorePreemption()>
c002bfec:	83 c4 18             	add    esp,0x18
c002bfef:	31 c0                	xor    eax,eax
c002bff1:	5b                   	pop    ebx
c002bff2:	c3                   	ret    
c002bff3:	90                   	nop

c002bff4 <ATA::close(int, int, void*)>:
c002bff4:	83 ec 0c             	sub    esp,0xc
c002bff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bffb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c001:	85 c0                	test   eax,eax
c002c003:	74 0c                	je     c002c011 <ATA::close(int, int, void*)+0x1d>
c002c005:	8b 10                	mov    edx,DWORD PTR [eax]
c002c007:	83 ec 0c             	sub    esp,0xc
c002c00a:	50                   	push   eax
c002c00b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c00e:	83 c4 10             	add    esp,0x10
c002c011:	31 c0                	xor    eax,eax
c002c013:	83 c4 0c             	add    esp,0xc
c002c016:	c3                   	ret    
c002c017:	90                   	nop

c002c018 <ATA::powerSaving(PowerSavingLevel)>:
c002c018:	c3                   	ret    
c002c019:	90                   	nop

c002c01a <ATA::ATA()>:
c002c01a:	83 ec 0c             	sub    esp,0xc
c002c01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c021:	83 ec 04             	sub    esp,0x4
c002c024:	68 00 02 00 00       	push   0x200
c002c029:	68 e5 3f 03 c0       	push   0xc0033fe5
c002c02e:	50                   	push   eax
c002c02f:	e8 52 fa fe ff       	call   c001ba86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c034:	83 c4 10             	add    esp,0x10
c002c037:	ba 4c 3f 03 c0       	mov    edx,0xc0033f4c
c002c03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c040:	89 10                	mov    DWORD PTR [eax],edx
c002c042:	90                   	nop
c002c043:	83 c4 0c             	add    esp,0xc
c002c046:	c3                   	ret    
c002c047:	90                   	nop

c002c048 <ATA::flush(bool)>:
c002c048:	53                   	push   ebx
c002c049:	83 ec 08             	sub    esp,0x8
c002c04c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002c051:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c055:	83 f8 01             	cmp    eax,0x1
c002c058:	19 c0                	sbb    eax,eax
c002c05a:	83 e0 fd             	and    eax,0xfffffffd
c002c05d:	05 ea 00 00 00       	add    eax,0xea
c002c062:	50                   	push   eax
c002c063:	6a 07                	push   0x7
c002c065:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c06c:	50                   	push   eax
c002c06d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c073:	e8 04 f1 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c078:	83 c4 0c             	add    esp,0xc
c002c07b:	6a 00                	push   0x0
c002c07d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c084:	50                   	push   eax
c002c085:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c08b:	e8 d0 fb ff ff       	call   c002bc60 <IDE::polling(unsigned char, unsigned int)>
c002c090:	83 c4 18             	add    esp,0x18
c002c093:	5b                   	pop    ebx
c002c094:	c3                   	ret    
c002c095:	90                   	nop

c002c096 <ATA::readyForCommand()>:
c002c096:	56                   	push   esi
c002c097:	53                   	push   ebx
c002c098:	53                   	push   ebx
c002c099:	31 db                	xor    ebx,ebx
c002c09b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c09f:	51                   	push   ecx
c002c0a0:	6a 0c                	push   0xc
c002c0a2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c0a9:	50                   	push   eax
c002c0aa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c0b0:	e8 87 f1 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002c0b5:	83 c4 10             	add    esp,0x10
c002c0b8:	a8 88                	test   al,0x88
c002c0ba:	74 1f                	je     c002c0db <ATA::readyForCommand()+0x45>
c002c0bc:	43                   	inc    ebx
c002c0bd:	83 fb 63             	cmp    ebx,0x63
c002c0c0:	7e dd                	jle    c002c09f <ATA::readyForCommand()+0x9>
c002c0c2:	83 ec 0c             	sub    esp,0xc
c002c0c5:	6a 0a                	push   0xa
c002c0c7:	e8 f8 96 ff ff       	call   c00257c4 <milliTenthSleep(unsigned int)>
c002c0cc:	83 c4 10             	add    esp,0x10
c002c0cf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002c0d5:	75 c8                	jne    c002c09f <ATA::readyForCommand()+0x9>
c002c0d7:	31 c0                	xor    eax,eax
c002c0d9:	eb 02                	jmp    c002c0dd <ATA::readyForCommand()+0x47>
c002c0db:	b0 01                	mov    al,0x1
c002c0dd:	5a                   	pop    edx
c002c0de:	5b                   	pop    ebx
c002c0df:	5e                   	pop    esi
c002c0e0:	c3                   	ret    
c002c0e1:	90                   	nop

c002c0e2 <ATA::access(unsigned long long, int, void*, bool)>:
c002c0e2:	55                   	push   ebp
c002c0e3:	57                   	push   edi
c002c0e4:	56                   	push   esi
c002c0e5:	53                   	push   ebx
c002c0e6:	83 ec 2c             	sub    esp,0x2c
c002c0e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002c0ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002c0f1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c0f5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002c0f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002c0fd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002c101:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002c105:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002c10b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c10f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c115:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002c119:	c1 e0 06             	shl    eax,0x6
c002c11c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002c124:	74 5b                	je     c002c181 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c002c126:	89 fa                	mov    edx,edi
c002c128:	89 f0                	mov    eax,esi
c002c12a:	c1 ea 1c             	shr    edx,0x1c
c002c12d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c002c131:	89 d1                	mov    ecx,edx
c002c133:	09 c1                	or     ecx,eax
c002c135:	74 25                	je     c002c15c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002c137:	31 ed                	xor    ebp,ebp
c002c139:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002c140:	89 fa                	mov    edx,edi
c002c142:	89 f0                	mov    eax,esi
c002c144:	0f ad d0             	shrd   eax,edx,cl
c002c147:	d3 ea                	shr    edx,cl
c002c149:	f6 c1 20             	test   cl,0x20
c002c14c:	74 02                	je     c002c150 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002c14e:	89 d0                	mov    eax,edx
c002c150:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002c154:	45                   	inc    ebp
c002c155:	83 fd 06             	cmp    ebp,0x6
c002c158:	75 df                	jne    c002c139 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002c15a:	eb 71                	jmp    c002c1cd <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c002c15c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002c161:	89 f0                	mov    eax,esi
c002c163:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002c16a:	0f ac f8 10          	shrd   eax,edi,0x10
c002c16e:	bf 01 00 00 00       	mov    edi,0x1
c002c173:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002c177:	c1 ee 18             	shr    esi,0x18
c002c17a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002c17f:	eb 53                	jmp    c002c1d4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002c181:	6a 00                	push   0x0
c002c183:	6a 3f                	push   0x3f
c002c185:	57                   	push   edi
c002c186:	56                   	push   esi
c002c187:	e8 f4 2a 00 00       	call   c002ec80 <__umoddi3>
c002c18c:	83 c4 10             	add    esp,0x10
c002c18f:	40                   	inc    eax
c002c190:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002c194:	6a 00                	push   0x0
c002c196:	68 f0 03 00 00       	push   0x3f0
c002c19b:	57                   	push   edi
c002c19c:	56                   	push   esi
c002c19d:	e8 de 29 00 00       	call   c002eb80 <__udivdi3>
c002c1a2:	83 c4 10             	add    esp,0x10
c002c1a5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002c1aa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002c1b1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002c1b6:	6a 00                	push   0x0
c002c1b8:	6a 3f                	push   0x3f
c002c1ba:	57                   	push   edi
c002c1bb:	31 ff                	xor    edi,edi
c002c1bd:	56                   	push   esi
c002c1be:	e8 bd 29 00 00       	call   c002eb80 <__udivdi3>
c002c1c3:	83 c4 10             	add    esp,0x10
c002c1c6:	83 e0 0f             	and    eax,0xf
c002c1c9:	89 c6                	mov    esi,eax
c002c1cb:	eb 07                	jmp    c002c1d4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002c1cd:	31 f6                	xor    esi,esi
c002c1cf:	bf 02 00 00 00       	mov    edi,0x2
c002c1d4:	50                   	push   eax
c002c1d5:	6a 00                	push   0x0
c002c1d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c1de:	50                   	push   eax
c002c1df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002c1e3:	e8 a2 f1 ff ff       	call   c002b38a <IDE::enableIRQs(unsigned char, bool)>
c002c1e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c1eb:	e8 a6 fe ff ff       	call   c002c096 <ATA::readyForCommand()>
c002c1f0:	83 c4 10             	add    esp,0x10
c002c1f3:	84 c0                	test   al,al
c002c1f5:	75 0a                	jne    c002c201 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c002c1f7:	be 01 00 00 00       	mov    esi,0x1
c002c1fc:	e9 9b 02 00 00       	jmp    c002c49c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002c201:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002c207:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c20d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002c214:	c1 e0 04             	shl    eax,0x4
c002c217:	09 c6                	or     esi,eax
c002c219:	f7 c7 03 00 00 00    	test   edi,0x3
c002c21f:	75 05                	jne    c002c226 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c002c221:	83 ce a0             	or     esi,0xffffffa0
c002c224:	eb 03                	jmp    c002c229 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002c226:	83 ce e0             	or     esi,0xffffffe0
c002c229:	89 f0                	mov    eax,esi
c002c22b:	0f b6 f0             	movzx  esi,al
c002c22e:	56                   	push   esi
c002c22f:	6a 06                	push   0x6
c002c231:	51                   	push   ecx
c002c232:	52                   	push   edx
c002c233:	e8 44 ef ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c238:	83 c4 10             	add    esp,0x10
c002c23b:	6a 00                	push   0x0
c002c23d:	6a 01                	push   0x1
c002c23f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c246:	50                   	push   eax
c002c247:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c24d:	e8 2a ef ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c252:	89 f8                	mov    eax,edi
c002c254:	83 c4 10             	add    esp,0x10
c002c257:	0f b6 f0             	movzx  esi,al
c002c25a:	83 fe 02             	cmp    esi,0x2
c002c25d:	75 6e                	jne    c002c2cd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002c25f:	6a 00                	push   0x0
c002c261:	6a 08                	push   0x8
c002c263:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c26a:	50                   	push   eax
c002c26b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c271:	e8 06 ef ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c276:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002c27b:	50                   	push   eax
c002c27c:	6a 09                	push   0x9
c002c27e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c285:	50                   	push   eax
c002c286:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c28c:	e8 eb ee ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c291:	83 c4 20             	add    esp,0x20
c002c294:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002c299:	50                   	push   eax
c002c29a:	6a 0a                	push   0xa
c002c29c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c2a3:	50                   	push   eax
c002c2a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c2aa:	e8 cd ee ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c2af:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002c2b4:	50                   	push   eax
c002c2b5:	6a 0b                	push   0xb
c002c2b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c2be:	50                   	push   eax
c002c2bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c2c5:	e8 b2 ee ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c2ca:	83 c4 20             	add    esp,0x20
c002c2cd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002c2d2:	50                   	push   eax
c002c2d3:	6a 02                	push   0x2
c002c2d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c2dc:	50                   	push   eax
c002c2dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c2e3:	e8 94 ee ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c2e8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002c2ed:	50                   	push   eax
c002c2ee:	6a 03                	push   0x3
c002c2f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c2f7:	50                   	push   eax
c002c2f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c2fe:	e8 79 ee ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c303:	83 c4 20             	add    esp,0x20
c002c306:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002c30b:	50                   	push   eax
c002c30c:	6a 04                	push   0x4
c002c30e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c315:	50                   	push   eax
c002c316:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c31c:	e8 5b ee ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c321:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002c326:	50                   	push   eax
c002c327:	6a 05                	push   0x5
c002c329:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c330:	50                   	push   eax
c002c331:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c337:	e8 40 ee ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c33c:	83 c4 20             	add    esp,0x20
c002c33f:	83 fe 02             	cmp    esi,0x2
c002c342:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c002c347:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c002c34c:	85 c9                	test   ecx,ecx
c002c34e:	74 07                	je     c002c357 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002c350:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c355:	75 47                	jne    c002c39e <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c002c357:	89 f8                	mov    eax,edi
c002c359:	0f b6 f8             	movzx  edi,al
c002c35c:	31 c0                	xor    eax,eax
c002c35e:	83 ff 02             	cmp    edi,0x2
c002c361:	0f 95 c0             	setne  al
c002c364:	89 c6                	mov    esi,eax
c002c366:	74 0c                	je     c002c374 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c002c368:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c36d:	b8 30 00 00 00       	mov    eax,0x30
c002c372:	75 2f                	jne    c002c3a3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002c374:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c378:	83 f2 01             	xor    edx,0x1
c002c37b:	85 c9                	test   ecx,ecx
c002c37d:	74 09                	je     c002c388 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c002c37f:	84 d2                	test   dl,dl
c002c381:	b8 24 00 00 00       	mov    eax,0x24
c002c386:	75 1b                	jne    c002c3a3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002c388:	85 f6                	test   esi,esi
c002c38a:	0f 84 67 fe ff ff    	je     c002c1f7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002c390:	84 d2                	test   dl,dl
c002c392:	b8 20 00 00 00       	mov    eax,0x20
c002c397:	75 0a                	jne    c002c3a3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002c399:	e9 59 fe ff ff       	jmp    c002c1f7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002c39e:	b8 34 00 00 00       	mov    eax,0x34
c002c3a3:	50                   	push   eax
c002c3a4:	6a 07                	push   0x7
c002c3a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c3ad:	50                   	push   eax
c002c3ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c3b4:	e8 c3 ed ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c3b9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002c3bd:	83 c4 10             	add    esp,0x10
c002c3c0:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002c3c5:	85 f6                	test   esi,esi
c002c3c7:	0f 84 b5 00 00 00    	je     c002c482 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c002c3cd:	50                   	push   eax
c002c3ce:	6a 01                	push   0x1
c002c3d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c3d7:	50                   	push   eax
c002c3d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c3de:	e8 7d f8 ff ff       	call   c002bc60 <IDE::polling(unsigned char, unsigned int)>
c002c3e3:	83 c4 10             	add    esp,0x10
c002c3e6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002c3ec:	0f b6 c0             	movzx  eax,al
c002c3ef:	85 c0                	test   eax,eax
c002c3f1:	74 1f                	je     c002c412 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c002c3f3:	50                   	push   eax
c002c3f4:	89 c6                	mov    esi,eax
c002c3f6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002c3fd:	0f b6 d2             	movzx  edx,dl
c002c400:	50                   	push   eax
c002c401:	52                   	push   edx
c002c402:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c408:	e8 99 f7 ff ff       	call   c002bba6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c40d:	e9 87 00 00 00       	jmp    c002c499 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c002c412:	85 ed                	test   ebp,ebp
c002c414:	74 3b                	je     c002c451 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c002c416:	31 ff                	xor    edi,edi
c002c418:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002c41c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c002c420:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c002c425:	50                   	push   eax
c002c426:	50                   	push   eax
c002c427:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c42e:	50                   	push   eax
c002c42f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c435:	e8 30 ed ff ff       	call   c002b16a <IDE::getBase(unsigned char)>
c002c43a:	89 c2                	mov    edx,eax
c002c43c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002c441:	66 ef                	out    dx,ax
c002c443:	47                   	inc    edi
c002c444:	83 c4 10             	add    esp,0x10
c002c447:	81 ff 00 01 00 00    	cmp    edi,0x100
c002c44d:	75 c9                	jne    c002c418 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002c44f:	eb 23                	jmp    c002c474 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c002c451:	51                   	push   ecx
c002c452:	0f b6 d2             	movzx  edx,dl
c002c455:	51                   	push   ecx
c002c456:	52                   	push   edx
c002c457:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c45d:	e8 08 ed ff ff       	call   c002b16a <IDE::getBase(unsigned char)>
c002c462:	b9 00 01 00 00       	mov    ecx,0x100
c002c467:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002c46b:	89 c2                	mov    edx,eax
c002c46d:	fc                   	cld    
c002c46e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002c471:	83 c4 10             	add    esp,0x10
c002c474:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002c47c:	4e                   	dec    esi
c002c47d:	e9 43 ff ff ff       	jmp    c002c3c5 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002c482:	31 f6                	xor    esi,esi
c002c484:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c489:	74 11                	je     c002c49c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002c48b:	50                   	push   eax
c002c48c:	50                   	push   eax
c002c48d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002c492:	50                   	push   eax
c002c493:	53                   	push   ebx
c002c494:	e8 af fb ff ff       	call   c002c048 <ATA::flush(bool)>
c002c499:	83 c4 10             	add    esp,0x10
c002c49c:	83 c4 2c             	add    esp,0x2c
c002c49f:	89 f0                	mov    eax,esi
c002c4a1:	5b                   	pop    ebx
c002c4a2:	5e                   	pop    esi
c002c4a3:	5f                   	pop    edi
c002c4a4:	5d                   	pop    ebp
c002c4a5:	c3                   	ret    

c002c4a6 <ATA::detectCHS()>:
c002c4a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c4aa:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c4b0:	c1 e0 06             	shl    eax,0x6
c002c4b3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c4b9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c4c3:	c7 44 24 04 30 3f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033f30
c002c4cb:	e9 c6 40 ff ff       	jmp    c0020596 <KePanic(char const*)>

c002c4d0 <ATA::open(int, int, void*)>:
c002c4d0:	53                   	push   ebx
c002c4d1:	83 ec 08             	sub    esp,0x8
c002c4d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c4d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c4dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c4e0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c4e6:	c1 e0 06             	shl    eax,0x6
c002c4e9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c4ef:	01 d0                	add    eax,edx
c002c4f1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c4f8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c4fe:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c505:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c50f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c516:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c51c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c523:	75 0c                	jne    c002c531 <ATA::open(int, int, void*)+0x61>
c002c525:	83 ec 0c             	sub    esp,0xc
c002c528:	53                   	push   ebx
c002c529:	e8 78 ff ff ff       	call   c002c4a6 <ATA::detectCHS()>
c002c52e:	83 c4 10             	add    esp,0x10
c002c531:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c537:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c53d:	c1 e0 06             	shl    eax,0x6
c002c540:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c547:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c551:	d1 e8                	shr    eax,1
c002c553:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c559:	6a 04                	push   0x4
c002c55b:	6a 0c                	push   0xc
c002c55d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c564:	50                   	push   eax
c002c565:	52                   	push   edx
c002c566:	e8 11 ec ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c56b:	90                   	nop
c002c56c:	90                   	nop
c002c56d:	6a 00                	push   0x0
c002c56f:	6a 0c                	push   0xc
c002c571:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c578:	50                   	push   eax
c002c579:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c57f:	e8 f8 eb ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c584:	83 c4 14             	add    esp,0x14
c002c587:	53                   	push   ebx
c002c588:	e8 61 f5 fe ff       	call   c001baee <PhysicalDisk::startCache()>
c002c58d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c590:	e8 9d 07 ff ff       	call   c001cd32 <createPartitionsForDisk(PhysicalDisk*)>
c002c595:	83 c4 18             	add    esp,0x18
c002c598:	31 c0                	xor    eax,eax
c002c59a:	5b                   	pop    ebx
c002c59b:	c3                   	ret    

c002c59c <combineCharAndColour(char, unsigned char)>:
c002c59c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c5a1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c5a7:	c1 e0 08             	shl    eax,0x8
c002c5aa:	09 d0                	or     eax,edx
c002c5ac:	c3                   	ret    

c002c5ad <combineColours(unsigned char, unsigned char)>:
c002c5ad:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c5b2:	c1 e0 04             	shl    eax,0x4
c002c5b5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c5b9:	c3                   	ret    

c002c5ba <ATA::read(unsigned long long, int, void*)>:
c002c5ba:	55                   	push   ebp
c002c5bb:	57                   	push   edi
c002c5bc:	56                   	push   esi
c002c5bd:	be 04 00 00 00       	mov    esi,0x4
c002c5c2:	53                   	push   ebx
c002c5c3:	83 ec 0c             	sub    esp,0xc
c002c5c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c5ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c5ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c5d2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c5d6:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c5d9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c5df:	0f 87 a1 01 00 00    	ja     c002c786 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c5e5:	85 c9                	test   ecx,ecx
c002c5e7:	be 06 00 00 00       	mov    esi,0x6
c002c5ec:	0f 84 94 01 00 00    	je     c002c786 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c5f2:	55                   	push   ebp
c002c5f3:	55                   	push   ebp
c002c5f4:	6a 00                	push   0x0
c002c5f6:	51                   	push   ecx
c002c5f7:	53                   	push   ebx
c002c5f8:	52                   	push   edx
c002c5f9:	50                   	push   eax
c002c5fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c5fe:	e8 df fa ff ff       	call   c002c0e2 <ATA::access(unsigned long long, int, void*, bool)>
c002c603:	83 c4 20             	add    esp,0x20
c002c606:	85 c0                	test   eax,eax
c002c608:	89 c6                	mov    esi,eax
c002c60a:	0f 85 71 01 00 00    	jne    c002c781 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c610:	50                   	push   eax
c002c611:	bd 10 27 00 00       	mov    ebp,0x2710
c002c616:	50                   	push   eax
c002c617:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c61d:	6a 0f                	push   0xf
c002c61f:	6a 00                	push   0x0
c002c621:	89 da                	mov    edx,ebx
c002c623:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c629:	e8 7f ff ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002c62e:	59                   	pop    ecx
c002c62f:	b9 0a 00 00 00       	mov    ecx,0xa
c002c634:	5b                   	pop    ebx
c002c635:	0f b6 d8             	movzx  ebx,al
c002c638:	89 d0                	mov    eax,edx
c002c63a:	53                   	push   ebx
c002c63b:	99                   	cdq    
c002c63c:	f7 fd                	idiv   ebp
c002c63e:	99                   	cdq    
c002c63f:	f7 f9                	idiv   ecx
c002c641:	83 c2 30             	add    edx,0x30
c002c644:	0f b6 d2             	movzx  edx,dl
c002c647:	52                   	push   edx
c002c648:	e8 4f ff ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c64d:	5f                   	pop    edi
c002c64e:	bf e8 03 00 00       	mov    edi,0x3e8
c002c653:	5a                   	pop    edx
c002c654:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c65a:	53                   	push   ebx
c002c65b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c660:	99                   	cdq    
c002c661:	f7 ff                	idiv   edi
c002c663:	99                   	cdq    
c002c664:	f7 f9                	idiv   ecx
c002c666:	8d 42 30             	lea    eax,[edx+0x30]
c002c669:	0f b6 c0             	movzx  eax,al
c002c66c:	50                   	push   eax
c002c66d:	e8 2a ff ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c672:	5f                   	pop    edi
c002c673:	bf 64 00 00 00       	mov    edi,0x64
c002c678:	5a                   	pop    edx
c002c679:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c67f:	53                   	push   ebx
c002c680:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c685:	99                   	cdq    
c002c686:	f7 ff                	idiv   edi
c002c688:	99                   	cdq    
c002c689:	f7 f9                	idiv   ecx
c002c68b:	8d 42 30             	lea    eax,[edx+0x30]
c002c68e:	0f b6 c0             	movzx  eax,al
c002c691:	50                   	push   eax
c002c692:	e8 05 ff ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c697:	5a                   	pop    edx
c002c698:	5a                   	pop    edx
c002c699:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c69f:	53                   	push   ebx
c002c6a0:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c6a5:	99                   	cdq    
c002c6a6:	f7 f9                	idiv   ecx
c002c6a8:	99                   	cdq    
c002c6a9:	f7 f9                	idiv   ecx
c002c6ab:	8d 42 30             	lea    eax,[edx+0x30]
c002c6ae:	0f b6 c0             	movzx  eax,al
c002c6b1:	50                   	push   eax
c002c6b2:	e8 e5 fe ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c6b7:	5a                   	pop    edx
c002c6b8:	5a                   	pop    edx
c002c6b9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c6bf:	53                   	push   ebx
c002c6c0:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c6c5:	99                   	cdq    
c002c6c6:	f7 f9                	idiv   ecx
c002c6c8:	83 c2 30             	add    edx,0x30
c002c6cb:	0f b6 d2             	movzx  edx,dl
c002c6ce:	52                   	push   edx
c002c6cf:	e8 c8 fe ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c6d4:	5a                   	pop    edx
c002c6d5:	5a                   	pop    edx
c002c6d6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c6dc:	53                   	push   ebx
c002c6dd:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c6e2:	99                   	cdq    
c002c6e3:	f7 fd                	idiv   ebp
c002c6e5:	99                   	cdq    
c002c6e6:	f7 f9                	idiv   ecx
c002c6e8:	8d 42 30             	lea    eax,[edx+0x30]
c002c6eb:	0f b6 c0             	movzx  eax,al
c002c6ee:	50                   	push   eax
c002c6ef:	e8 a8 fe ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c6f4:	5d                   	pop    ebp
c002c6f5:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c6fa:	5a                   	pop    edx
c002c6fb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c701:	53                   	push   ebx
c002c702:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c707:	99                   	cdq    
c002c708:	f7 fd                	idiv   ebp
c002c70a:	99                   	cdq    
c002c70b:	f7 f9                	idiv   ecx
c002c70d:	8d 42 30             	lea    eax,[edx+0x30]
c002c710:	0f b6 c0             	movzx  eax,al
c002c713:	50                   	push   eax
c002c714:	e8 83 fe ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c719:	5d                   	pop    ebp
c002c71a:	5a                   	pop    edx
c002c71b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c721:	53                   	push   ebx
c002c722:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c727:	99                   	cdq    
c002c728:	f7 ff                	idiv   edi
c002c72a:	99                   	cdq    
c002c72b:	f7 f9                	idiv   ecx
c002c72d:	8d 42 30             	lea    eax,[edx+0x30]
c002c730:	0f b6 c0             	movzx  eax,al
c002c733:	50                   	push   eax
c002c734:	e8 63 fe ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c739:	5f                   	pop    edi
c002c73a:	5d                   	pop    ebp
c002c73b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c741:	53                   	push   ebx
c002c742:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c747:	99                   	cdq    
c002c748:	f7 f9                	idiv   ecx
c002c74a:	99                   	cdq    
c002c74b:	f7 f9                	idiv   ecx
c002c74d:	8d 42 30             	lea    eax,[edx+0x30]
c002c750:	0f b6 c0             	movzx  eax,al
c002c753:	50                   	push   eax
c002c754:	e8 43 fe ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c759:	5a                   	pop    edx
c002c75a:	5f                   	pop    edi
c002c75b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c761:	53                   	push   ebx
c002c762:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c767:	99                   	cdq    
c002c768:	f7 f9                	idiv   ecx
c002c76a:	83 c2 30             	add    edx,0x30
c002c76d:	0f b6 d2             	movzx  edx,dl
c002c770:	52                   	push   edx
c002c771:	e8 26 fe ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c776:	83 c4 10             	add    esp,0x10
c002c779:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c77f:	eb 05                	jmp    c002c786 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c781:	be 01 00 00 00       	mov    esi,0x1
c002c786:	83 c4 0c             	add    esp,0xc
c002c789:	89 f0                	mov    eax,esi
c002c78b:	5b                   	pop    ebx
c002c78c:	5e                   	pop    esi
c002c78d:	5f                   	pop    edi
c002c78e:	5d                   	pop    ebp
c002c78f:	c3                   	ret    

c002c790 <ATA::write(unsigned long long, int, void*)>:
c002c790:	55                   	push   ebp
c002c791:	57                   	push   edi
c002c792:	56                   	push   esi
c002c793:	be 04 00 00 00       	mov    esi,0x4
c002c798:	53                   	push   ebx
c002c799:	83 ec 0c             	sub    esp,0xc
c002c79c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c7a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c7a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c7a8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c7ac:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c7af:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c7b5:	0f 87 9c 01 00 00    	ja     c002c957 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c7bb:	85 c9                	test   ecx,ecx
c002c7bd:	be 06 00 00 00       	mov    esi,0x6
c002c7c2:	0f 84 8f 01 00 00    	je     c002c957 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c7c8:	55                   	push   ebp
c002c7c9:	55                   	push   ebp
c002c7ca:	6a 01                	push   0x1
c002c7cc:	51                   	push   ecx
c002c7cd:	53                   	push   ebx
c002c7ce:	52                   	push   edx
c002c7cf:	50                   	push   eax
c002c7d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c7d4:	e8 09 f9 ff ff       	call   c002c0e2 <ATA::access(unsigned long long, int, void*, bool)>
c002c7d9:	83 c4 20             	add    esp,0x20
c002c7dc:	85 c0                	test   eax,eax
c002c7de:	89 c6                	mov    esi,eax
c002c7e0:	0f 85 6c 01 00 00    	jne    c002c952 <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c7e6:	50                   	push   eax
c002c7e7:	bd 10 27 00 00       	mov    ebp,0x2710
c002c7ec:	50                   	push   eax
c002c7ed:	6a 0f                	push   0xf
c002c7ef:	6a 00                	push   0x0
c002c7f1:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c7f7:	e8 b1 fd ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002c7fc:	5a                   	pop    edx
c002c7fd:	59                   	pop    ecx
c002c7fe:	b9 0a 00 00 00       	mov    ecx,0xa
c002c803:	0f b6 d8             	movzx  ebx,al
c002c806:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c80b:	53                   	push   ebx
c002c80c:	99                   	cdq    
c002c80d:	f7 fd                	idiv   ebp
c002c80f:	99                   	cdq    
c002c810:	f7 f9                	idiv   ecx
c002c812:	8d 42 30             	lea    eax,[edx+0x30]
c002c815:	0f b6 c0             	movzx  eax,al
c002c818:	50                   	push   eax
c002c819:	e8 7e fd ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c81e:	5f                   	pop    edi
c002c81f:	bf e8 03 00 00       	mov    edi,0x3e8
c002c824:	5a                   	pop    edx
c002c825:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c82b:	53                   	push   ebx
c002c82c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c831:	99                   	cdq    
c002c832:	f7 ff                	idiv   edi
c002c834:	99                   	cdq    
c002c835:	f7 f9                	idiv   ecx
c002c837:	8d 42 30             	lea    eax,[edx+0x30]
c002c83a:	0f b6 c0             	movzx  eax,al
c002c83d:	50                   	push   eax
c002c83e:	e8 59 fd ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c843:	5f                   	pop    edi
c002c844:	bf 64 00 00 00       	mov    edi,0x64
c002c849:	5a                   	pop    edx
c002c84a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c850:	53                   	push   ebx
c002c851:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c856:	99                   	cdq    
c002c857:	f7 ff                	idiv   edi
c002c859:	99                   	cdq    
c002c85a:	f7 f9                	idiv   ecx
c002c85c:	8d 42 30             	lea    eax,[edx+0x30]
c002c85f:	0f b6 c0             	movzx  eax,al
c002c862:	50                   	push   eax
c002c863:	e8 34 fd ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c868:	5a                   	pop    edx
c002c869:	5a                   	pop    edx
c002c86a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c870:	53                   	push   ebx
c002c871:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c876:	99                   	cdq    
c002c877:	f7 f9                	idiv   ecx
c002c879:	99                   	cdq    
c002c87a:	f7 f9                	idiv   ecx
c002c87c:	8d 42 30             	lea    eax,[edx+0x30]
c002c87f:	0f b6 c0             	movzx  eax,al
c002c882:	50                   	push   eax
c002c883:	e8 14 fd ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c888:	5a                   	pop    edx
c002c889:	5a                   	pop    edx
c002c88a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c890:	53                   	push   ebx
c002c891:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c896:	99                   	cdq    
c002c897:	f7 f9                	idiv   ecx
c002c899:	83 c2 30             	add    edx,0x30
c002c89c:	0f b6 d2             	movzx  edx,dl
c002c89f:	52                   	push   edx
c002c8a0:	e8 f7 fc ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c8a5:	5a                   	pop    edx
c002c8a6:	5a                   	pop    edx
c002c8a7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c8ad:	53                   	push   ebx
c002c8ae:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c8b3:	99                   	cdq    
c002c8b4:	f7 fd                	idiv   ebp
c002c8b6:	99                   	cdq    
c002c8b7:	f7 f9                	idiv   ecx
c002c8b9:	8d 42 30             	lea    eax,[edx+0x30]
c002c8bc:	0f b6 c0             	movzx  eax,al
c002c8bf:	50                   	push   eax
c002c8c0:	e8 d7 fc ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c8c5:	5d                   	pop    ebp
c002c8c6:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c8cb:	5a                   	pop    edx
c002c8cc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c8d2:	53                   	push   ebx
c002c8d3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c8d8:	99                   	cdq    
c002c8d9:	f7 fd                	idiv   ebp
c002c8db:	99                   	cdq    
c002c8dc:	f7 f9                	idiv   ecx
c002c8de:	8d 42 30             	lea    eax,[edx+0x30]
c002c8e1:	0f b6 c0             	movzx  eax,al
c002c8e4:	50                   	push   eax
c002c8e5:	e8 b2 fc ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c8ea:	5d                   	pop    ebp
c002c8eb:	5a                   	pop    edx
c002c8ec:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c8f2:	53                   	push   ebx
c002c8f3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c8f8:	99                   	cdq    
c002c8f9:	f7 ff                	idiv   edi
c002c8fb:	99                   	cdq    
c002c8fc:	f7 f9                	idiv   ecx
c002c8fe:	8d 42 30             	lea    eax,[edx+0x30]
c002c901:	0f b6 c0             	movzx  eax,al
c002c904:	50                   	push   eax
c002c905:	e8 92 fc ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c90a:	5f                   	pop    edi
c002c90b:	5d                   	pop    ebp
c002c90c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c912:	53                   	push   ebx
c002c913:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c918:	99                   	cdq    
c002c919:	f7 f9                	idiv   ecx
c002c91b:	99                   	cdq    
c002c91c:	f7 f9                	idiv   ecx
c002c91e:	8d 42 30             	lea    eax,[edx+0x30]
c002c921:	0f b6 c0             	movzx  eax,al
c002c924:	50                   	push   eax
c002c925:	e8 72 fc ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c92a:	5a                   	pop    edx
c002c92b:	5f                   	pop    edi
c002c92c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c932:	53                   	push   ebx
c002c933:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c938:	99                   	cdq    
c002c939:	f7 f9                	idiv   ecx
c002c93b:	83 c2 30             	add    edx,0x30
c002c93e:	0f b6 d2             	movzx  edx,dl
c002c941:	52                   	push   edx
c002c942:	e8 55 fc ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002c947:	83 c4 10             	add    esp,0x10
c002c94a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c950:	eb 05                	jmp    c002c957 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c952:	be 01 00 00 00       	mov    esi,0x1
c002c957:	83 c4 0c             	add    esp,0xc
c002c95a:	89 f0                	mov    eax,esi
c002c95c:	5b                   	pop    ebx
c002c95d:	5e                   	pop    esi
c002c95e:	5f                   	pop    edi
c002c95f:	5d                   	pop    ebp
c002c960:	c3                   	ret    
c002c961:	90                   	nop

c002c962 <ATAPI::write(unsigned long long, int, void*)>:
c002c962:	b8 03 00 00 00       	mov    eax,0x3
c002c967:	c3                   	ret    

c002c968 <ATAPI::close(int, int, void*)>:
c002c968:	83 ec 0c             	sub    esp,0xc
c002c96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c96f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c975:	85 c0                	test   eax,eax
c002c977:	74 0c                	je     c002c985 <ATAPI::close(int, int, void*)+0x1d>
c002c979:	8b 10                	mov    edx,DWORD PTR [eax]
c002c97b:	83 ec 0c             	sub    esp,0xc
c002c97e:	50                   	push   eax
c002c97f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c982:	83 c4 10             	add    esp,0x10
c002c985:	31 c0                	xor    eax,eax
c002c987:	83 c4 0c             	add    esp,0xc
c002c98a:	c3                   	ret    
c002c98b:	90                   	nop

c002c98c <ATAPI::ATAPI()>:
c002c98c:	83 ec 0c             	sub    esp,0xc
c002c98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c993:	83 ec 04             	sub    esp,0x4
c002c996:	68 00 08 00 00       	push   0x800
c002c99b:	68 85 40 03 c0       	push   0xc0034085
c002c9a0:	50                   	push   eax
c002c9a1:	e8 e0 f0 fe ff       	call   c001ba86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c9a6:	83 c4 10             	add    esp,0x10
c002c9a9:	ba 94 3f 03 c0       	mov    edx,0xc0033f94
c002c9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c9b2:	89 10                	mov    DWORD PTR [eax],edx
c002c9b4:	90                   	nop
c002c9b5:	83 c4 0c             	add    esp,0xc
c002c9b8:	c3                   	ret    
c002c9b9:	90                   	nop

c002c9ba <ATAPI::readyForCommand()>:
c002c9ba:	56                   	push   esi
c002c9bb:	53                   	push   ebx
c002c9bc:	53                   	push   ebx
c002c9bd:	31 db                	xor    ebx,ebx
c002c9bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c9c3:	51                   	push   ecx
c002c9c4:	6a 0c                	push   0xc
c002c9c6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c9cd:	50                   	push   eax
c002c9ce:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c9d4:	e8 63 e8 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002c9d9:	83 c4 10             	add    esp,0x10
c002c9dc:	a8 88                	test   al,0x88
c002c9de:	74 25                	je     c002ca05 <ATAPI::readyForCommand()+0x4b>
c002c9e0:	43                   	inc    ebx
c002c9e1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c9e7:	7e da                	jle    c002c9c3 <ATAPI::readyForCommand()+0x9>
c002c9e9:	83 ec 0c             	sub    esp,0xc
c002c9ec:	68 5e 01 00 00       	push   0x15e
c002c9f1:	e8 ce 8d ff ff       	call   c00257c4 <milliTenthSleep(unsigned int)>
c002c9f6:	83 c4 10             	add    esp,0x10
c002c9f9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c9ff:	75 c2                	jne    c002c9c3 <ATAPI::readyForCommand()+0x9>
c002ca01:	31 c0                	xor    eax,eax
c002ca03:	eb 02                	jmp    c002ca07 <ATAPI::readyForCommand()+0x4d>
c002ca05:	b0 01                	mov    al,0x1
c002ca07:	5a                   	pop    edx
c002ca08:	5b                   	pop    ebx
c002ca09:	5e                   	pop    esi
c002ca0a:	c3                   	ret    
c002ca0b:	90                   	nop

c002ca0c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002ca0c:	55                   	push   ebp
c002ca0d:	57                   	push   edi
c002ca0e:	56                   	push   esi
c002ca0f:	53                   	push   ebx
c002ca10:	83 ec 20             	sub    esp,0x20
c002ca13:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002ca17:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002ca1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002ca1f:	6a 01                	push   0x1
c002ca21:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ca28:	50                   	push   eax
c002ca29:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ca2f:	e8 56 e9 ff ff       	call   c002b38a <IDE::enableIRQs(unsigned char, bool)>
c002ca34:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ca3b:	59                   	pop    ecx
c002ca3c:	5e                   	pop    esi
c002ca3d:	50                   	push   eax
c002ca3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ca44:	e8 0d e7 ff ff       	call   c002b156 <IDE::prepareInterrupt(unsigned char)>
c002ca49:	89 3c 24             	mov    DWORD PTR [esp],edi
c002ca4c:	e8 69 ff ff ff       	call   c002c9ba <ATAPI::readyForCommand()>
c002ca51:	83 c4 10             	add    esp,0x10
c002ca54:	84 c0                	test   al,al
c002ca56:	75 0a                	jne    c002ca62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c002ca58:	bb 01 00 00 00       	mov    ebx,0x1
c002ca5d:	e9 5f 02 00 00       	jmp    c002ccc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002ca62:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002ca68:	c1 e0 04             	shl    eax,0x4
c002ca6b:	0f b6 c0             	movzx  eax,al
c002ca6e:	50                   	push   eax
c002ca6f:	6a 06                	push   0x6
c002ca71:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ca78:	50                   	push   eax
c002ca79:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ca7f:	e8 f8 e6 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ca84:	6a 00                	push   0x0
c002ca86:	6a 01                	push   0x1
c002ca88:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ca8f:	50                   	push   eax
c002ca90:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ca96:	e8 e1 e6 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ca9b:	83 c4 20             	add    esp,0x20
c002ca9e:	0f b6 c3             	movzx  eax,bl
c002caa1:	50                   	push   eax
c002caa2:	0f b6 df             	movzx  ebx,bh
c002caa5:	6a 04                	push   0x4
c002caa7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002caae:	50                   	push   eax
c002caaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cab5:	e8 c2 e6 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002caba:	53                   	push   ebx
c002cabb:	6a 05                	push   0x5
c002cabd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cac4:	50                   	push   eax
c002cac5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cacb:	e8 ac e6 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cad0:	83 c4 20             	add    esp,0x20
c002cad3:	68 a0 00 00 00       	push   0xa0
c002cad8:	6a 07                	push   0x7
c002cada:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cae1:	50                   	push   eax
c002cae2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cae8:	e8 8f e6 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002caed:	83 c4 0c             	add    esp,0xc
c002caf0:	6a 01                	push   0x1
c002caf2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002caf9:	50                   	push   eax
c002cafa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cb00:	e8 5b f1 ff ff       	call   c002bc60 <IDE::polling(unsigned char, unsigned int)>
c002cb05:	83 c4 10             	add    esp,0x10
c002cb08:	0f b6 d8             	movzx  ebx,al
c002cb0b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002cb11:	85 db                	test   ebx,ebx
c002cb13:	74 20                	je     c002cb35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c002cb15:	53                   	push   ebx
c002cb16:	0f b6 c0             	movzx  eax,al
c002cb19:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002cb20:	52                   	push   edx
c002cb21:	50                   	push   eax
c002cb22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cb28:	e8 79 f0 ff ff       	call   c002bba6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002cb2d:	83 c4 10             	add    esp,0x10
c002cb30:	e9 8c 01 00 00       	jmp    c002ccc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002cb35:	52                   	push   edx
c002cb36:	0f b6 c0             	movzx  eax,al
c002cb39:	52                   	push   edx
c002cb3a:	50                   	push   eax
c002cb3b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cb41:	e8 24 e6 ff ff       	call   c002b16a <IDE::getBase(unsigned char)>
c002cb46:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002cb4a:	b9 06 00 00 00       	mov    ecx,0x6
c002cb4f:	89 c2                	mov    edx,eax
c002cb51:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002cb54:	89 e8                	mov    eax,ebp
c002cb56:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002cb5a:	83 c4 10             	add    esp,0x10
c002cb5d:	0f b6 c0             	movzx  eax,al
c002cb60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002cb64:	85 db                	test   ebx,ebx
c002cb66:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002cb6c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cb73:	0f 84 eb 00 00 00    	je     c002cc64 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002cb79:	55                   	push   ebp
c002cb7a:	55                   	push   ebp
c002cb7b:	52                   	push   edx
c002cb7c:	50                   	push   eax
c002cb7d:	e8 6e e7 ff ff       	call   c002b2f0 <IDE::waitInterrupt(unsigned char)>
c002cb82:	83 c4 10             	add    esp,0x10
c002cb85:	84 c0                	test   al,al
c002cb87:	0f 84 cb fe ff ff    	je     c002ca58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002cb8d:	56                   	push   esi
c002cb8e:	56                   	push   esi
c002cb8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cb96:	50                   	push   eax
c002cb97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cb9d:	e8 b4 e5 ff ff       	call   c002b156 <IDE::prepareInterrupt(unsigned char)>
c002cba2:	83 c4 0c             	add    esp,0xc
c002cba5:	6a 04                	push   0x4
c002cba7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cbae:	50                   	push   eax
c002cbaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cbb5:	e8 82 e6 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002cbba:	83 c4 0c             	add    esp,0xc
c002cbbd:	6a 05                	push   0x5
c002cbbf:	89 c6                	mov    esi,eax
c002cbc1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cbc8:	50                   	push   eax
c002cbc9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cbcf:	e8 68 e6 ff ff       	call   c002b23c <IDE::read(unsigned char, unsigned char)>
c002cbd4:	83 c4 10             	add    esp,0x10
c002cbd7:	0f b6 e8             	movzx  ebp,al
c002cbda:	89 f0                	mov    eax,esi
c002cbdc:	c1 e5 08             	shl    ebp,0x8
c002cbdf:	0f b6 f0             	movzx  esi,al
c002cbe2:	09 f5                	or     ebp,esi
c002cbe4:	31 f6                	xor    esi,esi
c002cbe6:	d1 fd                	sar    ebp,1
c002cbe8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002cbed:	74 5c                	je     c002cc4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002cbef:	39 ee                	cmp    esi,ebp
c002cbf1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002cbf7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cbfe:	75 0d                	jne    c002cc0d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c002cc00:	8d 0c 36             	lea    ecx,[esi+esi*1]
c002cc03:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c002cc07:	4b                   	dec    ebx
c002cc08:	e9 57 ff ff ff       	jmp    c002cb64 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002cc0d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002cc11:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c002cc15:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002cc1a:	51                   	push   ecx
c002cc1b:	51                   	push   ecx
c002cc1c:	52                   	push   edx
c002cc1d:	50                   	push   eax
c002cc1e:	e8 47 e5 ff ff       	call   c002b16a <IDE::getBase(unsigned char)>
c002cc23:	89 c2                	mov    edx,eax
c002cc25:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002cc2a:	66 ef                	out    dx,ax
c002cc2c:	46                   	inc    esi
c002cc2d:	83 c4 10             	add    esp,0x10
c002cc30:	eb bd                	jmp    c002cbef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c002cc32:	51                   	push   ecx
c002cc33:	51                   	push   ecx
c002cc34:	52                   	push   edx
c002cc35:	50                   	push   eax
c002cc36:	e8 2f e5 ff ff       	call   c002b16a <IDE::getBase(unsigned char)>
c002cc3b:	89 c2                	mov    edx,eax
c002cc3d:	66 ed                	in     ax,dx
c002cc3f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c002cc43:	83 c4 10             	add    esp,0x10
c002cc46:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002cc4a:	46                   	inc    esi
c002cc4b:	39 ee                	cmp    esi,ebp
c002cc4d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002cc53:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cc5a:	75 d6                	jne    c002cc32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002cc5c:	01 f6                	add    esi,esi
c002cc5e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002cc62:	eb a3                	jmp    c002cc07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c002cc64:	51                   	push   ecx
c002cc65:	51                   	push   ecx
c002cc66:	52                   	push   edx
c002cc67:	50                   	push   eax
c002cc68:	e8 83 e6 ff ff       	call   c002b2f0 <IDE::waitInterrupt(unsigned char)>
c002cc6d:	83 c4 10             	add    esp,0x10
c002cc70:	84 c0                	test   al,al
c002cc72:	0f 84 e0 fd ff ff    	je     c002ca58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002cc78:	52                   	push   edx
c002cc79:	bb a0 86 01 00       	mov    ebx,0x186a0
c002cc7e:	52                   	push   edx
c002cc7f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc86:	50                   	push   eax
c002cc87:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc8d:	e8 c4 e4 ff ff       	call   c002b156 <IDE::prepareInterrupt(unsigned char)>
c002cc92:	83 c4 10             	add    esp,0x10
c002cc95:	50                   	push   eax
c002cc96:	50                   	push   eax
c002cc97:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc9e:	50                   	push   eax
c002cc9f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cca5:	e8 c0 e4 ff ff       	call   c002b16a <IDE::getBase(unsigned char)>
c002ccaa:	8d 50 07             	lea    edx,[eax+0x7]
c002ccad:	ec                   	in     al,dx
c002ccae:	83 c4 10             	add    esp,0x10
c002ccb1:	a8 88                	test   al,0x88
c002ccb3:	74 0a                	je     c002ccbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002ccb5:	4b                   	dec    ebx
c002ccb6:	75 dd                	jne    c002cc95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002ccb8:	bb 02 00 00 00       	mov    ebx,0x2
c002ccbd:	eb 02                	jmp    c002ccc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002ccbf:	31 db                	xor    ebx,ebx
c002ccc1:	83 c4 1c             	add    esp,0x1c
c002ccc4:	89 d8                	mov    eax,ebx
c002ccc6:	5b                   	pop    ebx
c002ccc7:	5e                   	pop    esi
c002ccc8:	5f                   	pop    edi
c002ccc9:	5d                   	pop    ebp
c002ccca:	c3                   	ret    
c002cccb:	90                   	nop

c002cccc <ATAPI::diskRemoved()>:
c002cccc:	53                   	push   ebx
c002cccd:	83 ec 14             	sub    esp,0x14
c002ccd0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ccd4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002ccdb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002cce1:	e8 3a fd fe ff       	call   c001ca20 <LogicalDisk::unmount()>
c002cce6:	58                   	pop    eax
c002cce7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002cced:	e8 0e 07 ff ff       	call   c001d400 <VCache::writeWriteBuffer()>
c002ccf2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002ccf8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ccfc:	83 c4 18             	add    esp,0x18
c002ccff:	5b                   	pop    ebx
c002cd00:	e9 eb 06 ff ff       	jmp    c001d3f0 <VCache::invalidateReadBuffer()>
c002cd05:	90                   	nop

c002cd06 <ATAPI::eject()>:
c002cd06:	57                   	push   edi
c002cd07:	b9 03 00 00 00       	mov    ecx,0x3
c002cd0c:	53                   	push   ebx
c002cd0d:	83 ec 14             	sub    esp,0x14
c002cd10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002cd14:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002cd18:	fc                   	cld    
c002cd19:	31 c0                	xor    eax,eax
c002cd1b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002cd1d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002cd22:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002cd27:	50                   	push   eax
c002cd28:	50                   	push   eax
c002cd29:	6a 00                	push   0x0
c002cd2b:	6a 00                	push   0x0
c002cd2d:	6a 00                	push   0x0
c002cd2f:	6a 02                	push   0x2
c002cd31:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002cd35:	50                   	push   eax
c002cd36:	53                   	push   ebx
c002cd37:	e8 d0 fc ff ff       	call   c002ca0c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cd3c:	83 c4 14             	add    esp,0x14
c002cd3f:	53                   	push   ebx
c002cd40:	e8 87 ff ff ff       	call   c002cccc <ATAPI::diskRemoved()>
c002cd45:	83 c4 24             	add    esp,0x24
c002cd48:	31 c0                	xor    eax,eax
c002cd4a:	5b                   	pop    ebx
c002cd4b:	5f                   	pop    edi
c002cd4c:	c3                   	ret    
c002cd4d:	90                   	nop

c002cd4e <ATAPI::diskInserted()>:
c002cd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002cd52:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002cd59:	c3                   	ret    

c002cd5a <ATAPI::detectMedia()>:
c002cd5a:	56                   	push   esi
c002cd5b:	53                   	push   ebx
c002cd5c:	83 ec 28             	sub    esp,0x28
c002cd5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002cd63:	6a 0c                	push   0xc
c002cd65:	6a 00                	push   0x0
c002cd67:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002cd6b:	56                   	push   esi
c002cd6c:	e8 7f 37 fd ff       	call   c00004f0 <memset>
c002cd71:	58                   	pop    eax
c002cd72:	5a                   	pop    edx
c002cd73:	6a 00                	push   0x0
c002cd75:	6a 00                	push   0x0
c002cd77:	6a 00                	push   0x0
c002cd79:	6a 00                	push   0x0
c002cd7b:	56                   	push   esi
c002cd7c:	53                   	push   ebx
c002cd7d:	e8 8a fc ff ff       	call   c002ca0c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cd82:	83 c4 1c             	add    esp,0x1c
c002cd85:	6a 0c                	push   0xc
c002cd87:	6a 00                	push   0x0
c002cd89:	56                   	push   esi
c002cd8a:	e8 61 37 fd ff       	call   c00004f0 <memset>
c002cd8f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002cd94:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002cd99:	59                   	pop    ecx
c002cd9a:	58                   	pop    eax
c002cd9b:	6a 01                	push   0x1
c002cd9d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002cda1:	50                   	push   eax
c002cda2:	6a 00                	push   0x0
c002cda4:	6a 12                	push   0x12
c002cda6:	56                   	push   esi
c002cda7:	53                   	push   ebx
c002cda8:	e8 5f fc ff ff       	call   c002ca0c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cdad:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002cdb1:	83 c4 20             	add    esp,0x20
c002cdb4:	83 e0 7f             	and    eax,0x7f
c002cdb7:	83 f8 70             	cmp    eax,0x70
c002cdba:	74 15                	je     c002cdd1 <ATAPI::detectMedia()+0x77>
c002cdbc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cdc3:	75 0c                	jne    c002cdd1 <ATAPI::detectMedia()+0x77>
c002cdc5:	83 ec 0c             	sub    esp,0xc
c002cdc8:	53                   	push   ebx
c002cdc9:	e8 80 ff ff ff       	call   c002cd4e <ATAPI::diskInserted()>
c002cdce:	83 c4 10             	add    esp,0x10
c002cdd1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002cdd5:	83 e0 0f             	and    eax,0xf
c002cdd8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002cddd:	0f b6 c0             	movzx  eax,al
c002cde0:	75 19                	jne    c002cdfb <ATAPI::detectMedia()+0xa1>
c002cde2:	83 f8 02             	cmp    eax,0x2
c002cde5:	75 14                	jne    c002cdfb <ATAPI::detectMedia()+0xa1>
c002cde7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cdee:	74 24                	je     c002ce14 <ATAPI::detectMedia()+0xba>
c002cdf0:	83 ec 0c             	sub    esp,0xc
c002cdf3:	53                   	push   ebx
c002cdf4:	e8 d3 fe ff ff       	call   c002cccc <ATAPI::diskRemoved()>
c002cdf9:	eb 16                	jmp    c002ce11 <ATAPI::detectMedia()+0xb7>
c002cdfb:	85 c0                	test   eax,eax
c002cdfd:	75 15                	jne    c002ce14 <ATAPI::detectMedia()+0xba>
c002cdff:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002ce06:	75 0c                	jne    c002ce14 <ATAPI::detectMedia()+0xba>
c002ce08:	83 ec 0c             	sub    esp,0xc
c002ce0b:	53                   	push   ebx
c002ce0c:	e8 3d ff ff ff       	call   c002cd4e <ATAPI::diskInserted()>
c002ce11:	83 c4 10             	add    esp,0x10
c002ce14:	83 c4 24             	add    esp,0x24
c002ce17:	5b                   	pop    ebx
c002ce18:	5e                   	pop    esi
c002ce19:	c3                   	ret    

c002ce1a <ATAPI::open(int, int, void*)>:
c002ce1a:	56                   	push   esi
c002ce1b:	53                   	push   ebx
c002ce1c:	50                   	push   eax
c002ce1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002ce21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ce25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002ce29:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002ce2f:	c1 e0 06             	shl    eax,0x6
c002ce32:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002ce38:	01 d0                	add    eax,edx
c002ce3a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002ce41:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002ce47:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002ce4e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002ce58:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002ce5f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002ce65:	6a 04                	push   0x4
c002ce67:	6a 0c                	push   0xc
c002ce69:	51                   	push   ecx
c002ce6a:	52                   	push   edx
c002ce6b:	e8 0c e3 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ce70:	90                   	nop
c002ce71:	90                   	nop
c002ce72:	6a 00                	push   0x0
c002ce74:	6a 0c                	push   0xc
c002ce76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ce7d:	50                   	push   eax
c002ce7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ce84:	e8 f3 e2 ff ff       	call   c002b17c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ce89:	83 c4 14             	add    esp,0x14
c002ce8c:	68 78 01 00 00       	push   0x178
c002ce91:	e8 06 98 fe ff       	call   c001669c <malloc>
c002ce96:	83 c4 0c             	add    esp,0xc
c002ce99:	6a 00                	push   0x0
c002ce9b:	68 ff ff ff 7f       	push   0x7fffffff
c002cea0:	6a 00                	push   0x0
c002cea2:	6a 00                	push   0x0
c002cea4:	53                   	push   ebx
c002cea5:	68 37 41 03 c0       	push   0xc0034137
c002ceaa:	89 c6                	mov    esi,eax
c002ceac:	50                   	push   eax
c002cead:	e8 ac f9 fe ff       	call   c001c85e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002ceb2:	83 c4 14             	add    esp,0x14
c002ceb5:	56                   	push   esi
c002ceb6:	e8 63 fa fe ff       	call   c001c91e <LogicalDisk::assignDriveLetter()>
c002cebb:	5a                   	pop    edx
c002cebc:	59                   	pop    ecx
c002cebd:	0f be c0             	movsx  eax,al
c002cec0:	50                   	push   eax
c002cec1:	68 7c 3f 03 c0       	push   0xc0033f7c
c002cec6:	e8 07 c6 fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002cecb:	58                   	pop    eax
c002cecc:	5a                   	pop    edx
c002cecd:	56                   	push   esi
c002cece:	53                   	push   ebx
c002cecf:	e8 d0 e7 fe ff       	call   c001b6a4 <Device::addChild(Device*)>
c002ced4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002ceda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cedd:	e8 0c ec fe ff       	call   c001baee <PhysicalDisk::startCache()>
c002cee2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002cee9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ceec:	e8 69 fe ff ff       	call   c002cd5a <ATAPI::detectMedia()>
c002cef1:	83 c4 14             	add    esp,0x14
c002cef4:	31 c0                	xor    eax,eax
c002cef6:	5b                   	pop    ebx
c002cef7:	5e                   	pop    esi
c002cef8:	c3                   	ret    
c002cef9:	90                   	nop

c002cefa <ATAPI::read(unsigned long long, int, void*)>:
c002cefa:	55                   	push   ebp
c002cefb:	57                   	push   edi
c002cefc:	56                   	push   esi
c002cefd:	53                   	push   ebx
c002cefe:	83 ec 1c             	sub    esp,0x1c
c002cf01:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002cf05:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002cf09:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002cf0d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cf14:	74 3c                	je     c002cf52 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002cf16:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002cf1a:	b9 03 00 00 00       	mov    ecx,0x3
c002cf1f:	fc                   	cld    
c002cf20:	31 c0                	xor    eax,eax
c002cf22:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002cf24:	89 e8                	mov    eax,ebp
c002cf26:	0f ce                	bswap  esi
c002cf28:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002cf2c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002cf31:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002cf35:	50                   	push   eax
c002cf36:	50                   	push   eax
c002cf37:	55                   	push   ebp
c002cf38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002cf3c:	c1 e5 0b             	shl    ebp,0xb
c002cf3f:	6a 00                	push   0x0
c002cf41:	55                   	push   ebp
c002cf42:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002cf46:	50                   	push   eax
c002cf47:	53                   	push   ebx
c002cf48:	e8 bf fa ff ff       	call   c002ca0c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cf4d:	83 c4 20             	add    esp,0x20
c002cf50:	eb 1a                	jmp    c002cf6c <ATAPI::read(unsigned long long, int, void*)+0x72>
c002cf52:	83 ec 0c             	sub    esp,0xc
c002cf55:	53                   	push   ebx
c002cf56:	e8 ff fd ff ff       	call   c002cd5a <ATAPI::detectMedia()>
c002cf5b:	83 c4 10             	add    esp,0x10
c002cf5e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cf65:	75 af                	jne    c002cf16 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002cf67:	b8 02 00 00 00       	mov    eax,0x2
c002cf6c:	83 c4 1c             	add    esp,0x1c
c002cf6f:	5b                   	pop    ebx
c002cf70:	5e                   	pop    esi
c002cf71:	5f                   	pop    edi
c002cf72:	5d                   	pop    ebp
c002cf73:	c3                   	ret    

c002cf74 <SATA::close(int, int, void*)>:
c002cf74:	83 ec 0c             	sub    esp,0xc
c002cf77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cf7b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002cf81:	85 c0                	test   eax,eax
c002cf83:	74 0c                	je     c002cf91 <SATA::close(int, int, void*)+0x1d>
c002cf85:	8b 10                	mov    edx,DWORD PTR [eax]
c002cf87:	83 ec 0c             	sub    esp,0xc
c002cf8a:	50                   	push   eax
c002cf8b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cf8e:	83 c4 10             	add    esp,0x10
c002cf91:	31 c0                	xor    eax,eax
c002cf93:	83 c4 0c             	add    esp,0xc
c002cf96:	c3                   	ret    
c002cf97:	90                   	nop

c002cf98 <SATA::powerSaving(PowerSavingLevel)>:
c002cf98:	c3                   	ret    
c002cf99:	90                   	nop

c002cf9a <SATA::open(int, int, void*)>:
c002cf9a:	56                   	push   esi
c002cf9b:	53                   	push   ebx
c002cf9c:	83 ec 10             	sub    esp,0x10
c002cf9f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002cfa3:	68 c4 3f 03 c0       	push   0xc0033fc4
c002cfa8:	e8 25 c5 fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002cfad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cfb1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002cfbb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002cfc5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002cfcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cfcf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002cfd9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002cfe0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cfe6:	e8 c0 99 fe ff       	call   c00169ab <Phys::allocatePage()>
c002cfeb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cff1:	89 c6                	mov    esi,eax
c002cff3:	e8 b3 99 fe ff       	call   c00169ab <Phys::allocatePage()>
c002cff8:	81 c6 00 10 00 00    	add    esi,0x1000
c002cffe:	83 c4 10             	add    esp,0x10
c002d001:	39 c6                	cmp    esi,eax
c002d003:	74 10                	je     c002d015 <SATA::open(int, int, void*)+0x7b>
c002d005:	83 ec 0c             	sub    esp,0xc
c002d008:	68 d0 3f 03 c0       	push   0xc0033fd0
c002d00d:	e8 84 35 ff ff       	call   c0020596 <KePanic(char const*)>
c002d012:	83 c4 10             	add    esp,0x10
c002d015:	83 ec 0c             	sub    esp,0xc
c002d018:	6a 02                	push   0x2
c002d01a:	e8 9e b1 fe ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c002d01f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002d025:	6a 03                	push   0x3
c002d027:	50                   	push   eax
c002d028:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002d02e:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d034:	e8 8d b8 fe ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d039:	83 c4 14             	add    esp,0x14
c002d03c:	53                   	push   ebx
c002d03d:	e8 ac ea fe ff       	call   c001baee <PhysicalDisk::startCache()>
c002d042:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d045:	e8 e8 fc fe ff       	call   c001cd32 <createPartitionsForDisk(PhysicalDisk*)>
c002d04a:	83 c4 14             	add    esp,0x14
c002d04d:	31 c0                	xor    eax,eax
c002d04f:	5b                   	pop    ebx
c002d050:	5e                   	pop    esi
c002d051:	c3                   	ret    

c002d052 <SATA::SATA()>:
c002d052:	83 ec 0c             	sub    esp,0xc
c002d055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d059:	83 ec 04             	sub    esp,0x4
c002d05c:	68 00 02 00 00       	push   0x200
c002d061:	68 e4 3f 03 c0       	push   0xc0033fe4
c002d066:	50                   	push   eax
c002d067:	e8 1a ea fe ff       	call   c001ba86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d06c:	83 c4 10             	add    esp,0x10
c002d06f:	ba 54 40 03 c0       	mov    edx,0xc0034054
c002d074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d078:	89 10                	mov    DWORD PTR [eax],edx
c002d07a:	90                   	nop
c002d07b:	83 c4 0c             	add    esp,0xc
c002d07e:	c3                   	ret    
c002d07f:	90                   	nop

c002d080 <SATA::access(unsigned long long, int, void*, bool)>:
c002d080:	55                   	push   ebp
c002d081:	57                   	push   edi
c002d082:	56                   	push   esi
c002d083:	53                   	push   ebx
c002d084:	83 ec 2c             	sub    esp,0x2c
c002d087:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d08b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d08f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d093:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002d097:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d09b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d0a3:	fa                   	cli    
c002d0a4:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002d0aa:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002d0af:	7e 10                	jle    c002d0c1 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002d0b1:	83 ec 0c             	sub    esp,0xc
c002d0b4:	68 f4 3f 03 c0       	push   0xc0033ff4
c002d0b9:	e8 d8 34 ff ff       	call   c0020596 <KePanic(char const*)>
c002d0be:	83 c4 10             	add    esp,0x10
c002d0c1:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002d0c7:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002d0cd:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002d0d3:	89 e8                	mov    eax,ebp
c002d0d5:	c1 e0 07             	shl    eax,0x7
c002d0d8:	01 d0                	add    eax,edx
c002d0da:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d0e4:	8d 45 02             	lea    eax,[ebp+0x2]
c002d0e7:	51                   	push   ecx
c002d0e8:	c1 e0 07             	shl    eax,0x7
c002d0eb:	51                   	push   ecx
c002d0ec:	01 d0                	add    eax,edx
c002d0ee:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002d0f2:	50                   	push   eax
c002d0f3:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002d0f9:	e8 42 ec ff ff       	call   c002bd40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d0fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d102:	83 c4 10             	add    esp,0x10
c002d105:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002d10a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002d10e:	0f 84 ac 01 00 00    	je     c002d2c0 <SATA::access(unsigned long long, int, void*, bool)+0x240>
c002d114:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002d118:	c1 e0 09             	shl    eax,0x9
c002d11b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002d120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d124:	74 0e                	je     c002d134 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002d126:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002d12c:	89 c1                	mov    ecx,eax
c002d12e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002d132:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d134:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d138:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002d13e:	8d 45 02             	lea    eax,[ebp+0x2]
c002d141:	c1 e0 07             	shl    eax,0x7
c002d144:	01 d0                	add    eax,edx
c002d146:	8b 00                	mov    eax,DWORD PTR [eax]
c002d148:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d14e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d154:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002d158:	c1 e1 05             	shl    ecx,0x5
c002d15b:	01 c8                	add    eax,ecx
c002d15d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002d161:	83 e1 01             	and    ecx,0x1
c002d164:	89 ce                	mov    esi,ecx
c002d166:	8a 08                	mov    cl,BYTE PTR [eax]
c002d168:	c1 e6 06             	shl    esi,0x6
c002d16b:	83 e1 bf             	and    ecx,0xffffffbf
c002d16e:	09 f1                	or     ecx,esi
c002d170:	88 08                	mov    BYTE PTR [eax],cl
c002d172:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d174:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002d17a:	81 c9 05 00 01 00    	or     ecx,0x10005
c002d180:	89 08                	mov    DWORD PTR [eax],ecx
c002d182:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002d188:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002d18e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002d194:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002d197:	50                   	push   eax
c002d198:	68 90 00 00 00       	push   0x90
c002d19d:	6a 00                	push   0x0
c002d19f:	56                   	push   esi
c002d1a0:	e8 4b 33 fd ff       	call   c00004f0 <memset>
c002d1a5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002d1ab:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002d1b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d1b5:	83 c4 10             	add    esp,0x10
c002d1b8:	48                   	dec    eax
c002d1b9:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d1be:	89 c1                	mov    ecx,eax
c002d1c0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002d1c6:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d1cb:	09 c8                	or     eax,ecx
c002d1cd:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002d1d3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002d1d9:	83 c8 80             	or     eax,0xffffff80
c002d1dc:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002d1e2:	66 8b 06             	mov    ax,WORD PTR [esi]
c002d1e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d1e9:	25 00 7f 00 00       	and    eax,0x7f00
c002d1ee:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d1f3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002d1f8:	66 89 06             	mov    WORD PTR [esi],ax
c002d1fb:	b0 35                	mov    al,0x35
c002d1fd:	75 02                	jne    c002d201 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002d1ff:	b0 25                	mov    al,0x25
c002d201:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002d204:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d208:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002d20c:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002d210:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d214:	c1 e8 10             	shr    eax,0x10
c002d217:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002d21a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d21e:	c1 e8 18             	shr    eax,0x18
c002d221:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002d224:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002d228:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002d22b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002d22f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002d232:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002d236:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002d23a:	89 ee                	mov    esi,ebp
c002d23c:	31 c0                	xor    eax,eax
c002d23e:	c1 e6 07             	shl    esi,0x7
c002d241:	01 d6                	add    esi,edx
c002d243:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002d249:	80 e1 88             	and    cl,0x88
c002d24c:	74 0a                	je     c002d258 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002d24e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d253:	74 0a                	je     c002d25f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002d255:	40                   	inc    eax
c002d256:	eb eb                	jmp    c002d243 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002d258:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d25d:	75 0a                	jne    c002d269 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002d25f:	83 ec 0c             	sub    esp,0xc
c002d262:	68 2d 40 03 c0       	push   0xc003402d
c002d267:	eb 34                	jmp    c002d29d <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002d269:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002d26d:	c1 e5 07             	shl    ebp,0x7
c002d270:	b8 01 00 00 00       	mov    eax,0x1
c002d275:	01 ea                	add    edx,ebp
c002d277:	d3 e0                	shl    eax,cl
c002d279:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002d27f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002d285:	85 c8                	test   eax,ecx
c002d287:	74 2b                	je     c002d2b4 <SATA::access(unsigned long long, int, void*, bool)+0x234>
c002d289:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002d28f:	0f ba e1 1e          	bt     ecx,0x1e
c002d293:	73 ea                	jae    c002d27f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c002d295:	83 ec 0c             	sub    esp,0xc
c002d298:	68 3b 40 03 c0       	push   0xc003403b
c002d29d:	e8 30 c2 fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002d2a2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d2a7:	83 c4 10             	add    esp,0x10
c002d2aa:	48                   	dec    eax
c002d2ab:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d2b0:	85 c0                	test   eax,eax
c002d2b2:	eb 17                	jmp    c002d2cb <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002d2b4:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002d2ba:	0f ba e0 1e          	bt     eax,0x1e
c002d2be:	73 15                	jae    c002d2d5 <SATA::access(unsigned long long, int, void*, bool)+0x255>
c002d2c0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d2c5:	48                   	dec    eax
c002d2c6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d2cb:	75 01                	jne    c002d2ce <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c002d2cd:	fb                   	sti    
c002d2ce:	b8 01 00 00 00       	mov    eax,0x1
c002d2d3:	eb 29                	jmp    c002d2fe <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d2d5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002d2da:	75 10                	jne    c002d2ec <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c002d2dc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002d2e2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002d2e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d2ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d2ec:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d2f1:	48                   	dec    eax
c002d2f2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d2f7:	75 03                	jne    c002d2fc <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002d2f9:	fb                   	sti    
c002d2fa:	eb 02                	jmp    c002d2fe <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d2fc:	31 c0                	xor    eax,eax
c002d2fe:	83 c4 2c             	add    esp,0x2c
c002d301:	5b                   	pop    ebx
c002d302:	5e                   	pop    esi
c002d303:	5f                   	pop    edi
c002d304:	5d                   	pop    ebp
c002d305:	c3                   	ret    

c002d306 <SATA::read(unsigned long long, int, void*)>:
c002d306:	55                   	push   ebp
c002d307:	57                   	push   edi
c002d308:	56                   	push   esi
c002d309:	be 04 00 00 00       	mov    esi,0x4
c002d30e:	53                   	push   ebx
c002d30f:	83 ec 0c             	sub    esp,0xc
c002d312:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d316:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d31a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002d31e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002d322:	8d 7b ff             	lea    edi,[ebx-0x1]
c002d325:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002d32b:	0f 87 1a 02 00 00    	ja     c002d54b <SATA::read(unsigned long long, int, void*)+0x245>
c002d331:	85 c9                	test   ecx,ecx
c002d333:	be 06 00 00 00       	mov    esi,0x6
c002d338:	0f 84 0d 02 00 00    	je     c002d54b <SATA::read(unsigned long long, int, void*)+0x245>
c002d33e:	56                   	push   esi
c002d33f:	56                   	push   esi
c002d340:	6a 00                	push   0x0
c002d342:	51                   	push   ecx
c002d343:	53                   	push   ebx
c002d344:	52                   	push   edx
c002d345:	50                   	push   eax
c002d346:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d34a:	e8 31 fd ff ff       	call   c002d080 <SATA::access(unsigned long long, int, void*, bool)>
c002d34f:	83 c4 20             	add    esp,0x20
c002d352:	85 c0                	test   eax,eax
c002d354:	89 c6                	mov    esi,eax
c002d356:	0f 85 ea 01 00 00    	jne    c002d546 <SATA::read(unsigned long long, int, void*)+0x240>
c002d35c:	50                   	push   eax
c002d35d:	50                   	push   eax
c002d35e:	6a 0f                	push   0xf
c002d360:	6a 00                	push   0x0
c002d362:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002d368:	bb 0a 00 00 00       	mov    ebx,0xa
c002d36d:	e8 3b f2 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d372:	5a                   	pop    edx
c002d373:	59                   	pop    ecx
c002d374:	b9 10 27 00 00       	mov    ecx,0x2710
c002d379:	0f b6 c0             	movzx  eax,al
c002d37c:	50                   	push   eax
c002d37d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d382:	99                   	cdq    
c002d383:	f7 f9                	idiv   ecx
c002d385:	99                   	cdq    
c002d386:	f7 fb                	idiv   ebx
c002d388:	8d 42 30             	lea    eax,[edx+0x30]
c002d38b:	0f b6 c0             	movzx  eax,al
c002d38e:	50                   	push   eax
c002d38f:	e8 08 f2 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d394:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d39a:	5f                   	pop    edi
c002d39b:	5d                   	pop    ebp
c002d39c:	bd e8 03 00 00       	mov    ebp,0x3e8
c002d3a1:	6a 0f                	push   0xf
c002d3a3:	6a 00                	push   0x0
c002d3a5:	e8 03 f2 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d3aa:	5a                   	pop    edx
c002d3ab:	59                   	pop    ecx
c002d3ac:	0f b6 c0             	movzx  eax,al
c002d3af:	50                   	push   eax
c002d3b0:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d3b5:	99                   	cdq    
c002d3b6:	f7 fd                	idiv   ebp
c002d3b8:	99                   	cdq    
c002d3b9:	f7 fb                	idiv   ebx
c002d3bb:	8d 42 30             	lea    eax,[edx+0x30]
c002d3be:	0f b6 c0             	movzx  eax,al
c002d3c1:	50                   	push   eax
c002d3c2:	e8 d5 f1 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d3c7:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d3cd:	5f                   	pop    edi
c002d3ce:	bf 64 00 00 00       	mov    edi,0x64
c002d3d3:	58                   	pop    eax
c002d3d4:	6a 0f                	push   0xf
c002d3d6:	6a 00                	push   0x0
c002d3d8:	e8 d0 f1 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d3dd:	5a                   	pop    edx
c002d3de:	59                   	pop    ecx
c002d3df:	0f b6 c0             	movzx  eax,al
c002d3e2:	50                   	push   eax
c002d3e3:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d3e8:	99                   	cdq    
c002d3e9:	f7 ff                	idiv   edi
c002d3eb:	99                   	cdq    
c002d3ec:	f7 fb                	idiv   ebx
c002d3ee:	8d 42 30             	lea    eax,[edx+0x30]
c002d3f1:	0f b6 c0             	movzx  eax,al
c002d3f4:	50                   	push   eax
c002d3f5:	e8 a2 f1 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d3fa:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d400:	58                   	pop    eax
c002d401:	5a                   	pop    edx
c002d402:	6a 0f                	push   0xf
c002d404:	6a 00                	push   0x0
c002d406:	e8 a2 f1 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d40b:	59                   	pop    ecx
c002d40c:	5a                   	pop    edx
c002d40d:	0f b6 c0             	movzx  eax,al
c002d410:	50                   	push   eax
c002d411:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d416:	99                   	cdq    
c002d417:	f7 fb                	idiv   ebx
c002d419:	99                   	cdq    
c002d41a:	f7 fb                	idiv   ebx
c002d41c:	8d 42 30             	lea    eax,[edx+0x30]
c002d41f:	0f b6 c0             	movzx  eax,al
c002d422:	50                   	push   eax
c002d423:	e8 74 f1 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d428:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d42e:	59                   	pop    ecx
c002d42f:	58                   	pop    eax
c002d430:	6a 0f                	push   0xf
c002d432:	6a 00                	push   0x0
c002d434:	e8 74 f1 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d439:	5a                   	pop    edx
c002d43a:	59                   	pop    ecx
c002d43b:	0f b6 c0             	movzx  eax,al
c002d43e:	50                   	push   eax
c002d43f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d444:	99                   	cdq    
c002d445:	f7 fb                	idiv   ebx
c002d447:	83 c2 30             	add    edx,0x30
c002d44a:	0f b6 d2             	movzx  edx,dl
c002d44d:	52                   	push   edx
c002d44e:	e8 49 f1 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d453:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d459:	58                   	pop    eax
c002d45a:	5a                   	pop    edx
c002d45b:	6a 0f                	push   0xf
c002d45d:	6a 00                	push   0x0
c002d45f:	e8 49 f1 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d464:	59                   	pop    ecx
c002d465:	b9 10 27 00 00       	mov    ecx,0x2710
c002d46a:	5a                   	pop    edx
c002d46b:	0f b6 c0             	movzx  eax,al
c002d46e:	50                   	push   eax
c002d46f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d474:	99                   	cdq    
c002d475:	f7 f9                	idiv   ecx
c002d477:	99                   	cdq    
c002d478:	f7 fb                	idiv   ebx
c002d47a:	8d 42 30             	lea    eax,[edx+0x30]
c002d47d:	0f b6 c0             	movzx  eax,al
c002d480:	50                   	push   eax
c002d481:	e8 16 f1 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d486:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d48c:	59                   	pop    ecx
c002d48d:	58                   	pop    eax
c002d48e:	6a 0f                	push   0xf
c002d490:	6a 00                	push   0x0
c002d492:	e8 16 f1 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d497:	5a                   	pop    edx
c002d498:	59                   	pop    ecx
c002d499:	0f b6 c0             	movzx  eax,al
c002d49c:	50                   	push   eax
c002d49d:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d4a2:	99                   	cdq    
c002d4a3:	f7 fd                	idiv   ebp
c002d4a5:	99                   	cdq    
c002d4a6:	f7 fb                	idiv   ebx
c002d4a8:	8d 42 30             	lea    eax,[edx+0x30]
c002d4ab:	0f b6 c0             	movzx  eax,al
c002d4ae:	50                   	push   eax
c002d4af:	e8 e8 f0 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d4b4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d4ba:	5d                   	pop    ebp
c002d4bb:	58                   	pop    eax
c002d4bc:	6a 0f                	push   0xf
c002d4be:	6a 00                	push   0x0
c002d4c0:	e8 e8 f0 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d4c5:	5a                   	pop    edx
c002d4c6:	59                   	pop    ecx
c002d4c7:	0f b6 c0             	movzx  eax,al
c002d4ca:	50                   	push   eax
c002d4cb:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d4d0:	99                   	cdq    
c002d4d1:	f7 ff                	idiv   edi
c002d4d3:	99                   	cdq    
c002d4d4:	f7 fb                	idiv   ebx
c002d4d6:	8d 42 30             	lea    eax,[edx+0x30]
c002d4d9:	0f b6 c0             	movzx  eax,al
c002d4dc:	50                   	push   eax
c002d4dd:	e8 ba f0 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d4e2:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d4e8:	5f                   	pop    edi
c002d4e9:	5d                   	pop    ebp
c002d4ea:	6a 0f                	push   0xf
c002d4ec:	6a 00                	push   0x0
c002d4ee:	e8 ba f0 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d4f3:	5a                   	pop    edx
c002d4f4:	59                   	pop    ecx
c002d4f5:	0f b6 c0             	movzx  eax,al
c002d4f8:	50                   	push   eax
c002d4f9:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d4fe:	99                   	cdq    
c002d4ff:	f7 fb                	idiv   ebx
c002d501:	99                   	cdq    
c002d502:	f7 fb                	idiv   ebx
c002d504:	8d 42 30             	lea    eax,[edx+0x30]
c002d507:	0f b6 c0             	movzx  eax,al
c002d50a:	50                   	push   eax
c002d50b:	e8 8c f0 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d510:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d516:	5f                   	pop    edi
c002d517:	5d                   	pop    ebp
c002d518:	6a 0f                	push   0xf
c002d51a:	6a 00                	push   0x0
c002d51c:	e8 8c f0 ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d521:	5a                   	pop    edx
c002d522:	59                   	pop    ecx
c002d523:	0f b6 c0             	movzx  eax,al
c002d526:	50                   	push   eax
c002d527:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d52c:	99                   	cdq    
c002d52d:	f7 fb                	idiv   ebx
c002d52f:	83 c2 30             	add    edx,0x30
c002d532:	0f b6 d2             	movzx  edx,dl
c002d535:	52                   	push   edx
c002d536:	e8 61 f0 ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d53b:	83 c4 10             	add    esp,0x10
c002d53e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d544:	eb 05                	jmp    c002d54b <SATA::read(unsigned long long, int, void*)+0x245>
c002d546:	be 01 00 00 00       	mov    esi,0x1
c002d54b:	83 c4 0c             	add    esp,0xc
c002d54e:	89 f0                	mov    eax,esi
c002d550:	5b                   	pop    ebx
c002d551:	5e                   	pop    esi
c002d552:	5f                   	pop    edi
c002d553:	5d                   	pop    ebp
c002d554:	c3                   	ret    
c002d555:	90                   	nop

c002d556 <SATA::write(unsigned long long, int, void*)>:
c002d556:	55                   	push   ebp
c002d557:	57                   	push   edi
c002d558:	56                   	push   esi
c002d559:	53                   	push   ebx
c002d55a:	83 ec 0c             	sub    esp,0xc
c002d55d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d561:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002d565:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d569:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002d56d:	8d 70 ff             	lea    esi,[eax-0x1]
c002d570:	b8 04 00 00 00       	mov    eax,0x4
c002d575:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d57b:	0f 87 2c 02 00 00    	ja     c002d7ad <SATA::write(unsigned long long, int, void*)+0x257>
c002d581:	85 db                	test   ebx,ebx
c002d583:	b8 06 00 00 00       	mov    eax,0x6
c002d588:	0f 84 1f 02 00 00    	je     c002d7ad <SATA::write(unsigned long long, int, void*)+0x257>
c002d58e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002d592:	c1 e6 09             	shl    esi,0x9
c002d595:	01 de                	add    esi,ebx
c002d597:	50                   	push   eax
c002d598:	89 d7                	mov    edi,edx
c002d59a:	50                   	push   eax
c002d59b:	83 c7 01             	add    edi,0x1
c002d59e:	6a 01                	push   0x1
c002d5a0:	89 cd                	mov    ebp,ecx
c002d5a2:	53                   	push   ebx
c002d5a3:	83 d5 00             	adc    ebp,0x0
c002d5a6:	6a 01                	push   0x1
c002d5a8:	81 c3 00 02 00 00    	add    ebx,0x200
c002d5ae:	51                   	push   ecx
c002d5af:	52                   	push   edx
c002d5b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d5b4:	e8 c7 fa ff ff       	call   c002d080 <SATA::access(unsigned long long, int, void*, bool)>
c002d5b9:	83 c4 20             	add    esp,0x20
c002d5bc:	39 f3                	cmp    ebx,esi
c002d5be:	89 fa                	mov    edx,edi
c002d5c0:	89 e9                	mov    ecx,ebp
c002d5c2:	75 d3                	jne    c002d597 <SATA::write(unsigned long long, int, void*)+0x41>
c002d5c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d5c8:	bd 10 27 00 00       	mov    ebp,0x2710
c002d5cd:	bb 0a 00 00 00       	mov    ebx,0xa
c002d5d2:	01 05 b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,eax
c002d5d8:	50                   	push   eax
c002d5d9:	50                   	push   eax
c002d5da:	6a 0f                	push   0xf
c002d5dc:	6a 00                	push   0x0
c002d5de:	e8 ca ef ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d5e3:	5a                   	pop    edx
c002d5e4:	59                   	pop    ecx
c002d5e5:	0f b6 c0             	movzx  eax,al
c002d5e8:	50                   	push   eax
c002d5e9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d5ee:	99                   	cdq    
c002d5ef:	f7 fd                	idiv   ebp
c002d5f1:	99                   	cdq    
c002d5f2:	f7 fb                	idiv   ebx
c002d5f4:	8d 42 30             	lea    eax,[edx+0x30]
c002d5f7:	0f b6 c0             	movzx  eax,al
c002d5fa:	50                   	push   eax
c002d5fb:	e8 9c ef ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d600:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d606:	5e                   	pop    esi
c002d607:	5f                   	pop    edi
c002d608:	bf e8 03 00 00       	mov    edi,0x3e8
c002d60d:	6a 0f                	push   0xf
c002d60f:	6a 00                	push   0x0
c002d611:	e8 97 ef ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d616:	5a                   	pop    edx
c002d617:	59                   	pop    ecx
c002d618:	0f b6 c0             	movzx  eax,al
c002d61b:	50                   	push   eax
c002d61c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d621:	99                   	cdq    
c002d622:	f7 ff                	idiv   edi
c002d624:	99                   	cdq    
c002d625:	f7 fb                	idiv   ebx
c002d627:	8d 42 30             	lea    eax,[edx+0x30]
c002d62a:	0f b6 c0             	movzx  eax,al
c002d62d:	50                   	push   eax
c002d62e:	e8 69 ef ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d633:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d639:	5e                   	pop    esi
c002d63a:	be 64 00 00 00       	mov    esi,0x64
c002d63f:	58                   	pop    eax
c002d640:	6a 0f                	push   0xf
c002d642:	6a 00                	push   0x0
c002d644:	e8 64 ef ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d649:	5a                   	pop    edx
c002d64a:	59                   	pop    ecx
c002d64b:	0f b6 c0             	movzx  eax,al
c002d64e:	50                   	push   eax
c002d64f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d654:	99                   	cdq    
c002d655:	f7 fe                	idiv   esi
c002d657:	99                   	cdq    
c002d658:	f7 fb                	idiv   ebx
c002d65a:	8d 42 30             	lea    eax,[edx+0x30]
c002d65d:	0f b6 c0             	movzx  eax,al
c002d660:	50                   	push   eax
c002d661:	e8 36 ef ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d666:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d66c:	58                   	pop    eax
c002d66d:	5a                   	pop    edx
c002d66e:	6a 0f                	push   0xf
c002d670:	6a 00                	push   0x0
c002d672:	e8 36 ef ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d677:	59                   	pop    ecx
c002d678:	5a                   	pop    edx
c002d679:	0f b6 c0             	movzx  eax,al
c002d67c:	50                   	push   eax
c002d67d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d682:	99                   	cdq    
c002d683:	f7 fb                	idiv   ebx
c002d685:	99                   	cdq    
c002d686:	f7 fb                	idiv   ebx
c002d688:	8d 42 30             	lea    eax,[edx+0x30]
c002d68b:	0f b6 c0             	movzx  eax,al
c002d68e:	50                   	push   eax
c002d68f:	e8 08 ef ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d694:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d69a:	59                   	pop    ecx
c002d69b:	58                   	pop    eax
c002d69c:	6a 0f                	push   0xf
c002d69e:	6a 00                	push   0x0
c002d6a0:	e8 08 ef ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d6a5:	5a                   	pop    edx
c002d6a6:	59                   	pop    ecx
c002d6a7:	0f b6 c0             	movzx  eax,al
c002d6aa:	50                   	push   eax
c002d6ab:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d6b0:	99                   	cdq    
c002d6b1:	f7 fb                	idiv   ebx
c002d6b3:	83 c2 30             	add    edx,0x30
c002d6b6:	0f b6 d2             	movzx  edx,dl
c002d6b9:	52                   	push   edx
c002d6ba:	e8 dd ee ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d6bf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d6c5:	58                   	pop    eax
c002d6c6:	5a                   	pop    edx
c002d6c7:	6a 0f                	push   0xf
c002d6c9:	6a 00                	push   0x0
c002d6cb:	e8 dd ee ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d6d0:	59                   	pop    ecx
c002d6d1:	5a                   	pop    edx
c002d6d2:	0f b6 c0             	movzx  eax,al
c002d6d5:	50                   	push   eax
c002d6d6:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d6db:	99                   	cdq    
c002d6dc:	f7 fd                	idiv   ebp
c002d6de:	99                   	cdq    
c002d6df:	f7 fb                	idiv   ebx
c002d6e1:	8d 42 30             	lea    eax,[edx+0x30]
c002d6e4:	0f b6 c0             	movzx  eax,al
c002d6e7:	50                   	push   eax
c002d6e8:	e8 af ee ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d6ed:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d6f3:	59                   	pop    ecx
c002d6f4:	5d                   	pop    ebp
c002d6f5:	6a 0f                	push   0xf
c002d6f7:	6a 00                	push   0x0
c002d6f9:	e8 af ee ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d6fe:	5a                   	pop    edx
c002d6ff:	59                   	pop    ecx
c002d700:	0f b6 c0             	movzx  eax,al
c002d703:	50                   	push   eax
c002d704:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d709:	99                   	cdq    
c002d70a:	f7 ff                	idiv   edi
c002d70c:	99                   	cdq    
c002d70d:	f7 fb                	idiv   ebx
c002d70f:	8d 42 30             	lea    eax,[edx+0x30]
c002d712:	0f b6 c0             	movzx  eax,al
c002d715:	50                   	push   eax
c002d716:	e8 81 ee ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d71b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d721:	5f                   	pop    edi
c002d722:	5d                   	pop    ebp
c002d723:	6a 0f                	push   0xf
c002d725:	6a 00                	push   0x0
c002d727:	e8 81 ee ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d72c:	5a                   	pop    edx
c002d72d:	59                   	pop    ecx
c002d72e:	0f b6 c0             	movzx  eax,al
c002d731:	50                   	push   eax
c002d732:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d737:	99                   	cdq    
c002d738:	f7 fe                	idiv   esi
c002d73a:	99                   	cdq    
c002d73b:	f7 fb                	idiv   ebx
c002d73d:	8d 42 30             	lea    eax,[edx+0x30]
c002d740:	0f b6 c0             	movzx  eax,al
c002d743:	50                   	push   eax
c002d744:	e8 53 ee ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d749:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d74f:	5e                   	pop    esi
c002d750:	5f                   	pop    edi
c002d751:	6a 0f                	push   0xf
c002d753:	6a 00                	push   0x0
c002d755:	e8 53 ee ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d75a:	5d                   	pop    ebp
c002d75b:	5a                   	pop    edx
c002d75c:	0f b6 c0             	movzx  eax,al
c002d75f:	50                   	push   eax
c002d760:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d765:	99                   	cdq    
c002d766:	f7 fb                	idiv   ebx
c002d768:	99                   	cdq    
c002d769:	f7 fb                	idiv   ebx
c002d76b:	8d 42 30             	lea    eax,[edx+0x30]
c002d76e:	0f b6 c0             	movzx  eax,al
c002d771:	50                   	push   eax
c002d772:	e8 25 ee ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d777:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d77d:	59                   	pop    ecx
c002d77e:	5e                   	pop    esi
c002d77f:	6a 0f                	push   0xf
c002d781:	6a 00                	push   0x0
c002d783:	e8 25 ee ff ff       	call   c002c5ad <combineColours(unsigned char, unsigned char)>
c002d788:	5f                   	pop    edi
c002d789:	5d                   	pop    ebp
c002d78a:	0f b6 c0             	movzx  eax,al
c002d78d:	50                   	push   eax
c002d78e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d793:	99                   	cdq    
c002d794:	f7 fb                	idiv   ebx
c002d796:	83 c2 30             	add    edx,0x30
c002d799:	0f b6 d2             	movzx  edx,dl
c002d79c:	52                   	push   edx
c002d79d:	e8 fa ed ff ff       	call   c002c59c <combineCharAndColour(char, unsigned char)>
c002d7a2:	83 c4 10             	add    esp,0x10
c002d7a5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d7ab:	31 c0                	xor    eax,eax
c002d7ad:	83 c4 0c             	add    esp,0xc
c002d7b0:	5b                   	pop    ebx
c002d7b1:	5e                   	pop    esi
c002d7b2:	5f                   	pop    edi
c002d7b3:	5d                   	pop    ebp
c002d7b4:	c3                   	ret    
c002d7b5:	90                   	nop

c002d7b6 <SATAPI::write(unsigned long long, int, void*)>:
c002d7b6:	b8 03 00 00 00       	mov    eax,0x3
c002d7bb:	c3                   	ret    

c002d7bc <SATAPI::close(int, int, void*)>:
c002d7bc:	83 ec 0c             	sub    esp,0xc
c002d7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d7c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d7c9:	85 c0                	test   eax,eax
c002d7cb:	74 0c                	je     c002d7d9 <SATAPI::close(int, int, void*)+0x1d>
c002d7cd:	8b 10                	mov    edx,DWORD PTR [eax]
c002d7cf:	83 ec 0c             	sub    esp,0xc
c002d7d2:	50                   	push   eax
c002d7d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d7d6:	83 c4 10             	add    esp,0x10
c002d7d9:	31 c0                	xor    eax,eax
c002d7db:	83 c4 0c             	add    esp,0xc
c002d7de:	c3                   	ret    
c002d7df:	90                   	nop

c002d7e0 <SATAPI::SATAPI()>:
c002d7e0:	83 ec 0c             	sub    esp,0xc
c002d7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d7e7:	83 ec 04             	sub    esp,0x4
c002d7ea:	68 00 08 00 00       	push   0x800
c002d7ef:	68 84 40 03 c0       	push   0xc0034084
c002d7f4:	50                   	push   eax
c002d7f5:	e8 8c e2 fe ff       	call   c001ba86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d7fa:	83 c4 10             	add    esp,0x10
c002d7fd:	ba 78 41 03 c0       	mov    edx,0xc0034178
c002d802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d806:	89 10                	mov    DWORD PTR [eax],edx
c002d808:	90                   	nop
c002d809:	83 c4 0c             	add    esp,0xc
c002d80c:	c3                   	ret    
c002d80d:	90                   	nop

c002d80e <SATAPI::diskRemoved()>:
c002d80e:	c3                   	ret    
c002d80f:	90                   	nop

c002d810 <SATAPI::diskInserted()>:
c002d810:	83 ec 18             	sub    esp,0x18
c002d813:	68 90 40 03 c0       	push   0xc0034090
c002d818:	e8 b5 bc fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002d81d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d821:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d828:	83 c4 1c             	add    esp,0x1c
c002d82b:	c3                   	ret    

c002d82c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d82c:	55                   	push   ebp
c002d82d:	57                   	push   edi
c002d82e:	56                   	push   esi
c002d82f:	53                   	push   ebx
c002d830:	83 ec 34             	sub    esp,0x34
c002d833:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d837:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d83b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d83f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d843:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d847:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d84d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d853:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d857:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d85d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d861:	83 c0 02             	add    eax,0x2
c002d864:	c1 e0 07             	shl    eax,0x7
c002d867:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d86b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d86f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d873:	c1 e0 07             	shl    eax,0x7
c002d876:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d87a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d87e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d888:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d88c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d892:	e8 a9 e4 ff ff       	call   c002bd40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d897:	83 c4 10             	add    esp,0x10
c002d89a:	89 c2                	mov    edx,eax
c002d89c:	b8 01 00 00 00       	mov    eax,0x1
c002d8a1:	83 fa ff             	cmp    edx,0xffffffff
c002d8a4:	0f 84 5f 02 00 00    	je     c002db09 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d8aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d8ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d8b2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d8b8:	8b 00                	mov    eax,DWORD PTR [eax]
c002d8ba:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d8c0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d8c6:	89 d1                	mov    ecx,edx
c002d8c8:	c1 e1 05             	shl    ecx,0x5
c002d8cb:	01 c8                	add    eax,ecx
c002d8cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d8cf:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d8d5:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d8db:	89 08                	mov    DWORD PTR [eax],ecx
c002d8dd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d8e3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d8e9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d8ef:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d8f2:	50                   	push   eax
c002d8f3:	68 90 00 00 00       	push   0x90
c002d8f8:	6a 00                	push   0x0
c002d8fa:	53                   	push   ebx
c002d8fb:	e8 f0 2b fd ff       	call   c00004f0 <memset>
c002d900:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d903:	b9 0c 00 00 00       	mov    ecx,0xc
c002d908:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d90c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d90e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d914:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d918:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d91c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d922:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d926:	48                   	dec    eax
c002d927:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d92c:	89 c1                	mov    ecx,eax
c002d92e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d934:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d939:	09 c8                	or     eax,ecx
c002d93b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d941:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d947:	83 c8 80             	or     eax,0xffffff80
c002d94a:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d950:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d953:	25 00 7f 00 00       	and    eax,0x7f00
c002d958:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d95d:	66 89 03             	mov    WORD PTR [ebx],ax
c002d960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d964:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c002d968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d96c:	c1 e8 10             	shr    eax,0x10
c002d96f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d976:	c1 e8 18             	shr    eax,0x18
c002d979:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002d97c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d980:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d987:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d98a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d98e:	83 c4 10             	add    esp,0x10
c002d991:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d995:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d999:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002d99d:	31 c0                	xor    eax,eax
c002d99f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002d9a5:	80 e1 88             	and    cl,0x88
c002d9a8:	74 0a                	je     c002d9b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002d9aa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d9af:	74 0a                	je     c002d9bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002d9b1:	40                   	inc    eax
c002d9b2:	eb eb                	jmp    c002d99f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002d9b4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d9b9:	75 43                	jne    c002d9fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002d9bb:	83 ec 0c             	sub    esp,0xc
c002d9be:	68 a8 40 03 c0       	push   0xc00340a8
c002d9c3:	e8 0a bb fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002d9c8:	58                   	pop    eax
c002d9c9:	5a                   	pop    edx
c002d9ca:	68 bd 40 03 c0       	push   0xc00340bd
c002d9cf:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d9d5:	e8 9a 9c fe ff       	call   c0017674 <VgaText::puts(char const*)>
c002d9da:	59                   	pop    ecx
c002d9db:	5b                   	pop    ebx
c002d9dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d9e0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d9e6:	e8 ef e3 ff ff       	call   c002bdda <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d9eb:	5e                   	pop    esi
c002d9ec:	5f                   	pop    edi
c002d9ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d9f1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d9f7:	e8 be e3 ff ff       	call   c002bdba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d9fc:	eb 48                	jmp    c002da46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002d9fe:	b8 01 00 00 00       	mov    eax,0x1
c002da03:	88 d1                	mov    cl,dl
c002da05:	d3 e0                	shl    eax,cl
c002da07:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c002da0c:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002da12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002da16:	89 c7                	mov    edi,eax
c002da18:	c1 e3 07             	shl    ebx,0x7
c002da1b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002da1f:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002da25:	85 c7                	test   edi,eax
c002da27:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002da2d:	0f 84 a3 00 00 00    	je     c002dad6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c002da33:	0f ba e0 1e          	bt     eax,0x1e
c002da37:	73 1a                	jae    c002da53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c002da39:	83 ec 0c             	sub    esp,0xc
c002da3c:	68 cf 40 03 c0       	push   0xc00340cf
c002da41:	e8 8c ba fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002da46:	83 c4 10             	add    esp,0x10
c002da49:	b8 01 00 00 00       	mov    eax,0x1
c002da4e:	e9 b6 00 00 00       	jmp    c002db09 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002da53:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c002da59:	83 f8 0d             	cmp    eax,0xd
c002da5c:	77 0a                	ja     c002da68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c002da5e:	83 ec 0c             	sub    esp,0xc
c002da61:	68 c8 00 00 00       	push   0xc8
c002da66:	eb 28                	jmp    c002da90 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002da68:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002da6e:	83 f8 0d             	cmp    eax,0xd
c002da71:	77 0a                	ja     c002da7d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c002da73:	83 ec 0c             	sub    esp,0xc
c002da76:	68 58 02 00 00       	push   0x258
c002da7b:	eb 13                	jmp    c002da90 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002da7d:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002da83:	83 f8 06             	cmp    eax,0x6
c002da86:	77 10                	ja     c002da98 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c002da88:	83 ec 0c             	sub    esp,0xc
c002da8b:	68 dc 05 00 00       	push   0x5dc
c002da90:	e8 2f 7d ff ff       	call   c00257c4 <milliTenthSleep(unsigned int)>
c002da95:	83 c4 10             	add    esp,0x10
c002da98:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002da9c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002da9f:	75 06                	jne    c002daa7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c002daa1:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002daa5:	74 15                	je     c002dabc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002daa7:	83 fe 06             	cmp    esi,0x6
c002daaa:	77 10                	ja     c002dabc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002daac:	83 ec 0c             	sub    esp,0xc
c002daaf:	68 c4 09 00 00       	push   0x9c4
c002dab4:	e8 0b 7d ff ff       	call   c00257c4 <milliTenthSleep(unsigned int)>
c002dab9:	83 c4 10             	add    esp,0x10
c002dabc:	46                   	inc    esi
c002dabd:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002dac3:	0f 85 56 ff ff ff    	jne    c002da1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002dac9:	83 ec 0c             	sub    esp,0xc
c002dacc:	68 e2 40 03 c0       	push   0xc00340e2
c002dad1:	e9 6b ff ff ff       	jmp    c002da41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002dad6:	0f ba e0 1e          	bt     eax,0x1e
c002dada:	73 0d                	jae    c002dae9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c002dadc:	83 ec 0c             	sub    esp,0xc
c002dadf:	68 f6 40 03 c0       	push   0xc00340f6
c002dae4:	e9 58 ff ff ff       	jmp    c002da41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002dae9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002daee:	74 17                	je     c002db07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002daf0:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002daf5:	74 10                	je     c002db07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002daf7:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002dafd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002db01:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002db05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002db07:	31 c0                	xor    eax,eax
c002db09:	83 c4 2c             	add    esp,0x2c
c002db0c:	5b                   	pop    ebx
c002db0d:	5e                   	pop    esi
c002db0e:	5f                   	pop    edi
c002db0f:	5d                   	pop    ebp
c002db10:	c3                   	ret    
c002db11:	90                   	nop

c002db12 <SATAPI::eject()>:
c002db12:	57                   	push   edi
c002db13:	b9 03 00 00 00       	mov    ecx,0x3
c002db18:	83 ec 18             	sub    esp,0x18
c002db1b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002db1f:	fc                   	cld    
c002db20:	31 c0                	xor    eax,eax
c002db22:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002db24:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002db29:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002db2e:	50                   	push   eax
c002db2f:	6a 00                	push   0x0
c002db31:	6a 00                	push   0x0
c002db33:	6a 00                	push   0x0
c002db35:	6a 00                	push   0x0
c002db37:	6a 02                	push   0x2
c002db39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002db3d:	50                   	push   eax
c002db3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002db42:	e8 e5 fc ff ff       	call   c002d82c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002db47:	83 c4 38             	add    esp,0x38
c002db4a:	31 c0                	xor    eax,eax
c002db4c:	5f                   	pop    edi
c002db4d:	c3                   	ret    

c002db4e <SATAPI::detectMedia()>:
c002db4e:	53                   	push   ebx
c002db4f:	83 ec 14             	sub    esp,0x14
c002db52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002db56:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002db5c:	e8 9f f8 fe ff       	call   c001d400 <VCache::writeWriteBuffer()>
c002db61:	59                   	pop    ecx
c002db62:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002db68:	e8 83 f8 fe ff       	call   c001d3f0 <VCache::invalidateReadBuffer()>
c002db6d:	c7 04 24 0b 41 03 c0 	mov    DWORD PTR [esp],0xc003410b
c002db74:	e8 59 b9 fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002db79:	83 c4 10             	add    esp,0x10
c002db7c:	31 c0                	xor    eax,eax
c002db7e:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002db85:	85 d2                	test   edx,edx
c002db87:	74 0f                	je     c002db98 <SATAPI::detectMedia()+0x4a>
c002db89:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002db8f:	75 07                	jne    c002db98 <SATAPI::detectMedia()+0x4a>
c002db91:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002db98:	40                   	inc    eax
c002db99:	83 f8 1a             	cmp    eax,0x1a
c002db9c:	75 e0                	jne    c002db7e <SATAPI::detectMedia()+0x30>
c002db9e:	83 c4 08             	add    esp,0x8
c002dba1:	5b                   	pop    ebx
c002dba2:	c3                   	ret    
c002dba3:	90                   	nop

c002dba4 <SATAPI::open(int, int, void*)>:
c002dba4:	56                   	push   esi
c002dba5:	53                   	push   ebx
c002dba6:	51                   	push   ecx
c002dba7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002dbab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002dbaf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002dbb9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002dbbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dbc3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002dbcd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002dbd7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002dbde:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002dbe4:	e8 c2 8d fe ff       	call   c00169ab <Phys::allocatePage()>
c002dbe9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002dbef:	89 c6                	mov    esi,eax
c002dbf1:	e8 b5 8d fe ff       	call   c00169ab <Phys::allocatePage()>
c002dbf6:	81 c6 00 10 00 00    	add    esi,0x1000
c002dbfc:	39 c6                	cmp    esi,eax
c002dbfe:	74 10                	je     c002dc10 <SATAPI::open(int, int, void*)+0x6c>
c002dc00:	83 ec 0c             	sub    esp,0xc
c002dc03:	68 20 41 03 c0       	push   0xc0034120
c002dc08:	e8 89 29 ff ff       	call   c0020596 <KePanic(char const*)>
c002dc0d:	83 c4 10             	add    esp,0x10
c002dc10:	83 ec 0c             	sub    esp,0xc
c002dc13:	6a 02                	push   0x2
c002dc15:	e8 a3 a5 fe ff       	call   c00181bd <Virt::allocateKernelVirtualPages(int)>
c002dc1a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002dc20:	6a 03                	push   0x3
c002dc22:	50                   	push   eax
c002dc23:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002dc29:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002dc2f:	e8 92 ac fe ff       	call   c00188c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c002dc34:	83 c4 14             	add    esp,0x14
c002dc37:	68 78 01 00 00       	push   0x178
c002dc3c:	e8 5b 8a fe ff       	call   c001669c <malloc>
c002dc41:	83 c4 0c             	add    esp,0xc
c002dc44:	6a 00                	push   0x0
c002dc46:	68 ff ff ff 7f       	push   0x7fffffff
c002dc4b:	6a 00                	push   0x0
c002dc4d:	6a 00                	push   0x0
c002dc4f:	53                   	push   ebx
c002dc50:	68 36 41 03 c0       	push   0xc0034136
c002dc55:	89 c6                	mov    esi,eax
c002dc57:	50                   	push   eax
c002dc58:	e8 01 ec fe ff       	call   c001c85e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002dc5d:	83 c4 14             	add    esp,0x14
c002dc60:	56                   	push   esi
c002dc61:	e8 b8 ec fe ff       	call   c001c91e <LogicalDisk::assignDriveLetter()>
c002dc66:	5a                   	pop    edx
c002dc67:	59                   	pop    ecx
c002dc68:	0f be c0             	movsx  eax,al
c002dc6b:	50                   	push   eax
c002dc6c:	68 7c 3f 03 c0       	push   0xc0033f7c
c002dc71:	e8 5c b8 fe ff       	call   c00194d2 <Dbg::kprintf(char const*, ...)>
c002dc76:	58                   	pop    eax
c002dc77:	5a                   	pop    edx
c002dc78:	56                   	push   esi
c002dc79:	53                   	push   ebx
c002dc7a:	e8 25 da fe ff       	call   c001b6a4 <Device::addChild(Device*)>
c002dc7f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002dc85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002dc88:	e8 61 de fe ff       	call   c001baee <PhysicalDisk::startCache()>
c002dc8d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002dc94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002dc97:	e8 b2 fe ff ff       	call   c002db4e <SATAPI::detectMedia()>
c002dc9c:	83 c4 14             	add    esp,0x14
c002dc9f:	31 c0                	xor    eax,eax
c002dca1:	5b                   	pop    ebx
c002dca2:	5e                   	pop    esi
c002dca3:	c3                   	ret    

c002dca4 <SATAPI::read(unsigned long long, int, void*)>:
c002dca4:	55                   	push   ebp
c002dca5:	57                   	push   edi
c002dca6:	56                   	push   esi
c002dca7:	53                   	push   ebx
c002dca8:	83 ec 3c             	sub    esp,0x3c
c002dcab:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002dcaf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002dcb3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002dcb7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002dcbb:	83 fd 04             	cmp    ebp,0x4
c002dcbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002dcc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002dcc6:	7e 10                	jle    c002dcd8 <SATAPI::read(unsigned long long, int, void*)+0x34>
c002dcc8:	83 ec 0c             	sub    esp,0xc
c002dccb:	68 44 41 03 c0       	push   0xc0034144
c002dcd0:	e8 c1 28 ff ff       	call   c0020596 <KePanic(char const*)>
c002dcd5:	83 c4 10             	add    esp,0x10
c002dcd8:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002dcde:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002dce4:	51                   	push   ecx
c002dce5:	50                   	push   eax
c002dce6:	83 c0 02             	add    eax,0x2
c002dce9:	c1 e0 07             	shl    eax,0x7
c002dcec:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002dcf2:	50                   	push   eax
c002dcf3:	52                   	push   edx
c002dcf4:	e8 0b e1 ff ff       	call   c002be04 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002dcf9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002dcfd:	b9 03 00 00 00       	mov    ecx,0x3
c002dd02:	fc                   	cld    
c002dd03:	31 c0                	xor    eax,eax
c002dd05:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002dd07:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002dd0c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002dd11:	83 c4 0c             	add    esp,0xc
c002dd14:	6a 00                	push   0x0
c002dd16:	6a 00                	push   0x0
c002dd18:	6a 00                	push   0x0
c002dd1a:	6a 00                	push   0x0
c002dd1c:	6a 02                	push   0x2
c002dd1e:	8d 44 24 30          	lea    eax,[esp+0x30]
c002dd22:	50                   	push   eax
c002dd23:	53                   	push   ebx
c002dd24:	e8 03 fb ff ff       	call   c002d82c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002dd29:	83 c4 20             	add    esp,0x20
c002dd2c:	85 c0                	test   eax,eax
c002dd2e:	89 c6                	mov    esi,eax
c002dd30:	75 46                	jne    c002dd78 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002dd32:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002dd36:	b9 03 00 00 00       	mov    ecx,0x3
c002dd3b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002dd3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002dd41:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002dd46:	0f c8                	bswap  eax
c002dd48:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002dd4c:	89 e8                	mov    eax,ebp
c002dd4e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002dd52:	50                   	push   eax
c002dd53:	55                   	push   ebp
c002dd54:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002dd58:	c1 e5 0b             	shl    ebp,0xb
c002dd5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002dd5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002dd63:	55                   	push   ebp
c002dd64:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002dd68:	50                   	push   eax
c002dd69:	53                   	push   ebx
c002dd6a:	e8 bd fa ff ff       	call   c002d82c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002dd6f:	83 c4 20             	add    esp,0x20
c002dd72:	85 c0                	test   eax,eax
c002dd74:	89 c6                	mov    esi,eax
c002dd76:	74 0c                	je     c002dd84 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c002dd78:	83 ec 0c             	sub    esp,0xc
c002dd7b:	53                   	push   ebx
c002dd7c:	e8 cd fd ff ff       	call   c002db4e <SATAPI::detectMedia()>
c002dd81:	83 c4 10             	add    esp,0x10
c002dd84:	83 c4 3c             	add    esp,0x3c
c002dd87:	89 f0                	mov    eax,esi
c002dd89:	5b                   	pop    ebx
c002dd8a:	5e                   	pop    esi
c002dd8b:	5f                   	pop    edi
c002dd8c:	5d                   	pop    ebp
c002dd8d:	c3                   	ret    

c002dd8e <IOAPIC::close(int, int, void*)>:
c002dd8e:	b8 00 00 00 00       	mov    eax,0x0
c002dd93:	c3                   	ret    

c002dd94 <apicGetBase()>:
c002dd94:	55                   	push   ebp
c002dd95:	89 e5                	mov    ebp,esp
c002dd97:	83 ec 18             	sub    esp,0x18
c002dd9a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002dd9f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002dda5:	83 e0 08             	and    eax,0x8
c002dda8:	0f b6 c0             	movzx  eax,al
c002ddab:	85 c0                	test   eax,eax
c002ddad:	75 07                	jne    c002ddb6 <apicGetBase()+0x22>
c002ddaf:	b8 00 00 00 00       	mov    eax,0x0
c002ddb4:	eb 21                	jmp    c002ddd7 <apicGetBase()+0x43>
c002ddb6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002ddbb:	83 ec 08             	sub    esp,0x8
c002ddbe:	6a 1b                	push   0x1b
c002ddc0:	50                   	push   eax
c002ddc1:	e8 68 7e fe ff       	call   c0015c2e <Computer::rdmsr(unsigned int)>
c002ddc6:	83 c4 10             	add    esp,0x10
c002ddc9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002ddcc:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002ddcf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002ddd2:	25 00 00 ff ff       	and    eax,0xffff0000
c002ddd7:	c9                   	leave  
c002ddd8:	c3                   	ret    
c002ddd9:	90                   	nop

c002ddda <IOAPIC::IOAPIC()>:
c002ddda:	83 ec 0c             	sub    esp,0xc
c002dddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dde1:	83 ec 08             	sub    esp,0x8
c002dde4:	68 a8 41 03 c0       	push   0xc00341a8
c002dde9:	50                   	push   eax
c002ddea:	e8 17 da fe ff       	call   c001b806 <Device::Device(char const*)>
c002ddef:	83 c4 10             	add    esp,0x10
c002ddf2:	ba b8 41 03 c0       	mov    edx,0xc00341b8
c002ddf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddfb:	89 10                	mov    DWORD PTR [eax],edx
c002ddfd:	90                   	nop
c002ddfe:	83 c4 0c             	add    esp,0xc
c002de01:	c3                   	ret    

c002de02 <apicOpen()>:
c002de02:	55                   	push   ebp
c002de03:	89 e5                	mov    ebp,esp
c002de05:	53                   	push   ebx
c002de06:	83 ec 34             	sub    esp,0x34
c002de09:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002de0e:	83 f0 01             	xor    eax,0x1
c002de11:	0f b6 c0             	movzx  eax,al
c002de14:	85 c0                	test   eax,eax
c002de16:	0f 84 a3 00 00 00    	je     c002debf <apicOpen()+0xbd>
c002de1c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002de20:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002de25:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002de29:	0f b6 c0             	movzx  eax,al
c002de2c:	39 c2                	cmp    edx,eax
c002de2e:	0f 83 84 00 00 00    	jae    c002deb8 <apicOpen()+0xb6>
c002de34:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002de3b:	83 ec 0c             	sub    esp,0xc
c002de3e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002de41:	e8 56 88 fe ff       	call   c001669c <malloc>
c002de46:	83 c4 10             	add    esp,0x10
c002de49:	89 c3                	mov    ebx,eax
c002de4b:	83 ec 0c             	sub    esp,0xc
c002de4e:	53                   	push   ebx
c002de4f:	e8 86 ff ff ff       	call   c002ddda <IOAPIC::IOAPIC()>
c002de54:	83 c4 10             	add    esp,0x10
c002de57:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002de5a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002de5e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002de61:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002de68:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002de6d:	83 c0 01             	add    eax,0x1
c002de70:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002de75:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002de7a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002de80:	83 ec 08             	sub    esp,0x8
c002de83:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002de86:	50                   	push   eax
c002de87:	e8 18 d8 fe ff       	call   c001b6a4 <Device::addChild(Device*)>
c002de8c:	83 c4 10             	add    esp,0x10
c002de8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002de92:	8b 00                	mov    eax,DWORD PTR [eax]
c002de94:	83 c0 08             	add    eax,0x8
c002de97:	8b 00                	mov    eax,DWORD PTR [eax]
c002de99:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002de9d:	6a 00                	push   0x0
c002de9f:	6a 00                	push   0x0
c002dea1:	52                   	push   edx
c002dea2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dea5:	ff d0                	call   eax
c002dea7:	83 c4 10             	add    esp,0x10
c002deaa:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002dead:	83 c0 01             	add    eax,0x1
c002deb0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002deb3:	e9 68 ff ff ff       	jmp    c002de20 <apicOpen()+0x1e>
c002deb8:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002debf:	e8 d0 fe ff ff       	call   c002dd94 <apicGetBase()>
c002dec4:	05 f0 00 00 00       	add    eax,0xf0
c002dec9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002decc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002decf:	8b 00                	mov    eax,DWORD PTR [eax]
c002ded1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002ded4:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002dedb:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002dee2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002dee5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002dee8:	89 10                	mov    DWORD PTR [eax],edx
c002deea:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002def1:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002def6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002def9:	7d 7c                	jge    c002df77 <apicOpen()+0x175>
c002defb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002defe:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002df05:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002df08:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002df0b:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002df12:	c1 e8 08             	shr    eax,0x8
c002df15:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002df19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002df1c:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002df23:	c1 e8 18             	shr    eax,0x18
c002df26:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002df29:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002df2d:	3d ff 00 00 00       	cmp    eax,0xff
c002df32:	75 3a                	jne    c002df6e <apicOpen()+0x16c>
c002df34:	e8 5b fe ff ff       	call   c002dd94 <apicGetBase()>
c002df39:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002df3d:	83 fa 01             	cmp    edx,0x1
c002df40:	75 07                	jne    c002df49 <apicOpen()+0x147>
c002df42:	ba 60 03 00 00       	mov    edx,0x360
c002df47:	eb 05                	jmp    c002df4e <apicOpen()+0x14c>
c002df49:	ba 50 03 00 00       	mov    edx,0x350
c002df4e:	01 d0                	add    eax,edx
c002df50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002df53:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002df56:	8b 00                	mov    eax,DWORD PTR [eax]
c002df58:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002df5b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002df62:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002df66:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002df69:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002df6c:	89 10                	mov    DWORD PTR [eax],edx
c002df6e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002df72:	e9 7a ff ff ff       	jmp    c002def1 <apicOpen()+0xef>
c002df77:	90                   	nop
c002df78:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002df7b:	c9                   	leave  
c002df7c:	c3                   	ret    
c002df7d:	90                   	nop

c002df7e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002df7e:	55                   	push   ebp
c002df7f:	89 e5                	mov    ebp,esp
c002df81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002df84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002df8a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002df8d:	72 1d                	jb     c002dfac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002df8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002df92:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002df98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002df9b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002dfa1:	01 d0                	add    eax,edx
c002dfa3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002dfa6:	73 04                	jae    c002dfac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002dfa8:	b0 01                	mov    al,0x1
c002dfaa:	eb 02                	jmp    c002dfae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002dfac:	b0 00                	mov    al,0x0
c002dfae:	5d                   	pop    ebp
c002dfaf:	c3                   	ret    

c002dfb0 <IOAPIC::read(int)>:
c002dfb0:	55                   	push   ebp
c002dfb1:	89 e5                	mov    ebp,esp
c002dfb3:	83 ec 10             	sub    esp,0x10
c002dfb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dfb9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dfbf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dfc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dfc5:	0f b6 d0             	movzx  edx,al
c002dfc8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dfcb:	89 10                	mov    DWORD PTR [eax],edx
c002dfcd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dfd0:	83 c0 10             	add    eax,0x10
c002dfd3:	8b 00                	mov    eax,DWORD PTR [eax]
c002dfd5:	c9                   	leave  
c002dfd6:	c3                   	ret    
c002dfd7:	90                   	nop

c002dfd8 <IOAPIC::open(int, int, void*)>:
c002dfd8:	55                   	push   ebp
c002dfd9:	89 e5                	mov    ebp,esp
c002dfdb:	57                   	push   edi
c002dfdc:	56                   	push   esi
c002dfdd:	53                   	push   ebx
c002dfde:	83 ec 04             	sub    esp,0x4
c002dfe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dfe4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002dfe7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dfed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dff0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dff6:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002dffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e000:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002e006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e009:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002e00f:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002e016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e019:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002e01f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e022:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002e028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e02b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002e031:	0f b6 f0             	movzx  esi,al
c002e034:	89 d0                	mov    eax,edx
c002e036:	ba 00 00 00 00       	mov    edx,0x0
c002e03b:	89 c7                	mov    edi,eax
c002e03d:	83 e7 ff             	and    edi,0xffffffff
c002e040:	89 f9                	mov    ecx,edi
c002e042:	0f b6 da             	movzx  ebx,dl
c002e045:	89 c8                	mov    eax,ecx
c002e047:	89 da                	mov    edx,ebx
c002e049:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002e04c:	8d 5e 08             	lea    ebx,[esi+0x8]
c002e04f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002e053:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002e057:	83 e0 00             	and    eax,0x0
c002e05a:	09 d0                	or     eax,edx
c002e05c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002e060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e063:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002e069:	8d 50 01             	lea    edx,[eax+0x1]
c002e06c:	88 d1                	mov    cl,dl
c002e06e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002e071:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002e077:	0f b6 d0             	movzx  edx,al
c002e07a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e07d:	83 c2 08             	add    edx,0x8
c002e080:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002e084:	0f b6 c9             	movzx  ecx,cl
c002e087:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002e08d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002e091:	6a 01                	push   0x1
c002e093:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e096:	e8 15 ff ff ff       	call   c002dfb0 <IOAPIC::read(int)>
c002e09b:	83 c4 08             	add    esp,0x8
c002e09e:	c1 f8 10             	sar    eax,0x10
c002e0a1:	0f b6 c0             	movzx  eax,al
c002e0a4:	8d 50 01             	lea    edx,[eax+0x1]
c002e0a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e0aa:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002e0b0:	b8 00 00 00 00       	mov    eax,0x0
c002e0b5:	8d 65 f4             	lea    esp,[ebp-0xc]
c002e0b8:	5b                   	pop    ebx
c002e0b9:	5e                   	pop    esi
c002e0ba:	5f                   	pop    edi
c002e0bb:	5d                   	pop    ebp
c002e0bc:	c3                   	ret    
c002e0bd:	90                   	nop

c002e0be <IOAPIC::write(int, int)>:
c002e0be:	55                   	push   ebp
c002e0bf:	89 e5                	mov    ebp,esp
c002e0c1:	83 ec 10             	sub    esp,0x10
c002e0c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e0c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002e0cd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002e0d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e0d3:	0f b6 d0             	movzx  edx,al
c002e0d6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e0d9:	89 10                	mov    DWORD PTR [eax],edx
c002e0db:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e0de:	8d 50 10             	lea    edx,[eax+0x10]
c002e0e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002e0e4:	89 02                	mov    DWORD PTR [edx],eax
c002e0e6:	90                   	nop
c002e0e7:	c9                   	leave  
c002e0e8:	c3                   	ret    
c002e0e9:	90                   	nop

c002e0ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002e0ea:	55                   	push   ebp
c002e0eb:	89 e5                	mov    ebp,esp
c002e0ed:	53                   	push   ebx
c002e0ee:	83 ec 2c             	sub    esp,0x2c
c002e0f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e0f4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002e0f7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002e0fa:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002e0fd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002e100:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002e103:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002e106:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002e109:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002e10c:	88 d8                	mov    al,bl
c002e10e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002e111:	88 c8                	mov    al,cl
c002e113:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002e116:	88 d0                	mov    al,dl
c002e118:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002e11b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002e11f:	83 c0 08             	add    eax,0x8
c002e122:	d1 e0                	shl    eax,1
c002e124:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002e127:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002e12b:	83 c0 08             	add    eax,0x8
c002e12e:	d1 e0                	shl    eax,1
c002e130:	83 c0 01             	add    eax,0x1
c002e133:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002e136:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002e139:	50                   	push   eax
c002e13a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e13d:	e8 6e fe ff ff       	call   c002dfb0 <IOAPIC::read(int)>
c002e142:	83 c4 08             	add    esp,0x8
c002e145:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002e148:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002e14f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e152:	c1 e0 18             	shl    eax,0x18
c002e155:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002e158:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002e15b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002e15e:	52                   	push   edx
c002e15f:	50                   	push   eax
c002e160:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e163:	e8 56 ff ff ff       	call   c002e0be <IOAPIC::write(int, int)>
c002e168:	83 c4 0c             	add    esp,0xc
c002e16b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e16e:	50                   	push   eax
c002e16f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e172:	e8 39 fe ff ff       	call   c002dfb0 <IOAPIC::read(int)>
c002e177:	83 c4 08             	add    esp,0x8
c002e17a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002e17d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002e184:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002e18b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002e192:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002e196:	85 c0                	test   eax,eax
c002e198:	74 09                	je     c002e1a3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002e19a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002e1a1:	eb 07                	jmp    c002e1aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002e1a3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002e1aa:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002e1ae:	85 c0                	test   eax,eax
c002e1b0:	74 09                	je     c002e1bb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002e1b2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002e1b9:	eb 07                	jmp    c002e1c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002e1bb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002e1c2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002e1c9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002e1cd:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002e1d0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002e1d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e1d6:	52                   	push   edx
c002e1d7:	50                   	push   eax
c002e1d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e1db:	e8 de fe ff ff       	call   c002e0be <IOAPIC::write(int, int)>
c002e1e0:	83 c4 0c             	add    esp,0xc
c002e1e3:	90                   	nop
c002e1e4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002e1e7:	c9                   	leave  
c002e1e8:	c3                   	ret    
c002e1e9:	66 90                	xchg   ax,ax
c002e1eb:	90                   	nop

c002e1ec <APICTimer::close(int, int, void*)>:
c002e1ec:	b8 00 00 00 00       	mov    eax,0x0
c002e1f1:	c3                   	ret    
c002e1f2:	66 90                	xchg   ax,ax

c002e1f4 <apicTimerHandler(regs*, void*)>:
c002e1f4:	83 ec 0c             	sub    esp,0xc
c002e1f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e1fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c002e1fd:	b8 10 27 00 00       	mov    eax,0x2710
c002e202:	ba 00 00 00 00       	mov    edx,0x0
c002e207:	f7 f1                	div    ecx
c002e209:	83 ec 0c             	sub    esp,0xc
c002e20c:	50                   	push   eax
c002e20d:	e8 0a ef fe ff       	call   c001d11c <timerHandler(unsigned int)>
c002e212:	83 c4 10             	add    esp,0x10
c002e215:	90                   	nop
c002e216:	83 c4 0c             	add    esp,0xc
c002e219:	c3                   	ret    
c002e21a:	66 90                	xchg   ax,ax

c002e21c <APICTimer::open(int, int, void*)>:
c002e21c:	83 ec 0c             	sub    esp,0xc
c002e21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e223:	8b 00                	mov    eax,DWORD PTR [eax]
c002e225:	83 c0 24             	add    eax,0x24
c002e228:	8b 00                	mov    eax,DWORD PTR [eax]
c002e22a:	83 ec 08             	sub    esp,0x8
c002e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e235:	ff d0                	call   eax
c002e237:	83 c4 10             	add    esp,0x10
c002e23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e23e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e242:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002e248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e24c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e250:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002e256:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e25a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002e260:	83 ec 0c             	sub    esp,0xc
c002e263:	51                   	push   ecx
c002e264:	6a 01                	push   0x1
c002e266:	68 f4 e1 02 c0       	push   0xc002e1f4
c002e26b:	52                   	push   edx
c002e26c:	50                   	push   eax
c002e26d:	e8 de d3 fe ff       	call   c001b650 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e272:	83 c4 20             	add    esp,0x20
c002e275:	89 c2                	mov    edx,eax
c002e277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e27b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e281:	b8 00 00 00 00       	mov    eax,0x0
c002e286:	83 c4 0c             	add    esp,0xc
c002e289:	c3                   	ret    
c002e28a:	66 90                	xchg   ax,ax

c002e28c <APICTimer::write(int)>:
c002e28c:	83 ec 0c             	sub    esp,0xc
c002e28f:	83 ec 0c             	sub    esp,0xc
c002e292:	68 dc 41 03 c0       	push   0xc00341dc
c002e297:	e8 fa 22 ff ff       	call   c0020596 <KePanic(char const*)>
c002e29c:	83 c4 10             	add    esp,0x10
c002e29f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e2a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e2a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e2ad:	90                   	nop
c002e2ae:	83 c4 0c             	add    esp,0xc
c002e2b1:	c3                   	ret    
c002e2b2:	66 90                	xchg   ax,ax

c002e2b4 <APICTimer::APICTimer()>:
c002e2b4:	83 ec 0c             	sub    esp,0xc
c002e2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e2bb:	83 ec 08             	sub    esp,0x8
c002e2be:	68 ec 41 03 c0       	push   0xc00341ec
c002e2c3:	50                   	push   eax
c002e2c4:	e8 87 ed fe ff       	call   c001d050 <Timer::Timer(char const*)>
c002e2c9:	83 c4 10             	add    esp,0x10
c002e2cc:	ba 00 42 03 c0       	mov    edx,0xc0034200
c002e2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e2d5:	89 10                	mov    DWORD PTR [eax],edx
c002e2d7:	90                   	nop
c002e2d8:	83 c4 0c             	add    esp,0xc
c002e2db:	c3                   	ret    

c002e2dc <PIT::write(int)>:
c002e2dc:	83 ec 10             	sub    esp,0x10
c002e2df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e2e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e2e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e2ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e2f1:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002e2f6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002e2fb:	89 c2                	mov    edx,eax
c002e2fd:	c1 fa 1f             	sar    edx,0x1f
c002e300:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002e304:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e308:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002e30f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002e314:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002e318:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002e31d:	ee                   	out    dx,al
c002e31e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e322:	0f b6 c0             	movzx  eax,al
c002e325:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002e32c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002e330:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002e334:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002e339:	ee                   	out    dx,al
c002e33a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e33e:	c1 f8 08             	sar    eax,0x8
c002e341:	0f b6 c0             	movzx  eax,al
c002e344:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002e34b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002e34f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002e353:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002e358:	ee                   	out    dx,al
c002e359:	90                   	nop
c002e35a:	83 c4 10             	add    esp,0x10
c002e35d:	c3                   	ret    
c002e35e:	66 90                	xchg   ax,ax

c002e360 <pitHandler(regs*, void*)>:
c002e360:	83 ec 0c             	sub    esp,0xc
c002e363:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002e369:	b8 10 27 00 00       	mov    eax,0x2710
c002e36e:	89 c2                	mov    edx,eax
c002e370:	c1 fa 1f             	sar    edx,0x1f
c002e373:	f7 f9                	idiv   ecx
c002e375:	83 ec 0c             	sub    esp,0xc
c002e378:	50                   	push   eax
c002e379:	e8 9e ed fe ff       	call   c001d11c <timerHandler(unsigned int)>
c002e37e:	83 c4 10             	add    esp,0x10
c002e381:	90                   	nop
c002e382:	83 c4 0c             	add    esp,0xc
c002e385:	c3                   	ret    
c002e386:	66 90                	xchg   ax,ax

c002e388 <PIT::open(int, int, void*)>:
c002e388:	83 ec 0c             	sub    esp,0xc
c002e38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e38f:	8b 00                	mov    eax,DWORD PTR [eax]
c002e391:	83 c0 24             	add    eax,0x24
c002e394:	8b 00                	mov    eax,DWORD PTR [eax]
c002e396:	83 ec 08             	sub    esp,0x8
c002e399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e39d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e3a1:	ff d0                	call   eax
c002e3a3:	83 c4 10             	add    esp,0x10
c002e3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e3aa:	83 ec 0c             	sub    esp,0xc
c002e3ad:	6a 00                	push   0x0
c002e3af:	6a 01                	push   0x1
c002e3b1:	68 60 e3 02 c0       	push   0xc002e360
c002e3b6:	6a 00                	push   0x0
c002e3b8:	50                   	push   eax
c002e3b9:	e8 92 d2 fe ff       	call   c001b650 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e3be:	83 c4 20             	add    esp,0x20
c002e3c1:	89 c2                	mov    edx,eax
c002e3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e3c7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e3cd:	b8 00 00 00 00       	mov    eax,0x0
c002e3d2:	83 c4 0c             	add    esp,0xc
c002e3d5:	c3                   	ret    
c002e3d6:	66 90                	xchg   ax,ax

c002e3d8 <PIT::close(int, int, void*)>:
c002e3d8:	83 ec 0c             	sub    esp,0xc
c002e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e3df:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002e3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e3ed:	6a 01                	push   0x1
c002e3ef:	68 60 e3 02 c0       	push   0xc002e360
c002e3f4:	6a 00                	push   0x0
c002e3f6:	50                   	push   eax
c002e3f7:	e8 8a d2 fe ff       	call   c001b686 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002e3fc:	83 c4 10             	add    esp,0x10
c002e3ff:	b8 00 00 00 00       	mov    eax,0x0
c002e404:	83 c4 0c             	add    esp,0xc
c002e407:	c3                   	ret    

c002e408 <PIT::PIT()>:
c002e408:	83 ec 0c             	sub    esp,0xc
c002e40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e40f:	83 ec 08             	sub    esp,0x8
c002e412:	68 28 42 03 c0       	push   0xc0034228
c002e417:	50                   	push   eax
c002e418:	e8 33 ec fe ff       	call   c001d050 <Timer::Timer(char const*)>
c002e41d:	83 c4 10             	add    esp,0x10
c002e420:	ba 50 42 03 c0       	mov    edx,0xc0034250
c002e425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e429:	89 10                	mov    DWORD PTR [eax],edx
c002e42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e42f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e435:	0f b6 d0             	movzx  edx,al
c002e438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e43c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002e443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e447:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e44d:	0f b6 d0             	movzx  edx,al
c002e450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e454:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002e459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e45d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e463:	8d 50 01             	lea    edx,[eax+0x1]
c002e466:	88 d1                	mov    cl,dl
c002e468:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e46c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002e472:	0f b6 d0             	movzx  edx,al
c002e475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e479:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002e47d:	83 e1 3f             	and    ecx,0x3f
c002e480:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002e484:	90                   	nop
c002e485:	83 c4 0c             	add    esp,0xc
c002e488:	c3                   	ret    
c002e489:	66 90                	xchg   ax,ax
c002e48b:	66 90                	xchg   ax,ax
c002e48d:	66 90                	xchg   ax,ax
c002e48f:	90                   	nop

c002e490 <avxDetect>:
c002e490:	b8 01 00 00 00       	mov    eax,0x1
c002e495:	0f a2                	cpuid  
c002e497:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e49d:	74 15                	je     c002e4b4 <avxDetect.noAVX>
c002e49f:	b8 01 00 00 00       	mov    eax,0x1
c002e4a4:	0f a2                	cpuid  
c002e4a6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e4ac:	74 06                	je     c002e4b4 <avxDetect.noAVX>
c002e4ae:	b8 01 00 00 00       	mov    eax,0x1
c002e4b3:	c3                   	ret    

c002e4b4 <avxDetect.noAVX>:
c002e4b4:	b8 00 00 00 00       	mov    eax,0x0
c002e4b9:	c3                   	ret    

c002e4ba <avxSave>:
c002e4ba:	53                   	push   ebx
c002e4bb:	52                   	push   edx
c002e4bc:	31 c0                	xor    eax,eax
c002e4be:	48                   	dec    eax
c002e4bf:	89 c2                	mov    edx,eax
c002e4c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e4c5:	0f ae 23             	xsave  [ebx]
c002e4c8:	5a                   	pop    edx
c002e4c9:	5b                   	pop    ebx
c002e4ca:	c3                   	ret    

c002e4cb <avxLoad>:
c002e4cb:	53                   	push   ebx
c002e4cc:	52                   	push   edx
c002e4cd:	31 c0                	xor    eax,eax
c002e4cf:	48                   	dec    eax
c002e4d0:	89 c2                	mov    edx,eax
c002e4d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e4d6:	0f ae 2b             	xrstor [ebx]
c002e4d9:	5a                   	pop    edx
c002e4da:	5b                   	pop    ebx
c002e4db:	c3                   	ret    

c002e4dc <avxInit>:
c002e4dc:	e8 47 03 00 00       	call   c002e828 <sseInit>
c002e4e1:	50                   	push   eax
c002e4e2:	51                   	push   ecx
c002e4e3:	0f 20 e0             	mov    eax,cr4
c002e4e6:	0d 00 00 04 00       	or     eax,0x40000
c002e4eb:	0f 22 e0             	mov    cr4,eax
c002e4ee:	31 c9                	xor    ecx,ecx
c002e4f0:	0f 01 d0             	xgetbv 
c002e4f3:	0d 07 00 00 00       	or     eax,0x7
c002e4f8:	0f 01 d1             	xsetbv 
c002e4fb:	59                   	pop    ecx
c002e4fc:	58                   	pop    eax
c002e4fd:	c3                   	ret    

c002e4fe <avxClose>:
c002e4fe:	c3                   	ret    
c002e4ff:	90                   	nop

c002e500 <isr0>:
c002e500:	fa                   	cli    
c002e501:	68 00 00 00 00       	push   0x0
c002e506:	68 00 00 00 00       	push   0x0
c002e50b:	e9 56 01 00 00       	jmp    c002e666 <int_common_stub>

c002e510 <isr1>:
c002e510:	fa                   	cli    
c002e511:	6a 00                	push   0x0
c002e513:	6a 01                	push   0x1
c002e515:	e9 4c 01 00 00       	jmp    c002e666 <int_common_stub>

c002e51a <isr2>:
c002e51a:	fa                   	cli    
c002e51b:	6a 00                	push   0x0
c002e51d:	6a 02                	push   0x2
c002e51f:	e9 42 01 00 00       	jmp    c002e666 <int_common_stub>

c002e524 <isr3>:
c002e524:	fa                   	cli    
c002e525:	6a 00                	push   0x0
c002e527:	6a 03                	push   0x3
c002e529:	e9 38 01 00 00       	jmp    c002e666 <int_common_stub>

c002e52e <isr4>:
c002e52e:	fa                   	cli    
c002e52f:	6a 00                	push   0x0
c002e531:	6a 04                	push   0x4
c002e533:	e9 2e 01 00 00       	jmp    c002e666 <int_common_stub>

c002e538 <isr5>:
c002e538:	fa                   	cli    
c002e539:	6a 00                	push   0x0
c002e53b:	6a 05                	push   0x5
c002e53d:	e9 24 01 00 00       	jmp    c002e666 <int_common_stub>

c002e542 <isr6>:
c002e542:	fa                   	cli    
c002e543:	6a 00                	push   0x0
c002e545:	6a 06                	push   0x6
c002e547:	e9 1a 01 00 00       	jmp    c002e666 <int_common_stub>

c002e54c <isr7>:
c002e54c:	fa                   	cli    
c002e54d:	6a 00                	push   0x0
c002e54f:	6a 07                	push   0x7
c002e551:	e9 10 01 00 00       	jmp    c002e666 <int_common_stub>

c002e556 <isr8>:
c002e556:	fa                   	cli    
c002e557:	6a 08                	push   0x8
c002e559:	e9 08 01 00 00       	jmp    c002e666 <int_common_stub>

c002e55e <isr9>:
c002e55e:	fa                   	cli    
c002e55f:	6a 00                	push   0x0
c002e561:	6a 09                	push   0x9
c002e563:	e9 fe 00 00 00       	jmp    c002e666 <int_common_stub>

c002e568 <isr10>:
c002e568:	fa                   	cli    
c002e569:	6a 0a                	push   0xa
c002e56b:	e9 f6 00 00 00       	jmp    c002e666 <int_common_stub>

c002e570 <isr11>:
c002e570:	fa                   	cli    
c002e571:	6a 0b                	push   0xb
c002e573:	e9 ee 00 00 00       	jmp    c002e666 <int_common_stub>

c002e578 <isr12>:
c002e578:	fa                   	cli    
c002e579:	6a 0c                	push   0xc
c002e57b:	e9 e6 00 00 00       	jmp    c002e666 <int_common_stub>

c002e580 <isr13>:
c002e580:	fa                   	cli    
c002e581:	6a 0d                	push   0xd
c002e583:	53                   	push   ebx
c002e584:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e588:	81 fb 56 e7 02 c0    	cmp    ebx,0xc002e756
c002e58e:	5b                   	pop    ebx
c002e58f:	0f 84 c3 01 00 00    	je     c002e758 <finishSignal2>
c002e595:	e9 cc 00 00 00       	jmp    c002e666 <int_common_stub>

c002e59a <isr14>:
c002e59a:	fa                   	cli    
c002e59b:	6a 0e                	push   0xe
c002e59d:	e9 c4 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5a2 <isr15>:
c002e5a2:	fa                   	cli    
c002e5a3:	6a 00                	push   0x0
c002e5a5:	6a 0f                	push   0xf
c002e5a7:	e9 ba 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5ac <isr16>:
c002e5ac:	fa                   	cli    
c002e5ad:	6a 00                	push   0x0
c002e5af:	6a 10                	push   0x10
c002e5b1:	e9 b0 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5b6 <isr17>:
c002e5b6:	fa                   	cli    
c002e5b7:	6a 00                	push   0x0
c002e5b9:	6a 11                	push   0x11
c002e5bb:	e9 a6 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5c0 <isr18>:
c002e5c0:	fa                   	cli    
c002e5c1:	6a 00                	push   0x0
c002e5c3:	6a 12                	push   0x12
c002e5c5:	e9 9c 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5ca <irq3>:
c002e5ca:	fa                   	cli    
c002e5cb:	6a 00                	push   0x0
c002e5cd:	6a 23                	push   0x23
c002e5cf:	e9 92 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5d4 <irq4>:
c002e5d4:	fa                   	cli    
c002e5d5:	6a 00                	push   0x0
c002e5d7:	6a 24                	push   0x24
c002e5d9:	e9 88 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5de <irq5>:
c002e5de:	fa                   	cli    
c002e5df:	6a 00                	push   0x0
c002e5e1:	6a 25                	push   0x25
c002e5e3:	e9 7e 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5e8 <irq6>:
c002e5e8:	fa                   	cli    
c002e5e9:	6a 00                	push   0x0
c002e5eb:	6a 26                	push   0x26
c002e5ed:	e9 74 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5f2 <irq7>:
c002e5f2:	fa                   	cli    
c002e5f3:	6a 00                	push   0x0
c002e5f5:	6a 27                	push   0x27
c002e5f7:	e9 6a 00 00 00       	jmp    c002e666 <int_common_stub>

c002e5fc <irq8>:
c002e5fc:	fa                   	cli    
c002e5fd:	6a 00                	push   0x0
c002e5ff:	6a 28                	push   0x28
c002e601:	e9 60 00 00 00       	jmp    c002e666 <int_common_stub>

c002e606 <irq9>:
c002e606:	fa                   	cli    
c002e607:	6a 00                	push   0x0
c002e609:	6a 29                	push   0x29
c002e60b:	e9 56 00 00 00       	jmp    c002e666 <int_common_stub>

c002e610 <irq10>:
c002e610:	fa                   	cli    
c002e611:	6a 00                	push   0x0
c002e613:	6a 2a                	push   0x2a
c002e615:	e9 4c 00 00 00       	jmp    c002e666 <int_common_stub>

c002e61a <irq11>:
c002e61a:	fa                   	cli    
c002e61b:	6a 00                	push   0x0
c002e61d:	6a 2b                	push   0x2b
c002e61f:	e9 42 00 00 00       	jmp    c002e666 <int_common_stub>

c002e624 <irq12>:
c002e624:	fa                   	cli    
c002e625:	6a 00                	push   0x0
c002e627:	6a 2c                	push   0x2c
c002e629:	e9 38 00 00 00       	jmp    c002e666 <int_common_stub>

c002e62e <irq13>:
c002e62e:	fa                   	cli    
c002e62f:	6a 00                	push   0x0
c002e631:	6a 2d                	push   0x2d
c002e633:	e9 2e 00 00 00       	jmp    c002e666 <int_common_stub>

c002e638 <irq14>:
c002e638:	fa                   	cli    
c002e639:	6a 00                	push   0x0
c002e63b:	6a 2e                	push   0x2e
c002e63d:	e9 24 00 00 00       	jmp    c002e666 <int_common_stub>

c002e642 <irq15>:
c002e642:	fa                   	cli    
c002e643:	6a 00                	push   0x0
c002e645:	6a 2f                	push   0x2f
c002e647:	e9 1a 00 00 00       	jmp    c002e666 <int_common_stub>

c002e64c <irq1>:
c002e64c:	fa                   	cli    
c002e64d:	6a 00                	push   0x0
c002e64f:	6a 21                	push   0x21
c002e651:	eb 13                	jmp    c002e666 <int_common_stub>

c002e653 <irq2>:
c002e653:	fa                   	cli    
c002e654:	6a 00                	push   0x0
c002e656:	6a 22                	push   0x22
c002e658:	eb 0c                	jmp    c002e666 <int_common_stub>

c002e65a <isr96>:
c002e65a:	6a 00                	push   0x0
c002e65c:	6a 60                	push   0x60
c002e65e:	fb                   	sti    
c002e65f:	eb 37                	jmp    c002e698 <syscall_common_stub>

c002e661 <irq0>:
c002e661:	fa                   	cli    
c002e662:	6a 00                	push   0x0
c002e664:	6a 20                	push   0x20

c002e666 <int_common_stub>:
c002e666:	60                   	pusha  
c002e667:	1e                   	push   ds
c002e668:	06                   	push   es
c002e669:	0f a0                	push   fs
c002e66b:	0f a8                	push   gs
c002e66d:	66 b8 10 00          	mov    ax,0x10
c002e671:	66 8e d8             	mov    ds,ax
c002e674:	66 8e c0             	mov    es,ax
c002e677:	66 8e e0             	mov    fs,ax
c002e67a:	66 8e e8             	mov    gs,ax
c002e67d:	54                   	push   esp
c002e67e:	fc                   	cld    
c002e67f:	e8 e0 d4 fe ff       	call   c001bb64 <int_handler>
c002e684:	81 c4 04 00 00 00    	add    esp,0x4
c002e68a:	0f a9                	pop    gs
c002e68c:	0f a1                	pop    fs
c002e68e:	07                   	pop    es
c002e68f:	1f                   	pop    ds
c002e690:	61                   	popa   
c002e691:	81 c4 08 00 00 00    	add    esp,0x8
c002e697:	cf                   	iret   

c002e698 <syscall_common_stub>:
c002e698:	60                   	pusha  
c002e699:	1e                   	push   ds
c002e69a:	06                   	push   es
c002e69b:	0f a0                	push   fs
c002e69d:	0f a8                	push   gs
c002e69f:	66 b8 10 00          	mov    ax,0x10
c002e6a3:	66 8e d8             	mov    ds,ax
c002e6a6:	66 8e c0             	mov    es,ax
c002e6a9:	66 8e e0             	mov    fs,ax
c002e6ac:	66 8e e8             	mov    gs,ax
c002e6af:	54                   	push   esp
c002e6b0:	fc                   	cld    
c002e6b1:	e8 ae d4 fe ff       	call   c001bb64 <int_handler>
c002e6b6:	81 c4 04 00 00 00    	add    esp,0x4
c002e6bc:	0f a9                	pop    gs
c002e6be:	0f a1                	pop    fs
c002e6c0:	07                   	pop    es
c002e6c1:	1f                   	pop    ds
c002e6c2:	e8 f5 28 ff ff       	call   c0020fbc <KiCheckSignalZ>
c002e6c7:	3d 00 00 00 00       	cmp    eax,0x0
c002e6cc:	0f 84 c0 00 00 00    	je     c002e792 <skipSignals>
c002e6d2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e6d7:	61                   	popa   
c002e6d8:	53                   	push   ebx
c002e6d9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e6df:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e6e2:	5b                   	pop    ebx
c002e6e3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e6e8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e6eb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e6ee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e6f1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e6f4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e6f7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e6fa:	81 c4 08 00 00 00    	add    esp,0x8
c002e700:	5e                   	pop    esi
c002e701:	5b                   	pop    ebx
c002e702:	59                   	pop    ecx
c002e703:	5a                   	pop    edx
c002e704:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e707:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e70a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e70d:	52                   	push   edx
c002e70e:	51                   	push   ecx
c002e70f:	53                   	push   ebx
c002e710:	56                   	push   esi
c002e711:	81 ec 08 00 00 00    	sub    esp,0x8
c002e717:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e71a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e71d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e720:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e723:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e726:	60                   	pusha  
c002e727:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e72d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e730:	89 e3                	mov    ebx,esp
c002e732:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e735:	52                   	push   edx
c002e736:	68 56 e7 02 c0       	push   0xc002e756
c002e73b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e73e:	89 dc                	mov    esp,ebx
c002e740:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e743:	68 23 00 00 00       	push   0x23
c002e748:	51                   	push   ecx
c002e749:	68 02 02 00 00       	push   0x202
c002e74e:	68 1b 00 00 00       	push   0x1b
c002e753:	ff 36                	push   DWORD PTR [esi]
c002e755:	cf                   	iret   

c002e756 <finishSignal>:
c002e756:	cd 0f                	int    0xf

c002e758 <finishSignal2>:
c002e758:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e75e:	e8 d6 28 ff ff       	call   c0021039 <KiFinishSignalZ>
c002e763:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e769:	68 23 00 00 00       	push   0x23
c002e76e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e771:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e774:	68 1b 00 00 00       	push   0x1b
c002e779:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e77c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e77f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e782:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e785:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e788:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e78b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e78e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e791:	cf                   	iret   

c002e792 <skipSignals>:
c002e792:	61                   	popa   
c002e793:	81 c4 08 00 00 00    	add    esp,0x8
c002e799:	cf                   	iret   
c002e79a:	90                   	nop
c002e79b:	90                   	nop

c002e79c <irq16>:
c002e79c:	fa                   	cli    
c002e79d:	6a 00                	push   0x0
c002e79f:	6a 30                	push   0x30
c002e7a1:	e9 c0 fe ff ff       	jmp    c002e666 <int_common_stub>

c002e7a6 <irq17>:
c002e7a6:	fa                   	cli    
c002e7a7:	6a 00                	push   0x0
c002e7a9:	6a 31                	push   0x31
c002e7ab:	e9 b6 fe ff ff       	jmp    c002e666 <int_common_stub>

c002e7b0 <irq18>:
c002e7b0:	fa                   	cli    
c002e7b1:	6a 00                	push   0x0
c002e7b3:	6a 32                	push   0x32
c002e7b5:	e9 ac fe ff ff       	jmp    c002e666 <int_common_stub>

c002e7ba <irq19>:
c002e7ba:	fa                   	cli    
c002e7bb:	6a 00                	push   0x0
c002e7bd:	6a 33                	push   0x33
c002e7bf:	e9 a2 fe ff ff       	jmp    c002e666 <int_common_stub>

c002e7c4 <irq20>:
c002e7c4:	fa                   	cli    
c002e7c5:	6a 00                	push   0x0
c002e7c7:	6a 34                	push   0x34
c002e7c9:	e9 98 fe ff ff       	jmp    c002e666 <int_common_stub>

c002e7ce <irq21>:
c002e7ce:	fa                   	cli    
c002e7cf:	6a 00                	push   0x0
c002e7d1:	6a 35                	push   0x35
c002e7d3:	e9 8e fe ff ff       	jmp    c002e666 <int_common_stub>

c002e7d8 <irq22>:
c002e7d8:	fa                   	cli    
c002e7d9:	6a 00                	push   0x0
c002e7db:	6a 36                	push   0x36
c002e7dd:	e9 84 fe ff ff       	jmp    c002e666 <int_common_stub>

c002e7e2 <irq23>:
c002e7e2:	fa                   	cli    
c002e7e3:	6a 00                	push   0x0
c002e7e5:	6a 37                	push   0x37
c002e7e7:	e9 7a fe ff ff       	jmp    c002e666 <int_common_stub>
c002e7ec:	66 90                	xchg   ax,ax
c002e7ee:	66 90                	xchg   ax,ax

c002e7f0 <i386GetRDRAND>:
c002e7f0:	b9 64 00 00 00       	mov    ecx,0x64

c002e7f5 <retry>:
c002e7f5:	0f c7 f0             	rdrand eax
c002e7f8:	72 05                	jb     c002e7ff <retry.done>
c002e7fa:	e2 f9                	loop   c002e7f5 <retry>

c002e7fc <retry.fail>:
c002e7fc:	31 c0                	xor    eax,eax
c002e7fe:	c3                   	ret    

c002e7ff <retry.done>:
c002e7ff:	c3                   	ret    

c002e800 <sseDetect>:
c002e800:	b8 01 00 00 00       	mov    eax,0x1
c002e805:	0f a2                	cpuid  
c002e807:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e80d:	74 06                	je     c002e815 <sseDetect.noSSE>
c002e80f:	b8 01 00 00 00       	mov    eax,0x1
c002e814:	c3                   	ret    

c002e815 <sseDetect.noSSE>:
c002e815:	31 c0                	xor    eax,eax
c002e817:	c3                   	ret    

c002e818 <sseSave>:
c002e818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e81c:	0f ae 00             	fxsave [eax]
c002e81f:	c3                   	ret    

c002e820 <sseLoad>:
c002e820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e824:	0f ae 08             	fxrstor [eax]
c002e827:	c3                   	ret    

c002e828 <sseInit>:
c002e828:	e8 42 00 00 00       	call   c002e86f <x87Init>
c002e82d:	0f 20 e0             	mov    eax,cr4
c002e830:	66 0d 00 06          	or     ax,0x600
c002e834:	0f 22 e0             	mov    cr4,eax
c002e837:	c3                   	ret    

c002e838 <sseClose>:
c002e838:	c3                   	ret    
c002e839:	66 90                	xchg   ax,ax
c002e83b:	66 90                	xchg   ax,ax
c002e83d:	66 90                	xchg   ax,ax
c002e83f:	90                   	nop

c002e840 <value_37F>:
c002e840:	7f 03                	jg     c002e845 <value_37A+0x1>

c002e842 <value_37E>:
c002e842:	7e 03                	jle    c002e847 <x87Detect+0x1>

c002e844 <value_37A>:
c002e844:	7a 03                	jp     c002e849 <x87Detect+0x3>

c002e846 <x87Detect>:
c002e846:	b8 01 00 00 00       	mov    eax,0x1
c002e84b:	0f a2                	cpuid  
c002e84d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e853:	74 06                	je     c002e85b <x87Detect.nox87>
c002e855:	b8 01 00 00 00       	mov    eax,0x1
c002e85a:	c3                   	ret    

c002e85b <x87Detect.nox87>:
c002e85b:	b8 00 00 00 00       	mov    eax,0x0
c002e860:	c3                   	ret    

c002e861 <x87Save>:
c002e861:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e865:	dd 30                	fnsave [eax]
c002e867:	c3                   	ret    

c002e868 <x87Load>:
c002e868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e86c:	dd 20                	frstor [eax]
c002e86e:	c3                   	ret    

c002e86f <x87Init>:
c002e86f:	0f 20 c0             	mov    eax,cr0
c002e872:	66 25 fb ff          	and    ax,0xfffb
c002e876:	66 0d 22 00          	or     ax,0x22
c002e87a:	0f 22 c0             	mov    cr0,eax
c002e87d:	db e3                	fninit 
c002e87f:	0f 06                	clts   
c002e881:	d9 2d 44 e8 02 c0    	fldcw  WORD PTR ds:0xc002e844
c002e887:	c3                   	ret    

c002e888 <x87Close>:
c002e888:	c3                   	ret    
c002e889:	66 90                	xchg   ax,ax
c002e88b:	90                   	nop

c002e88c <__do_global_ctors_aux>:
c002e88c:	a1 40 f8 02 c0       	mov    eax,ds:0xc002f840
c002e891:	83 f8 ff             	cmp    eax,0xffffffff
c002e894:	74 1a                	je     c002e8b0 <__do_global_ctors_aux+0x24>
c002e896:	55                   	push   ebp
c002e897:	89 e5                	mov    ebp,esp
c002e899:	53                   	push   ebx
c002e89a:	52                   	push   edx
c002e89b:	bb 40 f8 02 c0       	mov    ebx,0xc002f840
c002e8a0:	ff d0                	call   eax
c002e8a2:	83 eb 04             	sub    ebx,0x4
c002e8a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e8a7:	83 f8 ff             	cmp    eax,0xffffffff
c002e8aa:	75 f4                	jne    c002e8a0 <__do_global_ctors_aux+0x14>
c002e8ac:	58                   	pop    eax
c002e8ad:	5b                   	pop    ebx
c002e8ae:	5d                   	pop    ebp
c002e8af:	c3                   	ret    
c002e8b0:	c3                   	ret    
c002e8b1:	66 90                	xchg   ax,ax
c002e8b3:	90                   	nop

c002e8b4 <__divdi3>:
c002e8b4:	55                   	push   ebp
c002e8b5:	57                   	push   edi
c002e8b6:	56                   	push   esi
c002e8b7:	53                   	push   ebx
c002e8b8:	83 ec 1c             	sub    esp,0x1c
c002e8bb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e8bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e8c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e8c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e8ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e8ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e8d2:	85 db                	test   ebx,ebx
c002e8d4:	0f 88 8e 00 00 00    	js     c002e968 <__divdi3+0xb4>
c002e8da:	89 dd                	mov    ebp,ebx
c002e8dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e8e4:	89 d3                	mov    ebx,edx
c002e8e6:	85 d2                	test   edx,edx
c002e8e8:	79 0d                	jns    c002e8f7 <__divdi3+0x43>
c002e8ea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e8ee:	f7 d8                	neg    eax
c002e8f0:	83 d2 00             	adc    edx,0x0
c002e8f3:	f7 da                	neg    edx
c002e8f5:	89 d3                	mov    ebx,edx
c002e8f7:	89 c7                	mov    edi,eax
c002e8f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e8fc:	85 db                	test   ebx,ebx
c002e8fe:	75 48                	jne    c002e948 <__divdi3+0x94>
c002e900:	39 ef                	cmp    edi,ebp
c002e902:	76 24                	jbe    c002e928 <__divdi3+0x74>
c002e904:	89 ea                	mov    edx,ebp
c002e906:	f7 f7                	div    edi
c002e908:	89 c1                	mov    ecx,eax
c002e90a:	31 f6                	xor    esi,esi
c002e90c:	89 c8                	mov    eax,ecx
c002e90e:	89 f2                	mov    edx,esi
c002e910:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e914:	85 c9                	test   ecx,ecx
c002e916:	74 07                	je     c002e91f <__divdi3+0x6b>
c002e918:	f7 d8                	neg    eax
c002e91a:	83 d2 00             	adc    edx,0x0
c002e91d:	f7 da                	neg    edx
c002e91f:	83 c4 1c             	add    esp,0x1c
c002e922:	5b                   	pop    ebx
c002e923:	5e                   	pop    esi
c002e924:	5f                   	pop    edi
c002e925:	5d                   	pop    ebp
c002e926:	c3                   	ret    
c002e927:	90                   	nop
c002e928:	85 ff                	test   edi,edi
c002e92a:	75 0b                	jne    c002e937 <__divdi3+0x83>
c002e92c:	b8 01 00 00 00       	mov    eax,0x1
c002e931:	31 d2                	xor    edx,edx
c002e933:	f7 f3                	div    ebx
c002e935:	89 c7                	mov    edi,eax
c002e937:	31 d2                	xor    edx,edx
c002e939:	89 e8                	mov    eax,ebp
c002e93b:	f7 f7                	div    edi
c002e93d:	89 c6                	mov    esi,eax
c002e93f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e942:	f7 f7                	div    edi
c002e944:	89 c1                	mov    ecx,eax
c002e946:	eb c4                	jmp    c002e90c <__divdi3+0x58>
c002e948:	39 eb                	cmp    ebx,ebp
c002e94a:	77 3c                	ja     c002e988 <__divdi3+0xd4>
c002e94c:	0f bd f3             	bsr    esi,ebx
c002e94f:	83 f6 1f             	xor    esi,0x1f
c002e952:	75 40                	jne    c002e994 <__divdi3+0xe0>
c002e954:	39 eb                	cmp    ebx,ebp
c002e956:	72 09                	jb     c002e961 <__divdi3+0xad>
c002e958:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e95b:	0f 87 97 00 00 00    	ja     c002e9f8 <__divdi3+0x144>
c002e961:	b9 01 00 00 00       	mov    ecx,0x1
c002e966:	eb a4                	jmp    c002e90c <__divdi3+0x58>
c002e968:	f7 d9                	neg    ecx
c002e96a:	83 d3 00             	adc    ebx,0x0
c002e96d:	f7 db                	neg    ebx
c002e96f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e972:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e976:	89 dd                	mov    ebp,ebx
c002e978:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e980:	e9 5f ff ff ff       	jmp    c002e8e4 <__divdi3+0x30>
c002e985:	8d 76 00             	lea    esi,[esi+0x0]
c002e988:	31 f6                	xor    esi,esi
c002e98a:	31 c9                	xor    ecx,ecx
c002e98c:	e9 7b ff ff ff       	jmp    c002e90c <__divdi3+0x58>
c002e991:	8d 76 00             	lea    esi,[esi+0x0]
c002e994:	b8 20 00 00 00       	mov    eax,0x20
c002e999:	29 f0                	sub    eax,esi
c002e99b:	89 f1                	mov    ecx,esi
c002e99d:	d3 e3                	shl    ebx,cl
c002e99f:	89 fa                	mov    edx,edi
c002e9a1:	88 c1                	mov    cl,al
c002e9a3:	d3 ea                	shr    edx,cl
c002e9a5:	09 da                	or     edx,ebx
c002e9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e9ab:	89 f1                	mov    ecx,esi
c002e9ad:	d3 e7                	shl    edi,cl
c002e9af:	89 eb                	mov    ebx,ebp
c002e9b1:	88 c1                	mov    cl,al
c002e9b3:	d3 eb                	shr    ebx,cl
c002e9b5:	89 f1                	mov    ecx,esi
c002e9b7:	d3 e5                	shl    ebp,cl
c002e9b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e9bc:	88 c1                	mov    cl,al
c002e9be:	d3 ea                	shr    edx,cl
c002e9c0:	09 d5                	or     ebp,edx
c002e9c2:	89 e8                	mov    eax,ebp
c002e9c4:	89 da                	mov    edx,ebx
c002e9c6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e9ca:	89 d3                	mov    ebx,edx
c002e9cc:	89 c5                	mov    ebp,eax
c002e9ce:	f7 e7                	mul    edi
c002e9d0:	39 d3                	cmp    ebx,edx
c002e9d2:	72 18                	jb     c002e9ec <__divdi3+0x138>
c002e9d4:	74 0a                	je     c002e9e0 <__divdi3+0x12c>
c002e9d6:	89 e9                	mov    ecx,ebp
c002e9d8:	31 f6                	xor    esi,esi
c002e9da:	e9 2d ff ff ff       	jmp    c002e90c <__divdi3+0x58>
c002e9df:	90                   	nop
c002e9e0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e9e3:	89 f1                	mov    ecx,esi
c002e9e5:	d3 e7                	shl    edi,cl
c002e9e7:	39 c7                	cmp    edi,eax
c002e9e9:	73 eb                	jae    c002e9d6 <__divdi3+0x122>
c002e9eb:	90                   	nop
c002e9ec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e9ef:	31 f6                	xor    esi,esi
c002e9f1:	e9 16 ff ff ff       	jmp    c002e90c <__divdi3+0x58>
c002e9f6:	66 90                	xchg   ax,ax
c002e9f8:	31 c9                	xor    ecx,ecx
c002e9fa:	e9 0d ff ff ff       	jmp    c002e90c <__divdi3+0x58>
c002e9ff:	90                   	nop

c002ea00 <__moddi3>:
c002ea00:	55                   	push   ebp
c002ea01:	57                   	push   edi
c002ea02:	56                   	push   esi
c002ea03:	53                   	push   ebx
c002ea04:	83 ec 2c             	sub    esp,0x2c
c002ea07:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002ea0b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002ea0f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002ea13:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002ea17:	85 db                	test   ebx,ebx
c002ea19:	0f 88 85 00 00 00    	js     c002eaa4 <__moddi3+0xa4>
c002ea1f:	89 de                	mov    esi,ebx
c002ea21:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002ea29:	89 d7                	mov    edi,edx
c002ea2b:	85 d2                	test   edx,edx
c002ea2d:	79 09                	jns    c002ea38 <__moddi3+0x38>
c002ea2f:	f7 d8                	neg    eax
c002ea31:	83 d2 00             	adc    edx,0x0
c002ea34:	f7 da                	neg    edx
c002ea36:	89 d7                	mov    edi,edx
c002ea38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ea3c:	89 cd                	mov    ebp,ecx
c002ea3e:	85 ff                	test   edi,edi
c002ea40:	75 52                	jne    c002ea94 <__moddi3+0x94>
c002ea42:	89 c3                	mov    ebx,eax
c002ea44:	39 f0                	cmp    eax,esi
c002ea46:	76 24                	jbe    c002ea6c <__moddi3+0x6c>
c002ea48:	89 c8                	mov    eax,ecx
c002ea4a:	89 f2                	mov    edx,esi
c002ea4c:	f7 f3                	div    ebx
c002ea4e:	89 d6                	mov    esi,edx
c002ea50:	89 f0                	mov    eax,esi
c002ea52:	31 d2                	xor    edx,edx
c002ea54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002ea58:	85 c9                	test   ecx,ecx
c002ea5a:	74 07                	je     c002ea63 <__moddi3+0x63>
c002ea5c:	f7 d8                	neg    eax
c002ea5e:	83 d2 00             	adc    edx,0x0
c002ea61:	f7 da                	neg    edx
c002ea63:	83 c4 2c             	add    esp,0x2c
c002ea66:	5b                   	pop    ebx
c002ea67:	5e                   	pop    esi
c002ea68:	5f                   	pop    edi
c002ea69:	5d                   	pop    ebp
c002ea6a:	c3                   	ret    
c002ea6b:	90                   	nop
c002ea6c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002ea70:	85 db                	test   ebx,ebx
c002ea72:	75 0d                	jne    c002ea81 <__moddi3+0x81>
c002ea74:	b8 01 00 00 00       	mov    eax,0x1
c002ea79:	31 d2                	xor    edx,edx
c002ea7b:	f7 f7                	div    edi
c002ea7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ea81:	89 f0                	mov    eax,esi
c002ea83:	31 d2                	xor    edx,edx
c002ea85:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002ea89:	f7 f7                	div    edi
c002ea8b:	89 e8                	mov    eax,ebp
c002ea8d:	f7 f7                	div    edi
c002ea8f:	89 d6                	mov    esi,edx
c002ea91:	eb bd                	jmp    c002ea50 <__moddi3+0x50>
c002ea93:	90                   	nop
c002ea94:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002ea98:	39 f7                	cmp    edi,esi
c002ea9a:	76 20                	jbe    c002eabc <__moddi3+0xbc>
c002ea9c:	89 c8                	mov    eax,ecx
c002ea9e:	89 f2                	mov    edx,esi
c002eaa0:	eb b2                	jmp    c002ea54 <__moddi3+0x54>
c002eaa2:	66 90                	xchg   ax,ax
c002eaa4:	f7 d9                	neg    ecx
c002eaa6:	83 d3 00             	adc    ebx,0x0
c002eaa9:	f7 db                	neg    ebx
c002eaab:	89 de                	mov    esi,ebx
c002eaad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002eab5:	e9 6f ff ff ff       	jmp    c002ea29 <__moddi3+0x29>
c002eaba:	66 90                	xchg   ax,ax
c002eabc:	0f bd c7             	bsr    eax,edi
c002eabf:	83 f0 1f             	xor    eax,0x1f
c002eac2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002eac6:	75 24                	jne    c002eaec <__moddi3+0xec>
c002eac8:	39 f7                	cmp    edi,esi
c002eaca:	72 06                	jb     c002ead2 <__moddi3+0xd2>
c002eacc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002ead0:	77 0c                	ja     c002eade <__moddi3+0xde>
c002ead2:	89 e9                	mov    ecx,ebp
c002ead4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002ead8:	19 fe                	sbb    esi,edi
c002eada:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002eade:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002eae2:	89 f2                	mov    edx,esi
c002eae4:	e9 6b ff ff ff       	jmp    c002ea54 <__moddi3+0x54>
c002eae9:	8d 76 00             	lea    esi,[esi+0x0]
c002eaec:	b8 20 00 00 00       	mov    eax,0x20
c002eaf1:	89 c2                	mov    edx,eax
c002eaf3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002eaf7:	29 da                	sub    edx,ebx
c002eaf9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002eafd:	88 d9                	mov    cl,bl
c002eaff:	d3 e7                	shl    edi,cl
c002eb01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002eb05:	88 d1                	mov    cl,dl
c002eb07:	d3 e8                	shr    eax,cl
c002eb09:	09 c7                	or     edi,eax
c002eb0b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002eb0f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002eb13:	89 d8                	mov    eax,ebx
c002eb15:	88 d9                	mov    cl,bl
c002eb17:	d3 e7                	shl    edi,cl
c002eb19:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002eb1d:	89 f3                	mov    ebx,esi
c002eb1f:	88 d1                	mov    cl,dl
c002eb21:	d3 eb                	shr    ebx,cl
c002eb23:	89 c7                	mov    edi,eax
c002eb25:	88 c1                	mov    cl,al
c002eb27:	d3 e6                	shl    esi,cl
c002eb29:	89 e8                	mov    eax,ebp
c002eb2b:	88 d1                	mov    cl,dl
c002eb2d:	d3 e8                	shr    eax,cl
c002eb2f:	09 f0                	or     eax,esi
c002eb31:	89 f9                	mov    ecx,edi
c002eb33:	d3 e5                	shl    ebp,cl
c002eb35:	89 da                	mov    edx,ebx
c002eb37:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002eb3b:	89 d3                	mov    ebx,edx
c002eb3d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002eb41:	89 c6                	mov    esi,eax
c002eb43:	89 d1                	mov    ecx,edx
c002eb45:	39 d3                	cmp    ebx,edx
c002eb47:	72 27                	jb     c002eb70 <__moddi3+0x170>
c002eb49:	74 21                	je     c002eb6c <__moddi3+0x16c>
c002eb4b:	29 f5                	sub    ebp,esi
c002eb4d:	19 cb                	sbb    ebx,ecx
c002eb4f:	89 de                	mov    esi,ebx
c002eb51:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002eb55:	d3 e6                	shl    esi,cl
c002eb57:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002eb5b:	89 f9                	mov    ecx,edi
c002eb5d:	d3 ed                	shr    ebp,cl
c002eb5f:	09 ee                	or     esi,ebp
c002eb61:	89 f0                	mov    eax,esi
c002eb63:	d3 eb                	shr    ebx,cl
c002eb65:	89 da                	mov    edx,ebx
c002eb67:	e9 e8 fe ff ff       	jmp    c002ea54 <__moddi3+0x54>
c002eb6c:	39 c5                	cmp    ebp,eax
c002eb6e:	73 db                	jae    c002eb4b <__moddi3+0x14b>
c002eb70:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002eb74:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002eb78:	89 d1                	mov    ecx,edx
c002eb7a:	89 c6                	mov    esi,eax
c002eb7c:	eb cd                	jmp    c002eb4b <__moddi3+0x14b>
c002eb7e:	66 90                	xchg   ax,ax

c002eb80 <__udivdi3>:
c002eb80:	55                   	push   ebp
c002eb81:	57                   	push   edi
c002eb82:	56                   	push   esi
c002eb83:	53                   	push   ebx
c002eb84:	83 ec 1c             	sub    esp,0x1c
c002eb87:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002eb8b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002eb8f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002eb93:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002eb97:	85 d2                	test   edx,edx
c002eb99:	75 41                	jne    c002ebdc <__udivdi3+0x5c>
c002eb9b:	39 f7                	cmp    edi,esi
c002eb9d:	76 15                	jbe    c002ebb4 <__udivdi3+0x34>
c002eb9f:	89 e8                	mov    eax,ebp
c002eba1:	89 f2                	mov    edx,esi
c002eba3:	f7 f7                	div    edi
c002eba5:	31 db                	xor    ebx,ebx
c002eba7:	89 da                	mov    edx,ebx
c002eba9:	83 c4 1c             	add    esp,0x1c
c002ebac:	5b                   	pop    ebx
c002ebad:	5e                   	pop    esi
c002ebae:	5f                   	pop    edi
c002ebaf:	5d                   	pop    ebp
c002ebb0:	c3                   	ret    
c002ebb1:	8d 76 00             	lea    esi,[esi+0x0]
c002ebb4:	89 f9                	mov    ecx,edi
c002ebb6:	85 ff                	test   edi,edi
c002ebb8:	75 0b                	jne    c002ebc5 <__udivdi3+0x45>
c002ebba:	b8 01 00 00 00       	mov    eax,0x1
c002ebbf:	31 d2                	xor    edx,edx
c002ebc1:	f7 f7                	div    edi
c002ebc3:	89 c1                	mov    ecx,eax
c002ebc5:	31 d2                	xor    edx,edx
c002ebc7:	89 f0                	mov    eax,esi
c002ebc9:	f7 f1                	div    ecx
c002ebcb:	89 c3                	mov    ebx,eax
c002ebcd:	89 e8                	mov    eax,ebp
c002ebcf:	f7 f1                	div    ecx
c002ebd1:	89 da                	mov    edx,ebx
c002ebd3:	83 c4 1c             	add    esp,0x1c
c002ebd6:	5b                   	pop    ebx
c002ebd7:	5e                   	pop    esi
c002ebd8:	5f                   	pop    edi
c002ebd9:	5d                   	pop    ebp
c002ebda:	c3                   	ret    
c002ebdb:	90                   	nop
c002ebdc:	39 f2                	cmp    edx,esi
c002ebde:	77 1c                	ja     c002ebfc <__udivdi3+0x7c>
c002ebe0:	0f bd da             	bsr    ebx,edx
c002ebe3:	83 f3 1f             	xor    ebx,0x1f
c002ebe6:	75 24                	jne    c002ec0c <__udivdi3+0x8c>
c002ebe8:	39 f2                	cmp    edx,esi
c002ebea:	72 08                	jb     c002ebf4 <__udivdi3+0x74>
c002ebec:	39 ef                	cmp    edi,ebp
c002ebee:	0f 87 84 00 00 00    	ja     c002ec78 <__udivdi3+0xf8>
c002ebf4:	b8 01 00 00 00       	mov    eax,0x1
c002ebf9:	eb ac                	jmp    c002eba7 <__udivdi3+0x27>
c002ebfb:	90                   	nop
c002ebfc:	31 db                	xor    ebx,ebx
c002ebfe:	31 c0                	xor    eax,eax
c002ec00:	89 da                	mov    edx,ebx
c002ec02:	83 c4 1c             	add    esp,0x1c
c002ec05:	5b                   	pop    ebx
c002ec06:	5e                   	pop    esi
c002ec07:	5f                   	pop    edi
c002ec08:	5d                   	pop    ebp
c002ec09:	c3                   	ret    
c002ec0a:	66 90                	xchg   ax,ax
c002ec0c:	b8 20 00 00 00       	mov    eax,0x20
c002ec11:	29 d8                	sub    eax,ebx
c002ec13:	88 d9                	mov    cl,bl
c002ec15:	d3 e2                	shl    edx,cl
c002ec17:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002ec1b:	89 fa                	mov    edx,edi
c002ec1d:	88 c1                	mov    cl,al
c002ec1f:	d3 ea                	shr    edx,cl
c002ec21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ec25:	09 d1                	or     ecx,edx
c002ec27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ec2b:	88 d9                	mov    cl,bl
c002ec2d:	d3 e7                	shl    edi,cl
c002ec2f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ec33:	89 f7                	mov    edi,esi
c002ec35:	88 c1                	mov    cl,al
c002ec37:	d3 ef                	shr    edi,cl
c002ec39:	88 d9                	mov    cl,bl
c002ec3b:	d3 e6                	shl    esi,cl
c002ec3d:	89 ea                	mov    edx,ebp
c002ec3f:	88 c1                	mov    cl,al
c002ec41:	d3 ea                	shr    edx,cl
c002ec43:	09 d6                	or     esi,edx
c002ec45:	89 f0                	mov    eax,esi
c002ec47:	89 fa                	mov    edx,edi
c002ec49:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002ec4d:	89 d7                	mov    edi,edx
c002ec4f:	89 c6                	mov    esi,eax
c002ec51:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002ec55:	39 d7                	cmp    edi,edx
c002ec57:	72 13                	jb     c002ec6c <__udivdi3+0xec>
c002ec59:	74 09                	je     c002ec64 <__udivdi3+0xe4>
c002ec5b:	89 f0                	mov    eax,esi
c002ec5d:	31 db                	xor    ebx,ebx
c002ec5f:	e9 43 ff ff ff       	jmp    c002eba7 <__udivdi3+0x27>
c002ec64:	88 d9                	mov    cl,bl
c002ec66:	d3 e5                	shl    ebp,cl
c002ec68:	39 c5                	cmp    ebp,eax
c002ec6a:	73 ef                	jae    c002ec5b <__udivdi3+0xdb>
c002ec6c:	8d 46 ff             	lea    eax,[esi-0x1]
c002ec6f:	31 db                	xor    ebx,ebx
c002ec71:	e9 31 ff ff ff       	jmp    c002eba7 <__udivdi3+0x27>
c002ec76:	66 90                	xchg   ax,ax
c002ec78:	31 c0                	xor    eax,eax
c002ec7a:	e9 28 ff ff ff       	jmp    c002eba7 <__udivdi3+0x27>
c002ec7f:	90                   	nop

c002ec80 <__umoddi3>:
c002ec80:	55                   	push   ebp
c002ec81:	57                   	push   edi
c002ec82:	56                   	push   esi
c002ec83:	53                   	push   ebx
c002ec84:	83 ec 1c             	sub    esp,0x1c
c002ec87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ec8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002ec8f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002ec93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ec97:	89 da                	mov    edx,ebx
c002ec99:	85 c0                	test   eax,eax
c002ec9b:	75 37                	jne    c002ecd4 <__umoddi3+0x54>
c002ec9d:	39 df                	cmp    edi,ebx
c002ec9f:	76 13                	jbe    c002ecb4 <__umoddi3+0x34>
c002eca1:	89 f0                	mov    eax,esi
c002eca3:	f7 f7                	div    edi
c002eca5:	89 d0                	mov    eax,edx
c002eca7:	31 d2                	xor    edx,edx
c002eca9:	83 c4 1c             	add    esp,0x1c
c002ecac:	5b                   	pop    ebx
c002ecad:	5e                   	pop    esi
c002ecae:	5f                   	pop    edi
c002ecaf:	5d                   	pop    ebp
c002ecb0:	c3                   	ret    
c002ecb1:	8d 76 00             	lea    esi,[esi+0x0]
c002ecb4:	89 fd                	mov    ebp,edi
c002ecb6:	85 ff                	test   edi,edi
c002ecb8:	75 0b                	jne    c002ecc5 <__umoddi3+0x45>
c002ecba:	b8 01 00 00 00       	mov    eax,0x1
c002ecbf:	31 d2                	xor    edx,edx
c002ecc1:	f7 f7                	div    edi
c002ecc3:	89 c5                	mov    ebp,eax
c002ecc5:	89 d8                	mov    eax,ebx
c002ecc7:	31 d2                	xor    edx,edx
c002ecc9:	f7 f5                	div    ebp
c002eccb:	89 f0                	mov    eax,esi
c002eccd:	f7 f5                	div    ebp
c002eccf:	89 d0                	mov    eax,edx
c002ecd1:	eb d4                	jmp    c002eca7 <__umoddi3+0x27>
c002ecd3:	90                   	nop
c002ecd4:	89 f1                	mov    ecx,esi
c002ecd6:	39 d8                	cmp    eax,ebx
c002ecd8:	76 0a                	jbe    c002ece4 <__umoddi3+0x64>
c002ecda:	89 f0                	mov    eax,esi
c002ecdc:	83 c4 1c             	add    esp,0x1c
c002ecdf:	5b                   	pop    ebx
c002ece0:	5e                   	pop    esi
c002ece1:	5f                   	pop    edi
c002ece2:	5d                   	pop    ebp
c002ece3:	c3                   	ret    
c002ece4:	0f bd e8             	bsr    ebp,eax
c002ece7:	83 f5 1f             	xor    ebp,0x1f
c002ecea:	75 1c                	jne    c002ed08 <__umoddi3+0x88>
c002ecec:	39 d8                	cmp    eax,ebx
c002ecee:	72 04                	jb     c002ecf4 <__umoddi3+0x74>
c002ecf0:	39 f7                	cmp    edi,esi
c002ecf2:	77 08                	ja     c002ecfc <__umoddi3+0x7c>
c002ecf4:	89 da                	mov    edx,ebx
c002ecf6:	29 fe                	sub    esi,edi
c002ecf8:	19 c2                	sbb    edx,eax
c002ecfa:	89 f1                	mov    ecx,esi
c002ecfc:	89 c8                	mov    eax,ecx
c002ecfe:	83 c4 1c             	add    esp,0x1c
c002ed01:	5b                   	pop    ebx
c002ed02:	5e                   	pop    esi
c002ed03:	5f                   	pop    edi
c002ed04:	5d                   	pop    ebp
c002ed05:	c3                   	ret    
c002ed06:	66 90                	xchg   ax,ax
c002ed08:	ba 20 00 00 00       	mov    edx,0x20
c002ed0d:	29 ea                	sub    edx,ebp
c002ed0f:	89 e9                	mov    ecx,ebp
c002ed11:	d3 e0                	shl    eax,cl
c002ed13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ed17:	89 f8                	mov    eax,edi
c002ed19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002ed1d:	88 d1                	mov    cl,dl
c002ed1f:	d3 e8                	shr    eax,cl
c002ed21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ed25:	09 c1                	or     ecx,eax
c002ed27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ed2b:	89 e9                	mov    ecx,ebp
c002ed2d:	d3 e7                	shl    edi,cl
c002ed2f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ed33:	89 d8                	mov    eax,ebx
c002ed35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ed39:	88 d1                	mov    cl,dl
c002ed3b:	d3 e8                	shr    eax,cl
c002ed3d:	89 c7                	mov    edi,eax
c002ed3f:	89 e9                	mov    ecx,ebp
c002ed41:	d3 e3                	shl    ebx,cl
c002ed43:	89 f0                	mov    eax,esi
c002ed45:	88 d1                	mov    cl,dl
c002ed47:	d3 e8                	shr    eax,cl
c002ed49:	09 d8                	or     eax,ebx
c002ed4b:	89 e9                	mov    ecx,ebp
c002ed4d:	d3 e6                	shl    esi,cl
c002ed4f:	89 f3                	mov    ebx,esi
c002ed51:	89 fa                	mov    edx,edi
c002ed53:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002ed57:	89 d1                	mov    ecx,edx
c002ed59:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002ed5d:	89 c6                	mov    esi,eax
c002ed5f:	89 d7                	mov    edi,edx
c002ed61:	39 d1                	cmp    ecx,edx
c002ed63:	72 27                	jb     c002ed8c <__umoddi3+0x10c>
c002ed65:	74 21                	je     c002ed88 <__umoddi3+0x108>
c002ed67:	89 ca                	mov    edx,ecx
c002ed69:	29 f3                	sub    ebx,esi
c002ed6b:	19 fa                	sbb    edx,edi
c002ed6d:	89 d0                	mov    eax,edx
c002ed6f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002ed73:	d3 e0                	shl    eax,cl
c002ed75:	89 e9                	mov    ecx,ebp
c002ed77:	d3 eb                	shr    ebx,cl
c002ed79:	09 d8                	or     eax,ebx
c002ed7b:	d3 ea                	shr    edx,cl
c002ed7d:	83 c4 1c             	add    esp,0x1c
c002ed80:	5b                   	pop    ebx
c002ed81:	5e                   	pop    esi
c002ed82:	5f                   	pop    edi
c002ed83:	5d                   	pop    ebp
c002ed84:	c3                   	ret    
c002ed85:	8d 76 00             	lea    esi,[esi+0x0]
c002ed88:	39 c3                	cmp    ebx,eax
c002ed8a:	73 db                	jae    c002ed67 <__umoddi3+0xe7>
c002ed8c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002ed90:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002ed94:	89 d7                	mov    edi,edx
c002ed96:	89 c6                	mov    esi,eax
c002ed98:	eb cd                	jmp    c002ed67 <__umoddi3+0xe7>

Disassembly of section .init:

c002ed9a <_init>:
c002ed9a:	55                   	push   ebp
c002ed9b:	89 e5                	mov    ebp,esp
c002ed9d:	e8 52 13 fd ff       	call   c00000f4 <frame_dummy>
c002eda2:	e8 e5 fa ff ff       	call   c002e88c <__do_global_ctors_aux>
c002eda7:	5d                   	pop    ebp
c002eda8:	c3                   	ret    

Disassembly of section .fini:

c002eda9 <_fini>:
c002eda9:	55                   	push   ebp
c002edaa:	89 e5                	mov    ebp,esp
c002edac:	e8 d3 12 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002edb1:	5d                   	pop    ebp
c002edb2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002edb4 <Computer::~Computer()>:
c002edb4:	83 ec 0c             	sub    esp,0xc
c002edb7:	ba 2c 16 03 c0       	mov    edx,0xc003162c
c002edbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edc0:	89 10                	mov    DWORD PTR [eax],edx
c002edc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edc6:	83 ec 0c             	sub    esp,0xc
c002edc9:	50                   	push   eax
c002edca:	e8 d7 c7 fe ff       	call   c001b5a6 <Device::~Device()>
c002edcf:	83 c4 10             	add    esp,0x10
c002edd2:	90                   	nop
c002edd3:	83 c4 0c             	add    esp,0xc
c002edd6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002edd8 <Computer::~Computer()>:
c002edd8:	83 ec 0c             	sub    esp,0xc
c002eddb:	83 ec 0c             	sub    esp,0xc
c002edde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ede2:	e8 cd ff ff ff       	call   c002edb4 <Computer::~Computer()>
c002ede7:	83 c4 10             	add    esp,0x10
c002edea:	83 ec 08             	sub    esp,0x8
c002eded:	68 70 01 00 00       	push   0x170
c002edf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002edf6:	e8 d9 a5 fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002edfb:	83 c4 10             	add    esp,0x10
c002edfe:	83 c4 0c             	add    esp,0xc
c002ee01:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002ee02 <idleCommon()>:
c002ee02:	83 ec 0c             	sub    esp,0xc
c002ee05:	fa                   	cli    
c002ee06:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002ee0c:	e8 db 67 ff ff       	call   c00255ec <schedule()>
c002ee11:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ee16:	48                   	dec    eax
c002ee17:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ee1c:	75 01                	jne    c002ee1f <idleCommon()+0x1d>
c002ee1e:	fb                   	sti    
c002ee1f:	83 c4 0c             	add    esp,0xc
c002ee22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002ee24 <LinkedList<UnixFile>::~LinkedList()>:
c002ee24:	90                   	nop
c002ee25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002ee26 <LinkedList<UnixFile>::LinkedList()>:
c002ee26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee2a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ee30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ee3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee3f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ee46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ee50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ee5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ee66:	90                   	nop
c002ee67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002ee68 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002ee68:	83 ec 0c             	sub    esp,0xc
c002ee6b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ee70:	75 10                	jne    c002ee82 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002ee72:	83 ec 0c             	sub    esp,0xc
c002ee75:	68 44 18 03 c0       	push   0xc0031844
c002ee7a:	e8 17 17 ff ff       	call   c0020596 <KePanic(char const*)>
c002ee7f:	83 c4 10             	add    esp,0x10
c002ee82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee86:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee88:	85 c0                	test   eax,eax
c002ee8a:	74 34                	je     c002eec0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ee8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee93:	85 c0                	test   eax,eax
c002ee95:	74 29                	je     c002eec0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ee97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eea2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eea9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eead:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eeb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eebe:	eb 65                	jmp    c002ef25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002eec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eec4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eec6:	85 c0                	test   eax,eax
c002eec8:	75 4b                	jne    c002ef15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002eeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eed1:	85 c0                	test   eax,eax
c002eed3:	75 40                	jne    c002ef15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002eed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eed9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eedd:	89 10                	mov    DWORD PTR [eax],edx
c002eedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eee3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eee7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eef1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eefc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eeff:	85 c0                	test   eax,eax
c002ef01:	74 22                	je     c002ef25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ef03:	83 ec 0c             	sub    esp,0xc
c002ef06:	68 66 18 03 c0       	push   0xc0031866
c002ef0b:	e8 86 16 ff ff       	call   c0020596 <KePanic(char const*)>
c002ef10:	83 c4 10             	add    esp,0x10
c002ef13:	eb 10                	jmp    c002ef25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ef15:	83 ec 0c             	sub    esp,0xc
c002ef18:	68 70 18 03 c0       	push   0xc0031870
c002ef1d:	e8 74 16 ff ff       	call   c0020596 <KePanic(char const*)>
c002ef22:	83 c4 10             	add    esp,0x10
c002ef25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef2c:	8d 50 01             	lea    edx,[eax+0x1]
c002ef2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef33:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ef36:	90                   	nop
c002ef37:	83 c4 0c             	add    esp,0xc
c002ef3a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002ef3c <LinkedList<UnixFile>::getFirstElement()>:
c002ef3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef40:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002ef44 <LinkedList<UnixFile>::removeFirst()>:
c002ef44:	83 ec 0c             	sub    esp,0xc
c002ef47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef4b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef4d:	85 c0                	test   eax,eax
c002ef4f:	75 12                	jne    c002ef63 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002ef51:	83 ec 0c             	sub    esp,0xc
c002ef54:	68 7c 18 03 c0       	push   0xc003187c
c002ef59:	e8 38 16 ff ff       	call   c0020596 <KePanic(char const*)>
c002ef5e:	83 c4 10             	add    esp,0x10
c002ef61:	eb 7e                	jmp    c002efe1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002ef63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef6d:	85 c0                	test   eax,eax
c002ef6f:	74 10                	je     c002ef81 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002ef71:	83 ec 0c             	sub    esp,0xc
c002ef74:	68 c7 18 03 c0       	push   0xc00318c7
c002ef79:	e8 18 16 ff ff       	call   c0020596 <KePanic(char const*)>
c002ef7e:	83 c4 10             	add    esp,0x10
c002ef81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef85:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef8a:	85 c0                	test   eax,eax
c002ef8c:	75 33                	jne    c002efc1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002ef8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002efa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efa7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002efaa:	83 f8 01             	cmp    eax,0x1
c002efad:	74 21                	je     c002efd0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002efaf:	83 ec 0c             	sub    esp,0xc
c002efb2:	68 a0 18 03 c0       	push   0xc00318a0
c002efb7:	e8 da 15 ff ff       	call   c0020596 <KePanic(char const*)>
c002efbc:	83 c4 10             	add    esp,0x10
c002efbf:	eb 0f                	jmp    c002efd0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002efc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efc5:	8b 00                	mov    eax,DWORD PTR [eax]
c002efc7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002efca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efce:	89 10                	mov    DWORD PTR [eax],edx
c002efd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002efd7:	8d 50 ff             	lea    edx,[eax-0x1]
c002efda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002efe1:	83 c4 0c             	add    esp,0xc
c002efe4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002efe6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002efe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002efea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002efed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002efee <DriverlessDevice::~DriverlessDevice()>:
c002efee:	ba 08 26 03 c0       	mov    edx,0xc0032608
c002eff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eff7:	89 10                	mov    DWORD PTR [eax],edx
c002eff9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002effd:	50                   	push   eax
c002effe:	e8 a3 c5 fe ff       	call   c001b5a6 <Device::~Device()>
c002f003:	83 c4 04             	add    esp,0x4
c002f006:	90                   	nop
c002f007:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002f008 <DriverlessDevice::~DriverlessDevice()>:
c002f008:	83 ec 0c             	sub    esp,0xc
c002f00b:	83 ec 0c             	sub    esp,0xc
c002f00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f012:	e8 d7 ff ff ff       	call   c002efee <DriverlessDevice::~DriverlessDevice()>
c002f017:	83 c4 10             	add    esp,0x10
c002f01a:	83 ec 08             	sub    esp,0x8
c002f01d:	68 58 01 00 00       	push   0x158
c002f022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f026:	e8 a9 a3 fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f02b:	83 c4 10             	add    esp,0x10
c002f02e:	83 c4 0c             	add    esp,0xc
c002f031:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002f032 <LinkedList<Device>::addElement(Device*)>:
c002f032:	83 ec 0c             	sub    esp,0xc
c002f035:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f03a:	75 10                	jne    c002f04c <LinkedList<Device>::addElement(Device*)+0x1a>
c002f03c:	83 ec 0c             	sub    esp,0xc
c002f03f:	68 44 18 03 c0       	push   0xc0031844
c002f044:	e8 4d 15 ff ff       	call   c0020596 <KePanic(char const*)>
c002f049:	83 c4 10             	add    esp,0x10
c002f04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f050:	8b 00                	mov    eax,DWORD PTR [eax]
c002f052:	85 c0                	test   eax,eax
c002f054:	74 3a                	je     c002f090 <LinkedList<Device>::addElement(Device*)+0x5e>
c002f056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f05a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f05d:	85 c0                	test   eax,eax
c002f05f:	74 2f                	je     c002f090 <LinkedList<Device>::addElement(Device*)+0x5e>
c002f061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f065:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f068:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f06c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002f072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f076:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f07a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f07d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f081:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f084:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002f08e:	eb 68                	jmp    c002f0f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f094:	8b 00                	mov    eax,DWORD PTR [eax]
c002f096:	85 c0                	test   eax,eax
c002f098:	75 4e                	jne    c002f0e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002f09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f09e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f0a1:	85 c0                	test   eax,eax
c002f0a3:	75 43                	jne    c002f0e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002f0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f0ad:	89 10                	mov    DWORD PTR [eax],edx
c002f0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f0b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f0c1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002f0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f0d2:	85 c0                	test   eax,eax
c002f0d4:	74 22                	je     c002f0f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f0d6:	83 ec 0c             	sub    esp,0xc
c002f0d9:	68 66 18 03 c0       	push   0xc0031866
c002f0de:	e8 b3 14 ff ff       	call   c0020596 <KePanic(char const*)>
c002f0e3:	83 c4 10             	add    esp,0x10
c002f0e6:	eb 10                	jmp    c002f0f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f0e8:	83 ec 0c             	sub    esp,0xc
c002f0eb:	68 70 18 03 c0       	push   0xc0031870
c002f0f0:	e8 a1 14 ff ff       	call   c0020596 <KePanic(char const*)>
c002f0f5:	83 c4 10             	add    esp,0x10
c002f0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f0ff:	8d 50 01             	lea    edx,[eax+0x1]
c002f102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f106:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f109:	90                   	nop
c002f10a:	83 c4 0c             	add    esp,0xc
c002f10d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002f10e <LinkedList<Device>::LinkedList()>:
c002f10e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f112:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f11c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f123:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f127:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f13c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f147:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f14e:	90                   	nop
c002f14f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002f150 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002f150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f154:	8b 00                	mov    eax,DWORD PTR [eax]
c002f156:	85 c0                	test   eax,eax
c002f158:	75 0e                	jne    c002f168 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002f15a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f15e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f161:	85 c0                	test   eax,eax
c002f163:	75 03                	jne    c002f168 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002f165:	b0 01                	mov    al,0x1
c002f167:	c3                   	ret    
c002f168:	b0 00                	mov    al,0x0
c002f16a:	90                   	nop
c002f16b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002f16c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002f16c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f170:	8b 00                	mov    eax,DWORD PTR [eax]
c002f172:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002f174 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002f174:	83 ec 0c             	sub    esp,0xc
c002f177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f17b:	8b 00                	mov    eax,DWORD PTR [eax]
c002f17d:	85 c0                	test   eax,eax
c002f17f:	75 17                	jne    c002f198 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002f181:	83 ec 0c             	sub    esp,0xc
c002f184:	68 7c 18 03 c0       	push   0xc003187c
c002f189:	e8 08 14 ff ff       	call   c0020596 <KePanic(char const*)>
c002f18e:	83 c4 10             	add    esp,0x10
c002f191:	e9 96 00 00 00       	jmp    c002f22c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002f196:	66 90                	xchg   ax,ax
c002f198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f19c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f19f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f1a2:	85 c0                	test   eax,eax
c002f1a4:	0f 95 c0             	setne  al
c002f1a7:	0f b6 c0             	movzx  eax,al
c002f1aa:	85 c0                	test   eax,eax
c002f1ac:	74 12                	je     c002f1c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002f1ae:	83 ec 0c             	sub    esp,0xc
c002f1b1:	68 c7 18 03 c0       	push   0xc00318c7
c002f1b6:	e8 db 13 ff ff       	call   c0020596 <KePanic(char const*)>
c002f1bb:	83 c4 10             	add    esp,0x10
c002f1be:	66 90                	xchg   ax,ax
c002f1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f1c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f1c9:	85 c0                	test   eax,eax
c002f1cb:	0f 94 c0             	sete   al
c002f1ce:	0f b6 c0             	movzx  eax,al
c002f1d1:	85 c0                	test   eax,eax
c002f1d3:	74 33                	je     c002f208 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002f1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f1f1:	83 f8 01             	cmp    eax,0x1
c002f1f4:	74 22                	je     c002f218 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f1f6:	83 ec 0c             	sub    esp,0xc
c002f1f9:	68 a0 18 03 c0       	push   0xc00318a0
c002f1fe:	e8 93 13 ff ff       	call   c0020596 <KePanic(char const*)>
c002f203:	83 c4 10             	add    esp,0x10
c002f206:	eb 10                	jmp    c002f218 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f20c:	8b 00                	mov    eax,DWORD PTR [eax]
c002f20e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002f211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f215:	89 10                	mov    DWORD PTR [eax],edx
c002f217:	90                   	nop
c002f218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f21c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f21f:	8d 50 ff             	lea    edx,[eax-0x1]
c002f222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f226:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f229:	8d 76 00             	lea    esi,[esi+0x0]
c002f22c:	83 c4 0c             	add    esp,0xc
c002f22f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002f230 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002f230:	83 ec 0c             	sub    esp,0xc
c002f233:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f238:	75 12                	jne    c002f24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002f23a:	83 ec 0c             	sub    esp,0xc
c002f23d:	68 44 18 03 c0       	push   0xc0031844
c002f242:	e8 4f 13 ff ff       	call   c0020596 <KePanic(char const*)>
c002f247:	83 c4 10             	add    esp,0x10
c002f24a:	66 90                	xchg   ax,ax
c002f24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f250:	8b 00                	mov    eax,DWORD PTR [eax]
c002f252:	85 c0                	test   eax,eax
c002f254:	74 36                	je     c002f28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f25a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f25d:	85 c0                	test   eax,eax
c002f25f:	74 2b                	je     c002f28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f265:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f268:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f26c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002f26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f273:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f277:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f27e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f281:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f288:	eb 6a                	jmp    c002f2f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f28a:	66 90                	xchg   ax,ax
c002f28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f290:	8b 00                	mov    eax,DWORD PTR [eax]
c002f292:	85 c0                	test   eax,eax
c002f294:	75 4e                	jne    c002f2e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f29a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f29d:	85 c0                	test   eax,eax
c002f29f:	75 43                	jne    c002f2e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f2a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f2a9:	89 10                	mov    DWORD PTR [eax],edx
c002f2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f2b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f2bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f2cb:	85 c0                	test   eax,eax
c002f2cd:	74 25                	je     c002f2f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f2cf:	83 ec 0c             	sub    esp,0xc
c002f2d2:	68 66 18 03 c0       	push   0xc0031866
c002f2d7:	e8 ba 12 ff ff       	call   c0020596 <KePanic(char const*)>
c002f2dc:	83 c4 10             	add    esp,0x10
c002f2df:	eb 13                	jmp    c002f2f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f2e1:	8d 76 00             	lea    esi,[esi+0x0]
c002f2e4:	83 ec 0c             	sub    esp,0xc
c002f2e7:	68 70 18 03 c0       	push   0xc0031870
c002f2ec:	e8 a5 12 ff ff       	call   c0020596 <KePanic(char const*)>
c002f2f1:	83 c4 10             	add    esp,0x10
c002f2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f2fb:	8d 50 01             	lea    edx,[eax+0x1]
c002f2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f302:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f305:	90                   	nop
c002f306:	83 c4 0c             	add    esp,0xc
c002f309:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002f30c <ACPI::~ACPI()>:
c002f30c:	83 ec 0c             	sub    esp,0xc
c002f30f:	ba c0 2c 03 c0       	mov    edx,0xc0032cc0
c002f314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f318:	89 10                	mov    DWORD PTR [eax],edx
c002f31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f31e:	83 ec 0c             	sub    esp,0xc
c002f321:	50                   	push   eax
c002f322:	e8 7f c2 fe ff       	call   c001b5a6 <Device::~Device()>
c002f327:	83 c4 10             	add    esp,0x10
c002f32a:	90                   	nop
c002f32b:	83 c4 0c             	add    esp,0xc
c002f32e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002f330 <ACPI::~ACPI()>:
c002f330:	83 ec 0c             	sub    esp,0xc
c002f333:	83 ec 0c             	sub    esp,0xc
c002f336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f33a:	e8 cd ff ff ff       	call   c002f30c <ACPI::~ACPI()>
c002f33f:	83 c4 10             	add    esp,0x10
c002f342:	83 ec 08             	sub    esp,0x8
c002f345:	68 64 12 00 00       	push   0x1264
c002f34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f34e:	e8 81 a0 fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f353:	83 c4 10             	add    esp,0x10
c002f356:	83 c4 0c             	add    esp,0xc
c002f359:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002f35c <LinkedList<Device>::~LinkedList()>:
c002f35c:	90                   	nop
c002f35d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002f360 <LinkedList<Device>::isEmpty()>:
c002f360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f364:	8b 00                	mov    eax,DWORD PTR [eax]
c002f366:	85 c0                	test   eax,eax
c002f368:	75 0e                	jne    c002f378 <LinkedList<Device>::isEmpty()+0x18>
c002f36a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f36e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f371:	85 c0                	test   eax,eax
c002f373:	75 03                	jne    c002f378 <LinkedList<Device>::isEmpty()+0x18>
c002f375:	b0 01                	mov    al,0x1
c002f377:	c3                   	ret    
c002f378:	b0 00                	mov    al,0x0
c002f37a:	90                   	nop
c002f37b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002f37c <LinkedList<Device>::getFirstElement()>:
c002f37c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f380:	8b 00                	mov    eax,DWORD PTR [eax]
c002f382:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002f384 <LinkedList<Device>::removeFirst()>:
c002f384:	83 ec 0c             	sub    esp,0xc
c002f387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f38b:	8b 00                	mov    eax,DWORD PTR [eax]
c002f38d:	85 c0                	test   eax,eax
c002f38f:	75 17                	jne    c002f3a8 <LinkedList<Device>::removeFirst()+0x24>
c002f391:	83 ec 0c             	sub    esp,0xc
c002f394:	68 7c 18 03 c0       	push   0xc003187c
c002f399:	e8 f8 11 ff ff       	call   c0020596 <KePanic(char const*)>
c002f39e:	83 c4 10             	add    esp,0x10
c002f3a1:	e9 92 00 00 00       	jmp    c002f438 <LinkedList<Device>::removeFirst()+0xb4>
c002f3a6:	66 90                	xchg   ax,ax
c002f3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3af:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f3b5:	85 c0                	test   eax,eax
c002f3b7:	74 13                	je     c002f3cc <LinkedList<Device>::removeFirst()+0x48>
c002f3b9:	83 ec 0c             	sub    esp,0xc
c002f3bc:	68 c7 18 03 c0       	push   0xc00318c7
c002f3c1:	e8 d0 11 ff ff       	call   c0020596 <KePanic(char const*)>
c002f3c6:	83 c4 10             	add    esp,0x10
c002f3c9:	8d 76 00             	lea    esi,[esi+0x0]
c002f3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3d0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f3d2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f3d8:	85 c0                	test   eax,eax
c002f3da:	75 34                	jne    c002f410 <LinkedList<Device>::removeFirst()+0x8c>
c002f3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f3f8:	83 f8 01             	cmp    eax,0x1
c002f3fb:	74 27                	je     c002f424 <LinkedList<Device>::removeFirst()+0xa0>
c002f3fd:	83 ec 0c             	sub    esp,0xc
c002f400:	68 a0 18 03 c0       	push   0xc00318a0
c002f405:	e8 8c 11 ff ff       	call   c0020596 <KePanic(char const*)>
c002f40a:	83 c4 10             	add    esp,0x10
c002f40d:	eb 15                	jmp    c002f424 <LinkedList<Device>::removeFirst()+0xa0>
c002f40f:	90                   	nop
c002f410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f414:	8b 00                	mov    eax,DWORD PTR [eax]
c002f416:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002f41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f420:	89 10                	mov    DWORD PTR [eax],edx
c002f422:	66 90                	xchg   ax,ax
c002f424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f428:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f42b:	8d 50 ff             	lea    edx,[eax-0x1]
c002f42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f432:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f435:	8d 76 00             	lea    esi,[esi+0x0]
c002f438:	83 c4 0c             	add    esp,0xc
c002f43b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002f43c <CPU::~CPU()>:
c002f43c:	83 ec 0c             	sub    esp,0xc
c002f43f:	ba 68 2e 03 c0       	mov    edx,0xc0032e68
c002f444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f448:	89 10                	mov    DWORD PTR [eax],edx
c002f44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f44e:	83 ec 0c             	sub    esp,0xc
c002f451:	50                   	push   eax
c002f452:	e8 4f c1 fe ff       	call   c001b5a6 <Device::~Device()>
c002f457:	83 c4 10             	add    esp,0x10
c002f45a:	90                   	nop
c002f45b:	83 c4 0c             	add    esp,0xc
c002f45e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002f460 <CPU::~CPU()>:
c002f460:	83 ec 0c             	sub    esp,0xc
c002f463:	83 ec 0c             	sub    esp,0xc
c002f466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f46a:	e8 cd ff ff ff       	call   c002f43c <CPU::~CPU()>
c002f46f:	83 c4 10             	add    esp,0x10
c002f472:	83 ec 08             	sub    esp,0x8
c002f475:	68 94 11 00 00       	push   0x1194
c002f47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f47e:	e8 51 9f fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f483:	83 c4 10             	add    esp,0x10
c002f486:	83 c4 0c             	add    esp,0xc
c002f489:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f48c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f48c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f490:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f493:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f494 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f494:	90                   	nop
c002f495:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f498 <ThreadControlBlock::ThreadControlBlock()>:
c002f498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f49c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f4a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4a7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f4ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4b2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f4b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4bd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f4c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4c8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f4cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4d3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f4d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4db:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f4df:	90                   	nop
c002f4e0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f4e4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f4e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f4ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f4f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f508:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f50e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f512:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f51d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f524:	90                   	nop
c002f525:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f526 <PCI::~PCI()>:
c002f526:	83 ec 0c             	sub    esp,0xc
c002f529:	ba 08 3e 03 c0       	mov    edx,0xc0033e08
c002f52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f532:	89 10                	mov    DWORD PTR [eax],edx
c002f534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f538:	83 ec 0c             	sub    esp,0xc
c002f53b:	50                   	push   eax
c002f53c:	e8 bb b9 fe ff       	call   c001aefc <Bus::~Bus()>
c002f541:	83 c4 10             	add    esp,0x10
c002f544:	90                   	nop
c002f545:	83 c4 0c             	add    esp,0xc
c002f548:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f54a <PCI::~PCI()>:
c002f54a:	83 ec 0c             	sub    esp,0xc
c002f54d:	83 ec 0c             	sub    esp,0xc
c002f550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f554:	e8 cd ff ff ff       	call   c002f526 <PCI::~PCI()>
c002f559:	83 c4 10             	add    esp,0x10
c002f55c:	83 ec 08             	sub    esp,0x8
c002f55f:	68 5c 01 00 00       	push   0x15c
c002f564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f568:	e8 67 9e fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f56d:	83 c4 10             	add    esp,0x10
c002f570:	83 c4 0c             	add    esp,0xc
c002f573:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f574 <IDE::~IDE()>:
c002f574:	83 ec 0c             	sub    esp,0xc
c002f577:	ba bc 3e 03 c0       	mov    edx,0xc0033ebc
c002f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f580:	89 10                	mov    DWORD PTR [eax],edx
c002f582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f586:	83 ec 0c             	sub    esp,0xc
c002f589:	50                   	push   eax
c002f58a:	e8 a5 c4 fe ff       	call   c001ba34 <HardDiskController::~HardDiskController()>
c002f58f:	83 c4 10             	add    esp,0x10
c002f592:	90                   	nop
c002f593:	83 c4 0c             	add    esp,0xc
c002f596:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f598 <IDE::~IDE()>:
c002f598:	83 ec 0c             	sub    esp,0xc
c002f59b:	83 ec 0c             	sub    esp,0xc
c002f59e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5a2:	e8 cd ff ff ff       	call   c002f574 <IDE::~IDE()>
c002f5a7:	83 c4 10             	add    esp,0x10
c002f5aa:	83 ec 08             	sub    esp,0x8
c002f5ad:	68 70 02 00 00       	push   0x270
c002f5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5b6:	e8 19 9e fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f5bb:	83 c4 10             	add    esp,0x10
c002f5be:	83 c4 0c             	add    esp,0xc
c002f5c1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f5c2 <SATABus::~SATABus()>:
c002f5c2:	83 ec 0c             	sub    esp,0xc
c002f5c5:	ba 0c 3f 03 c0       	mov    edx,0xc0033f0c
c002f5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5ce:	89 10                	mov    DWORD PTR [eax],edx
c002f5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5d4:	83 ec 0c             	sub    esp,0xc
c002f5d7:	50                   	push   eax
c002f5d8:	e8 57 c4 fe ff       	call   c001ba34 <HardDiskController::~HardDiskController()>
c002f5dd:	83 c4 10             	add    esp,0x10
c002f5e0:	90                   	nop
c002f5e1:	83 c4 0c             	add    esp,0xc
c002f5e4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f5e6 <SATABus::~SATABus()>:
c002f5e6:	83 ec 0c             	sub    esp,0xc
c002f5e9:	83 ec 0c             	sub    esp,0xc
c002f5ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5f0:	e8 cd ff ff ff       	call   c002f5c2 <SATABus::~SATABus()>
c002f5f5:	83 c4 10             	add    esp,0x10
c002f5f8:	83 ec 08             	sub    esp,0x8
c002f5fb:	68 64 01 00 00       	push   0x164
c002f600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f604:	e8 cb 9d fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f609:	83 c4 10             	add    esp,0x10
c002f60c:	83 c4 0c             	add    esp,0xc
c002f60f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f610 <ATA::~ATA()>:
c002f610:	83 ec 0c             	sub    esp,0xc
c002f613:	ba 4c 3f 03 c0       	mov    edx,0xc0033f4c
c002f618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f61c:	89 10                	mov    DWORD PTR [eax],edx
c002f61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f622:	83 ec 0c             	sub    esp,0xc
c002f625:	50                   	push   eax
c002f626:	e8 eb c4 fe ff       	call   c001bb16 <PhysicalDisk::~PhysicalDisk()>
c002f62b:	83 c4 10             	add    esp,0x10
c002f62e:	90                   	nop
c002f62f:	83 c4 0c             	add    esp,0xc
c002f632:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f634 <ATA::~ATA()>:
c002f634:	83 ec 0c             	sub    esp,0xc
c002f637:	83 ec 0c             	sub    esp,0xc
c002f63a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f63e:	e8 cd ff ff ff       	call   c002f610 <ATA::~ATA()>
c002f643:	83 c4 10             	add    esp,0x10
c002f646:	83 ec 08             	sub    esp,0x8
c002f649:	68 7c 01 00 00       	push   0x17c
c002f64e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f652:	e8 7d 9d fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f657:	83 c4 10             	add    esp,0x10
c002f65a:	83 c4 0c             	add    esp,0xc
c002f65d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f65e <ATAPI::~ATAPI()>:
c002f65e:	83 ec 0c             	sub    esp,0xc
c002f661:	ba 94 3f 03 c0       	mov    edx,0xc0033f94
c002f666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f66a:	89 10                	mov    DWORD PTR [eax],edx
c002f66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f670:	83 ec 0c             	sub    esp,0xc
c002f673:	50                   	push   eax
c002f674:	e8 9d c4 fe ff       	call   c001bb16 <PhysicalDisk::~PhysicalDisk()>
c002f679:	83 c4 10             	add    esp,0x10
c002f67c:	90                   	nop
c002f67d:	83 c4 0c             	add    esp,0xc
c002f680:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f682 <ATAPI::~ATAPI()>:
c002f682:	83 ec 0c             	sub    esp,0xc
c002f685:	83 ec 0c             	sub    esp,0xc
c002f688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f68c:	e8 cd ff ff ff       	call   c002f65e <ATAPI::~ATAPI()>
c002f691:	83 c4 10             	add    esp,0x10
c002f694:	83 ec 08             	sub    esp,0x8
c002f697:	68 84 01 00 00       	push   0x184
c002f69c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f6a0:	e8 2f 9d fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f6a5:	83 c4 10             	add    esp,0x10
c002f6a8:	83 c4 0c             	add    esp,0xc
c002f6ab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f6ac <SATA::~SATA()>:
c002f6ac:	83 ec 0c             	sub    esp,0xc
c002f6af:	ba 54 40 03 c0       	mov    edx,0xc0034054
c002f6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f6b8:	89 10                	mov    DWORD PTR [eax],edx
c002f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f6be:	83 ec 0c             	sub    esp,0xc
c002f6c1:	50                   	push   eax
c002f6c2:	e8 4f c4 fe ff       	call   c001bb16 <PhysicalDisk::~PhysicalDisk()>
c002f6c7:	83 c4 10             	add    esp,0x10
c002f6ca:	90                   	nop
c002f6cb:	83 c4 0c             	add    esp,0xc
c002f6ce:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f6d0 <SATA::~SATA()>:
c002f6d0:	83 ec 0c             	sub    esp,0xc
c002f6d3:	83 ec 0c             	sub    esp,0xc
c002f6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f6da:	e8 cd ff ff ff       	call   c002f6ac <SATA::~SATA()>
c002f6df:	83 c4 10             	add    esp,0x10
c002f6e2:	83 ec 08             	sub    esp,0x8
c002f6e5:	68 7c 01 00 00       	push   0x17c
c002f6ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f6ee:	e8 e1 9c fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f6f3:	83 c4 10             	add    esp,0x10
c002f6f6:	83 c4 0c             	add    esp,0xc
c002f6f9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f6fa <SATAPI::~SATAPI()>:
c002f6fa:	83 ec 0c             	sub    esp,0xc
c002f6fd:	ba 78 41 03 c0       	mov    edx,0xc0034178
c002f702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f706:	89 10                	mov    DWORD PTR [eax],edx
c002f708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f70c:	83 ec 0c             	sub    esp,0xc
c002f70f:	50                   	push   eax
c002f710:	e8 01 c4 fe ff       	call   c001bb16 <PhysicalDisk::~PhysicalDisk()>
c002f715:	83 c4 10             	add    esp,0x10
c002f718:	90                   	nop
c002f719:	83 c4 0c             	add    esp,0xc
c002f71c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f71e <SATAPI::~SATAPI()>:
c002f71e:	83 ec 0c             	sub    esp,0xc
c002f721:	83 ec 0c             	sub    esp,0xc
c002f724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f728:	e8 cd ff ff ff       	call   c002f6fa <SATAPI::~SATAPI()>
c002f72d:	83 c4 10             	add    esp,0x10
c002f730:	83 ec 08             	sub    esp,0x8
c002f733:	68 84 01 00 00       	push   0x184
c002f738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f73c:	e8 93 9c fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f741:	83 c4 10             	add    esp,0x10
c002f744:	83 c4 0c             	add    esp,0xc
c002f747:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f748 <IOAPIC::~IOAPIC()>:
c002f748:	83 ec 0c             	sub    esp,0xc
c002f74b:	ba b8 41 03 c0       	mov    edx,0xc00341b8
c002f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f754:	89 10                	mov    DWORD PTR [eax],edx
c002f756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f75a:	83 ec 0c             	sub    esp,0xc
c002f75d:	50                   	push   eax
c002f75e:	e8 43 be fe ff       	call   c001b5a6 <Device::~Device()>
c002f763:	83 c4 10             	add    esp,0x10
c002f766:	90                   	nop
c002f767:	83 c4 0c             	add    esp,0xc
c002f76a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f76c <IOAPIC::~IOAPIC()>:
c002f76c:	83 ec 0c             	sub    esp,0xc
c002f76f:	83 ec 0c             	sub    esp,0xc
c002f772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f776:	e8 cd ff ff ff       	call   c002f748 <IOAPIC::~IOAPIC()>
c002f77b:	83 c4 10             	add    esp,0x10
c002f77e:	83 ec 08             	sub    esp,0x8
c002f781:	68 68 01 00 00       	push   0x168
c002f786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f78a:	e8 45 9c fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f78f:	83 c4 10             	add    esp,0x10
c002f792:	83 c4 0c             	add    esp,0xc
c002f795:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f798 <APICTimer::~APICTimer()>:
c002f798:	83 ec 0c             	sub    esp,0xc
c002f79b:	ba 00 42 03 c0       	mov    edx,0xc0034200
c002f7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f7a4:	89 10                	mov    DWORD PTR [eax],edx
c002f7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f7aa:	83 ec 0c             	sub    esp,0xc
c002f7ad:	50                   	push   eax
c002f7ae:	e8 d5 d8 fe ff       	call   c001d088 <Timer::~Timer()>
c002f7b3:	83 c4 10             	add    esp,0x10
c002f7b6:	90                   	nop
c002f7b7:	83 c4 0c             	add    esp,0xc
c002f7ba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f7bc <APICTimer::~APICTimer()>:
c002f7bc:	83 ec 0c             	sub    esp,0xc
c002f7bf:	83 ec 0c             	sub    esp,0xc
c002f7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f7c6:	e8 cd ff ff ff       	call   c002f798 <APICTimer::~APICTimer()>
c002f7cb:	83 c4 10             	add    esp,0x10
c002f7ce:	83 ec 08             	sub    esp,0x8
c002f7d1:	68 60 01 00 00       	push   0x160
c002f7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f7da:	e8 f5 9b fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f7df:	83 c4 10             	add    esp,0x10
c002f7e2:	83 c4 0c             	add    esp,0xc
c002f7e5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f7e8 <PIT::~PIT()>:
c002f7e8:	83 ec 0c             	sub    esp,0xc
c002f7eb:	ba 50 42 03 c0       	mov    edx,0xc0034250
c002f7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f7f4:	89 10                	mov    DWORD PTR [eax],edx
c002f7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f7fa:	83 ec 0c             	sub    esp,0xc
c002f7fd:	50                   	push   eax
c002f7fe:	e8 85 d8 fe ff       	call   c001d088 <Timer::~Timer()>
c002f803:	83 c4 10             	add    esp,0x10
c002f806:	90                   	nop
c002f807:	83 c4 0c             	add    esp,0xc
c002f80a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f80c <PIT::~PIT()>:
c002f80c:	83 ec 0c             	sub    esp,0xc
c002f80f:	83 ec 0c             	sub    esp,0xc
c002f812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f816:	e8 cd ff ff ff       	call   c002f7e8 <PIT::~PIT()>
c002f81b:	83 c4 10             	add    esp,0x10
c002f81e:	83 ec 08             	sub    esp,0x8
c002f821:	68 5c 01 00 00       	push   0x15c
c002f826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f82a:	e8 a5 9b fe ff       	call   c00193d4 <operator delete(void*, unsigned long)>
c002f82f:	83 c4 10             	add    esp,0x10
c002f832:	83 c4 0c             	add    esp,0xc
c002f835:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be bb 2f 03 c0       	mov    esi,0xc0032fbb
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be d7 2f 03 c0       	mov    esi,0xc0032fd7
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
