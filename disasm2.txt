
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 7b 00 00       	call   c0007b25 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 23 02 c0       	mov    eax,0xc0022388
c0000025:	3d 88 23 02 c0       	cmp    eax,0xc0022388
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 23 02 c0       	push   0xc0022388
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 23 02 c0       	mov    eax,0xc0022388
c0000051:	2d 88 23 02 c0       	sub    eax,0xc0022388
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 23 02 c0       	push   0xc0022388
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb cc f2 01 c0       	mov    ebx,0xc001f2cc
c0000097:	81 eb c8 f2 01 c0    	sub    ebx,0xc001f2c8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c8 f2 01 c0       	mov    esi,0xc001f2c8
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 23 02 c0       	push   0xc0022388
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 88 23 02 c0       	push   0xc0022388
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 bf 45 01 00       	call   c001486c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 61 a4 00 00       	call   c000a726 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 9d 45 01 00       	call   c001486c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 aa 4a 01 00       	call   c0014d98 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 45 51 01 00       	call   c001543c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 a5 04 01 00       	jmp    c0010824 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 f2 01 c0 02 	test   BYTE PTR [edx-0x3ffe0d20],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d20],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d20],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d20],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 f2 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0d20],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d20],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e2a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 9b 6a 00 00       	call   c00079a0 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 f6 69 00 00       	call   c00079a0 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e0 69 00 00       	call   c00079a0 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 de 68 00 00       	call   c00079a0 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011af:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000124f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000126a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001324:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000132a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001331:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013f7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013fd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001404:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001552:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 e4 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c1c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 4a 6b 01 00       	jmp    c0018924 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 74 6b 01 00       	jmp    c0018964 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 95 6b 01 00       	jmp    c00189a4 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 40 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0ac0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 40 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0ac0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 80 16 02 c0       	mov    edx,0xc0021680
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba fc f3 01 c0       	mov    edx,0xc001f3fc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 02 f4 01 c0       	mov    eax,0xc001f402
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf c0 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0b40]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 0b f4 01 c0       	mov    eax,0xc001f40b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 40 f5 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0ac0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 90 f4 01 c0       	mov    eax,0xc001f490
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 80 f4 01 c0       	mov    ebx,0xc001f480
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 60 f4 01 c0       	mov    eax,0xc001f460
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 70 f4 01 c0       	mov    eax,0xc001f470
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 12 f4 01 c0       	mov    edx,0xc001f412
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 1e f4 01 c0       	mov    edx,0xc001f41e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 32 f4 01 c0       	mov    edx,0xc001f432
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 68 1e 00 00       	call   c0007acb <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 60 1e 00 00       	call   c0007adb <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 60 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f860
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 60 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f860
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 a0 f5 01 c0       	mov    eax,0xc001f5a0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 60 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0aa0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 60 f9 01 c0       	push   0xc001f960
c0006147:	e8 7c 31 01 00       	call   c00192c8 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 6e f9 01 c0       	push   0xc001f96e
c000617f:	e8 44 31 01 00       	call   c00192c8 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 ad 30 01 00       	call   c001926c <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 40 02 c0       	mov    eax,0xc0024020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 7d f9 01 c0       	push   0xc001f97d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000657b:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006585:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c000659d:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006616:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00066ad:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000670f:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000674c:	05 40 45 02 c0       	add    eax,0xc0024540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c000680c:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 80 f9 01 c0       	push   0xc001f980
c000682f:	e8 94 2a 01 00       	call   c00192c8 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 a2 2a 01 00       	call   c00192e4 <iso_kprintfd>
c0006842:	c7 04 24 85 f9 01 c0 	mov    DWORD PTR [esp],0xc001f985
c0006849:	e8 7a 2a 01 00       	call   c00192c8 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006855:	e8 8a 2a 01 00       	call   c00192e4 <iso_kprintfd>
c000685a:	c7 04 24 8b f9 01 c0 	mov    DWORD PTR [esp],0xc001f98b
c0006861:	e8 62 2a 01 00       	call   c00192c8 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c000686d:	e8 72 2a 01 00       	call   c00192e4 <iso_kprintfd>
c0006872:	c7 04 24 91 f9 01 c0 	mov    DWORD PTR [esp],0xc001f991
c0006879:	e8 4a 2a 01 00       	call   c00192c8 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006885:	e8 5a 2a 01 00       	call   c00192e4 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068eb:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 7d f9 01 c0       	push   0xc001f97d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a2a:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a30:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 9a f9 01 c0       	push   0xc001f99a
c0006a52:	e8 71 28 01 00       	call   c00192c8 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a87:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 a5 f9 01 c0       	push   0xc001f9a5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 ac f9 01 c0       	push   0xc001f9ac
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b25:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b48:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 b3 f9 01 c0       	push   0xc001f9b3
c0006b69:	e8 5a 27 01 00       	call   c00192c8 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 be f9 01 c0       	push   0xc001f9be
c0006b84:	e8 3f 27 01 00       	call   c00192c8 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 45 02 c0       	push   0xc0024540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 18 0f 00 00       	call   c0007acb <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006bbf:	e8 07 0f 00 00       	call   c0007acb <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 f2 0e 00 00       	call   c0007acb <malloc>
c0006bd9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 d9 0e 00 00       	call   c0007acb <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006c1f:	e8 b7 0e 00 00       	call   c0007adb <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 a9 0e 00 00       	call   c0007adb <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 8f 0e 00 00       	call   c0007adb <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 7a 0e 00 00       	call   c0007adb <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 50 52 00 00       	call   c000beee <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 cf f9 01 c0       	push   0xc001f9cf
c0006ccf:	e8 e8 94 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 eb 0d 00 00       	call   c0007acb <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cee:	50                   	push   eax
c0006cef:	68 e8 f9 01 c0       	push   0xc001f9e8
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 c8 de 00 00       	call   c0014bc4 <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 15 75 00 c0       	push   0xc0007515
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 d7 e0 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 ac 58 01 c0       	push   0xc00158ac
c0006d20:	52                   	push   edx
c0006d21:	e8 c2 e0 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d30:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d35:	e8 b6 9c 00 00       	call   c00109f0 <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 e4 fa 01 c0       	push   0xc001fae4
c0006d42:	e8 75 94 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c0006d47:	e8 83 ef 00 00       	call   c0015ccf <Vm::initialise8086()>
c0006d4c:	e8 c1 3f 00 00       	call   c000ad12 <Fs::initVFS()>
c0006d51:	c7 04 24 f5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9f5
c0006d58:	e8 5f 94 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 e4 fa 01 c0       	push   0xc001fae4
c0006d7c:	e8 3b 94 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c0006d81:	e8 16 99 00 00       	call   c001069c <Krnl::loadSystemEnv()>
c0006d86:	e8 73 9b 00 00       	call   c00108fe <Krnl::setupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 0f fa 01 c0       	push   0xc001fa0f
c0006d95:	68 18 fa 01 c0       	push   0xc001fa18
c0006d9a:	e8 4f c1 00 00       	call   c0012eee <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 a1 4a 00 00       	call   c000b848 <User::loadClockSettings(int)>
c0006da7:	c7 04 24 08 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb08
c0006dae:	e8 09 94 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 27 51 00 00       	call   c000beec <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 20 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa20
c0006dcc:	e8 eb 93 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 31 fa 01 c0       	push   0xc001fa31
c0006de0:	e8 e3 d7 00 00       	call   c00145c8 <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 1a da 00 00       	call   c0014808 <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 39 e4 00 00       	call   c0015234 <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 4d fa 01 c0       	push   0xc001fa4d
c0006e0f:	50                   	push   eax
c0006e10:	e8 53 51 00 00       	call   c000bf68 <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba 54 fb 01 c0       	mov    edx,0xc001fb54
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 b7 73 01 00       	call   c001e2c6 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 85 87 00 00       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 5e 87 00 00       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 3c 87 00 00       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 1a 87 00 00       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 27 86 00 00       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 02 86 00 00       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 16 72 01 00       	call   c001e280 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 64 6e 01 00       	call   c001def0 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 18 86 00 00       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 56 fa 01 c0       	push   0xc001fa56
c00070fc:	e8 38 97 00 00       	call   c0010839 <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 5c fa 01 c0       	push   0xc001fa5c
c0007138:	e8 fc 96 00 00       	call   c0010839 <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 1f 80 00 00       	jmp    c000f1a4 <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 62 fa 01 c0       	push   0xc001fa62
c00071db:	0f 94 05 c0 1e 02 c0 	sete   BYTE PTR ds:0xc0021ec0
c00071e2:	e8 d5 8f 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 d8 08 00 00       	call   c0007acb <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 1b 7b 00 00       	call   c000ed18 <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 c4 4b 00 00       	call   c000bdd0 <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 7a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa7a
c0007225:	e8 92 8f 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 95 08 00 00       	call   c0007acb <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 4a 85 00 00       	call   c000f78a <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 81 4b 00 00       	call   c000bdd0 <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 28 fb 01 c0       	push   0xc001fb28
c000726c:	e8 4b 8f 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c0007271:	e8 32 fc 00 00       	call   c0016ea8 <HalInitialiseCoprocessor()>
c0007276:	c7 04 24 94 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa94
c000727d:	e8 3a 8f 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c0007282:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007289:	e8 82 dc 00 00       	call   c0014f10 <setupMultitasking(void (*)())>
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	c3                   	ret    
c0007299:	90                   	nop

c000729a <Computer::disableNMI()>:
c000729a:	6a 00                	push   0x0
c000729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a0:	50                   	push   eax
c00072a1:	e8 08 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c00072a6:	5a                   	pop    edx
c00072a7:	59                   	pop    ecx
c00072a8:	c3                   	ret    
c00072a9:	90                   	nop

c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072aa:	53                   	push   ebx
c00072ab:	b2 80                	mov    dl,0x80
c00072ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c0:	74 02                	je     c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072c2:	31 d2                	xor    edx,edx
c00072c4:	09 d0                	or     eax,edx
c00072c6:	e6 70                	out    0x70,al
c00072c8:	88 c8                	mov    al,cl
c00072ca:	e6 71                	out    0x71,al
c00072cc:	5b                   	pop    ebx
c00072cd:	c3                   	ret    

c00072ce <Computer::handleNMI()>:
c00072ce:	56                   	push   esi
c00072cf:	53                   	push   ebx
c00072d0:	83 ec 10             	sub    esp,0x10
c00072d3:	e4 92                	in     al,0x92
c00072d5:	89 c6                	mov    esi,eax
c00072d7:	e4 61                	in     al,0x61
c00072d9:	68 af fa 01 c0       	push   0xc001faaf
c00072de:	88 c3                	mov    bl,al
c00072e0:	e8 8a 36 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00072e5:	83 c4 10             	add    esp,0x10
c00072e8:	83 e6 10             	and    esi,0x10
c00072eb:	75 10                	jne    c00072fd <Computer::handleNMI()+0x2f>
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	75 20                	jne    c0007312 <Computer::handleNMI()+0x44>
c00072f2:	80 e3 80             	and    bl,0x80
c00072f5:	75 30                	jne    c0007327 <Computer::handleNMI()+0x59>
c00072f7:	83 c4 04             	add    esp,0x4
c00072fa:	5b                   	pop    ebx
c00072fb:	5e                   	pop    esi
c00072fc:	c3                   	ret    
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	68 c0 fa 01 c0       	push   0xc001fac0
c0007305:	e8 2f 95 00 00       	call   c0010839 <KePanic(char const*)>
c000730a:	83 c4 10             	add    esp,0x10
c000730d:	f6 c3 40             	test   bl,0x40
c0007310:	74 e0                	je     c00072f2 <Computer::handleNMI()+0x24>
c0007312:	83 ec 0c             	sub    esp,0xc
c0007315:	68 cd fa 01 c0       	push   0xc001facd
c000731a:	e8 1a 95 00 00       	call   c0010839 <KePanic(char const*)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	80 e3 80             	and    bl,0x80
c0007325:	74 d0                	je     c00072f7 <Computer::handleNMI()+0x29>
c0007327:	c7 44 24 10 d7 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fad7
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	e9 00 95 00 00       	jmp    c0010839 <KePanic(char const*)>
c0007339:	90                   	nop

c000733a <GDTEntry::setBase(unsigned int)>:
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007342:	89 c1                	mov    ecx,eax
c0007344:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007348:	c1 e9 10             	shr    ecx,0x10
c000734b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000734e:	c1 e8 18             	shr    eax,0x18
c0007351:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007354:	c3                   	ret    
c0007355:	90                   	nop

c0007356 <GDTEntry::setLimit(unsigned int)>:
c0007356:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007361:	66 89 01             	mov    WORD PTR [ecx],ax
c0007364:	c1 e8 10             	shr    eax,0x10
c0007367:	83 e0 0f             	and    eax,0xf
c000736a:	83 e2 f0             	and    edx,0xfffffff0
c000736d:	09 d0                	or     eax,edx
c000736f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <GDT::GDT()>:
c0007374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	90                   	nop
c0007389:	c3                   	ret    

c000738a <GDT::addEntry(GDTEntry)>:
c000738a:	53                   	push   ebx
c000738b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000738f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007397:	8b 02                	mov    eax,DWORD PTR [edx]
c0007399:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000739d:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a0:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073a4:	c1 e0 03             	shl    eax,0x3
c00073a7:	89 0a                	mov    DWORD PTR [edx],ecx
c00073a9:	5b                   	pop    ebx
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::getNumberOfEntries()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::flush()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00073ba:	83 c0 04             	add    eax,0x4
c00073bd:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073c2:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073c9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073d0:	e9 85 8f ff ff       	jmp    c000035a <loadGDT>
c00073d5:	90                   	nop

c00073d6 <GDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 30             	sub    esp,0x30
c00073dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e0:	6a 00                	push   0x0
c00073e2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073e6:	56                   	push   esi
c00073e7:	e8 4e ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c00073ec:	6a 00                	push   0x0
c00073ee:	56                   	push   esi
c00073ef:	e8 62 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c00073f4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073fc:	6a 00                	push   0x0
c00073fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007402:	56                   	push   esi
c0007403:	e8 32 ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0007408:	68 ff ff ff 00       	push   0xffffff
c000740d:	56                   	push   esi
c000740e:	e8 43 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0007413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007417:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000741b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007424:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000742d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007431:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007435:	89 f8                	mov    eax,edi
c0007437:	89 fa                	mov    edx,edi
c0007439:	80 e4 f7             	and    ah,0xf7
c000743c:	80 ce 60             	or     dh,0x60
c000743f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007443:	89 c7                	mov    edi,eax
c0007445:	80 cc 60             	or     ah,0x60
c0007448:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000744c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007454:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000745c:	83 c4 20             	add    esp,0x20
c000745f:	6a 00                	push   0x0
c0007461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007465:	50                   	push   eax
c0007466:	e8 cf fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000746b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000746f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007473:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007477:	83 e0 3f             	and    eax,0x3f
c000747a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000747e:	6a 00                	push   0x0
c0007480:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007484:	50                   	push   eax
c0007485:	e8 b0 fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000748a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000748e:	83 e0 3f             	and    eax,0x3f
c0007491:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a0:	53                   	push   ebx
c00074a1:	e8 e4 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b1:	53                   	push   ebx
c00074b2:	e8 d3 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	53                   	push   ebx
c00074bd:	e8 c8 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074c9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074cd:	53                   	push   ebx
c00074ce:	e8 b7 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074de:	53                   	push   ebx
c00074df:	e8 a6 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ef:	53                   	push   ebx
c00074f0:	e8 95 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007500:	53                   	push   ebx
c0007501:	e8 84 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0007506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::flush()>
c000750e:	83 c4 40             	add    esp,0x40
c0007511:	5b                   	pop    ebx
c0007512:	5e                   	pop    esi
c0007513:	5f                   	pop    edi
c0007514:	c3                   	ret    

c0007515 <idleFunction(void*)>:
c0007515:	83 ec 0c             	sub    esp,0xc
c0007518:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000751d:	48                   	dec    eax
c000751e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007523:	75 01                	jne    c0007526 <idleFunction(void*)+0x11>
c0007525:	fb                   	sti    
c0007526:	e8 49 f6 00 00       	call   c0016b74 <HalSystemIdle()>
c000752b:	e8 52 73 01 00       	call   c001e882 <idleCommon()>
c0007530:	eb f4                	jmp    c0007526 <idleFunction(void*)+0x11>
c0007532:	66 90                	xchg   ax,ax

c0007534 <IDTEntry::IDTEntry(bool)>:
c0007534:	53                   	push   ebx
c0007535:	83 ec 04             	sub    esp,0x4
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	88 04 24             	mov    BYTE PTR [esp],al
c000753f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007543:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007558:	83 e2 f0             	and    edx,0xfffffff0
c000755b:	83 ca 0e             	or     edx,0xe
c000755e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007568:	83 e2 ef             	and    edx,0xffffffef
c000756b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007572:	85 c0                	test   eax,eax
c0007574:	74 06                	je     c000757c <IDTEntry::IDTEntry(bool)+0x48>
c0007576:	b2 03                	mov    dl,0x3
c0007578:	eb 06                	jmp    c0007580 <IDTEntry::IDTEntry(bool)+0x4c>
c000757a:	66 90                	xchg   ax,ax
c000757c:	b2 00                	mov    dl,0x0
c000757e:	66 90                	xchg   ax,ax
c0007580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007584:	83 e2 03             	and    edx,0x3
c0007587:	89 d3                	mov    ebx,edx
c0007589:	c1 e3 05             	shl    ebx,0x5
c000758c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758f:	83 e2 9f             	and    edx,0xffffff9f
c0007592:	88 d1                	mov    cl,dl
c0007594:	88 da                	mov    dl,bl
c0007596:	09 ca                	or     edx,ecx
c0007598:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a2:	83 ca 80             	or     edx,0xffffff80
c00075a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a8:	90                   	nop
c00075a9:	83 c4 04             	add    esp,0x4
c00075ac:	5b                   	pop    ebx
c00075ad:	c3                   	ret    

c00075ae <IDTEntry::setOffset(unsigned int)>:
c00075ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b6:	66 89 02             	mov    WORD PTR [edx],ax
c00075b9:	c1 e8 10             	shr    eax,0x10
c00075bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c0:	c3                   	ret    
c00075c1:	90                   	nop
c00075c2:	66 90                	xchg   ax,ax

c00075c4 <IDT::IDT()>:
c00075c4:	90                   	nop
c00075c5:	c3                   	ret    

c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ca:	83 c0 30             	add    eax,0x30
c00075cd:	c3                   	ret    

c00075ce <IDT::addEntry(IDTEntry, int)>:
c00075ce:	53                   	push   ebx
c00075cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075e6:	5b                   	pop    ebx
c00075e7:	c3                   	ret    

c00075e8 <IDT::addEntry(int, void (*)(), bool)>:
c00075e8:	53                   	push   ebx
c00075e9:	83 ec 10             	sub    esp,0x10
c00075ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f1:	50                   	push   eax
c00075f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f6:	53                   	push   ebx
c00075f7:	e8 38 ff ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c00075fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007600:	53                   	push   ebx
c0007601:	e8 a8 ff ff ff       	call   c00075ae <IDTEntry::setOffset(unsigned int)>
c0007606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000760e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007612:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007616:	e8 b3 ff ff ff       	call   c00075ce <IDT::addEntry(IDTEntry, int)>
c000761b:	83 c4 30             	add    esp,0x30
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::flush()>:
c0007620:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007632:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007639:	c3                   	ret    

c000763a <IDT::setup()>:
c000763a:	57                   	push   edi
c000763b:	56                   	push   esi
c000763c:	53                   	push   ebx
c000763d:	83 ec 10             	sub    esp,0x10
c0007640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007644:	6a 00                	push   0x0
c0007646:	68 80 df 01 c0       	push   0xc001df80
c000764b:	6a 00                	push   0x0
c000764d:	53                   	push   ebx
c000764e:	e8 95 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 90 df 01 c0       	push   0xc001df90
c000765a:	6a 01                	push   0x1
c000765c:	53                   	push   ebx
c000765d:	e8 86 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 9a df 01 c0       	push   0xc001df9a
c000766c:	6a 02                	push   0x2
c000766e:	53                   	push   ebx
c000766f:	e8 74 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 a4 df 01 c0       	push   0xc001dfa4
c000767b:	6a 03                	push   0x3
c000767d:	53                   	push   ebx
c000767e:	e8 65 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 ae df 01 c0       	push   0xc001dfae
c000768d:	6a 04                	push   0x4
c000768f:	53                   	push   ebx
c0007690:	e8 53 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 b8 df 01 c0       	push   0xc001dfb8
c000769c:	6a 05                	push   0x5
c000769e:	53                   	push   ebx
c000769f:	e8 44 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 c2 df 01 c0       	push   0xc001dfc2
c00076ae:	6a 06                	push   0x6
c00076b0:	53                   	push   ebx
c00076b1:	e8 32 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 cc df 01 c0       	push   0xc001dfcc
c00076bd:	6a 07                	push   0x7
c00076bf:	53                   	push   ebx
c00076c0:	e8 23 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 d6 df 01 c0       	push   0xc001dfd6
c00076cf:	6a 08                	push   0x8
c00076d1:	53                   	push   ebx
c00076d2:	e8 11 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 de df 01 c0       	push   0xc001dfde
c00076de:	6a 09                	push   0x9
c00076e0:	53                   	push   ebx
c00076e1:	e8 02 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 e8 df 01 c0       	push   0xc001dfe8
c00076f0:	6a 0a                	push   0xa
c00076f2:	53                   	push   ebx
c00076f3:	e8 f0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 00                	push   0x0
c00076fa:	68 f0 df 01 c0       	push   0xc001dff0
c00076ff:	6a 0b                	push   0xb
c0007701:	53                   	push   ebx
c0007702:	e8 e1 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 f8 df 01 c0       	push   0xc001dff8
c0007711:	6a 0c                	push   0xc
c0007713:	53                   	push   ebx
c0007714:	e8 cf fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 00 e0 01 c0       	push   0xc001e000
c0007720:	6a 0d                	push   0xd
c0007722:	53                   	push   ebx
c0007723:	e8 c0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 1a e0 01 c0       	push   0xc001e01a
c0007732:	6a 0e                	push   0xe
c0007734:	53                   	push   ebx
c0007735:	e8 ae fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 22 e0 01 c0       	push   0xc001e022
c0007741:	6a 0f                	push   0xf
c0007743:	53                   	push   ebx
c0007744:	e8 9f fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 2c e0 01 c0       	push   0xc001e02c
c0007753:	6a 10                	push   0x10
c0007755:	53                   	push   ebx
c0007756:	e8 8d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 36 e0 01 c0       	push   0xc001e036
c0007762:	6a 11                	push   0x11
c0007764:	53                   	push   ebx
c0007765:	e8 7e fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 40 e0 01 c0       	push   0xc001e040
c0007774:	6a 12                	push   0x12
c0007776:	53                   	push   ebx
c0007777:	e8 6c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 01                	push   0x1
c000777e:	68 da e0 01 c0       	push   0xc001e0da
c0007783:	6a 60                	push   0x60
c0007785:	53                   	push   ebx
c0007786:	e8 5d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 e1 e0 01 c0       	push   0xc001e0e1
c0007795:	6a 20                	push   0x20
c0007797:	53                   	push   ebx
c0007798:	e8 4b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 cc e0 01 c0       	push   0xc001e0cc
c00077a4:	6a 21                	push   0x21
c00077a6:	53                   	push   ebx
c00077a7:	e8 3c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 d3 e0 01 c0       	push   0xc001e0d3
c00077b6:	6a 22                	push   0x22
c00077b8:	53                   	push   ebx
c00077b9:	e8 2a fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 4a e0 01 c0       	push   0xc001e04a
c00077c5:	6a 23                	push   0x23
c00077c7:	53                   	push   ebx
c00077c8:	e8 1b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 54 e0 01 c0       	push   0xc001e054
c00077d7:	6a 24                	push   0x24
c00077d9:	53                   	push   ebx
c00077da:	e8 09 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 5e e0 01 c0       	push   0xc001e05e
c00077e6:	6a 25                	push   0x25
c00077e8:	53                   	push   ebx
c00077e9:	e8 fa fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 68 e0 01 c0       	push   0xc001e068
c00077f8:	6a 26                	push   0x26
c00077fa:	53                   	push   ebx
c00077fb:	e8 e8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 72 e0 01 c0       	push   0xc001e072
c0007807:	6a 27                	push   0x27
c0007809:	53                   	push   ebx
c000780a:	e8 d9 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 7c e0 01 c0       	push   0xc001e07c
c0007819:	6a 28                	push   0x28
c000781b:	53                   	push   ebx
c000781c:	e8 c7 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 86 e0 01 c0       	push   0xc001e086
c0007828:	6a 29                	push   0x29
c000782a:	53                   	push   ebx
c000782b:	e8 b8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 90 e0 01 c0       	push   0xc001e090
c000783a:	6a 2a                	push   0x2a
c000783c:	53                   	push   ebx
c000783d:	e8 a6 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 9a e0 01 c0       	push   0xc001e09a
c0007849:	6a 2b                	push   0x2b
c000784b:	53                   	push   ebx
c000784c:	e8 97 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 a4 e0 01 c0       	push   0xc001e0a4
c000785b:	6a 2c                	push   0x2c
c000785d:	53                   	push   ebx
c000785e:	e8 85 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 ae e0 01 c0       	push   0xc001e0ae
c000786a:	6a 2d                	push   0x2d
c000786c:	53                   	push   ebx
c000786d:	e8 76 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 b8 e0 01 c0       	push   0xc001e0b8
c000787c:	6a 2e                	push   0x2e
c000787e:	53                   	push   ebx
c000787f:	e8 64 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 c2 e0 01 c0       	push   0xc001e0c2
c000788b:	6a 2f                	push   0x2f
c000788d:	53                   	push   ebx
c000788e:	e8 55 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	6a 00                	push   0x0
c0007898:	68 1c e2 01 c0       	push   0xc001e21c
c000789d:	6a 30                	push   0x30
c000789f:	53                   	push   ebx
c00078a0:	e8 43 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	6a 00                	push   0x0
c00078a7:	68 26 e2 01 c0       	push   0xc001e226
c00078ac:	6a 31                	push   0x31
c00078ae:	53                   	push   ebx
c00078af:	e8 34 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078b4:	83 c4 20             	add    esp,0x20
c00078b7:	6a 00                	push   0x0
c00078b9:	68 30 e2 01 c0       	push   0xc001e230
c00078be:	6a 32                	push   0x32
c00078c0:	53                   	push   ebx
c00078c1:	e8 22 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	6a 00                	push   0x0
c00078c8:	68 3a e2 01 c0       	push   0xc001e23a
c00078cd:	6a 33                	push   0x33
c00078cf:	53                   	push   ebx
c00078d0:	e8 13 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	6a 00                	push   0x0
c00078da:	68 44 e2 01 c0       	push   0xc001e244
c00078df:	6a 34                	push   0x34
c00078e1:	53                   	push   ebx
c00078e2:	e8 01 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	6a 00                	push   0x0
c00078e9:	68 4e e2 01 c0       	push   0xc001e24e
c00078ee:	6a 35                	push   0x35
c00078f0:	53                   	push   ebx
c00078f1:	e8 f2 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078f6:	83 c4 20             	add    esp,0x20
c00078f9:	6a 00                	push   0x0
c00078fb:	68 58 e2 01 c0       	push   0xc001e258
c0007900:	6a 36                	push   0x36
c0007902:	53                   	push   ebx
c0007903:	e8 e0 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007908:	6a 00                	push   0x0
c000790a:	68 62 e2 01 c0       	push   0xc001e262
c000790f:	6a 37                	push   0x37
c0007911:	53                   	push   ebx
c0007912:	e8 d1 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	6a 03                	push   0x3
c000791c:	6a 02                	push   0x2
c000791e:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007924:	e8 c7 24 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007929:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007930:	89 c6                	mov    esi,eax
c0007932:	e8 94 01 00 00       	call   c0007acb <malloc>
c0007937:	81 c6 00 20 00 00    	add    esi,0x2000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	89 c7                	mov    edi,eax
c0007942:	e8 f5 15 00 00       	call   c0008f3c <TSS::TSS()>
c0007947:	83 c4 0c             	add    esp,0xc
c000794a:	68 d6 df 01 c0       	push   0xc001dfd6
c000794f:	56                   	push   esi
c0007950:	57                   	push   edi
c0007951:	e8 2a 16 00 00       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c0007956:	89 c6                	mov    esi,eax
c0007958:	58                   	pop    eax
c0007959:	5a                   	pop    edx
c000795a:	6a 00                	push   0x0
c000795c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007960:	50                   	push   eax
c0007961:	e8 ce fb ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c0007966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000796f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007980:	80 ce 05             	or     dh,0x5
c0007983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007987:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000798e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007994:	e8 87 fc ff ff       	call   c0007620 <IDT::flush()>
c0007999:	83 c4 20             	add    esp,0x20
c000799c:	5b                   	pop    ebx
c000799d:	5e                   	pop    esi
c000799e:	5f                   	pop    edi
c000799f:	c3                   	ret    

c00079a0 <sbrk>:
c00079a0:	55                   	push   ebp
c00079a1:	57                   	push   edi
c00079a2:	56                   	push   esi
c00079a3:	53                   	push   ebx
c00079a4:	83 ec 1c             	sub    esp,0x1c
c00079a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079ab:	85 c0                	test   eax,eax
c00079ad:	74 66                	je     c0007a15 <sbrk+0x75>
c00079af:	78 6b                	js     c0007a1c <sbrk+0x7c>
c00079b1:	8b 15 a8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021ea8
c00079b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079bb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c1:	05 ff 0f 00 00       	add    eax,0xfff
c00079c6:	0f 49 e8             	cmovns ebp,eax
c00079c9:	c1 fd 0c             	sar    ebp,0xc
c00079cc:	bb 00 00 00 00       	mov    ebx,0x0
c00079d1:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079d7:	8b 3d a8 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021ea8
c00079dd:	e8 f4 03 00 00       	call   c0007dd6 <Phys::allocatePage()>
c00079e2:	68 01 04 00 00       	push   0x401
c00079e7:	57                   	push   edi
c00079e8:	50                   	push   eax
c00079e9:	56                   	push   esi
c00079ea:	e8 f5 22 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ef:	81 05 a8 1e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021ea8,0x1000
c00079f9:	83 c3 01             	add    ebx,0x1
c00079fc:	83 c4 10             	add    esp,0x10
c00079ff:	39 dd                	cmp    ebp,ebx
c0007a01:	75 ce                	jne    c00079d1 <sbrk+0x31>
c0007a03:	0f 20 d8             	mov    eax,cr3
c0007a06:	0f 22 d8             	mov    cr3,eax
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	83 c4 1c             	add    esp,0x1c
c0007a10:	5b                   	pop    ebx
c0007a11:	5e                   	pop    esi
c0007a12:	5f                   	pop    edi
c0007a13:	5d                   	pop    ebp
c0007a14:	c3                   	ret    
c0007a15:	a1 a8 1e 02 c0       	mov    eax,ds:0xc0021ea8
c0007a1a:	eb f1                	jmp    c0007a0d <sbrk+0x6d>
c0007a1c:	83 ec 08             	sub    esp,0x8
c0007a1f:	50                   	push   eax
c0007a20:	68 78 fb 01 c0       	push   0xc001fb78
c0007a25:	e8 45 2f 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0007a2a:	83 c4 10             	add    esp,0x10
c0007a2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a32:	eb d9                	jmp    c0007a0d <sbrk+0x6d>

c0007a34 <mmap>:
c0007a34:	83 ec 18             	sub    esp,0x18
c0007a37:	68 a8 fb 01 c0       	push   0xc001fba8
c0007a3c:	e8 f8 8d 00 00       	call   c0010839 <KePanic(char const*)>
c0007a41:	b8 00 00 00 00       	mov    eax,0x0
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <munmap>:
c0007a4a:	83 ec 18             	sub    esp,0x18
c0007a4d:	68 ad fb 01 c0       	push   0xc001fbad
c0007a52:	e8 e2 8d 00 00       	call   c0010839 <KePanic(char const*)>
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	83 c4 1c             	add    esp,0x1c
c0007a5f:	c3                   	ret    

c0007a60 <liballoc_lock()>:
c0007a60:	fa                   	cli    
c0007a61:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a68:	b8 00 00 00 00       	mov    eax,0x0
c0007a6d:	c3                   	ret    

c0007a6e <liballoc_unlock()>:
c0007a6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a73:	83 e8 01             	sub    eax,0x1
c0007a76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a7b:	75 01                	jne    c0007a7e <liballoc_unlock()+0x10>
c0007a7d:	fb                   	sti    
c0007a7e:	b8 00 00 00 00       	mov    eax,0x0
c0007a83:	c3                   	ret    

c0007a84 <liballoc_alloc(int)>:
c0007a84:	83 ec 10             	sub    esp,0x10
c0007a87:	6a 01                	push   0x1
c0007a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a93:	e8 58 23 00 00       	call   c0009df0 <VAS::allocatePages(int, int)>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_free(void*, int)>:
c0007a9c:	83 ec 14             	sub    esp,0x14
c0007a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007aa9:	e8 7c 1f 00 00       	call   c0009a2a <VAS::freeAllocatedPages(unsigned long)>
c0007aae:	b8 00 00 00 00       	mov    eax,0x0
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <realloc>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac2:	e8 5a 9b ff ff       	call   c0001621 <dlrealloc>
c0007ac7:	83 c4 1c             	add    esp,0x1c
c0007aca:	c3                   	ret    

c0007acb <malloc>:
c0007acb:	83 ec 18             	sub    esp,0x18
c0007ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad2:	e8 0d 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ad7:	83 c4 1c             	add    esp,0x1c
c0007ada:	c3                   	ret    

c0007adb <free>:
c0007adb:	83 ec 18             	sub    esp,0x18
c0007ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae2:	e8 9f 92 ff ff       	call   c0000d86 <dlfree>
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <rfree>:
c0007aeb:	83 ec 18             	sub    esp,0x18
c0007aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af2:	e8 8f 92 ff ff       	call   c0000d86 <dlfree>
c0007af7:	83 c4 1c             	add    esp,0x1c
c0007afa:	c3                   	ret    

c0007afb <calloc>:
c0007afb:	56                   	push   esi
c0007afc:	53                   	push   ebx
c0007afd:	83 ec 10             	sub    esp,0x10
c0007b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b09:	53                   	push   ebx
c0007b0a:	e8 bc ff ff ff       	call   c0007acb <malloc>
c0007b0f:	89 c6                	mov    esi,eax
c0007b11:	83 c4 0c             	add    esp,0xc
c0007b14:	53                   	push   ebx
c0007b15:	6a 00                	push   0x0
c0007b17:	50                   	push   eax
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	89 f0                	mov    eax,esi
c0007b1f:	83 c4 14             	add    esp,0x14
c0007b22:	5b                   	pop    ebx
c0007b23:	5e                   	pop    esi
c0007b24:	c3                   	ret    

c0007b25 <KeEntryPoint>:
c0007b25:	57                   	push   edi
c0007b26:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b2b:	56                   	push   esi
c0007b2c:	31 f6                	xor    esi,esi
c0007b2e:	53                   	push   ebx
c0007b2f:	89 fa                	mov    edx,edi
c0007b31:	83 ec 2c             	sub    esp,0x2c
c0007b34:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b39:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b3e:	89 f0                	mov    eax,esi
c0007b40:	ee                   	out    dx,al
c0007b41:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b46:	b0 80                	mov    al,0x80
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b1 03                	mov    cl,0x3
c0007b4d:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b52:	88 c8                	mov    al,cl
c0007b54:	ee                   	out    dx,al
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	ee                   	out    dx,al
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	ee                   	out    dx,al
c0007b5f:	b0 c7                	mov    al,0xc7
c0007b61:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 0b                	mov    al,0xb
c0007b69:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b6e:	ee                   	out    dx,al
c0007b6f:	68 b4 fb 01 c0       	push   0xc001fbb4
c0007b74:	e8 f6 2d 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0007b79:	e8 c9 85 00 00       	call   c0010147 <KeDisplaySplashScreen()>
c0007b7e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	e8 af 03 00 00       	call   c0007f44 <Phys::physicalMemorySetup(unsigned int)>
c0007b95:	e8 3f 1c 00 00       	call   c00097d9 <Virt::virtualMemorySetup()>
c0007b9a:	58                   	pop    eax
c0007b9b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b9f:	53                   	push   ebx
c0007ba0:	e8 07 1f 00 00       	call   c0009aac <VAS::VAS()>
c0007ba5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bab:	e8 6a 6c 01 00       	call   c001e81a <_init>
c0007bb0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bb7:	e8 0f ff ff ff       	call   c0007acb <malloc>
c0007bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bbf:	89 c6                	mov    esi,eax
c0007bc1:	e8 3a f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bc6:	6a 00                	push   0x0
c0007bc8:	6a 00                	push   0x0
c0007bca:	6a 00                	push   0x0
c0007bcc:	56                   	push   esi
c0007bcd:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bd3:	e8 ee f5 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bd8:	83 c4 14             	add    esp,0x14
c0007bdb:	53                   	push   ebx
c0007bdc:	e8 95 1f 00 00       	call   c0009b76 <VAS::~VAS()>
c0007be1:	83 c4 30             	add    esp,0x30
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	5f                   	pop    edi
c0007be7:	c3                   	ret    

c0007be8 <Phys::allocateDMA(unsigned long)>:
c0007be8:	55                   	push   ebp
c0007be9:	31 ed                	xor    ebp,ebp
c0007beb:	57                   	push   edi
c0007bec:	56                   	push   esi
c0007bed:	31 f6                	xor    esi,esi
c0007bef:	53                   	push   ebx
c0007bf0:	31 db                	xor    ebx,ebx
c0007bf2:	83 ec 1c             	sub    esp,0x1c
c0007bf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf9:	05 ff 0f 00 00       	add    eax,0xfff
c0007bfe:	c1 e8 0c             	shr    eax,0xc
c0007c01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c05:	31 c0                	xor    eax,eax
c0007c07:	eb 1b                	jmp    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c09:	8d 78 01             	lea    edi,[eax+0x1]
c0007c0c:	85 c0                	test   eax,eax
c0007c0e:	0f 44 eb             	cmove  ebp,ebx
c0007c11:	0f 44 f3             	cmove  esi,ebx
c0007c14:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c18:	74 37                	je     c0007c51 <Phys::allocateDMA(unsigned long)+0x69>
c0007c1a:	89 f8                	mov    eax,edi
c0007c1c:	83 c3 01             	add    ebx,0x1
c0007c1f:	83 fb 0f             	cmp    ebx,0xf
c0007c22:	7f 13                	jg     c0007c37 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c24:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c2b:	74 dc                	je     c0007c09 <Phys::allocateDMA(unsigned long)+0x21>
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c3 01             	add    ebx,0x1
c0007c32:	83 fb 0f             	cmp    ebx,0xf
c0007c35:	7e ed                	jle    c0007c24 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c37:	83 ec 0c             	sub    esp,0xc
c0007c3a:	68 cc fb 01 c0       	push   0xc001fbcc
c0007c3f:	e8 f5 8b 00 00       	call   c0010839 <KePanic(char const*)>
c0007c44:	83 c4 10             	add    esp,0x10
c0007c47:	31 c0                	xor    eax,eax
c0007c49:	83 c4 1c             	add    esp,0x1c
c0007c4c:	5b                   	pop    ebx
c0007c4d:	5e                   	pop    esi
c0007c4e:	5f                   	pop    edi
c0007c4f:	5d                   	pop    ebp
c0007c50:	c3                   	ret    
c0007c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c55:	89 f2                	mov    edx,esi
c0007c57:	c1 fa 04             	sar    edx,0x4
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	01 f1                	add    ecx,esi
c0007c60:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c63:	83 e9 01             	sub    ecx,0x1
c0007c66:	0f 48 ca             	cmovs  ecx,edx
c0007c69:	c1 f9 04             	sar    ecx,0x4
c0007c6c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c70:	74 06                	je     c0007c78 <Phys::allocateDMA(unsigned long)+0x90>
c0007c72:	89 eb                	mov    ebx,ebp
c0007c74:	31 c0                	xor    eax,eax
c0007c76:	eb b7                	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x47>
c0007c78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7c:	85 d2                	test   edx,edx
c0007c7e:	74 17                	je     c0007c97 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c80:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c86:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c8d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c90:	83 c2 01             	add    edx,0x1
c0007c93:	39 d0                	cmp    eax,edx
c0007c95:	75 f6                	jne    c0007c8d <Phys::allocateDMA(unsigned long)+0xa5>
c0007c97:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ca5:	01 c2                	add    edx,eax
c0007ca7:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007cad:	85 c9                	test   ecx,ecx
c0007caf:	74 17                	je     c0007cc8 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	68 cc fb 01 c0       	push   0xc001fbcc
c0007cb9:	e8 7b 8b 00 00       	call   c0010839 <KePanic(char const*)>
c0007cbe:	83 c4 10             	add    esp,0x10
c0007cc1:	89 f8                	mov    eax,edi
c0007cc3:	e9 54 ff ff ff       	jmp    c0007c1c <Phys::allocateDMA(unsigned long)+0x34>
c0007cc8:	c1 e6 0c             	shl    esi,0xc
c0007ccb:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cd1:	e9 73 ff ff ff       	jmp    c0007c49 <Phys::allocateDMA(unsigned long)+0x61>

c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cda:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ce0:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ce5:	c1 ea 0c             	shr    edx,0xc
c0007ce8:	29 d0                	sub    eax,edx
c0007cea:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cf8:	c1 e8 0c             	shr    eax,0xc
c0007cfb:	85 d2                	test   edx,edx
c0007cfd:	74 11                	je     c0007d10 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cff:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d04:	01 c2                	add    edx,eax
c0007d06:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d09:	83 c0 01             	add    eax,0x1
c0007d0c:	39 d0                	cmp    eax,edx
c0007d0e:	75 f6                	jne    c0007d06 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d10:	c3                   	ret    

c0007d11 <Phys::setPageState(unsigned long, bool)>:
c0007d11:	57                   	push   edi
c0007d12:	56                   	push   esi
c0007d13:	8b 35 ac 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eac
c0007d19:	53                   	push   ebx
c0007d1a:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d27:	89 ca                	mov    edx,ecx
c0007d29:	83 e1 07             	and    ecx,0x7
c0007d2c:	c1 ea 03             	shr    edx,0x3
c0007d2f:	0f b6 c0             	movzx  eax,al
c0007d32:	d3 c3                	rol    ebx,cl
c0007d34:	01 d6                	add    esi,edx
c0007d36:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d39:	d3 e0                	shl    eax,cl
c0007d3b:	21 fb                	and    ebx,edi
c0007d3d:	88 1e                	mov    BYTE PTR [esi],bl
c0007d3f:	8b 1d ac 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eac
c0007d45:	01 da                	add    edx,ebx
c0007d47:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d49:	09 c8                	or     eax,ecx
c0007d4b:	88 02                	mov    BYTE PTR [edx],al
c0007d4d:	5b                   	pop    ebx
c0007d4e:	5e                   	pop    esi
c0007d4f:	5f                   	pop    edi
c0007d50:	c3                   	ret    

c0007d51 <Phys::getPageState(unsigned long)>:
c0007d51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d55:	8b 15 ac 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eac
c0007d5b:	89 c8                	mov    eax,ecx
c0007d5d:	83 e1 07             	and    ecx,0x7
c0007d60:	c1 e8 03             	shr    eax,0x3
c0007d63:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d67:	d3 f8                	sar    eax,cl
c0007d69:	83 e0 01             	and    eax,0x1
c0007d6c:	c3                   	ret    

c0007d6d <Phys::freePage(unsigned long)>:
c0007d6d:	53                   	push   ebx
c0007d6e:	83 ec 08             	sub    esp,0x8
c0007d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d75:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d7b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d81:	76 41                	jbe    c0007dc4 <Phys::freePage(unsigned long)+0x57>
c0007d83:	c1 e8 0c             	shr    eax,0xc
c0007d86:	50                   	push   eax
c0007d87:	89 c3                	mov    ebx,eax
c0007d89:	e8 c3 ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007d8e:	5a                   	pop    edx
c0007d8f:	84 c0                	test   al,al
c0007d91:	74 20                	je     c0007db3 <Phys::freePage(unsigned long)+0x46>
c0007d93:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d98:	83 ec 08             	sub    esp,0x8
c0007d9b:	6a 00                	push   0x0
c0007d9d:	53                   	push   ebx
c0007d9e:	83 e8 01             	sub    eax,0x1
c0007da1:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007da6:	e8 66 ff ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    
c0007db3:	c7 44 24 10 71 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc71
c0007dbb:	83 c4 08             	add    esp,0x8
c0007dbe:	5b                   	pop    ebx
c0007dbf:	e9 75 8a 00 00       	jmp    c0010839 <KePanic(char const*)>
c0007dc4:	68 00 10 00 00       	push   0x1000
c0007dc9:	50                   	push   eax
c0007dca:	e8 07 ff ff ff       	call   c0007cd6 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dcf:	59                   	pop    ecx
c0007dd0:	5b                   	pop    ebx
c0007dd1:	83 c4 08             	add    esp,0x8
c0007dd4:	5b                   	pop    ebx
c0007dd5:	c3                   	ret    

c0007dd6 <Phys::allocatePage()>:
c0007dd6:	56                   	push   esi
c0007dd7:	53                   	push   ebx
c0007dd8:	83 ec 14             	sub    esp,0x14
c0007ddb:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007de1:	89 f3                	mov    ebx,esi
c0007de3:	eb 0a                	jmp    c0007def <Phys::allocatePage()+0x19>
c0007de5:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007deb:	39 de                	cmp    esi,ebx
c0007ded:	74 26                	je     c0007e15 <Phys::allocatePage()+0x3f>
c0007def:	53                   	push   ebx
c0007df0:	e8 5c ff ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007df5:	5a                   	pop    edx
c0007df6:	84 c0                	test   al,al
c0007df8:	74 67                	je     c0007e61 <Phys::allocatePage()+0x8b>
c0007dfa:	83 c3 01             	add    ebx,0x1
c0007dfd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e03:	75 e0                	jne    c0007de5 <Phys::allocatePage()+0xf>
c0007e05:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007e0f:	31 db                	xor    ebx,ebx
c0007e11:	39 de                	cmp    esi,ebx
c0007e13:	75 da                	jne    c0007def <Phys::allocatePage()+0x19>
c0007e15:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007e1a:	83 ec 0c             	sub    esp,0xc
c0007e1d:	83 f0 01             	xor    eax,0x1
c0007e20:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e2d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e33:	50                   	push   eax
c0007e34:	e8 07 28 00 00       	call   c000a640 <VAS::scanForEviction()>
c0007e39:	83 c4 10             	add    esp,0x10
c0007e3c:	85 c0                	test   eax,eax
c0007e3e:	75 48                	jne    c0007e88 <Phys::allocatePage()+0xb2>
c0007e40:	83 ec 0c             	sub    esp,0xc
c0007e43:	68 f4 fb 01 c0       	push   0xc001fbf4
c0007e48:	e8 ec 89 00 00       	call   c0010839 <KePanic(char const*)>
c0007e4d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e53:	83 c4 10             	add    esp,0x10
c0007e56:	53                   	push   ebx
c0007e57:	e8 f5 fe ff ff       	call   c0007d51 <Phys::getPageState(unsigned long)>
c0007e5c:	5a                   	pop    edx
c0007e5d:	84 c0                	test   al,al
c0007e5f:	75 99                	jne    c0007dfa <Phys::allocatePage()+0x24>
c0007e61:	6a 01                	push   0x1
c0007e63:	53                   	push   ebx
c0007e64:	e8 a8 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e69:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e6f:	59                   	pop    ecx
c0007e70:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e75:	5b                   	pop    ebx
c0007e76:	83 c2 01             	add    edx,0x1
c0007e79:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e7f:	c1 e0 0c             	shl    eax,0xc
c0007e82:	83 c4 14             	add    esp,0x14
c0007e85:	5b                   	pop    ebx
c0007e86:	5e                   	pop    esi
c0007e87:	c3                   	ret    
c0007e88:	83 ec 08             	sub    esp,0x8
c0007e8b:	89 c2                	mov    edx,eax
c0007e8d:	6a 01                	push   0x1
c0007e8f:	c1 ea 0c             	shr    edx,0xc
c0007e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e96:	52                   	push   edx
c0007e97:	e8 75 fe ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007e9c:	83 c4 10             	add    esp,0x10
c0007e9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ea3:	eb dd                	jmp    c0007e82 <Phys::allocatePage()+0xac>

c0007ea5 <Phys::allocateContiguousPages(int)>:
c0007ea5:	57                   	push   edi
c0007ea6:	56                   	push   esi
c0007ea7:	53                   	push   ebx
c0007ea8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eac:	fa                   	cli    
c0007ead:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007eb2:	31 db                	xor    ebx,ebx
c0007eb4:	83 c0 01             	add    eax,0x1
c0007eb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ebc:	85 db                	test   ebx,ebx
c0007ebe:	75 11                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007ec0:	e8 11 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	89 c7                	mov    edi,eax
c0007eca:	74 21                	je     c0007eed <Phys::allocateContiguousPages(int)+0x48>
c0007ecc:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed1:	e8 00 ff ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0007ed6:	89 da                	mov    edx,ebx
c0007ed8:	c1 e2 0c             	shl    edx,0xc
c0007edb:	01 fa                	add    edx,edi
c0007edd:	39 c2                	cmp    edx,eax
c0007edf:	74 22                	je     c0007f03 <Phys::allocateContiguousPages(int)+0x5e>
c0007ee1:	83 fe 01             	cmp    esi,0x1
c0007ee4:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee9:	89 c7                	mov    edi,eax
c0007eeb:	75 e4                	jne    c0007ed1 <Phys::allocateContiguousPages(int)+0x2c>
c0007eed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ef2:	83 e8 01             	sub    eax,0x1
c0007ef5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007efa:	75 01                	jne    c0007efd <Phys::allocateContiguousPages(int)+0x58>
c0007efc:	fb                   	sti    
c0007efd:	5b                   	pop    ebx
c0007efe:	89 f8                	mov    eax,edi
c0007f00:	5e                   	pop    esi
c0007f01:	5f                   	pop    edi
c0007f02:	c3                   	ret    
c0007f03:	83 c3 01             	add    ebx,0x1
c0007f06:	39 f3                	cmp    ebx,esi
c0007f08:	75 b2                	jne    c0007ebc <Phys::allocateContiguousPages(int)+0x17>
c0007f0a:	eb e1                	jmp    c0007eed <Phys::allocateContiguousPages(int)+0x48>

c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f0c:	56                   	push   esi
c0007f0d:	53                   	push   ebx
c0007f0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f12:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f18:	73 06                	jae    c0007f20 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f1a:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f24:	c1 eb 0c             	shr    ebx,0xc
c0007f27:	c1 e8 0c             	shr    eax,0xc
c0007f2a:	39 d8                	cmp    eax,ebx
c0007f2c:	73 13                	jae    c0007f41 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f2e:	6a 00                	push   0x0
c0007f30:	50                   	push   eax
c0007f31:	8d 70 01             	lea    esi,[eax+0x1]
c0007f34:	e8 d8 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 f0                	mov    eax,esi
c0007f3d:	5a                   	pop    edx
c0007f3e:	59                   	pop    ecx
c0007f3f:	75 ed                	jne    c0007f2e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f41:	5b                   	pop    ebx
c0007f42:	5e                   	pop    esi
c0007f43:	c3                   	ret    

c0007f44 <Phys::physicalMemorySetup(unsigned int)>:
c0007f44:	55                   	push   ebp
c0007f45:	57                   	push   edi
c0007f46:	56                   	push   esi
c0007f47:	53                   	push   ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	83 ec 40             	sub    esp,0x40
c0007f4d:	6a 10                	push   0x10
c0007f4f:	6a 00                	push   0x0
c0007f51:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f56:	e8 95 85 ff ff       	call   c00004f0 <memset>
c0007f5b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f64:	05 00 10 00 00       	add    eax,0x1000
c0007f69:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f6d:	5a                   	pop    edx
c0007f6e:	59                   	pop    ecx
c0007f6f:	50                   	push   eax
c0007f70:	68 87 fc 01 c0       	push   0xc001fc87
c0007f75:	e8 f5 29 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0007f7a:	83 c4 10             	add    esp,0x10
c0007f7d:	83 ec 08             	sub    esp,0x8
c0007f80:	6a 01                	push   0x1
c0007f82:	53                   	push   ebx
c0007f83:	83 c3 01             	add    ebx,0x1
c0007f86:	e8 86 fd ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0007f8b:	83 c4 10             	add    esp,0x10
c0007f8e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f94:	75 e7                	jne    c0007f7d <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f96:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa1:	85 c0                	test   eax,eax
c0007fa3:	0f 84 43 01 00 00    	je     c00080ec <Phys::physicalMemorySetup(unsigned int)+0x1a8>
c0007fa9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fb1:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fb6:	e9 82 00 00 00       	jmp    c000803d <Phys::physicalMemorySetup(unsigned int)+0xf9>
c0007fbb:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc0:	89 c1                	mov    ecx,eax
c0007fc2:	39 f2                	cmp    edx,esi
c0007fc4:	19 f9                	sbb    ecx,edi
c0007fc6:	0f 82 c0 00 00 00    	jb     c000808c <Phys::physicalMemorySetup(unsigned int)+0x148>
c0007fcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd0:	89 c5                	mov    ebp,eax
c0007fd2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fda:	19 cd                	sbb    ebp,ecx
c0007fdc:	0f 83 af 00 00 00    	jae    c0008091 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007fe2:	89 d6                	mov    esi,edx
c0007fe4:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fe9:	39 f2                	cmp    edx,esi
c0007feb:	89 cf                	mov    edi,ecx
c0007fed:	19 c8                	sbb    eax,ecx
c0007fef:	73 07                	jae    c0007ff8 <Phys::physicalMemorySetup(unsigned int)+0xb4>
c0007ff1:	be 00 00 0a 00       	mov    esi,0xa0000
c0007ff6:	31 ff                	xor    edi,edi
c0007ff8:	89 f2                	mov    edx,esi
c0007ffa:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007fff:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008005:	89 f9                	mov    ecx,edi
c0008007:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000800b:	83 d1 ff             	adc    ecx,0xffffffff
c000800e:	39 d0                	cmp    eax,edx
c0008010:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	19 c8                	sbb    eax,ecx
c000801b:	0f 82 9d 01 00 00    	jb     c00081be <Phys::physicalMemorySetup(unsigned int)+0x27a>
c0008021:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008025:	83 c3 18             	add    ebx,0x18
c0008028:	83 c6 01             	add    esi,0x1
c000802b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000802f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008033:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008037:	0f 84 bf 00 00 00    	je     c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c000803d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000803f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008042:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008045:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008048:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000804c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000804f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008053:	01 f0                	add    eax,esi
c0008055:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008059:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000805d:	55                   	push   ebp
c000805e:	11 fa                	adc    edx,edi
c0008060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008064:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000806c:	50                   	push   eax
c000806d:	56                   	push   esi
c000806e:	68 24 fc 01 c0       	push   0xc001fc24
c0008073:	e8 f7 28 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0008078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	09 f8                	or     eax,edi
c0008081:	75 79                	jne    c00080fc <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c0008083:	83 fd 01             	cmp    ebp,0x1
c0008086:	0f 84 2f ff ff ff    	je     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x77>
c000808c:	83 fd 01             	cmp    ebp,0x1
c000808f:	75 90                	jne    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008091:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0008095:	31 d2                	xor    edx,edx
c0008097:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000809b:	89 c8                	mov    eax,ecx
c000809d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080a1:	19 d1                	sbb    ecx,edx
c00080a3:	0f 82 78 ff ff ff    	jb     c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080a9:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080ae:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080b2:	b9 00 00 00 00       	mov    ecx,0x0
c00080b7:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080bb:	0f 83 60 ff ff ff    	jae    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c00080c1:	39 c6                	cmp    esi,eax
c00080c3:	19 d7                	sbb    edi,edx
c00080c5:	0f 83 ff 00 00 00    	jae    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080cb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080d3:	29 c7                	sub    edi,eax
c00080d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080dd:	19 d5                	sbb    ebp,edx
c00080df:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080e7:	e9 de 00 00 00       	jmp    c00081ca <Phys::physicalMemorySetup(unsigned int)+0x286>
c00080ec:	83 ec 0c             	sub    esp,0xc
c00080ef:	68 9f fc 01 c0       	push   0xc001fc9f
c00080f4:	e8 40 87 00 00       	call   c0010839 <KePanic(char const*)>
c00080f9:	83 c4 10             	add    esp,0x10
c00080fc:	83 ec 08             	sub    esp,0x8
c00080ff:	bb 60 00 00 00       	mov    ebx,0x60
c0008104:	6a 00                	push   0x0
c0008106:	6a 06                	push   0x6
c0008108:	e8 04 fc ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000810d:	58                   	pop    eax
c000810e:	5a                   	pop    edx
c000810f:	6a 00                	push   0x0
c0008111:	6a 07                	push   0x7
c0008113:	e8 f9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008118:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c000811e:	83 c4 10             	add    esp,0x10
c0008121:	83 c1 02             	add    ecx,0x2
c0008124:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	6a 00                	push   0x0
c000812f:	53                   	push   ebx
c0008130:	83 c3 01             	add    ebx,0x1
c0008133:	e8 d9 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008138:	83 c4 10             	add    esp,0x10
c000813b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008141:	75 e7                	jne    c000812a <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c0008143:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008148:	bb 40 01 00 00       	mov    ebx,0x140
c000814d:	83 c0 20             	add    eax,0x20
c0008150:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008155:	eb 26                	jmp    c000817d <Phys::physicalMemorySetup(unsigned int)+0x239>
c0008157:	83 ec 08             	sub    esp,0x8
c000815a:	6a 00                	push   0x0
c000815c:	53                   	push   ebx
c000815d:	83 c3 01             	add    ebx,0x1
c0008160:	e8 ac fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c0008165:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	83 c0 01             	add    eax,0x1
c0008170:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008176:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000817b:	74 07                	je     c0008184 <Phys::physicalMemorySetup(unsigned int)+0x240>
c000817d:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008182:	7e d3                	jle    c0008157 <Phys::physicalMemorySetup(unsigned int)+0x213>
c0008184:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008189:	3d ff 07 00 00       	cmp    eax,0x7ff
c000818e:	7f 26                	jg     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0008190:	83 ec 08             	sub    esp,0x8
c0008193:	6a 00                	push   0x0
c0008195:	53                   	push   ebx
c0008196:	83 c3 01             	add    ebx,0x1
c0008199:	e8 73 fb ff ff       	call   c0007d11 <Phys::setPageState(unsigned long, bool)>
c000819e:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081a3:	83 c4 10             	add    esp,0x10
c00081a6:	83 c0 01             	add    eax,0x1
c00081a9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081af:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081b4:	75 d3                	jne    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081b6:	83 c4 3c             	add    esp,0x3c
c00081b9:	5b                   	pop    ebx
c00081ba:	5e                   	pop    esi
c00081bb:	5f                   	pop    edi
c00081bc:	5d                   	pop    ebp
c00081bd:	c3                   	ret    
c00081be:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081c2:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081ca:	83 ec 04             	sub    esp,0x4
c00081cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081d1:	56                   	push   esi
c00081d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081d6:	57                   	push   edi
c00081d7:	68 48 fc 01 c0       	push   0xc001fc48
c00081dc:	e8 8e 27 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00081e1:	5d                   	pop    ebp
c00081e2:	58                   	pop    eax
c00081e3:	56                   	push   esi
c00081e4:	57                   	push   edi
c00081e5:	e8 22 fd ff ff       	call   c0007f0c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081f2:	83 c4 0c             	add    esp,0xc
c00081f5:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c00081fb:	0f ac d0 0c          	shrd   eax,edx,0xc
c00081ff:	01 f0                	add    eax,esi
c0008201:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008206:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000820d:	52                   	push   edx
c000820e:	50                   	push   eax
c000820f:	68 ad fc 01 c0       	push   0xc001fcad
c0008214:	e8 56 27 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	e9 00 fe ff ff       	jmp    c0008021 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008221:	90                   	nop

c0008222 <Pipe::isAtty()>:
c0008222:	31 c0                	xor    eax,eax
c0008224:	c3                   	ret    
c0008225:	90                   	nop

c0008226 <Pipe::~Pipe()>:
c0008226:	83 ec 0c             	sub    esp,0xc
c0008229:	ba 0c fd 01 c0       	mov    edx,0xc001fd0c
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	89 10                	mov    DWORD PTR [eax],edx
c0008234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008238:	83 ec 0c             	sub    esp,0xc
c000823b:	50                   	push   eax
c000823c:	e8 5b 11 00 00       	call   c000939c <UnixFile::~UnixFile()>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	90                   	nop
c0008245:	83 c4 0c             	add    esp,0xc
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <Pipe::~Pipe()>:
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	83 ec 0c             	sub    esp,0xc
c0008250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008254:	e8 cd ff ff ff       	call   c0008226 <Pipe::~Pipe()>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	83 ec 08             	sub    esp,0x8
c000825f:	6a 20                	push   0x20
c0008261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008265:	e8 07 26 00 00       	call   c000a871 <operator delete(void*, unsigned long)>
c000826a:	83 c4 10             	add    esp,0x10
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    
c0008271:	90                   	nop

c0008272 <Pipe::write(unsigned long long, void*, int*)>:
c0008272:	55                   	push   ebp
c0008273:	57                   	push   edi
c0008274:	56                   	push   esi
c0008275:	53                   	push   ebx
c0008276:	83 ec 1c             	sub    esp,0x1c
c0008279:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000827d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008281:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008285:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000828c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008292:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008296:	89 d8                	mov    eax,ebx
c0008298:	89 d6                	mov    esi,edx
c000829a:	89 d7                	mov    edi,edx
c000829c:	c1 ff 1f             	sar    edi,0x1f
c000829f:	03 34 24             	add    esi,DWORD PTR [esp]
c00082a2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a6:	c1 f8 1f             	sar    eax,0x1f
c00082a9:	39 f3                	cmp    ebx,esi
c00082ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082b3:	19 f8                	sbb    eax,edi
c00082b5:	b8 01 00 00 00       	mov    eax,0x1
c00082ba:	72 72                	jb     c000832e <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082bf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	99                   	cdq    
c00082c6:	f7 fb                	idiv   ebx
c00082c8:	89 d8                	mov    eax,ebx
c00082ca:	29 d0                	sub    eax,edx
c00082cc:	89 d6                	mov    esi,edx
c00082ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082d1:	89 c3                	mov    ebx,eax
c00082d3:	c1 fb 1f             	sar    ebx,0x1f
c00082d6:	39 c2                	cmp    edx,eax
c00082d8:	19 df                	sbb    edi,ebx
c00082da:	bb 00 00 00 00       	mov    ebx,0x0
c00082df:	72 04                	jb     c00082e5 <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082e1:	89 d3                	mov    ebx,edx
c00082e3:	29 c3                	sub    ebx,eax
c00082e5:	89 d0                	mov    eax,edx
c00082e7:	29 d8                	sub    eax,ebx
c00082e9:	74 0d                	je     c00082f8 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082eb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082ee:	89 c1                	mov    ecx,eax
c00082f0:	01 f7                	add    edi,esi
c00082f2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f8:	85 db                	test   ebx,ebx
c00082fa:	74 0d                	je     c0008309 <Pipe::write(unsigned long long, void*, int*)+0x97>
c00082fc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008300:	89 d9                	mov    ecx,ebx
c0008302:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008305:	89 c6                	mov    esi,eax
c0008307:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008309:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000830c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008311:	75 10                	jne    c0008323 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008313:	83 ec 0c             	sub    esp,0xc
c0008316:	68 c9 fc 01 c0       	push   0xc001fcc9
c000831b:	e8 19 85 00 00       	call   c0010839 <KePanic(char const*)>
c0008320:	83 c4 10             	add    esp,0x10
c0008323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008327:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000832a:	89 08                	mov    DWORD PTR [eax],ecx
c000832c:	31 c0                	xor    eax,eax
c000832e:	83 c4 1c             	add    esp,0x1c
c0008331:	5b                   	pop    ebx
c0008332:	5e                   	pop    esi
c0008333:	5f                   	pop    edi
c0008334:	5d                   	pop    ebp
c0008335:	c3                   	ret    

c0008336 <Pipe::read(unsigned long long, void*, int*)>:
c0008336:	55                   	push   ebp
c0008337:	57                   	push   edi
c0008338:	56                   	push   esi
c0008339:	53                   	push   ebx
c000833a:	83 ec 1c             	sub    esp,0x1c
c000833d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008341:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008345:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008349:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000834c:	89 c8                	mov    eax,ecx
c000834e:	99                   	cdq    
c000834f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008353:	74 24                	je     c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008355:	39 f9                	cmp    ecx,edi
c0008357:	89 d1                	mov    ecx,edx
c0008359:	19 f1                	sbb    ecx,esi
c000835b:	73 1c                	jae    c0008379 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000835d:	fa                   	cli    
c000835e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008364:	e8 cb cc 00 00       	call   c0015034 <schedule()>
c0008369:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000836e:	48                   	dec    eax
c000836f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008374:	75 d3                	jne    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008376:	fb                   	sti    
c0008377:	eb d0                	jmp    c0008349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008379:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000837d:	39 f8                	cmp    eax,edi
c000837f:	89 d1                	mov    ecx,edx
c0008381:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0008385:	19 f1                	sbb    ecx,esi
c0008387:	73 08                	jae    c0008391 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000838d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008391:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008394:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008397:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000839b:	29 f7                	sub    edi,esi
c000839d:	89 f8                	mov    eax,edi
c000839f:	99                   	cdq    
c00083a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083a4:	89 d0                	mov    eax,edx
c00083a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083aa:	19 c2                	sbb    edx,eax
c00083ac:	89 f8                	mov    eax,edi
c00083ae:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083b3:	89 ea                	mov    edx,ebp
c00083b5:	29 c2                	sub    edx,eax
c00083b7:	85 c0                	test   eax,eax
c00083b9:	74 0b                	je     c00083c6 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083bb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083be:	89 c1                	mov    ecx,eax
c00083c0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c6:	85 d2                	test   edx,edx
c00083c8:	74 0d                	je     c00083d7 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083ca:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083ce:	89 d1                	mov    ecx,edx
c00083d0:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083d3:	89 c7                	mov    edi,eax
c00083d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083da:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083dd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e0:	99                   	cdq    
c00083e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083e5:	89 f7                	mov    edi,esi
c00083e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 09 63 01 00       	call   c001e700 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 e6 fc 01 c0       	push   0xc001fce6
c000840c:	e8 28 84 00 00       	call   c0010839 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000841c:	89 10                	mov    DWORD PTR [eax],edx
c000841e:	83 c4 1c             	add    esp,0x1c
c0008421:	31 c0                	xor    eax,eax
c0008423:	5b                   	pop    ebx
c0008424:	5e                   	pop    esi
c0008425:	5f                   	pop    edi
c0008426:	5d                   	pop    ebp
c0008427:	c3                   	ret    

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 7c 0d 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 0c fd 01 c0       	mov    edx,0xc001fd0c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 55 f6 ff ff       	call   c0007acb <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 54 fd 01 c0       	mov    edx,0xc001fd54
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 ed 0e 00 00       	call   c000939c <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 96 23 00 00       	call   c000a871 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 bc 47 00 00       	call   c000ccb2 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 40 f8 00 00       	call   c0017d5c <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000853f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d e0 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde120]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d e0 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde120]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 98 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde268]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 70 1d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde290]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 72 f5 00 00       	call   c0017bf0 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	59                   	pop    ecx
c00086d2:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086d7:	0f b6 c0             	movzx  eax,al
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f0:	01 f2                	add    edx,esi
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 cf f5 00 00       	jmp    c0017cf8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 20 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd20
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 c3 80 00 00       	jmp    c0010839 <KePanic(char const*)>
c0008776:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	50                   	push   eax
c000878c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000878f:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	83 c4 10             	add    esp,0x10
c00087bb:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008842:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008853:	83 ec 0c             	sub    esp,0xc
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 1c 2f 00 00       	jmp    c000b7ef <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ed:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088fe:	83 ec 0c             	sub    esp,0xc
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000896f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008973:	0f be c2             	movsx  eax,dl
c0008976:	83 f8 5b             	cmp    eax,0x5b
c0008979:	75 18                	jne    c0008993 <VgaText::putchar(char)+0x2b>
c000897b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000897f:	74 20                	je     c00089a1 <VgaText::putchar(char)+0x39>
c0008981:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008987:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000898e:	e9 b8 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008993:	83 f8 1b             	cmp    eax,0x1b
c0008996:	75 09                	jne    c00089a1 <VgaText::putchar(char)+0x39>
c0008998:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000899c:	e9 aa 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c00089a1:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089a5:	89 f9                	mov    ecx,edi
c00089a7:	84 c9                	test   cl,cl
c00089a9:	0f 84 8c 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xd3>
c00089af:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089b2:	80 f9 3e             	cmp    cl,0x3e
c00089b5:	77 70                	ja     c0008a27 <VgaText::putchar(char)+0xbf>
c00089b7:	83 f8 6d             	cmp    eax,0x6d
c00089ba:	75 3f                	jne    c00089fb <VgaText::putchar(char)+0x93>
c00089bc:	31 f6                	xor    esi,esi
c00089be:	31 d2                	xor    edx,edx
c00089c0:	31 c0                	xor    eax,eax
c00089c2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c5:	7e 25                	jle    c00089ec <VgaText::putchar(char)+0x84>
c00089c7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089cc:	83 fa 3b             	cmp    edx,0x3b
c00089cf:	75 0f                	jne    c00089e0 <VgaText::putchar(char)+0x78>
c00089d1:	50                   	push   eax
c00089d2:	53                   	push   ebx
c00089d3:	e8 48 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089d8:	31 d2                	xor    edx,edx
c00089da:	59                   	pop    ecx
c00089db:	58                   	pop    eax
c00089dc:	31 c0                	xor    eax,eax
c00089de:	eb 09                	jmp    c00089e9 <VgaText::putchar(char)+0x81>
c00089e0:	6b c0 0a             	imul   eax,eax,0xa
c00089e3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e7:	89 fa                	mov    edx,edi
c00089e9:	46                   	inc    esi
c00089ea:	eb d6                	jmp    c00089c2 <VgaText::putchar(char)+0x5a>
c00089ec:	84 d2                	test   dl,dl
c00089ee:	74 2f                	je     c0008a1f <VgaText::putchar(char)+0xb7>
c00089f0:	50                   	push   eax
c00089f1:	53                   	push   ebx
c00089f2:	e8 29 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089f7:	58                   	pop    eax
c00089f8:	5a                   	pop    edx
c00089f9:	eb 24                	jmp    c0008a1f <VgaText::putchar(char)+0xb7>
c00089fb:	83 f8 4a             	cmp    eax,0x4a
c00089fe:	75 1f                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a00:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a04:	75 19                	jne    c0008a1f <VgaText::putchar(char)+0xb7>
c0008a06:	83 ec 0c             	sub    esp,0xc
c0008a09:	53                   	push   ebx
c0008a0a:	e8 95 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a0f:	83 c4 0c             	add    esp,0xc
c0008a12:	6a 00                	push   0x0
c0008a14:	6a 00                	push   0x0
c0008a16:	53                   	push   ebx
c0008a17:	e8 26 fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a25:	eb 24                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a27:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a2a:	83 f8 0e             	cmp    eax,0xe
c0008a2d:	7f 1c                	jg     c0008a4b <VgaText::putchar(char)+0xe3>
c0008a2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a32:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a35:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xe3>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 50 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	5b                   	pop    ebx
c0008a4c:	5e                   	pop    esi
c0008a4d:	5f                   	pop    edi
c0008a4e:	c3                   	ret    
c0008a4f:	90                   	nop

c0008a50 <VgaText::putx(unsigned int)>:
c0008a50:	57                   	push   edi
c0008a51:	b9 11 00 00 00       	mov    ecx,0x11
c0008a56:	56                   	push   esi
c0008a57:	be 2e fd 01 c0       	mov    esi,0xc001fd2e
c0008a5c:	53                   	push   ebx
c0008a5d:	83 ec 20             	sub    esp,0x20
c0008a60:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a64:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a68:	fc                   	cld    
c0008a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6b:	be 08 00 00 00       	mov    esi,0x8
c0008a70:	50                   	push   eax
c0008a71:	50                   	push   eax
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	c1 e8 1c             	shr    eax,0x1c
c0008a77:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a7c:	c1 e3 04             	shl    ebx,0x4
c0008a7f:	50                   	push   eax
c0008a80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a84:	e8 df fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a89:	83 c4 10             	add    esp,0x10
c0008a8c:	4e                   	dec    esi
c0008a8d:	75 e1                	jne    c0008a70 <VgaText::putx(unsigned int)+0x20>
c0008a8f:	83 c4 20             	add    esp,0x20
c0008a92:	5b                   	pop    ebx
c0008a93:	5e                   	pop    esi
c0008a94:	5f                   	pop    edi
c0008a95:	c3                   	ret    

c0008a96 <VgaText::puts(char const*)>:
c0008a96:	53                   	push   ebx
c0008a97:	83 ec 08             	sub    esp,0x8
c0008a9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a9e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa1:	85 c0                	test   eax,eax
c0008aa3:	74 12                	je     c0008ab7 <VgaText::puts(char const*)+0x21>
c0008aa5:	51                   	push   ecx
c0008aa6:	43                   	inc    ebx
c0008aa7:	51                   	push   ecx
c0008aa8:	50                   	push   eax
c0008aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aad:	e8 b6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ab2:	83 c4 10             	add    esp,0x10
c0008ab5:	eb e7                	jmp    c0008a9e <VgaText::puts(char const*)+0x8>
c0008ab7:	83 c4 08             	add    esp,0x8
c0008aba:	5b                   	pop    ebx
c0008abb:	c3                   	ret    

c0008abc <VgaText::write(unsigned long long, void*, int*)>:
c0008abc:	55                   	push   ebp
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	53                   	push   ebx
c0008ac0:	83 ec 0c             	sub    esp,0xc
c0008ac3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008acf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad9:	39 eb                	cmp    ebx,ebp
c0008adb:	74 13                	je     c0008af0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008add:	50                   	push   eax
c0008ade:	43                   	inc    ebx
c0008adf:	50                   	push   eax
c0008ae0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae4:	50                   	push   eax
c0008ae5:	56                   	push   esi
c0008ae6:	e8 7d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	eb e9                	jmp    c0008ad9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afb:	89 38                	mov    DWORD PTR [eax],edi
c0008afd:	83 c4 0c             	add    esp,0xc
c0008b00:	31 c0                	xor    eax,eax
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	5f                   	pop    edi
c0008b05:	5d                   	pop    ebp
c0008b06:	c3                   	ret    
c0008b07:	90                   	nop

c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b08:	55                   	push   ebp
c0008b09:	57                   	push   edi
c0008b0a:	56                   	push   esi
c0008b0b:	53                   	push   ebx
c0008b0c:	83 ec 0c             	sub    esp,0xc
c0008b0f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b18:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b1f:	50                   	push   eax
c0008b20:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b25:	50                   	push   eax
c0008b26:	e8 c3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b2f:	5a                   	pop    edx
c0008b30:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b33:	59                   	pop    ecx
c0008b34:	0f b6 f8             	movzx  edi,al
c0008b37:	0f b7 db             	movzx  ebx,bx
c0008b3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b3e:	01 db                	add    ebx,ebx
c0008b40:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b43:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b46:	85 c0                	test   eax,eax
c0008b48:	0f 84 ef 00 00 00    	je     c0008c3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b4e:	83 f8 0d             	cmp    eax,0xd
c0008b51:	75 0c                	jne    c0008b5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b53:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b5a:	e9 d8 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b5f:	83 f8 0a             	cmp    eax,0xa
c0008b62:	75 44                	jne    c0008ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b64:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b6b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b6e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b71:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b74:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b77:	75 0f                	jne    c0008b88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b79:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	55                   	push   ebp
c0008b80:	e8 7b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b85:	83 c4 10             	add    esp,0x10
c0008b88:	83 ec 0c             	sub    esp,0xc
c0008b8b:	55                   	push   ebp
c0008b8c:	e8 79 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b98:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b9b:	0f b7 db             	movzx  ebx,bx
c0008b9e:	01 db                	add    ebx,ebx
c0008ba0:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008ba3:	e9 8f 00 00 00       	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba8:	83 f8 08             	cmp    eax,0x8
c0008bab:	75 34                	jne    c0008be1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bad:	51                   	push   ecx
c0008bae:	51                   	push   ecx
c0008baf:	6a 01                	push   0x1
c0008bb1:	55                   	push   ebp
c0008bb2:	e8 bf fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bb7:	5b                   	pop    ebx
c0008bb8:	58                   	pop    eax
c0008bb9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bbc:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bbf:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bc2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bc5:	6a 20                	push   0x20
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 d5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcd:	83 c4 20             	add    esp,0x20
c0008bd0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bd4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bd7:	0f b7 db             	movzx  ebx,bx
c0008bda:	01 db                	add    ebx,ebx
c0008bdc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bdf:	eb 56                	jmp    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be1:	52                   	push   edx
c0008be2:	52                   	push   edx
c0008be3:	57                   	push   edi
c0008be4:	50                   	push   eax
c0008be5:	e8 a8 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bea:	83 c4 10             	add    esp,0x10
c0008bed:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bf0:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008bf6:	75 1d                	jne    c0008c15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf8:	83 ec 0c             	sub    esp,0xc
c0008bfb:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bfe:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c01:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c05:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c09:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c0c:	50                   	push   eax
c0008c0d:	e8 e6 f0 00 00       	call   c0017cf8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c12:	83 c4 20             	add    esp,0x20
c0008c15:	50                   	push   eax
c0008c16:	83 c3 02             	add    ebx,0x2
c0008c19:	50                   	push   eax
c0008c1a:	6a 00                	push   0x0
c0008c1c:	55                   	push   ebp
c0008c1d:	e8 00 fc ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c29:	75 0c                	jne    c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c2f:	0f b7 db             	movzx  ebx,bx
c0008c32:	01 db                	add    ebx,ebx
c0008c34:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c37:	46                   	inc    esi
c0008c38:	e9 06 ff ff ff       	jmp    c0008b43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	55                   	push   ebp
c0008c41:	e8 c4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c46:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c4d:	83 c4 1c             	add    esp,0x1c
c0008c50:	5b                   	pop    ebx
c0008c51:	5e                   	pop    esi
c0008c52:	5f                   	pop    edi
c0008c53:	5d                   	pop    ebp
c0008c54:	c3                   	ret    
c0008c55:	90                   	nop

c0008c56 <VgaText::VgaText(char const*)>:
c0008c56:	56                   	push   esi
c0008c57:	53                   	push   ebx
c0008c58:	83 ec 04             	sub    esp,0x4
c0008c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5f:	83 ec 08             	sub    esp,0x8
c0008c62:	6a 00                	push   0x0
c0008c64:	50                   	push   eax
c0008c65:	e8 4c 05 00 00       	call   c00091b6 <UnixFile::UnixFile(int)>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	ba 54 fd 01 c0       	mov    edx,0xc001fd54
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	89 10                	mov    DWORD PTR [eax],edx
c0008c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c87:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd5:	83 ec 0c             	sub    esp,0xc
c0008cd8:	6a 01                	push   0x1
c0008cda:	e8 26 09 00 00       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0008cdf:	83 c4 10             	add    esp,0x10
c0008ce2:	89 c2                	mov    edx,eax
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ceb:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf8:	89 c6                	mov    esi,eax
c0008cfa:	e8 d7 f0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0008cff:	68 05 0c 00 00       	push   0xc05
c0008d04:	56                   	push   esi
c0008d05:	50                   	push   eax
c0008d06:	53                   	push   ebx
c0008d07:	e8 d8 0f 00 00       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d16:	83 ec 04             	sub    esp,0x4
c0008d19:	68 a0 0f 00 00       	push   0xfa0
c0008d1e:	6a 00                	push   0x0
c0008d20:	50                   	push   eax
c0008d21:	e8 ca 77 ff ff       	call   c00004f0 <memset>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	83 ec 04             	sub    esp,0x4
c0008d2c:	6a 00                	push   0x0
c0008d2e:	6a 07                	push   0x7
c0008d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d34:	e8 7b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d39:	83 c4 10             	add    esp,0x10
c0008d3c:	83 ec 04             	sub    esp,0x4
c0008d3f:	6a 00                	push   0x0
c0008d41:	6a 00                	push   0x0
c0008d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d47:	e8 f6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	83 ec 0c             	sub    esp,0xc
c0008d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d56:	e8 49 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d62:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6a:	05 82 00 00 00       	add    eax,0x82
c0008d6f:	83 ec 04             	sub    esp,0x4
c0008d72:	68 80 00 00 00       	push   0x80
c0008d77:	6a 00                	push   0x0
c0008d79:	50                   	push   eax
c0008d7a:	e8 71 77 ff ff       	call   c00004f0 <memset>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d86:	05 02 01 00 00       	add    eax,0x102
c0008d8b:	83 ec 04             	sub    esp,0x4
c0008d8e:	68 80 00 00 00       	push   0x80
c0008d93:	6a 00                	push   0x0
c0008d95:	50                   	push   eax
c0008d96:	e8 55 77 ff ff       	call   c00004f0 <memset>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	90                   	nop
c0008d9f:	83 c4 04             	add    esp,0x4
c0008da2:	5b                   	pop    ebx
c0008da3:	5e                   	pop    esi
c0008da4:	c3                   	ret    
c0008da5:	90                   	nop

c0008da6 <VgaText::receiveKey(unsigned char)>:
c0008da6:	55                   	push   ebp
c0008da7:	57                   	push   edi
c0008da8:	56                   	push   esi
c0008da9:	53                   	push   ebx
c0008daa:	83 ec 2c             	sub    esp,0x2c
c0008dad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008db1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db5:	89 fd                	mov    ebp,edi
c0008db7:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dbd:	0f 84 48 01 00 00    	je     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008dc3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc9:	83 fd 08             	cmp    ebp,0x8
c0008dcc:	75 6a                	jne    c0008e38 <VgaText::receiveKey(unsigned char)+0x92>
c0008dce:	83 ec 0c             	sub    esp,0xc
c0008dd1:	56                   	push   esi
c0008dd2:	e8 a9 77 ff ff       	call   c0000580 <strlen>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	85 c0                	test   eax,eax
c0008ddc:	0f 84 ef 00 00 00    	je     c0008ed1 <VgaText::receiveKey(unsigned char)+0x12b>
c0008de2:	50                   	push   eax
c0008de3:	50                   	push   eax
c0008de4:	6a 08                	push   0x8
c0008de6:	53                   	push   ebx
c0008de7:	e8 7c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dec:	89 34 24             	mov    DWORD PTR [esp],esi
c0008def:	e8 8c 77 ff ff       	call   c0000580 <strlen>
c0008df4:	83 c4 10             	add    esp,0x10
c0008df7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008dff:	83 fa 1f             	cmp    edx,0x1f
c0008e02:	89 d0                	mov    eax,edx
c0008e04:	7f 1c                	jg     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e06:	83 e8 08             	sub    eax,0x8
c0008e09:	3c 02                	cmp    al,0x2
c0008e0b:	76 15                	jbe    c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e0d:	83 fa 0d             	cmp    edx,0xd
c0008e10:	74 10                	je     c0008e22 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e12:	57                   	push   edi
c0008e13:	57                   	push   edi
c0008e14:	68 3f fd 01 c0       	push   0xc001fd3f
c0008e19:	53                   	push   ebx
c0008e1a:	e8 77 fc ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	56                   	push   esi
c0008e26:	e8 55 77 ff ff       	call   c0000580 <strlen>
c0008e2b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e33:	e9 96 00 00 00       	jmp    c0008ece <VgaText::receiveKey(unsigned char)+0x128>
c0008e38:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e3e:	83 ec 0c             	sub    esp,0xc
c0008e41:	50                   	push   eax
c0008e42:	e8 39 77 ff ff       	call   c0000580 <strlen>
c0008e47:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e4e:	e8 2d 77 ff ff       	call   c0000580 <strlen>
c0008e53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e57:	83 c4 10             	add    esp,0x10
c0008e5a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e5e:	3d 80 00 00 00       	cmp    eax,0x80
c0008e63:	0f 87 a2 00 00 00    	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008e69:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e6c:	3c 1e                	cmp    al,0x1e
c0008e6e:	77 35                	ja     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e70:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e73:	3c 01                	cmp    al,0x1
c0008e75:	76 2e                	jbe    c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e77:	83 fd 0d             	cmp    ebp,0xd
c0008e7a:	74 29                	je     c0008ea5 <VgaText::receiveKey(unsigned char)+0xff>
c0008e7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e7f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e82:	68 45 fd 01 c0       	push   0xc001fd45
c0008e87:	53                   	push   ebx
c0008e88:	e8 7b fc ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e8d:	8d 47 40             	lea    eax,[edi+0x40]
c0008e90:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e93:	0f b6 c0             	movzx  eax,al
c0008e96:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e99:	50                   	push   eax
c0008e9a:	53                   	push   ebx
c0008e9b:	e8 f8 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ea0:	83 c4 20             	add    esp,0x20
c0008ea3:	eb 11                	jmp    c0008eb6 <VgaText::receiveKey(unsigned char)+0x110>
c0008ea5:	51                   	push   ecx
c0008ea6:	89 f8                	mov    eax,edi
c0008ea8:	51                   	push   ecx
c0008ea9:	0f be c0             	movsx  eax,al
c0008eac:	50                   	push   eax
c0008ead:	53                   	push   ebx
c0008eae:	e8 b5 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ebb:	89 f8                	mov    eax,edi
c0008ebd:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ec1:	52                   	push   edx
c0008ec2:	52                   	push   edx
c0008ec3:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ec7:	50                   	push   eax
c0008ec8:	56                   	push   esi
c0008ec9:	e8 a2 79 ff ff       	call   c0000870 <strcat>
c0008ece:	83 c4 10             	add    esp,0x10
c0008ed1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ed8:	75 0f                	jne    c0008ee9 <VgaText::receiveKey(unsigned char)+0x143>
c0008eda:	83 fd 1c             	cmp    ebp,0x1c
c0008edd:	77 2c                	ja     c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008edf:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ee4:	0f a3 e8             	bt     eax,ebp
c0008ee7:	73 22                	jae    c0008f0b <VgaText::receiveKey(unsigned char)+0x165>
c0008ee9:	50                   	push   eax
c0008eea:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef0:	50                   	push   eax
c0008ef1:	56                   	push   esi
c0008ef2:	53                   	push   ebx
c0008ef3:	e8 78 79 ff ff       	call   c0000870 <strcat>
c0008ef8:	83 c4 0c             	add    esp,0xc
c0008efb:	68 80 00 00 00       	push   0x80
c0008f00:	6a 00                	push   0x0
c0008f02:	56                   	push   esi
c0008f03:	e8 e8 75 ff ff       	call   c00004f0 <memset>
c0008f08:	83 c4 10             	add    esp,0x10
c0008f0b:	83 c4 2c             	add    esp,0x2c
c0008f0e:	5b                   	pop    ebx
c0008f0f:	5e                   	pop    esi
c0008f10:	5f                   	pop    edi
c0008f11:	5d                   	pop    ebp
c0008f12:	c3                   	ret    
c0008f13:	90                   	nop

c0008f14 <VgaText::doUpdate()>:
c0008f14:	c3                   	ret    

c0008f15 <newTerminal(char*)>:
c0008f15:	83 ec 28             	sub    esp,0x28
c0008f18:	68 84 01 00 00       	push   0x184
c0008f1d:	e8 a9 eb ff ff       	call   c0007acb <malloc>
c0008f22:	5a                   	pop    edx
c0008f23:	59                   	pop    ecx
c0008f24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f28:	50                   	push   eax
c0008f29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f2d:	e8 24 fd ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0008f32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f36:	83 c4 2c             	add    esp,0x2c
c0008f39:	c3                   	ret    
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::TSS()>:
c0008f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f47:	90                   	nop
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop
c0008f4a:	66 90                	xchg   ax,ax

c0008f4c <TSS::setESP(unsigned long)>:
c0008f4c:	55                   	push   ebp
c0008f4d:	89 e5                	mov    ebp,esp
c0008f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f5b:	90                   	nop
c0008f5c:	5d                   	pop    ebp
c0008f5d:	c3                   	ret    
c0008f5e:	66 90                	xchg   ax,ax

c0008f60 <TSS::flush()>:
c0008f60:	55                   	push   ebp
c0008f61:	89 e5                	mov    ebp,esp
c0008f63:	83 ec 10             	sub    esp,0x10
c0008f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f6b:	83 c8 03             	or     eax,0x3
c0008f6e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f72:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f76:	66 89 d0             	mov    ax,dx
c0008f79:	0f 00 d8             	ltr    ax
c0008f7c:	90                   	nop
c0008f7d:	c9                   	leave  
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <TSS::setup(unsigned long, unsigned long)>:
c0008f80:	55                   	push   ebp
c0008f81:	89 e5                	mov    ebp,esp
c0008f83:	83 ec 18             	sub    esp,0x18
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	6a 68                	push   0x68
c0008f8b:	e8 3b eb ff ff       	call   c0007acb <malloc>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	89 c2                	mov    edx,eax
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa1:	83 ec 04             	sub    esp,0x4
c0008fa4:	6a 68                	push   0x68
c0008fa6:	6a 00                	push   0x0
c0008fa8:	50                   	push   eax
c0008fa9:	e8 42 75 ff ff       	call   c00004f0 <memset>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009026:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009032:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009048:	0f 20 da             	mov    edx,cr3
c000904b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009051:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009057:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	50                   	push   eax
c000905e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009061:	50                   	push   eax
c0009062:	e8 d3 e2 ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0009067:	83 c4 10             	add    esp,0x10
c000906a:	83 ec 08             	sub    esp,0x8
c000906d:	6a 68                	push   0x68
c000906f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009072:	50                   	push   eax
c0009073:	e8 de e2 ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0009078:	83 c4 10             	add    esp,0x10
c000907b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009082:	83 e0 0f             	and    eax,0xf
c0009085:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009088:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908b:	83 c8 40             	or     eax,0x40
c000908e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009091:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009096:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000909c:	05 78 01 00 00       	add    eax,0x178
c00090a1:	83 ec 04             	sub    esp,0x4
c00090a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090aa:	50                   	push   eax
c00090ab:	e8 da e2 ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	89 c2                	mov    edx,eax
c00090b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b8:	89 10                	mov    DWORD PTR [eax],edx
c00090ba:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c5:	05 78 01 00 00       	add    eax,0x178
c00090ca:	83 ec 0c             	sub    esp,0xc
c00090cd:	50                   	push   eax
c00090ce:	e8 e1 e2 ff ff       	call   c00073b4 <GDT::flush()>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090db:	c9                   	leave  
c00090dc:	c3                   	ret    
c00090dd:	90                   	nop

c00090de <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ee:	75 08                	jne    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f6:	eb 38                	jmp    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090fd:	75 17                	jne    c0009116 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009104:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009107:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000910d:	8b 10                	mov    edx,DWORD PTR [eax]
c000910f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009113:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009116:	89 c1                	mov    ecx,eax
c0009118:	83 e1 fd             	and    ecx,0xfffffffd
c000911b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009121:	74 cd                	je     c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009123:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009128:	83 e0 ef             	and    eax,0xffffffef
c000912b:	83 f8 08             	cmp    eax,0x8
c000912e:	76 c0                	jbe    c00090f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009130:	31 c0                	xor    eax,eax
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::isAtty()>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000913b:	31 c0                	xor    eax,eax
c000913d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009143:	74 09                	je     c000914e <ReservedFilename::isAtty()+0x1a>
c0009145:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000914b:	0f 94 c0             	sete   al
c000914e:	c3                   	ret    
c000914f:	90                   	nop

c0009150 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009154:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009158:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000915f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009164:	75 08                	jne    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009166:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000916c:	eb 3d                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009173:	75 17                	jne    c000918c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000917a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000917d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009183:	8b 10                	mov    edx,DWORD PTR [eax]
c0009185:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009189:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000918c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009191:	75 04                	jne    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009193:	89 0a                	mov    DWORD PTR [edx],ecx
c0009195:	eb 14                	jmp    c00091ab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009197:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000919c:	74 c8                	je     c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091a3:	83 e0 ef             	and    eax,0xffffffef
c00091a6:	83 f8 08             	cmp    eax,0x8
c00091a9:	76 bb                	jbe    c0009166 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091ab:	31 c0                	xor    eax,eax
c00091ad:	c3                   	ret    

c00091ae <UnixFile::getFileDescriptor()>:
c00091ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::UnixFile(int)>:
c00091b6:	53                   	push   ebx
c00091b7:	83 ec 28             	sub    esp,0x28
c00091ba:	ba 1c fe 01 c0       	mov    edx,0xc001fe1c
c00091bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091c3:	89 10                	mov    DWORD PTR [eax],edx
c00091c5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091cd:	0f 8f 90 01 00 00    	jg     c0009363 <UnixFile::UnixFile(int)+0x1ad>
c00091d3:	a1 20 1f 02 c0       	mov    eax,ds:0xc0021f20
c00091d8:	8d 50 01             	lea    edx,[eax+0x1]
c00091db:	89 15 20 1f 02 c0    	mov    DWORD PTR ds:0xc0021f20,edx
c00091e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091ef:	68 98 4f 02 c0       	push   0xc0024f98
c00091f4:	e8 ef 56 01 00       	call   c001e8e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009201:	83 f0 01             	xor    eax,0x1
c0009204:	0f b6 c0             	movzx  eax,al
c0009207:	85 c0                	test   eax,eax
c0009209:	0f 84 55 01 00 00    	je     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c000920f:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009216:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921e:	83 ec 0c             	sub    esp,0xc
c0009221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009225:	e8 a1 e8 ff ff       	call   c0007acb <malloc>
c000922a:	83 c4 10             	add    esp,0x10
c000922d:	89 c3                	mov    ebx,eax
c000922f:	83 ec 08             	sub    esp,0x8
c0009232:	68 03 ff ff 0f       	push   0xfffff03
c0009237:	53                   	push   ebx
c0009238:	e8 2d 01 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000923d:	83 c4 10             	add    esp,0x10
c0009240:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009246:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924e:	83 ec 0c             	sub    esp,0xc
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 71 e8 ff ff       	call   c0007acb <malloc>
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	89 c3                	mov    ebx,eax
c000925f:	83 ec 08             	sub    esp,0x8
c0009262:	68 01 ff ff 0f       	push   0xfffff01
c0009267:	53                   	push   ebx
c0009268:	e8 fd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000926d:	83 c4 10             	add    esp,0x10
c0009270:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c0009276:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009285:	e8 41 e8 ff ff       	call   c0007acb <malloc>
c000928a:	83 c4 10             	add    esp,0x10
c000928d:	89 c3                	mov    ebx,eax
c000928f:	83 ec 08             	sub    esp,0x8
c0009292:	68 00 ff ff 0f       	push   0xfffff00
c0009297:	53                   	push   ebx
c0009298:	e8 cd 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000929d:	83 c4 10             	add    esp,0x10
c00092a0:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092a6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092ae:	83 ec 0c             	sub    esp,0xc
c00092b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b5:	e8 11 e8 ff ff       	call   c0007acb <malloc>
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	89 c3                	mov    ebx,eax
c00092bf:	83 ec 08             	sub    esp,0x8
c00092c2:	68 02 ff ff 0f       	push   0xfffff02
c00092c7:	53                   	push   ebx
c00092c8:	e8 9d 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092d6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092de:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092e3:	7f 7f                	jg     c0009364 <UnixFile::UnixFile(int)+0x1ae>
c00092e5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092ed:	83 ec 0c             	sub    esp,0xc
c00092f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f4:	e8 d2 e7 ff ff       	call   c0007acb <malloc>
c00092f9:	83 c4 10             	add    esp,0x10
c00092fc:	89 c3                	mov    ebx,eax
c00092fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009302:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009307:	83 ec 08             	sub    esp,0x8
c000930a:	50                   	push   eax
c000930b:	53                   	push   ebx
c000930c:	e8 59 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009318:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000931f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009327:	83 ec 0c             	sub    esp,0xc
c000932a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932e:	e8 98 e7 ff ff       	call   c0007acb <malloc>
c0009333:	83 c4 10             	add    esp,0x10
c0009336:	89 c3                	mov    ebx,eax
c0009338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009341:	83 ec 08             	sub    esp,0x8
c0009344:	50                   	push   eax
c0009345:	53                   	push   ebx
c0009346:	e8 1f 00 00 00       	call   c000936a <ReservedFilename::ReservedFilename(int)>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009352:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009359:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935e:	e9 7b ff ff ff       	jmp    c00092de <UnixFile::UnixFile(int)+0x128>
c0009363:	90                   	nop
c0009364:	83 c4 28             	add    esp,0x28
c0009367:	5b                   	pop    ebx
c0009368:	c3                   	ret    
c0009369:	90                   	nop

c000936a <ReservedFilename::ReservedFilename(int)>:
c000936a:	83 ec 0c             	sub    esp,0xc
c000936d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009371:	83 ec 08             	sub    esp,0x8
c0009374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009378:	50                   	push   eax
c0009379:	e8 38 fe ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000937e:	83 c4 10             	add    esp,0x10
c0009381:	ba 38 fe 01 c0       	mov    edx,0xc001fe38
c0009386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938a:	89 10                	mov    DWORD PTR [eax],edx
c000938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009390:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009394:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009397:	90                   	nop
c0009398:	83 c4 0c             	add    esp,0xc
c000939b:	c3                   	ret    

c000939c <UnixFile::~UnixFile()>:
c000939c:	83 ec 1c             	sub    esp,0x1c
c000939f:	ba 1c fe 01 c0       	mov    edx,0xc001fe1c
c00093a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a8:	89 10                	mov    DWORD PTR [eax],edx
c00093aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b6:	7f 76                	jg     c000942e <UnixFile::~UnixFile()+0x92>
c00093b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	68 98 4f 02 c0       	push   0xc0024f98
c00093c8:	e8 ef 55 01 00       	call   c001e9bc <LinkedList<UnixFile>::getFirstElement()>
c00093cd:	83 c4 10             	add    esp,0x10
c00093d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	68 98 4f 02 c0       	push   0xc0024f98
c00093dc:	e8 e3 55 01 00       	call   c001e9c4 <LinkedList<UnixFile>::removeFirst()>
c00093e1:	83 c4 10             	add    esp,0x10
c00093e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093ec:	74 43                	je     c0009431 <UnixFile::~UnixFile()+0x95>
c00093ee:	83 ec 08             	sub    esp,0x8
c00093f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f5:	68 98 4f 02 c0       	push   0xc0024f98
c00093fa:	e8 e9 54 01 00       	call   c001e8e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009406:	8d 50 01             	lea    edx,[eax+0x1]
c0009409:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000940d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009412:	0f 94 c0             	sete   al
c0009415:	0f b6 c0             	movzx  eax,al
c0009418:	85 c0                	test   eax,eax
c000941a:	74 a4                	je     c00093c0 <UnixFile::~UnixFile()+0x24>
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	68 f4 fd 01 c0       	push   0xc001fdf4
c0009424:	e8 10 74 00 00       	call   c0010839 <KePanic(char const*)>
c0009429:	83 c4 10             	add    esp,0x10
c000942c:	eb 92                	jmp    c00093c0 <UnixFile::~UnixFile()+0x24>
c000942e:	90                   	nop
c000942f:	eb 01                	jmp    c0009432 <UnixFile::~UnixFile()+0x96>
c0009431:	90                   	nop
c0009432:	90                   	nop
c0009433:	83 c4 1c             	add    esp,0x1c
c0009436:	c3                   	ret    
c0009437:	90                   	nop

c0009438 <UnixFile::~UnixFile()>:
c0009438:	83 ec 0c             	sub    esp,0xc
c000943b:	83 ec 0c             	sub    esp,0xc
c000943e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009442:	e8 55 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c0009447:	83 c4 10             	add    esp,0x10
c000944a:	83 ec 08             	sub    esp,0x8
c000944d:	6a 0c                	push   0xc
c000944f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009453:	e8 19 14 00 00       	call   c000a871 <operator delete(void*, unsigned long)>
c0009458:	83 c4 10             	add    esp,0x10
c000945b:	83 c4 0c             	add    esp,0xc
c000945e:	c3                   	ret    
c000945f:	90                   	nop

c0009460 <ReservedFilename::~ReservedFilename()>:
c0009460:	83 ec 0c             	sub    esp,0xc
c0009463:	ba 38 fe 01 c0       	mov    edx,0xc001fe38
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	89 10                	mov    DWORD PTR [eax],edx
c000946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009472:	83 ec 0c             	sub    esp,0xc
c0009475:	50                   	push   eax
c0009476:	e8 21 ff ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000947b:	83 c4 10             	add    esp,0x10
c000947e:	90                   	nop
c000947f:	83 c4 0c             	add    esp,0xc
c0009482:	c3                   	ret    
c0009483:	90                   	nop

c0009484 <ReservedFilename::~ReservedFilename()>:
c0009484:	83 ec 0c             	sub    esp,0xc
c0009487:	83 ec 0c             	sub    esp,0xc
c000948a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948e:	e8 cd ff ff ff       	call   c0009460 <ReservedFilename::~ReservedFilename()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	83 ec 08             	sub    esp,0x8
c0009499:	6a 0c                	push   0xc
c000949b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949f:	e8 cd 13 00 00       	call   c000a871 <operator delete(void*, unsigned long)>
c00094a4:	83 c4 10             	add    esp,0x10
c00094a7:	83 c4 0c             	add    esp,0xc
c00094aa:	c3                   	ret    

c00094ab <getFromFileDescriptor(int)>:
c00094ab:	53                   	push   ebx
c00094ac:	83 ec 08             	sub    esp,0x8
c00094af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bf:	7f 2c                	jg     c00094ed <getFromFileDescriptor(int)+0x42>
c00094c1:	83 ec 0c             	sub    esp,0xc
c00094c4:	68 98 4f 02 c0       	push   0xc0024f98
c00094c9:	e8 ee 54 01 00       	call   c001e9bc <LinkedList<UnixFile>::getFirstElement()>
c00094ce:	83 c4 10             	add    esp,0x10
c00094d1:	85 c0                	test   eax,eax
c00094d3:	75 04                	jne    c00094d9 <getFromFileDescriptor(int)+0x2e>
c00094d5:	31 c0                	xor    eax,eax
c00094d7:	eb 6e                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c00094d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094dc:	74 69                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094de:	52                   	push   edx
c00094df:	52                   	push   edx
c00094e0:	50                   	push   eax
c00094e1:	68 98 4f 02 c0       	push   0xc0024f98
c00094e6:	e8 7b 55 01 00       	call   c001ea66 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094eb:	eb e1                	jmp    c00094ce <getFromFileDescriptor(int)+0x23>
c00094ed:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f3:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094f8:	74 4d                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c00094fa:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009500:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009505:	74 40                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009507:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950d:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009512:	74 33                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009514:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951a:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000951f:	74 26                	je     c0009547 <getFromFileDescriptor(int)+0x9c>
c0009521:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009527:	83 f8 08             	cmp    eax,0x8
c000952a:	77 09                	ja     c0009535 <getFromFileDescriptor(int)+0x8a>
c000952c:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009533:	eb 12                	jmp    c0009547 <getFromFileDescriptor(int)+0x9c>
c0009535:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000953b:	83 fb 08             	cmp    ebx,0x8
c000953e:	77 95                	ja     c00094d5 <getFromFileDescriptor(int)+0x2a>
c0009540:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009547:	83 c4 08             	add    esp,0x8
c000954a:	5b                   	pop    ebx
c000954b:	c3                   	ret    

c000954c <__static_initialization_and_destruction_0(int, int)>:
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009554:	75 34                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009556:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955e:	75 2a                	jne    c000958a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009560:	83 ec 0c             	sub    esp,0xc
c0009563:	68 98 4f 02 c0       	push   0xc0024f98
c0009568:	e8 39 53 01 00       	call   c001e8a6 <LinkedList<UnixFile>::LinkedList()>
c000956d:	83 c4 10             	add    esp,0x10
c0009570:	83 ec 04             	sub    esp,0x4
c0009573:	68 a4 1e 02 c0       	push   0xc0021ea4
c0009578:	68 98 4f 02 c0       	push   0xc0024f98
c000957d:	68 a4 e8 01 c0       	push   0xc001e8a4
c0009582:	e8 9a 12 00 00       	call   c000a821 <__cxa_atexit>
c0009587:	83 c4 10             	add    esp,0x10
c000958a:	90                   	nop
c000958b:	83 c4 0c             	add    esp,0xc
c000958e:	c3                   	ret    

c000958f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958f:	83 ec 0c             	sub    esp,0xc
c0009592:	83 ec 08             	sub    esp,0x8
c0009595:	68 ff ff 00 00       	push   0xffff
c000959a:	6a 01                	push   0x1
c000959c:	e8 ab ff ff ff       	call   c000954c <__static_initialization_and_destruction_0(int, int)>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	83 c4 0c             	add    esp,0xc
c00095a7:	c3                   	ret    

c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a8:	53                   	push   ebx
c00095a9:	8b 15 28 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f28
c00095af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095bd:	89 d8                	mov    eax,ebx
c00095bf:	d1 e8                	shr    eax,1
c00095c1:	01 d0                	add    eax,edx
c00095c3:	80 e3 01             	and    bl,0x1
c00095c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c8:	75 09                	jne    c00095d3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ca:	83 e2 f0             	and    edx,0xfffffff0
c00095cd:	09 ca                	or     edx,ecx
c00095cf:	88 10                	mov    BYTE PTR [eax],dl
c00095d1:	5b                   	pop    ebx
c00095d2:	c3                   	ret    
c00095d3:	0f b6 c9             	movzx  ecx,cl
c00095d6:	83 e2 0f             	and    edx,0xf
c00095d9:	c1 e1 04             	shl    ecx,0x4
c00095dc:	09 ca                	or     edx,ecx
c00095de:	88 10                	mov    BYTE PTR [eax],dl
c00095e0:	5b                   	pop    ebx
c00095e1:	c3                   	ret    

c00095e2 <Virt::getPageState(unsigned long)>:
c00095e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e6:	8b 0d 28 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f28
c00095ec:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095f2:	89 d0                	mov    eax,edx
c00095f4:	d1 e8                	shr    eax,1
c00095f6:	80 e2 01             	and    dl,0x1
c00095f9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095fc:	74 03                	je     c0009601 <Virt::getPageState(unsigned long)+0x1f>
c00095fe:	c1 e8 04             	shr    eax,0x4
c0009601:	83 e0 0f             	and    eax,0xf
c0009604:	c3                   	ret    

c0009605 <Virt::allocateKernelVirtualPages(int)>:
c0009605:	55                   	push   ebp
c0009606:	57                   	push   edi
c0009607:	56                   	push   esi
c0009608:	31 f6                	xor    esi,esi
c000960a:	53                   	push   ebx
c000960b:	31 db                	xor    ebx,ebx
c000960d:	83 ec 1c             	sub    esp,0x1c
c0009610:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009615:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009619:	8b 2d 24 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021f24
c000961f:	55                   	push   ebp
c0009620:	e8 bd ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009625:	5a                   	pop    edx
c0009626:	84 c0                	test   al,al
c0009628:	75 3d                	jne    c0009667 <Virt::allocateKernelVirtualPages(int)+0x62>
c000962a:	85 db                	test   ebx,ebx
c000962c:	0f 44 f5             	cmove  esi,ebp
c000962f:	83 c3 01             	add    ebx,0x1
c0009632:	39 fb                	cmp    ebx,edi
c0009634:	74 5e                	je     c0009694 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009636:	83 c5 01             	add    ebp,0x1
c0009639:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000963f:	76 33                	jbe    c0009674 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009641:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009646:	c7 05 24 1f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021f24,0xc8000
c0009650:	75 2a                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009652:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009657:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000965c:	55                   	push   ebp
c000965d:	e8 80 ff ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c0009662:	5a                   	pop    edx
c0009663:	84 c0                	test   al,al
c0009665:	74 c3                	je     c000962a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009667:	83 c5 01             	add    ebp,0x1
c000966a:	31 db                	xor    ebx,ebx
c000966c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009672:	77 cd                	ja     c0009641 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009674:	89 2d 24 1f 02 c0    	mov    DWORD PTR ds:0xc0021f24,ebp
c000967a:	eb a3                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000967c:	83 ec 0c             	sub    esp,0xc
c000967f:	68 4c fe 01 c0       	push   0xc001fe4c
c0009684:	e8 b0 71 00 00       	call   c0010839 <KePanic(char const*)>
c0009689:	8b 2d 24 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021f24
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	eb 8b                	jmp    c000961f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009694:	89 35 24 1f 02 c0    	mov    DWORD PTR ds:0xc0021f24,esi
c000969a:	83 fb 01             	cmp    ebx,0x1
c000969d:	74 63                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000969f:	85 ff                	test   edi,edi
c00096a1:	74 41                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a3:	89 f0                	mov    eax,esi
c00096a5:	31 db                	xor    ebx,ebx
c00096a7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096aa:	eb 16                	jmp    c00096c2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096ac:	6a 01                	push   0x1
c00096ae:	83 c3 01             	add    ebx,0x1
c00096b1:	50                   	push   eax
c00096b2:	e8 f1 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b7:	39 fb                	cmp    ebx,edi
c00096b9:	58                   	pop    eax
c00096ba:	5a                   	pop    edx
c00096bb:	74 27                	je     c00096e4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096bd:	a1 24 1f 02 c0       	mov    eax,ds:0xc0021f24
c00096c2:	8d 50 01             	lea    edx,[eax+0x1]
c00096c5:	85 db                	test   ebx,ebx
c00096c7:	89 15 24 1f 02 c0    	mov    DWORD PTR ds:0xc0021f24,edx
c00096cd:	74 22                	je     c00096f1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096cf:	39 dd                	cmp    ebp,ebx
c00096d1:	75 d9                	jne    c00096ac <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096d3:	6a 03                	push   0x3
c00096d5:	83 c3 01             	add    ebx,0x1
c00096d8:	50                   	push   eax
c00096d9:	e8 ca fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096de:	39 fb                	cmp    ebx,edi
c00096e0:	59                   	pop    ecx
c00096e1:	58                   	pop    eax
c00096e2:	75 d9                	jne    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096e4:	83 c4 1c             	add    esp,0x1c
c00096e7:	89 f0                	mov    eax,esi
c00096e9:	5b                   	pop    ebx
c00096ea:	c1 e0 0c             	shl    eax,0xc
c00096ed:	5e                   	pop    esi
c00096ee:	5f                   	pop    edi
c00096ef:	5d                   	pop    ebp
c00096f0:	c3                   	ret    
c00096f1:	6a 02                	push   0x2
c00096f3:	bb 01 00 00 00       	mov    ebx,0x1
c00096f8:	50                   	push   eax
c00096f9:	e8 aa fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	58                   	pop    eax
c00096ff:	5a                   	pop    edx
c0009700:	eb bb                	jmp    c00096bd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009702:	6a 04                	push   0x4
c0009704:	56                   	push   esi
c0009705:	8d 46 01             	lea    eax,[esi+0x1]
c0009708:	a3 24 1f 02 c0       	mov    ds:0xc0021f24,eax
c000970d:	e8 96 fe ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009712:	89 f0                	mov    eax,esi
c0009714:	59                   	pop    ecx
c0009715:	c1 e0 0c             	shl    eax,0xc
c0009718:	5b                   	pop    ebx
c0009719:	83 c4 1c             	add    esp,0x1c
c000971c:	5b                   	pop    ebx
c000971d:	5e                   	pop    esi
c000971e:	5f                   	pop    edi
c000971f:	5d                   	pop    ebp
c0009720:	c3                   	ret    

c0009721 <Virt::freeSwapfilePage(unsigned long)>:
c0009721:	53                   	push   ebx
c0009722:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009728:	b8 01 00 00 00       	mov    eax,0x1
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	d3 e0                	shl    eax,cl
c0009733:	89 cb                	mov    ebx,ecx
c0009735:	c1 eb 05             	shr    ebx,0x5
c0009738:	f7 d0                	not    eax
c000973a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000973d:	21 c1                	and    ecx,eax
c000973f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009742:	5b                   	pop    ebx
c0009743:	c3                   	ret    

c0009744 <Virt::swapIDToSector(unsigned long)>:
c0009744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009748:	8b 15 2c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f2c
c000974e:	8b 0d 34 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f34
c0009754:	0f af c2             	imul   eax,edx
c0009757:	01 c8                	add    eax,ecx
c0009759:	c3                   	ret    

c000975a <Virt::allocateSwapfilePage()>:
c000975a:	55                   	push   ebp
c000975b:	31 d2                	xor    edx,edx
c000975d:	57                   	push   edi
c000975e:	56                   	push   esi
c000975f:	53                   	push   ebx
c0009760:	83 ec 0c             	sub    esp,0xc
c0009763:	8b 1d 30 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f30
c0009769:	8b 0d 2c 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021f2c
c000976f:	89 d8                	mov    eax,ebx
c0009771:	f7 f1                	div    ecx
c0009773:	39 cb                	cmp    ebx,ecx
c0009775:	72 2f                	jb     c00097a6 <Virt::allocateSwapfilePage()+0x4c>
c0009777:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000977d:	8b 16                	mov    edx,DWORD PTR [esi]
c000977f:	f6 c2 01             	test   dl,0x1
c0009782:	74 3e                	je     c00097c2 <Virt::allocateSwapfilePage()+0x68>
c0009784:	31 c9                	xor    ecx,ecx
c0009786:	bf 01 00 00 00       	mov    edi,0x1
c000978b:	eb 12                	jmp    c000979f <Virt::allocateSwapfilePage()+0x45>
c000978d:	89 ca                	mov    edx,ecx
c000978f:	89 fd                	mov    ebp,edi
c0009791:	c1 ea 05             	shr    edx,0x5
c0009794:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009797:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009799:	d3 e5                	shl    ebp,cl
c000979b:	85 ea                	test   edx,ebp
c000979d:	74 2c                	je     c00097cb <Virt::allocateSwapfilePage()+0x71>
c000979f:	83 c1 01             	add    ecx,0x1
c00097a2:	39 c8                	cmp    eax,ecx
c00097a4:	77 e7                	ja     c000978d <Virt::allocateSwapfilePage()+0x33>
c00097a6:	83 ec 0c             	sub    esp,0xc
c00097a9:	68 b3 ff 01 c0       	push   0xc001ffb3
c00097ae:	e8 86 70 00 00       	call   c0010839 <KePanic(char const*)>
c00097b3:	83 c4 10             	add    esp,0x10
c00097b6:	31 c9                	xor    ecx,ecx
c00097b8:	83 c4 0c             	add    esp,0xc
c00097bb:	89 c8                	mov    eax,ecx
c00097bd:	5b                   	pop    ebx
c00097be:	5e                   	pop    esi
c00097bf:	5f                   	pop    edi
c00097c0:	5d                   	pop    ebp
c00097c1:	c3                   	ret    
c00097c2:	89 f3                	mov    ebx,esi
c00097c4:	bd 01 00 00 00       	mov    ebp,0x1
c00097c9:	31 c9                	xor    ecx,ecx
c00097cb:	09 ea                	or     edx,ebp
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	89 13                	mov    DWORD PTR [ebx],edx
c00097d1:	83 c4 0c             	add    esp,0xc
c00097d4:	5b                   	pop    ebx
c00097d5:	5e                   	pop    esi
c00097d6:	5f                   	pop    edi
c00097d7:	5d                   	pop    ebp
c00097d8:	c3                   	ret    

c00097d9 <Virt::virtualMemorySetup()>:
c00097d9:	53                   	push   ebx
c00097da:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097df:	6a 0f                	push   0xf
c00097e1:	53                   	push   ebx
c00097e2:	83 c3 01             	add    ebx,0x1
c00097e5:	e8 be fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ea:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f0:	58                   	pop    eax
c00097f1:	5a                   	pop    edx
c00097f2:	75 eb                	jne    c00097df <Virt::virtualMemorySetup()+0x6>
c00097f4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f9:	6a 00                	push   0x0
c00097fb:	53                   	push   ebx
c00097fc:	83 c3 01             	add    ebx,0x1
c00097ff:	e8 a4 fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009804:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000980a:	59                   	pop    ecx
c000980b:	58                   	pop    eax
c000980c:	75 eb                	jne    c00097f9 <Virt::virtualMemorySetup()+0x20>
c000980e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009813:	6a 0f                	push   0xf
c0009815:	53                   	push   ebx
c0009816:	83 c3 01             	add    ebx,0x1
c0009819:	e8 8a fd ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009824:	58                   	pop    eax
c0009825:	5a                   	pop    edx
c0009826:	75 eb                	jne    c0009813 <Virt::virtualMemorySetup()+0x3a>
c0009828:	5b                   	pop    ebx
c0009829:	c3                   	ret    

c000982a <Virt::setupPageSwapping(int)>:
c000982a:	53                   	push   ebx
c000982b:	83 ec 0c             	sub    esp,0xc
c000982e:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009837:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000983d:	8b 10                	mov    edx,DWORD PTR [eax]
c000983f:	53                   	push   ebx
c0009840:	68 ca ff 01 c0       	push   0xc001ffca
c0009845:	50                   	push   eax
c0009846:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009849:	c1 e3 0b             	shl    ebx,0xb
c000984c:	89 1d 30 1f 02 c0    	mov    DWORD PTR ds:0xc0021f30,ebx
c0009852:	c1 eb 08             	shr    ebx,0x8
c0009855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009858:	c6 05 38 1f 02 c0 43 	mov    BYTE PTR ds:0xc0021f38,0x43
c000985f:	c7 05 2c 1f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021f2c,0x8
c0009869:	a3 34 1f 02 c0       	mov    ds:0xc0021f34,eax
c000986e:	e8 58 e2 ff ff       	call   c0007acb <malloc>
c0009873:	31 d2                	xor    edx,edx
c0009875:	83 c4 0c             	add    esp,0xc
c0009878:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000987d:	89 c1                	mov    ecx,eax
c000987f:	a1 30 1f 02 c0       	mov    eax,ds:0xc0021f30
c0009884:	f7 35 2c 1f 02 c0    	div    DWORD PTR ds:0xc0021f2c
c000988a:	c1 e8 05             	shr    eax,0x5
c000988d:	50                   	push   eax
c000988e:	6a 00                	push   0x0
c0009890:	51                   	push   ecx
c0009891:	e8 5a 6c ff ff       	call   c00004f0 <memset>
c0009896:	83 c4 18             	add    esp,0x18
c0009899:	5b                   	pop    ebx
c000989a:	c3                   	ret    
c000989b:	90                   	nop

c000989c <VAS::VAS(VAS*)>:
c000989c:	83 ec 0c             	sub    esp,0xc
c000989f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098b5:	83 ec 0c             	sub    esp,0xc
c00098b8:	68 6c fe 01 c0       	push   0xc001fe6c
c00098bd:	e8 77 6f 00 00       	call   c0010839 <KePanic(char const*)>
c00098c2:	83 c4 10             	add    esp,0x10
c00098c5:	90                   	nop
c00098c6:	83 c4 0c             	add    esp,0xc
c00098c9:	c3                   	ret    

c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098ce:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098d3:	89 c2                	mov    edx,eax
c00098d5:	c1 ea 16             	shr    edx,0x16
c00098d8:	c1 e8 0a             	shr    eax,0xa
c00098db:	83 f9 01             	cmp    ecx,0x1
c00098de:	19 c9                	sbb    ecx,ecx
c00098e0:	25 fc 0f 00 00       	and    eax,0xffc
c00098e5:	c1 e2 0c             	shl    edx,0xc
c00098e8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098ee:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098f5:	01 d0                	add    eax,edx
c00098f7:	c3                   	ret    

c00098f8 <VAS::getPageTableEntry(unsigned long)>:
c00098f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098fc:	89 ca                	mov    edx,ecx
c00098fe:	c1 ea 16             	shr    edx,0x16
c0009901:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009907:	c1 e9 0a             	shr    ecx,0xa
c000990a:	c1 e0 0c             	shl    eax,0xc
c000990d:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009913:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009916:	c3                   	ret    

c0009917 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009917:	55                   	push   ebp
c0009918:	57                   	push   edi
c0009919:	bf 01 00 00 00       	mov    edi,0x1
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	83 ec 0c             	sub    esp,0xc
c0009923:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009927:	c1 ee 0c             	shr    esi,0xc
c000992a:	eb 3a                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000992c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009931:	83 ec 08             	sub    esp,0x8
c0009934:	55                   	push   ebp
c0009935:	50                   	push   eax
c0009936:	e8 bd ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009940:	f6 c4 04             	test   ah,0x4
c0009943:	75 5a                	jne    c000999f <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009945:	83 fb 04             	cmp    ebx,0x4
c0009948:	74 6b                	je     c00099b5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994a:	83 fb 02             	cmp    ebx,0x2
c000994d:	74 7f                	je     c00099ce <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 a3 00 00 00    	je     c00099fb <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 87 00 00 00    	je     c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 74 fc ff ff       	call   c00095e2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 b3                	jne    c000992c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 e1 ff 01 c0       	push   0xc001ffe1
c0009981:	e8 b3 6e 00 00       	call   c0010839 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c000998f:	55                   	push   ebp
c0009990:	e8 63 ff ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 00                	mov    eax,DWORD PTR [eax]
c000999a:	f6 c4 04             	test   ah,0x4
c000999d:	74 c2                	je     c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000999f:	83 ec 0c             	sub    esp,0xc
c00099a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099a7:	50                   	push   eax
c00099a8:	e8 c0 e3 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	83 fb 04             	cmp    ebx,0x4
c00099b3:	75 95                	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099b5:	83 e7 01             	and    edi,0x1
c00099b8:	75 46                	jne    c0009a00 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099ba:	c7 44 24 20 90 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fe90
c00099c2:	83 c4 0c             	add    esp,0xc
c00099c5:	5b                   	pop    ebx
c00099c6:	5e                   	pop    esi
c00099c7:	5f                   	pop    edi
c00099c8:	5d                   	pop    ebp
c00099c9:	e9 6b 6e 00 00       	jmp    c0010839 <KePanic(char const*)>
c00099ce:	83 e7 01             	and    edi,0x1
c00099d1:	75 15                	jne    c00099e8 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	68 fd ff 01 c0       	push   0xc001fffd
c00099db:	e8 59 6e 00 00       	call   c0010839 <KePanic(char const*)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	e9 79 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099e8:	83 ec 08             	sub    esp,0x8
c00099eb:	6a 00                	push   0x0
c00099ed:	56                   	push   esi
c00099ee:	e8 b5 fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	e9 66 ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099fb:	83 e7 01             	and    edi,0x1
c00099fe:	75 16                	jne    c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a00:	83 ec 08             	sub    esp,0x8
c0009a03:	6a 00                	push   0x0
c0009a05:	56                   	push   esi
c0009a06:	e8 9d fb ff ff       	call   c00095a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0b:	83 c4 10             	add    esp,0x10
c0009a0e:	83 c4 0c             	add    esp,0xc
c0009a11:	5b                   	pop    ebx
c0009a12:	5e                   	pop    esi
c0009a13:	5f                   	pop    edi
c0009a14:	5d                   	pop    ebp
c0009a15:	c3                   	ret    
c0009a16:	c7 44 24 20 19 00 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020019
c0009a1e:	83 c4 0c             	add    esp,0xc
c0009a21:	5b                   	pop    ebx
c0009a22:	5e                   	pop    esi
c0009a23:	5f                   	pop    edi
c0009a24:	5d                   	pop    ebp
c0009a25:	e9 0f 6e 00 00       	jmp    c0010839 <KePanic(char const*)>

c0009a2a <VAS::freeAllocatedPages(unsigned long)>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a32:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a36:	74 09                	je     c0009a41 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a3c:	e9 d6 fe ff ff       	jmp    c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a41:	c7 44 24 04 b4 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001feb4
c0009a49:	e9 21 0f 00 00       	jmp    c000a96f <Dbg::kprintf(char const*, ...)>

c0009a4e <VAS::virtualToPhysical(unsigned long)>:
c0009a4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a52:	50                   	push   eax
c0009a53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a57:	52                   	push   edx
c0009a58:	e8 9b fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a5d:	59                   	pop    ecx
c0009a5e:	5a                   	pop    edx
c0009a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a66:	c3                   	ret    
c0009a67:	90                   	nop

c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a68:	55                   	push   ebp
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a74:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a7c:	89 c3                	mov    ebx,eax
c0009a7e:	c1 e3 0c             	shl    ebx,0xc
c0009a81:	01 f3                	add    ebx,esi
c0009a83:	85 c0                	test   eax,eax
c0009a85:	7e 1f                	jle    c0009aa6 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c0009a87:	56                   	push   esi
c0009a88:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a8e:	55                   	push   ebp
c0009a8f:	e8 64 fe ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c0009a94:	5a                   	pop    edx
c0009a95:	59                   	pop    ecx
c0009a96:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a9c:	21 f9                	and    ecx,edi
c0009a9e:	09 d1                	or     ecx,edx
c0009aa0:	39 f3                	cmp    ebx,esi
c0009aa2:	89 08                	mov    DWORD PTR [eax],ecx
c0009aa4:	75 e1                	jne    c0009a87 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009aa6:	5b                   	pop    ebx
c0009aa7:	5e                   	pop    esi
c0009aa8:	5f                   	pop    edi
c0009aa9:	5d                   	pop    ebp
c0009aaa:	c3                   	ret    
c0009aab:	90                   	nop

c0009aac <VAS::VAS()>:
c0009aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009acb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ade:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009ae5:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009aea:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009aef:	29 c2                	sub    edx,eax
c0009af1:	89 d0                	mov    eax,edx
c0009af3:	05 ff 0f 00 00       	add    eax,0xfff
c0009af8:	c1 e8 0c             	shr    eax,0xc
c0009afb:	89 c2                	mov    edx,eax
c0009afd:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b02:	6a 04                	push   0x4
c0009b04:	6a ff                	push   0xffffffff
c0009b06:	52                   	push   edx
c0009b07:	50                   	push   eax
c0009b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0c:	e8 57 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b11:	83 c4 14             	add    esp,0x14
c0009b14:	90                   	nop
c0009b15:	c3                   	ret    

c0009b16 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b16:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b21:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b28:	75 01                	jne    c0009b2b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b2a:	c3                   	ret    
c0009b2b:	68 80 00 00 00       	push   0x80
c0009b30:	6a ff                	push   0xffffffff
c0009b32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b36:	50                   	push   eax
c0009b37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b3b:	52                   	push   edx
c0009b3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b40:	51                   	push   ecx
c0009b41:	e8 22 ff ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b46:	83 c4 14             	add    esp,0x14
c0009b49:	c3                   	ret    

c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b55:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b5d:	83 f8 01             	cmp    eax,0x1
c0009b60:	19 c0                	sbb    eax,eax
c0009b62:	83 ca 03             	or     edx,0x3
c0009b65:	83 e0 fc             	and    eax,0xfffffffc
c0009b68:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b6f:	0f 20 d8             	mov    eax,cr3
c0009b72:	0f 22 d8             	mov    cr3,eax
c0009b75:	c3                   	ret    

c0009b76 <VAS::~VAS()>:
c0009b76:	83 ec 2c             	sub    esp,0x2c
c0009b79:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b81:	fa                   	cli    
c0009b82:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b87:	83 c0 01             	add    eax,0x1
c0009b8a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b99:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ba3:	6a 01                	push   0x1
c0009ba5:	50                   	push   eax
c0009ba6:	e8 9f ff ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bab:	83 c4 0c             	add    esp,0xc
c0009bae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bb6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bbe:	0f 8f d8 00 00 00    	jg     c0009c9c <VAS::~VAS()+0x126>
c0009bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bcf:	c1 e2 02             	shl    edx,0x2
c0009bd2:	01 d0                	add    eax,edx
c0009bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bde:	83 e0 01             	and    eax,0x1
c0009be1:	0f 84 ab 00 00 00    	je     c0009c92 <VAS::~VAS()+0x11c>
c0009be7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009bf7:	7f 74                	jg     c0009c6d <VAS::~VAS()+0xf7>
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	c1 e0 0a             	shl    eax,0xa
c0009c00:	89 c2                	mov    edx,eax
c0009c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c06:	01 d0                	add    eax,edx
c0009c08:	c1 e0 0c             	shl    eax,0xc
c0009c0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c0f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c19:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c23:	6a 01                	push   0x1
c0009c25:	50                   	push   eax
c0009c26:	e8 9f fc ff ff       	call   c00098ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c2b:	83 c4 0c             	add    esp,0xc
c0009c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c40:	25 01 04 00 00       	and    eax,0x401
c0009c45:	3d 01 04 00 00       	cmp    eax,0x401
c0009c4a:	75 1a                	jne    c0009c66 <VAS::~VAS()+0xf0>
c0009c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c50:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c55:	83 ec 0c             	sub    esp,0xc
c0009c58:	50                   	push   eax
c0009c59:	e8 0f e1 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c5e:	83 c4 10             	add    esp,0x10
c0009c61:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c66:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c6b:	eb 82                	jmp    c0009bef <VAS::~VAS()+0x79>
c0009c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c71:	25 00 04 00 00       	and    eax,0x400
c0009c76:	74 1a                	je     c0009c92 <VAS::~VAS()+0x11c>
c0009c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c81:	83 ec 0c             	sub    esp,0xc
c0009c84:	50                   	push   eax
c0009c85:	e8 e3 e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009c8a:	83 c4 10             	add    esp,0x10
c0009c8d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c92:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c97:	e9 1a ff ff ff       	jmp    c0009bb6 <VAS::~VAS()+0x40>
c0009c9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ca3:	83 ec 0c             	sub    esp,0xc
c0009ca6:	50                   	push   eax
c0009ca7:	e8 6b fc ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cac:	83 c4 10             	add    esp,0x10
c0009caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cb6:	83 ec 0c             	sub    esp,0xc
c0009cb9:	50                   	push   eax
c0009cba:	e8 ae e0 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ccc:	83 e8 01             	sub    eax,0x1
c0009ccf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cd4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cd9:	85 c0                	test   eax,eax
c0009cdb:	75 01                	jne    c0009cde <VAS::~VAS()+0x168>
c0009cdd:	fb                   	sti    
c0009cde:	90                   	nop
c0009cdf:	83 c4 2c             	add    esp,0x2c
c0009ce2:	c3                   	ret    
c0009ce3:	90                   	nop

c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009ce4:	55                   	push   ebp
c0009ce5:	57                   	push   edi
c0009ce6:	56                   	push   esi
c0009ce7:	53                   	push   ebx
c0009ce8:	83 ec 1c             	sub    esp,0x1c
c0009ceb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009cf3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009cf7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009cfd:	77 0b                	ja     c0009d0a <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0009cff:	0f 20 d8             	mov    eax,cr3
c0009d02:	0f 20 d8             	mov    eax,cr3
c0009d05:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d08:	75 43                	jne    c0009d4d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009d0a:	89 d8                	mov    eax,ebx
c0009d0c:	09 f8                	or     eax,edi
c0009d0e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d13:	75 53                	jne    c0009d68 <VAS::mapPage(unsigned long, unsigned long, int)+0x84>
c0009d15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d18:	89 de                	mov    esi,ebx
c0009d1a:	c1 ee 16             	shr    esi,0x16
c0009d1d:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d24:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d28:	74 50                	je     c0009d7a <VAS::mapPage(unsigned long, unsigned long, int)+0x96>
c0009d2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d2e:	c1 eb 0a             	shr    ebx,0xa
c0009d31:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d37:	c1 e6 0c             	shl    esi,0xc
c0009d3a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d40:	09 c7                	or     edi,eax
c0009d42:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d45:	83 c4 1c             	add    esp,0x1c
c0009d48:	5b                   	pop    ebx
c0009d49:	5e                   	pop    esi
c0009d4a:	5f                   	pop    edi
c0009d4b:	5d                   	pop    ebp
c0009d4c:	c3                   	ret    
c0009d4d:	83 ec 0c             	sub    esp,0xc
c0009d50:	68 d8 fe 01 c0       	push   0xc001fed8
c0009d55:	e8 15 0c 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0009d5a:	89 d8                	mov    eax,ebx
c0009d5c:	83 c4 10             	add    esp,0x10
c0009d5f:	09 f8                	or     eax,edi
c0009d61:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d66:	74 ad                	je     c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d68:	83 ec 0c             	sub    esp,0xc
c0009d6b:	68 40 ff 01 c0       	push   0xc001ff40
c0009d70:	e8 c4 6a 00 00       	call   c0010839 <KePanic(char const*)>
c0009d75:	83 c4 10             	add    esp,0x10
c0009d78:	eb 9b                	jmp    c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009d7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d7e:	e8 53 e0 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009d83:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d89:	83 ec 0c             	sub    esp,0xc
c0009d8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d94:	6a 01                	push   0x1
c0009d96:	e8 6a f8 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009d9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009da2:	6a 01                	push   0x1
c0009da4:	50                   	push   eax
c0009da5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009da9:	52                   	push   edx
c0009daa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dae:	51                   	push   ecx
c0009daf:	e8 4a 02 00 00       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	68 00 10 00 00       	push   0x1000
c0009dbc:	6a 00                	push   0x0
c0009dbe:	50                   	push   eax
c0009dbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc3:	e8 28 67 ff ff       	call   c00004f0 <memset>
c0009dc8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dcc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dcf:	e8 43 fb ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ddc:	83 c4 10             	add    esp,0x10
c0009ddf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009de2:	0d 07 04 00 00       	or     eax,0x407
c0009de7:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009dea:	e9 3b ff ff ff       	jmp    c0009d2a <VAS::mapPage(unsigned long, unsigned long, int)+0x46>
c0009def:	90                   	nop

c0009df0 <VAS::allocatePages(int, int)>:
c0009df0:	55                   	push   ebp
c0009df1:	57                   	push   edi
c0009df2:	56                   	push   esi
c0009df3:	53                   	push   ebx
c0009df4:	83 ec 1c             	sub    esp,0x1c
c0009df7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009dfc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e06:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e0c:	83 e0 01             	and    eax,0x1
c0009e0f:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e13:	89 c7                	mov    edi,eax
c0009e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e19:	0f 85 d6 00 00 00    	jne    c0009ef5 <VAS::allocatePages(int, int)+0x105>
c0009e1f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e26:	85 c0                	test   eax,eax
c0009e28:	0f 84 ab 00 00 00    	je     c0009ed9 <VAS::allocatePages(int, int)+0xe9>
c0009e2e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e32:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e3a:	c1 e6 0c             	shl    esi,0xc
c0009e3d:	01 de                	add    esi,ebx
c0009e3f:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e42:	85 c0                	test   eax,eax
c0009e44:	7e 3a                	jle    c0009e80 <VAS::allocatePages(int, int)+0x90>
c0009e46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e4e:	80 cc 04             	or     ah,0x4
c0009e51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e55:	89 f8                	mov    eax,edi
c0009e57:	0f b6 f8             	movzx  edi,al
c0009e5a:	e8 77 df ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009e5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e63:	52                   	push   edx
c0009e64:	53                   	push   ebx
c0009e65:	50                   	push   eax
c0009e66:	55                   	push   ebp
c0009e67:	e8 78 fe ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	85 ff                	test   edi,edi
c0009e71:	74 03                	je     c0009e76 <VAS::allocatePages(int, int)+0x86>
c0009e73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e76:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e7c:	39 de                	cmp    esi,ebx
c0009e7e:	75 da                	jne    c0009e5a <VAS::allocatePages(int, int)+0x6a>
c0009e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e84:	85 c9                	test   ecx,ecx
c0009e86:	75 12                	jne    c0009e9a <VAS::allocatePages(int, int)+0xaa>
c0009e88:	0f 20 d8             	mov    eax,cr3
c0009e8b:	0f 22 d8             	mov    cr3,eax
c0009e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e92:	83 c4 1c             	add    esp,0x1c
c0009e95:	5b                   	pop    ebx
c0009e96:	5e                   	pop    esi
c0009e97:	5f                   	pop    edi
c0009e98:	5d                   	pop    ebp
c0009e99:	c3                   	ret    
c0009e9a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e9e:	c1 ee 0a             	shr    esi,0xa
c0009ea1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ea7:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ead:	c1 eb 0a             	shr    ebx,0xa
c0009eb0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009eb6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ebc:	39 c3                	cmp    ebx,eax
c0009ebe:	77 ce                	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009ec0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ec3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec9:	39 d8                	cmp    eax,ebx
c0009ecb:	73 f3                	jae    c0009ec0 <VAS::allocatePages(int, int)+0xd0>
c0009ecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ed1:	83 c4 1c             	add    esp,0x1c
c0009ed4:	5b                   	pop    ebx
c0009ed5:	5e                   	pop    esi
c0009ed6:	5f                   	pop    edi
c0009ed7:	5d                   	pop    ebp
c0009ed8:	c3                   	ret    
c0009ed9:	83 ec 0c             	sub    esp,0xc
c0009edc:	68 64 ff 01 c0       	push   0xc001ff64
c0009ee1:	e8 53 69 00 00       	call   c0010839 <KePanic(char const*)>
c0009ee6:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009ee9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eed:	83 c4 10             	add    esp,0x10
c0009ef0:	e9 39 ff ff ff       	jmp    c0009e2e <VAS::allocatePages(int, int)+0x3e>
c0009ef5:	83 ec 0c             	sub    esp,0xc
c0009ef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009efc:	50                   	push   eax
c0009efd:	e8 03 f7 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c0009f02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f0e:	0f 87 a4 00 00 00    	ja     c0009fb8 <VAS::allocatePages(int, int)+0x1c8>
c0009f14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f18:	85 c0                	test   eax,eax
c0009f1a:	7e 44                	jle    c0009f60 <VAS::allocatePages(int, int)+0x170>
c0009f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f20:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f28:	c1 e0 0c             	shl    eax,0xc
c0009f2b:	01 d8                	add    eax,ebx
c0009f2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f31:	89 f8                	mov    eax,edi
c0009f33:	81 ce 00 04 00 00    	or     esi,0x400
c0009f39:	0f b6 f8             	movzx  edi,al
c0009f3c:	e8 95 de ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0009f41:	56                   	push   esi
c0009f42:	53                   	push   ebx
c0009f43:	50                   	push   eax
c0009f44:	55                   	push   ebp
c0009f45:	e8 9a fd ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4a:	83 c4 10             	add    esp,0x10
c0009f4d:	85 ff                	test   edi,edi
c0009f4f:	74 03                	je     c0009f54 <VAS::allocatePages(int, int)+0x164>
c0009f51:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f54:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f5a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f5e:	75 dc                	jne    c0009f3c <VAS::allocatePages(int, int)+0x14c>
c0009f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f64:	85 c0                	test   eax,eax
c0009f66:	0f 84 1c ff ff ff    	je     c0009e88 <VAS::allocatePages(int, int)+0x98>
c0009f6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f74:	c1 e0 0c             	shl    eax,0xc
c0009f77:	01 d0                	add    eax,edx
c0009f79:	89 d3                	mov    ebx,edx
c0009f7b:	c1 eb 0a             	shr    ebx,0xa
c0009f7e:	c1 e8 0a             	shr    eax,0xa
c0009f81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f87:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f8c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f92:	2d 00 00 40 00       	sub    eax,0x400000
c0009f97:	39 c3                	cmp    ebx,eax
c0009f99:	0f 87 ef fe ff ff    	ja     c0009e8e <VAS::allocatePages(int, int)+0x9e>
c0009f9f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fa2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fa8:	39 d8                	cmp    eax,ebx
c0009faa:	73 f3                	jae    c0009f9f <VAS::allocatePages(int, int)+0x1af>
c0009fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fb0:	83 c4 1c             	add    esp,0x1c
c0009fb3:	5b                   	pop    ebx
c0009fb4:	5e                   	pop    esi
c0009fb5:	5f                   	pop    edi
c0009fb6:	5d                   	pop    ebp
c0009fb7:	c3                   	ret    
c0009fb8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc3:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fca:	0f 84 44 ff ff ff    	je     c0009f14 <VAS::allocatePages(int, int)+0x124>
c0009fd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fd4:	80 cc 01             	or     ah,0x1
c0009fd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fdb:	e9 34 ff ff ff       	jmp    c0009f14 <VAS::allocatePages(int, int)+0x124>

c0009fe0 <VAS::setCPUSpecific(unsigned long)>:
c0009fe0:	83 ec 0c             	sub    esp,0xc
c0009fe3:	6a 05                	push   0x5
c0009fe5:	68 00 00 40 c2       	push   0xc2400000
c0009fea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fee:	50                   	push   eax
c0009fef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ff3:	52                   	push   edx
c0009ff4:	e8 eb fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ff9:	83 c4 1c             	add    esp,0x1c
c0009ffc:	c3                   	ret    
c0009ffd:	90                   	nop

c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009ffe:	55                   	push   ebp
c0009fff:	57                   	push   edi
c000a000:	56                   	push   esi
c000a001:	53                   	push   ebx
c000a002:	83 ec 1c             	sub    esp,0x1c
c000a005:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a00a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a00e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a012:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a016:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a01c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a022:	83 e0 01             	and    eax,0x1
c000a025:	85 c9                	test   ecx,ecx
c000a027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02b:	7e 3e                	jle    c000a06b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6d>
c000a02d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a031:	89 f3                	mov    ebx,esi
c000a033:	0f b6 f8             	movzx  edi,al
c000a036:	c1 e2 0c             	shl    edx,0xc
c000a039:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000a03c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a040:	55                   	push   ebp
c000a041:	53                   	push   ebx
c000a042:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a046:	29 f0                	sub    eax,esi
c000a048:	01 d8                	add    eax,ebx
c000a04a:	50                   	push   eax
c000a04b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04f:	52                   	push   edx
c000a050:	e8 8f fc ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a055:	83 c4 10             	add    esp,0x10
c000a058:	85 ff                	test   edi,edi
c000a05a:	74 03                	je     c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x61>
c000a05c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a05f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a065:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a069:	75 d5                	jne    c000a040 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a06b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a06f:	85 c0                	test   eax,eax
c000a071:	75 10                	jne    c000a083 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x85>
c000a073:	0f 20 d8             	mov    eax,cr3
c000a076:	0f 22 d8             	mov    cr3,eax
c000a079:	83 c4 1c             	add    esp,0x1c
c000a07c:	89 f0                	mov    eax,esi
c000a07e:	5b                   	pop    ebx
c000a07f:	5e                   	pop    esi
c000a080:	5f                   	pop    edi
c000a081:	5d                   	pop    ebp
c000a082:	c3                   	ret    
c000a083:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a087:	89 f3                	mov    ebx,esi
c000a089:	c1 eb 0a             	shr    ebx,0xa
c000a08c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a092:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a098:	c1 e0 0c             	shl    eax,0xc
c000a09b:	01 f0                	add    eax,esi
c000a09d:	c1 e8 0a             	shr    eax,0xa
c000a0a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0a5:	2d 00 00 40 00       	sub    eax,0x400000
c000a0aa:	39 c3                	cmp    ebx,eax
c000a0ac:	77 cb                	ja     c000a079 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x7b>
c000a0ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0b7:	39 d8                	cmp    eax,ebx
c000a0b9:	73 f3                	jae    c000a0ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb0>
c000a0bb:	83 c4 1c             	add    esp,0x1c
c000a0be:	89 f0                	mov    eax,esi
c000a0c0:	5b                   	pop    ebx
c000a0c1:	5e                   	pop    esi
c000a0c2:	5f                   	pop    edi
c000a0c3:	5d                   	pop    ebp
c000a0c4:	c3                   	ret    
c000a0c5:	90                   	nop

c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0c6:	55                   	push   ebp
c000a0c7:	57                   	push   edi
c000a0c8:	56                   	push   esi
c000a0c9:	53                   	push   ebx
c000a0ca:	83 ec 1c             	sub    esp,0x1c
c000a0cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0d5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a0d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0e1:	09 d8                	or     eax,ebx
c000a0e3:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0e8:	75 4b                	jne    c000a135 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a0ed:	89 de                	mov    esi,ebx
c000a0ef:	c1 ee 16             	shr    esi,0x16
c000a0f2:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c000a0f9:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c000a0fd:	74 48                	je     c000a147 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c000a0ff:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c000a104:	c1 eb 0a             	shr    ebx,0xa
c000a107:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000a10b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a10f:	83 ff 01             	cmp    edi,0x1
c000a112:	19 c0                	sbb    eax,eax
c000a114:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a11a:	c1 e6 0c             	shl    esi,0xc
c000a11d:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a122:	01 f3                	add    ebx,esi
c000a124:	09 ca                	or     edx,ecx
c000a126:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a12d:	83 c4 1c             	add    esp,0x1c
c000a130:	5b                   	pop    ebx
c000a131:	5e                   	pop    esi
c000a132:	5f                   	pop    edi
c000a133:	5d                   	pop    ebp
c000a134:	c3                   	ret    
c000a135:	83 ec 0c             	sub    esp,0xc
c000a138:	68 90 ff 01 c0       	push   0xc001ff90
c000a13d:	e8 f7 66 00 00       	call   c0010839 <KePanic(char const*)>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	eb a3                	jmp    c000a0ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a147:	e8 8a dc ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a14c:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a152:	83 ec 0c             	sub    esp,0xc
c000a155:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a159:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a15d:	6a 01                	push   0x1
c000a15f:	e8 a1 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a164:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a16b:	6a 01                	push   0x1
c000a16d:	50                   	push   eax
c000a16e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a172:	50                   	push   eax
c000a173:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a177:	51                   	push   ecx
c000a178:	e8 81 fe ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a17d:	83 c4 1c             	add    esp,0x1c
c000a180:	68 00 10 00 00       	push   0x1000
c000a185:	6a 00                	push   0x0
c000a187:	50                   	push   eax
c000a188:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a18c:	e8 5f 63 ff ff       	call   c00004f0 <memset>
c000a191:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a195:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a198:	e8 7a f7 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000a19d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a1a7:	81 ca 07 04 00 00    	or     edx,0x407
c000a1ad:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a1b0:	e9 4a ff ff ff       	jmp    c000a0ff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a1b5:	90                   	nop

c000a1b6 <VAS::VAS(bool)>:
c000a1b6:	53                   	push   ebx
c000a1b7:	83 ec 28             	sub    esp,0x28
c000a1ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1dc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1e0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1e3:	e8 ee db ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a1e8:	89 c2                	mov    edx,eax
c000a1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a1f1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a1f7:	83 ec 0c             	sub    esp,0xc
c000a1fa:	6a 01                	push   0x1
c000a1fc:	e8 04 f4 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000a201:	83 c4 10             	add    esp,0x10
c000a204:	89 c2                	mov    edx,eax
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a20d:	83 ec 0c             	sub    esp,0xc
c000a210:	6a 03                	push   0x3
c000a212:	6a 01                	push   0x1
c000a214:	52                   	push   edx
c000a215:	50                   	push   eax
c000a216:	53                   	push   ebx
c000a217:	e8 e2 fd ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a21c:	83 c4 20             	add    esp,0x20
c000a21f:	89 c2                	mov    edx,eax
c000a221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a225:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a228:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a230:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a238:	7f 1d                	jg     c000a257 <VAS::VAS(bool)+0xa1>
c000a23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a23e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a241:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a245:	c1 e2 02             	shl    edx,0x2
c000a248:	01 d0                	add    eax,edx
c000a24a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a250:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a255:	eb d9                	jmp    c000a230 <VAS::VAS(bool)+0x7a>
c000a257:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a25f:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a267:	7f 7e                	jg     c000a2e7 <VAS::VAS(bool)+0x131>
c000a269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a26d:	2d 00 02 00 00       	sub    eax,0x200
c000a272:	c1 e0 0c             	shl    eax,0xc
c000a275:	83 c8 05             	or     eax,0x5
c000a278:	89 c2                	mov    edx,eax
c000a27a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a27f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a285:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a28b:	83 e0 10             	and    eax,0x10
c000a28e:	0f b6 c0             	movzx  eax,al
c000a291:	85 c0                	test   eax,eax
c000a293:	74 07                	je     c000a29c <VAS::VAS(bool)+0xe6>
c000a295:	b8 00 01 00 00       	mov    eax,0x100
c000a29a:	eb 05                	jmp    c000a2a1 <VAS::VAS(bool)+0xeb>
c000a29c:	b8 00 00 00 00       	mov    eax,0x0
c000a2a1:	09 d0                	or     eax,edx
c000a2a3:	89 c1                	mov    ecx,eax
c000a2a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2b0:	c1 e2 02             	shl    edx,0x2
c000a2b3:	01 d0                	add    eax,edx
c000a2b5:	89 ca                	mov    edx,ecx
c000a2b7:	89 10                	mov    DWORD PTR [eax],edx
c000a2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2bd:	2d 40 03 00 00       	sub    eax,0x340
c000a2c2:	83 f8 7f             	cmp    eax,0x7f
c000a2c5:	77 16                	ja     c000a2dd <VAS::VAS(bool)+0x127>
c000a2c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2d2:	c1 e2 02             	shl    edx,0x2
c000a2d5:	01 d0                	add    eax,edx
c000a2d7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2dd:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2e2:	e9 78 ff ff ff       	jmp    c000a25f <VAS::VAS(bool)+0xa9>
c000a2e7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f2:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2f8:	83 e0 10             	and    eax,0x10
c000a2fb:	0f b6 c0             	movzx  eax,al
c000a2fe:	85 c0                	test   eax,eax
c000a300:	74 07                	je     c000a309 <VAS::VAS(bool)+0x153>
c000a302:	b8 03 41 00 00       	mov    eax,0x4103
c000a307:	eb 05                	jmp    c000a30e <VAS::VAS(bool)+0x158>
c000a309:	b8 03 40 00 00       	mov    eax,0x4003
c000a30e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a312:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a315:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a31b:	89 02                	mov    DWORD PTR [edx],eax
c000a31d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a328:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a32e:	83 ec 08             	sub    esp,0x8
c000a331:	50                   	push   eax
c000a332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a336:	e8 a5 fc ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c000a33b:	83 c4 10             	add    esp,0x10
c000a33e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a342:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a345:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a350:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a356:	83 e0 10             	and    eax,0x10
c000a359:	0f b6 c0             	movzx  eax,al
c000a35c:	85 c0                	test   eax,eax
c000a35e:	74 07                	je     c000a367 <VAS::VAS(bool)+0x1b1>
c000a360:	b8 00 01 00 00       	mov    eax,0x100
c000a365:	eb 05                	jmp    c000a36c <VAS::VAS(bool)+0x1b6>
c000a367:	b8 00 00 00 00       	mov    eax,0x0
c000a36c:	09 c2                	or     edx,eax
c000a36e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a372:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a375:	05 fc 0f 00 00       	add    eax,0xffc
c000a37a:	83 ca 03             	or     edx,0x3
c000a37d:	89 10                	mov    DWORD PTR [eax],edx
c000a37f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a384:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a38a:	83 ec 0c             	sub    esp,0xc
c000a38d:	50                   	push   eax
c000a38e:	e8 d1 1c 00 00       	call   c000c064 <Device::getName()>
c000a393:	83 c4 10             	add    esp,0x10
c000a396:	83 ec 08             	sub    esp,0x8
c000a399:	68 33 00 02 c0       	push   0xc0020033
c000a39e:	50                   	push   eax
c000a39f:	e8 dc 63 ff ff       	call   c0000780 <strcmp>
c000a3a4:	83 c4 10             	add    esp,0x10
c000a3a7:	85 c0                	test   eax,eax
c000a3a9:	0f 94 c0             	sete   al
c000a3ac:	0f b6 c0             	movzx  eax,al
c000a3af:	85 c0                	test   eax,eax
c000a3b1:	0f 84 8b 00 00 00    	je     c000a442 <VAS::VAS(bool)+0x28c>
c000a3b7:	fa                   	cli    
c000a3b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3bd:	83 c0 01             	add    eax,0x1
c000a3c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3c5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3d0:	05 7c 09 00 00       	add    eax,0x97c
c000a3d5:	83 ec 0c             	sub    esp,0xc
c000a3d8:	50                   	push   eax
c000a3d9:	e8 e8 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3de:	83 c4 10             	add    esp,0x10
c000a3e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3e6:	89 c3                	mov    ebx,eax
c000a3e8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3f3:	05 7c 09 00 00       	add    eax,0x97c
c000a3f8:	83 ec 0c             	sub    esp,0xc
c000a3fb:	50                   	push   eax
c000a3fc:	e8 c5 d1 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	83 ec 08             	sub    esp,0x8
c000a407:	50                   	push   eax
c000a408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a40c:	e8 e7 f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a411:	83 c4 10             	add    esp,0x10
c000a414:	8b 00                	mov    eax,DWORD PTR [eax]
c000a416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a41b:	6a 11                	push   0x11
c000a41d:	53                   	push   ebx
c000a41e:	50                   	push   eax
c000a41f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a423:	e8 bc f8 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a430:	83 e8 01             	sub    eax,0x1
c000a433:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a438:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a43d:	85 c0                	test   eax,eax
c000a43f:	75 01                	jne    c000a442 <VAS::VAS(bool)+0x28c>
c000a441:	fb                   	sti    
c000a442:	90                   	nop
c000a443:	83 c4 28             	add    esp,0x28
c000a446:	5b                   	pop    ebx
c000a447:	c3                   	ret    

c000a448 <VAS::evict(unsigned long)>:
c000a448:	55                   	push   ebp
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 1c             	sub    esp,0x1c
c000a44f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a453:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a45b:	e8 fa f2 ff ff       	call   c000975a <Virt::allocateSwapfilePage()>
c000a460:	89 c7                	mov    edi,eax
c000a462:	a1 2c 1f 02 c0       	mov    eax,ds:0xc0021f2c
c000a467:	85 c0                	test   eax,eax
c000a469:	7e 40                	jle    c000a4ab <VAS::evict(unsigned long)+0x63>
c000a46b:	89 ee                	mov    esi,ebp
c000a46d:	31 db                	xor    ebx,ebx
c000a46f:	83 ec 0c             	sub    esp,0xc
c000a472:	57                   	push   edi
c000a473:	e8 cc f2 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a478:	31 d2                	xor    edx,edx
c000a47a:	89 34 24             	mov    DWORD PTR [esp],esi
c000a47d:	81 c6 00 02 00 00    	add    esi,0x200
c000a483:	6a 01                	push   0x1
c000a485:	52                   	push   edx
c000a486:	01 d8                	add    eax,ebx
c000a488:	83 c3 01             	add    ebx,0x1
c000a48b:	50                   	push   eax
c000a48c:	0f be 05 38 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f38
c000a493:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a49a:	50                   	push   eax
c000a49b:	e8 86 2d 00 00       	call   c000d226 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4a0:	83 c4 20             	add    esp,0x20
c000a4a3:	39 1d 2c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f2c,ebx
c000a4a9:	7f c4                	jg     c000a46f <VAS::evict(unsigned long)+0x27>
c000a4ab:	c1 e7 0b             	shl    edi,0xb
c000a4ae:	83 ec 08             	sub    esp,0x8
c000a4b1:	55                   	push   ebp
c000a4b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4b6:	50                   	push   eax
c000a4b7:	e8 3c f4 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a4bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4be:	89 d1                	mov    ecx,edx
c000a4c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4c6:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4cc:	09 cf                	or     edi,ecx
c000a4ce:	89 38                	mov    DWORD PTR [eax],edi
c000a4d0:	89 14 24             	mov    DWORD PTR [esp],edx
c000a4d3:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4d9:	83 c1 01             	add    ecx,0x1
c000a4dc:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a4e2:	e8 86 d8 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c000a4e7:	0f 20 d8             	mov    eax,cr3
c000a4ea:	0f 22 d8             	mov    cr3,eax
c000a4ed:	c7 44 24 40 41 00 02 c0 	mov    DWORD PTR [esp+0x40],0xc0020041
c000a4f5:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a4fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4fe:	8d 50 01             	lea    edx,[eax+0x1]
c000a501:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a507:	83 c4 2c             	add    esp,0x2c
c000a50a:	5b                   	pop    ebx
c000a50b:	5e                   	pop    esi
c000a50c:	5f                   	pop    edi
c000a50d:	5d                   	pop    ebp
c000a50e:	e9 5c 04 00 00       	jmp    c000a96f <Dbg::kprintf(char const*, ...)>
c000a513:	90                   	nop

c000a514 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a514:	55                   	push   ebp
c000a515:	57                   	push   edi
c000a516:	56                   	push   esi
c000a517:	53                   	push   ebx
c000a518:	83 ec 1c             	sub    esp,0x1c
c000a51b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a51f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a525:	77 54                	ja     c000a57b <VAS::tryLoadBackOffDisk(unsigned long)+0x67>
c000a527:	83 ec 08             	sub    esp,0x8
c000a52a:	53                   	push   ebx
c000a52b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a531:	68 64 00 02 c0       	push   0xc0020064
c000a536:	e8 34 04 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000a53b:	58                   	pop    eax
c000a53c:	5a                   	pop    edx
c000a53d:	53                   	push   ebx
c000a53e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a542:	51                   	push   ecx
c000a543:	e8 b0 f3 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a548:	83 c4 10             	add    esp,0x10
c000a54b:	85 c0                	test   eax,eax
c000a54d:	89 c6                	mov    esi,eax
c000a54f:	0f 95 c0             	setne  al
c000a552:	85 db                	test   ebx,ebx
c000a554:	0f 95 c2             	setne  dl
c000a557:	21 d0                	and    eax,edx
c000a559:	a8 01                	test   al,0x1
c000a55b:	89 c5                	mov    ebp,eax
c000a55d:	75 0a                	jne    c000a569 <VAS::tryLoadBackOffDisk(unsigned long)+0x55>
c000a55f:	83 c4 1c             	add    esp,0x1c
c000a562:	89 e8                	mov    eax,ebp
c000a564:	5b                   	pop    ebx
c000a565:	5e                   	pop    esi
c000a566:	5f                   	pop    edi
c000a567:	5d                   	pop    ebp
c000a568:	c3                   	ret    
c000a569:	8b 06                	mov    eax,DWORD PTR [esi]
c000a56b:	a8 01                	test   al,0x1
c000a56d:	74 1e                	je     c000a58d <VAS::tryLoadBackOffDisk(unsigned long)+0x79>
c000a56f:	83 c4 1c             	add    esp,0x1c
c000a572:	31 ed                	xor    ebp,ebp
c000a574:	5b                   	pop    ebx
c000a575:	89 e8                	mov    eax,ebp
c000a577:	5e                   	pop    esi
c000a578:	5f                   	pop    edi
c000a579:	5d                   	pop    ebp
c000a57a:	c3                   	ret    
c000a57b:	83 ec 0c             	sub    esp,0xc
c000a57e:	68 52 00 02 c0       	push   0xc0020052
c000a583:	e8 b1 62 00 00       	call   c0010839 <KePanic(char const*)>
c000a588:	83 c4 10             	add    esp,0x10
c000a58b:	eb 9a                	jmp    c000a527 <VAS::tryLoadBackOffDisk(unsigned long)+0x13>
c000a58d:	c1 e8 0b             	shr    eax,0xb
c000a590:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a594:	e8 3d d8 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a599:	8b 16                	mov    edx,DWORD PTR [esi]
c000a59b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5a1:	09 c2                	or     edx,eax
c000a5a3:	81 ca 01 08 00 00    	or     edx,0x801
c000a5a9:	89 16                	mov    DWORD PTR [esi],edx
c000a5ab:	a1 2c 1f 02 c0       	mov    eax,ds:0xc0021f2c
c000a5b0:	85 c0                	test   eax,eax
c000a5b2:	7e 44                	jle    c000a5f8 <VAS::tryLoadBackOffDisk(unsigned long)+0xe4>
c000a5b4:	89 df                	mov    edi,ebx
c000a5b6:	31 f6                	xor    esi,esi
c000a5b8:	83 ec 0c             	sub    esp,0xc
c000a5bb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a5bf:	51                   	push   ecx
c000a5c0:	e8 7f f1 ff ff       	call   c0009744 <Virt::swapIDToSector(unsigned long)>
c000a5c5:	31 d2                	xor    edx,edx
c000a5c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ca:	81 c7 00 02 00 00    	add    edi,0x200
c000a5d0:	6a 01                	push   0x1
c000a5d2:	52                   	push   edx
c000a5d3:	01 f0                	add    eax,esi
c000a5d5:	83 c6 01             	add    esi,0x1
c000a5d8:	50                   	push   eax
c000a5d9:	0f be 05 38 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021f38
c000a5e0:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5e7:	50                   	push   eax
c000a5e8:	e8 cd 2b 00 00       	call   c000d1ba <LogicalDisk::read(unsigned long long, int, void*)>
c000a5ed:	83 c4 20             	add    esp,0x20
c000a5f0:	39 35 2c 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f2c,esi
c000a5f6:	7f c0                	jg     c000a5b8 <VAS::tryLoadBackOffDisk(unsigned long)+0xa4>
c000a5f8:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a5fd:	83 ec 04             	sub    esp,0x4
c000a600:	83 e8 01             	sub    eax,0x1
c000a603:	50                   	push   eax
c000a604:	53                   	push   ebx
c000a605:	68 77 00 02 c0       	push   0xc0020077
c000a60a:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a60f:	e8 5b 03 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000a614:	58                   	pop    eax
c000a615:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a619:	52                   	push   edx
c000a61a:	e8 02 f1 ff ff       	call   c0009721 <Virt::freeSwapfilePage(unsigned long)>
c000a61f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a624:	83 c4 10             	add    esp,0x10
c000a627:	83 e8 01             	sub    eax,0x1
c000a62a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a62f:	85 c0                	test   eax,eax
c000a631:	75 01                	jne    c000a634 <VAS::tryLoadBackOffDisk(unsigned long)+0x120>
c000a633:	fb                   	sti    
c000a634:	0f 20 d8             	mov    eax,cr3
c000a637:	0f 22 d8             	mov    cr3,eax
c000a63a:	e9 20 ff ff ff       	jmp    c000a55f <VAS::tryLoadBackOffDisk(unsigned long)+0x4b>
c000a63f:	90                   	nop

c000a640 <VAS::scanForEviction()>:
c000a640:	57                   	push   edi
c000a641:	31 ff                	xor    edi,edi
c000a643:	56                   	push   esi
c000a644:	53                   	push   ebx
c000a645:	83 ec 10             	sub    esp,0x10
c000a648:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a64c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a64f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a655:	75 0e                	jne    c000a665 <VAS::scanForEviction()+0x25>
c000a657:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a65a:	89 da                	mov    edx,ebx
c000a65c:	c1 ea 16             	shr    edx,0x16
c000a65f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a663:	74 50                	je     c000a6b5 <VAS::scanForEviction()+0x75>
c000a665:	53                   	push   ebx
c000a666:	56                   	push   esi
c000a667:	e8 8c f2 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c000a66c:	5a                   	pop    edx
c000a66d:	59                   	pop    ecx
c000a66e:	8b 10                	mov    edx,DWORD PTR [eax]
c000a670:	89 d1                	mov    ecx,edx
c000a672:	81 e1 01 08 00 00    	and    ecx,0x801
c000a678:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a67e:	74 40                	je     c000a6c0 <VAS::scanForEviction()+0x80>
c000a680:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a686:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a68c:	76 2d                	jbe    c000a6bb <VAS::scanForEviction()+0x7b>
c000a68e:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a695:	83 c7 01             	add    edi,0x1
c000a698:	83 ff 03             	cmp    edi,0x3
c000a69b:	74 32                	je     c000a6cf <VAS::scanForEviction()+0x8f>
c000a69d:	31 db                	xor    ebx,ebx
c000a69f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6a5:	75 be                	jne    c000a665 <VAS::scanForEviction()+0x25>
c000a6a7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a6aa:	89 da                	mov    edx,ebx
c000a6ac:	c1 ea 16             	shr    edx,0x16
c000a6af:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6b3:	75 b0                	jne    c000a665 <VAS::scanForEviction()+0x25>
c000a6b5:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6bb:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6be:	eb 8f                	jmp    c000a64f <VAS::scanForEviction()+0xf>
c000a6c0:	f6 c2 20             	test   dl,0x20
c000a6c3:	74 13                	je     c000a6d8 <VAS::scanForEviction()+0x98>
c000a6c5:	83 e2 df             	and    edx,0xffffffdf
c000a6c8:	89 10                	mov    DWORD PTR [eax],edx
c000a6ca:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6cd:	eb b1                	jmp    c000a680 <VAS::scanForEviction()+0x40>
c000a6cf:	83 c4 10             	add    esp,0x10
c000a6d2:	31 c0                	xor    eax,eax
c000a6d4:	5b                   	pop    ebx
c000a6d5:	5e                   	pop    esi
c000a6d6:	5f                   	pop    edi
c000a6d7:	c3                   	ret    
c000a6d8:	89 d0                	mov    eax,edx
c000a6da:	83 ec 08             	sub    esp,0x8
c000a6dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6e6:	53                   	push   ebx
c000a6e7:	68 8c 00 02 c0       	push   0xc002008c
c000a6ec:	e8 7e 02 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000a6f1:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6f4:	58                   	pop    eax
c000a6f5:	5a                   	pop    edx
c000a6f6:	51                   	push   ecx
c000a6f7:	56                   	push   esi
c000a6f8:	e8 4b fd ff ff       	call   c000a448 <VAS::evict(unsigned long)>
c000a6fd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a700:	5b                   	pop    ebx
c000a701:	5f                   	pop    edi
c000a702:	50                   	push   eax
c000a703:	68 a0 00 02 c0       	push   0xc00200a0
c000a708:	e8 62 02 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000a70d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a710:	83 c4 10             	add    esp,0x10
c000a713:	05 00 10 00 00       	add    eax,0x1000
c000a718:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a71b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a71f:	83 c4 10             	add    esp,0x10
c000a722:	5b                   	pop    ebx
c000a723:	5e                   	pop    esi
c000a724:	5f                   	pop    edi
c000a725:	c3                   	ret    

c000a726 <mapVASFirstTime>:
c000a726:	55                   	push   ebp
c000a727:	57                   	push   edi
c000a728:	56                   	push   esi
c000a729:	53                   	push   ebx
c000a72a:	83 ec 0c             	sub    esp,0xc
c000a72d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a732:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a735:	83 fa 01             	cmp    edx,0x1
c000a738:	0f 84 cb 00 00 00    	je     c000a809 <mapVASFirstTime+0xe3>
c000a73e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a741:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a746:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a74b:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a74e:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a754:	c1 e5 15             	shl    ebp,0x15
c000a757:	29 eb                	sub    ebx,ebp
c000a759:	29 ef                	sub    edi,ebp
c000a75b:	e8 76 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a760:	83 ec 0c             	sub    esp,0xc
c000a763:	68 03 04 00 00       	push   0x403
c000a768:	6a 01                	push   0x1
c000a76a:	53                   	push   ebx
c000a76b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a771:	50                   	push   eax
c000a772:	56                   	push   esi
c000a773:	e8 86 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a778:	83 c4 20             	add    esp,0x20
c000a77b:	39 fb                	cmp    ebx,edi
c000a77d:	75 dc                	jne    c000a75b <mapVASFirstTime+0x35>
c000a77f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a784:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a789:	29 eb                	sub    ebx,ebp
c000a78b:	29 ef                	sub    edi,ebp
c000a78d:	e8 44 d6 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c000a792:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a796:	83 fa 01             	cmp    edx,0x1
c000a799:	19 d2                	sbb    edx,edx
c000a79b:	83 ec 0c             	sub    esp,0xc
c000a79e:	83 e2 04             	and    edx,0x4
c000a7a1:	81 c2 03 04 00 00    	add    edx,0x403
c000a7a7:	52                   	push   edx
c000a7a8:	6a 01                	push   0x1
c000a7aa:	53                   	push   ebx
c000a7ab:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7b1:	50                   	push   eax
c000a7b2:	56                   	push   esi
c000a7b3:	e8 46 f8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7b8:	83 c4 20             	add    esp,0x20
c000a7bb:	39 df                	cmp    edi,ebx
c000a7bd:	75 ce                	jne    c000a78d <mapVASFirstTime+0x67>
c000a7bf:	83 ec 0c             	sub    esp,0xc
c000a7c2:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7c7:	6a 04                	push   0x4
c000a7c9:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7cf:	6a ff                	push   0xffffffff
c000a7d1:	c1 eb 0c             	shr    ebx,0xc
c000a7d4:	53                   	push   ebx
c000a7d5:	68 00 30 02 c0       	push   0xc0023000
c000a7da:	56                   	push   esi
c000a7db:	e8 88 f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7e0:	83 c4 14             	add    esp,0x14
c000a7e3:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7e8:	6a 04                	push   0x4
c000a7ea:	6a ff                	push   0xffffffff
c000a7ec:	53                   	push   ebx
c000a7ed:	68 00 30 02 c0       	push   0xc0023000
c000a7f2:	50                   	push   eax
c000a7f3:	e8 70 f2 ff ff       	call   c0009a68 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7f8:	0f 20 d8             	mov    eax,cr3
c000a7fb:	0f 22 d8             	mov    cr3,eax
c000a7fe:	83 c4 20             	add    esp,0x20
c000a801:	83 c4 0c             	add    esp,0xc
c000a804:	5b                   	pop    ebx
c000a805:	5e                   	pop    esi
c000a806:	5f                   	pop    edi
c000a807:	5d                   	pop    ebp
c000a808:	c3                   	ret    
c000a809:	83 ec 0c             	sub    esp,0xc
c000a80c:	68 b3 00 02 c0       	push   0xc00200b3
c000a811:	e8 59 01 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000a816:	83 c4 10             	add    esp,0x10
c000a819:	83 c4 0c             	add    esp,0xc
c000a81c:	5b                   	pop    ebx
c000a81d:	5e                   	pop    esi
c000a81e:	5f                   	pop    edi
c000a81f:	5d                   	pop    ebp
c000a820:	c3                   	ret    

c000a821 <__cxa_atexit>:
c000a821:	31 c0                	xor    eax,eax
c000a823:	c3                   	ret    

c000a824 <__cxa_finalize>:
c000a824:	c3                   	ret    

c000a825 <__stack_chk_fail>:
c000a825:	55                   	push   ebp
c000a826:	89 e5                	mov    ebp,esp
c000a828:	83 ec 10             	sub    esp,0x10
c000a82b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a82e:	68 cc 00 02 c0       	push   0xc00200cc
c000a833:	e8 37 01 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000a838:	58                   	pop    eax
c000a839:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a83c:	5a                   	pop    edx
c000a83d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a840:	68 cc 00 02 c0       	push   0xc00200cc
c000a845:	e8 25 01 00 00       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000a84a:	c7 04 24 d4 00 02 c0 	mov    DWORD PTR [esp],0xc00200d4
c000a851:	e8 e3 5f 00 00       	call   c0010839 <KePanic(char const*)>
c000a856:	83 c4 10             	add    esp,0x10
c000a859:	c9                   	leave  
c000a85a:	c3                   	ret    

c000a85b <__cxa_pure_virtual>:
c000a85b:	83 ec 18             	sub    esp,0x18
c000a85e:	68 ec 00 02 c0       	push   0xc00200ec
c000a863:	e8 d1 5f 00 00       	call   c0010839 <KePanic(char const*)>
c000a868:	83 c4 1c             	add    esp,0x1c
c000a86b:	c3                   	ret    

c000a86c <operator new[](unsigned long)>:
c000a86c:	e9 5a d2 ff ff       	jmp    c0007acb <malloc>

c000a871 <operator delete(void*, unsigned long)>:
c000a871:	e9 75 d2 ff ff       	jmp    c0007aeb <rfree>

c000a876 <operator delete[](void*)>:
c000a876:	e9 70 d2 ff ff       	jmp    c0007aeb <rfree>

c000a87b <operator delete[](void*, unsigned long)>:
c000a87b:	e9 6b d2 ff ff       	jmp    c0007aeb <rfree>

c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a880:	55                   	push   ebp
c000a881:	57                   	push   edi
c000a882:	56                   	push   esi
c000a883:	53                   	push   ebx
c000a884:	83 ec 20             	sub    esp,0x20
c000a887:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a88b:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a893:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a897:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a89f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a8a3:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a8ab:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a8b3:	89 f7                	mov    edi,esi
c000a8b5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a8ba:	89 eb                	mov    ebx,ebp
c000a8bc:	eb 02                	jmp    c000a8c0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a8be:	89 c7                	mov    edi,eax
c000a8c0:	31 d2                	xor    edx,edx
c000a8c2:	89 f8                	mov    eax,edi
c000a8c4:	f7 f1                	div    ecx
c000a8c6:	83 c3 01             	add    ebx,0x1
c000a8c9:	39 cf                	cmp    edi,ecx
c000a8cb:	73 f1                	jae    c000a8be <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a8cd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a8d0:	eb 02                	jmp    c000a8d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a8d2:	89 c6                	mov    esi,eax
c000a8d4:	31 d2                	xor    edx,edx
c000a8d6:	89 f0                	mov    eax,esi
c000a8d8:	f7 f1                	div    ecx
c000a8da:	83 eb 01             	sub    ebx,0x1
c000a8dd:	39 ce                	cmp    esi,ecx
c000a8df:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8e3:	88 13                	mov    BYTE PTR [ebx],dl
c000a8e5:	73 eb                	jae    c000a8d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8e7:	83 c4 20             	add    esp,0x20
c000a8ea:	89 e8                	mov    eax,ebp
c000a8ec:	5b                   	pop    ebx
c000a8ed:	5e                   	pop    esi
c000a8ee:	5f                   	pop    edi
c000a8ef:	5d                   	pop    ebp
c000a8f0:	c3                   	ret    

c000a8f1 <Dbg::logc(char)>:
c000a8f1:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a8f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8fc:	75 12                	jne    c000a910 <Dbg::logc(char)+0x1f>
c000a8fe:	ba fd 03 00 00       	mov    edx,0x3fd
c000a903:	ec                   	in     al,dx
c000a904:	a8 20                	test   al,0x20
c000a906:	74 fb                	je     c000a903 <Dbg::logc(char)+0x12>
c000a908:	ba f8 03 00 00       	mov    edx,0x3f8
c000a90d:	88 c8                	mov    al,cl
c000a90f:	ee                   	out    dx,al
c000a910:	c3                   	ret    

c000a911 <Dbg::logs(char*)>:
c000a911:	53                   	push   ebx
c000a912:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a916:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a919:	85 c0                	test   eax,eax
c000a91b:	74 11                	je     c000a92e <Dbg::logs(char*)+0x1d>
c000a91d:	50                   	push   eax
c000a91e:	83 c3 01             	add    ebx,0x1
c000a921:	e8 cb ff ff ff       	call   c000a8f1 <Dbg::logc(char)>
c000a926:	58                   	pop    eax
c000a927:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a92a:	85 c0                	test   eax,eax
c000a92c:	75 ef                	jne    c000a91d <Dbg::logs(char*)+0xc>
c000a92e:	5b                   	pop    ebx
c000a92f:	c3                   	ret    

c000a930 <Dbg::logWriteInt(unsigned int)>:
c000a930:	83 ec 10             	sub    esp,0x10
c000a933:	6a 0a                	push   0xa
c000a935:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a939:	50                   	push   eax
c000a93a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a93e:	50                   	push   eax
c000a93f:	e8 3c ff ff ff       	call   c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a944:	50                   	push   eax
c000a945:	e8 c7 ff ff ff       	call   c000a911 <Dbg::logs(char*)>
c000a94a:	83 c4 20             	add    esp,0x20
c000a94d:	c3                   	ret    

c000a94e <Dbg::logWriteIntBase(unsigned int, int)>:
c000a94e:	83 ec 10             	sub    esp,0x10
c000a951:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a955:	50                   	push   eax
c000a956:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a95a:	50                   	push   eax
c000a95b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a95f:	52                   	push   edx
c000a960:	e8 1b ff ff ff       	call   c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a965:	50                   	push   eax
c000a966:	e8 a6 ff ff ff       	call   c000a911 <Dbg::logs(char*)>
c000a96b:	83 c4 20             	add    esp,0x20
c000a96e:	c3                   	ret    

c000a96f <Dbg::kprintf(char const*, ...)>:
c000a96f:	55                   	push   ebp
c000a970:	57                   	push   edi
c000a971:	56                   	push   esi
c000a972:	53                   	push   ebx
c000a973:	83 ec 0c             	sub    esp,0xc
c000a976:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a97d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a981:	74 08                	je     c000a98b <Dbg::kprintf(char const*, ...)+0x1c>
c000a983:	83 c4 0c             	add    esp,0xc
c000a986:	5b                   	pop    ebx
c000a987:	5e                   	pop    esi
c000a988:	5f                   	pop    edi
c000a989:	5d                   	pop    ebp
c000a98a:	c3                   	ret    
c000a98b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a98f:	31 ff                	xor    edi,edi
c000a991:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a995:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a998:	85 c0                	test   eax,eax
c000a99a:	74 e7                	je     c000a983 <Dbg::kprintf(char const*, ...)+0x14>
c000a99c:	8d 77 01             	lea    esi,[edi+0x1]
c000a99f:	83 f8 25             	cmp    eax,0x25
c000a9a2:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9a5:	75 47                	jne    c000a9ee <Dbg::kprintf(char const*, ...)+0x7f>
c000a9a7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9aa:	83 c7 02             	add    edi,0x2
c000a9ad:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9b0:	83 e8 25             	sub    eax,0x25
c000a9b3:	0f b6 c0             	movzx  eax,al
c000a9b6:	83 f8 53             	cmp    eax,0x53
c000a9b9:	0f 87 ce 00 00 00    	ja     c000aa8d <Dbg::kprintf(char const*, ...)+0x11e>
c000a9bf:	ff 24 85 00 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff00]
c000a9c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9ca:	89 c8                	mov    eax,ecx
c000a9cc:	83 c1 04             	add    ecx,0x4
c000a9cf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d3:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9d5:	55                   	push   ebp
c000a9d6:	e8 55 ff ff ff       	call   c000a930 <Dbg::logWriteInt(unsigned int)>
c000a9db:	58                   	pop    eax
c000a9dc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9df:	85 c0                	test   eax,eax
c000a9e1:	74 a0                	je     c000a983 <Dbg::kprintf(char const*, ...)+0x14>
c000a9e3:	8d 77 01             	lea    esi,[edi+0x1]
c000a9e6:	83 f8 25             	cmp    eax,0x25
c000a9e9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9ec:	74 b9                	je     c000a9a7 <Dbg::kprintf(char const*, ...)+0x38>
c000a9ee:	50                   	push   eax
c000a9ef:	89 f7                	mov    edi,esi
c000a9f1:	e8 fb fe ff ff       	call   c000a8f1 <Dbg::logc(char)>
c000a9f6:	89 ee                	mov    esi,ebp
c000a9f8:	58                   	pop    eax
c000a9f9:	eb e1                	jmp    c000a9dc <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9ff:	89 c8                	mov    eax,ecx
c000aa01:	83 c1 04             	add    ecx,0x4
c000aa04:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa08:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0a:	50                   	push   eax
c000aa0b:	e8 01 ff ff ff       	call   c000a911 <Dbg::logs(char*)>
c000aa10:	58                   	pop    eax
c000aa11:	eb c9                	jmp    c000a9dc <Dbg::kprintf(char const*, ...)+0x6d>
c000aa13:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa17:	89 d0                	mov    eax,edx
c000aa19:	83 c2 04             	add    edx,0x4
c000aa1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa20:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa22:	50                   	push   eax
c000aa23:	e8 08 ff ff ff       	call   c000a930 <Dbg::logWriteInt(unsigned int)>
c000aa28:	58                   	pop    eax
c000aa29:	eb b1                	jmp    c000a9dc <Dbg::kprintf(char const*, ...)+0x6d>
c000aa2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa2f:	89 d0                	mov    eax,edx
c000aa31:	83 c2 04             	add    edx,0x4
c000aa34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa38:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa3b:	50                   	push   eax
c000aa3c:	e8 b0 fe ff ff       	call   c000a8f1 <Dbg::logc(char)>
c000aa41:	58                   	pop    eax
c000aa42:	eb 98                	jmp    c000a9dc <Dbg::kprintf(char const*, ...)+0x6d>
c000aa44:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa48:	89 c8                	mov    eax,ecx
c000aa4a:	83 c1 04             	add    ecx,0x4
c000aa4d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa51:	6a 10                	push   0x10
c000aa53:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa55:	51                   	push   ecx
c000aa56:	e8 f3 fe ff ff       	call   c000a94e <Dbg::logWriteIntBase(unsigned int, int)>
c000aa5b:	5d                   	pop    ebp
c000aa5c:	58                   	pop    eax
c000aa5d:	e9 7a ff ff ff       	jmp    c000a9dc <Dbg::kprintf(char const*, ...)+0x6d>
c000aa62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa66:	89 d0                	mov    eax,edx
c000aa68:	83 c2 08             	add    edx,0x8
c000aa6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa6f:	6a 10                	push   0x10
c000aa71:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa73:	50                   	push   eax
c000aa74:	e8 d5 fe ff ff       	call   c000a94e <Dbg::logWriteIntBase(unsigned int, int)>
c000aa79:	58                   	pop    eax
c000aa7a:	5a                   	pop    edx
c000aa7b:	e9 5c ff ff ff       	jmp    c000a9dc <Dbg::kprintf(char const*, ...)+0x6d>
c000aa80:	6a 25                	push   0x25
c000aa82:	e8 6a fe ff ff       	call   c000a8f1 <Dbg::logc(char)>
c000aa87:	5a                   	pop    edx
c000aa88:	e9 4f ff ff ff       	jmp    c000a9dc <Dbg::kprintf(char const*, ...)+0x6d>
c000aa8d:	6a 25                	push   0x25
c000aa8f:	e8 5d fe ff ff       	call   c000a8f1 <Dbg::logc(char)>
c000aa94:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa98:	50                   	push   eax
c000aa99:	e8 53 fe ff ff       	call   c000a8f1 <Dbg::logc(char)>
c000aa9e:	5a                   	pop    edx
c000aa9f:	59                   	pop    ecx
c000aaa0:	e9 37 ff ff ff       	jmp    c000a9dc <Dbg::kprintf(char const*, ...)+0x6d>
c000aaa5:	90                   	nop

c000aaa6 <File::read(unsigned long long, void*, int*)>:
c000aaa6:	53                   	push   ebx
c000aaa7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aaab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aaaf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aab6:	83 f8 19             	cmp    eax,0x19
c000aab9:	77 35                	ja     c000aaf0 <File::read(unsigned long long, void*, int*)+0x4a>
c000aabb:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aac2:	85 c0                	test   eax,eax
c000aac4:	74 2a                	je     c000aaf0 <File::read(unsigned long long, void*, int*)+0x4a>
c000aac6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aacc:	85 c0                	test   eax,eax
c000aace:	74 20                	je     c000aaf0 <File::read(unsigned long long, void*, int*)+0x4a>
c000aad0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aad4:	74 21                	je     c000aaf7 <File::read(unsigned long long, void*, int*)+0x51>
c000aad6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aad8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aadc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aae2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaea:	5b                   	pop    ebx
c000aaeb:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000aaee:	ff e0                	jmp    eax
c000aaf0:	b8 0b 00 00 00       	mov    eax,0xb
c000aaf5:	eb 05                	jmp    c000aafc <File::read(unsigned long long, void*, int*)+0x56>
c000aaf7:	b8 05 00 00 00       	mov    eax,0x5
c000aafc:	5b                   	pop    ebx
c000aafd:	c3                   	ret    

c000aafe <File::write(unsigned long long, void*, int*)>:
c000aafe:	53                   	push   ebx
c000aaff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab07:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab0e:	83 f8 19             	cmp    eax,0x19
c000ab11:	77 35                	ja     c000ab48 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab13:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab1a:	85 c0                	test   eax,eax
c000ab1c:	74 2a                	je     c000ab48 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab1e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab24:	85 c0                	test   eax,eax
c000ab26:	74 20                	je     c000ab48 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab28:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab2c:	74 21                	je     c000ab4f <File::write(unsigned long long, void*, int*)+0x51>
c000ab2e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab30:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab34:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab42:	5b                   	pop    ebx
c000ab43:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab46:	ff e0                	jmp    eax
c000ab48:	b8 0b 00 00 00       	mov    eax,0xb
c000ab4d:	eb 05                	jmp    c000ab54 <File::write(unsigned long long, void*, int*)+0x56>
c000ab4f:	b8 05 00 00 00       	mov    eax,0x5
c000ab54:	5b                   	pop    ebx
c000ab55:	c3                   	ret    

c000ab56 <Directory::read(unsigned long long, void*, int*)>:
c000ab56:	53                   	push   ebx
c000ab57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab5b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab5f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab66:	83 f8 19             	cmp    eax,0x19
c000ab69:	77 35                	ja     c000aba0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab6b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab72:	85 c0                	test   eax,eax
c000ab74:	74 2a                	je     c000aba0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab76:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab7c:	85 c0                	test   eax,eax
c000ab7e:	74 20                	je     c000aba0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab84:	74 21                	je     c000aba7 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ab86:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab88:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab8c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab9a:	5b                   	pop    ebx
c000ab9b:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ab9e:	ff e0                	jmp    eax
c000aba0:	b8 0b 00 00 00       	mov    eax,0xb
c000aba5:	eb 05                	jmp    c000abac <Directory::read(unsigned long long, void*, int*)+0x56>
c000aba7:	b8 05 00 00 00       	mov    eax,0x5
c000abac:	5b                   	pop    ebx
c000abad:	c3                   	ret    

c000abae <Directory::write(unsigned long long, void*, int*)>:
c000abae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abb2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000abb9:	b8 0b 00 00 00       	mov    eax,0xb
c000abbe:	83 fa 19             	cmp    edx,0x19
c000abc1:	77 18                	ja     c000abdb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abc3:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000abca:	85 d2                	test   edx,edx
c000abcc:	74 0d                	je     c000abdb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abce:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000abd5:	19 c0                	sbb    eax,eax
c000abd7:	83 e0 0a             	and    eax,0xa
c000abda:	40                   	inc    eax
c000abdb:	c3                   	ret    

c000abdc <File::isAtty()>:
c000abdc:	31 c0                	xor    eax,eax
c000abde:	c3                   	ret    
c000abdf:	90                   	nop

c000abe0 <Directory::isAtty()>:
c000abe0:	31 c0                	xor    eax,eax
c000abe2:	c3                   	ret    
c000abe3:	90                   	nop

c000abe4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000abe4:	b8 0a 00 00 00       	mov    eax,0xa
c000abe9:	c3                   	ret    

c000abea <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000abea:	b8 0a 00 00 00       	mov    eax,0xa
c000abef:	c3                   	ret    

c000abf0 <Filesystem::allocateSwapfile(char const*, int)>:
c000abf0:	31 c0                	xor    eax,eax
c000abf2:	31 d2                	xor    edx,edx
c000abf4:	c3                   	ret    
c000abf5:	90                   	nop

c000abf6 <File::~File()>:
c000abf6:	83 ec 0c             	sub    esp,0xc
c000abf9:	ba c0 02 02 c0       	mov    edx,0xc00202c0
c000abfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac02:	89 10                	mov    DWORD PTR [eax],edx
c000ac04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac08:	83 ec 0c             	sub    esp,0xc
c000ac0b:	50                   	push   eax
c000ac0c:	e8 8b e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac11:	83 c4 10             	add    esp,0x10
c000ac14:	90                   	nop
c000ac15:	83 c4 0c             	add    esp,0xc
c000ac18:	c3                   	ret    
c000ac19:	90                   	nop

c000ac1a <File::~File()>:
c000ac1a:	83 ec 0c             	sub    esp,0xc
c000ac1d:	83 ec 0c             	sub    esp,0xc
c000ac20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac24:	e8 cd ff ff ff       	call   c000abf6 <File::~File()>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	83 ec 08             	sub    esp,0x8
c000ac2f:	68 14 01 00 00       	push   0x114
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	e8 34 fc ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	83 c4 0c             	add    esp,0xc
c000ac43:	c3                   	ret    

c000ac44 <Directory::~Directory()>:
c000ac44:	83 ec 0c             	sub    esp,0xc
c000ac47:	ba dc 02 02 c0       	mov    edx,0xc00202dc
c000ac4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac50:	89 10                	mov    DWORD PTR [eax],edx
c000ac52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac56:	83 ec 0c             	sub    esp,0xc
c000ac59:	50                   	push   eax
c000ac5a:	e8 3d e7 ff ff       	call   c000939c <UnixFile::~UnixFile()>
c000ac5f:	83 c4 10             	add    esp,0x10
c000ac62:	90                   	nop
c000ac63:	83 c4 0c             	add    esp,0xc
c000ac66:	c3                   	ret    
c000ac67:	90                   	nop

c000ac68 <Directory::~Directory()>:
c000ac68:	83 ec 0c             	sub    esp,0xc
c000ac6b:	83 ec 0c             	sub    esp,0xc
c000ac6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac72:	e8 cd ff ff ff       	call   c000ac44 <Directory::~Directory()>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	83 ec 08             	sub    esp,0x8
c000ac7d:	68 14 01 00 00       	push   0x114
c000ac82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac86:	e8 e6 fb ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000ac8b:	83 c4 10             	add    esp,0x10
c000ac8e:	83 c4 0c             	add    esp,0xc
c000ac91:	c3                   	ret    

c000ac92 <Filesystem::Filesystem()>:
c000ac92:	ba 58 02 02 c0       	mov    edx,0xc0020258
c000ac97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac9b:	89 10                	mov    DWORD PTR [eax],edx
c000ac9d:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000aca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000acaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acae:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000acb3:	90                   	nop
c000acb4:	c3                   	ret    
c000acb5:	90                   	nop

c000acb6 <Filesystem::~Filesystem()>:
c000acb6:	ba 58 02 02 c0       	mov    edx,0xc0020258
c000acbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acbf:	89 10                	mov    DWORD PTR [eax],edx
c000acc1:	90                   	nop
c000acc2:	c3                   	ret    
c000acc3:	90                   	nop

c000acc4 <Filesystem::~Filesystem()>:
c000acc4:	83 ec 0c             	sub    esp,0xc
c000acc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000accb:	e8 e6 ff ff ff       	call   c000acb6 <Filesystem::~Filesystem()>
c000acd0:	83 c4 04             	add    esp,0x4
c000acd3:	83 ec 08             	sub    esp,0x8
c000acd6:	6a 08                	push   0x8
c000acd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acdc:	e8 90 fb ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000ace1:	83 c4 10             	add    esp,0x10
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <Fs::getcwd(Process*, char*, int)>:
c000ace8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acec:	31 c0                	xor    eax,eax
c000acee:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000acf2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000acf5:	7d 15                	jge    c000ad0c <Fs::getcwd(Process*, char*, int)+0x24>
c000acf7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acfb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad02:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad05:	84 c9                	test   cl,cl
c000ad07:	74 06                	je     c000ad0f <Fs::getcwd(Process*, char*, int)+0x27>
c000ad09:	40                   	inc    eax
c000ad0a:	eb e2                	jmp    c000acee <Fs::getcwd(Process*, char*, int)+0x6>
c000ad0c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad0f:	31 c0                	xor    eax,eax
c000ad11:	c3                   	ret    

c000ad12 <Fs::initVFS()>:
c000ad12:	83 ec 18             	sub    esp,0x18
c000ad15:	6a 08                	push   0x8
c000ad17:	e8 af cd ff ff       	call   c0007acb <malloc>
c000ad1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad1f:	e8 a0 dd 00 00       	call   c0018ac4 <FAT::FAT()>
c000ad24:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad2b:	e8 9b cd ff ff       	call   c0007acb <malloc>
c000ad30:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad33:	e8 b4 ec 00 00       	call   c00199ec <ISO9660::ISO9660()>
c000ad38:	83 c4 1c             	add    esp,0x1c
c000ad3b:	c3                   	ret    

c000ad3c <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad3c:	55                   	push   ebp
c000ad3d:	57                   	push   edi
c000ad3e:	56                   	push   esi
c000ad3f:	53                   	push   ebx
c000ad40:	81 ec 20 04 00 00    	sub    esp,0x420
c000ad46:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000ad4d:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000ad54:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000ad5b:	68 00 04 00 00       	push   0x400
c000ad60:	6a 00                	push   0x0
c000ad62:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ad66:	56                   	push   esi
c000ad67:	e8 84 57 ff ff       	call   c00004f0 <memset>
c000ad6c:	83 c4 10             	add    esp,0x10
c000ad6f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad73:	75 0b                	jne    c000ad80 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad75:	50                   	push   eax
c000ad76:	50                   	push   eax
c000ad77:	57                   	push   edi
c000ad78:	56                   	push   esi
c000ad79:	e8 d2 58 ff ff       	call   c0000650 <strcpy>
c000ad7e:	eb 45                	jmp    c000adc5 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000ad80:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad83:	83 f8 2f             	cmp    eax,0x2f
c000ad86:	74 05                	je     c000ad8d <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ad88:	83 f8 5c             	cmp    eax,0x5c
c000ad8b:	75 19                	jne    c000ada6 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000ad8d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ad90:	3c 60                	cmp    al,0x60
c000ad92:	7e 03                	jle    c000ad97 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ad94:	83 e8 20             	sub    eax,0x20
c000ad97:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000ad9b:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000ada2:	50                   	push   eax
c000ada3:	50                   	push   eax
c000ada4:	eb 18                	jmp    c000adbe <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000ada6:	50                   	push   eax
c000ada7:	50                   	push   eax
c000ada8:	55                   	push   ebp
c000ada9:	56                   	push   esi
c000adaa:	e8 a1 58 ff ff       	call   c0000650 <strcpy>
c000adaf:	5a                   	pop    edx
c000adb0:	59                   	pop    ecx
c000adb1:	68 d3 11 02 c0       	push   0xc00211d3
c000adb6:	56                   	push   esi
c000adb7:	e8 b4 5a ff ff       	call   c0000870 <strcat>
c000adbc:	5d                   	pop    ebp
c000adbd:	58                   	pop    eax
c000adbe:	57                   	push   edi
c000adbf:	56                   	push   esi
c000adc0:	e8 ab 5a ff ff       	call   c0000870 <strcat>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000adcc:	3c 60                	cmp    al,0x60
c000adce:	7e 03                	jle    c000add3 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000add0:	83 e8 20             	sub    eax,0x20
c000add3:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000add7:	88 03                	mov    BYTE PTR [ebx],al
c000add9:	b8 03 00 00 00       	mov    eax,0x3
c000adde:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000ade5:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000adeb:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000adef:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000adf7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000adfb:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000ae00:	89 fa                	mov    edx,edi
c000ae02:	0f be ea             	movsx  ebp,dl
c000ae05:	85 ed                	test   ebp,ebp
c000ae07:	0f 84 af 00 00 00    	je     c000aebc <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000ae0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae11:	42                   	inc    edx
c000ae12:	83 fd 2f             	cmp    ebp,0x2f
c000ae15:	74 05                	je     c000ae1c <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000ae17:	83 fd 5c             	cmp    ebp,0x5c
c000ae1a:	75 14                	jne    c000ae30 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae1c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae21:	89 c5                	mov    ebp,eax
c000ae23:	74 0b                	je     c000ae30 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ae25:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae29:	40                   	inc    eax
c000ae2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae2e:	eb c7                	jmp    c000adf7 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000ae30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae34:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000ae39:	89 f9                	mov    ecx,edi
c000ae3b:	0f be e9             	movsx  ebp,cl
c000ae3e:	75 63                	jne    c000aea3 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae40:	83 fd 2e             	cmp    ebp,0x2e
c000ae43:	75 5e                	jne    c000aea3 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ae45:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ae49:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000ae4e:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000ae53:	74 18                	je     c000ae6d <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000ae55:	83 fd 2e             	cmp    ebp,0x2e
c000ae58:	74 57                	je     c000aeb1 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae5a:	89 ca                	mov    edx,ecx
c000ae5c:	42                   	inc    edx
c000ae5d:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae61:	83 f9 2f             	cmp    ecx,0x2f
c000ae64:	74 f6                	je     c000ae5c <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae66:	83 f9 5c             	cmp    ecx,0x5c
c000ae69:	74 f1                	je     c000ae5c <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ae6b:	eb bd                	jmp    c000ae2a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae6d:	83 fd 2e             	cmp    ebp,0x2e
c000ae70:	74 3f                	je     c000aeb1 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ae72:	83 f8 03             	cmp    eax,0x3
c000ae75:	74 b3                	je     c000ae2a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ae77:	42                   	inc    edx
c000ae78:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ae7c:	83 f9 2f             	cmp    ecx,0x2f
c000ae7f:	74 f6                	je     c000ae77 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae81:	83 f9 5c             	cmp    ecx,0x5c
c000ae84:	74 f1                	je     c000ae77 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae86:	48                   	dec    eax
c000ae87:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae8b:	75 06                	jne    c000ae93 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000ae8d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae91:	eb f3                	jmp    c000ae86 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae93:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae97:	74 07                	je     c000aea0 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000ae99:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae9d:	48                   	dec    eax
c000ae9e:	eb f3                	jmp    c000ae93 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000aea0:	40                   	inc    eax
c000aea1:	eb 87                	jmp    c000ae2a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aea3:	83 fd 2f             	cmp    ebp,0x2f
c000aea6:	74 82                	je     c000ae2a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aea8:	83 fd 5c             	cmp    ebp,0x5c
c000aeab:	0f 84 79 ff ff ff    	je     c000ae2a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aeb1:	89 f9                	mov    ecx,edi
c000aeb3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000aeb6:	40                   	inc    eax
c000aeb7:	e9 6e ff ff ff       	jmp    c000ae2a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000aebc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aec0:	83 ec 0c             	sub    esp,0xc
c000aec3:	53                   	push   ebx
c000aec4:	e8 b7 56 ff ff       	call   c0000580 <strlen>
c000aec9:	83 c4 10             	add    esp,0x10
c000aecc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aed1:	75 26                	jne    c000aef9 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000aed3:	83 ec 0c             	sub    esp,0xc
c000aed6:	53                   	push   ebx
c000aed7:	e8 a4 56 ff ff       	call   c0000580 <strlen>
c000aedc:	83 c4 10             	add    esp,0x10
c000aedf:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aee4:	74 26                	je     c000af0c <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000aee6:	83 ec 0c             	sub    esp,0xc
c000aee9:	53                   	push   ebx
c000aeea:	e8 91 56 ff ff       	call   c0000580 <strlen>
c000aeef:	83 c4 10             	add    esp,0x10
c000aef2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aef7:	eb c7                	jmp    c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000aef9:	83 ec 0c             	sub    esp,0xc
c000aefc:	53                   	push   ebx
c000aefd:	e8 7e 56 ff ff       	call   c0000580 <strlen>
c000af02:	83 c4 10             	add    esp,0x10
c000af05:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af0a:	74 c7                	je     c000aed3 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000af0c:	81 c4 1c 04 00 00    	add    esp,0x41c
c000af12:	5b                   	pop    ebx
c000af13:	5e                   	pop    esi
c000af14:	5f                   	pop    edi
c000af15:	5d                   	pop    ebp
c000af16:	c3                   	ret    
c000af17:	90                   	nop

c000af18 <File::File(char const*, Process*)>:
c000af18:	83 ec 0c             	sub    esp,0xc
c000af1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1f:	83 ec 08             	sub    esp,0x8
c000af22:	6a 00                	push   0x0
c000af24:	50                   	push   eax
c000af25:	e8 8c e2 ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000af2a:	83 c4 10             	add    esp,0x10
c000af2d:	ba c0 02 02 c0       	mov    edx,0xc00202c0
c000af32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af36:	89 10                	mov    DWORD PTR [eax],edx
c000af38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af3c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af46:	83 c0 0d             	add    eax,0xd
c000af49:	83 ec 04             	sub    esp,0x4
c000af4c:	52                   	push   edx
c000af4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af51:	50                   	push   eax
c000af52:	e8 e5 fd ff ff       	call   c000ad3c <Fs::standardiseFiles(char*, char const*, char const*)>
c000af57:	83 c4 10             	add    esp,0x10
c000af5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af61:	83 e8 41             	sub    eax,0x41
c000af64:	88 c2                	mov    dl,al
c000af66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af74:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af82:	0f b6 c0             	movzx  eax,al
c000af85:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af8c:	85 c0                	test   eax,eax
c000af8e:	74 3e                	je     c000afce <File::File(char const*, Process*)+0xb6>
c000af90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af94:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af9a:	0f b6 c0             	movzx  eax,al
c000af9d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afa4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000afaa:	85 c0                	test   eax,eax
c000afac:	75 20                	jne    c000afce <File::File(char const*, Process*)+0xb6>
c000afae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afb8:	0f b6 c0             	movzx  eax,al
c000afbb:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	50                   	push   eax
c000afc6:	e8 2d 21 00 00       	call   c000d0f8 <LogicalDisk::mount()>
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	90                   	nop
c000afcf:	83 c4 0c             	add    esp,0xc
c000afd2:	c3                   	ret    
c000afd3:	90                   	nop

c000afd4 <File::open(FileOpenMode)>:
c000afd4:	53                   	push   ebx
c000afd5:	b8 0b 00 00 00       	mov    eax,0xb
c000afda:	83 ec 08             	sub    esp,0x8
c000afdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afe1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afe8:	83 fa 19             	cmp    edx,0x19
c000afeb:	77 40                	ja     c000b02d <File::open(FileOpenMode)+0x59>
c000afed:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000aff4:	85 d2                	test   edx,edx
c000aff6:	74 35                	je     c000b02d <File::open(FileOpenMode)+0x59>
c000aff8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000affe:	85 d2                	test   edx,edx
c000b000:	74 2b                	je     c000b02d <File::open(FileOpenMode)+0x59>
c000b002:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b006:	b8 06 00 00 00       	mov    eax,0x6
c000b00b:	75 20                	jne    c000b02d <File::open(FileOpenMode)+0x59>
c000b00d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b00f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b015:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b019:	51                   	push   ecx
c000b01a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b01d:	51                   	push   ecx
c000b01e:	52                   	push   edx
c000b01f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b022:	83 c4 10             	add    esp,0x10
c000b025:	85 c0                	test   eax,eax
c000b027:	75 04                	jne    c000b02d <File::open(FileOpenMode)+0x59>
c000b029:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b02d:	83 c4 08             	add    esp,0x8
c000b030:	5b                   	pop    ebx
c000b031:	c3                   	ret    

c000b032 <File::close()>:
c000b032:	53                   	push   ebx
c000b033:	b8 0b 00 00 00       	mov    eax,0xb
c000b038:	83 ec 08             	sub    esp,0x8
c000b03b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b03f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b046:	83 f9 19             	cmp    ecx,0x19
c000b049:	77 41                	ja     c000b08c <File::close()+0x5a>
c000b04b:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b052:	85 db                	test   ebx,ebx
c000b054:	74 36                	je     c000b08c <File::close()+0x5a>
c000b056:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b05d:	74 2d                	je     c000b08c <File::close()+0x5a>
c000b05f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b063:	b8 05 00 00 00       	mov    eax,0x5
c000b068:	74 22                	je     c000b08c <File::close()+0x5a>
c000b06a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b06e:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b075:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b07b:	53                   	push   ebx
c000b07c:	53                   	push   ebx
c000b07d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b07f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b085:	50                   	push   eax
c000b086:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	83 c4 08             	add    esp,0x8
c000b08f:	5b                   	pop    ebx
c000b090:	c3                   	ret    
c000b091:	90                   	nop

c000b092 <File::seek(unsigned long long)>:
c000b092:	56                   	push   esi
c000b093:	b8 0b 00 00 00       	mov    eax,0xb
c000b098:	53                   	push   ebx
c000b099:	51                   	push   ecx
c000b09a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b09e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b0a6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b0ad:	83 fa 19             	cmp    edx,0x19
c000b0b0:	77 31                	ja     c000b0e3 <File::seek(unsigned long long)+0x51>
c000b0b2:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0b9:	85 d2                	test   edx,edx
c000b0bb:	74 26                	je     c000b0e3 <File::seek(unsigned long long)+0x51>
c000b0bd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0c3:	85 d2                	test   edx,edx
c000b0c5:	74 1c                	je     c000b0e3 <File::seek(unsigned long long)+0x51>
c000b0c7:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b0cb:	b8 05 00 00 00       	mov    eax,0x5
c000b0d0:	74 11                	je     c000b0e3 <File::seek(unsigned long long)+0x51>
c000b0d2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0d4:	53                   	push   ebx
c000b0d5:	51                   	push   ecx
c000b0d6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b0dc:	52                   	push   edx
c000b0dd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b0e0:	83 c4 10             	add    esp,0x10
c000b0e3:	5a                   	pop    edx
c000b0e4:	5b                   	pop    ebx
c000b0e5:	5e                   	pop    esi
c000b0e6:	c3                   	ret    
c000b0e7:	90                   	nop

c000b0e8 <File::tell(unsigned long long*)>:
c000b0e8:	83 ec 0c             	sub    esp,0xc
c000b0eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b0f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0f4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0fb:	83 fa 19             	cmp    edx,0x19
c000b0fe:	77 34                	ja     c000b134 <File::tell(unsigned long long*)+0x4c>
c000b100:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b107:	85 d2                	test   edx,edx
c000b109:	74 29                	je     c000b134 <File::tell(unsigned long long*)+0x4c>
c000b10b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b111:	85 d2                	test   edx,edx
c000b113:	74 1f                	je     c000b134 <File::tell(unsigned long long*)+0x4c>
c000b115:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b119:	b8 05 00 00 00       	mov    eax,0x5
c000b11e:	74 14                	je     c000b134 <File::tell(unsigned long long*)+0x4c>
c000b120:	50                   	push   eax
c000b121:	8b 02                	mov    eax,DWORD PTR [edx]
c000b123:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b127:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b12d:	52                   	push   edx
c000b12e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	83 c4 0c             	add    esp,0xc
c000b137:	c3                   	ret    

c000b138 <File::rewind()>:
c000b138:	83 ec 10             	sub    esp,0x10
c000b13b:	6a 00                	push   0x0
c000b13d:	6a 00                	push   0x0
c000b13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b143:	e8 4a ff ff ff       	call   c000b092 <File::seek(unsigned long long)>
c000b148:	83 c4 1c             	add    esp,0x1c
c000b14b:	c3                   	ret    

c000b14c <File::unlink()>:
c000b14c:	83 ec 0c             	sub    esp,0xc
c000b14f:	b8 0b 00 00 00       	mov    eax,0xb
c000b154:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b158:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b15f:	83 f9 19             	cmp    ecx,0x19
c000b162:	77 2f                	ja     c000b193 <File::unlink()+0x47>
c000b164:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b16b:	85 c9                	test   ecx,ecx
c000b16d:	74 24                	je     c000b193 <File::unlink()+0x47>
c000b16f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b175:	85 c9                	test   ecx,ecx
c000b177:	74 1a                	je     c000b193 <File::unlink()+0x47>
c000b179:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b17d:	b8 06 00 00 00       	mov    eax,0x6
c000b182:	75 0f                	jne    c000b193 <File::unlink()+0x47>
c000b184:	50                   	push   eax
c000b185:	83 c2 0d             	add    edx,0xd
c000b188:	50                   	push   eax
c000b189:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b18b:	52                   	push   edx
c000b18c:	51                   	push   ecx
c000b18d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	83 c4 0c             	add    esp,0xc
c000b196:	c3                   	ret    
c000b197:	90                   	nop

c000b198 <File::rename(char const*)>:
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	b8 0b 00 00 00       	mov    eax,0xb
c000b1a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ab:	83 f9 19             	cmp    ecx,0x19
c000b1ae:	77 32                	ja     c000b1e2 <File::rename(char const*)+0x4a>
c000b1b0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1b7:	85 c9                	test   ecx,ecx
c000b1b9:	74 27                	je     c000b1e2 <File::rename(char const*)+0x4a>
c000b1bb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1c1:	85 c9                	test   ecx,ecx
c000b1c3:	74 1d                	je     c000b1e2 <File::rename(char const*)+0x4a>
c000b1c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1c9:	b8 06 00 00 00       	mov    eax,0x6
c000b1ce:	75 12                	jne    c000b1e2 <File::rename(char const*)+0x4a>
c000b1d0:	50                   	push   eax
c000b1d1:	83 c2 0d             	add    edx,0xd
c000b1d4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1da:	52                   	push   edx
c000b1db:	51                   	push   ecx
c000b1dc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1df:	83 c4 10             	add    esp,0x10
c000b1e2:	83 c4 0c             	add    esp,0xc
c000b1e5:	c3                   	ret    

c000b1e6 <File::chfatattr(unsigned char, unsigned char)>:
c000b1e6:	57                   	push   edi
c000b1e7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1ec:	56                   	push   esi
c000b1ed:	53                   	push   ebx
c000b1ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b201:	83 f9 19             	cmp    ecx,0x19
c000b204:	77 37                	ja     c000b23d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b206:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b20d:	85 c9                	test   ecx,ecx
c000b20f:	74 2c                	je     c000b23d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b211:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b217:	85 c9                	test   ecx,ecx
c000b219:	74 22                	je     c000b23d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b21b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b21f:	b8 06 00 00 00       	mov    eax,0x6
c000b224:	75 17                	jne    c000b23d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b226:	89 f0                	mov    eax,esi
c000b228:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b22a:	0f b6 db             	movzx  ebx,bl
c000b22d:	0f b6 f0             	movzx  esi,al
c000b230:	83 c2 0d             	add    edx,0xd
c000b233:	56                   	push   esi
c000b234:	53                   	push   ebx
c000b235:	52                   	push   edx
c000b236:	51                   	push   ecx
c000b237:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b23a:	83 c4 10             	add    esp,0x10
c000b23d:	5b                   	pop    ebx
c000b23e:	5e                   	pop    esi
c000b23f:	5f                   	pop    edi
c000b240:	c3                   	ret    
c000b241:	90                   	nop

c000b242 <File::exists()>:
c000b242:	83 ec 0c             	sub    esp,0xc
c000b245:	31 c0                	xor    eax,eax
c000b247:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b24b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b252:	83 f9 19             	cmp    ecx,0x19
c000b255:	77 24                	ja     c000b27b <File::exists()+0x39>
c000b257:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b25e:	85 c9                	test   ecx,ecx
c000b260:	74 19                	je     c000b27b <File::exists()+0x39>
c000b262:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b268:	85 c9                	test   ecx,ecx
c000b26a:	74 0f                	je     c000b27b <File::exists()+0x39>
c000b26c:	50                   	push   eax
c000b26d:	83 c2 0d             	add    edx,0xd
c000b270:	50                   	push   eax
c000b271:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b273:	52                   	push   edx
c000b274:	51                   	push   ecx
c000b275:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	83 c4 0c             	add    esp,0xc
c000b27e:	c3                   	ret    
c000b27f:	90                   	nop

c000b280 <File::stat(unsigned long long*, bool*)>:
c000b280:	56                   	push   esi
c000b281:	53                   	push   ebx
c000b282:	50                   	push   eax
c000b283:	b8 0b 00 00 00       	mov    eax,0xb
c000b288:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b28c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b290:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b294:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b29b:	83 f9 19             	cmp    ecx,0x19
c000b29e:	77 3d                	ja     c000b2dd <File::stat(unsigned long long*, bool*)+0x5d>
c000b2a0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2a7:	85 c9                	test   ecx,ecx
c000b2a9:	74 32                	je     c000b2dd <File::stat(unsigned long long*, bool*)+0x5d>
c000b2ab:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2b1:	85 c9                	test   ecx,ecx
c000b2b3:	74 28                	je     c000b2dd <File::stat(unsigned long long*, bool*)+0x5d>
c000b2b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2bb:	74 13                	je     c000b2d0 <File::stat(unsigned long long*, bool*)+0x50>
c000b2bd:	83 ec 04             	sub    esp,0x4
c000b2c0:	56                   	push   esi
c000b2c1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2c7:	51                   	push   ecx
c000b2c8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b2cb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b2ce:	eb 0a                	jmp    c000b2da <File::stat(unsigned long long*, bool*)+0x5a>
c000b2d0:	53                   	push   ebx
c000b2d1:	83 c2 0d             	add    edx,0xd
c000b2d4:	56                   	push   esi
c000b2d5:	52                   	push   edx
c000b2d6:	51                   	push   ecx
c000b2d7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	5a                   	pop    edx
c000b2de:	5b                   	pop    ebx
c000b2df:	5e                   	pop    esi
c000b2e0:	c3                   	ret    

c000b2e1 <Fs::setcwd(Process*, char*)>:
c000b2e1:	55                   	push   ebp
c000b2e2:	57                   	push   edi
c000b2e3:	56                   	push   esi
c000b2e4:	53                   	push   ebx
c000b2e5:	81 ec 20 02 00 00    	sub    esp,0x220
c000b2eb:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b2f2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b2f8:	57                   	push   edi
c000b2f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b300:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b304:	56                   	push   esi
c000b305:	e8 32 fa ff ff       	call   c000ad3c <Fs::standardiseFiles(char*, char const*, char const*)>
c000b30a:	89 34 24             	mov    DWORD PTR [esp],esi
c000b30d:	e8 6e 52 ff ff       	call   c0000580 <strlen>
c000b312:	83 c4 10             	add    esp,0x10
c000b315:	83 f8 02             	cmp    eax,0x2
c000b318:	77 15                	ja     c000b32f <Fs::setcwd(Process*, char*)+0x4e>
c000b31a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b31f:	83 eb 41             	sub    ebx,0x41
c000b322:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b329:	85 c0                	test   eax,eax
c000b32b:	75 1c                	jne    c000b349 <Fs::setcwd(Process*, char*)+0x68>
c000b32d:	eb 2f                	jmp    c000b35e <Fs::setcwd(Process*, char*)+0x7d>
c000b32f:	83 ec 0c             	sub    esp,0xc
c000b332:	56                   	push   esi
c000b333:	e8 48 52 ff ff       	call   c0000580 <strlen>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	83 f8 03             	cmp    eax,0x3
c000b33e:	75 57                	jne    c000b397 <Fs::setcwd(Process*, char*)+0xb6>
c000b340:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b345:	75 50                	jne    c000b397 <Fs::setcwd(Process*, char*)+0xb6>
c000b347:	eb d1                	jmp    c000b31a <Fs::setcwd(Process*, char*)+0x39>
c000b349:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b350:	75 0c                	jne    c000b35e <Fs::setcwd(Process*, char*)+0x7d>
c000b352:	83 ec 0c             	sub    esp,0xc
c000b355:	50                   	push   eax
c000b356:	e8 9d 1d 00 00       	call   c000d0f8 <LogicalDisk::mount()>
c000b35b:	83 c4 10             	add    esp,0x10
c000b35e:	83 fb 19             	cmp    ebx,0x19
c000b361:	b8 03 00 00 00       	mov    eax,0x3
c000b366:	0f 87 c6 00 00 00    	ja     c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b36c:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b373:	b8 05 00 00 00       	mov    eax,0x5
c000b378:	85 d2                	test   edx,edx
c000b37a:	0f 84 b2 00 00 00    	je     c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b380:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b387:	b8 06 00 00 00       	mov    eax,0x6
c000b38c:	0f 85 92 00 00 00    	jne    c000b424 <Fs::setcwd(Process*, char*)+0x143>
c000b392:	e9 9b 00 00 00       	jmp    c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b397:	83 ec 0c             	sub    esp,0xc
c000b39a:	68 14 01 00 00       	push   0x114
c000b39f:	e8 27 c7 ff ff       	call   c0007acb <malloc>
c000b3a4:	83 c4 0c             	add    esp,0xc
c000b3a7:	55                   	push   ebp
c000b3a8:	56                   	push   esi
c000b3a9:	50                   	push   eax
c000b3aa:	89 c3                	mov    ebx,eax
c000b3ac:	e8 67 fb ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000b3b1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b3b6:	83 c4 0c             	add    esp,0xc
c000b3b9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b3bd:	50                   	push   eax
c000b3be:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3c2:	50                   	push   eax
c000b3c3:	53                   	push   ebx
c000b3c4:	e8 b7 fe ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c000b3c9:	83 c4 10             	add    esp,0x10
c000b3cc:	83 f8 02             	cmp    eax,0x2
c000b3cf:	74 27                	je     c000b3f8 <Fs::setcwd(Process*, char*)+0x117>
c000b3d1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b3d6:	75 1c                	jne    c000b3f4 <Fs::setcwd(Process*, char*)+0x113>
c000b3d8:	85 db                	test   ebx,ebx
c000b3da:	b8 02 00 00 00       	mov    eax,0x2
c000b3df:	74 51                	je     c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b3e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e3:	83 ec 0c             	sub    esp,0xc
c000b3e6:	53                   	push   ebx
c000b3e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	b8 02 00 00 00       	mov    eax,0x2
c000b3f2:	eb 3e                	jmp    c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b3f4:	85 c0                	test   eax,eax
c000b3f6:	74 1c                	je     c000b414 <Fs::setcwd(Process*, char*)+0x133>
c000b3f8:	85 db                	test   ebx,ebx
c000b3fa:	b8 01 00 00 00       	mov    eax,0x1
c000b3ff:	74 31                	je     c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b401:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b403:	83 ec 0c             	sub    esp,0xc
c000b406:	53                   	push   ebx
c000b407:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b40a:	83 c4 10             	add    esp,0x10
c000b40d:	b8 01 00 00 00       	mov    eax,0x1
c000b412:	eb 1e                	jmp    c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b414:	85 db                	test   ebx,ebx
c000b416:	74 0c                	je     c000b424 <Fs::setcwd(Process*, char*)+0x143>
c000b418:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41a:	83 ec 0c             	sub    esp,0xc
c000b41d:	53                   	push   ebx
c000b41e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b421:	83 c4 10             	add    esp,0x10
c000b424:	50                   	push   eax
c000b425:	50                   	push   eax
c000b426:	56                   	push   esi
c000b427:	57                   	push   edi
c000b428:	e8 23 52 ff ff       	call   c0000650 <strcpy>
c000b42d:	83 c4 10             	add    esp,0x10
c000b430:	31 c0                	xor    eax,eax
c000b432:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b438:	5b                   	pop    ebx
c000b439:	5e                   	pop    esi
c000b43a:	5f                   	pop    edi
c000b43b:	5d                   	pop    ebp
c000b43c:	c3                   	ret    
c000b43d:	90                   	nop

c000b43e <Directory::Directory(char const*, Process*)>:
c000b43e:	83 ec 0c             	sub    esp,0xc
c000b441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b445:	83 ec 08             	sub    esp,0x8
c000b448:	6a 00                	push   0x0
c000b44a:	50                   	push   eax
c000b44b:	e8 66 dd ff ff       	call   c00091b6 <UnixFile::UnixFile(int)>
c000b450:	83 c4 10             	add    esp,0x10
c000b453:	ba dc 02 02 c0       	mov    edx,0xc00202dc
c000b458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45c:	89 10                	mov    DWORD PTR [eax],edx
c000b45e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b462:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46c:	83 c0 0d             	add    eax,0xd
c000b46f:	83 ec 04             	sub    esp,0x4
c000b472:	52                   	push   edx
c000b473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b477:	50                   	push   eax
c000b478:	e8 bf f8 ff ff       	call   c000ad3c <Fs::standardiseFiles(char*, char const*, char const*)>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b484:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b487:	83 e8 41             	sub    eax,0x41
c000b48a:	88 c2                	mov    dl,al
c000b48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b490:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4a8:	0f b6 c0             	movzx  eax,al
c000b4ab:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4b2:	85 c0                	test   eax,eax
c000b4b4:	74 3e                	je     c000b4f4 <Directory::Directory(char const*, Process*)+0xb6>
c000b4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ba:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4c0:	0f b6 c0             	movzx  eax,al
c000b4c3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4ca:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4d0:	85 c0                	test   eax,eax
c000b4d2:	75 20                	jne    c000b4f4 <Directory::Directory(char const*, Process*)+0xb6>
c000b4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4de:	0f b6 c0             	movzx  eax,al
c000b4e1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4e8:	83 ec 0c             	sub    esp,0xc
c000b4eb:	50                   	push   eax
c000b4ec:	e8 07 1c 00 00       	call   c000d0f8 <LogicalDisk::mount()>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	90                   	nop
c000b4f5:	83 c4 0c             	add    esp,0xc
c000b4f8:	c3                   	ret    
c000b4f9:	90                   	nop

c000b4fa <Directory::open()>:
c000b4fa:	53                   	push   ebx
c000b4fb:	b8 0b 00 00 00       	mov    eax,0xb
c000b500:	83 ec 08             	sub    esp,0x8
c000b503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b507:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b50e:	83 fa 19             	cmp    edx,0x19
c000b511:	77 3d                	ja     c000b550 <Directory::open()+0x56>
c000b513:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b51a:	85 d2                	test   edx,edx
c000b51c:	74 32                	je     c000b550 <Directory::open()+0x56>
c000b51e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b524:	85 d2                	test   edx,edx
c000b526:	74 28                	je     c000b550 <Directory::open()+0x56>
c000b528:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b52c:	b8 06 00 00 00       	mov    eax,0x6
c000b531:	75 1d                	jne    c000b550 <Directory::open()+0x56>
c000b533:	50                   	push   eax
c000b534:	8b 02                	mov    eax,DWORD PTR [edx]
c000b536:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b53c:	51                   	push   ecx
c000b53d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b540:	51                   	push   ecx
c000b541:	52                   	push   edx
c000b542:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b545:	83 c4 10             	add    esp,0x10
c000b548:	85 c0                	test   eax,eax
c000b54a:	75 04                	jne    c000b550 <Directory::open()+0x56>
c000b54c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b550:	83 c4 08             	add    esp,0x8
c000b553:	5b                   	pop    ebx
c000b554:	c3                   	ret    
c000b555:	90                   	nop

c000b556 <Directory::close()>:
c000b556:	53                   	push   ebx
c000b557:	b8 0b 00 00 00       	mov    eax,0xb
c000b55c:	83 ec 08             	sub    esp,0x8
c000b55f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b563:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b56a:	83 f9 19             	cmp    ecx,0x19
c000b56d:	77 41                	ja     c000b5b0 <Directory::close()+0x5a>
c000b56f:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b576:	85 db                	test   ebx,ebx
c000b578:	74 36                	je     c000b5b0 <Directory::close()+0x5a>
c000b57a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b581:	74 2d                	je     c000b5b0 <Directory::close()+0x5a>
c000b583:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b587:	b8 05 00 00 00       	mov    eax,0x5
c000b58c:	74 22                	je     c000b5b0 <Directory::close()+0x5a>
c000b58e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b592:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b599:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b59f:	53                   	push   ebx
c000b5a0:	53                   	push   ebx
c000b5a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5a3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b5a9:	50                   	push   eax
c000b5aa:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	83 c4 08             	add    esp,0x8
c000b5b3:	5b                   	pop    ebx
c000b5b4:	c3                   	ret    
c000b5b5:	90                   	nop

c000b5b6 <Directory::unlink()>:
c000b5b6:	83 ec 0c             	sub    esp,0xc
c000b5b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b5be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5c9:	83 f9 19             	cmp    ecx,0x19
c000b5cc:	77 2f                	ja     c000b5fd <Directory::unlink()+0x47>
c000b5ce:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5d5:	85 c9                	test   ecx,ecx
c000b5d7:	74 24                	je     c000b5fd <Directory::unlink()+0x47>
c000b5d9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5df:	85 c9                	test   ecx,ecx
c000b5e1:	74 1a                	je     c000b5fd <Directory::unlink()+0x47>
c000b5e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5e7:	b8 06 00 00 00       	mov    eax,0x6
c000b5ec:	75 0f                	jne    c000b5fd <Directory::unlink()+0x47>
c000b5ee:	50                   	push   eax
c000b5ef:	83 c2 0d             	add    edx,0xd
c000b5f2:	50                   	push   eax
c000b5f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5f5:	52                   	push   edx
c000b5f6:	51                   	push   ecx
c000b5f7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b5fa:	83 c4 10             	add    esp,0x10
c000b5fd:	83 c4 0c             	add    esp,0xc
c000b600:	c3                   	ret    
c000b601:	90                   	nop

c000b602 <Directory::rename(char const*)>:
c000b602:	83 ec 0c             	sub    esp,0xc
c000b605:	b8 0b 00 00 00       	mov    eax,0xb
c000b60a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b60e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b615:	83 f9 19             	cmp    ecx,0x19
c000b618:	77 32                	ja     c000b64c <Directory::rename(char const*)+0x4a>
c000b61a:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b621:	85 c9                	test   ecx,ecx
c000b623:	74 27                	je     c000b64c <Directory::rename(char const*)+0x4a>
c000b625:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b62b:	85 c9                	test   ecx,ecx
c000b62d:	74 1d                	je     c000b64c <Directory::rename(char const*)+0x4a>
c000b62f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b633:	b8 06 00 00 00       	mov    eax,0x6
c000b638:	75 12                	jne    c000b64c <Directory::rename(char const*)+0x4a>
c000b63a:	50                   	push   eax
c000b63b:	83 c2 0d             	add    edx,0xd
c000b63e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b644:	52                   	push   edx
c000b645:	51                   	push   ecx
c000b646:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b649:	83 c4 10             	add    esp,0x10
c000b64c:	83 c4 0c             	add    esp,0xc
c000b64f:	c3                   	ret    

c000b650 <Directory::exists()>:
c000b650:	83 ec 0c             	sub    esp,0xc
c000b653:	31 c0                	xor    eax,eax
c000b655:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b659:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b660:	83 f9 19             	cmp    ecx,0x19
c000b663:	77 24                	ja     c000b689 <Directory::exists()+0x39>
c000b665:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b66c:	85 c9                	test   ecx,ecx
c000b66e:	74 19                	je     c000b689 <Directory::exists()+0x39>
c000b670:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b676:	85 c9                	test   ecx,ecx
c000b678:	74 0f                	je     c000b689 <Directory::exists()+0x39>
c000b67a:	50                   	push   eax
c000b67b:	83 c2 0d             	add    edx,0xd
c000b67e:	50                   	push   eax
c000b67f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b681:	52                   	push   edx
c000b682:	51                   	push   ecx
c000b683:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b686:	83 c4 10             	add    esp,0x10
c000b689:	83 c4 0c             	add    esp,0xc
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <Directory::read(dirent*)>:
c000b68e:	83 ec 1c             	sub    esp,0x1c
c000b691:	b8 0b 00 00 00       	mov    eax,0xb
c000b696:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b69a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6a1:	83 f9 19             	cmp    ecx,0x19
c000b6a4:	77 30                	ja     c000b6d6 <Directory::read(dirent*)+0x48>
c000b6a6:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6ad:	85 c9                	test   ecx,ecx
c000b6af:	74 25                	je     c000b6d6 <Directory::read(dirent*)+0x48>
c000b6b1:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b6b8:	74 1c                	je     c000b6d6 <Directory::read(dirent*)+0x48>
c000b6ba:	83 ec 0c             	sub    esp,0xc
c000b6bd:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6bf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b6c3:	51                   	push   ecx
c000b6c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6c8:	6a 00                	push   0x0
c000b6ca:	68 10 01 00 00       	push   0x110
c000b6cf:	52                   	push   edx
c000b6d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6d3:	83 c4 20             	add    esp,0x20
c000b6d6:	83 c4 1c             	add    esp,0x1c
c000b6d9:	c3                   	ret    

c000b6da <Directory::create()>:
c000b6da:	83 ec 0c             	sub    esp,0xc
c000b6dd:	b8 0b 00 00 00       	mov    eax,0xb
c000b6e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6ed:	83 f9 19             	cmp    ecx,0x19
c000b6f0:	77 2f                	ja     c000b721 <Directory::create()+0x47>
c000b6f2:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6f9:	85 c9                	test   ecx,ecx
c000b6fb:	74 24                	je     c000b721 <Directory::create()+0x47>
c000b6fd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b703:	85 c9                	test   ecx,ecx
c000b705:	74 1a                	je     c000b721 <Directory::create()+0x47>
c000b707:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b70b:	b8 06 00 00 00       	mov    eax,0x6
c000b710:	75 0f                	jne    c000b721 <Directory::create()+0x47>
c000b712:	50                   	push   eax
c000b713:	83 c2 0d             	add    edx,0xd
c000b716:	50                   	push   eax
c000b717:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b719:	52                   	push   edx
c000b71a:	51                   	push   ecx
c000b71b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b71e:	83 c4 10             	add    esp,0x10
c000b721:	83 c4 0c             	add    esp,0xc
c000b724:	c3                   	ret    
c000b725:	90                   	nop

c000b726 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b726:	b8 0a 00 00 00       	mov    eax,0xa
c000b72b:	c3                   	ret    

c000b72c <Bus::Bus(char const*)>:
c000b72c:	83 ec 0c             	sub    esp,0xc
c000b72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b733:	83 ec 08             	sub    esp,0x8
c000b736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73a:	50                   	push   eax
c000b73b:	e8 28 08 00 00       	call   c000bf68 <Device::Device(char const*)>
c000b740:	83 c4 10             	add    esp,0x10
c000b743:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000b748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74c:	89 10                	mov    DWORD PTR [eax],edx
c000b74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b752:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b75c:	90                   	nop
c000b75d:	83 c4 0c             	add    esp,0xc
c000b760:	c3                   	ret    
c000b761:	90                   	nop
c000b762:	66 90                	xchg   ax,ax

c000b764 <Bus::~Bus()>:
c000b764:	83 ec 0c             	sub    esp,0xc
c000b767:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000b76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b770:	89 10                	mov    DWORD PTR [eax],edx
c000b772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b776:	83 ec 0c             	sub    esp,0xc
c000b779:	50                   	push   eax
c000b77a:	e8 53 05 00 00       	call   c000bcd2 <Device::~Device()>
c000b77f:	83 c4 10             	add    esp,0x10
c000b782:	90                   	nop
c000b783:	83 c4 0c             	add    esp,0xc
c000b786:	c3                   	ret    
c000b787:	90                   	nop

c000b788 <Bus::~Bus()>:
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	83 ec 0c             	sub    esp,0xc
c000b78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b792:	e8 cd ff ff ff       	call   c000b764 <Bus::~Bus()>
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	83 ec 08             	sub    esp,0x8
c000b79d:	68 58 01 00 00       	push   0x158
c000b7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7a6:	e8 c6 f0 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	83 c4 0c             	add    esp,0xc
c000b7b1:	c3                   	ret    

c000b7b2 <beepThread(void*)>:
c000b7b2:	83 ec 0c             	sub    esp,0xc
c000b7b5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b7ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7be:	48                   	dec    eax
c000b7bf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b7c4:	75 01                	jne    c000b7c7 <beepThread(void*)+0x15>
c000b7c6:	fb                   	sti    
c000b7c7:	6b c2 0a             	imul   eax,edx,0xa
c000b7ca:	83 ec 0c             	sub    esp,0xc
c000b7cd:	50                   	push   eax
c000b7ce:	e8 7d 9b 00 00       	call   c0015350 <milliTenthSleep(unsigned int)>
c000b7d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b7da:	e8 54 ba 00 00       	call   c0017233 <HalMakeBeep(int)>
c000b7df:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b7e7:	83 c4 1c             	add    esp,0x1c
c000b7ea:	e9 45 9a 00 00       	jmp    c0015234 <blockTask(TaskState)>

c000b7ef <Krnl::beep(int, int, bool)>:
c000b7ef:	56                   	push   esi
c000b7f0:	53                   	push   ebx
c000b7f1:	83 ec 10             	sub    esp,0x10
c000b7f4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b7f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b800:	e8 2e ba 00 00       	call   c0017233 <HalMakeBeep(int)>
c000b805:	89 f0                	mov    eax,esi
c000b807:	83 c4 10             	add    esp,0x10
c000b80a:	84 c0                	test   al,al
c000b80c:	74 1e                	je     c000b82c <Krnl::beep(int, int, bool)+0x3d>
c000b80e:	6b db 0a             	imul   ebx,ebx,0xa
c000b811:	83 ec 0c             	sub    esp,0xc
c000b814:	53                   	push   ebx
c000b815:	e8 36 9b 00 00       	call   c0015350 <milliTenthSleep(unsigned int)>
c000b81a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b822:	83 c4 14             	add    esp,0x14
c000b825:	5b                   	pop    ebx
c000b826:	5e                   	pop    esi
c000b827:	e9 07 ba 00 00       	jmp    c0017233 <HalMakeBeep(int)>
c000b82c:	68 e6 00 00 00       	push   0xe6
c000b831:	53                   	push   ebx
c000b832:	68 b2 b7 00 c0       	push   0xc000b7b2
c000b837:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b83d:	e8 a6 95 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c000b842:	83 c4 14             	add    esp,0x14
c000b845:	5b                   	pop    ebx
c000b846:	5e                   	pop    esi
c000b847:	c3                   	ret    

c000b848 <User::loadClockSettings(int)>:
c000b848:	53                   	push   ebx
c000b849:	83 ec 14             	sub    esp,0x14
c000b84c:	68 14 01 00 00       	push   0x114
c000b851:	e8 75 c2 ff ff       	call   c0007acb <malloc>
c000b856:	83 c4 0c             	add    esp,0xc
c000b859:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b85f:	68 1c 03 02 c0       	push   0xc002031c
c000b864:	50                   	push   eax
c000b865:	89 c3                	mov    ebx,eax
c000b867:	e8 ac f6 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000b86c:	58                   	pop    eax
c000b86d:	5a                   	pop    edx
c000b86e:	6a 01                	push   0x1
c000b870:	53                   	push   ebx
c000b871:	e8 5e f7 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c000b876:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b879:	e8 b4 f7 ff ff       	call   c000b032 <File::close()>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	85 db                	test   ebx,ebx
c000b883:	74 0f                	je     c000b894 <User::loadClockSettings(int)+0x4c>
c000b885:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b887:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b88b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b88e:	83 c4 08             	add    esp,0x8
c000b891:	5b                   	pop    ebx
c000b892:	ff e0                	jmp    eax
c000b894:	83 c4 08             	add    esp,0x8
c000b897:	5b                   	pop    ebx
c000b898:	c3                   	ret    
c000b899:	90                   	nop

c000b89a <Clock::Clock(char const*)>:
c000b89a:	83 ec 0c             	sub    esp,0xc
c000b89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a1:	83 ec 08             	sub    esp,0x8
c000b8a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a8:	50                   	push   eax
c000b8a9:	e8 ba 06 00 00       	call   c000bf68 <Device::Device(char const*)>
c000b8ae:	83 c4 10             	add    esp,0x10
c000b8b1:	ba 44 03 02 c0       	mov    edx,0xc0020344
c000b8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ba:	89 10                	mov    DWORD PTR [eax],edx
c000b8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b8ca:	90                   	nop
c000b8cb:	83 c4 0c             	add    esp,0xc
c000b8ce:	c3                   	ret    
c000b8cf:	90                   	nop

c000b8d0 <Clock::~Clock()>:
c000b8d0:	83 ec 0c             	sub    esp,0xc
c000b8d3:	ba 44 03 02 c0       	mov    edx,0xc0020344
c000b8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8dc:	89 10                	mov    DWORD PTR [eax],edx
c000b8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8e2:	83 ec 0c             	sub    esp,0xc
c000b8e5:	50                   	push   eax
c000b8e6:	e8 e7 03 00 00       	call   c000bcd2 <Device::~Device()>
c000b8eb:	83 c4 10             	add    esp,0x10
c000b8ee:	90                   	nop
c000b8ef:	83 c4 0c             	add    esp,0xc
c000b8f2:	c3                   	ret    
c000b8f3:	90                   	nop

c000b8f4 <Clock::~Clock()>:
c000b8f4:	83 ec 0c             	sub    esp,0xc
c000b8f7:	83 ec 0c             	sub    esp,0xc
c000b8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8fe:	e8 cd ff ff ff       	call   c000b8d0 <Clock::~Clock()>
c000b903:	83 c4 10             	add    esp,0x10
c000b906:	83 ec 08             	sub    esp,0x8
c000b909:	68 58 01 00 00       	push   0x158
c000b90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b912:	e8 5a ef ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000b917:	83 c4 10             	add    esp,0x10
c000b91a:	83 c4 0c             	add    esp,0xc
c000b91d:	c3                   	ret    

c000b91e <Clock::timeInSecondsLocal()>:
c000b91e:	53                   	push   ebx
c000b91f:	83 ec 14             	sub    esp,0x14
c000b922:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b926:	8b 10                	mov    edx,DWORD PTR [eax]
c000b928:	50                   	push   eax
c000b929:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b92c:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b933:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b939:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b93f:	89 cb                	mov    ebx,ecx
c000b941:	c1 fb 1f             	sar    ebx,0x1f
c000b944:	01 c8                	add    eax,ecx
c000b946:	11 da                	adc    edx,ebx
c000b948:	83 c4 10             	add    esp,0x10
c000b94b:	31 c9                	xor    ecx,ecx
c000b94d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b954:	74 05                	je     c000b95b <Clock::timeInSecondsLocal()+0x3d>
c000b956:	b9 08 07 00 00       	mov    ecx,0x708
c000b95b:	31 db                	xor    ebx,ebx
c000b95d:	01 c8                	add    eax,ecx
c000b95f:	11 da                	adc    edx,ebx
c000b961:	83 c4 08             	add    esp,0x8
c000b964:	5b                   	pop    ebx
c000b965:	c3                   	ret    

c000b966 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b966:	57                   	push   edi
c000b967:	56                   	push   esi
c000b968:	53                   	push   ebx
c000b969:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b96d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b971:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b975:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b977:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b97a:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b981:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b987:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b98d:	99                   	cdq    
c000b98e:	29 c6                	sub    esi,eax
c000b990:	19 d7                	sbb    edi,edx
c000b992:	89 f0                	mov    eax,esi
c000b994:	31 f6                	xor    esi,esi
c000b996:	89 fa                	mov    edx,edi
c000b998:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b99f:	74 05                	je     c000b9a6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9a1:	be 08 07 00 00       	mov    esi,0x708
c000b9a6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b9aa:	31 ff                	xor    edi,edi
c000b9ac:	29 f0                	sub    eax,esi
c000b9ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b9b2:	19 fa                	sbb    edx,edi
c000b9b4:	89 d8                	mov    eax,ebx
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	5b                   	pop    ebx
c000b9bb:	5e                   	pop    esi
c000b9bc:	5f                   	pop    edi
c000b9bd:	ff e0                	jmp    eax

c000b9bf <datetimeToSeconds(datetime_t)>:
c000b9bf:	55                   	push   ebp
c000b9c0:	57                   	push   edi
c000b9c1:	56                   	push   esi
c000b9c2:	53                   	push   ebx
c000b9c3:	83 ec 0c             	sub    esp,0xc
c000b9c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b9ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9ce:	89 f7                	mov    edi,esi
c000b9d0:	89 f0                	mov    eax,esi
c000b9d2:	0f b6 cf             	movzx  ecx,bh
c000b9d5:	0f b6 c4             	movzx  eax,ah
c000b9d8:	c1 ef 10             	shr    edi,0x10
c000b9db:	89 da                	mov    edx,ebx
c000b9dd:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000b9e0:	89 f9                	mov    ecx,edi
c000b9e2:	0f b6 f9             	movzx  edi,cl
c000b9e5:	89 f1                	mov    ecx,esi
c000b9e7:	6b c0 3c             	imul   eax,eax,0x3c
c000b9ea:	0f b6 f1             	movzx  esi,cl
c000b9ed:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000b9f3:	0f b6 db             	movzx  ebx,bl
c000b9f6:	c1 ea 10             	shr    edx,0x10
c000b9f9:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000b9ff:	01 f8                	add    eax,edi
c000ba01:	01 f0                	add    eax,esi
c000ba03:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba06:	c1 f8 1f             	sar    eax,0x1f
c000ba09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba0d:	89 e8                	mov    eax,ebp
c000ba0f:	0f b6 c0             	movzx  eax,al
c000ba12:	8b 0c 85 80 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfc80]
c000ba19:	83 f8 01             	cmp    eax,0x1
c000ba1c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000ba20:	0f b7 da             	movzx  ebx,dx
c000ba23:	76 27                	jbe    c000ba4c <datetimeToSeconds(datetime_t)+0x8d>
c000ba25:	80 e2 03             	and    dl,0x3
c000ba28:	75 22                	jne    c000ba4c <datetimeToSeconds(datetime_t)+0x8d>
c000ba2a:	31 d2                	xor    edx,edx
c000ba2c:	be 64 00 00 00       	mov    esi,0x64
c000ba31:	89 d8                	mov    eax,ebx
c000ba33:	f7 f6                	div    esi
c000ba35:	85 d2                	test   edx,edx
c000ba37:	75 12                	jne    c000ba4b <datetimeToSeconds(datetime_t)+0x8c>
c000ba39:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba3f:	be 90 01 00 00       	mov    esi,0x190
c000ba44:	99                   	cdq    
c000ba45:	f7 fe                	idiv   esi
c000ba47:	85 d2                	test   edx,edx
c000ba49:	75 01                	jne    c000ba4c <datetimeToSeconds(datetime_t)+0x8d>
c000ba4b:	41                   	inc    ecx
c000ba4c:	83 fb 46             	cmp    ebx,0x46
c000ba4f:	76 48                	jbe    c000ba99 <datetimeToSeconds(datetime_t)+0xda>
c000ba51:	be 46 00 00 00       	mov    esi,0x46
c000ba56:	bf 64 00 00 00       	mov    edi,0x64
c000ba5b:	bd 90 01 00 00       	mov    ebp,0x190
c000ba60:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba66:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba6b:	75 23                	jne    c000ba90 <datetimeToSeconds(datetime_t)+0xd1>
c000ba6d:	89 f0                	mov    eax,esi
c000ba6f:	99                   	cdq    
c000ba70:	f7 ff                	idiv   edi
c000ba72:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba77:	85 d2                	test   edx,edx
c000ba79:	75 15                	jne    c000ba90 <datetimeToSeconds(datetime_t)+0xd1>
c000ba7b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba81:	99                   	cdq    
c000ba82:	f7 fd                	idiv   ebp
c000ba84:	83 fa 01             	cmp    edx,0x1
c000ba87:	19 c0                	sbb    eax,eax
c000ba89:	f7 d0                	not    eax
c000ba8b:	05 6e 01 00 00       	add    eax,0x16e
c000ba90:	46                   	inc    esi
c000ba91:	01 c1                	add    ecx,eax
c000ba93:	39 de                	cmp    esi,ebx
c000ba95:	7c c9                	jl     c000ba60 <datetimeToSeconds(datetime_t)+0xa1>
c000ba97:	eb 34                	jmp    c000bacd <datetimeToSeconds(datetime_t)+0x10e>
c000ba99:	74 32                	je     c000bacd <datetimeToSeconds(datetime_t)+0x10e>
c000ba9b:	b8 45 00 00 00       	mov    eax,0x45
c000baa0:	89 c2                	mov    edx,eax
c000baa2:	83 e2 03             	and    edx,0x3
c000baa5:	39 d8                	cmp    eax,ebx
c000baa7:	7e 0f                	jle    c000bab8 <datetimeToSeconds(datetime_t)+0xf9>
c000baa9:	83 fa 01             	cmp    edx,0x1
c000baac:	19 d2                	sbb    edx,edx
c000baae:	48                   	dec    eax
c000baaf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bab6:	eb e8                	jmp    c000baa0 <datetimeToSeconds(datetime_t)+0xe1>
c000bab8:	85 d2                	test   edx,edx
c000baba:	b8 6d 01 00 00       	mov    eax,0x16d
c000babf:	75 0a                	jne    c000bacb <datetimeToSeconds(datetime_t)+0x10c>
c000bac1:	83 fb 01             	cmp    ebx,0x1
c000bac4:	19 c0                	sbb    eax,eax
c000bac6:	05 6e 01 00 00       	add    eax,0x16e
c000bacb:	29 c1                	sub    ecx,eax
c000bacd:	b8 80 51 01 00       	mov    eax,0x15180
c000bad2:	f7 e9                	imul   ecx
c000bad4:	03 04 24             	add    eax,DWORD PTR [esp]
c000bad7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000badb:	83 c4 0c             	add    esp,0xc
c000bade:	5b                   	pop    ebx
c000badf:	5e                   	pop    esi
c000bae0:	5f                   	pop    edi
c000bae1:	5d                   	pop    ebp
c000bae2:	c3                   	ret    
c000bae3:	90                   	nop

c000bae4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bae4:	57                   	push   edi
c000bae5:	56                   	push   esi
c000bae6:	53                   	push   ebx
c000bae7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000baeb:	8b 06                	mov    eax,DWORD PTR [esi]
c000baed:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000baf0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baf8:	e8 c2 fe ff ff       	call   c000b9bf <datetimeToSeconds(datetime_t)>
c000bafd:	59                   	pop    ecx
c000bafe:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb05:	5b                   	pop    ebx
c000bb06:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb0c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb12:	89 cb                	mov    ebx,ecx
c000bb14:	c1 fb 1f             	sar    ebx,0x1f
c000bb17:	29 c8                	sub    eax,ecx
c000bb19:	19 da                	sbb    edx,ebx
c000bb1b:	31 c9                	xor    ecx,ecx
c000bb1d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb24:	74 05                	je     c000bb2b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb26:	b9 08 07 00 00       	mov    ecx,0x708
c000bb2b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb2f:	31 db                	xor    ebx,ebx
c000bb31:	29 c8                	sub    eax,ecx
c000bb33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb37:	19 da                	sbb    edx,ebx
c000bb39:	89 f8                	mov    eax,edi
c000bb3b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3f:	5b                   	pop    ebx
c000bb40:	5e                   	pop    esi
c000bb41:	5f                   	pop    edi
c000bb42:	ff e0                	jmp    eax

c000bb44 <secondsToDatetime(unsigned long long)>:
c000bb44:	55                   	push   ebp
c000bb45:	57                   	push   edi
c000bb46:	56                   	push   esi
c000bb47:	53                   	push   ebx
c000bb48:	83 ec 1c             	sub    esp,0x1c
c000bb4b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb4f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb57:	6a 00                	push   0x0
c000bb59:	68 80 51 01 00       	push   0x15180
c000bb5e:	55                   	push   ebp
c000bb5f:	57                   	push   edi
c000bb60:	e8 9b 2a 01 00       	call   c001e600 <__udivdi3>
c000bb65:	83 c4 10             	add    esp,0x10
c000bb68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb6c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb72:	6a 00                	push   0x0
c000bb74:	68 80 51 01 00       	push   0x15180
c000bb79:	55                   	push   ebp
c000bb7a:	57                   	push   edi
c000bb7b:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb80:	e8 7b 2b 01 00       	call   c001e700 <__umoddi3>
c000bb85:	83 c4 10             	add    esp,0x10
c000bb88:	99                   	cdq    
c000bb89:	f7 ff                	idiv   edi
c000bb8b:	bf 3c 00 00 00       	mov    edi,0x3c
c000bb90:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bb93:	89 d0                	mov    eax,edx
c000bb95:	99                   	cdq    
c000bb96:	f7 ff                	idiv   edi
c000bb98:	85 db                	test   ebx,ebx
c000bb9a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bb9d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bba0:	79 11                	jns    c000bbb3 <secondsToDatetime(unsigned long long)+0x6f>
c000bba2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bba6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bbac:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbb1:	eb 07                	jmp    c000bbba <secondsToDatetime(unsigned long long)+0x76>
c000bbb3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbb8:	89 d8                	mov    eax,ebx
c000bbba:	99                   	cdq    
c000bbbb:	bf b4 05 00 00       	mov    edi,0x5b4
c000bbc0:	f7 f9                	idiv   ecx
c000bbc2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bbc7:	31 d2                	xor    edx,edx
c000bbc9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bbce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbd2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bbda:	01 c3                	add    ebx,eax
c000bbdc:	89 d8                	mov    eax,ebx
c000bbde:	f7 f1                	div    ecx
c000bbe0:	31 d2                	xor    edx,edx
c000bbe2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bbe5:	89 d8                	mov    eax,ebx
c000bbe7:	f7 f7                	div    edi
c000bbe9:	31 d2                	xor    edx,edx
c000bbeb:	29 c1                	sub    ecx,eax
c000bbed:	89 d8                	mov    eax,ebx
c000bbef:	f7 f5                	div    ebp
c000bbf1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bbf6:	31 d2                	xor    edx,edx
c000bbf8:	29 c1                	sub    ecx,eax
c000bbfa:	89 c8                	mov    eax,ecx
c000bbfc:	f7 f5                	div    ebp
c000bbfe:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc03:	31 d2                	xor    edx,edx
c000bc05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc09:	89 c8                	mov    eax,ecx
c000bc0b:	f7 f5                	div    ebp
c000bc0d:	31 d2                	xor    edx,edx
c000bc0f:	01 c3                	add    ebx,eax
c000bc11:	89 c8                	mov    eax,ecx
c000bc13:	f7 f7                	div    edi
c000bc15:	bf 99 00 00 00       	mov    edi,0x99
c000bc1a:	31 d2                	xor    edx,edx
c000bc1c:	29 c3                	sub    ebx,eax
c000bc1e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc26:	29 c3                	sub    ebx,eax
c000bc28:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc2b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc2e:	83 c1 02             	add    ecx,0x2
c000bc31:	89 c8                	mov    eax,ecx
c000bc33:	bb 05 00 00 00       	mov    ebx,0x5
c000bc38:	f7 f7                	div    edi
c000bc3a:	31 d2                	xor    edx,edx
c000bc3c:	89 c7                	mov    edi,eax
c000bc3e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc44:	83 c0 02             	add    eax,0x2
c000bc47:	f7 f3                	div    ebx
c000bc49:	89 eb                	mov    ebx,ebp
c000bc4b:	29 c3                	sub    ebx,eax
c000bc4d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc53:	88 1e                	mov    BYTE PTR [esi],bl
c000bc55:	19 c0                	sbb    eax,eax
c000bc57:	31 d2                	xor    edx,edx
c000bc59:	83 e0 0c             	and    eax,0xc
c000bc5c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc60:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc68:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc6c:	83 f9 01             	cmp    ecx,0x1
c000bc6f:	0f 96 c2             	setbe  dl
c000bc72:	41                   	inc    ecx
c000bc73:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc76:	01 d0                	add    eax,edx
c000bc78:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc7c:	83 c4 1c             	add    esp,0x1c
c000bc7f:	89 f0                	mov    eax,esi
c000bc81:	5b                   	pop    ebx
c000bc82:	5e                   	pop    esi
c000bc83:	5f                   	pop    edi
c000bc84:	5d                   	pop    ebp
c000bc85:	c2 04 00             	ret    0x4

c000bc88 <Clock::timeInDatetimeLocal()>:
c000bc88:	53                   	push   ebx
c000bc89:	83 ec 14             	sub    esp,0x14
c000bc8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc94:	e8 85 fc ff ff       	call   c000b91e <Clock::timeInSecondsLocal()>
c000bc99:	83 c4 0c             	add    esp,0xc
c000bc9c:	52                   	push   edx
c000bc9d:	50                   	push   eax
c000bc9e:	53                   	push   ebx
c000bc9f:	e8 a0 fe ff ff       	call   c000bb44 <secondsToDatetime(unsigned long long)>
c000bca4:	89 d8                	mov    eax,ebx
c000bca6:	83 c4 14             	add    esp,0x14
c000bca9:	5b                   	pop    ebx
c000bcaa:	c2 04 00             	ret    0x4
c000bcad:	90                   	nop

c000bcae <Device::hibernate()>:
c000bcae:	c3                   	ret    
c000bcaf:	90                   	nop

c000bcb0 <Device::wake()>:
c000bcb0:	c3                   	ret    
c000bcb1:	90                   	nop

c000bcb2 <Device::detect()>:
c000bcb2:	c3                   	ret    
c000bcb3:	90                   	nop

c000bcb4 <Device::disableLegacy()>:
c000bcb4:	c3                   	ret    
c000bcb5:	90                   	nop

c000bcb6 <Device::powerSaving(PowerSavingLevel)>:
c000bcb6:	c3                   	ret    
c000bcb7:	90                   	nop

c000bcb8 <DriverlessDevice::close(int, int, void*)>:
c000bcb8:	31 c0                	xor    eax,eax
c000bcba:	c3                   	ret    
c000bcbb:	90                   	nop

c000bcbc <DriverlessDevice::detect()>:
c000bcbc:	c3                   	ret    
c000bcbd:	90                   	nop

c000bcbe <DriverlessDevice::open(int, int, void*)>:
c000bcbe:	83 ec 18             	sub    esp,0x18
c000bcc1:	68 b0 03 02 c0       	push   0xc00203b0
c000bcc6:	e8 6e 4b 00 00       	call   c0010839 <KePanic(char const*)>
c000bccb:	83 c8 ff             	or     eax,0xffffffff
c000bcce:	83 c4 1c             	add    esp,0x1c
c000bcd1:	c3                   	ret    

c000bcd2 <Device::~Device()>:
c000bcd2:	ba 10 04 02 c0       	mov    edx,0xc0020410
c000bcd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcdb:	89 10                	mov    DWORD PTR [eax],edx
c000bcdd:	90                   	nop
c000bcde:	c3                   	ret    
c000bcdf:	90                   	nop

c000bce0 <Device::~Device()>:
c000bce0:	83 ec 0c             	sub    esp,0xc
c000bce3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bce7:	e8 e6 ff ff ff       	call   c000bcd2 <Device::~Device()>
c000bcec:	83 c4 04             	add    esp,0x4
c000bcef:	83 ec 08             	sub    esp,0x8
c000bcf2:	68 58 01 00 00       	push   0x158
c000bcf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfb:	e8 71 eb ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000bd00:	83 c4 10             	add    esp,0x10
c000bd03:	83 c4 0c             	add    esp,0xc
c000bd06:	c3                   	ret    
c000bd07:	90                   	nop

c000bd08 <Device::findAndLoadDriver()>:
c000bd08:	c7 44 24 04 ce 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc00203ce
c000bd10:	e9 5a ec ff ff       	jmp    c000a96f <Dbg::kprintf(char const*, ...)>
c000bd15:	90                   	nop

c000bd16 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd16:	57                   	push   edi
c000bd17:	b9 09 00 00 00       	mov    ecx,0x9
c000bd1c:	56                   	push   esi
c000bd1d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd21:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd25:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd2f:	81 c7 18 01 00 00    	add    edi,0x118
c000bd35:	fc                   	cld    
c000bd36:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd38:	5e                   	pop    esi
c000bd39:	5f                   	pop    edi
c000bd3a:	c3                   	ret    
c000bd3b:	90                   	nop

c000bd3c <Device::preOpenACPI(void*, char*, char*)>:
c000bd3c:	57                   	push   edi
c000bd3d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd42:	56                   	push   esi
c000bd43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd4f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd59:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd5f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd67:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd71:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd78:	5e                   	pop    esi
c000bd79:	5f                   	pop    edi
c000bd7a:	c3                   	ret    
c000bd7b:	90                   	nop

c000bd7c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd7c:	53                   	push   ebx
c000bd7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd8d:	0f b6 c0             	movzx  eax,al
c000bd90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd94:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd98:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bd9c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bda0:	5b                   	pop    ebx
c000bda1:	e9 aa 05 00 00       	jmp    c000c350 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bda6 <Device::getParent()>:
c000bda6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdaa:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bdb0:	c3                   	ret    
c000bdb1:	90                   	nop

c000bdb2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bdb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bdb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdba:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bdbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdc3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdc7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdcb:	e9 f7 06 00 00       	jmp    c000c4c7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bdd0 <Device::addChild(Device*)>:
c000bdd0:	53                   	push   ebx
c000bdd1:	83 ec 08             	sub    esp,0x8
c000bdd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bddc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bde2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bde8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdea:	85 d2                	test   edx,edx
c000bdec:	74 04                	je     c000bdf2 <Device::addChild(Device*)+0x22>
c000bdee:	89 d3                	mov    ebx,edx
c000bdf0:	eb f6                	jmp    c000bde8 <Device::addChild(Device*)+0x18>
c000bdf2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bdf5:	83 ec 0c             	sub    esp,0xc
c000bdf8:	6a 08                	push   0x8
c000bdfa:	e8 cc bc ff ff       	call   c0007acb <malloc>
c000bdff:	89 03                	mov    DWORD PTR [ebx],eax
c000be01:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be0e:	83 c4 18             	add    esp,0x18
c000be11:	5b                   	pop    ebx
c000be12:	c3                   	ret    
c000be13:	90                   	nop

c000be14 <Device::removeAllChildren()>:
c000be14:	56                   	push   esi
c000be15:	53                   	push   ebx
c000be16:	52                   	push   edx
c000be17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be1b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be24:	74 17                	je     c000be3d <Device::removeAllChildren()+0x29>
c000be26:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be29:	85 c0                	test   eax,eax
c000be2b:	74 0c                	je     c000be39 <Device::removeAllChildren()+0x25>
c000be2d:	8b 10                	mov    edx,DWORD PTR [eax]
c000be2f:	83 ec 0c             	sub    esp,0xc
c000be32:	50                   	push   eax
c000be33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be36:	83 c4 10             	add    esp,0x10
c000be39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be3b:	eb e4                	jmp    c000be21 <Device::removeAllChildren()+0xd>
c000be3d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be49:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be56:	58                   	pop    eax
c000be57:	5b                   	pop    ebx
c000be58:	5e                   	pop    esi
c000be59:	c3                   	ret    

c000be5a <Device::hibernateAll()>:
c000be5a:	53                   	push   ebx
c000be5b:	83 ec 14             	sub    esp,0x14
c000be5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be62:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be64:	53                   	push   ebx
c000be65:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be6e:	83 c4 10             	add    esp,0x10
c000be71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be74:	74 0f                	je     c000be85 <Device::hibernateAll()+0x2b>
c000be76:	83 ec 0c             	sub    esp,0xc
c000be79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be7c:	e8 d9 ff ff ff       	call   c000be5a <Device::hibernateAll()>
c000be81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be83:	eb e9                	jmp    c000be6e <Device::hibernateAll()+0x14>
c000be85:	83 c4 08             	add    esp,0x8
c000be88:	5b                   	pop    ebx
c000be89:	c3                   	ret    

c000be8a <Device::wakeAll()>:
c000be8a:	53                   	push   ebx
c000be8b:	83 ec 14             	sub    esp,0x14
c000be8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be94:	53                   	push   ebx
c000be95:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000be98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bea4:	74 0f                	je     c000beb5 <Device::wakeAll()+0x2b>
c000bea6:	83 ec 0c             	sub    esp,0xc
c000bea9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000beac:	e8 d9 ff ff ff       	call   c000be8a <Device::wakeAll()>
c000beb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000beb3:	eb e9                	jmp    c000be9e <Device::wakeAll()+0x14>
c000beb5:	83 c4 08             	add    esp,0x8
c000beb8:	5b                   	pop    ebx
c000beb9:	c3                   	ret    

c000beba <Device::detectAll()>:
c000beba:	53                   	push   ebx
c000bebb:	83 ec 14             	sub    esp,0x14
c000bebe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bec2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bec4:	53                   	push   ebx
c000bec5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bec8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bece:	83 c4 10             	add    esp,0x10
c000bed1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bed4:	74 0f                	je     c000bee5 <Device::detectAll()+0x2b>
c000bed6:	83 ec 0c             	sub    esp,0xc
c000bed9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bedc:	e8 d9 ff ff ff       	call   c000beba <Device::detectAll()>
c000bee1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bee3:	eb e9                	jmp    c000bece <Device::detectAll()+0x14>
c000bee5:	83 c4 08             	add    esp,0x8
c000bee8:	5b                   	pop    ebx
c000bee9:	c3                   	ret    

c000beea <Device::disableLegacyAll()>:
c000beea:	c3                   	ret    
c000beeb:	90                   	nop

c000beec <Device::loadDriversForAll()>:
c000beec:	c3                   	ret    
c000beed:	90                   	nop

c000beee <Device::closeAll()>:
c000beee:	53                   	push   ebx
c000beef:	83 ec 08             	sub    esp,0x8
c000bef2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bef6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bef8:	6a 00                	push   0x0
c000befa:	6a 00                	push   0x0
c000befc:	6a 00                	push   0x0
c000befe:	53                   	push   ebx
c000beff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf02:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf08:	83 c4 10             	add    esp,0x10
c000bf0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf0e:	74 0f                	je     c000bf1f <Device::closeAll()+0x31>
c000bf10:	83 ec 0c             	sub    esp,0xc
c000bf13:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf16:	e8 d3 ff ff ff       	call   c000beee <Device::closeAll()>
c000bf1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf1d:	eb e9                	jmp    c000bf08 <Device::closeAll()+0x1a>
c000bf1f:	83 c4 08             	add    esp,0x8
c000bf22:	5b                   	pop    ebx
c000bf23:	c3                   	ret    

c000bf24 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf24:	56                   	push   esi
c000bf25:	53                   	push   ebx
c000bf26:	83 ec 0c             	sub    esp,0xc
c000bf29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf31:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf33:	56                   	push   esi
c000bf34:	53                   	push   ebx
c000bf35:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf3e:	83 c4 10             	add    esp,0x10
c000bf41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf44:	74 0f                	je     c000bf55 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf46:	52                   	push   edx
c000bf47:	52                   	push   edx
c000bf48:	56                   	push   esi
c000bf49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf4c:	e8 d3 ff ff ff       	call   c000bf24 <Device::powerSavingAll(PowerSavingLevel)>
c000bf51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf53:	eb e9                	jmp    c000bf3e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf55:	58                   	pop    eax
c000bf56:	5b                   	pop    ebx
c000bf57:	5e                   	pop    esi
c000bf58:	c3                   	ret    
c000bf59:	90                   	nop

c000bf5a <Device::setName(char const*)>:
c000bf5a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf62:	e9 e9 46 ff ff       	jmp    c0000650 <strcpy>
c000bf67:	90                   	nop

c000bf68 <Device::Device(char const*)>:
c000bf68:	83 ec 1c             	sub    esp,0x1c
c000bf6b:	ba 10 04 02 c0       	mov    edx,0xc0020410
c000bf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf74:	89 10                	mov    DWORD PTR [eax],edx
c000bf76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf7a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf88:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf96:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfa4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bfae:	83 ec 08             	sub    esp,0x8
c000bfb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfb9:	e8 9c ff ff ff       	call   c000bf5a <Device::setName(char const*)>
c000bfbe:	83 c4 10             	add    esp,0x10
c000bfc1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bfc9:	83 ec 0c             	sub    esp,0xc
c000bfcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfd0:	e8 f6 ba ff ff       	call   c0007acb <malloc>
c000bfd5:	83 c4 10             	add    esp,0x10
c000bfd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfde:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfe5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfe9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bfef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bff9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c003:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c009:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c014:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c01b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c01f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c02a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c038:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c046:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c054:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c05e:	90                   	nop
c000c05f:	83 c4 1c             	add    esp,0x1c
c000c062:	c3                   	ret    
c000c063:	90                   	nop

c000c064 <Device::getName()>:
c000c064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c068:	05 d0 00 00 00       	add    eax,0xd0
c000c06d:	c3                   	ret    

c000c06e <DriverlessDevice::DriverlessDevice(char const*)>:
c000c06e:	83 ec 0c             	sub    esp,0xc
c000c071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c075:	83 ec 08             	sub    esp,0x8
c000c078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c07c:	50                   	push   eax
c000c07d:	e8 e6 fe ff ff       	call   c000bf68 <Device::Device(char const*)>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	ba 3c 04 02 c0       	mov    edx,0xc002043c
c000c08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08e:	89 10                	mov    DWORD PTR [eax],edx
c000c090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c094:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c09e:	90                   	nop
c000c09f:	83 c4 0c             	add    esp,0xc
c000c0a2:	c3                   	ret    
c000c0a3:	90                   	nop

c000c0a4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c0a4:	57                   	push   edi
c000c0a5:	56                   	push   esi
c000c0a6:	53                   	push   ebx
c000c0a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0b3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c0b9:	75 0c                	jne    c000c0c7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c0bb:	52                   	push   edx
c000c0bc:	52                   	push   edx
c000c0bd:	53                   	push   ebx
c000c0be:	56                   	push   esi
c000c0bf:	e8 ee 29 01 00       	call   c001eab2 <LinkedList<Device>::addElement(Device*)>
c000c0c4:	83 c4 10             	add    esp,0x10
c000c0c7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0d0:	74 12                	je     c000c0e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c0d2:	50                   	push   eax
c000c0d3:	57                   	push   edi
c000c0d4:	56                   	push   esi
c000c0d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0d8:	e8 c7 ff ff ff       	call   c000c0a4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	eb e9                	jmp    c000c0cd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c0e4:	5b                   	pop    ebx
c000c0e5:	5e                   	pop    esi
c000c0e6:	5f                   	pop    edi
c000c0e7:	c3                   	ret    

c000c0e8 <getDevicesOfType(DeviceType)>:
c000c0e8:	53                   	push   ebx
c000c0e9:	83 ec 14             	sub    esp,0x14
c000c0ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0f0:	53                   	push   ebx
c000c0f1:	e8 98 2a 01 00       	call   c001eb8e <LinkedList<Device>::LinkedList()>
c000c0f6:	83 c4 0c             	add    esp,0xc
c000c0f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0fd:	53                   	push   ebx
c000c0fe:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c104:	e8 9b ff ff ff       	call   c000c0a4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c109:	83 c4 18             	add    esp,0x18
c000c10c:	89 d8                	mov    eax,ebx
c000c10e:	5b                   	pop    ebx
c000c10f:	c2 04 00             	ret    0x4
c000c112:	66 90                	xchg   ax,ax

c000c114 <HardDiskController::HardDiskController(char const*)>:
c000c114:	83 ec 0c             	sub    esp,0xc
c000c117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11b:	83 ec 08             	sub    esp,0x8
c000c11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c122:	50                   	push   eax
c000c123:	e8 40 fe ff ff       	call   c000bf68 <Device::Device(char const*)>
c000c128:	83 c4 10             	add    esp,0x10
c000c12b:	ba 68 04 02 c0       	mov    edx,0xc0020468
c000c130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c134:	89 10                	mov    DWORD PTR [eax],edx
c000c136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c144:	90                   	nop
c000c145:	83 c4 0c             	add    esp,0xc
c000c148:	c3                   	ret    
c000c149:	90                   	nop
c000c14a:	66 90                	xchg   ax,ax

c000c14c <HardDiskController::~HardDiskController()>:
c000c14c:	83 ec 0c             	sub    esp,0xc
c000c14f:	ba 68 04 02 c0       	mov    edx,0xc0020468
c000c154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c158:	89 10                	mov    DWORD PTR [eax],edx
c000c15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c15e:	83 ec 0c             	sub    esp,0xc
c000c161:	50                   	push   eax
c000c162:	e8 6b fb ff ff       	call   c000bcd2 <Device::~Device()>
c000c167:	83 c4 10             	add    esp,0x10
c000c16a:	90                   	nop
c000c16b:	83 c4 0c             	add    esp,0xc
c000c16e:	c3                   	ret    
c000c16f:	90                   	nop

c000c170 <HardDiskController::~HardDiskController()>:
c000c170:	83 ec 0c             	sub    esp,0xc
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17a:	e8 cd ff ff ff       	call   c000c14c <HardDiskController::~HardDiskController()>
c000c17f:	83 c4 10             	add    esp,0x10
c000c182:	83 ec 08             	sub    esp,0x8
c000c185:	68 58 01 00 00       	push   0x158
c000c18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18e:	e8 de e6 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000c193:	83 c4 10             	add    esp,0x10
c000c196:	83 c4 0c             	add    esp,0xc
c000c199:	c3                   	ret    

c000c19a <PhysicalDisk::eject()>:
c000c19a:	83 c8 ff             	or     eax,0xffffffff
c000c19d:	c3                   	ret    

c000c19e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c19e:	83 ec 0c             	sub    esp,0xc
c000c1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a5:	83 ec 08             	sub    esp,0x8
c000c1a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1ac:	50                   	push   eax
c000c1ad:	e8 b6 fd ff ff       	call   c000bf68 <Device::Device(char const*)>
c000c1b2:	83 c4 10             	add    esp,0x10
c000c1b5:	ba 94 04 02 c0       	mov    edx,0xc0020494
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	89 10                	mov    DWORD PTR [eax],edx
c000c1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1cf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1da:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1ec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c200:	90                   	nop
c000c201:	83 c4 0c             	add    esp,0xc
c000c204:	c3                   	ret    
c000c205:	90                   	nop

c000c206 <PhysicalDisk::startCache()>:
c000c206:	56                   	push   esi
c000c207:	53                   	push   ebx
c000c208:	83 ec 10             	sub    esp,0x10
c000c20b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c20f:	6a 44                	push   0x44
c000c211:	e8 b5 b8 ff ff       	call   c0007acb <malloc>
c000c216:	89 c6                	mov    esi,eax
c000c218:	58                   	pop    eax
c000c219:	5a                   	pop    edx
c000c21a:	53                   	push   ebx
c000c21b:	56                   	push   esi
c000c21c:	e8 83 17 00 00       	call   c000d9a4 <VCache::VCache(PhysicalDisk*)>
c000c221:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c227:	83 c4 14             	add    esp,0x14
c000c22a:	5b                   	pop    ebx
c000c22b:	5e                   	pop    esi
c000c22c:	c3                   	ret    
c000c22d:	90                   	nop

c000c22e <PhysicalDisk::~PhysicalDisk()>:
c000c22e:	83 ec 0c             	sub    esp,0xc
c000c231:	ba 94 04 02 c0       	mov    edx,0xc0020494
c000c236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23a:	89 10                	mov    DWORD PTR [eax],edx
c000c23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c240:	83 ec 0c             	sub    esp,0xc
c000c243:	50                   	push   eax
c000c244:	e8 89 fa ff ff       	call   c000bcd2 <Device::~Device()>
c000c249:	83 c4 10             	add    esp,0x10
c000c24c:	90                   	nop
c000c24d:	83 c4 0c             	add    esp,0xc
c000c250:	c3                   	ret    
c000c251:	90                   	nop

c000c252 <PhysicalDisk::~PhysicalDisk()>:
c000c252:	83 ec 0c             	sub    esp,0xc
c000c255:	83 ec 0c             	sub    esp,0xc
c000c258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c25c:	e8 cd ff ff ff       	call   c000c22e <PhysicalDisk::~PhysicalDisk()>
c000c261:	83 c4 10             	add    esp,0x10
c000c264:	83 ec 08             	sub    esp,0x8
c000c267:	68 6c 01 00 00       	push   0x16c
c000c26c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c270:	e8 fc e5 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000c275:	83 c4 10             	add    esp,0x10
c000c278:	83 c4 0c             	add    esp,0xc
c000c27b:	c3                   	ret    

c000c27c <int_handler>:
c000c27c:	55                   	push   ebp
c000c27d:	57                   	push   edi
c000c27e:	56                   	push   esi
c000c27f:	53                   	push   ebx
c000c280:	83 ec 0c             	sub    esp,0xc
c000c283:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c28a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c28e:	74 0b                	je     c000c29b <int_handler+0x1f>
c000c290:	fa                   	cli    
c000c291:	f4                   	hlt    
c000c292:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c299:	75 f5                	jne    c000c290 <int_handler+0x14>
c000c29b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c29e:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2a1:	83 f8 17             	cmp    eax,0x17
c000c2a4:	76 40                	jbe    c000c2e6 <int_handler+0x6a>
c000c2a6:	c1 e6 04             	shl    esi,0x4
c000c2a9:	31 db                	xor    ebx,ebx
c000c2ab:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c2b1:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c2b7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c2bb:	85 c0                	test   eax,eax
c000c2bd:	74 13                	je     c000c2d2 <int_handler+0x56>
c000c2bf:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2c3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2c6:	74 2c                	je     c000c2f4 <int_handler+0x78>
c000c2c8:	83 ec 08             	sub    esp,0x8
c000c2cb:	52                   	push   edx
c000c2cc:	57                   	push   edi
c000c2cd:	ff d0                	call   eax
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	83 c3 01             	add    ebx,0x1
c000c2d5:	83 fb 04             	cmp    ebx,0x4
c000c2d8:	75 dd                	jne    c000c2b7 <int_handler+0x3b>
c000c2da:	83 c4 0c             	add    esp,0xc
c000c2dd:	31 c0                	xor    eax,eax
c000c2df:	5b                   	pop    ebx
c000c2e0:	31 d2                	xor    edx,edx
c000c2e2:	5e                   	pop    esi
c000c2e3:	5f                   	pop    edi
c000c2e4:	5d                   	pop    ebp
c000c2e5:	c3                   	ret    
c000c2e6:	83 ec 0c             	sub    esp,0xc
c000c2e9:	50                   	push   eax
c000c2ea:	e8 81 af 00 00       	call   c0017270 <HalEndOfInterrupt(int)>
c000c2ef:	83 c4 10             	add    esp,0x10
c000c2f2:	eb b2                	jmp    c000c2a6 <int_handler+0x2a>
c000c2f4:	83 ec 08             	sub    esp,0x8
c000c2f7:	52                   	push   edx
c000c2f8:	57                   	push   edi
c000c2f9:	ff d0                	call   eax
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	83 c4 0c             	add    esp,0xc
c000c301:	5b                   	pop    ebx
c000c302:	5e                   	pop    esi
c000c303:	5f                   	pop    edi
c000c304:	5d                   	pop    ebp
c000c305:	c3                   	ret    

c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c306:	56                   	push   esi
c000c307:	31 c0                	xor    eax,eax
c000c309:	53                   	push   ebx
c000c30a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c30e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c312:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c316:	89 ca                	mov    edx,ecx
c000c318:	c1 e2 04             	shl    edx,0x4
c000c31b:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c323:	74 17                	je     c000c33c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c325:	83 c0 01             	add    eax,0x1
c000c328:	83 f8 04             	cmp    eax,0x4
c000c32b:	75 ee                	jne    c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c32d:	c7 44 24 0c c4 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc00204c4
c000c335:	5b                   	pop    ebx
c000c336:	5e                   	pop    esi
c000c337:	e9 fd 44 00 00       	jmp    c0010839 <KePanic(char const*)>
c000c33c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c33f:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c346:	5b                   	pop    ebx
c000c347:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c34e:	5e                   	pop    esi
c000c34f:	c3                   	ret    

c000c350 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c350:	55                   	push   ebp
c000c351:	57                   	push   edi
c000c352:	56                   	push   esi
c000c353:	53                   	push   ebx
c000c354:	83 ec 0c             	sub    esp,0xc
c000c357:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c35d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c361:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c365:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c36c:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c36f:	74 57                	je     c000c3c8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c371:	84 c0                	test   al,al
c000c373:	89 c7                	mov    edi,eax
c000c375:	74 1d                	je     c000c394 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c377:	83 fe 0f             	cmp    esi,0xf
c000c37a:	0f 8f d9 00 00 00    	jg     c000c459 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c380:	0f b6 b6 40 1f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde0c0]
c000c387:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c38f:	d1 ef                	shr    edi,1
c000c391:	83 e7 01             	and    edi,0x1
c000c394:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c399:	83 ec 08             	sub    esp,0x8
c000c39c:	31 db                	xor    ebx,ebx
c000c39e:	50                   	push   eax
c000c39f:	68 d1 04 02 c0       	push   0xc00204d1
c000c3a4:	e8 c6 e5 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000c3a9:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3ae:	83 c4 10             	add    esp,0x10
c000c3b1:	85 c0                	test   eax,eax
c000c3b3:	7f 59                	jg     c000c40e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c3b5:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c3b8:	83 ec 0c             	sub    esp,0xc
c000c3bb:	68 e8 04 02 c0       	push   0xc00204e8
c000c3c0:	e8 74 44 00 00       	call   c0010839 <KePanic(char const*)>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	89 e8                	mov    eax,ebp
c000c3ca:	31 d2                	xor    edx,edx
c000c3cc:	c1 e0 04             	shl    eax,0x4
c000c3cf:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c3d6:	85 c9                	test   ecx,ecx
c000c3d8:	0f 84 92 00 00 00    	je     c000c470 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c3de:	83 c2 01             	add    edx,0x1
c000c3e1:	83 fa 04             	cmp    edx,0x4
c000c3e4:	75 e9                	jne    c000c3cf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c3e6:	83 ec 0c             	sub    esp,0xc
c000c3e9:	68 3c 05 02 c0       	push   0xc002053c
c000c3ee:	e8 46 44 00 00       	call   c0010839 <KePanic(char const*)>
c000c3f3:	83 c4 10             	add    esp,0x10
c000c3f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c3fb:	83 c4 0c             	add    esp,0xc
c000c3fe:	5b                   	pop    ebx
c000c3ff:	5e                   	pop    esi
c000c400:	5f                   	pop    edi
c000c401:	5d                   	pop    ebp
c000c402:	c3                   	ret    
c000c403:	83 c3 01             	add    ebx,0x1
c000c406:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c40c:	7e a7                	jle    c000c3b5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c40e:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c415:	83 ec 08             	sub    esp,0x8
c000c418:	56                   	push   esi
c000c419:	55                   	push   ebp
c000c41a:	e8 c5 15 01 00       	call   c001d9e4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c41f:	83 c4 10             	add    esp,0x10
c000c422:	84 c0                	test   al,al
c000c424:	74 dd                	je     c000c403 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c426:	89 f8                	mov    eax,edi
c000c428:	83 ec 04             	sub    esp,0x4
c000c42b:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c432:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c435:	0f b6 f8             	movzx  edi,al
c000c438:	57                   	push   edi
c000c439:	89 e8                	mov    eax,ebp
c000c43b:	6a 00                	push   0x0
c000c43d:	0f b6 c0             	movzx  eax,al
c000c440:	50                   	push   eax
c000c441:	89 f0                	mov    eax,esi
c000c443:	6a 00                	push   0x0
c000c445:	0f b6 c0             	movzx  eax,al
c000c448:	6a 00                	push   0x0
c000c44a:	50                   	push   eax
c000c44b:	53                   	push   ebx
c000c44c:	e8 ff 16 01 00       	call   c001db50 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c451:	83 c4 20             	add    esp,0x20
c000c454:	e9 6f ff ff ff       	jmp    c000c3c8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c459:	83 ec 0c             	sub    esp,0xc
c000c45c:	31 ff                	xor    edi,edi
c000c45e:	68 04 05 02 c0       	push   0xc0020504
c000c463:	e8 d1 43 00 00       	call   c0010839 <KePanic(char const*)>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	e9 24 ff ff ff       	jmp    c000c394 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c470:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c473:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c477:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c47e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c482:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c489:	83 c4 0c             	add    esp,0xc
c000c48c:	89 f0                	mov    eax,esi
c000c48e:	5b                   	pop    ebx
c000c48f:	5e                   	pop    esi
c000c490:	5f                   	pop    edi
c000c491:	5d                   	pop    ebp
c000c492:	c3                   	ret    

c000c493 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c493:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c497:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c49b:	c1 e0 04             	shl    eax,0x4
c000c49e:	8d 50 10             	lea    edx,[eax+0x10]
c000c4a1:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4a7:	74 08                	je     c000c4b1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4a9:	83 c0 04             	add    eax,0x4
c000c4ac:	39 d0                	cmp    eax,edx
c000c4ae:	75 f1                	jne    c000c4a1 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4b0:	c3                   	ret    
c000c4b1:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4bb:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4c5:	eb e2                	jmp    c000c4a9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c4c7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4c7:	56                   	push   esi
c000c4c8:	53                   	push   ebx
c000c4c9:	83 ec 04             	sub    esp,0x4
c000c4cc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c4d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c4d9:	74 0e                	je     c000c4e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c4db:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c4e0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c4e7:	75 34                	jne    c000c51d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c4e9:	8d 43 20             	lea    eax,[ebx+0x20]
c000c4ec:	c1 e0 04             	shl    eax,0x4
c000c4ef:	8d 50 10             	lea    edx,[eax+0x10]
c000c4f2:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c4f8:	74 0d                	je     c000c507 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c4fa:	83 c0 04             	add    eax,0x4
c000c4fd:	39 d0                	cmp    eax,edx
c000c4ff:	75 f1                	jne    c000c4f2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c501:	83 c4 04             	add    esp,0x4
c000c504:	5b                   	pop    ebx
c000c505:	5e                   	pop    esi
c000c506:	c3                   	ret    
c000c507:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c511:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c51b:	eb dd                	jmp    c000c4fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c51d:	83 fb 0f             	cmp    ebx,0xf
c000c520:	7f 09                	jg     c000c52b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c522:	0f b6 9b 40 1f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde0c0]
c000c529:	eb be                	jmp    c000c4e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c52b:	83 ec 0c             	sub    esp,0xc
c000c52e:	68 f5 04 02 c0       	push   0xc00204f5
c000c533:	e8 01 43 00 00       	call   c0010839 <KePanic(char const*)>
c000c538:	83 c4 10             	add    esp,0x10
c000c53b:	eb ac                	jmp    c000c4e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c53d <setupINTS()>:
c000c53d:	31 c0                	xor    eax,eax
c000c53f:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c549:	83 c0 10             	add    eax,0x10
c000c54c:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c556:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c560:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c56a:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c574:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c57e:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c588:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c592:	3d 00 10 00 00       	cmp    eax,0x1000
c000c597:	75 a6                	jne    c000c53f <setupINTS()+0x2>
c000c599:	c3                   	ret    

c000c59a <convertLegacyIRQNumber(int)>:
c000c59a:	83 ec 0c             	sub    esp,0xc
c000c59d:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5a7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5ae:	74 0c                	je     c000c5bc <convertLegacyIRQNumber(int)+0x22>
c000c5b0:	83 f8 0f             	cmp    eax,0xf
c000c5b3:	7f 0b                	jg     c000c5c0 <convertLegacyIRQNumber(int)+0x26>
c000c5b5:	0f b6 80 40 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde0c0]
c000c5bc:	83 c4 0c             	add    esp,0xc
c000c5bf:	c3                   	ret    
c000c5c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5c4:	83 ec 0c             	sub    esp,0xc
c000c5c7:	68 04 05 02 c0       	push   0xc0020504
c000c5cc:	e8 68 42 00 00       	call   c0010839 <KePanic(char const*)>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5d8:	83 c4 0c             	add    esp,0xc
c000c5db:	c3                   	ret    

c000c5dc <startGUI(void*)>:
c000c5dc:	55                   	push   ebp
c000c5dd:	89 e5                	mov    ebp,esp
c000c5df:	53                   	push   ebx
c000c5e0:	83 ec 04             	sub    esp,0x4
c000c5e3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5e8:	83 e8 01             	sub    eax,0x1
c000c5eb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5f0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5f5:	85 c0                	test   eax,eax
c000c5f7:	75 01                	jne    c000c5fa <startGUI(void*)+0x1e>
c000c5f9:	fb                   	sti    
c000c5fa:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c600:	83 ec 08             	sub    esp,0x8
c000c603:	6a 01                	push   0x1
c000c605:	68 61 05 02 c0       	push   0xc0020561
c000c60a:	e8 b9 7f 00 00       	call   c00145c8 <Thr::loadDLL(char const*, bool)>
c000c60f:	83 c4 10             	add    esp,0x10
c000c612:	83 ec 08             	sub    esp,0x8
c000c615:	53                   	push   ebx
c000c616:	50                   	push   eax
c000c617:	e8 ec 81 00 00       	call   c0014808 <Thr::executeDLL(unsigned long, void*)>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c625:	83 ec 08             	sub    esp,0x8
c000c628:	6a 01                	push   0x1
c000c62a:	68 7b 05 02 c0       	push   0xc002057b
c000c62f:	e8 94 7f 00 00       	call   c00145c8 <Thr::loadDLL(char const*, bool)>
c000c634:	83 c4 10             	add    esp,0x10
c000c637:	83 ec 08             	sub    esp,0x8
c000c63a:	53                   	push   ebx
c000c63b:	50                   	push   eax
c000c63c:	e8 c7 81 00 00       	call   c0014808 <Thr::executeDLL(unsigned long, void*)>
c000c641:	83 c4 10             	add    esp,0x10
c000c644:	90                   	nop
c000c645:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c648:	c9                   	leave  
c000c649:	c3                   	ret    

c000c64a <startGUIVESA(void*)>:
c000c64a:	55                   	push   ebp
c000c64b:	89 e5                	mov    ebp,esp
c000c64d:	53                   	push   ebx
c000c64e:	83 ec 04             	sub    esp,0x4
c000c651:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c656:	83 e8 01             	sub    eax,0x1
c000c659:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c65e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c663:	85 c0                	test   eax,eax
c000c665:	75 01                	jne    c000c668 <startGUIVESA(void*)+0x1e>
c000c667:	fb                   	sti    
c000c668:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c66e:	83 ec 08             	sub    esp,0x8
c000c671:	6a 01                	push   0x1
c000c673:	68 99 05 02 c0       	push   0xc0020599
c000c678:	e8 4b 7f 00 00       	call   c00145c8 <Thr::loadDLL(char const*, bool)>
c000c67d:	83 c4 10             	add    esp,0x10
c000c680:	83 ec 08             	sub    esp,0x8
c000c683:	53                   	push   ebx
c000c684:	50                   	push   eax
c000c685:	e8 7e 81 00 00       	call   c0014808 <Thr::executeDLL(unsigned long, void*)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c693:	83 ec 08             	sub    esp,0x8
c000c696:	6a 01                	push   0x1
c000c698:	68 7b 05 02 c0       	push   0xc002057b
c000c69d:	e8 26 7f 00 00       	call   c00145c8 <Thr::loadDLL(char const*, bool)>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	83 ec 08             	sub    esp,0x8
c000c6a8:	53                   	push   ebx
c000c6a9:	50                   	push   eax
c000c6aa:	e8 59 81 00 00       	call   c0014808 <Thr::executeDLL(unsigned long, void*)>
c000c6af:	83 c4 10             	add    esp,0x10
c000c6b2:	90                   	nop
c000c6b3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c6b6:	c9                   	leave  
c000c6b7:	c3                   	ret    

c000c6b8 <sendKeyToTerminal(unsigned char)>:
c000c6b8:	55                   	push   ebp
c000c6b9:	89 e5                	mov    ebp,esp
c000c6bb:	83 ec 28             	sub    esp,0x28
c000c6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6c4:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6c9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6cd:	83 ec 08             	sub    esp,0x8
c000c6d0:	52                   	push   edx
c000c6d1:	50                   	push   eax
c000c6d2:	e8 cf c6 ff ff       	call   c0008da6 <VgaText::receiveKey(unsigned char)>
c000c6d7:	83 c4 10             	add    esp,0x10
c000c6da:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6de:	83 f8 0a             	cmp    eax,0xa
c000c6e1:	74 16                	je     c000c6f9 <sendKeyToTerminal(unsigned char)+0x41>
c000c6e3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6e7:	83 f8 03             	cmp    eax,0x3
c000c6ea:	74 0d                	je     c000c6f9 <sendKeyToTerminal(unsigned char)+0x41>
c000c6ec:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6f0:	83 f8 1c             	cmp    eax,0x1c
c000c6f3:	0f 85 97 00 00 00    	jne    c000c790 <sendKeyToTerminal(unsigned char)+0xd8>
c000c6f9:	fa                   	cli    
c000c6fa:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6ff:	83 c0 01             	add    eax,0x1
c000c702:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c707:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c70c:	83 c0 01             	add    eax,0x1
c000c70f:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c714:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c719:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c71c:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c726:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c72a:	74 1f                	je     c000c74b <sendKeyToTerminal(unsigned char)+0x93>
c000c72c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c72f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c732:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c735:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c738:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c73b:	83 ec 0c             	sub    esp,0xc
c000c73e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c741:	e8 e6 8d 00 00       	call   c001552c <unblockTask(ThreadControlBlock*)>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	eb db                	jmp    c000c726 <sendKeyToTerminal(unsigned char)+0x6e>
c000c74b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c750:	83 e8 01             	sub    eax,0x1
c000c753:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c758:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c75d:	85 c0                	test   eax,eax
c000c75f:	75 18                	jne    c000c779 <sendKeyToTerminal(unsigned char)+0xc1>
c000c761:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c766:	85 c0                	test   eax,eax
c000c768:	74 0f                	je     c000c779 <sendKeyToTerminal(unsigned char)+0xc1>
c000c76a:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c774:	e8 bb 88 00 00       	call   c0015034 <schedule()>
c000c779:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c77e:	83 e8 01             	sub    eax,0x1
c000c781:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c786:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c78b:	85 c0                	test   eax,eax
c000c78d:	75 01                	jne    c000c790 <sendKeyToTerminal(unsigned char)+0xd8>
c000c78f:	fb                   	sti    
c000c790:	90                   	nop
c000c791:	c9                   	leave  
c000c792:	c3                   	ret    

c000c793 <sendKeyboardToken(KeyboardToken)>:
c000c793:	55                   	push   ebp
c000c794:	89 e5                	mov    ebp,esp
c000c796:	83 ec 18             	sub    esp,0x18
c000c799:	e8 eb 40 00 00       	call   c0010889 <Krnl::userIOReceived()>
c000c79e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a4:	0f b7 c0             	movzx  eax,ax
c000c7a7:	83 f2 01             	xor    edx,0x1
c000c7aa:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c7b0:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7b5:	85 c0                	test   eax,eax
c000c7b7:	74 24                	je     c000c7dd <sendKeyboardToken(KeyboardToken)+0x4a>
c000c7b9:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000c7bf:	83 ec 04             	sub    esp,0x4
c000c7c2:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c7c7:	83 ec 08             	sub    esp,0x8
c000c7ca:	89 e0                	mov    eax,esp
c000c7cc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000c7cf:	89 08                	mov    DWORD PTR [eax],ecx
c000c7d1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000c7d4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000c7d8:	ff d2                	call   edx
c000c7da:	83 c4 10             	add    esp,0x10
c000c7dd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7e1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c7e4:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7e9:	0f b6 d2             	movzx  edx,dl
c000c7ec:	0f b6 c0             	movzx  eax,al
c000c7ef:	39 c2                	cmp    edx,eax
c000c7f1:	74 1c                	je     c000c80f <sendKeyboardToken(KeyboardToken)+0x7c>
c000c7f3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c7f6:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7fb:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c800:	0f b6 c0             	movzx  eax,al
c000c803:	83 ec 0c             	sub    esp,0xc
c000c806:	50                   	push   eax
c000c807:	e8 f6 bc ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000c80c:	83 c4 10             	add    esp,0x10
c000c80f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c812:	0f b6 c0             	movzx  eax,al
c000c815:	85 c0                	test   eax,eax
c000c817:	0f 84 da 00 00 00    	je     c000c8f7 <sendKeyboardToken(KeyboardToken)+0x164>
c000c81d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c820:	0f b7 c0             	movzx  eax,ax
c000c823:	3d 18 03 00 00       	cmp    eax,0x318
c000c828:	75 06                	jne    c000c830 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c82a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c833:	0f b7 c0             	movzx  eax,ax
c000c836:	3d 19 03 00 00       	cmp    eax,0x319
c000c83b:	75 06                	jne    c000c843 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c83d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c846:	0f b7 c0             	movzx  eax,ax
c000c849:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c84e:	75 06                	jne    c000c856 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c850:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c859:	0f b7 c0             	movzx  eax,ax
c000c85c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c861:	75 06                	jne    c000c869 <sendKeyboardToken(KeyboardToken)+0xd6>
c000c863:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c86c:	0f b7 c0             	movzx  eax,ax
c000c86f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c874:	75 06                	jne    c000c87c <sendKeyboardToken(KeyboardToken)+0xe9>
c000c876:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c87c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c87f:	0f b7 c0             	movzx  eax,ax
c000c882:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c887:	75 06                	jne    c000c88f <sendKeyboardToken(KeyboardToken)+0xfc>
c000c889:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c88f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c892:	0f b7 c0             	movzx  eax,ax
c000c895:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c89a:	75 06                	jne    c000c8a2 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c89c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c8a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a5:	0f b7 c0             	movzx  eax,ax
c000c8a8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c8ad:	75 06                	jne    c000c8b5 <sendKeyboardToken(KeyboardToken)+0x122>
c000c8af:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c8b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b8:	0f b7 c0             	movzx  eax,ax
c000c8bb:	3d 20 03 00 00       	cmp    eax,0x320
c000c8c0:	75 06                	jne    c000c8c8 <sendKeyboardToken(KeyboardToken)+0x135>
c000c8c2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c8c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8cb:	0f b7 c0             	movzx  eax,ax
c000c8ce:	3d 21 03 00 00       	cmp    eax,0x321
c000c8d3:	75 06                	jne    c000c8db <sendKeyboardToken(KeyboardToken)+0x148>
c000c8d5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c8db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8de:	0f b7 c0             	movzx  eax,ax
c000c8e1:	3d 22 03 00 00       	cmp    eax,0x322
c000c8e6:	0f 85 f1 00 00 00    	jne    c000c9dd <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8ec:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8f2:	e9 e6 00 00 00       	jmp    c000c9dd <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8fa:	0f b7 c0             	movzx  eax,ax
c000c8fd:	3d 18 03 00 00       	cmp    eax,0x318
c000c902:	75 0a                	jne    c000c90e <sendKeyboardToken(KeyboardToken)+0x17b>
c000c904:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c90a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c90e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c911:	0f b7 c0             	movzx  eax,ax
c000c914:	3d 19 03 00 00       	cmp    eax,0x319
c000c919:	75 0a                	jne    c000c925 <sendKeyboardToken(KeyboardToken)+0x192>
c000c91b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c921:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c928:	0f b7 c0             	movzx  eax,ax
c000c92b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c930:	75 0a                	jne    c000c93c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c932:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c938:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c93c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c93f:	0f b7 c0             	movzx  eax,ax
c000c942:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c947:	75 0a                	jne    c000c953 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c949:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c94f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c956:	0f b7 c0             	movzx  eax,ax
c000c959:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c95e:	75 0a                	jne    c000c96a <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c960:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c966:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96d:	0f b7 c0             	movzx  eax,ax
c000c970:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c975:	75 0a                	jne    c000c981 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c977:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c97d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c984:	0f b7 c0             	movzx  eax,ax
c000c987:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c98c:	75 0a                	jne    c000c998 <sendKeyboardToken(KeyboardToken)+0x205>
c000c98e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c994:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c99b:	0f b7 c0             	movzx  eax,ax
c000c99e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c9a3:	75 0a                	jne    c000c9af <sendKeyboardToken(KeyboardToken)+0x21c>
c000c9a5:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c9ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9b2:	0f b7 c0             	movzx  eax,ax
c000c9b5:	3d 20 03 00 00       	cmp    eax,0x320
c000c9ba:	75 0a                	jne    c000c9c6 <sendKeyboardToken(KeyboardToken)+0x233>
c000c9bc:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c9c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c9:	0f b7 c0             	movzx  eax,ax
c000c9cc:	3d 21 03 00 00       	cmp    eax,0x321
c000c9d1:	75 0a                	jne    c000c9dd <sendKeyboardToken(KeyboardToken)+0x24a>
c000c9d3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c9d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e0:	0f b7 c0             	movzx  eax,ax
c000c9e3:	3d 00 02 00 00       	cmp    eax,0x200
c000c9e8:	75 2f                	jne    c000ca19 <sendKeyboardToken(KeyboardToken)+0x286>
c000c9ea:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9ef:	83 f0 01             	xor    eax,0x1
c000c9f2:	0f b6 c0             	movzx  eax,al
c000c9f5:	85 c0                	test   eax,eax
c000c9f7:	74 20                	je     c000ca19 <sendKeyboardToken(KeyboardToken)+0x286>
c000c9f9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9fe:	6a 01                	push   0x1
c000ca00:	6a 00                	push   0x0
c000ca02:	68 dc c5 00 c0       	push   0xc000c5dc
c000ca07:	50                   	push   eax
c000ca08:	e8 db 83 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c000ca0d:	83 c4 10             	add    esp,0x10
c000ca10:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca17:	eb 3a                	jmp    c000ca53 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca1c:	0f b7 c0             	movzx  eax,ax
c000ca1f:	3d 01 02 00 00       	cmp    eax,0x201
c000ca24:	75 2d                	jne    c000ca53 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca26:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca2b:	83 f0 01             	xor    eax,0x1
c000ca2e:	0f b6 c0             	movzx  eax,al
c000ca31:	85 c0                	test   eax,eax
c000ca33:	74 1e                	je     c000ca53 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca35:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca3a:	6a 01                	push   0x1
c000ca3c:	6a 00                	push   0x0
c000ca3e:	68 4a c6 00 c0       	push   0xc000c64a
c000ca43:	50                   	push   eax
c000ca44:	e8 9f 83 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c000ca49:	83 c4 10             	add    esp,0x10
c000ca4c:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca56:	0f b7 c0             	movzx  eax,ax
c000ca59:	3d 25 03 00 00       	cmp    eax,0x325
c000ca5e:	75 06                	jne    c000ca66 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca60:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca69:	0f b7 c0             	movzx  eax,ax
c000ca6c:	3d 24 03 00 00       	cmp    eax,0x324
c000ca71:	75 06                	jne    c000ca79 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca73:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca7c:	0f b7 c0             	movzx  eax,ax
c000ca7f:	3d 23 03 00 00       	cmp    eax,0x323
c000ca84:	75 06                	jne    c000ca8c <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ca86:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca8f:	0f b7 c0             	movzx  eax,ax
c000ca92:	3d 26 03 00 00       	cmp    eax,0x326
c000ca97:	75 06                	jne    c000ca9f <sendKeyboardToken(KeyboardToken)+0x30c>
c000ca99:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa2:	0f b7 c0             	movzx  eax,ax
c000caa5:	3d 27 03 00 00       	cmp    eax,0x327
c000caaa:	75 06                	jne    c000cab2 <sendKeyboardToken(KeyboardToken)+0x31f>
c000caac:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab5:	0f b7 c0             	movzx  eax,ax
c000cab8:	3d 22 03 00 00       	cmp    eax,0x322
c000cabd:	75 06                	jne    c000cac5 <sendKeyboardToken(KeyboardToken)+0x332>
c000cabf:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cac5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cac9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cacc:	83 f0 01             	xor    eax,0x1
c000cacf:	0f b6 c0             	movzx  eax,al
c000cad2:	85 c0                	test   eax,eax
c000cad4:	74 7c                	je     c000cb52 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cad6:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cadb:	0f b6 c0             	movzx  eax,al
c000cade:	85 c0                	test   eax,eax
c000cae0:	74 43                	je     c000cb25 <sendKeyboardToken(KeyboardToken)+0x392>
c000cae2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cae6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000caea:	85 c0                	test   eax,eax
c000caec:	74 2b                	je     c000cb19 <sendKeyboardToken(KeyboardToken)+0x386>
c000caee:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000caf4:	89 d0                	mov    eax,edx
c000caf6:	c1 e0 02             	shl    eax,0x2
c000caf9:	01 d0                	add    eax,edx
c000cafb:	d1 e0                	shl    eax,1
c000cafd:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb05:	0f b7 c0             	movzx  eax,ax
c000cb08:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb0b:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb10:	01 d0                	add    eax,edx
c000cb12:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb17:	eb 71                	jmp    c000cb8a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb19:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb23:	eb 65                	jmp    c000cb8a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb25:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb2a:	85 c0                	test   eax,eax
c000cb2c:	74 18                	je     c000cb46 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb2e:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb33:	0f b6 c0             	movzx  eax,al
c000cb36:	83 ec 0c             	sub    esp,0xc
c000cb39:	50                   	push   eax
c000cb3a:	e8 79 fb ff ff       	call   c000c6b8 <sendKeyToTerminal(unsigned char)>
c000cb3f:	83 c4 10             	add    esp,0x10
c000cb42:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb46:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb50:	eb 38                	jmp    c000cb8a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb55:	0f b7 c0             	movzx  eax,ax
c000cb58:	3d 01 01 00 00       	cmp    eax,0x101
c000cb5d:	75 2b                	jne    c000cb8a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb5f:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb64:	85 c0                	test   eax,eax
c000cb66:	74 18                	je     c000cb80 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb68:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb6d:	0f b6 c0             	movzx  eax,al
c000cb70:	83 ec 0c             	sub    esp,0xc
c000cb73:	50                   	push   eax
c000cb74:	e8 3f fb ff ff       	call   c000c6b8 <sendKeyToTerminal(unsigned char)>
c000cb79:	83 c4 10             	add    esp,0x10
c000cb7c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb80:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb8a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cb8d:	83 f0 01             	xor    eax,0x1
c000cb90:	0f b6 c0             	movzx  eax,al
c000cb93:	85 c0                	test   eax,eax
c000cb95:	74 5a                	je     c000cbf1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb97:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb9a:	83 f0 01             	xor    eax,0x1
c000cb9d:	0f b6 c0             	movzx  eax,al
c000cba0:	85 c0                	test   eax,eax
c000cba2:	74 4d                	je     c000cbf1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cba4:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cba9:	83 f0 01             	xor    eax,0x1
c000cbac:	0f b6 c0             	movzx  eax,al
c000cbaf:	85 c0                	test   eax,eax
c000cbb1:	74 3e                	je     c000cbf1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb6:	0f b7 c0             	movzx  eax,ax
c000cbb9:	83 f8 1f             	cmp    eax,0x1f
c000cbbc:	76 0b                	jbe    c000cbc9 <sendKeyboardToken(KeyboardToken)+0x436>
c000cbbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc1:	0f b7 c0             	movzx  eax,ax
c000cbc4:	83 f8 7e             	cmp    eax,0x7e
c000cbc7:	76 16                	jbe    c000cbdf <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbcc:	0f b7 c0             	movzx  eax,ax
c000cbcf:	83 f8 0a             	cmp    eax,0xa
c000cbd2:	74 0b                	je     c000cbdf <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd7:	0f b7 c0             	movzx  eax,ax
c000cbda:	83 f8 08             	cmp    eax,0x8
c000cbdd:	75 12                	jne    c000cbf1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe2:	0f b6 c0             	movzx  eax,al
c000cbe5:	83 ec 0c             	sub    esp,0xc
c000cbe8:	50                   	push   eax
c000cbe9:	e8 ca fa ff ff       	call   c000c6b8 <sendKeyToTerminal(unsigned char)>
c000cbee:	83 c4 10             	add    esp,0x10
c000cbf1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbf4:	83 f0 01             	xor    eax,0x1
c000cbf7:	0f b6 c0             	movzx  eax,al
c000cbfa:	85 c0                	test   eax,eax
c000cbfc:	74 5d                	je     c000cc5b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbfe:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc01:	83 f0 01             	xor    eax,0x1
c000cc04:	0f b6 c0             	movzx  eax,al
c000cc07:	85 c0                	test   eax,eax
c000cc09:	74 50                	je     c000cc5b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc0b:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cc10:	0f b6 c0             	movzx  eax,al
c000cc13:	85 c0                	test   eax,eax
c000cc15:	74 44                	je     c000cc5b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc1a:	0f b7 c0             	movzx  eax,ax
c000cc1d:	83 f8 3f             	cmp    eax,0x3f
c000cc20:	76 39                	jbe    c000cc5b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc25:	0f b7 c0             	movzx  eax,ax
c000cc28:	83 f8 7f             	cmp    eax,0x7f
c000cc2b:	77 2e                	ja     c000cc5b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc30:	88 c2                	mov    dl,al
c000cc32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc35:	0f b7 c0             	movzx  eax,ax
c000cc38:	83 f8 5f             	cmp    eax,0x5f
c000cc3b:	76 04                	jbe    c000cc41 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc3d:	b0 20                	mov    al,0x20
c000cc3f:	eb 02                	jmp    c000cc43 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc41:	b0 00                	mov    al,0x0
c000cc43:	89 d1                	mov    ecx,edx
c000cc45:	29 c1                	sub    ecx,eax
c000cc47:	89 c8                	mov    eax,ecx
c000cc49:	83 e8 40             	sub    eax,0x40
c000cc4c:	0f b6 c0             	movzx  eax,al
c000cc4f:	83 ec 0c             	sub    esp,0xc
c000cc52:	50                   	push   eax
c000cc53:	e8 60 fa ff ff       	call   c000c6b8 <sendKeyToTerminal(unsigned char)>
c000cc58:	83 c4 10             	add    esp,0x10
c000cc5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc5e:	0f b7 c0             	movzx  eax,ax
c000cc61:	3d 00 03 00 00       	cmp    eax,0x300
c000cc66:	75 12                	jne    c000cc7a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc68:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc6b:	83 f0 01             	xor    eax,0x1
c000cc6e:	0f b6 c0             	movzx  eax,al
c000cc71:	85 c0                	test   eax,eax
c000cc73:	74 05                	je     c000cc7a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc75:	e8 89 b8 ff ff       	call   c0008503 <doTerminalCycle()>
c000cc7a:	90                   	nop
c000cc7b:	c9                   	leave  
c000cc7c:	c3                   	ret    

c000cc7d <clearInternalKeybuffer(VgaText*)>:
c000cc7d:	55                   	push   ebp
c000cc7e:	89 e5                	mov    ebp,esp
c000cc80:	83 ec 08             	sub    esp,0x8
c000cc83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc86:	05 02 01 00 00       	add    eax,0x102
c000cc8b:	83 ec 0c             	sub    esp,0xc
c000cc8e:	50                   	push   eax
c000cc8f:	e8 ec 38 ff ff       	call   c0000580 <strlen>
c000cc94:	83 c4 10             	add    esp,0x10
c000cc97:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc9a:	81 c2 02 01 00 00    	add    edx,0x102
c000cca0:	83 ec 04             	sub    esp,0x4
c000cca3:	50                   	push   eax
c000cca4:	6a 00                	push   0x0
c000cca6:	52                   	push   edx
c000cca7:	e8 44 38 ff ff       	call   c00004f0 <memset>
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	90                   	nop
c000ccb0:	c9                   	leave  
c000ccb1:	c3                   	ret    

c000ccb2 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ccb2:	55                   	push   ebp
c000ccb3:	89 e5                	mov    ebp,esp
c000ccb5:	83 ec 18             	sub    esp,0x18
c000ccb8:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ccbd:	85 c0                	test   eax,eax
c000ccbf:	74 2a                	je     c000cceb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ccc1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ccc7:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000cccd:	83 ec 04             	sub    esp,0x4
c000ccd0:	68 e0 6f 02 c0       	push   0xc0026fe0
c000ccd5:	83 ec 08             	sub    esp,0x8
c000ccd8:	89 e0                	mov    eax,esp
c000ccda:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000ccdd:	89 08                	mov    DWORD PTR [eax],ecx
c000ccdf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000cce2:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000cce6:	ff d2                	call   edx
c000cce8:	83 c4 10             	add    esp,0x10
c000cceb:	fb                   	sti    
c000ccec:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ccf3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ccf7:	0f 84 0d 01 00 00    	je     c000ce0a <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000ccfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd00:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd06:	0f be c0             	movsx  eax,al
c000cd09:	85 c0                	test   eax,eax
c000cd0b:	75 2c                	jne    c000cd39 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cd0d:	fa                   	cli    
c000cd0e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd13:	83 c0 01             	add    eax,0x1
c000cd16:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd1b:	e8 14 83 00 00       	call   c0015034 <schedule()>
c000cd20:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd25:	83 e8 01             	sub    eax,0x1
c000cd28:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd2d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd32:	85 c0                	test   eax,eax
c000cd34:	75 c7                	jne    c000ccfd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd36:	fb                   	sti    
c000cd37:	eb c4                	jmp    c000ccfd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd3c:	8d 50 01             	lea    edx,[eax+0x1]
c000cd3f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd45:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd4b:	88 10                	mov    BYTE PTR [eax],dl
c000cd4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd50:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd56:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd59:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd5d:	83 f8 03             	cmp    eax,0x3
c000cd60:	75 1e                	jne    c000cd80 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd62:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd67:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd6c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd72:	83 ec 08             	sub    esp,0x8
c000cd75:	6a 02                	push   0x2
c000cd77:	50                   	push   eax
c000cd78:	e8 56 3f 00 00       	call   c0010cd3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd7d:	83 c4 10             	add    esp,0x10
c000cd80:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd84:	83 f8 1c             	cmp    eax,0x1c
c000cd87:	75 1e                	jne    c000cda7 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cd89:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd93:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd99:	83 ec 08             	sub    esp,0x8
c000cd9c:	6a 09                	push   0x9
c000cd9e:	50                   	push   eax
c000cd9f:	e8 2f 3f 00 00       	call   c0010cd3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdaa:	05 02 01 00 00       	add    eax,0x102
c000cdaf:	83 ec 0c             	sub    esp,0xc
c000cdb2:	50                   	push   eax
c000cdb3:	e8 c8 37 ff ff       	call   c0000580 <strlen>
c000cdb8:	83 c4 10             	add    esp,0x10
c000cdbb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdbe:	81 c2 02 01 00 00    	add    edx,0x102
c000cdc4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cdc7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdca:	81 c2 02 01 00 00    	add    edx,0x102
c000cdd0:	83 ec 04             	sub    esp,0x4
c000cdd3:	50                   	push   eax
c000cdd4:	51                   	push   ecx
c000cdd5:	52                   	push   edx
c000cdd6:	e8 f5 35 ff ff       	call   c00003d0 <memmove>
c000cddb:	83 c4 10             	add    esp,0x10
c000cdde:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cde2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cde6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdea:	83 f8 0a             	cmp    eax,0xa
c000cded:	74 16                	je     c000ce05 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdef:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdf3:	83 f8 03             	cmp    eax,0x3
c000cdf6:	74 0d                	je     c000ce05 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdf8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdfc:	83 f8 1c             	cmp    eax,0x1c
c000cdff:	0f 85 ee fe ff ff    	jne    c000ccf3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce08:	eb 03                	jmp    c000ce0d <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000ce0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce0d:	c9                   	leave  
c000ce0e:	c3                   	ret    
c000ce0f:	90                   	nop

c000ce10 <Keyboard::Keyboard(char const*)>:
c000ce10:	83 ec 0c             	sub    esp,0xc
c000ce13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce17:	83 ec 08             	sub    esp,0x8
c000ce1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce1e:	50                   	push   eax
c000ce1f:	e8 44 f1 ff ff       	call   c000bf68 <Device::Device(char const*)>
c000ce24:	83 c4 10             	add    esp,0x10
c000ce27:	ba bc 05 02 c0       	mov    edx,0xc00205bc
c000ce2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce30:	89 10                	mov    DWORD PTR [eax],edx
c000ce32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce36:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce40:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce47:	90                   	nop
c000ce48:	83 c4 0c             	add    esp,0xc
c000ce4b:	c3                   	ret    

c000ce4c <Keyboard::~Keyboard()>:
c000ce4c:	83 ec 0c             	sub    esp,0xc
c000ce4f:	ba bc 05 02 c0       	mov    edx,0xc00205bc
c000ce54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce58:	89 10                	mov    DWORD PTR [eax],edx
c000ce5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5e:	83 ec 0c             	sub    esp,0xc
c000ce61:	50                   	push   eax
c000ce62:	e8 6b ee ff ff       	call   c000bcd2 <Device::~Device()>
c000ce67:	83 c4 10             	add    esp,0x10
c000ce6a:	90                   	nop
c000ce6b:	83 c4 0c             	add    esp,0xc
c000ce6e:	c3                   	ret    
c000ce6f:	90                   	nop

c000ce70 <Keyboard::~Keyboard()>:
c000ce70:	83 ec 0c             	sub    esp,0xc
c000ce73:	83 ec 0c             	sub    esp,0xc
c000ce76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7a:	e8 cd ff ff ff       	call   c000ce4c <Keyboard::~Keyboard()>
c000ce7f:	83 c4 10             	add    esp,0x10
c000ce82:	83 ec 08             	sub    esp,0x8
c000ce85:	68 5c 01 00 00       	push   0x15c
c000ce8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce8e:	e8 de d9 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000ce93:	83 c4 10             	add    esp,0x10
c000ce96:	83 c4 0c             	add    esp,0xc
c000ce99:	c3                   	ret    

c000ce9a <LogicalDisk::close(int, int, void*)>:
c000ce9a:	83 c8 ff             	or     eax,0xffffffff
c000ce9d:	c3                   	ret    

c000ce9e <LogicalDisk::~LogicalDisk()>:
c000ce9e:	83 ec 0c             	sub    esp,0xc
c000cea1:	ba 34 06 02 c0       	mov    edx,0xc0020634
c000cea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceaa:	89 10                	mov    DWORD PTR [eax],edx
c000ceac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb0:	83 ec 0c             	sub    esp,0xc
c000ceb3:	50                   	push   eax
c000ceb4:	e8 19 ee ff ff       	call   c000bcd2 <Device::~Device()>
c000ceb9:	83 c4 10             	add    esp,0x10
c000cebc:	90                   	nop
c000cebd:	83 c4 0c             	add    esp,0xc
c000cec0:	c3                   	ret    
c000cec1:	90                   	nop

c000cec2 <LogicalDisk::~LogicalDisk()>:
c000cec2:	83 ec 0c             	sub    esp,0xc
c000cec5:	83 ec 0c             	sub    esp,0xc
c000cec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecc:	e8 cd ff ff ff       	call   c000ce9e <LogicalDisk::~LogicalDisk()>
c000ced1:	83 c4 10             	add    esp,0x10
c000ced4:	83 ec 08             	sub    esp,0x8
c000ced7:	68 78 01 00 00       	push   0x178
c000cedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee0:	e8 8c d9 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000cee5:	83 c4 10             	add    esp,0x10
c000cee8:	83 c4 0c             	add    esp,0xc
c000ceeb:	c3                   	ret    

c000ceec <LogicalDisk::open(int, int, void*)>:
c000ceec:	83 ec 18             	sub    esp,0x18
c000ceef:	68 e8 05 02 c0       	push   0xc00205e8
c000cef4:	e8 40 39 00 00       	call   c0010839 <KePanic(char const*)>
c000cef9:	83 c8 ff             	or     eax,0xffffffff
c000cefc:	83 c4 1c             	add    esp,0x1c
c000ceff:	c3                   	ret    

c000cf00 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf00:	53                   	push   ebx
c000cf01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf0d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf13:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf19:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf1f:	77 10                	ja     c000cf31 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf21:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf27:	89 d3                	mov    ebx,edx
c000cf29:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf2f:	72 05                	jb     c000cf36 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf31:	83 c8 ff             	or     eax,0xffffffff
c000cf34:	89 c2                	mov    edx,eax
c000cf36:	5b                   	pop    ebx
c000cf37:	c3                   	ret    

c000cf38 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf38:	56                   	push   esi
c000cf39:	83 c8 ff             	or     eax,0xffffffff
c000cf3c:	53                   	push   ebx
c000cf3d:	89 c2                	mov    edx,eax
c000cf3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf43:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf4b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf51:	77 27                	ja     c000cf7a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf53:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf59:	89 d8                	mov    eax,ebx
c000cf5b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf61:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf66:	89 c2                	mov    edx,eax
c000cf68:	73 10                	jae    c000cf7a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf6a:	89 c8                	mov    eax,ecx
c000cf6c:	89 da                	mov    edx,ebx
c000cf6e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf74:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf7a:	5b                   	pop    ebx
c000cf7b:	5e                   	pop    esi
c000cf7c:	c3                   	ret    
c000cf7d:	90                   	nop

c000cf7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf7e:	83 ec 1c             	sub    esp,0x1c
c000cf81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cf95:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfa4:	83 ec 08             	sub    esp,0x8
c000cfa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfab:	50                   	push   eax
c000cfac:	e8 b7 ef ff ff       	call   c000bf68 <Device::Device(char const*)>
c000cfb1:	83 c4 10             	add    esp,0x10
c000cfb4:	ba 34 06 02 c0       	mov    edx,0xc0020634
c000cfb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfbd:	89 10                	mov    DWORD PTR [eax],edx
c000cfbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfc3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfce:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cfd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfd9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfe4:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cfee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cff2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cff6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cffa:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d000:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d006:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d00a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d00d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d011:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d017:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d01d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d021:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d025:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d02f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d039:	90                   	nop
c000d03a:	83 c4 1c             	add    esp,0x1c
c000d03d:	c3                   	ret    

c000d03e <LogicalDisk::assignDriveLetter()>:
c000d03e:	55                   	push   ebp
c000d03f:	57                   	push   edi
c000d040:	56                   	push   esi
c000d041:	53                   	push   ebx
c000d042:	83 ec 14             	sub    esp,0x14
c000d045:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d049:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d04f:	b0 41                	mov    al,0x41
c000d051:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d057:	84 d2                	test   dl,dl
c000d059:	75 02                	jne    c000d05d <LogicalDisk::assignDriveLetter()+0x1f>
c000d05b:	b0 43                	mov    al,0x43
c000d05d:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d063:	0f b6 ca             	movzx  ecx,dl
c000d066:	0f be e8             	movsx  ebp,al
c000d069:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d06d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d071:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d077:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d07b:	3c 43                	cmp    al,0x43
c000d07d:	75 10                	jne    c000d08f <LogicalDisk::assignDriveLetter()+0x51>
c000d07f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d086:	75 5a                	jne    c000d0e2 <LogicalDisk::assignDriveLetter()+0xa4>
c000d088:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d08d:	75 53                	jne    c000d0e2 <LogicalDisk::assignDriveLetter()+0xa4>
c000d08f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d092:	ba 01 00 00 00       	mov    edx,0x1
c000d097:	89 34 24             	mov    DWORD PTR [esp],esi
c000d09a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d09d:	d3 e2                	shl    edx,cl
c000d09f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0a3:	89 d7                	mov    edi,edx
c000d0a5:	89 d6                	mov    esi,edx
c000d0a7:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d0ab:	c1 ff 1f             	sar    edi,0x1f
c000d0ae:	21 f9                	and    ecx,edi
c000d0b0:	09 d1                	or     ecx,edx
c000d0b2:	75 2e                	jne    c000d0e2 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0b8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0bc:	09 f2                	or     edx,esi
c000d0be:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0c1:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d0c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0cb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0d1:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d0d8:	09 fa                	or     edx,edi
c000d0da:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d0e0:	eb 0d                	jmp    c000d0ef <LogicalDisk::assignDriveLetter()+0xb1>
c000d0e2:	8d 50 01             	lea    edx,[eax+0x1]
c000d0e5:	45                   	inc    ebp
c000d0e6:	80 fa 5b             	cmp    dl,0x5b
c000d0e9:	88 d0                	mov    al,dl
c000d0eb:	75 8e                	jne    c000d07b <LogicalDisk::assignDriveLetter()+0x3d>
c000d0ed:	31 c0                	xor    eax,eax
c000d0ef:	83 c4 14             	add    esp,0x14
c000d0f2:	5b                   	pop    ebx
c000d0f3:	5e                   	pop    esi
c000d0f4:	5f                   	pop    edi
c000d0f5:	5d                   	pop    ebp
c000d0f6:	c3                   	ret    
c000d0f7:	90                   	nop

c000d0f8 <LogicalDisk::mount()>:
c000d0f8:	56                   	push   esi
c000d0f9:	53                   	push   ebx
c000d0fa:	53                   	push   ebx
c000d0fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0ff:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d105:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d10f:	85 db                	test   ebx,ebx
c000d111:	74 27                	je     c000d13a <LogicalDisk::mount()+0x42>
c000d113:	51                   	push   ecx
c000d114:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d11b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d11d:	83 e8 41             	sub    eax,0x41
c000d120:	50                   	push   eax
c000d121:	56                   	push   esi
c000d122:	53                   	push   ebx
c000d123:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d126:	83 c4 10             	add    esp,0x10
c000d129:	84 c0                	test   al,al
c000d12b:	74 08                	je     c000d135 <LogicalDisk::mount()+0x3d>
c000d12d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d133:	eb 07                	jmp    c000d13c <LogicalDisk::mount()+0x44>
c000d135:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d138:	eb d5                	jmp    c000d10f <LogicalDisk::mount()+0x17>
c000d13a:	31 c0                	xor    eax,eax
c000d13c:	5a                   	pop    edx
c000d13d:	5b                   	pop    ebx
c000d13e:	5e                   	pop    esi
c000d13f:	c3                   	ret    

c000d140 <LogicalDisk::unmount()>:
c000d140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d144:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d14e:	c3                   	ret    
c000d14f:	90                   	nop

c000d150 <LogicalDisk::eject()>:
c000d150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d154:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d15a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d15c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d160:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d163:	90                   	nop

c000d164 <LogicalDisk::unassignDriveLetter()>:
c000d164:	57                   	push   edi
c000d165:	56                   	push   esi
c000d166:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d16a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d171:	85 c9                	test   ecx,ecx
c000d173:	75 0f                	jne    c000d184 <LogicalDisk::unassignDriveLetter()+0x20>
c000d175:	c7 44 24 0c 0c 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc002060c
c000d17d:	5e                   	pop    esi
c000d17e:	5f                   	pop    edi
c000d17f:	e9 b5 36 00 00       	jmp    c0010839 <KePanic(char const*)>
c000d184:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d18b:	83 e9 41             	sub    ecx,0x41
c000d18e:	b8 01 00 00 00       	mov    eax,0x1
c000d193:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d19e:	d3 e0                	shl    eax,cl
c000d1a0:	89 c7                	mov    edi,eax
c000d1a2:	f7 d0                	not    eax
c000d1a4:	c1 ff 1f             	sar    edi,0x1f
c000d1a7:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d1ad:	89 fe                	mov    esi,edi
c000d1af:	f7 d6                	not    esi
c000d1b1:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d1b7:	5e                   	pop    esi
c000d1b8:	5f                   	pop    edi
c000d1b9:	c3                   	ret    

c000d1ba <LogicalDisk::read(unsigned long long, int, void*)>:
c000d1ba:	57                   	push   edi
c000d1bb:	56                   	push   esi
c000d1bc:	53                   	push   ebx
c000d1bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1c5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1cd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1d3:	77 41                	ja     c000d216 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1d5:	99                   	cdq    
c000d1d6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1dc:	01 c8                	add    eax,ecx
c000d1de:	11 da                	adc    edx,ebx
c000d1e0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1e6:	19 d7                	sbb    edi,edx
c000d1e8:	72 33                	jb     c000d21d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d1ea:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1f0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1fa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1fe:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d204:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d20a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d20e:	5b                   	pop    ebx
c000d20f:	5e                   	pop    esi
c000d210:	5f                   	pop    edi
c000d211:	e9 d4 0a 00 00       	jmp    c000dcea <VCache::read(unsigned long long, int, void*)>
c000d216:	b8 05 00 00 00       	mov    eax,0x5
c000d21b:	eb 05                	jmp    c000d222 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d21d:	b8 07 00 00 00       	mov    eax,0x7
c000d222:	5b                   	pop    ebx
c000d223:	5e                   	pop    esi
c000d224:	5f                   	pop    edi
c000d225:	c3                   	ret    

c000d226 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d226:	57                   	push   edi
c000d227:	56                   	push   esi
c000d228:	53                   	push   ebx
c000d229:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d22d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d231:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d235:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d239:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d23f:	77 41                	ja     c000d282 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d241:	99                   	cdq    
c000d242:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d248:	01 c8                	add    eax,ecx
c000d24a:	11 da                	adc    edx,ebx
c000d24c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d252:	19 d7                	sbb    edi,edx
c000d254:	72 33                	jb     c000d289 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d256:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d25c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d262:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d266:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d26a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d270:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d27a:	5b                   	pop    ebx
c000d27b:	5e                   	pop    esi
c000d27c:	5f                   	pop    edi
c000d27d:	e9 6e 09 00 00       	jmp    c000dbf0 <VCache::write(unsigned long long, int, void*)>
c000d282:	b8 05 00 00 00       	mov    eax,0x5
c000d287:	eb 05                	jmp    c000d28e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d289:	b8 07 00 00 00       	mov    eax,0x7
c000d28e:	5b                   	pop    ebx
c000d28f:	5e                   	pop    esi
c000d290:	5f                   	pop    edi
c000d291:	c3                   	ret    
c000d292:	66 90                	xchg   ax,ax

c000d294 <Mouse::Mouse(char const*)>:
c000d294:	83 ec 0c             	sub    esp,0xc
c000d297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29b:	83 ec 08             	sub    esp,0x8
c000d29e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a2:	50                   	push   eax
c000d2a3:	e8 c0 ec ff ff       	call   c000bf68 <Device::Device(char const*)>
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	ba 60 06 02 c0       	mov    edx,0xc0020660
c000d2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b4:	89 10                	mov    DWORD PTR [eax],edx
c000d2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ba:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2c4:	90                   	nop
c000d2c5:	83 c4 0c             	add    esp,0xc
c000d2c8:	c3                   	ret    
c000d2c9:	90                   	nop
c000d2ca:	66 90                	xchg   ax,ax

c000d2cc <Mouse::~Mouse()>:
c000d2cc:	83 ec 0c             	sub    esp,0xc
c000d2cf:	ba 60 06 02 c0       	mov    edx,0xc0020660
c000d2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d8:	89 10                	mov    DWORD PTR [eax],edx
c000d2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2de:	83 ec 0c             	sub    esp,0xc
c000d2e1:	50                   	push   eax
c000d2e2:	e8 eb e9 ff ff       	call   c000bcd2 <Device::~Device()>
c000d2e7:	83 c4 10             	add    esp,0x10
c000d2ea:	90                   	nop
c000d2eb:	83 c4 0c             	add    esp,0xc
c000d2ee:	c3                   	ret    
c000d2ef:	90                   	nop

c000d2f0 <Mouse::~Mouse()>:
c000d2f0:	83 ec 0c             	sub    esp,0xc
c000d2f3:	83 ec 0c             	sub    esp,0xc
c000d2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fa:	e8 cd ff ff ff       	call   c000d2cc <Mouse::~Mouse()>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	83 ec 08             	sub    esp,0x8
c000d305:	68 58 01 00 00       	push   0x158
c000d30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d30e:	e8 5e d5 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000d313:	83 c4 10             	add    esp,0x10
c000d316:	83 c4 0c             	add    esp,0xc
c000d319:	c3                   	ret    

c000d31a <NIC::getMAC()>:
c000d31a:	31 c0                	xor    eax,eax
c000d31c:	31 d2                	xor    edx,edx
c000d31e:	c3                   	ret    
c000d31f:	90                   	nop

c000d320 <NIC::write(int, unsigned char*, int*)>:
c000d320:	b8 01 00 00 00       	mov    eax,0x1
c000d325:	c3                   	ret    

c000d326 <NIC::NIC(char const*)>:
c000d326:	83 ec 0c             	sub    esp,0xc
c000d329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d32d:	83 ec 08             	sub    esp,0x8
c000d330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d334:	50                   	push   eax
c000d335:	e8 2e ec ff ff       	call   c000bf68 <Device::Device(char const*)>
c000d33a:	83 c4 10             	add    esp,0x10
c000d33d:	ba 8c 06 02 c0       	mov    edx,0xc002068c
c000d342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d346:	89 10                	mov    DWORD PTR [eax],edx
c000d348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d34c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d356:	90                   	nop
c000d357:	83 c4 0c             	add    esp,0xc
c000d35a:	c3                   	ret    
c000d35b:	90                   	nop

c000d35c <NIC::~NIC()>:
c000d35c:	83 ec 0c             	sub    esp,0xc
c000d35f:	ba 8c 06 02 c0       	mov    edx,0xc002068c
c000d364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d368:	89 10                	mov    DWORD PTR [eax],edx
c000d36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d36e:	83 ec 0c             	sub    esp,0xc
c000d371:	50                   	push   eax
c000d372:	e8 5b e9 ff ff       	call   c000bcd2 <Device::~Device()>
c000d377:	83 c4 10             	add    esp,0x10
c000d37a:	90                   	nop
c000d37b:	83 c4 0c             	add    esp,0xc
c000d37e:	c3                   	ret    
c000d37f:	90                   	nop

c000d380 <NIC::~NIC()>:
c000d380:	83 ec 0c             	sub    esp,0xc
c000d383:	83 ec 0c             	sub    esp,0xc
c000d386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d38a:	e8 cd ff ff ff       	call   c000d35c <NIC::~NIC()>
c000d38f:	83 c4 10             	add    esp,0x10
c000d392:	83 ec 08             	sub    esp,0x8
c000d395:	68 58 01 00 00       	push   0x158
c000d39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39e:	e8 ce d4 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000d3a3:	83 c4 10             	add    esp,0x10
c000d3a6:	83 c4 0c             	add    esp,0xc
c000d3a9:	c3                   	ret    

c000d3aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3aa:	55                   	push   ebp
c000d3ab:	57                   	push   edi
c000d3ac:	56                   	push   esi
c000d3ad:	53                   	push   ebx
c000d3ae:	81 ec 28 01 00 00    	sub    esp,0x128
c000d3b4:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d3bb:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d3c2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d3c9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d3d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3d8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3df:	e8 80 ec ff ff       	call   c000c064 <Device::getName()>
c000d3e4:	5a                   	pop    edx
c000d3e5:	59                   	pop    ecx
c000d3e6:	50                   	push   eax
c000d3e7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3eb:	55                   	push   ebp
c000d3ec:	e8 5f 32 ff ff       	call   c0000650 <strcpy>
c000d3f1:	5b                   	pop    ebx
c000d3f2:	58                   	pop    eax
c000d3f3:	68 b8 06 02 c0       	push   0xc00206b8
c000d3f8:	55                   	push   ebp
c000d3f9:	e8 72 34 ff ff       	call   c0000870 <strcat>
c000d3fe:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d405:	e8 c1 a6 ff ff       	call   c0007acb <malloc>
c000d40a:	83 c4 0c             	add    esp,0xc
c000d40d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d411:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d415:	89 c3                	mov    ebx,eax
c000d417:	57                   	push   edi
c000d418:	56                   	push   esi
c000d419:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d420:	55                   	push   ebp
c000d421:	50                   	push   eax
c000d422:	e8 57 fb ff ff       	call   c000cf7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d427:	83 c4 14             	add    esp,0x14
c000d42a:	53                   	push   ebx
c000d42b:	e8 0e fc ff ff       	call   c000d03e <LogicalDisk::assignDriveLetter()>
c000d430:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d433:	e8 c0 fc ff ff       	call   c000d0f8 <LogicalDisk::mount()>
c000d438:	58                   	pop    eax
c000d439:	5a                   	pop    edx
c000d43a:	53                   	push   ebx
c000d43b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d442:	e8 89 e9 ff ff       	call   c000bdd0 <Device::addChild(Device*)>
c000d447:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d44d:	5b                   	pop    ebx
c000d44e:	5e                   	pop    esi
c000d44f:	5f                   	pop    edi
c000d450:	5d                   	pop    ebp
c000d451:	c3                   	ret    

c000d452 <createPartitionsForDisk(PhysicalDisk*)>:
c000d452:	55                   	push   ebp
c000d453:	57                   	push   edi
c000d454:	56                   	push   esi
c000d455:	53                   	push   ebx
c000d456:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d45c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d463:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d469:	3d 00 02 00 00       	cmp    eax,0x200
c000d46e:	74 27                	je     c000d497 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d470:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d476:	83 ec 10             	sub    esp,0x10
c000d479:	99                   	cdq    
c000d47a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d480:	52                   	push   edx
c000d481:	50                   	push   eax
c000d482:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d486:	c1 e6 0a             	shl    esi,0xa
c000d489:	89 fd                	mov    ebp,edi
c000d48b:	55                   	push   ebp
c000d48c:	56                   	push   esi
c000d48d:	e8 6e 11 01 00       	call   c001e600 <__udivdi3>
c000d492:	e9 b9 00 00 00       	jmp    c000d550 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d497:	83 ec 0c             	sub    esp,0xc
c000d49a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d4a0:	56                   	push   esi
c000d4a1:	6a 01                	push   0x1
c000d4a3:	6a 00                	push   0x0
c000d4a5:	6a 00                	push   0x0
c000d4a7:	53                   	push   ebx
c000d4a8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4ab:	83 c4 20             	add    esp,0x20
c000d4ae:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d4b6:	75 0a                	jne    c000d4c2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d4b8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d4c0:	74 2c                	je     c000d4ee <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d4c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4c8:	83 ec 10             	sub    esp,0x10
c000d4cb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4d1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4d7:	89 f7                	mov    edi,esi
c000d4d9:	c1 ff 1f             	sar    edi,0x1f
c000d4dc:	57                   	push   edi
c000d4dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4e1:	56                   	push   esi
c000d4e2:	c1 e0 0a             	shl    eax,0xa
c000d4e5:	52                   	push   edx
c000d4e6:	50                   	push   eax
c000d4e7:	e8 14 11 01 00       	call   c001e600 <__udivdi3>
c000d4ec:	eb 62                	jmp    c000d550 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4ee:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4f5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d4fc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d503:	89 cf                	mov    edi,ecx
c000d505:	83 e2 7f             	and    edx,0x7f
c000d508:	83 e7 7f             	and    edi,0x7f
c000d50b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d50e:	83 e0 7f             	and    eax,0x7f
c000d511:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d514:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d51b:	83 e0 7f             	and    eax,0x7f
c000d51e:	01 d0                	add    eax,edx
c000d520:	84 c0                	test   al,al
c000d522:	89 c5                	mov    ebp,eax
c000d524:	74 41                	je     c000d567 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d526:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d52c:	83 ec 10             	sub    esp,0x10
c000d52f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d535:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d53b:	89 f7                	mov    edi,esi
c000d53d:	c1 ff 1f             	sar    edi,0x1f
c000d540:	57                   	push   edi
c000d541:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d545:	56                   	push   esi
c000d546:	c1 e0 0a             	shl    eax,0xa
c000d549:	52                   	push   edx
c000d54a:	50                   	push   eax
c000d54b:	e8 b0 10 01 00       	call   c001e600 <__udivdi3>
c000d550:	83 c4 14             	add    esp,0x14
c000d553:	52                   	push   edx
c000d554:	50                   	push   eax
c000d555:	6a 00                	push   0x0
c000d557:	6a 00                	push   0x0
c000d559:	53                   	push   ebx
c000d55a:	e8 4b fe ff ff       	call   c000d3aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d55f:	83 c4 20             	add    esp,0x20
c000d562:	e9 73 01 00 00       	jmp    c000d6da <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d567:	89 f0                	mov    eax,esi
c000d569:	31 c9                	xor    ecx,ecx
c000d56b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d572:	75 02                	jne    c000d576 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d574:	89 cd                	mov    ebp,ecx
c000d576:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d57e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d585:	83 c0 10             	add    eax,0x10
c000d588:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d590:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d597:	c1 e2 08             	shl    edx,0x8
c000d59a:	c1 e6 10             	shl    esi,0x10
c000d59d:	09 f2                	or     edx,esi
c000d59f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d5a6:	09 f2                	or     edx,esi
c000d5a8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d5af:	c1 e6 18             	shl    esi,0x18
c000d5b2:	09 f2                	or     edx,esi
c000d5b4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d5bb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d5bf:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d5c6:	c1 e6 10             	shl    esi,0x10
c000d5c9:	c1 e2 08             	shl    edx,0x8
c000d5cc:	09 f2                	or     edx,esi
c000d5ce:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d5d5:	09 f2                	or     edx,esi
c000d5d7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d5de:	c1 e6 18             	shl    esi,0x18
c000d5e1:	09 f2                	or     edx,esi
c000d5e3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d5e7:	41                   	inc    ecx
c000d5e8:	83 f9 04             	cmp    ecx,0x4
c000d5eb:	0f 85 7a ff ff ff    	jne    c000d56b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f5:	83 f0 01             	xor    eax,0x1
c000d5f8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5fc:	75 4f                	jne    c000d64d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d602:	83 f0 01             	xor    eax,0x1
c000d605:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d609:	75 42                	jne    c000d64d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d60b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d611:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d619:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d61f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d627:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d62d:	89 f7                	mov    edi,esi
c000d62f:	c1 ff 1f             	sar    edi,0x1f
c000d632:	57                   	push   edi
c000d633:	56                   	push   esi
c000d634:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d638:	52                   	push   edx
c000d639:	c1 e0 0a             	shl    eax,0xa
c000d63c:	50                   	push   eax
c000d63d:	e8 be 0f 01 00       	call   c001e600 <__udivdi3>
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d649:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d64d:	89 e8                	mov    eax,ebp
c000d64f:	0f b6 e8             	movzx  ebp,al
c000d652:	85 ed                	test   ebp,ebp
c000d654:	74 50                	je     c000d6a6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d656:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d65a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d65e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d662:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d66a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d66e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d672:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d676:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d67a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d686:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d68a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d68e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d692:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d696:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d69a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d69e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d6a2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d6a6:	31 ed                	xor    ebp,ebp
c000d6a8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6ac:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6b0:	89 f8                	mov    eax,edi
c000d6b2:	09 f0                	or     eax,esi
c000d6b4:	74 1e                	je     c000d6d4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6b6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6ba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6be:	89 d1                	mov    ecx,edx
c000d6c0:	09 c1                	or     ecx,eax
c000d6c2:	74 10                	je     c000d6d4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6c4:	83 ec 0c             	sub    esp,0xc
c000d6c7:	57                   	push   edi
c000d6c8:	56                   	push   esi
c000d6c9:	52                   	push   edx
c000d6ca:	50                   	push   eax
c000d6cb:	53                   	push   ebx
c000d6cc:	e8 d9 fc ff ff       	call   c000d3aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6d1:	83 c4 20             	add    esp,0x20
c000d6d4:	45                   	inc    ebp
c000d6d5:	83 fd 04             	cmp    ebp,0x4
c000d6d8:	75 ce                	jne    c000d6a8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d6da:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d6e0:	5b                   	pop    ebx
c000d6e1:	5e                   	pop    esi
c000d6e2:	5f                   	pop    edi
c000d6e3:	5d                   	pop    ebp
c000d6e4:	c3                   	ret    
c000d6e5:	66 90                	xchg   ax,ax
c000d6e7:	90                   	nop

c000d6e8 <Serial::Serial(char const*)>:
c000d6e8:	83 ec 0c             	sub    esp,0xc
c000d6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ef:	83 ec 08             	sub    esp,0x8
c000d6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6f6:	50                   	push   eax
c000d6f7:	e8 6c e8 ff ff       	call   c000bf68 <Device::Device(char const*)>
c000d6fc:	83 c4 10             	add    esp,0x10
c000d6ff:	ba cc 06 02 c0       	mov    edx,0xc00206cc
c000d704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d708:	89 10                	mov    DWORD PTR [eax],edx
c000d70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d718:	90                   	nop
c000d719:	83 c4 0c             	add    esp,0xc
c000d71c:	c3                   	ret    
c000d71d:	90                   	nop
c000d71e:	66 90                	xchg   ax,ax

c000d720 <Serial::~Serial()>:
c000d720:	83 ec 0c             	sub    esp,0xc
c000d723:	ba cc 06 02 c0       	mov    edx,0xc00206cc
c000d728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d72c:	89 10                	mov    DWORD PTR [eax],edx
c000d72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d732:	83 ec 0c             	sub    esp,0xc
c000d735:	50                   	push   eax
c000d736:	e8 97 e5 ff ff       	call   c000bcd2 <Device::~Device()>
c000d73b:	83 c4 10             	add    esp,0x10
c000d73e:	90                   	nop
c000d73f:	83 c4 0c             	add    esp,0xc
c000d742:	c3                   	ret    
c000d743:	90                   	nop

c000d744 <Serial::~Serial()>:
c000d744:	83 ec 0c             	sub    esp,0xc
c000d747:	83 ec 0c             	sub    esp,0xc
c000d74a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d74e:	e8 cd ff ff ff       	call   c000d720 <Serial::~Serial()>
c000d753:	83 c4 10             	add    esp,0x10
c000d756:	83 ec 08             	sub    esp,0x8
c000d759:	68 58 01 00 00       	push   0x158
c000d75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d762:	e8 0a d1 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	83 c4 0c             	add    esp,0xc
c000d76d:	c3                   	ret    
c000d76e:	66 90                	xchg   ax,ax

c000d770 <Timer::Timer(char const*)>:
c000d770:	83 ec 0c             	sub    esp,0xc
c000d773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d777:	83 ec 08             	sub    esp,0x8
c000d77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77e:	50                   	push   eax
c000d77f:	e8 e4 e7 ff ff       	call   c000bf68 <Device::Device(char const*)>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	ba 10 07 02 c0       	mov    edx,0xc0020710
c000d78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d790:	89 10                	mov    DWORD PTR [eax],edx
c000d792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d796:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7a0:	90                   	nop
c000d7a1:	83 c4 0c             	add    esp,0xc
c000d7a4:	c3                   	ret    
c000d7a5:	90                   	nop
c000d7a6:	66 90                	xchg   ax,ax

c000d7a8 <Timer::~Timer()>:
c000d7a8:	83 ec 0c             	sub    esp,0xc
c000d7ab:	ba 10 07 02 c0       	mov    edx,0xc0020710
c000d7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b4:	89 10                	mov    DWORD PTR [eax],edx
c000d7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ba:	83 ec 0c             	sub    esp,0xc
c000d7bd:	50                   	push   eax
c000d7be:	e8 0f e5 ff ff       	call   c000bcd2 <Device::~Device()>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	90                   	nop
c000d7c7:	83 c4 0c             	add    esp,0xc
c000d7ca:	c3                   	ret    
c000d7cb:	90                   	nop

c000d7cc <Timer::~Timer()>:
c000d7cc:	83 ec 0c             	sub    esp,0xc
c000d7cf:	83 ec 0c             	sub    esp,0xc
c000d7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d6:	e8 cd ff ff ff       	call   c000d7a8 <Timer::~Timer()>
c000d7db:	83 c4 10             	add    esp,0x10
c000d7de:	83 ec 08             	sub    esp,0x8
c000d7e1:	68 5c 01 00 00       	push   0x15c
c000d7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ea:	e8 82 d0 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	83 c4 0c             	add    esp,0xc
c000d7f5:	c3                   	ret    

c000d7f6 <Timer::read()>:
c000d7f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d800:	c3                   	ret    

c000d801 <setupTimer(int)>:
c000d801:	53                   	push   ebx
c000d802:	83 ec 14             	sub    esp,0x14
c000d805:	68 5c 01 00 00       	push   0x15c
c000d80a:	e8 bc a2 ff ff       	call   c0007acb <malloc>
c000d80f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d812:	89 c3                	mov    ebx,eax
c000d814:	e8 53 06 01 00       	call   c001de6c <PIT::PIT()>
c000d819:	58                   	pop    eax
c000d81a:	5a                   	pop    edx
c000d81b:	53                   	push   ebx
c000d81c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d822:	e8 a9 e5 ff ff       	call   c000bdd0 <Device::addChild(Device*)>
c000d827:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d829:	6a 00                	push   0x0
c000d82b:	6a 00                	push   0x0
c000d82d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d831:	53                   	push   ebx
c000d832:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d835:	83 c4 28             	add    esp,0x28
c000d838:	89 d8                	mov    eax,ebx
c000d83a:	5b                   	pop    ebx
c000d83b:	c3                   	ret    

c000d83c <timerHandler(unsigned int)>:
c000d83c:	56                   	push   esi
c000d83d:	53                   	push   ebx
c000d83e:	51                   	push   ecx
c000d83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d843:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d849:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d850:	0f 84 4a 01 00 00    	je     c000d9a0 <timerHandler(unsigned int)+0x164>
c000d856:	fa                   	cli    
c000d857:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d85d:	83 ec 0c             	sub    esp,0xc
c000d860:	68 78 81 02 c0       	push   0xc0028178
c000d865:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d86b:	e8 60 13 01 00       	call   c001ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d870:	83 c4 10             	add    esp,0x10
c000d873:	84 c0                	test   al,al
c000d875:	0f 85 a1 00 00 00    	jne    c000d91c <timerHandler(unsigned int)+0xe0>
c000d87b:	83 ec 0c             	sub    esp,0xc
c000d87e:	68 78 81 02 c0       	push   0xc0028178
c000d883:	e8 64 13 01 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d888:	83 c4 10             	add    esp,0x10
c000d88b:	89 c6                	mov    esi,eax
c000d88d:	8d 76 00             	lea    esi,[esi+0x0]
c000d890:	83 ec 0c             	sub    esp,0xc
c000d893:	68 78 81 02 c0       	push   0xc0028178
c000d898:	e8 4f 13 01 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d89d:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8a4:	89 c3                	mov    ebx,eax
c000d8a6:	e8 49 13 01 00       	call   c001ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8ab:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d8b7:	77 23                	ja     c000d8dc <timerHandler(unsigned int)+0xa0>
c000d8b9:	83 ec 0c             	sub    esp,0xc
c000d8bc:	53                   	push   ebx
c000d8bd:	e8 6a 7c 00 00       	call   c001552c <unblockTask(ThreadControlBlock*)>
c000d8c2:	83 c4 10             	add    esp,0x10
c000d8c5:	39 de                	cmp    esi,ebx
c000d8c7:	75 27                	jne    c000d8f0 <timerHandler(unsigned int)+0xb4>
c000d8c9:	83 ec 0c             	sub    esp,0xc
c000d8cc:	68 78 81 02 c0       	push   0xc0028178
c000d8d1:	e8 16 13 01 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8d6:	89 c6                	mov    esi,eax
c000d8d8:	eb 12                	jmp    c000d8ec <timerHandler(unsigned int)+0xb0>
c000d8da:	66 90                	xchg   ax,ax
c000d8dc:	52                   	push   edx
c000d8dd:	52                   	push   edx
c000d8de:	53                   	push   ebx
c000d8df:	68 78 81 02 c0       	push   0xc0028178
c000d8e4:	e8 c7 13 01 00       	call   c001ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	90                   	nop
c000d8f0:	83 ec 0c             	sub    esp,0xc
c000d8f3:	68 78 81 02 c0       	push   0xc0028178
c000d8f8:	e8 d3 12 01 00       	call   c001ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8fd:	83 c4 10             	add    esp,0x10
c000d900:	84 c0                	test   al,al
c000d902:	75 18                	jne    c000d91c <timerHandler(unsigned int)+0xe0>
c000d904:	83 ec 0c             	sub    esp,0xc
c000d907:	68 78 81 02 c0       	push   0xc0028178
c000d90c:	e8 db 12 01 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d911:	83 c4 10             	add    esp,0x10
c000d914:	39 f0                	cmp    eax,esi
c000d916:	0f 85 74 ff ff ff    	jne    c000d890 <timerHandler(unsigned int)+0x54>
c000d91c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d921:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d925:	74 41                	je     c000d968 <timerHandler(unsigned int)+0x12c>
c000d927:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d92e:	74 38                	je     c000d968 <timerHandler(unsigned int)+0x12c>
c000d930:	fa                   	cli    
c000d931:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d937:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d93c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d942:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d945:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d94b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d94e:	72 08                	jb     c000d958 <timerHandler(unsigned int)+0x11c>
c000d950:	e8 df 76 00 00       	call   c0015034 <schedule()>
c000d955:	8d 76 00             	lea    esi,[esi+0x0]
c000d958:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d95d:	48                   	dec    eax
c000d95e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d963:	75 03                	jne    c000d968 <timerHandler(unsigned int)+0x12c>
c000d965:	fb                   	sti    
c000d966:	66 90                	xchg   ax,ax
c000d968:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d96d:	48                   	dec    eax
c000d96e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d973:	75 1b                	jne    c000d990 <timerHandler(unsigned int)+0x154>
c000d975:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d97c:	74 12                	je     c000d990 <timerHandler(unsigned int)+0x154>
c000d97e:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d988:	e8 a7 76 00 00       	call   c0015034 <schedule()>
c000d98d:	8d 76 00             	lea    esi,[esi+0x0]
c000d990:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d995:	48                   	dec    eax
c000d996:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d99b:	75 03                	jne    c000d9a0 <timerHandler(unsigned int)+0x164>
c000d99d:	fb                   	sti    
c000d99e:	66 90                	xchg   ax,ax
c000d9a0:	58                   	pop    eax
c000d9a1:	5b                   	pop    ebx
c000d9a2:	5e                   	pop    esi
c000d9a3:	c3                   	ret    

c000d9a4 <VCache::VCache(PhysicalDisk*)>:
c000d9a4:	53                   	push   ebx
c000d9a5:	83 ec 18             	sub    esp,0x18
c000d9a8:	ba 40 07 02 c0       	mov    edx,0xc0020740
c000d9ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b1:	89 10                	mov    DWORD PTR [eax],edx
c000d9b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d9c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d9d4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9df:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d9e6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da04:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da0b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da16:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da1e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da26:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da2e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da35:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da3d:	83 ec 0c             	sub    esp,0xc
c000da40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da44:	e8 82 a0 ff ff       	call   c0007acb <malloc>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	89 c3                	mov    ebx,eax
c000da4e:	83 ec 0c             	sub    esp,0xc
c000da51:	53                   	push   ebx
c000da52:	e8 7d 73 00 00       	call   c0014dd4 <Mutex::Mutex()>
c000da57:	83 c4 10             	add    esp,0x10
c000da5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da70:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da7b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da8c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da98:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da9c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da9f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000daa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000daaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dab4:	05 00 02 00 00       	add    eax,0x200
c000dab9:	c1 e0 03             	shl    eax,0x3
c000dabc:	83 ec 0c             	sub    esp,0xc
c000dabf:	50                   	push   eax
c000dac0:	e8 06 a0 ff ff       	call   c0007acb <malloc>
c000dac5:	83 c4 10             	add    esp,0x10
c000dac8:	89 c2                	mov    edx,eax
c000daca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dace:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dadc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dae4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dae8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000daee:	89 d0                	mov    eax,edx
c000daf0:	c1 e0 02             	shl    eax,0x2
c000daf3:	01 d0                	add    eax,edx
c000daf5:	c1 e0 04             	shl    eax,0x4
c000daf8:	83 ec 0c             	sub    esp,0xc
c000dafb:	50                   	push   eax
c000dafc:	e8 ca 9f ff ff       	call   c0007acb <malloc>
c000db01:	83 c4 10             	add    esp,0x10
c000db04:	89 c2                	mov    edx,eax
c000db06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db0a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db0d:	90                   	nop
c000db0e:	83 c4 18             	add    esp,0x18
c000db11:	5b                   	pop    ebx
c000db12:	c3                   	ret    
c000db13:	90                   	nop

c000db14 <VCache::invalidateReadBuffer()>:
c000db14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db18:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db1e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db22:	c3                   	ret    
c000db23:	90                   	nop

c000db24 <VCache::writeWriteBuffer()>:
c000db24:	53                   	push   ebx
c000db25:	83 ec 08             	sub    esp,0x8
c000db28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db2c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db30:	74 1e                	je     c000db50 <VCache::writeWriteBuffer()+0x2c>
c000db32:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db35:	83 ec 0c             	sub    esp,0xc
c000db38:	8b 10                	mov    edx,DWORD PTR [eax]
c000db3a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db40:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db43:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db46:	50                   	push   eax
c000db47:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db4a:	83 c4 20             	add    esp,0x20
c000db4d:	8d 76 00             	lea    esi,[esi+0x0]
c000db50:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db57:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db5e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db62:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db69:	83 c4 08             	add    esp,0x8
c000db6c:	5b                   	pop    ebx
c000db6d:	c3                   	ret    
c000db6e:	66 90                	xchg   ax,ax

c000db70 <VCache::~VCache()>:
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	ba 40 07 02 c0       	mov    edx,0xc0020740
c000db78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7c:	89 10                	mov    DWORD PTR [eax],edx
c000db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db82:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db85:	0f b6 c0             	movzx  eax,al
c000db88:	85 c0                	test   eax,eax
c000db8a:	74 10                	je     c000db9c <VCache::~VCache()+0x2c>
c000db8c:	83 ec 0c             	sub    esp,0xc
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	e8 8c ff ff ff       	call   c000db24 <VCache::writeWriteBuffer()>
c000db98:	83 c4 10             	add    esp,0x10
c000db9b:	90                   	nop
c000db9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dba3:	83 ec 0c             	sub    esp,0xc
c000dba6:	50                   	push   eax
c000dba7:	e8 2f 9f ff ff       	call   c0007adb <free>
c000dbac:	83 c4 10             	add    esp,0x10
c000dbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dbb6:	83 ec 0c             	sub    esp,0xc
c000dbb9:	50                   	push   eax
c000dbba:	e8 1c 9f ff ff       	call   c0007adb <free>
c000dbbf:	83 c4 10             	add    esp,0x10
c000dbc2:	90                   	nop
c000dbc3:	83 c4 0c             	add    esp,0xc
c000dbc6:	c3                   	ret    
c000dbc7:	90                   	nop

c000dbc8 <VCache::~VCache()>:
c000dbc8:	83 ec 0c             	sub    esp,0xc
c000dbcb:	83 ec 0c             	sub    esp,0xc
c000dbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd2:	e8 99 ff ff ff       	call   c000db70 <VCache::~VCache()>
c000dbd7:	83 c4 10             	add    esp,0x10
c000dbda:	83 ec 08             	sub    esp,0x8
c000dbdd:	6a 44                	push   0x44
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 89 cc ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	83 c4 0c             	add    esp,0xc
c000dbee:	c3                   	ret    
c000dbef:	90                   	nop

c000dbf0 <VCache::write(unsigned long long, int, void*)>:
c000dbf0:	55                   	push   ebp
c000dbf1:	57                   	push   edi
c000dbf2:	56                   	push   esi
c000dbf3:	53                   	push   ebx
c000dbf4:	83 ec 1c             	sub    esp,0x1c
c000dbf7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbfb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbff:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dc03:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc07:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc0f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc13:	74 0f                	je     c000dc24 <VCache::write(unsigned long long, int, void*)+0x34>
c000dc15:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc19:	53                   	push   ebx
c000dc1a:	e8 f5 fe ff ff       	call   c000db14 <VCache::invalidateReadBuffer()>
c000dc1f:	58                   	pop    eax
c000dc20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc24:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc28:	74 66                	je     c000dc90 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dc2a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc31:	99                   	cdq    
c000dc32:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc35:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc38:	89 c6                	mov    esi,eax
c000dc3a:	31 ce                	xor    esi,ecx
c000dc3c:	89 d0                	mov    eax,edx
c000dc3e:	31 e8                	xor    eax,ebp
c000dc40:	09 c6                	or     esi,eax
c000dc42:	75 38                	jne    c000dc7c <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc44:	83 ff 01             	cmp    edi,0x1
c000dc47:	75 33                	jne    c000dc7c <VCache::write(unsigned long long, int, void*)+0x8c>
c000dc49:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc4c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dc50:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc54:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc5a:	0f af f9             	imul   edi,ecx
c000dc5d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dc60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc62:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc65:	40                   	inc    eax
c000dc66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc69:	83 f8 50             	cmp    eax,0x50
c000dc6c:	75 72                	jne    c000dce0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	53                   	push   ebx
c000dc72:	e8 ad fe ff ff       	call   c000db24 <VCache::writeWriteBuffer()>
c000dc77:	83 c4 10             	add    esp,0x10
c000dc7a:	eb 64                	jmp    c000dce0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc80:	83 ec 0c             	sub    esp,0xc
c000dc83:	53                   	push   ebx
c000dc84:	e8 9b fe ff ff       	call   c000db24 <VCache::writeWriteBuffer()>
c000dc89:	83 c4 10             	add    esp,0x10
c000dc8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc90:	83 ff 4f             	cmp    edi,0x4f
c000dc93:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc96:	7f 20                	jg     c000dcb8 <VCache::write(unsigned long long, int, void*)+0xc8>
c000dc98:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dc9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc9f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dca2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dca5:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dca8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dcac:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcb4:	eb 2a                	jmp    c000dce0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcb6:	66 90                	xchg   ax,ax
c000dcb8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcbc:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcbe:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dcc2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dcc6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcca:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dcce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcd2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dcd5:	83 c4 1c             	add    esp,0x1c
c000dcd8:	5b                   	pop    ebx
c000dcd9:	5e                   	pop    esi
c000dcda:	5f                   	pop    edi
c000dcdb:	5d                   	pop    ebp
c000dcdc:	ff e0                	jmp    eax
c000dcde:	66 90                	xchg   ax,ax
c000dce0:	83 c4 1c             	add    esp,0x1c
c000dce3:	31 c0                	xor    eax,eax
c000dce5:	5b                   	pop    ebx
c000dce6:	5e                   	pop    esi
c000dce7:	5f                   	pop    edi
c000dce8:	5d                   	pop    ebp
c000dce9:	c3                   	ret    

c000dcea <VCache::read(unsigned long long, int, void*)>:
c000dcea:	55                   	push   ebp
c000dceb:	57                   	push   edi
c000dcec:	56                   	push   esi
c000dced:	53                   	push   ebx
c000dcee:	83 ec 1c             	sub    esp,0x1c
c000dcf1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dcf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dcf9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dcfd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd01:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dd05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd09:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd0d:	74 0d                	je     c000dd1c <VCache::read(unsigned long long, int, void*)+0x32>
c000dd0f:	83 ec 0c             	sub    esp,0xc
c000dd12:	57                   	push   edi
c000dd13:	e8 0c fe ff ff       	call   c000db24 <VCache::writeWriteBuffer()>
c000dd18:	83 c4 10             	add    esp,0x10
c000dd1b:	90                   	nop
c000dd1c:	83 fd 01             	cmp    ebp,0x1
c000dd1f:	0f 85 93 00 00 00    	jne    c000ddb8 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd25:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd28:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd32:	0f 85 80 00 00 00    	jne    c000ddb8 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd38:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dd3b:	89 cd                	mov    ebp,ecx
c000dd3d:	f7 dd                	neg    ebp
c000dd3f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dd43:	89 e8                	mov    eax,ebp
c000dd45:	21 dd                	and    ebp,ebx
c000dd47:	c1 f8 1f             	sar    eax,0x1f
c000dd4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd4e:	89 e8                	mov    eax,ebp
c000dd50:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dd54:	21 f5                	and    ebp,esi
c000dd56:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd5a:	89 ea                	mov    edx,ebp
c000dd5c:	74 2e                	je     c000dd8c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd5e:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dd61:	75 29                	jne    c000dd8c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd63:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd66:	75 24                	jne    c000dd8c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd68:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd6b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd71:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd74:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd77:	21 f3                	and    ebx,esi
c000dd79:	0f af d9             	imul   ebx,ecx
c000dd7c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd7f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd83:	89 de                	mov    esi,ebx
c000dd85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd87:	31 c0                	xor    eax,eax
c000dd89:	eb 61                	jmp    c000ddec <VCache::read(unsigned long long, int, void*)+0x102>
c000dd8b:	90                   	nop
c000dd8c:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dd90:	83 ec 0c             	sub    esp,0xc
c000dd93:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dd96:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd9a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dd9d:	8b 36                	mov    esi,DWORD PTR [esi]
c000dd9f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dda2:	51                   	push   ecx
c000dda3:	52                   	push   edx
c000dda4:	50                   	push   eax
c000dda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda9:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000ddac:	83 c4 20             	add    esp,0x20
c000ddaf:	85 c0                	test   eax,eax
c000ddb1:	75 39                	jne    c000ddec <VCache::read(unsigned long long, int, void*)+0x102>
c000ddb3:	eb b3                	jmp    c000dd68 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ddb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddb8:	83 ec 0c             	sub    esp,0xc
c000ddbb:	57                   	push   edi
c000ddbc:	e8 53 fd ff ff       	call   c000db14 <VCache::invalidateReadBuffer()>
c000ddc1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddc4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddc8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddca:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ddce:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ddd2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ddd6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddda:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddde:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dde1:	83 c4 2c             	add    esp,0x2c
c000dde4:	5b                   	pop    ebx
c000dde5:	5e                   	pop    esi
c000dde6:	5f                   	pop    edi
c000dde7:	5d                   	pop    ebp
c000dde8:	ff e0                	jmp    eax
c000ddea:	66 90                	xchg   ax,ax
c000ddec:	83 c4 1c             	add    esp,0x1c
c000ddef:	5b                   	pop    ebx
c000ddf0:	5e                   	pop    esi
c000ddf1:	5f                   	pop    edi
c000ddf2:	5d                   	pop    ebp
c000ddf3:	c3                   	ret    

c000ddf4 <Video::putrect(int, int, int, int, unsigned int)>:
c000ddf4:	55                   	push   ebp
c000ddf5:	57                   	push   edi
c000ddf6:	56                   	push   esi
c000ddf7:	53                   	push   ebx
c000ddf8:	83 ec 1c             	sub    esp,0x1c
c000ddfb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de03:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de07:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de13:	01 df                	add    edi,ebx
c000de15:	39 fb                	cmp    ebx,edi
c000de17:	7d 1f                	jge    c000de38 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de19:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de1d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de21:	7d 12                	jge    c000de35 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de23:	8b 16                	mov    edx,DWORD PTR [esi]
c000de25:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de29:	53                   	push   ebx
c000de2a:	55                   	push   ebp
c000de2b:	45                   	inc    ebp
c000de2c:	56                   	push   esi
c000de2d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de30:	83 c4 10             	add    esp,0x10
c000de33:	eb e8                	jmp    c000de1d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de35:	43                   	inc    ebx
c000de36:	eb dd                	jmp    c000de15 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de38:	83 c4 1c             	add    esp,0x1c
c000de3b:	5b                   	pop    ebx
c000de3c:	5e                   	pop    esi
c000de3d:	5f                   	pop    edi
c000de3e:	5d                   	pop    ebp
c000de3f:	c3                   	ret    

c000de40 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de40:	55                   	push   ebp
c000de41:	57                   	push   edi
c000de42:	31 ff                	xor    edi,edi
c000de44:	56                   	push   esi
c000de45:	53                   	push   ebx
c000de46:	83 ec 1c             	sub    esp,0x1c
c000de49:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de4d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de51:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de58:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de65:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de69:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de6c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de70:	01 f9                	add    ecx,edi
c000de72:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de76:	7d 2f                	jge    c000dea7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de78:	31 f6                	xor    esi,esi
c000de7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de7e:	01 f2                	add    edx,esi
c000de80:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de84:	7d 1a                	jge    c000dea0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de86:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de89:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de8c:	46                   	inc    esi
c000de8d:	51                   	push   ecx
c000de8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de92:	52                   	push   edx
c000de93:	55                   	push   ebp
c000de94:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de9e:	eb da                	jmp    c000de7a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000dea0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000dea4:	47                   	inc    edi
c000dea5:	eb c5                	jmp    c000de6c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000dea7:	83 c4 1c             	add    esp,0x1c
c000deaa:	5b                   	pop    ebx
c000deab:	5e                   	pop    esi
c000deac:	5f                   	pop    edi
c000dead:	5d                   	pop    ebp
c000deae:	c3                   	ret    
c000deaf:	90                   	nop

c000deb0 <Video::blit(unsigned int*, int, int, int, int)>:
c000deb0:	55                   	push   ebp
c000deb1:	ba 00 00 00 00       	mov    edx,0x0
c000deb6:	57                   	push   edi
c000deb7:	56                   	push   esi
c000deb8:	53                   	push   ebx
c000deb9:	83 ec 1c             	sub    esp,0x1c
c000debc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dec0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dec4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dec8:	85 c0                	test   eax,eax
c000deca:	0f 49 d0             	cmovns edx,eax
c000decd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ded4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ded8:	89 eb                	mov    ebx,ebp
c000deda:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dede:	01 ea                	add    edx,ebp
c000dee0:	39 da                	cmp    edx,ebx
c000dee2:	7e 54                	jle    c000df38 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000dee4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000deea:	7c 4c                	jl     c000df38 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000deec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000def0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000def4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000def8:	01 c1                	add    ecx,eax
c000defa:	39 f9                	cmp    ecx,edi
c000defc:	7e 2f                	jle    c000df2d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000defe:	83 c2 04             	add    edx,0x4
c000df01:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df07:	7c 21                	jl     c000df2a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000df09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df0d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df0f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000df12:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df16:	55                   	push   ebp
c000df17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df1b:	56                   	push   esi
c000df1c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df2a:	47                   	inc    edi
c000df2b:	eb c7                	jmp    c000def4 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000df2d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000df31:	43                   	inc    ebx
c000df32:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000df36:	eb a2                	jmp    c000deda <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000df38:	83 c4 1c             	add    esp,0x1c
c000df3b:	5b                   	pop    ebx
c000df3c:	5e                   	pop    esi
c000df3d:	5f                   	pop    edi
c000df3e:	5d                   	pop    ebp
c000df3f:	c3                   	ret    

c000df40 <Video::clearScreen(unsigned int)>:
c000df40:	57                   	push   edi
c000df41:	56                   	push   esi
c000df42:	53                   	push   ebx
c000df43:	31 db                	xor    ebx,ebx
c000df45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df49:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df4f:	7e 1f                	jle    c000df70 <Video::clearScreen(unsigned int)+0x30>
c000df51:	31 ff                	xor    edi,edi
c000df53:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df59:	7e 12                	jle    c000df6d <Video::clearScreen(unsigned int)+0x2d>
c000df5b:	8b 06                	mov    eax,DWORD PTR [esi]
c000df5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df61:	53                   	push   ebx
c000df62:	57                   	push   edi
c000df63:	47                   	inc    edi
c000df64:	56                   	push   esi
c000df65:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df68:	83 c4 10             	add    esp,0x10
c000df6b:	eb e6                	jmp    c000df53 <Video::clearScreen(unsigned int)+0x13>
c000df6d:	43                   	inc    ebx
c000df6e:	eb d9                	jmp    c000df49 <Video::clearScreen(unsigned int)+0x9>
c000df70:	5b                   	pop    ebx
c000df71:	5e                   	pop    esi
c000df72:	5f                   	pop    edi
c000df73:	c3                   	ret    

c000df74 <Video::putpixel(int, int, unsigned int)>:
c000df74:	c7 44 24 04 48 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020748
c000df7c:	e9 b8 28 00 00       	jmp    c0010839 <KePanic(char const*)>
c000df81:	90                   	nop

c000df82 <Video::readPixelApprox(int, int)>:
c000df82:	83 ec 18             	sub    esp,0x18
c000df85:	68 69 07 02 c0       	push   0xc0020769
c000df8a:	e8 aa 28 00 00       	call   c0010839 <KePanic(char const*)>
c000df8f:	31 c0                	xor    eax,eax
c000df91:	83 c4 1c             	add    esp,0x1c
c000df94:	c3                   	ret    
c000df95:	90                   	nop

c000df96 <Video::Video(char const*)>:
c000df96:	83 ec 0c             	sub    esp,0xc
c000df99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9d:	83 ec 08             	sub    esp,0x8
c000dfa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa4:	50                   	push   eax
c000dfa5:	e8 be df ff ff       	call   c000bf68 <Device::Device(char const*)>
c000dfaa:	83 c4 10             	add    esp,0x10
c000dfad:	ba e4 07 02 c0       	mov    edx,0xc00207e4
c000dfb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb6:	89 10                	mov    DWORD PTR [eax],edx
c000dfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfc6:	90                   	nop
c000dfc7:	83 c4 0c             	add    esp,0xc
c000dfca:	c3                   	ret    
c000dfcb:	90                   	nop

c000dfcc <Video::~Video()>:
c000dfcc:	83 ec 0c             	sub    esp,0xc
c000dfcf:	ba e4 07 02 c0       	mov    edx,0xc00207e4
c000dfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd8:	89 10                	mov    DWORD PTR [eax],edx
c000dfda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfde:	83 ec 0c             	sub    esp,0xc
c000dfe1:	50                   	push   eax
c000dfe2:	e8 eb dc ff ff       	call   c000bcd2 <Device::~Device()>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	90                   	nop
c000dfeb:	83 c4 0c             	add    esp,0xc
c000dfee:	c3                   	ret    
c000dfef:	90                   	nop

c000dff0 <Video::~Video()>:
c000dff0:	83 ec 0c             	sub    esp,0xc
c000dff3:	83 ec 0c             	sub    esp,0xc
c000dff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffa:	e8 cd ff ff ff       	call   c000dfcc <Video::~Video()>
c000dfff:	83 c4 10             	add    esp,0x10
c000e002:	83 ec 08             	sub    esp,0x8
c000e005:	68 64 01 00 00       	push   0x164
c000e00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00e:	e8 5e c8 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c000e013:	83 c4 10             	add    esp,0x10
c000e016:	83 c4 0c             	add    esp,0xc
c000e019:	c3                   	ret    

c000e01a <Video::isMonochrome()>:
c000e01a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e01e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e024:	c3                   	ret    
c000e025:	90                   	nop

c000e026 <Video::getWidth()>:
c000e026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e02a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e030:	c3                   	ret    
c000e031:	90                   	nop

c000e032 <Video::getHeight()>:
c000e032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e036:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e03c:	c3                   	ret    
c000e03d:	90                   	nop

c000e03e <Video::drawCursor(int, int, unsigned int*, int)>:
c000e03e:	55                   	push   ebp
c000e03f:	57                   	push   edi
c000e040:	56                   	push   esi
c000e041:	53                   	push   ebx
c000e042:	83 ec 2c             	sub    esp,0x2c
c000e045:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e049:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e04d:	83 f8 01             	cmp    eax,0x1
c000e050:	19 c9                	sbb    ecx,ecx
c000e052:	31 db                	xor    ebx,ebx
c000e054:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e058:	89 ce                	mov    esi,ecx
c000e05a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e062:	f7 d6                	not    esi
c000e064:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e06a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e06e:	01 d8                	add    eax,ebx
c000e070:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e074:	57                   	push   edi
c000e075:	e8 b8 ff ff ff       	call   c000e032 <Video::getHeight()>
c000e07a:	59                   	pop    ecx
c000e07b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e07f:	7e 70                	jle    c000e0f1 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e081:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e085:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e089:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e08c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e090:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e094:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e09b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09f:	89 e8                	mov    eax,ebp
c000e0a1:	83 c0 20             	add    eax,0x20
c000e0a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0a8:	57                   	push   edi
c000e0a9:	e8 78 ff ff ff       	call   c000e026 <Video::getWidth()>
c000e0ae:	5a                   	pop    edx
c000e0af:	39 c5                	cmp    ebp,eax
c000e0b1:	7d 34                	jge    c000e0e7 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e0b3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0b8:	74 05                	je     c000e0bf <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0ba:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0bc:	56                   	push   esi
c000e0bd:	eb 0d                	jmp    c000e0cc <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0bf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0c4:	74 12                	je     c000e0d8 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0d0:	55                   	push   ebp
c000e0d1:	57                   	push   edi
c000e0d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0d5:	83 c4 10             	add    esp,0x10
c000e0d8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0dc:	45                   	inc    ebp
c000e0dd:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0e1:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e0e5:	75 c1                	jne    c000e0a8 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0e7:	43                   	inc    ebx
c000e0e8:	83 fb 20             	cmp    ebx,0x20
c000e0eb:	0f 85 79 ff ff ff    	jne    c000e06a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e0f1:	83 c4 2c             	add    esp,0x2c
c000e0f4:	5b                   	pop    ebx
c000e0f5:	5e                   	pop    esi
c000e0f6:	5f                   	pop    edi
c000e0f7:	5d                   	pop    ebp
c000e0f8:	c3                   	ret    
c000e0f9:	90                   	nop

c000e0fa <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0fa:	55                   	push   ebp
c000e0fb:	57                   	push   edi
c000e0fc:	56                   	push   esi
c000e0fd:	53                   	push   ebx
c000e0fe:	83 ec 28             	sub    esp,0x28
c000e101:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e105:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e109:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e10d:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e111:	c1 e7 08             	shl    edi,0x8
c000e114:	01 c7                	add    edi,eax
c000e116:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e11a:	c1 e6 08             	shl    esi,0x8
c000e11d:	01 f0                	add    eax,esi
c000e11f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e123:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e127:	0f af c7             	imul   eax,edi
c000e12a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e131:	50                   	push   eax
c000e132:	e8 94 99 ff ff       	call   c0007acb <malloc>
c000e137:	83 c4 10             	add    esp,0x10
c000e13a:	85 c0                	test   eax,eax
c000e13c:	89 c5                	mov    ebp,eax
c000e13e:	75 10                	jne    c000e150 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e140:	83 ec 0c             	sub    esp,0xc
c000e143:	68 94 07 02 c0       	push   0xc0020794
c000e148:	e8 ec 26 00 00       	call   c0010839 <KePanic(char const*)>
c000e14d:	83 c4 10             	add    esp,0x10
c000e150:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e154:	ba 12 00 00 00       	mov    edx,0x12
c000e159:	85 c0                	test   eax,eax
c000e15b:	74 11                	je     c000e16e <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e15d:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e161:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e165:	c1 fa 03             	sar    edx,0x3
c000e168:	0f af d1             	imul   edx,ecx
c000e16b:	83 c2 12             	add    edx,0x12
c000e16e:	85 ff                	test   edi,edi
c000e170:	74 06                	je     c000e178 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e172:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e176:	75 12                	jne    c000e18a <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e178:	83 ec 0c             	sub    esp,0xc
c000e17b:	68 a4 07 02 c0       	push   0xc00207a4
c000e180:	e8 ea c7 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000e185:	e9 b8 00 00 00       	jmp    c000e242 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e18a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e18e:	83 f9 02             	cmp    ecx,0x2
c000e191:	0f 85 96 00 00 00    	jne    c000e22d <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e197:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e19c:	75 0e                	jne    c000e1ac <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e19e:	85 c0                	test   eax,eax
c000e1a0:	75 0a                	jne    c000e1ac <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1a2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1a5:	83 e8 18             	sub    eax,0x18
c000e1a8:	a8 f7                	test   al,0xf7
c000e1aa:	74 0a                	je     c000e1b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e1ac:	83 ec 0c             	sub    esp,0xc
c000e1af:	68 b9 07 02 c0       	push   0xc00207b9
c000e1b4:	eb 7f                	jmp    c000e235 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e1b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1c6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e1ca:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1ce:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1d6:	75 0c                	jne    c000e1e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e1d8:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e1dd:	c1 e1 18             	shl    ecx,0x18
c000e1e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1e4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1e9:	46                   	inc    esi
c000e1ea:	89 c8                	mov    eax,ecx
c000e1ec:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1f1:	c1 e0 10             	shl    eax,0x10
c000e1f4:	c1 e1 08             	shl    ecx,0x8
c000e1f7:	09 c1                	or     ecx,eax
c000e1f9:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1fd:	09 c1                	or     ecx,eax
c000e1ff:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e203:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e207:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e20b:	c1 f8 03             	sar    eax,0x3
c000e20e:	01 c2                	add    edx,eax
c000e210:	89 f0                	mov    eax,esi
c000e212:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e216:	39 c7                	cmp    edi,eax
c000e218:	7f b0                	jg     c000e1ca <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e21a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e21e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e222:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e225:	7e 22                	jle    c000e249 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e227:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e22b:	eb 99                	jmp    c000e1c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e22d:	50                   	push   eax
c000e22e:	50                   	push   eax
c000e22f:	51                   	push   ecx
c000e230:	68 c7 07 02 c0       	push   0xc00207c7
c000e235:	e8 35 c7 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000e23a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e23d:	e8 99 98 ff ff       	call   c0007adb <free>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	31 ed                	xor    ebp,ebp
c000e247:	eb 0f                	jmp    c000e258 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e24d:	89 38                	mov    DWORD PTR [eax],edi
c000e24f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e253:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e256:	89 38                	mov    DWORD PTR [eax],edi
c000e258:	83 c4 1c             	add    esp,0x1c
c000e25b:	89 e8                	mov    eax,ebp
c000e25d:	5b                   	pop    ebx
c000e25e:	5e                   	pop    esi
c000e25f:	5f                   	pop    edi
c000e260:	5d                   	pop    ebp
c000e261:	c3                   	ret    

c000e262 <Video::putTGA(int, int, unsigned char*, int)>:
c000e262:	55                   	push   ebp
c000e263:	57                   	push   edi
c000e264:	56                   	push   esi
c000e265:	53                   	push   ebx
c000e266:	83 ec 28             	sub    esp,0x28
c000e269:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e26d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e271:	50                   	push   eax
c000e272:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e276:	50                   	push   eax
c000e277:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e27b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e27f:	57                   	push   edi
c000e280:	e8 75 fe ff ff       	call   c000e0fa <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e285:	83 c4 20             	add    esp,0x20
c000e288:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e28c:	85 c0                	test   eax,eax
c000e28e:	74 35                	je     c000e2c5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e290:	89 c6                	mov    esi,eax
c000e292:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e296:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e29a:	39 d8                	cmp    eax,ebx
c000e29c:	7e 27                	jle    c000e2c5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e29e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2a2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e2a6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e2aa:	39 e9                	cmp    ecx,ebp
c000e2ac:	7e 14                	jle    c000e2c2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2ae:	83 c6 04             	add    esi,0x4
c000e2b1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e2b3:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e2b6:	53                   	push   ebx
c000e2b7:	55                   	push   ebp
c000e2b8:	45                   	inc    ebp
c000e2b9:	57                   	push   edi
c000e2ba:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e2bd:	83 c4 10             	add    esp,0x10
c000e2c0:	eb e0                	jmp    c000e2a2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2c2:	43                   	inc    ebx
c000e2c3:	eb cd                	jmp    c000e292 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2c5:	83 c4 1c             	add    esp,0x1c
c000e2c8:	5b                   	pop    ebx
c000e2c9:	5e                   	pop    esi
c000e2ca:	5f                   	pop    edi
c000e2cb:	5d                   	pop    ebp
c000e2cc:	c3                   	ret    
c000e2cd:	66 90                	xchg   ax,ax
c000e2cf:	90                   	nop

c000e2d0 <ACPI::close(int, int, void*)>:
c000e2d0:	83 ec 1c             	sub    esp,0x1c
c000e2d3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2db:	74 0b                	je     c000e2e8 <ACPI::close(int, int, void*)+0x18>
c000e2dd:	b8 00 00 00 00       	mov    eax,0x0
c000e2e2:	e9 99 00 00 00       	jmp    c000e380 <ACPI::close(int, int, void*)+0xb0>
c000e2e7:	90                   	nop
c000e2e8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2ed:	75 29                	jne    c000e318 <ACPI::close(int, int, void*)+0x48>
c000e2ef:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2f4:	85 c0                	test   eax,eax
c000e2f6:	74 08                	je     c000e300 <ACPI::close(int, int, void*)+0x30>
c000e2f8:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2fd:	ff d0                	call   eax
c000e2ff:	90                   	nop
c000e300:	83 ec 0c             	sub    esp,0xc
c000e303:	68 28 08 02 c0       	push   0xc0020828
c000e308:	e8 2c 25 00 00       	call   c0010839 <KePanic(char const*)>
c000e30d:	83 c4 10             	add    esp,0x10
c000e310:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e315:	eb 69                	jmp    c000e380 <ACPI::close(int, int, void*)+0xb0>
c000e317:	90                   	nop
c000e318:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e31d:	75 59                	jne    c000e378 <ACPI::close(int, int, void*)+0xa8>
c000e31f:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e324:	85 c0                	test   eax,eax
c000e326:	74 08                	je     c000e330 <ACPI::close(int, int, void*)+0x60>
c000e328:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e32d:	ff d0                	call   eax
c000e32f:	90                   	nop
c000e330:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e335:	8d 76 00             	lea    esi,[esi+0x0]
c000e338:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e33d:	83 e0 02             	and    eax,0x2
c000e340:	74 1e                	je     c000e360 <ACPI::close(int, int, void*)+0x90>
c000e342:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e349:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e34d:	89 c2                	mov    edx,eax
c000e34f:	ec                   	in     al,dx
c000e350:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e354:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e358:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e35c:	eb da                	jmp    c000e338 <ACPI::close(int, int, void*)+0x68>
c000e35e:	66 90                	xchg   ax,ax
c000e360:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e367:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e36c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e370:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e374:	ee                   	out    dx,al
c000e375:	8d 76 00             	lea    esi,[esi+0x0]
c000e378:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e37d:	8d 76 00             	lea    esi,[esi+0x0]
c000e380:	83 c4 1c             	add    esp,0x1c
c000e383:	c3                   	ret    

c000e384 <findRSDP()>:
c000e384:	83 ec 1c             	sub    esp,0x1c
c000e387:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e38c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e392:	83 e0 04             	and    eax,0x4
c000e395:	0f b6 c0             	movzx  eax,al
c000e398:	85 c0                	test   eax,eax
c000e39a:	75 08                	jne    c000e3a4 <findRSDP()+0x20>
c000e39c:	b8 00 00 00 00       	mov    eax,0x0
c000e3a1:	eb 75                	jmp    c000e418 <findRSDP()+0x94>
c000e3a3:	90                   	nop
c000e3a4:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e3a9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3ae:	7f 1c                	jg     c000e3cc <findRSDP()+0x48>
c000e3b0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3bb:	83 e2 fb             	and    edx,0xfffffffb
c000e3be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3c4:	b8 00 00 00 00       	mov    eax,0x0
c000e3c9:	eb 4d                	jmp    c000e418 <findRSDP()+0x94>
c000e3cb:	90                   	nop
c000e3cc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3d4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3dc:	77 32                	ja     c000e410 <findRSDP()+0x8c>
c000e3de:	83 ec 04             	sub    esp,0x4
c000e3e1:	6a 08                	push   0x8
c000e3e3:	68 c3 08 02 c0       	push   0xc00208c3
c000e3e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3ec:	e8 8f 1f ff ff       	call   c0000380 <memcmp>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	85 c0                	test   eax,eax
c000e3f6:	0f 94 c0             	sete   al
c000e3f9:	0f b6 c0             	movzx  eax,al
c000e3fc:	85 c0                	test   eax,eax
c000e3fe:	74 08                	je     c000e408 <findRSDP()+0x84>
c000e400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e404:	eb 12                	jmp    c000e418 <findRSDP()+0x94>
c000e406:	66 90                	xchg   ax,ax
c000e408:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e40d:	eb c5                	jmp    c000e3d4 <findRSDP()+0x50>
c000e40f:	90                   	nop
c000e410:	b8 00 00 00 00       	mov    eax,0x0
c000e415:	8d 76 00             	lea    esi,[esi+0x0]
c000e418:	83 c4 1c             	add    esp,0x1c
c000e41b:	c3                   	ret    

c000e41c <loadACPITables(unsigned char*)>:
c000e41c:	57                   	push   edi
c000e41d:	56                   	push   esi
c000e41e:	53                   	push   ebx
c000e41f:	83 ec 60             	sub    esp,0x60
c000e422:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e427:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e42d:	83 e0 04             	and    eax,0x4
c000e430:	0f b6 c0             	movzx  eax,al
c000e433:	85 c0                	test   eax,eax
c000e435:	0f 84 41 02 00 00    	je     c000e67c <loadACPITables(unsigned char*)+0x260>
c000e43b:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e440:	0f b6 c0             	movzx  eax,al
c000e443:	85 c0                	test   eax,eax
c000e445:	74 79                	je     c000e4c0 <loadACPITables(unsigned char*)+0xa4>
c000e447:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e44b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e44f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e453:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e456:	83 e8 24             	sub    eax,0x24
c000e459:	c1 e8 03             	shr    eax,0x3
c000e45c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e460:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e468:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e46c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e470:	0f 8d ba 00 00 00    	jge    c000e530 <loadACPITables(unsigned char*)+0x114>
c000e476:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e47a:	83 c0 24             	add    eax,0x24
c000e47d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e481:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e485:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e489:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e48d:	c1 e0 03             	shl    eax,0x3
c000e490:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e494:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e498:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e49b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e49d:	89 c1                	mov    ecx,eax
c000e49f:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4a4:	8d 50 01             	lea    edx,[eax+0x1]
c000e4a7:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4ad:	89 ca                	mov    edx,ecx
c000e4af:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4b6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e4bb:	eb ab                	jmp    c000e468 <loadACPITables(unsigned char*)+0x4c>
c000e4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4cf:	83 e8 24             	sub    eax,0x24
c000e4d2:	c1 e8 02             	shr    eax,0x2
c000e4d5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4d9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4e8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4ec:	7d 42                	jge    c000e530 <loadACPITables(unsigned char*)+0x114>
c000e4ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4f2:	83 c0 24             	add    eax,0x24
c000e4f5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e501:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e505:	c1 e0 02             	shl    eax,0x2
c000e508:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e50c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e510:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e512:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e517:	8d 50 01             	lea    edx,[eax+0x1]
c000e51a:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e520:	89 ca                	mov    edx,ecx
c000e522:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e529:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e52e:	eb b4                	jmp    c000e4e4 <loadACPITables(unsigned char*)+0xc8>
c000e530:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e538:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e53d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e541:	0f 8d 39 01 00 00    	jge    c000e680 <loadACPITables(unsigned char*)+0x264>
c000e547:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e54b:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e552:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e55a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e562:	25 ff 0f 00 00       	and    eax,0xfff
c000e567:	89 c6                	mov    esi,eax
c000e569:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e56f:	83 ec 0c             	sub    esp,0xc
c000e572:	6a 01                	push   0x1
c000e574:	e8 8c b0 ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e579:	83 c4 10             	add    esp,0x10
c000e57c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e580:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e586:	83 ec 0c             	sub    esp,0xc
c000e589:	6a 01                	push   0x1
c000e58b:	6a 01                	push   0x1
c000e58d:	50                   	push   eax
c000e58e:	52                   	push   edx
c000e58f:	53                   	push   ebx
c000e590:	e8 69 ba ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e595:	83 c4 20             	add    esp,0x20
c000e598:	09 f0                	or     eax,esi
c000e59a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e59e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5a2:	c1 e0 03             	shl    eax,0x3
c000e5a5:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e5aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5b6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5d2:	89 c6                	mov    esi,eax
c000e5d4:	89 d7                	mov    edi,edx
c000e5d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5d8:	89 c8                	mov    eax,ecx
c000e5da:	89 fa                	mov    edx,edi
c000e5dc:	89 f3                	mov    ebx,esi
c000e5de:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5f9:	05 00 10 00 00       	add    eax,0x1000
c000e5fe:	c1 e8 0c             	shr    eax,0xc
c000e601:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e609:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e60d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e611:	25 ff 0f 00 00       	and    eax,0xfff
c000e616:	89 c6                	mov    esi,eax
c000e618:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e61e:	83 ec 0c             	sub    esp,0xc
c000e621:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e625:	e8 db af ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e62a:	83 c4 10             	add    esp,0x10
c000e62d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e631:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e637:	83 ec 0c             	sub    esp,0xc
c000e63a:	6a 01                	push   0x1
c000e63c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e640:	50                   	push   eax
c000e641:	52                   	push   edx
c000e642:	53                   	push   ebx
c000e643:	e8 b6 b9 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e648:	83 c4 20             	add    esp,0x20
c000e64b:	09 f0                	or     eax,esi
c000e64d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e655:	83 ec 0c             	sub    esp,0xc
c000e658:	50                   	push   eax
c000e659:	e8 b9 b2 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c000e65e:	83 c4 10             	add    esp,0x10
c000e661:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e665:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e669:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e670:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e675:	e9 be fe ff ff       	jmp    c000e538 <loadACPITables(unsigned char*)+0x11c>
c000e67a:	66 90                	xchg   ax,ax
c000e67c:	90                   	nop
c000e67d:	8d 76 00             	lea    esi,[esi+0x0]
c000e680:	83 c4 60             	add    esp,0x60
c000e683:	5b                   	pop    ebx
c000e684:	5e                   	pop    esi
c000e685:	5f                   	pop    edi
c000e686:	c3                   	ret    
c000e687:	90                   	nop

c000e688 <findRSDT(unsigned char*)>:
c000e688:	57                   	push   edi
c000e689:	56                   	push   esi
c000e68a:	53                   	push   ebx
c000e68b:	83 ec 50             	sub    esp,0x50
c000e68e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e693:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e699:	83 e0 04             	and    eax,0x4
c000e69c:	0f b6 c0             	movzx  eax,al
c000e69f:	85 c0                	test   eax,eax
c000e6a1:	75 0d                	jne    c000e6b0 <findRSDT(unsigned char*)+0x28>
c000e6a3:	b8 00 00 00 00       	mov    eax,0x0
c000e6a8:	e9 2b 01 00 00       	jmp    c000e7d8 <findRSDT(unsigned char*)+0x150>
c000e6ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e6b0:	89 e0                	mov    eax,esp
c000e6b2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6be:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6d6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6da:	89 c6                	mov    esi,eax
c000e6dc:	89 d7                	mov    edi,edx
c000e6de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6e0:	89 c8                	mov    eax,ecx
c000e6e2:	89 fa                	mov    edx,edi
c000e6e4:	89 f3                	mov    ebx,esi
c000e6e6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6ea:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6f2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6f6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6fa:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e706:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e70a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e712:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e716:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e71a:	25 ff 0f 00 00       	and    eax,0xfff
c000e71f:	89 c6                	mov    esi,eax
c000e721:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e727:	83 ec 0c             	sub    esp,0xc
c000e72a:	6a 02                	push   0x2
c000e72c:	e8 d4 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e731:	83 c4 10             	add    esp,0x10
c000e734:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e738:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e73e:	83 ec 0c             	sub    esp,0xc
c000e741:	6a 01                	push   0x1
c000e743:	6a 02                	push   0x2
c000e745:	50                   	push   eax
c000e746:	52                   	push   edx
c000e747:	53                   	push   ebx
c000e748:	e8 b1 b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e74d:	83 c4 20             	add    esp,0x20
c000e750:	09 f0                	or     eax,esi
c000e752:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e756:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e75a:	25 ff 0f 00 00       	and    eax,0xfff
c000e75f:	89 c6                	mov    esi,eax
c000e761:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e767:	83 ec 0c             	sub    esp,0xc
c000e76a:	6a 02                	push   0x2
c000e76c:	e8 94 ae ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e778:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e77e:	83 ec 0c             	sub    esp,0xc
c000e781:	6a 01                	push   0x1
c000e783:	6a 02                	push   0x2
c000e785:	50                   	push   eax
c000e786:	52                   	push   edx
c000e787:	53                   	push   ebx
c000e788:	e8 71 b8 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e78d:	83 c4 20             	add    esp,0x20
c000e790:	09 f0                	or     eax,esi
c000e792:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e796:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e79b:	85 c0                	test   eax,eax
c000e79d:	75 11                	jne    c000e7b0 <findRSDT(unsigned char*)+0x128>
c000e79f:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7aa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7ae:	eb 24                	jmp    c000e7d4 <findRSDT(unsigned char*)+0x14c>
c000e7b0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7b5:	83 f8 02             	cmp    eax,0x2
c000e7b8:	75 12                	jne    c000e7cc <findRSDT(unsigned char*)+0x144>
c000e7ba:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7c1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7c9:	eb 09                	jmp    c000e7d4 <findRSDT(unsigned char*)+0x14c>
c000e7cb:	90                   	nop
c000e7cc:	b8 00 00 00 00       	mov    eax,0x0
c000e7d1:	eb 05                	jmp    c000e7d8 <findRSDT(unsigned char*)+0x150>
c000e7d3:	90                   	nop
c000e7d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7d8:	83 c4 50             	add    esp,0x50
c000e7db:	5b                   	pop    ebx
c000e7dc:	5e                   	pop    esi
c000e7dd:	5f                   	pop    edi
c000e7de:	c3                   	ret    
c000e7df:	90                   	nop

c000e7e0 <findDataTable(unsigned char*, char*)>:
c000e7e0:	83 ec 1c             	sub    esp,0x1c
c000e7e3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7e8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7ee:	83 e0 04             	and    eax,0x4
c000e7f1:	0f b6 c0             	movzx  eax,al
c000e7f4:	85 c0                	test   eax,eax
c000e7f6:	75 08                	jne    c000e800 <findDataTable(unsigned char*, char*)+0x20>
c000e7f8:	b8 00 00 00 00       	mov    eax,0x0
c000e7fd:	eb 5d                	jmp    c000e85c <findDataTable(unsigned char*, char*)+0x7c>
c000e7ff:	90                   	nop
c000e800:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e808:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e80d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e811:	7d 41                	jge    c000e854 <findDataTable(unsigned char*, char*)+0x74>
c000e813:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e817:	c1 e0 03             	shl    eax,0x3
c000e81a:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e81f:	83 ec 04             	sub    esp,0x4
c000e822:	6a 04                	push   0x4
c000e824:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e828:	50                   	push   eax
c000e829:	e8 52 1b ff ff       	call   c0000380 <memcmp>
c000e82e:	83 c4 10             	add    esp,0x10
c000e831:	85 c0                	test   eax,eax
c000e833:	0f 94 c0             	sete   al
c000e836:	0f b6 c0             	movzx  eax,al
c000e839:	85 c0                	test   eax,eax
c000e83b:	74 0f                	je     c000e84c <findDataTable(unsigned char*, char*)+0x6c>
c000e83d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e841:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e848:	eb 12                	jmp    c000e85c <findDataTable(unsigned char*, char*)+0x7c>
c000e84a:	66 90                	xchg   ax,ax
c000e84c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e851:	eb b5                	jmp    c000e808 <findDataTable(unsigned char*, char*)+0x28>
c000e853:	90                   	nop
c000e854:	b8 00 00 00 00       	mov    eax,0x0
c000e859:	8d 76 00             	lea    esi,[esi+0x0]
c000e85c:	83 c4 1c             	add    esp,0x1c
c000e85f:	c3                   	ret    

c000e860 <scanMADT()>:
c000e860:	53                   	push   ebx
c000e861:	83 ec 38             	sub    esp,0x38
c000e864:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e869:	25 00 04 00 00       	and    eax,0x400
c000e86e:	74 14                	je     c000e884 <scanMADT()+0x24>
c000e870:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e875:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e87b:	83 e2 fb             	and    edx,0xfffffffb
c000e87e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e884:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e889:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e88f:	83 e0 04             	and    eax,0x4
c000e892:	0f b6 c0             	movzx  eax,al
c000e895:	85 c0                	test   eax,eax
c000e897:	0f 84 6b 04 00 00    	je     c000ed08 <scanMADT()+0x4a8>
c000e89d:	e8 e2 fa ff ff       	call   c000e384 <findRSDP()>
c000e8a2:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8a7:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8ac:	85 c0                	test   eax,eax
c000e8ae:	75 1c                	jne    c000e8cc <scanMADT()+0x6c>
c000e8b0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8bb:	83 e2 fb             	and    edx,0xfffffffb
c000e8be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8c4:	e9 47 04 00 00       	jmp    c000ed10 <scanMADT()+0x4b0>
c000e8c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e8cc:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8d1:	83 ec 0c             	sub    esp,0xc
c000e8d4:	50                   	push   eax
c000e8d5:	e8 ae fd ff ff       	call   c000e688 <findRSDT(unsigned char*)>
c000e8da:	83 c4 10             	add    esp,0x10
c000e8dd:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8e2:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8e7:	85 c0                	test   eax,eax
c000e8e9:	75 19                	jne    c000e904 <scanMADT()+0xa4>
c000e8eb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8f0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8f6:	83 e2 fb             	and    edx,0xfffffffb
c000e8f9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8ff:	e9 0c 04 00 00       	jmp    c000ed10 <scanMADT()+0x4b0>
c000e904:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e909:	83 ec 0c             	sub    esp,0xc
c000e90c:	50                   	push   eax
c000e90d:	e8 0a fb ff ff       	call   c000e41c <loadACPITables(unsigned char*)>
c000e912:	83 c4 10             	add    esp,0x10
c000e915:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e91a:	83 ec 08             	sub    esp,0x8
c000e91d:	68 cc 08 02 c0       	push   0xc00208cc
c000e922:	50                   	push   eax
c000e923:	e8 b8 fe ff ff       	call   c000e7e0 <findDataTable(unsigned char*, char*)>
c000e928:	83 c4 10             	add    esp,0x10
c000e92b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e92f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e934:	75 1a                	jne    c000e950 <scanMADT()+0xf0>
c000e936:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e93b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e941:	83 e2 fe             	and    edx,0xfffffffe
c000e944:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e94a:	e9 c1 03 00 00       	jmp    c000ed10 <scanMADT()+0x4b0>
c000e94f:	90                   	nop
c000e950:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e958:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e95c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e95f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e963:	0f 87 a7 03 00 00    	ja     c000ed10 <scanMADT()+0x4b0>
c000e969:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e971:	0f 87 99 03 00 00    	ja     c000ed10 <scanMADT()+0x4b0>
c000e977:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e97b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e97f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e983:	8d 50 01             	lea    edx,[eax+0x1]
c000e986:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e98a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e98e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e992:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e996:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e99a:	8d 50 01             	lea    edx,[eax+0x1]
c000e99d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9a5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9a9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9ad:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e9b2:	83 f8 02             	cmp    eax,0x2
c000e9b5:	0f 86 51 03 00 00    	jbe    c000ed0c <scanMADT()+0x4ac>
c000e9bb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9c0:	85 c0                	test   eax,eax
c000e9c2:	75 58                	jne    c000ea1c <scanMADT()+0x1bc>
c000e9c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9c8:	8d 50 01             	lea    edx,[eax+0x1]
c000e9cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9cf:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9d5:	0f b6 d2             	movzx  edx,dl
c000e9d8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9dc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9e0:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ea:	8d 50 01             	lea    edx,[eax+0x1]
c000e9ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9f1:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9f7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e9fa:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ea00:	0f b6 d2             	movzx  edx,dl
c000ea03:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea07:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea0b:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea11:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea16:	e9 d9 02 00 00       	jmp    c000ecf4 <scanMADT()+0x494>
c000ea1b:	90                   	nop
c000ea1c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea21:	83 f8 01             	cmp    eax,0x1
c000ea24:	0f 85 1a 01 00 00    	jne    c000eb44 <scanMADT()+0x2e4>
c000ea2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea2e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea35:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea3b:	0f b6 d2             	movzx  edx,dl
c000ea3e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea42:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea46:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea4c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea59:	01 d0                	add    eax,edx
c000ea5b:	83 c0 2c             	add    eax,0x2c
c000ea5e:	8a 00                	mov    al,BYTE PTR [eax]
c000ea60:	0f b6 d0             	movzx  edx,al
c000ea63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea67:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea6e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea72:	0f b6 c0             	movzx  eax,al
c000ea75:	c1 e0 08             	shl    eax,0x8
c000ea78:	89 d1                	mov    ecx,edx
c000ea7a:	09 c1                	or     ecx,eax
c000ea7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea80:	8d 50 02             	lea    edx,[eax+0x2]
c000ea83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea87:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea8b:	0f b6 c0             	movzx  eax,al
c000ea8e:	c1 e0 10             	shl    eax,0x10
c000ea91:	09 c1                	or     ecx,eax
c000ea93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea97:	8d 50 03             	lea    edx,[eax+0x3]
c000ea9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea9e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaa2:	0f b6 c0             	movzx  eax,al
c000eaa5:	c1 e0 18             	shl    eax,0x18
c000eaa8:	09 c1                	or     ecx,eax
c000eaaa:	89 ca                	mov    edx,ecx
c000eaac:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eab1:	0f b6 c0             	movzx  eax,al
c000eab4:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eabb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eac0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eac4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac8:	01 d0                	add    eax,edx
c000eaca:	83 c0 2c             	add    eax,0x2c
c000eacd:	8a 00                	mov    al,BYTE PTR [eax]
c000eacf:	0f b6 d0             	movzx  edx,al
c000ead2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead6:	8d 48 01             	lea    ecx,[eax+0x1]
c000ead9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eadd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eae1:	0f b6 c0             	movzx  eax,al
c000eae4:	c1 e0 08             	shl    eax,0x8
c000eae7:	89 d1                	mov    ecx,edx
c000eae9:	09 c1                	or     ecx,eax
c000eaeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaef:	8d 50 02             	lea    edx,[eax+0x2]
c000eaf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaf6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eafa:	0f b6 c0             	movzx  eax,al
c000eafd:	c1 e0 10             	shl    eax,0x10
c000eb00:	09 c1                	or     ecx,eax
c000eb02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb06:	8d 50 03             	lea    edx,[eax+0x3]
c000eb09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb0d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb11:	0f b6 c0             	movzx  eax,al
c000eb14:	c1 e0 18             	shl    eax,0x18
c000eb17:	09 c1                	or     ecx,eax
c000eb19:	89 ca                	mov    edx,ecx
c000eb1b:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb20:	0f b6 c0             	movzx  eax,al
c000eb23:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb2a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb2f:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb34:	83 c0 01             	add    eax,0x1
c000eb37:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb3c:	e9 b3 01 00 00       	jmp    c000ecf4 <scanMADT()+0x494>
c000eb41:	8d 76 00             	lea    esi,[esi+0x0]
c000eb44:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb49:	83 f8 02             	cmp    eax,0x2
c000eb4c:	0f 85 ea 00 00 00    	jne    c000ec3c <scanMADT()+0x3dc>
c000eb52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb56:	8d 50 01             	lea    edx,[eax+0x1]
c000eb59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb61:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb65:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb6d:	8d 50 01             	lea    edx,[eax+0x1]
c000eb70:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb74:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb78:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb7c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb88:	01 d0                	add    eax,edx
c000eb8a:	83 c0 2c             	add    eax,0x2c
c000eb8d:	8a 00                	mov    al,BYTE PTR [eax]
c000eb8f:	0f b6 d0             	movzx  edx,al
c000eb92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb96:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb9d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eba1:	0f b6 c0             	movzx  eax,al
c000eba4:	c1 e0 08             	shl    eax,0x8
c000eba7:	89 d1                	mov    ecx,edx
c000eba9:	09 c1                	or     ecx,eax
c000ebab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebaf:	8d 50 02             	lea    edx,[eax+0x2]
c000ebb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebb6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebba:	0f b6 c0             	movzx  eax,al
c000ebbd:	c1 e0 10             	shl    eax,0x10
c000ebc0:	09 c1                	or     ecx,eax
c000ebc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc6:	8d 50 03             	lea    edx,[eax+0x3]
c000ebc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebcd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebd1:	0f b6 c0             	movzx  eax,al
c000ebd4:	c1 e0 18             	shl    eax,0x18
c000ebd7:	09 c8                	or     eax,ecx
c000ebd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebdd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebe2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebea:	01 d0                	add    eax,edx
c000ebec:	83 c0 2c             	add    eax,0x2c
c000ebef:	8a 00                	mov    al,BYTE PTR [eax]
c000ebf1:	0f b6 d0             	movzx  edx,al
c000ebf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebf8:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebff:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec03:	0f b6 c0             	movzx  eax,al
c000ec06:	c1 e0 08             	shl    eax,0x8
c000ec09:	09 d0                	or     eax,edx
c000ec0b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec10:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec15:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec1e:	88 90 40 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde0c0],dl
c000ec24:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec29:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000ec2e:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec36:	e9 b9 00 00 00       	jmp    c000ecf4 <scanMADT()+0x494>
c000ec3b:	90                   	nop
c000ec3c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec41:	83 f8 04             	cmp    eax,0x4
c000ec44:	0f 85 9a 00 00 00    	jne    c000ece4 <scanMADT()+0x484>
c000ec4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec4e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec51:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec59:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec5d:	0f b6 c0             	movzx  eax,al
c000ec60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec6c:	01 d0                	add    eax,edx
c000ec6e:	83 c0 2c             	add    eax,0x2c
c000ec71:	8a 00                	mov    al,BYTE PTR [eax]
c000ec73:	0f b6 d0             	movzx  edx,al
c000ec76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec7a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec81:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec85:	0f b6 c0             	movzx  eax,al
c000ec88:	c1 e0 08             	shl    eax,0x8
c000ec8b:	09 d0                	or     eax,edx
c000ec8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec91:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec9a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eca1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eca5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eca9:	0f b6 c0             	movzx  eax,al
c000ecac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecb4:	c1 e0 08             	shl    eax,0x8
c000ecb7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ecbb:	89 c1                	mov    ecx,eax
c000ecbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecc1:	c1 e0 18             	shl    eax,0x18
c000ecc4:	89 c3                	mov    ebx,eax
c000ecc6:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000eccb:	8d 50 01             	lea    edx,[eax+0x1]
c000ecce:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ecd4:	09 d9                	or     ecx,ebx
c000ecd6:	89 ca                	mov    edx,ecx
c000ecd8:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ecdf:	eb 13                	jmp    c000ecf4 <scanMADT()+0x494>
c000ece1:	8d 76 00             	lea    esi,[esi+0x0]
c000ece4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ece9:	83 f8 05             	cmp    eax,0x5
c000ecec:	75 06                	jne    c000ecf4 <scanMADT()+0x494>
c000ecee:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecf3:	90                   	nop
c000ecf4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ecf9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ecfd:	01 d0                	add    eax,edx
c000ecff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed03:	e9 50 fc ff ff       	jmp    c000e958 <scanMADT()+0xf8>
c000ed08:	90                   	nop
c000ed09:	eb 05                	jmp    c000ed10 <scanMADT()+0x4b0>
c000ed0b:	90                   	nop
c000ed0c:	90                   	nop
c000ed0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed10:	83 c4 38             	add    esp,0x38
c000ed13:	5b                   	pop    ebx
c000ed14:	c3                   	ret    
c000ed15:	90                   	nop
c000ed16:	66 90                	xchg   ax,ax

c000ed18 <ACPI::ACPI()>:
c000ed18:	83 ec 0c             	sub    esp,0xc
c000ed1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed1f:	83 ec 08             	sub    esp,0x8
c000ed22:	68 d1 08 02 c0       	push   0xc00208d1
c000ed27:	50                   	push   eax
c000ed28:	e8 3b d2 ff ff       	call   c000bf68 <Device::Device(char const*)>
c000ed2d:	83 c4 10             	add    esp,0x10
c000ed30:	ba 40 0a 02 c0       	mov    edx,0xc0020a40
c000ed35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed39:	89 10                	mov    DWORD PTR [eax],edx
c000ed3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed3f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed4a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed58:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed62:	e8 f9 fa ff ff       	call   c000e860 <scanMADT()>
c000ed67:	90                   	nop
c000ed68:	83 c4 0c             	add    esp,0xc
c000ed6b:	c3                   	ret    

c000ed6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed6c:	83 ec 2c             	sub    esp,0x2c
c000ed6f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ed73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed77:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000ed7b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ed7f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed84:	88 c8                	mov    al,cl
c000ed86:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed8a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed8f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed97:	90                   	nop
c000ed98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed9c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eda2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000eda6:	0f 8d b0 00 00 00    	jge    c000ee5c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000edac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edb4:	83 c2 2a             	add    edx,0x2a
c000edb7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edbb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000edc0:	0f b7 c0             	movzx  eax,ax
c000edc3:	39 c2                	cmp    edx,eax
c000edc5:	0f 85 85 00 00 00    	jne    c000ee50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edd3:	83 c2 2a             	add    edx,0x2a
c000edd6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edda:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000eddf:	0f b6 c0             	movzx  eax,al
c000ede2:	39 c2                	cmp    edx,eax
c000ede4:	75 6a                	jne    c000ee50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ede6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000edeb:	85 c0                	test   eax,eax
c000eded:	74 3d                	je     c000ee2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000edef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edf3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edf7:	83 c2 2a             	add    edx,0x2a
c000edfa:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000edfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee05:	39 c2                	cmp    edx,eax
c000ee07:	74 13                	je     c000ee1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ee09:	83 ec 0c             	sub    esp,0xc
c000ee0c:	68 4c 08 02 c0       	push   0xc002084c
c000ee11:	e8 23 1a 00 00       	call   c0010839 <KePanic(char const*)>
c000ee16:	83 c4 10             	add    esp,0x10
c000ee19:	8d 76 00             	lea    esi,[esi+0x0]
c000ee1c:	83 ec 0c             	sub    esp,0xc
c000ee1f:	68 d6 08 02 c0       	push   0xc00208d6
c000ee24:	e8 10 1a 00 00       	call   c0010839 <KePanic(char const*)>
c000ee29:	83 c4 10             	add    esp,0x10
c000ee2c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee38:	83 c2 2a             	add    edx,0x2a
c000ee3b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee3f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee41:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee44:	89 01                	mov    DWORD PTR [ecx],eax
c000ee46:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee49:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee4e:	66 90                	xchg   ax,ax
c000ee50:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee55:	e9 3e ff ff ff       	jmp    c000ed98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee5a:	66 90                	xchg   ax,ax
c000ee5c:	90                   	nop
c000ee5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee61:	83 c4 2c             	add    esp,0x2c
c000ee64:	c2 04 00             	ret    0x4
c000ee67:	90                   	nop

c000ee68 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee68:	83 ec 1c             	sub    esp,0x1c
c000ee6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee6f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee73:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee77:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee7c:	88 c8                	mov    al,cl
c000ee7e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee82:	88 d0                	mov    al,dl
c000ee84:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee8c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee96:	83 c2 2a             	add    edx,0x2a
c000ee99:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ee9d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000eea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeaf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eeb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eeb6:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000eebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eebf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eec5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eec9:	83 c0 01             	add    eax,0x1
c000eecc:	88 c1                	mov    cl,al
c000eece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed2:	83 c2 2a             	add    edx,0x2a
c000eed5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eedd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eeea:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eeee:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eefc:	8d 50 01             	lea    edx,[eax+0x1]
c000eeff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef03:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef13:	3d 00 02 00 00       	cmp    eax,0x200
c000ef18:	75 12                	jne    c000ef2c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ef1a:	83 ec 0c             	sub    esp,0xc
c000ef1d:	68 e5 08 02 c0       	push   0xc00208e5
c000ef22:	e8 12 19 00 00       	call   c0010839 <KePanic(char const*)>
c000ef27:	83 c4 10             	add    esp,0x10
c000ef2a:	66 90                	xchg   ax,ax
c000ef2c:	90                   	nop
c000ef2d:	83 c4 1c             	add    esp,0x1c
c000ef30:	c3                   	ret    
c000ef31:	90                   	nop
c000ef32:	66 90                	xchg   ax,ax

c000ef34 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef34:	b8 00 00 00 00       	mov    eax,0x0
c000ef39:	c3                   	ret    
c000ef3a:	66 90                	xchg   ax,ax

c000ef3c <ACPI::detectPCI()>:
c000ef3c:	53                   	push   ebx
c000ef3d:	83 ec 28             	sub    esp,0x28
c000ef40:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef45:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef4a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef4f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef55:	83 e0 04             	and    eax,0x4
c000ef58:	0f b6 c0             	movzx  eax,al
c000ef5b:	85 c0                	test   eax,eax
c000ef5d:	74 2d                	je     c000ef8c <ACPI::detectPCI()+0x50>
c000ef5f:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef64:	83 ec 08             	sub    esp,0x8
c000ef67:	68 02 09 02 c0       	push   0xc0020902
c000ef6c:	50                   	push   eax
c000ef6d:	e8 6e f8 ff ff       	call   c000e7e0 <findDataTable(unsigned char*, char*)>
c000ef72:	83 c4 10             	add    esp,0x10
c000ef75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef79:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef7e:	74 0c                	je     c000ef8c <ACPI::detectPCI()+0x50>
c000ef80:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef85:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef8a:	66 90                	xchg   ax,ax
c000ef8c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef98:	8a 00                	mov    al,BYTE PTR [eax]
c000ef9a:	0f b6 c0             	movzx  eax,al
c000ef9d:	83 f8 01             	cmp    eax,0x1
c000efa0:	75 0e                	jne    c000efb0 <ACPI::detectPCI()+0x74>
c000efa2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efa7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efac:	eb 2e                	jmp    c000efdc <ACPI::detectPCI()+0xa0>
c000efae:	66 90                	xchg   ax,ax
c000efb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efb4:	8a 00                	mov    al,BYTE PTR [eax]
c000efb6:	0f b6 c0             	movzx  eax,al
c000efb9:	83 f8 02             	cmp    eax,0x2
c000efbc:	75 1e                	jne    c000efdc <ACPI::detectPCI()+0xa0>
c000efbe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efc3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efc8:	85 c0                	test   eax,eax
c000efca:	74 10                	je     c000efdc <ACPI::detectPCI()+0xa0>
c000efcc:	83 ec 0c             	sub    esp,0xc
c000efcf:	68 7c 08 02 c0       	push   0xc002087c
c000efd4:	e8 60 18 00 00       	call   c0010839 <KePanic(char const*)>
c000efd9:	83 c4 10             	add    esp,0x10
c000efdc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efe0:	83 f0 01             	xor    eax,0x1
c000efe3:	0f b6 c0             	movzx  eax,al
c000efe6:	85 c0                	test   eax,eax
c000efe8:	74 46                	je     c000f030 <ACPI::detectPCI()+0xf4>
c000efea:	e8 41 11 ff ff       	call   c0000130 <manualPCIProbe>
c000efef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eff3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eff8:	75 0e                	jne    c000f008 <ACPI::detectPCI()+0xcc>
c000effa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efff:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f004:	eb 2a                	jmp    c000f030 <ACPI::detectPCI()+0xf4>
c000f006:	66 90                	xchg   ax,ax
c000f008:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f00d:	75 21                	jne    c000f030 <ACPI::detectPCI()+0xf4>
c000f00f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f014:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f019:	85 c0                	test   eax,eax
c000f01b:	74 13                	je     c000f030 <ACPI::detectPCI()+0xf4>
c000f01d:	83 ec 0c             	sub    esp,0xc
c000f020:	68 7c 08 02 c0       	push   0xc002087c
c000f025:	e8 0f 18 00 00       	call   c0010839 <KePanic(char const*)>
c000f02a:	83 c4 10             	add    esp,0x10
c000f02d:	8d 76 00             	lea    esi,[esi+0x0]
c000f030:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f035:	85 c0                	test   eax,eax
c000f037:	0f 84 87 00 00 00    	je     c000f0c4 <ACPI::detectPCI()+0x188>
c000f03d:	83 ec 0c             	sub    esp,0xc
c000f040:	68 07 09 02 c0       	push   0xc0020907
c000f045:	e8 72 11 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c000f04a:	83 c4 10             	add    esp,0x10
c000f04d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f055:	83 ec 0c             	sub    esp,0xc
c000f058:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f05c:	e8 6a 8a ff ff       	call   c0007acb <malloc>
c000f061:	83 c4 10             	add    esp,0x10
c000f064:	89 c3                	mov    ebx,eax
c000f066:	83 ec 0c             	sub    esp,0xc
c000f069:	53                   	push   ebx
c000f06a:	e8 c7 af 00 00       	call   c001a036 <PCI::PCI()>
c000f06f:	83 c4 10             	add    esp,0x10
c000f072:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f07a:	83 ec 08             	sub    esp,0x8
c000f07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f081:	50                   	push   eax
c000f082:	e8 49 cd ff ff       	call   c000bdd0 <Device::addChild(Device*)>
c000f087:	83 c4 10             	add    esp,0x10
c000f08a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f08e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f090:	83 c0 08             	add    eax,0x8
c000f093:	8b 00                	mov    eax,DWORD PTR [eax]
c000f095:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f09a:	85 d2                	test   edx,edx
c000f09c:	74 0a                	je     c000f0a8 <ACPI::detectPCI()+0x16c>
c000f09e:	ba 01 00 00 00       	mov    edx,0x1
c000f0a3:	eb 0b                	jmp    c000f0b0 <ACPI::detectPCI()+0x174>
c000f0a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0a8:	ba 02 00 00 00       	mov    edx,0x2
c000f0ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f0b0:	6a 00                	push   0x0
c000f0b2:	6a 00                	push   0x0
c000f0b4:	52                   	push   edx
c000f0b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0b9:	ff d0                	call   eax
c000f0bb:	83 c4 10             	add    esp,0x10
c000f0be:	e9 91 00 00 00       	jmp    c000f154 <ACPI::detectPCI()+0x218>
c000f0c3:	90                   	nop
c000f0c4:	83 ec 0c             	sub    esp,0xc
c000f0c7:	68 1f 09 02 c0       	push   0xc002091f
c000f0cc:	e8 eb 10 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c000f0d1:	83 c4 10             	add    esp,0x10
c000f0d4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0db:	83 ec 0c             	sub    esp,0xc
c000f0de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0e2:	e8 e4 89 ff ff       	call   c0007acb <malloc>
c000f0e7:	83 c4 10             	add    esp,0x10
c000f0ea:	89 c3                	mov    ebx,eax
c000f0ec:	83 ec 0c             	sub    esp,0xc
c000f0ef:	53                   	push   ebx
c000f0f0:	e8 e9 ba 00 00       	call   c001abde <IDE::IDE()>
c000f0f5:	83 c4 10             	add    esp,0x10
c000f0f8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f100:	83 ec 08             	sub    esp,0x8
c000f103:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f107:	50                   	push   eax
c000f108:	e8 c3 cc ff ff       	call   c000bdd0 <Device::addChild(Device*)>
c000f10d:	83 c4 10             	add    esp,0x10
c000f110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f114:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f11e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f122:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f12b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f12f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f13c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f13e:	83 c0 08             	add    eax,0x8
c000f141:	8b 00                	mov    eax,DWORD PTR [eax]
c000f143:	6a 00                	push   0x0
c000f145:	6a 00                	push   0x0
c000f147:	6a 00                	push   0x0
c000f149:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f14d:	ff d0                	call   eax
c000f14f:	83 c4 10             	add    esp,0x10
c000f152:	66 90                	xchg   ax,ax
c000f154:	90                   	nop
c000f155:	83 c4 28             	add    esp,0x28
c000f158:	5b                   	pop    ebx
c000f159:	c3                   	ret    
c000f15a:	66 90                	xchg   ax,ax

c000f15c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f15c:	83 ec 1c             	sub    esp,0x1c
c000f15f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f163:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f166:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f16a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f16f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f174:	83 ec 08             	sub    esp,0x8
c000f177:	52                   	push   edx
c000f178:	50                   	push   eax
c000f179:	e8 14 80 ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f185:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f18a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f18f:	83 ec 04             	sub    esp,0x4
c000f192:	6a 01                	push   0x1
c000f194:	52                   	push   edx
c000f195:	50                   	push   eax
c000f196:	e8 0f 81 ff ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c000f19b:	83 c4 10             	add    esp,0x10
c000f19e:	90                   	nop
c000f19f:	83 c4 1c             	add    esp,0x1c
c000f1a2:	c3                   	ret    
c000f1a3:	90                   	nop

c000f1a4 <ACPI::sleep()>:
c000f1a4:	83 ec 0c             	sub    esp,0xc
c000f1a7:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1ac:	85 c0                	test   eax,eax
c000f1ae:	74 08                	je     c000f1b8 <ACPI::sleep()+0x14>
c000f1b0:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1b5:	ff d0                	call   eax
c000f1b7:	90                   	nop
c000f1b8:	90                   	nop
c000f1b9:	83 c4 0c             	add    esp,0xc
c000f1bc:	c3                   	ret    
c000f1bd:	90                   	nop
c000f1be:	66 90                	xchg   ax,ax

c000f1c0 <ACPI::open(int, int, void*)>:
c000f1c0:	55                   	push   ebp
c000f1c1:	89 e5                	mov    ebp,esp
c000f1c3:	53                   	push   ebx
c000f1c4:	81 ec 74 01 00 00    	sub    esp,0x174
c000f1ca:	83 ec 0c             	sub    esp,0xc
c000f1cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f1d0:	e8 67 fd ff ff       	call   c000ef3c <ACPI::detectPCI()>
c000f1d5:	83 c4 10             	add    esp,0x10
c000f1d8:	83 ec 0c             	sub    esp,0xc
c000f1db:	68 a4 08 02 c0       	push   0xc00208a4
c000f1e0:	e8 d7 0f 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c000f1e5:	83 c4 10             	add    esp,0x10
c000f1e8:	b8 4c 05 00 00       	mov    eax,0x54c
c000f1ed:	8a 00                	mov    al,BYTE PTR [eax]
c000f1ef:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000f1f2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f1f6:	83 f8 01             	cmp    eax,0x1
c000f1f9:	75 15                	jne    c000f210 <ACPI::open(int, int, void*)+0x50>
c000f1fb:	83 ec 0c             	sub    esp,0xc
c000f1fe:	68 34 09 02 c0       	push   0xc0020934
c000f203:	e8 3e 49 00 00       	call   c0013b46 <Thr::loadKernelSymbolTable(char const*)>
c000f208:	83 c4 10             	add    esp,0x10
c000f20b:	eb 33                	jmp    c000f240 <ACPI::open(int, int, void*)+0x80>
c000f20d:	8d 76 00             	lea    esi,[esi+0x0]
c000f210:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f214:	3d bb 00 00 00       	cmp    eax,0xbb
c000f219:	75 15                	jne    c000f230 <ACPI::open(int, int, void*)+0x70>
c000f21b:	83 ec 0c             	sub    esp,0xc
c000f21e:	68 52 09 02 c0       	push   0xc0020952
c000f223:	e8 1e 49 00 00       	call   c0013b46 <Thr::loadKernelSymbolTable(char const*)>
c000f228:	83 c4 10             	add    esp,0x10
c000f22b:	eb 13                	jmp    c000f240 <ACPI::open(int, int, void*)+0x80>
c000f22d:	8d 76 00             	lea    esi,[esi+0x0]
c000f230:	83 ec 0c             	sub    esp,0xc
c000f233:	68 70 09 02 c0       	push   0xc0020970
c000f238:	e8 fc 15 00 00       	call   c0010839 <KePanic(char const*)>
c000f23d:	83 c4 10             	add    esp,0x10
c000f240:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f244:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f24b:	83 ec 0c             	sub    esp,0xc
c000f24e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f251:	e8 75 88 ff ff       	call   c0007acb <malloc>
c000f256:	83 c4 10             	add    esp,0x10
c000f259:	89 c3                	mov    ebx,eax
c000f25b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f260:	83 ec 04             	sub    esp,0x4
c000f263:	50                   	push   eax
c000f264:	68 8a 09 02 c0       	push   0xc002098a
c000f269:	53                   	push   ebx
c000f26a:	e8 a9 bc ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000f26f:	83 c4 10             	add    esp,0x10
c000f272:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f275:	83 ec 08             	sub    esp,0x8
c000f278:	6a 01                	push   0x1
c000f27a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f27d:	e8 52 bd ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c000f282:	83 c4 10             	add    esp,0x10
c000f285:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f288:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f28c:	75 12                	jne    c000f2a0 <ACPI::open(int, int, void*)+0xe0>
c000f28e:	83 ec 0c             	sub    esp,0xc
c000f291:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f294:	e8 99 bd ff ff       	call   c000b032 <File::close()>
c000f299:	83 c4 10             	add    esp,0x10
c000f29c:	eb 06                	jmp    c000f2a4 <ACPI::open(int, int, void*)+0xe4>
c000f29e:	66 90                	xchg   ax,ax
c000f2a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f2a4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f2a8:	74 16                	je     c000f2c0 <ACPI::open(int, int, void*)+0x100>
c000f2aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2af:	83 c0 08             	add    eax,0x8
c000f2b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2b4:	83 ec 0c             	sub    esp,0xc
c000f2b7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2ba:	ff d0                	call   eax
c000f2bc:	83 c4 10             	add    esp,0x10
c000f2bf:	90                   	nop
c000f2c0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f2c3:	83 f0 01             	xor    eax,0x1
c000f2c6:	0f b6 c0             	movzx  eax,al
c000f2c9:	85 c0                	test   eax,eax
c000f2cb:	74 3b                	je     c000f308 <ACPI::open(int, int, void*)+0x148>
c000f2cd:	83 ec 0c             	sub    esp,0xc
c000f2d0:	68 a8 09 02 c0       	push   0xc00209a8
c000f2d5:	e8 e2 0e 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c000f2da:	83 c4 10             	add    esp,0x10
c000f2dd:	83 ec 04             	sub    esp,0x4
c000f2e0:	6a 0c                	push   0xc
c000f2e2:	68 c3 09 02 c0       	push   0xc00209c3
c000f2e7:	68 d4 09 02 c0       	push   0xc00209d4
c000f2ec:	e8 fd 3b 00 00       	call   c0012eee <Reg::readIntWithDefault(char*, char*, int)>
c000f2f1:	83 c4 10             	add    esp,0x10
c000f2f4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f2f7:	83 ec 0c             	sub    esp,0xc
c000f2fa:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f2fd:	e8 28 a5 ff ff       	call   c000982a <Virt::setupPageSwapping(int)>
c000f302:	83 c4 10             	add    esp,0x10
c000f305:	8d 76 00             	lea    esi,[esi+0x0]
c000f308:	83 ec 0c             	sub    esp,0xc
c000f30b:	68 f5 f9 01 c0       	push   0xc001f9f5
c000f310:	e8 a7 0e 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c000f315:	83 c4 10             	add    esp,0x10
c000f318:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f31b:	83 ec 08             	sub    esp,0x8
c000f31e:	6a 13                	push   0x13
c000f320:	50                   	push   eax
c000f321:	e8 c2 cd ff ff       	call   c000c0e8 <getDevicesOfType(DeviceType)>
c000f326:	83 c4 0c             	add    esp,0xc
c000f329:	8d 76 00             	lea    esi,[esi+0x0]
c000f32c:	83 ec 0c             	sub    esp,0xc
c000f32f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f332:	50                   	push   eax
c000f333:	e8 a8 fa 00 00       	call   c001ede0 <LinkedList<Device>::isEmpty()>
c000f338:	83 c4 10             	add    esp,0x10
c000f33b:	83 f0 01             	xor    eax,0x1
c000f33e:	0f b6 c0             	movzx  eax,al
c000f341:	85 c0                	test   eax,eax
c000f343:	0f 84 1f 01 00 00    	je     c000f468 <ACPI::open(int, int, void*)+0x2a8>
c000f349:	83 ec 0c             	sub    esp,0xc
c000f34c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f34f:	50                   	push   eax
c000f350:	e8 a7 fa 00 00       	call   c001edfc <LinkedList<Device>::getFirstElement()>
c000f355:	83 c4 10             	add    esp,0x10
c000f358:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f35b:	83 ec 0c             	sub    esp,0xc
c000f35e:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f361:	50                   	push   eax
c000f362:	e8 9d fa 00 00       	call   c001ee04 <LinkedList<Device>::removeFirst()>
c000f367:	83 c4 10             	add    esp,0x10
c000f36a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f36d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f370:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f373:	b8 24 00 00 00       	mov    eax,0x24
c000f378:	83 e0 fc             	and    eax,0xfffffffc
c000f37b:	89 c3                	mov    ebx,eax
c000f37d:	b8 00 00 00 00       	mov    eax,0x0
c000f382:	66 90                	xchg   ax,ax
c000f384:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f38b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f392:	83 c0 04             	add    eax,0x4
c000f395:	39 d8                	cmp    eax,ebx
c000f397:	72 eb                	jb     c000f384 <ACPI::open(int, int, void*)+0x1c4>
c000f399:	83 ec 08             	sub    esp,0x8
c000f39c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f3a2:	50                   	push   eax
c000f3a3:	83 ec 24             	sub    esp,0x24
c000f3a6:	89 e1                	mov    ecx,esp
c000f3a8:	b8 24 00 00 00       	mov    eax,0x24
c000f3ad:	83 e0 fc             	and    eax,0xfffffffc
c000f3b0:	89 c3                	mov    ebx,eax
c000f3b2:	b8 00 00 00 00       	mov    eax,0x0
c000f3b7:	90                   	nop
c000f3b8:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f3bf:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f3c2:	83 c0 04             	add    eax,0x4
c000f3c5:	39 d8                	cmp    eax,ebx
c000f3c7:	72 ef                	jb     c000f3b8 <ACPI::open(int, int, void*)+0x1f8>
c000f3c9:	e8 50 b1 00 00       	call   c001a51e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3ce:	83 c4 30             	add    esp,0x30
c000f3d1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f3d4:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f3d8:	0f 84 4e ff ff ff    	je     c000f32c <ACPI::open(int, int, void*)+0x16c>
c000f3de:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f3e5:	83 ec 0c             	sub    esp,0xc
c000f3e8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f3eb:	e8 db 86 ff ff       	call   c0007acb <malloc>
c000f3f0:	83 c4 10             	add    esp,0x10
c000f3f3:	89 c3                	mov    ebx,eax
c000f3f5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f3fa:	83 ec 04             	sub    esp,0x4
c000f3fd:	50                   	push   eax
c000f3fe:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f401:	53                   	push   ebx
c000f402:	e8 11 bb ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000f407:	83 c4 10             	add    esp,0x10
c000f40a:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f40d:	83 ec 0c             	sub    esp,0xc
c000f410:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f413:	e8 2a be ff ff       	call   c000b242 <File::exists()>
c000f418:	83 c4 10             	add    esp,0x10
c000f41b:	0f b6 c0             	movzx  eax,al
c000f41e:	85 c0                	test   eax,eax
c000f420:	74 22                	je     c000f444 <ACPI::open(int, int, void*)+0x284>
c000f422:	83 ec 08             	sub    esp,0x8
c000f425:	6a 01                	push   0x1
c000f427:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f42a:	e8 99 51 00 00       	call   c00145c8 <Thr::loadDLL(char const*, bool)>
c000f42f:	83 c4 10             	add    esp,0x10
c000f432:	83 ec 08             	sub    esp,0x8
c000f435:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f438:	50                   	push   eax
c000f439:	e8 ca 53 00 00       	call   c0014808 <Thr::executeDLL(unsigned long, void*)>
c000f43e:	83 c4 10             	add    esp,0x10
c000f441:	8d 76 00             	lea    esi,[esi+0x0]
c000f444:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f448:	0f 84 de fe ff ff    	je     c000f32c <ACPI::open(int, int, void*)+0x16c>
c000f44e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f451:	8b 00                	mov    eax,DWORD PTR [eax]
c000f453:	83 c0 08             	add    eax,0x8
c000f456:	8b 00                	mov    eax,DWORD PTR [eax]
c000f458:	83 ec 0c             	sub    esp,0xc
c000f45b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f45e:	ff d0                	call   eax
c000f460:	83 c4 10             	add    esp,0x10
c000f463:	e9 c4 fe ff ff       	jmp    c000f32c <ACPI::open(int, int, void*)+0x16c>
c000f468:	83 ec 0c             	sub    esp,0xc
c000f46b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f46e:	50                   	push   eax
c000f46f:	e8 68 f9 00 00       	call   c001eddc <LinkedList<Device>::~LinkedList()>
c000f474:	83 c4 10             	add    esp,0x10
c000f477:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f47d:	83 ec 08             	sub    esp,0x8
c000f480:	6a 01                	push   0x1
c000f482:	68 db 09 02 c0       	push   0xc00209db
c000f487:	e8 3c 51 00 00       	call   c00145c8 <Thr::loadDLL(char const*, bool)>
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	83 ec 08             	sub    esp,0x8
c000f492:	53                   	push   ebx
c000f493:	50                   	push   eax
c000f494:	e8 6f 53 00 00       	call   c0014808 <Thr::executeDLL(unsigned long, void*)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f4a1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4a7:	83 e0 04             	and    eax,0x4
c000f4aa:	0f b6 c0             	movzx  eax,al
c000f4ad:	85 c0                	test   eax,eax
c000f4af:	0f 84 e3 00 00 00    	je     c000f598 <ACPI::open(int, int, void*)+0x3d8>
c000f4b5:	83 ec 0c             	sub    esp,0xc
c000f4b8:	68 f8 09 02 c0       	push   0xc00209f8
c000f4bd:	e8 fa 0c 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f4cc:	83 ec 0c             	sub    esp,0xc
c000f4cf:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f4d2:	e8 f4 85 ff ff       	call   c0007acb <malloc>
c000f4d7:	83 c4 10             	add    esp,0x10
c000f4da:	89 c3                	mov    ebx,eax
c000f4dc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4e1:	83 ec 04             	sub    esp,0x4
c000f4e4:	50                   	push   eax
c000f4e5:	68 15 0a 02 c0       	push   0xc0020a15
c000f4ea:	53                   	push   ebx
c000f4eb:	e8 28 ba ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000f4f0:	83 c4 10             	add    esp,0x10
c000f4f3:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f4f6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f4fa:	74 1c                	je     c000f518 <ACPI::open(int, int, void*)+0x358>
c000f4fc:	83 ec 0c             	sub    esp,0xc
c000f4ff:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f502:	e8 3b bd ff ff       	call   c000b242 <File::exists()>
c000f507:	83 c4 10             	add    esp,0x10
c000f50a:	0f b6 c0             	movzx  eax,al
c000f50d:	85 c0                	test   eax,eax
c000f50f:	74 07                	je     c000f518 <ACPI::open(int, int, void*)+0x358>
c000f511:	b0 01                	mov    al,0x1
c000f513:	eb 07                	jmp    c000f51c <ACPI::open(int, int, void*)+0x35c>
c000f515:	8d 76 00             	lea    esi,[esi+0x0]
c000f518:	b0 00                	mov    al,0x0
c000f51a:	66 90                	xchg   ax,ax
c000f51c:	0f b6 c0             	movzx  eax,al
c000f51f:	85 c0                	test   eax,eax
c000f521:	74 21                	je     c000f544 <ACPI::open(int, int, void*)+0x384>
c000f523:	83 ec 08             	sub    esp,0x8
c000f526:	6a 01                	push   0x1
c000f528:	68 15 0a 02 c0       	push   0xc0020a15
c000f52d:	e8 96 50 00 00       	call   c00145c8 <Thr::loadDLL(char const*, bool)>
c000f532:	83 c4 10             	add    esp,0x10
c000f535:	83 ec 08             	sub    esp,0x8
c000f538:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f53b:	50                   	push   eax
c000f53c:	e8 c7 52 00 00       	call   c0014808 <Thr::executeDLL(unsigned long, void*)>
c000f541:	83 c4 10             	add    esp,0x10
c000f544:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f548:	74 1e                	je     c000f568 <ACPI::open(int, int, void*)+0x3a8>
c000f54a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f54e:	74 18                	je     c000f568 <ACPI::open(int, int, void*)+0x3a8>
c000f550:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f553:	8b 00                	mov    eax,DWORD PTR [eax]
c000f555:	83 c0 08             	add    eax,0x8
c000f558:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55a:	83 ec 0c             	sub    esp,0xc
c000f55d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f560:	ff d0                	call   eax
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	8d 76 00             	lea    esi,[esi+0x0]
c000f568:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f56d:	83 ec 08             	sub    esp,0x8
c000f570:	68 32 0a 02 c0       	push   0xc0020a32
c000f575:	50                   	push   eax
c000f576:	e8 65 f2 ff ff       	call   c000e7e0 <findDataTable(unsigned char*, char*)>
c000f57b:	83 c4 10             	add    esp,0x10
c000f57e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f581:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f585:	74 11                	je     c000f598 <ACPI::open(int, int, void*)+0x3d8>
c000f587:	83 ec 08             	sub    esp,0x8
c000f58a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f58d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f590:	e8 c7 fb ff ff       	call   c000f15c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f595:	83 c4 10             	add    esp,0x10
c000f598:	b8 00 00 00 00       	mov    eax,0x0
c000f59d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f5a0:	c9                   	leave  
c000f5a1:	c3                   	ret    

c000f5a2 <CPU::close(int, int, void*)>:
c000f5a2:	31 c0                	xor    eax,eax
c000f5a4:	c3                   	ret    
c000f5a5:	90                   	nop

c000f5a6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5a6:	60                   	pusha  
c000f5a7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5b3:	9c                   	pushf  
c000f5b4:	fa                   	cli    
c000f5b5:	0f 09                	wbinvd 
c000f5b7:	0f 30                	wrmsr  
c000f5b9:	9d                   	popf   
c000f5ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5be:	89 02                	mov    DWORD PTR [edx],eax
c000f5c0:	61                   	popa   
c000f5c1:	c3                   	ret    

c000f5c2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5c2:	60                   	pusha  
c000f5c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5c7:	9c                   	pushf  
c000f5c8:	fa                   	cli    
c000f5c9:	0f 09                	wbinvd 
c000f5cb:	31 c0                	xor    eax,eax
c000f5cd:	31 d2                	xor    edx,edx
c000f5cf:	0f 32                	rdmsr  
c000f5d1:	9d                   	popf   
c000f5d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5d6:	89 02                	mov    DWORD PTR [edx],eax
c000f5d8:	61                   	popa   
c000f5d9:	c3                   	ret    

c000f5da <CPU::AMD_K6_writeback(int, int, int)>:
c000f5da:	56                   	push   esi
c000f5db:	53                   	push   ebx
c000f5dc:	83 ec 10             	sub    esp,0x10
c000f5df:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f5e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5e8:	75 5d                	jne    c000f647 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5ea:	83 f8 08             	cmp    eax,0x8
c000f5ed:	75 09                	jne    c000f5f8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f5ef:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f5f4:	7e 13                	jle    c000f609 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f5f6:	eb 30                	jmp    c000f628 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5f8:	83 f8 06             	cmp    eax,0x6
c000f5fb:	7c 4a                	jl     c000f647 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5fd:	83 f8 07             	cmp    eax,0x7
c000f600:	7e 07                	jle    c000f609 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f602:	83 f8 09             	cmp    eax,0x9
c000f605:	74 21                	je     c000f628 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f607:	eb 3e                	jmp    c000f647 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f609:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f60f:	89 e6                	mov    esi,esp
c000f611:	56                   	push   esi
c000f612:	68 82 00 00 c0       	push   0xc0000082
c000f617:	e8 a6 ff ff ff       	call   c000f5c2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f61c:	c1 eb 15             	shr    ebx,0x15
c000f61f:	56                   	push   esi
c000f620:	83 e3 7e             	and    ebx,0x7e
c000f623:	6a 00                	push   0x0
c000f625:	53                   	push   ebx
c000f626:	eb 12                	jmp    c000f63a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f628:	89 e3                	mov    ebx,esp
c000f62a:	53                   	push   ebx
c000f62b:	68 82 00 00 c0       	push   0xc0000082
c000f630:	e8 8d ff ff ff       	call   c000f5c2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f635:	53                   	push   ebx
c000f636:	6a 00                	push   0x0
c000f638:	6a 00                	push   0x0
c000f63a:	68 82 00 00 c0       	push   0xc0000082
c000f63f:	e8 62 ff ff ff       	call   c000f5a6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f644:	83 c4 18             	add    esp,0x18
c000f647:	83 c4 10             	add    esp,0x10
c000f64a:	5b                   	pop    ebx
c000f64b:	5e                   	pop    esi
c000f64c:	c3                   	ret    
c000f64d:	90                   	nop

c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f64e:	55                   	push   ebp
c000f64f:	57                   	push   edi
c000f650:	56                   	push   esi
c000f651:	53                   	push   ebx
c000f652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f656:	39 05 50 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f50,eax
c000f65c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f660:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f664:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f668:	75 23                	jne    c000f68d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f66a:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f66f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f673:	89 06                	mov    DWORD PTR [esi],eax
c000f675:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f67a:	89 07                	mov    DWORD PTR [edi],eax
c000f67c:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f681:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f684:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f689:	89 02                	mov    DWORD PTR [edx],eax
c000f68b:	eb 3f                	jmp    c000f6cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f68d:	31 c9                	xor    ecx,ecx
c000f68f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f693:	0f a2                	cpuid  
c000f695:	89 06                	mov    DWORD PTR [esi],eax
c000f697:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f69b:	89 1f                	mov    DWORD PTR [edi],ebx
c000f69d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6a0:	89 10                	mov    DWORD PTR [eax],edx
c000f6a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6a6:	a3 50 1f 02 c0       	mov    ds:0xc0021f50,eax
c000f6ab:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6ad:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6b2:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6b4:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6bc:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c7:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6cc:	5b                   	pop    ebx
c000f6cd:	5e                   	pop    esi
c000f6ce:	5f                   	pop    edi
c000f6cf:	5d                   	pop    ebp
c000f6d0:	c3                   	ret    
c000f6d1:	90                   	nop

c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>:
c000f6d2:	83 ec 10             	sub    esp,0x10
c000f6d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6d9:	50                   	push   eax
c000f6da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6de:	50                   	push   eax
c000f6df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e3:	50                   	push   eax
c000f6e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e8:	50                   	push   eax
c000f6e9:	6a 01                	push   0x1
c000f6eb:	e8 5e ff ff ff       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6f4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f6f8:	0f 95 c0             	setne  al
c000f6fb:	83 c4 24             	add    esp,0x24
c000f6fe:	c3                   	ret    
c000f6ff:	90                   	nop

c000f700 <CPU::cpuidCheckECX(unsigned int)>:
c000f700:	83 ec 10             	sub    esp,0x10
c000f703:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f707:	50                   	push   eax
c000f708:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70c:	50                   	push   eax
c000f70d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f711:	50                   	push   eax
c000f712:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f716:	50                   	push   eax
c000f717:	6a 01                	push   0x1
c000f719:	e8 30 ff ff ff       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f71e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f722:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f726:	0f 95 c0             	setne  al
c000f729:	83 c4 24             	add    esp,0x24
c000f72c:	c3                   	ret    
c000f72d:	90                   	nop

c000f72e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f72e:	83 ec 10             	sub    esp,0x10
c000f731:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f735:	50                   	push   eax
c000f736:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73a:	50                   	push   eax
c000f73b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73f:	50                   	push   eax
c000f740:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f744:	50                   	push   eax
c000f745:	6a 07                	push   0x7
c000f747:	e8 02 ff ff ff       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f74c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f750:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f754:	0f 95 c0             	setne  al
c000f757:	83 c4 24             	add    esp,0x24
c000f75a:	c3                   	ret    
c000f75b:	90                   	nop

c000f75c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f75c:	83 ec 10             	sub    esp,0x10
c000f75f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f763:	50                   	push   eax
c000f764:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f768:	50                   	push   eax
c000f769:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76d:	50                   	push   eax
c000f76e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f772:	50                   	push   eax
c000f773:	6a 07                	push   0x7
c000f775:	e8 d4 fe ff ff       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f77a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f77e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f782:	0f 95 c0             	setne  al
c000f785:	83 c4 24             	add    esp,0x24
c000f788:	c3                   	ret    
c000f789:	90                   	nop

c000f78a <CPU::CPU()>:
c000f78a:	83 ec 0c             	sub    esp,0xc
c000f78d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f791:	83 ec 08             	sub    esp,0x8
c000f794:	68 55 0b 02 c0       	push   0xc0020b55
c000f799:	50                   	push   eax
c000f79a:	e8 c9 c7 ff ff       	call   c000bf68 <Device::Device(char const*)>
c000f79f:	83 c4 10             	add    esp,0x10
c000f7a2:	ba dc 0b 02 c0       	mov    edx,0xc0020bdc
c000f7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ab:	89 10                	mov    DWORD PTR [eax],edx
c000f7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7bf:	05 78 01 00 00       	add    eax,0x178
c000f7c4:	83 ec 0c             	sub    esp,0xc
c000f7c7:	50                   	push   eax
c000f7c8:	e8 a7 7b ff ff       	call   c0007374 <GDT::GDT()>
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d4:	05 7c 09 00 00       	add    eax,0x97c
c000f7d9:	83 ec 0c             	sub    esp,0xc
c000f7dc:	50                   	push   eax
c000f7dd:	e8 e2 7d ff ff       	call   c00075c4 <IDT::IDT()>
c000f7e2:	83 c4 10             	add    esp,0x10
c000f7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e9:	05 7c 11 00 00       	add    eax,0x117c
c000f7ee:	83 ec 0c             	sub    esp,0xc
c000f7f1:	50                   	push   eax
c000f7f2:	e8 45 97 ff ff       	call   c0008f3c <TSS::TSS()>
c000f7f7:	83 c4 10             	add    esp,0x10
c000f7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7fe:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f809:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f813:	90                   	nop
c000f814:	83 c4 0c             	add    esp,0xc
c000f817:	c3                   	ret    

c000f818 <CPU::displayFeatures()>:
c000f818:	c3                   	ret    
c000f819:	90                   	nop

c000f81a <CPU::detectFeatures()>:
c000f81a:	55                   	push   ebp
c000f81b:	57                   	push   edi
c000f81c:	56                   	push   esi
c000f81d:	53                   	push   ebx
c000f81e:	83 ec 30             	sub    esp,0x30
c000f821:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f825:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f82f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f835:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f83c:	6a 0d                	push   0xd
c000f83e:	6a 00                	push   0x0
c000f840:	55                   	push   ebp
c000f841:	e8 aa 0c ff ff       	call   c00004f0 <memset>
c000f846:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f84b:	83 c4 10             	add    esp,0x10
c000f84e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f855:	0f 84 db 05 00 00    	je     c000fe36 <CPU::detectFeatures()+0x61c>
c000f85b:	83 ec 0c             	sub    esp,0xc
c000f85e:	89 ef                	mov    edi,ebp
c000f860:	6a 10                	push   0x10
c000f862:	e8 6b fe ff ff       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c000f867:	83 e0 01             	and    eax,0x1
c000f86a:	8d 14 00             	lea    edx,[eax+eax*1]
c000f86d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f873:	83 e0 fd             	and    eax,0xfffffffd
c000f876:	09 d0                	or     eax,edx
c000f878:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f87e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f885:	e8 48 fe ff ff       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c000f88a:	83 e0 01             	and    eax,0x1
c000f88d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f894:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f89a:	83 e0 fb             	and    eax,0xfffffffb
c000f89d:	09 d0                	or     eax,edx
c000f89f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8a5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8ac:	e8 21 fe ff ff       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c000f8b1:	83 e0 01             	and    eax,0x1
c000f8b4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8bb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8c1:	83 e0 f7             	and    eax,0xfffffff7
c000f8c4:	09 d0                	or     eax,edx
c000f8c6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8cc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8d3:	e8 fa fd ff ff       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c000f8d8:	83 e0 01             	and    eax,0x1
c000f8db:	c1 e0 04             	shl    eax,0x4
c000f8de:	89 c2                	mov    edx,eax
c000f8e0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8e6:	83 e0 ef             	and    eax,0xffffffef
c000f8e9:	09 d0                	or     eax,edx
c000f8eb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8f1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f8f8:	e8 d5 fd ff ff       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c000f8fd:	83 e0 01             	and    eax,0x1
c000f900:	c1 e0 05             	shl    eax,0x5
c000f903:	89 c2                	mov    edx,eax
c000f905:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f90b:	83 e0 df             	and    eax,0xffffffdf
c000f90e:	09 d0                	or     eax,edx
c000f910:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f916:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f91d:	e8 b0 fd ff ff       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c000f922:	83 e0 01             	and    eax,0x1
c000f925:	8d 14 00             	lea    edx,[eax+eax*1]
c000f928:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f92e:	83 e0 fd             	and    eax,0xfffffffd
c000f931:	09 d0                	or     eax,edx
c000f933:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f939:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f940:	e8 8d fd ff ff       	call   c000f6d2 <CPU::cpuidCheckEDX(unsigned int)>
c000f945:	83 e0 01             	and    eax,0x1
c000f948:	c1 e0 06             	shl    eax,0x6
c000f94b:	89 c2                	mov    edx,eax
c000f94d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f953:	83 e0 bf             	and    eax,0xffffffbf
c000f956:	09 d0                	or     eax,edx
c000f958:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f95e:	58                   	pop    eax
c000f95f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f963:	50                   	push   eax
c000f964:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f968:	50                   	push   eax
c000f969:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f96d:	56                   	push   esi
c000f96e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f972:	50                   	push   eax
c000f973:	6a 00                	push   0x0
c000f975:	e8 d4 fc ff ff       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f97a:	b8 04 00 00 00       	mov    eax,0x4
c000f97f:	89 c1                	mov    ecx,eax
c000f981:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f983:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f989:	89 c1                	mov    ecx,eax
c000f98b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f98f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f991:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f997:	89 c1                	mov    ecx,eax
c000f999:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f99d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f99f:	83 c4 18             	add    esp,0x18
c000f9a2:	68 64 0a 02 c0       	push   0xc0020a64
c000f9a7:	55                   	push   ebp
c000f9a8:	e8 d3 0d ff ff       	call   c0000780 <strcmp>
c000f9ad:	83 c4 10             	add    esp,0x10
c000f9b0:	85 c0                	test   eax,eax
c000f9b2:	75 0f                	jne    c000f9c3 <CPU::detectFeatures()+0x1a9>
c000f9b4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9be:	e9 22 02 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000f9c3:	50                   	push   eax
c000f9c4:	50                   	push   eax
c000f9c5:	68 71 0a 02 c0       	push   0xc0020a71
c000f9ca:	55                   	push   ebp
c000f9cb:	e8 b0 0d ff ff       	call   c0000780 <strcmp>
c000f9d0:	83 c4 10             	add    esp,0x10
c000f9d3:	85 c0                	test   eax,eax
c000f9d5:	74 dd                	je     c000f9b4 <CPU::detectFeatures()+0x19a>
c000f9d7:	50                   	push   eax
c000f9d8:	50                   	push   eax
c000f9d9:	68 7e 0a 02 c0       	push   0xc0020a7e
c000f9de:	55                   	push   ebp
c000f9df:	e8 9c 0d ff ff       	call   c0000780 <strcmp>
c000f9e4:	83 c4 10             	add    esp,0x10
c000f9e7:	85 c0                	test   eax,eax
c000f9e9:	74 2a                	je     c000fa15 <CPU::detectFeatures()+0x1fb>
c000f9eb:	50                   	push   eax
c000f9ec:	50                   	push   eax
c000f9ed:	68 8b 0a 02 c0       	push   0xc0020a8b
c000f9f2:	55                   	push   ebp
c000f9f3:	e8 88 0d ff ff       	call   c0000780 <strcmp>
c000f9f8:	83 c4 10             	add    esp,0x10
c000f9fb:	85 c0                	test   eax,eax
c000f9fd:	74 16                	je     c000fa15 <CPU::detectFeatures()+0x1fb>
c000f9ff:	50                   	push   eax
c000fa00:	50                   	push   eax
c000fa01:	68 98 0a 02 c0       	push   0xc0020a98
c000fa06:	55                   	push   ebp
c000fa07:	e8 74 0d ff ff       	call   c0000780 <strcmp>
c000fa0c:	83 c4 10             	add    esp,0x10
c000fa0f:	85 c0                	test   eax,eax
c000fa11:	74 48                	je     c000fa5b <CPU::detectFeatures()+0x241>
c000fa13:	eb 0f                	jmp    c000fa24 <CPU::detectFeatures()+0x20a>
c000fa15:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa1f:	e9 c1 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fa24:	50                   	push   eax
c000fa25:	50                   	push   eax
c000fa26:	68 a5 0a 02 c0       	push   0xc0020aa5
c000fa2b:	55                   	push   ebp
c000fa2c:	e8 4f 0d ff ff       	call   c0000780 <strcmp>
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	85 c0                	test   eax,eax
c000fa36:	74 23                	je     c000fa5b <CPU::detectFeatures()+0x241>
c000fa38:	57                   	push   edi
c000fa39:	57                   	push   edi
c000fa3a:	68 b2 0a 02 c0       	push   0xc0020ab2
c000fa3f:	55                   	push   ebp
c000fa40:	e8 3b 0d ff ff       	call   c0000780 <strcmp>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	85 c0                	test   eax,eax
c000fa4a:	75 1e                	jne    c000fa6a <CPU::detectFeatures()+0x250>
c000fa4c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa56:	e9 8a 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fa5b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa65:	e9 7b 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fa6a:	56                   	push   esi
c000fa6b:	56                   	push   esi
c000fa6c:	68 bf 0a 02 c0       	push   0xc0020abf
c000fa71:	55                   	push   ebp
c000fa72:	e8 09 0d ff ff       	call   c0000780 <strcmp>
c000fa77:	83 c4 10             	add    esp,0x10
c000fa7a:	85 c0                	test   eax,eax
c000fa7c:	75 0f                	jne    c000fa8d <CPU::detectFeatures()+0x273>
c000fa7e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa88:	e9 58 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fa8d:	51                   	push   ecx
c000fa8e:	51                   	push   ecx
c000fa8f:	68 7e 0a 02 c0       	push   0xc0020a7e
c000fa94:	55                   	push   ebp
c000fa95:	e8 e6 0c ff ff       	call   c0000780 <strcmp>
c000fa9a:	83 c4 10             	add    esp,0x10
c000fa9d:	85 c0                	test   eax,eax
c000fa9f:	75 0f                	jne    c000fab0 <CPU::detectFeatures()+0x296>
c000faa1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000faab:	e9 35 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fab0:	52                   	push   edx
c000fab1:	52                   	push   edx
c000fab2:	68 cc 0a 02 c0       	push   0xc0020acc
c000fab7:	55                   	push   ebp
c000fab8:	e8 c3 0c ff ff       	call   c0000780 <strcmp>
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	85 c0                	test   eax,eax
c000fac2:	75 0f                	jne    c000fad3 <CPU::detectFeatures()+0x2b9>
c000fac4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000face:	e9 12 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fad3:	50                   	push   eax
c000fad4:	50                   	push   eax
c000fad5:	68 d9 0a 02 c0       	push   0xc0020ad9
c000fada:	55                   	push   ebp
c000fadb:	e8 a0 0c ff ff       	call   c0000780 <strcmp>
c000fae0:	83 c4 10             	add    esp,0x10
c000fae3:	85 c0                	test   eax,eax
c000fae5:	75 0f                	jne    c000faf6 <CPU::detectFeatures()+0x2dc>
c000fae7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000faf1:	e9 ef 00 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000faf6:	50                   	push   eax
c000faf7:	50                   	push   eax
c000faf8:	68 e6 0a 02 c0       	push   0xc0020ae6
c000fafd:	55                   	push   ebp
c000fafe:	e8 7d 0c ff ff       	call   c0000780 <strcmp>
c000fb03:	83 c4 10             	add    esp,0x10
c000fb06:	85 c0                	test   eax,eax
c000fb08:	75 0f                	jne    c000fb19 <CPU::detectFeatures()+0x2ff>
c000fb0a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb14:	e9 cc 00 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fb19:	50                   	push   eax
c000fb1a:	50                   	push   eax
c000fb1b:	68 f3 0a 02 c0       	push   0xc0020af3
c000fb20:	55                   	push   ebp
c000fb21:	e8 5a 0c ff ff       	call   c0000780 <strcmp>
c000fb26:	83 c4 10             	add    esp,0x10
c000fb29:	85 c0                	test   eax,eax
c000fb2b:	75 0f                	jne    c000fb3c <CPU::detectFeatures()+0x322>
c000fb2d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb37:	e9 a9 00 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fb3c:	50                   	push   eax
c000fb3d:	50                   	push   eax
c000fb3e:	68 00 0b 02 c0       	push   0xc0020b00
c000fb43:	55                   	push   ebp
c000fb44:	e8 37 0c ff ff       	call   c0000780 <strcmp>
c000fb49:	83 c4 10             	add    esp,0x10
c000fb4c:	85 c0                	test   eax,eax
c000fb4e:	75 0f                	jne    c000fb5f <CPU::detectFeatures()+0x345>
c000fb50:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb5a:	e9 86 00 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fb5f:	50                   	push   eax
c000fb60:	50                   	push   eax
c000fb61:	68 0d 0b 02 c0       	push   0xc0020b0d
c000fb66:	55                   	push   ebp
c000fb67:	e8 14 0c ff ff       	call   c0000780 <strcmp>
c000fb6c:	83 c4 10             	add    esp,0x10
c000fb6f:	85 c0                	test   eax,eax
c000fb71:	75 0c                	jne    c000fb7f <CPU::detectFeatures()+0x365>
c000fb73:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb7d:	eb 66                	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fb7f:	50                   	push   eax
c000fb80:	50                   	push   eax
c000fb81:	68 1a 0b 02 c0       	push   0xc0020b1a
c000fb86:	55                   	push   ebp
c000fb87:	e8 f4 0b ff ff       	call   c0000780 <strcmp>
c000fb8c:	83 c4 10             	add    esp,0x10
c000fb8f:	85 c0                	test   eax,eax
c000fb91:	75 0c                	jne    c000fb9f <CPU::detectFeatures()+0x385>
c000fb93:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fb9d:	eb 46                	jmp    c000fbe5 <CPU::detectFeatures()+0x3cb>
c000fb9f:	57                   	push   edi
c000fba0:	57                   	push   edi
c000fba1:	68 27 0b 02 c0       	push   0xc0020b27
c000fba6:	55                   	push   ebp
c000fba7:	e8 d4 0b ff ff       	call   c0000780 <strcmp>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	85 c0                	test   eax,eax
c000fbb1:	74 e0                	je     c000fb93 <CPU::detectFeatures()+0x379>
c000fbb3:	56                   	push   esi
c000fbb4:	56                   	push   esi
c000fbb5:	68 34 0b 02 c0       	push   0xc0020b34
c000fbba:	55                   	push   ebp
c000fbbb:	e8 c0 0b ff ff       	call   c0000780 <strcmp>
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	85 c0                	test   eax,eax
c000fbc5:	74 cc                	je     c000fb93 <CPU::detectFeatures()+0x379>
c000fbc7:	51                   	push   ecx
c000fbc8:	51                   	push   ecx
c000fbc9:	68 41 0b 02 c0       	push   0xc0020b41
c000fbce:	55                   	push   ebp
c000fbcf:	e8 ac 0b ff ff       	call   c0000780 <strcmp>
c000fbd4:	83 c4 10             	add    esp,0x10
c000fbd7:	85 c0                	test   eax,eax
c000fbd9:	74 b8                	je     c000fb93 <CPU::detectFeatures()+0x379>
c000fbdb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fbe5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fbea:	0f 86 be 00 00 00    	jbe    c000fcae <CPU::detectFeatures()+0x494>
c000fbf0:	83 ec 0c             	sub    esp,0xc
c000fbf3:	68 80 00 00 00       	push   0x80
c000fbf8:	e8 31 fb ff ff       	call   c000f72e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbfd:	83 e0 01             	and    eax,0x1
c000fc00:	c1 e0 06             	shl    eax,0x6
c000fc03:	89 c2                	mov    edx,eax
c000fc05:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc0b:	83 e0 bf             	and    eax,0xffffffbf
c000fc0e:	09 d0                	or     eax,edx
c000fc10:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc16:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc1d:	e8 0c fb ff ff       	call   c000f72e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc22:	83 e0 01             	and    eax,0x1
c000fc25:	c1 e0 04             	shl    eax,0x4
c000fc28:	89 c2                	mov    edx,eax
c000fc2a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc30:	83 e0 ef             	and    eax,0xffffffef
c000fc33:	09 d0                	or     eax,edx
c000fc35:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc3b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc42:	e8 e7 fa ff ff       	call   c000f72e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc47:	89 c2                	mov    edx,eax
c000fc49:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc4f:	c1 e2 07             	shl    edx,0x7
c000fc52:	83 e0 7f             	and    eax,0x7f
c000fc55:	09 d0                	or     eax,edx
c000fc57:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc5d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc64:	e8 f3 fa ff ff       	call   c000f75c <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc69:	83 e0 01             	and    eax,0x1
c000fc6c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc73:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc79:	83 e0 f7             	and    eax,0xfffffff7
c000fc7c:	09 d0                	or     eax,edx
c000fc7e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc84:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc8b:	e8 cc fa ff ff       	call   c000f75c <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc90:	83 c4 10             	add    esp,0x10
c000fc93:	83 e0 01             	and    eax,0x1
c000fc96:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fca3:	83 e0 fb             	and    eax,0xfffffffb
c000fca6:	09 d0                	or     eax,edx
c000fca8:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcae:	83 ec 0c             	sub    esp,0xc
c000fcb1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcb5:	50                   	push   eax
c000fcb6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcba:	50                   	push   eax
c000fcbb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fcbf:	57                   	push   edi
c000fcc0:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcc4:	56                   	push   esi
c000fcc5:	6a 01                	push   0x1
c000fcc7:	e8 82 f9 ff ff       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcd0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fcd6:	89 c1                	mov    ecx,eax
c000fcd8:	83 e1 0f             	and    ecx,0xf
c000fcdb:	83 e2 f0             	and    edx,0xfffffff0
c000fcde:	09 ca                	or     edx,ecx
c000fce0:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fce6:	89 c2                	mov    edx,eax
c000fce8:	c1 ea 04             	shr    edx,0x4
c000fceb:	83 e2 0f             	and    edx,0xf
c000fcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fcf2:	89 d1                	mov    ecx,edx
c000fcf4:	83 c4 20             	add    esp,0x20
c000fcf7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fcfd:	c1 e1 06             	shl    ecx,0x6
c000fd00:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd06:	09 ca                	or     edx,ecx
c000fd08:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd0f:	89 c2                	mov    edx,eax
c000fd11:	c1 ea 08             	shr    edx,0x8
c000fd14:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd1a:	83 e2 0f             	and    edx,0xf
c000fd1d:	89 d5                	mov    ebp,edx
c000fd1f:	83 e5 03             	and    ebp,0x3
c000fd22:	c1 e5 06             	shl    ebp,0x6
c000fd25:	83 e1 3f             	and    ecx,0x3f
c000fd28:	09 e9                	or     ecx,ebp
c000fd2a:	89 d5                	mov    ebp,edx
c000fd2c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd32:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd38:	c1 ed 02             	shr    ebp,0x2
c000fd3b:	83 e1 c0             	and    ecx,0xffffffc0
c000fd3e:	09 e9                	or     ecx,ebp
c000fd40:	89 c5                	mov    ebp,eax
c000fd42:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd48:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd4e:	c1 ed 08             	shr    ebp,0x8
c000fd51:	83 e5 30             	and    ebp,0x30
c000fd54:	83 e1 cf             	and    ecx,0xffffffcf
c000fd57:	09 e9                	or     ecx,ebp
c000fd59:	83 fa 06             	cmp    edx,0x6
c000fd5c:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd62:	74 05                	je     c000fd69 <CPU::detectFeatures()+0x54f>
c000fd64:	83 fa 0f             	cmp    edx,0xf
c000fd67:	75 64                	jne    c000fdcd <CPU::detectFeatures()+0x5b3>
c000fd69:	89 c1                	mov    ecx,eax
c000fd6b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd71:	c1 e9 10             	shr    ecx,0x10
c000fd74:	c1 e1 04             	shl    ecx,0x4
c000fd77:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fd7b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fd81:	0f b6 c9             	movzx  ecx,cl
c000fd84:	c1 e1 06             	shl    ecx,0x6
c000fd87:	09 e9                	or     ecx,ebp
c000fd89:	83 fa 0f             	cmp    edx,0xf
c000fd8c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fd93:	75 38                	jne    c000fdcd <CPU::detectFeatures()+0x5b3>
c000fd95:	c1 e8 14             	shr    eax,0x14
c000fd98:	83 c0 0f             	add    eax,0xf
c000fd9b:	0f b6 c0             	movzx  eax,al
c000fd9e:	89 c2                	mov    edx,eax
c000fda0:	c1 e8 02             	shr    eax,0x2
c000fda3:	83 e2 03             	and    edx,0x3
c000fda6:	89 d1                	mov    ecx,edx
c000fda8:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fdae:	c1 e1 06             	shl    ecx,0x6
c000fdb1:	83 e2 3f             	and    edx,0x3f
c000fdb4:	09 ca                	or     edx,ecx
c000fdb6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdbc:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fdc2:	83 e2 c0             	and    edx,0xffffffc0
c000fdc5:	09 d0                	or     eax,edx
c000fdc7:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fdcd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fdd3:	83 ec 0c             	sub    esp,0xc
c000fdd6:	83 c8 07             	or     eax,0x7
c000fdd9:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fddf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fde3:	50                   	push   eax
c000fde4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fde8:	55                   	push   ebp
c000fde9:	57                   	push   edi
c000fdea:	56                   	push   esi
c000fdeb:	68 00 00 00 80       	push   0x80000000
c000fdf0:	e8 59 f8 ff ff       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdf5:	83 c4 20             	add    esp,0x20
c000fdf8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe00:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fe04:	76 1e                	jbe    c000fe24 <CPU::detectFeatures()+0x60a>
c000fe06:	83 ec 0c             	sub    esp,0xc
c000fe09:	50                   	push   eax
c000fe0a:	55                   	push   ebp
c000fe0b:	57                   	push   edi
c000fe0c:	56                   	push   esi
c000fe0d:	68 01 00 00 80       	push   0x80000001
c000fe12:	e8 37 f8 ff ff       	call   c000f64e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe17:	83 c4 20             	add    esp,0x20
c000fe1a:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe24:	52                   	push   edx
c000fe25:	52                   	push   edx
c000fe26:	68 4d 0b 02 c0       	push   0xc0020b4d
c000fe2b:	53                   	push   ebx
c000fe2c:	e8 29 c1 ff ff       	call   c000bf5a <Device::setName(char const*)>
c000fe31:	83 c4 10             	add    esp,0x10
c000fe34:	eb 69                	jmp    c000fe9f <CPU::detectFeatures()+0x685>
c000fe36:	50                   	push   eax
c000fe37:	50                   	push   eax
c000fe38:	68 b2 0a 02 c0       	push   0xc0020ab2
c000fe3d:	55                   	push   ebp
c000fe3e:	e8 0d 08 ff ff       	call   c0000650 <strcpy>
c000fe43:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe4d:	e8 71 03 ff ff       	call   c00001c3 <is486>
c000fe52:	83 c4 10             	add    esp,0x10
c000fe55:	85 c0                	test   eax,eax
c000fe57:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe5d:	74 1f                	je     c000fe7e <CPU::detectFeatures()+0x664>
c000fe5f:	83 c8 07             	or     eax,0x7
c000fe62:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe68:	0f 20 c0             	mov    eax,cr0
c000fe6b:	83 e0 14             	and    eax,0x14
c000fe6e:	83 f8 04             	cmp    eax,0x4
c000fe71:	75 10                	jne    c000fe83 <CPU::detectFeatures()+0x669>
c000fe73:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe79:	83 e0 fd             	and    eax,0xfffffffd
c000fe7c:	eb 1b                	jmp    c000fe99 <CPU::detectFeatures()+0x67f>
c000fe7e:	83 e0 f8             	and    eax,0xfffffff8
c000fe81:	eb df                	jmp    c000fe62 <CPU::detectFeatures()+0x648>
c000fe83:	e8 16 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe88:	83 e0 01             	and    eax,0x1
c000fe8b:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe8e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe94:	83 e0 fd             	and    eax,0xfffffffd
c000fe97:	09 d0                	or     eax,edx
c000fe99:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe9f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fea6:	74 17                	je     c000febf <CPU::detectFeatures()+0x6a5>
c000fea8:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000feae:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000feb4:	83 c8 10             	or     eax,0x10
c000feb7:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000febd:	eb 20                	jmp    c000fedf <CPU::detectFeatures()+0x6c5>
c000febf:	e8 da 02 ff ff       	call   c000019e <hasLegacyFPU>
c000fec4:	83 e0 01             	and    eax,0x1
c000fec7:	8d 14 00             	lea    edx,[eax+eax*1]
c000feca:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fed0:	83 e0 fd             	and    eax,0xfffffffd
c000fed3:	09 d0                	or     eax,edx
c000fed5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fedb:	a8 02                	test   al,0x2
c000fedd:	75 c9                	jne    c000fea8 <CPU::detectFeatures()+0x68e>
c000fedf:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fee6:	83 c4 2c             	add    esp,0x2c
c000fee9:	5b                   	pop    ebx
c000feea:	5e                   	pop    esi
c000feeb:	5f                   	pop    edi
c000feec:	5d                   	pop    ebp
c000feed:	c3                   	ret    

c000feee <CPU::setupSMEP()>:
c000feee:	0f 20 e0             	mov    eax,cr4
c000fef1:	0d 00 00 10 00       	or     eax,0x100000
c000fef6:	0f 22 e0             	mov    cr4,eax
c000fef9:	c3                   	ret    

c000fefa <CPU::setupUMIP()>:
c000fefa:	0f 20 e0             	mov    eax,cr4
c000fefd:	80 cc 08             	or     ah,0x8
c000ff00:	0f 22 e0             	mov    cr4,eax
c000ff03:	c3                   	ret    

c000ff04 <CPU::setupTSC()>:
c000ff04:	0f 20 e0             	mov    eax,cr4
c000ff07:	83 c8 04             	or     eax,0x4
c000ff0a:	0f 22 e0             	mov    cr4,eax
c000ff0d:	c3                   	ret    

c000ff0e <CPU::setupLargePages()>:
c000ff0e:	0f 20 e0             	mov    eax,cr4
c000ff11:	83 c8 10             	or     eax,0x10
c000ff14:	0f 22 e0             	mov    cr4,eax
c000ff17:	c3                   	ret    

c000ff18 <CPU::setupPAT()>:
c000ff18:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff1d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff24:	74 2c                	je     c000ff52 <CPU::setupPAT()+0x3a>
c000ff26:	53                   	push   ebx
c000ff27:	83 ec 10             	sub    esp,0x10
c000ff2a:	68 77 02 00 00       	push   0x277
c000ff2f:	50                   	push   eax
c000ff30:	e8 a5 71 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c000ff35:	83 e2 f8             	and    edx,0xfffffff8
c000ff38:	83 ca 01             	or     edx,0x1
c000ff3b:	52                   	push   edx
c000ff3c:	50                   	push   eax
c000ff3d:	68 77 02 00 00       	push   0x277
c000ff42:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff48:	e8 b9 71 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff4d:	83 c4 28             	add    esp,0x28
c000ff50:	5b                   	pop    ebx
c000ff51:	c3                   	ret    
c000ff52:	c3                   	ret    
c000ff53:	90                   	nop

c000ff54 <CPU::setupMTRR()>:
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <CPU::setupGlobalPages()>:
c000ff56:	0f 20 e0             	mov    eax,cr4
c000ff59:	0c 80                	or     al,0x80
c000ff5b:	0f 22 e0             	mov    cr4,eax
c000ff5e:	c3                   	ret    
c000ff5f:	90                   	nop

c000ff60 <CPU::allowUsermodeDataAccess()>:
c000ff60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff64:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff6b:	74 03                	je     c000ff70 <CPU::allowUsermodeDataAccess()+0x10>
c000ff6d:	0f 01 cb             	stac   
c000ff70:	c3                   	ret    
c000ff71:	90                   	nop

c000ff72 <CPU::prohibitUsermodeDataAccess()>:
c000ff72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff76:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff7d:	74 03                	je     c000ff82 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff7f:	0f 01 ca             	clac   
c000ff82:	c3                   	ret    
c000ff83:	90                   	nop

c000ff84 <CPU::setupSMAP()>:
c000ff84:	0f 20 e0             	mov    eax,cr4
c000ff87:	0d 00 00 20 00       	or     eax,0x200000
c000ff8c:	0f 22 e0             	mov    cr4,eax
c000ff8f:	eb e1                	jmp    c000ff72 <CPU::prohibitUsermodeDataAccess()>
c000ff91:	90                   	nop

c000ff92 <CPU::setupFeatures()>:
c000ff92:	53                   	push   ebx
c000ff93:	83 ec 08             	sub    esp,0x8
c000ff96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff9a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffa1:	74 18                	je     c000ffbb <CPU::setupFeatures()+0x29>
c000ffa3:	83 ec 0c             	sub    esp,0xc
c000ffa6:	68 59 0b 02 c0       	push   0xc0020b59
c000ffab:	e8 bf a9 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000ffb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffb3:	e8 42 ff ff ff       	call   c000fefa <CPU::setupUMIP()>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffc2:	74 18                	je     c000ffdc <CPU::setupFeatures()+0x4a>
c000ffc4:	83 ec 0c             	sub    esp,0xc
c000ffc7:	68 63 0b 02 c0       	push   0xc0020b63
c000ffcc:	e8 9e a9 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000ffd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd4:	e8 2b ff ff ff       	call   c000ff04 <CPU::setupTSC()>
c000ffd9:	83 c4 10             	add    esp,0x10
c000ffdc:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ffe3:	74 18                	je     c000fffd <CPU::setupFeatures()+0x6b>
c000ffe5:	83 ec 0c             	sub    esp,0xc
c000ffe8:	68 6c 0b 02 c0       	push   0xc0020b6c
c000ffed:	e8 7d a9 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c000fff2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fff5:	e8 14 ff ff ff       	call   c000ff0e <CPU::setupLargePages()>
c000fffa:	83 c4 10             	add    esp,0x10
c000fffd:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010004:	74 18                	je     c001001e <CPU::setupFeatures()+0x8c>
c0010006:	83 ec 0c             	sub    esp,0xc
c0010009:	68 75 0b 02 c0       	push   0xc0020b75
c001000e:	e8 5c a9 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0010013:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010016:	e8 3b ff ff ff       	call   c000ff56 <CPU::setupGlobalPages()>
c001001b:	83 c4 10             	add    esp,0x10
c001001e:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010025:	74 18                	je     c001003f <CPU::setupFeatures()+0xad>
c0010027:	83 ec 0c             	sub    esp,0xc
c001002a:	68 87 0b 02 c0       	push   0xc0020b87
c001002f:	e8 3b a9 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0010034:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010037:	e8 dc fe ff ff       	call   c000ff18 <CPU::setupPAT()>
c001003c:	83 c4 10             	add    esp,0x10
c001003f:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010046:	74 11                	je     c0010059 <CPU::setupFeatures()+0xc7>
c0010048:	c7 44 24 10 90 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020b90
c0010050:	83 c4 08             	add    esp,0x8
c0010053:	5b                   	pop    ebx
c0010054:	e9 16 a9 ff ff       	jmp    c000a96f <Dbg::kprintf(char const*, ...)>
c0010059:	83 c4 08             	add    esp,0x8
c001005c:	5b                   	pop    ebx
c001005d:	c3                   	ret    

c001005e <CPU::open(int, int, void*)>:
c001005e:	57                   	push   edi
c001005f:	56                   	push   esi
c0010060:	53                   	push   ebx
c0010061:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010065:	83 ec 0c             	sub    esp,0xc
c0010068:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001006c:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010072:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010078:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001007e:	50                   	push   eax
c001007f:	e8 52 73 ff ff       	call   c00073d6 <GDT::setup()>
c0010084:	83 c4 0c             	add    esp,0xc
c0010087:	6a 00                	push   0x0
c0010089:	68 ef be ad de       	push   0xdeadbeef
c001008e:	57                   	push   edi
c001008f:	e8 ec 8e ff ff       	call   c0008f80 <TSS::setup(unsigned long, unsigned long)>
c0010094:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010097:	e8 c4 8e ff ff       	call   c0008f60 <TSS::flush()>
c001009c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00100a5:	e8 90 75 ff ff       	call   c000763a <IDT::setup()>
c00100aa:	b8 00 04 00 00       	mov    eax,0x400
c00100af:	0f 23 f8             	mov    db7,eax
c00100b2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100bc:	e8 15 7d ff ff       	call   c0007dd6 <Phys::allocatePage()>
c00100c1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100c7:	89 30                	mov    DWORD PTR [eax],esi
c00100c9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100cf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100d2:	58                   	pop    eax
c00100d3:	5a                   	pop    edx
c00100d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100de:	e8 fd 9e ff ff       	call   c0009fe0 <VAS::setCPUSpecific(unsigned long)>
c00100e3:	c7 04 24 9a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b9a
c00100ea:	e8 cd 00 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c00100ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100f2:	e8 23 f7 ff ff       	call   c000f81a <CPU::detectFeatures()>
c00100f7:	c7 04 24 bd 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bbd
c00100fe:	e8 b9 00 00 00       	call   c00101bc <KeSetBootMessage(char const*)>
c0010103:	e8 75 6f 00 00       	call   c001707d <HalInitialise()>
c0010108:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c001010d:	83 e0 10             	and    eax,0x10
c0010110:	83 f8 01             	cmp    eax,0x1
c0010113:	19 c0                	sbb    eax,eax
c0010115:	83 e0 46             	and    eax,0x46
c0010118:	83 c0 1e             	add    eax,0x1e
c001011b:	89 04 24             	mov    DWORD PTR [esp],eax
c001011e:	e8 de d6 ff ff       	call   c000d801 <setupTimer(int)>
c0010123:	83 c4 10             	add    esp,0x10
c0010126:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c001012d:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010133:	74 0c                	je     c0010141 <CPU::open(int, int, void*)+0xe3>
c0010135:	83 ec 0c             	sub    esp,0xc
c0010138:	53                   	push   ebx
c0010139:	e8 54 fe ff ff       	call   c000ff92 <CPU::setupFeatures()>
c001013e:	83 c4 10             	add    esp,0x10
c0010141:	5b                   	pop    ebx
c0010142:	31 c0                	xor    eax,eax
c0010144:	5e                   	pop    esi
c0010145:	5f                   	pop    edi
c0010146:	c3                   	ret    

c0010147 <KeDisplaySplashScreen()>:
c0010147:	55                   	push   ebp
c0010148:	bd 05 00 00 00       	mov    ebp,0x5
c001014d:	57                   	push   edi
c001014e:	bf 60 1f 02 c0       	mov    edi,0xc0021f60
c0010153:	56                   	push   esi
c0010154:	be 0a 00 00 00       	mov    esi,0xa
c0010159:	53                   	push   ebx
c001015a:	31 db                	xor    ebx,ebx
c001015c:	83 ec 0c             	sub    esp,0xc
c001015f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010162:	85 d2                	test   edx,edx
c0010164:	89 d0                	mov    eax,edx
c0010166:	74 4c                	je     c00101b4 <KeDisplaySplashScreen()+0x6d>
c0010168:	80 bb 96 1f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde06a],0xdb
c001016f:	75 13                	jne    c0010184 <KeDisplaySplashScreen()+0x3d>
c0010171:	0f b6 8b 95 1f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde06b]
c0010178:	83 e1 fe             	and    ecx,0xfffffffe
c001017b:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010181:	75 01                	jne    c0010184 <KeDisplaySplashScreen()+0x3d>
c0010183:	46                   	inc    esi
c0010184:	83 fa 0d             	cmp    edx,0xd
c0010187:	74 28                	je     c00101b1 <KeDisplaySplashScreen()+0x6a>
c0010189:	83 fa 0a             	cmp    edx,0xa
c001018c:	75 0a                	jne    c0010198 <KeDisplaySplashScreen()+0x51>
c001018e:	45                   	inc    ebp
c001018f:	be 0a 00 00 00       	mov    esi,0xa
c0010194:	31 db                	xor    ebx,ebx
c0010196:	eb 19                	jmp    c00101b1 <KeDisplaySplashScreen()+0x6a>
c0010198:	83 ec 0c             	sub    esp,0xc
c001019b:	0f be c0             	movsx  eax,al
c001019e:	55                   	push   ebp
c001019f:	8d 14 33             	lea    edx,[ebx+esi*1]
c00101a2:	43                   	inc    ebx
c00101a3:	52                   	push   edx
c00101a4:	6a 00                	push   0x0
c00101a6:	6a 0e                	push   0xe
c00101a8:	50                   	push   eax
c00101a9:	e8 4a 7b 00 00       	call   c0017cf8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00101ae:	83 c4 20             	add    esp,0x20
c00101b1:	47                   	inc    edi
c00101b2:	eb ab                	jmp    c001015f <KeDisplaySplashScreen()+0x18>
c00101b4:	83 c4 0c             	add    esp,0xc
c00101b7:	5b                   	pop    ebx
c00101b8:	5e                   	pop    esi
c00101b9:	5f                   	pop    edi
c00101ba:	5d                   	pop    ebp
c00101bb:	c3                   	ret    

c00101bc <KeSetBootMessage(char const*)>:
c00101bc:	57                   	push   edi
c00101bd:	56                   	push   esi
c00101be:	53                   	push   ebx
c00101bf:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101c5:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00101cc:	68 9e 00 00 00       	push   0x9e
c00101d1:	6a 00                	push   0x0
c00101d3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00101d7:	56                   	push   esi
c00101d8:	e8 13 03 ff ff       	call   c00004f0 <memset>
c00101dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101e0:	e8 9b 03 ff ff       	call   c0000580 <strlen>
c00101e5:	ba 50 00 00 00       	mov    edx,0x50
c00101ea:	83 c4 10             	add    esp,0x10
c00101ed:	31 c9                	xor    ecx,ecx
c00101ef:	29 c2                	sub    edx,eax
c00101f1:	83 e2 fe             	and    edx,0xfffffffe
c00101f4:	01 f2                	add    edx,esi
c00101f6:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00101fb:	84 c0                	test   al,al
c00101fd:	74 0a                	je     c0010209 <KeSetBootMessage(char const*)+0x4d>
c00101ff:	80 cc 0f             	or     ah,0xf
c0010202:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010206:	41                   	inc    ecx
c0010207:	eb ed                	jmp    c00101f6 <KeSetBootMessage(char const*)+0x3a>
c0010209:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001020e:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010213:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010215:	81 c4 a0 00 00 00    	add    esp,0xa0
c001021b:	5b                   	pop    ebx
c001021c:	5e                   	pop    esi
c001021d:	5f                   	pop    edi
c001021e:	c3                   	ret    
c001021f:	90                   	nop

c0010220 <EnvVarContainer::getEnv(char const*)>:
c0010220:	57                   	push   edi
c0010221:	56                   	push   esi
c0010222:	53                   	push   ebx
c0010223:	31 db                	xor    ebx,ebx
c0010225:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010229:	39 1e                	cmp    DWORD PTR [esi],ebx
c001022b:	7e 2b                	jle    c0010258 <EnvVarContainer::getEnv(char const*)+0x38>
c001022d:	50                   	push   eax
c001022e:	50                   	push   eax
c001022f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010232:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010239:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001023c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010240:	e8 3b 05 ff ff       	call   c0000780 <strcmp>
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	85 c0                	test   eax,eax
c001024a:	75 09                	jne    c0010255 <EnvVarContainer::getEnv(char const*)+0x35>
c001024c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001024f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010253:	eb 05                	jmp    c001025a <EnvVarContainer::getEnv(char const*)+0x3a>
c0010255:	43                   	inc    ebx
c0010256:	eb d1                	jmp    c0010229 <EnvVarContainer::getEnv(char const*)+0x9>
c0010258:	31 c0                	xor    eax,eax
c001025a:	5b                   	pop    ebx
c001025b:	5e                   	pop    esi
c001025c:	5f                   	pop    edi
c001025d:	c3                   	ret    

c001025e <EnvVarContainer::setEnv(char const*, char const*)>:
c001025e:	55                   	push   ebp
c001025f:	57                   	push   edi
c0010260:	56                   	push   esi
c0010261:	53                   	push   ebx
c0010262:	83 ec 28             	sub    esp,0x28
c0010265:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010269:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001026d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010271:	56                   	push   esi
c0010272:	e8 09 03 ff ff       	call   c0000580 <strlen>
c0010277:	40                   	inc    eax
c0010278:	89 04 24             	mov    DWORD PTR [esp],eax
c001027b:	e8 4b 78 ff ff       	call   c0007acb <malloc>
c0010280:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010287:	e8 f4 02 ff ff       	call   c0000580 <strlen>
c001028c:	40                   	inc    eax
c001028d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010290:	e8 36 78 ff ff       	call   c0007acb <malloc>
c0010295:	89 34 24             	mov    DWORD PTR [esp],esi
c0010298:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001029c:	e8 df 02 ff ff       	call   c0000580 <strlen>
c00102a1:	83 c4 0c             	add    esp,0xc
c00102a4:	40                   	inc    eax
c00102a5:	50                   	push   eax
c00102a6:	6a 00                	push   0x0
c00102a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00102ac:	e8 3f 02 ff ff       	call   c00004f0 <memset>
c00102b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00102b4:	e8 c7 02 ff ff       	call   c0000580 <strlen>
c00102b9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102bd:	8d 48 01             	lea    ecx,[eax+0x1]
c00102c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102c5:	89 de                	mov    esi,ebx
c00102c7:	e8 b4 02 ff ff       	call   c0000580 <strlen>
c00102cc:	83 c4 0c             	add    esp,0xc
c00102cf:	40                   	inc    eax
c00102d0:	50                   	push   eax
c00102d1:	6a 00                	push   0x0
c00102d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102d7:	e8 14 02 ff ff       	call   c00004f0 <memset>
c00102dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102df:	e8 9c 02 ff ff       	call   c0000580 <strlen>
c00102e4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102e8:	8d 48 01             	lea    ecx,[eax+0x1]
c00102eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102f0:	40                   	inc    eax
c00102f1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102f4:	c1 e0 03             	shl    eax,0x3
c00102f7:	5a                   	pop    edx
c00102f8:	59                   	pop    ecx
c00102f9:	50                   	push   eax
c00102fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00102fd:	e8 b5 77 ff ff       	call   c0007ab7 <realloc>
c0010302:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010305:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010309:	b9 08 00 00 00       	mov    ecx,0x8
c001030e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010311:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010315:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010317:	83 c4 2c             	add    esp,0x2c
c001031a:	5b                   	pop    ebx
c001031b:	5e                   	pop    esi
c001031c:	5f                   	pop    edi
c001031d:	5d                   	pop    ebp
c001031e:	c3                   	ret    
c001031f:	90                   	nop

c0010320 <EnvVarContainer::deleteEnv(char const*)>:
c0010320:	c3                   	ret    
c0010321:	90                   	nop

c0010322 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010322:	55                   	push   ebp
c0010323:	57                   	push   edi
c0010324:	56                   	push   esi
c0010325:	53                   	push   ebx
c0010326:	81 ec 38 01 00 00    	sub    esp,0x138
c001032c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010333:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001033a:	68 14 01 00 00       	push   0x114
c001033f:	e8 87 77 ff ff       	call   c0007acb <malloc>
c0010344:	83 c4 0c             	add    esp,0xc
c0010347:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001034a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010351:	89 c3                	mov    ebx,eax
c0010353:	50                   	push   eax
c0010354:	e8 bf ab ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0010359:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001035c:	e8 e1 ae ff ff       	call   c000b242 <File::exists()>
c0010361:	83 c4 10             	add    esp,0x10
c0010364:	84 c0                	test   al,al
c0010366:	75 31                	jne    c0010399 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010368:	50                   	push   eax
c0010369:	50                   	push   eax
c001036a:	6a 12                	push   0x12
c001036c:	53                   	push   ebx
c001036d:	e8 62 ac ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0010372:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010374:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010377:	89 34 24             	mov    DWORD PTR [esp],esi
c001037a:	e8 01 02 ff ff       	call   c0000580 <strlen>
c001037f:	5a                   	pop    edx
c0010380:	31 d2                	xor    edx,edx
c0010382:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010386:	51                   	push   ecx
c0010387:	56                   	push   esi
c0010388:	52                   	push   edx
c0010389:	50                   	push   eax
c001038a:	53                   	push   ebx
c001038b:	ff d7                	call   edi
c001038d:	83 c4 14             	add    esp,0x14
c0010390:	53                   	push   ebx
c0010391:	e8 9c ac ff ff       	call   c000b032 <File::close()>
c0010396:	83 c4 10             	add    esp,0x10
c0010399:	56                   	push   esi
c001039a:	31 f6                	xor    esi,esi
c001039c:	68 00 01 00 00       	push   0x100
c00103a1:	6a 00                	push   0x0
c00103a3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103a7:	50                   	push   eax
c00103a8:	e8 43 01 ff ff       	call   c00004f0 <memset>
c00103ad:	5f                   	pop    edi
c00103ae:	58                   	pop    eax
c00103af:	6a 01                	push   0x1
c00103b1:	53                   	push   ebx
c00103b2:	e8 1d ac ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c00103b7:	83 c4 10             	add    esp,0x10
c00103ba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103c2:	83 ec 0c             	sub    esp,0xc
c00103c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103c7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103cb:	51                   	push   ecx
c00103cc:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103d0:	52                   	push   edx
c00103d1:	6a 00                	push   0x0
c00103d3:	6a 01                	push   0x1
c00103d5:	53                   	push   ebx
c00103d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103d9:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c00103de:	83 c4 20             	add    esp,0x20
c00103e1:	83 fa 0d             	cmp    edx,0xd
c00103e4:	89 d0                	mov    eax,edx
c00103e6:	0f 84 0a 01 00 00    	je     c00104f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00103ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00103f1:	0f 84 f0 00 00 00    	je     c00104e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00103f7:	83 fa 0a             	cmp    edx,0xa
c00103fa:	74 13                	je     c001040f <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00103fc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010401:	74 0c                	je     c001040f <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010403:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010409:	0f 8e d8 00 00 00    	jle    c00104e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001040f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010413:	83 ec 0c             	sub    esp,0xc
c0010416:	8d 78 01             	lea    edi,[eax+0x1]
c0010419:	57                   	push   edi
c001041a:	e8 ac 76 ff ff       	call   c0007acb <malloc>
c001041f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010423:	8d 56 04             	lea    edx,[esi+0x4]
c0010426:	89 14 24             	mov    DWORD PTR [esp],edx
c0010429:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001042d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010431:	e8 95 76 ff ff       	call   c0007acb <malloc>
c0010436:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001043a:	83 c4 0c             	add    esp,0xc
c001043d:	57                   	push   edi
c001043e:	6a 00                	push   0x0
c0010440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010444:	e8 a7 00 ff ff       	call   c00004f0 <memset>
c0010449:	8d 74 24 30          	lea    esi,[esp+0x30]
c001044d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010451:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010455:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010457:	83 c4 0c             	add    esp,0xc
c001045a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001045e:	52                   	push   edx
c001045f:	6a 00                	push   0x0
c0010461:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010465:	e8 86 00 ff ff       	call   c00004f0 <memset>
c001046a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001046e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010472:	89 34 24             	mov    DWORD PTR [esp],esi
c0010475:	e8 06 01 ff ff       	call   c0000580 <strlen>
c001047a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001047e:	89 c1                	mov    ecx,eax
c0010480:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010482:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010485:	83 c4 10             	add    esp,0x10
c0010488:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001048b:	40                   	inc    eax
c001048c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001048f:	85 d2                	test   edx,edx
c0010491:	75 0c                	jne    c001049f <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c0010493:	83 ec 0c             	sub    esp,0xc
c0010496:	6a 08                	push   0x8
c0010498:	e8 2e 76 ff ff       	call   c0007acb <malloc>
c001049d:	eb 0c                	jmp    c00104ab <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c001049f:	51                   	push   ecx
c00104a0:	51                   	push   ecx
c00104a1:	c1 e0 03             	shl    eax,0x3
c00104a4:	50                   	push   eax
c00104a5:	52                   	push   edx
c00104a6:	e8 0c 76 ff ff       	call   c0007ab7 <realloc>
c00104ab:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00104ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104b1:	83 c4 10             	add    esp,0x10
c00104b4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00104b7:	8d 74 24 18          	lea    esi,[esp+0x18]
c00104bb:	b9 08 00 00 00       	mov    ecx,0x8
c00104c0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104c6:	50                   	push   eax
c00104c7:	31 f6                	xor    esi,esi
c00104c9:	68 00 01 00 00       	push   0x100
c00104ce:	6a 00                	push   0x0
c00104d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104d4:	50                   	push   eax
c00104d5:	e8 16 00 ff ff       	call   c00004f0 <memset>
c00104da:	83 c4 10             	add    esp,0x10
c00104dd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104e5:	eb 0f                	jmp    c00104f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104e7:	3c 3d                	cmp    al,0x3d
c00104e9:	74 07                	je     c00104f2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00104eb:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00104ef:	46                   	inc    esi
c00104f0:	eb 04                	jmp    c00104f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104f2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00104f6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104fb:	0f 85 c1 fe ff ff    	jne    c00103c2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010501:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010507:	5b                   	pop    ebx
c0010508:	5e                   	pop    esi
c0010509:	5f                   	pop    edi
c001050a:	5d                   	pop    ebp
c001050b:	c3                   	ret    

c001050c <EnvVarContainer::__loadSystem()>:
c001050c:	83 ec 10             	sub    esp,0x10
c001050f:	68 c0 20 02 c0       	push   0xc00220c0
c0010514:	68 00 0c 02 c0       	push   0xc0020c00
c0010519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001051d:	e8 00 fe ff ff       	call   c0010322 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010522:	83 c4 1c             	add    esp,0x1c
c0010525:	c3                   	ret    

c0010526 <EnvVarContainer::__loadUser()>:
c0010526:	c3                   	ret    
c0010527:	90                   	nop

c0010528 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001052c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001053a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001053d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010541:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010548:	90                   	nop
c0010549:	c3                   	ret    

c001054a <EnvVarContainer::~EnvVarContainer()>:
c001054a:	83 ec 0c             	sub    esp,0xc
c001054d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010551:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010554:	85 c0                	test   eax,eax
c0010556:	74 1d                	je     c0010575 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055c:	8b 00                	mov    eax,DWORD PTR [eax]
c001055e:	85 c0                	test   eax,eax
c0010560:	74 13                	je     c0010575 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010566:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010569:	83 ec 0c             	sub    esp,0xc
c001056c:	50                   	push   eax
c001056d:	e8 69 75 ff ff       	call   c0007adb <free>
c0010572:	83 c4 10             	add    esp,0x10
c0010575:	90                   	nop
c0010576:	83 c4 0c             	add    esp,0xc
c0010579:	c3                   	ret    

c001057a <Krnl::getEnv(Process*, char const*)>:
c001057a:	53                   	push   ebx
c001057b:	83 ec 08             	sub    esp,0x8
c001057e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010582:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010588:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001058c:	74 04                	je     c0010592 <Krnl::getEnv(Process*, char const*)+0x18>
c001058e:	85 c0                	test   eax,eax
c0010590:	75 0b                	jne    c001059d <Krnl::getEnv(Process*, char const*)+0x23>
c0010592:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010597:	85 c0                	test   eax,eax
c0010599:	75 19                	jne    c00105b4 <Krnl::getEnv(Process*, char const*)+0x3a>
c001059b:	eb 27                	jmp    c00105c4 <Krnl::getEnv(Process*, char const*)+0x4a>
c001059d:	52                   	push   edx
c001059e:	52                   	push   edx
c001059f:	53                   	push   ebx
c00105a0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00105a6:	e8 75 fc ff ff       	call   c0010220 <EnvVarContainer::getEnv(char const*)>
c00105ab:	83 c4 10             	add    esp,0x10
c00105ae:	85 c0                	test   eax,eax
c00105b0:	75 28                	jne    c00105da <Krnl::getEnv(Process*, char const*)+0x60>
c00105b2:	eb de                	jmp    c0010592 <Krnl::getEnv(Process*, char const*)+0x18>
c00105b4:	52                   	push   edx
c00105b5:	52                   	push   edx
c00105b6:	53                   	push   ebx
c00105b7:	50                   	push   eax
c00105b8:	e8 63 fc ff ff       	call   c0010220 <EnvVarContainer::getEnv(char const*)>
c00105bd:	83 c4 10             	add    esp,0x10
c00105c0:	85 c0                	test   eax,eax
c00105c2:	75 16                	jne    c00105da <Krnl::getEnv(Process*, char const*)+0x60>
c00105c4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105c8:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105d1:	83 c4 08             	add    esp,0x8
c00105d4:	5b                   	pop    ebx
c00105d5:	e9 46 fc ff ff       	jmp    c0010220 <EnvVarContainer::getEnv(char const*)>
c00105da:	83 c4 08             	add    esp,0x8
c00105dd:	5b                   	pop    ebx
c00105de:	c3                   	ret    

c00105df <Krnl::setEnvSystem(char const*, char const*)>:
c00105df:	83 ec 10             	sub    esp,0x10
c00105e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ea:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00105f0:	e8 69 fc ff ff       	call   c001025e <EnvVarContainer::setEnv(char const*, char const*)>
c00105f5:	83 c4 1c             	add    esp,0x1c
c00105f8:	c3                   	ret    

c00105f9 <Krnl::setEnvUser(char const*, char const*)>:
c00105f9:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105fe:	85 c0                	test   eax,eax
c0010600:	74 15                	je     c0010617 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010602:	83 ec 10             	sub    esp,0x10
c0010605:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010609:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001060d:	50                   	push   eax
c001060e:	e8 4b fc ff ff       	call   c001025e <EnvVarContainer::setEnv(char const*, char const*)>
c0010613:	83 c4 1c             	add    esp,0x1c
c0010616:	c3                   	ret    
c0010617:	c3                   	ret    

c0010618 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010622:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010626:	e9 33 fc ff ff       	jmp    c001025e <EnvVarContainer::setEnv(char const*, char const*)>

c001062b <Krnl::deleteEnvSystem(char const*)>:
c001062b:	c3                   	ret    

c001062c <Krnl::deleteEnvUser(char const*)>:
c001062c:	c3                   	ret    

c001062d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001062d:	c3                   	ret    

c001062e <Krnl::newProcessEnv(Process*)>:
c001062e:	83 ec 28             	sub    esp,0x28
c0010631:	6a 0c                	push   0xc
c0010633:	e8 93 74 ff ff       	call   c0007acb <malloc>
c0010638:	5a                   	pop    edx
c0010639:	59                   	pop    ecx
c001063a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001063e:	50                   	push   eax
c001063f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010643:	e8 e0 fe ff ff       	call   c0010528 <EnvVarContainer::EnvVarContainer(Process*)>
c0010648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001064c:	83 c4 2c             	add    esp,0x2c
c001064f:	c3                   	ret    

c0010650 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010650:	57                   	push   edi
c0010651:	56                   	push   esi
c0010652:	53                   	push   ebx
c0010653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010657:	83 ec 0c             	sub    esp,0xc
c001065a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010660:	6a 0c                	push   0xc
c0010662:	e8 64 74 ff ff       	call   c0007acb <malloc>
c0010667:	89 c3                	mov    ebx,eax
c0010669:	58                   	pop    eax
c001066a:	5a                   	pop    edx
c001066b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001066f:	53                   	push   ebx
c0010670:	e8 b3 fe ff ff       	call   c0010528 <EnvVarContainer::EnvVarContainer(Process*)>
c0010675:	8b 07                	mov    eax,DWORD PTR [edi]
c0010677:	89 03                	mov    DWORD PTR [ebx],eax
c0010679:	c1 e0 03             	shl    eax,0x3
c001067c:	89 04 24             	mov    DWORD PTR [esp],eax
c001067f:	e8 47 74 ff ff       	call   c0007acb <malloc>
c0010684:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010687:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010689:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001068c:	89 c7                	mov    edi,eax
c001068e:	c1 e1 03             	shl    ecx,0x3
c0010691:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010693:	83 c4 10             	add    esp,0x10
c0010696:	89 d8                	mov    eax,ebx
c0010698:	5b                   	pop    ebx
c0010699:	5e                   	pop    esi
c001069a:	5f                   	pop    edi
c001069b:	c3                   	ret    

c001069c <Krnl::loadSystemEnv()>:
c001069c:	53                   	push   ebx
c001069d:	83 ec 14             	sub    esp,0x14
c00106a0:	6a 0c                	push   0xc
c00106a2:	e8 24 74 ff ff       	call   c0007acb <malloc>
c00106a7:	89 c3                	mov    ebx,eax
c00106a9:	58                   	pop    eax
c00106aa:	5a                   	pop    edx
c00106ab:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106b1:	53                   	push   ebx
c00106b2:	e8 71 fe ff ff       	call   c0010528 <EnvVarContainer::EnvVarContainer(Process*)>
c00106b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106ba:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106c0:	e8 47 fe ff ff       	call   c001050c <EnvVarContainer::__loadSystem()>
c00106c5:	83 c4 18             	add    esp,0x18
c00106c8:	5b                   	pop    ebx
c00106c9:	c3                   	ret    

c00106ca <Krnl::loadUserEnv()>:
c00106ca:	53                   	push   ebx
c00106cb:	83 ec 14             	sub    esp,0x14
c00106ce:	6a 0c                	push   0xc
c00106d0:	e8 f6 73 ff ff       	call   c0007acb <malloc>
c00106d5:	89 c3                	mov    ebx,eax
c00106d7:	58                   	pop    eax
c00106d8:	5a                   	pop    edx
c00106d9:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106df:	53                   	push   ebx
c00106e0:	e8 43 fe ff ff       	call   c0010528 <EnvVarContainer::EnvVarContainer(Process*)>
c00106e5:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00106eb:	83 c4 18             	add    esp,0x18
c00106ee:	5b                   	pop    ebx
c00106ef:	c3                   	ret    

c00106f0 <Krnl::flushEnv()>:
c00106f0:	c3                   	ret    

c00106f1 <Krnl::getProcessTotalEnvCount(Process*)>:
c00106f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f5:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00106fb:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010701:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010706:	8b 00                	mov    eax,DWORD PTR [eax]
c0010708:	03 01                	add    eax,DWORD PTR [ecx]
c001070a:	85 d2                	test   edx,edx
c001070c:	74 02                	je     c0010710 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001070e:	03 02                	add    eax,DWORD PTR [edx]
c0010710:	c3                   	ret    

c0010711 <Krnl::getProcessEnvPair(Process*, int)>:
c0010711:	57                   	push   edi
c0010712:	56                   	push   esi
c0010713:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010719:	53                   	push   ebx
c001071a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001071e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010722:	85 f6                	test   esi,esi
c0010724:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010728:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001072e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010730:	75 16                	jne    c0010748 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010732:	39 c2                	cmp    edx,eax
c0010734:	7c 16                	jl     c001074c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010736:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c001073c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001073e:	01 c6                	add    esi,eax
c0010740:	39 d6                	cmp    esi,edx
c0010742:	7e 3c                	jle    c0010780 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010744:	29 c2                	sub    edx,eax
c0010746:	eb 04                	jmp    c001074c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010748:	39 c2                	cmp    edx,eax
c001074a:	7d 05                	jge    c0010751 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001074c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001074f:	eb 20                	jmp    c0010771 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010751:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010753:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010756:	39 d1                	cmp    ecx,edx
c0010758:	7e 04                	jle    c001075e <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001075a:	29 c2                	sub    edx,eax
c001075c:	eb 10                	jmp    c001076e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001075e:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010764:	03 0e                	add    ecx,DWORD PTR [esi]
c0010766:	39 d1                	cmp    ecx,edx
c0010768:	7e 16                	jle    c0010780 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001076a:	29 c2                	sub    edx,eax
c001076c:	29 fa                	sub    edx,edi
c001076e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010771:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010774:	8b 02                	mov    eax,DWORD PTR [edx]
c0010776:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010779:	89 03                	mov    DWORD PTR [ebx],eax
c001077b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001077e:	eb 1d                	jmp    c001079d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	68 22 0c 02 c0       	push   0xc0020c22
c0010788:	e8 ac 00 00 00       	call   c0010839 <KePanic(char const*)>
c001078d:	83 c4 10             	add    esp,0x10
c0010790:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010796:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001079d:	89 d8                	mov    eax,ebx
c001079f:	5b                   	pop    ebx
c00107a0:	5e                   	pop    esi
c00107a1:	5f                   	pop    edi
c00107a2:	c2 04 00             	ret    0x4

c00107a5 <CPU::current()>:
c00107a5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00107aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00107b0:	c3                   	ret    

c00107b1 <operator new(unsigned long)>:
c00107b1:	e9 15 73 ff ff       	jmp    c0007acb <malloc>

c00107b6 <operator delete(void*)>:
c00107b6:	e9 30 73 ff ff       	jmp    c0007aeb <rfree>

c00107bb <disableIRQs()>:
c00107bb:	fa                   	cli    
c00107bc:	c3                   	ret    

c00107bd <enableIRQs()>:
c00107bd:	fb                   	sti    
c00107be:	c3                   	ret    

c00107bf <lockScheduler()>:
c00107bf:	fa                   	cli    
c00107c0:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107c6:	c3                   	ret    

c00107c7 <unlockScheduler()>:
c00107c7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107cc:	48                   	dec    eax
c00107cd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107d2:	75 01                	jne    c00107d5 <unlockScheduler()+0xe>
c00107d4:	fb                   	sti    
c00107d5:	c3                   	ret    

c00107d6 <lockStuff()>:
c00107d6:	fa                   	cli    
c00107d7:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107dd:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00107e3:	c3                   	ret    

c00107e4 <unlockStuff()>:
c00107e4:	83 ec 0c             	sub    esp,0xc
c00107e7:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00107ec:	48                   	dec    eax
c00107ed:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00107f2:	75 18                	jne    c001080c <unlockStuff()+0x28>
c00107f4:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00107fb:	74 0f                	je     c001080c <unlockStuff()+0x28>
c00107fd:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010807:	e8 28 48 00 00       	call   c0015034 <schedule()>
c001080c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010811:	48                   	dec    eax
c0010812:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010817:	75 01                	jne    c001081a <unlockStuff()+0x36>
c0010819:	fb                   	sti    
c001081a:	83 c4 0c             	add    esp,0xc
c001081d:	c3                   	ret    

c001081e <Virt::getAKernelVAS()>:
c001081e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010823:	c3                   	ret    

c0010824 <__not_memcpy>:
c0010824:	57                   	push   edi
c0010825:	56                   	push   esi
c0010826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001082a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001082e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010832:	89 c7                	mov    edi,eax
c0010834:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010836:	5e                   	pop    esi
c0010837:	5f                   	pop    edi
c0010838:	c3                   	ret    

c0010839 <KePanic(char const*)>:
c0010839:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010840:	e9 11 67 00 00       	jmp    c0016f56 <HalPanic(char const*)>

c0010845 <Krnl::powerThread(void*)>:
c0010845:	83 ec 0c             	sub    esp,0xc
c0010848:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001084d:	48                   	dec    eax
c001084e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010853:	75 01                	jne    c0010856 <Krnl::powerThread(void*)+0x11>
c0010855:	fb                   	sti    
c0010856:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c001085d:	83 ec 0c             	sub    esp,0xc
c0010860:	6a 0a                	push   0xa
c0010862:	e8 fd 4a 00 00       	call   c0015364 <sleep(unsigned int)>
c0010867:	83 c4 10             	add    esp,0x10
c001086a:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010871:	eb e3                	jmp    c0010856 <Krnl::powerThread(void*)+0x11>

c0010873 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010873:	57                   	push   edi
c0010874:	b9 09 00 00 00       	mov    ecx,0x9
c0010879:	56                   	push   esi
c001087a:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001087f:	fc                   	cld    
c0010880:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010884:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010886:	5e                   	pop    esi
c0010887:	5f                   	pop    edi
c0010888:	c3                   	ret    

c0010889 <Krnl::userIOReceived()>:
c0010889:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010893:	c3                   	ret    

c0010894 <Krnl::handlePowerButton()>:
c0010894:	83 ec 0c             	sub    esp,0xc
c0010897:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001089c:	83 f8 02             	cmp    eax,0x2
c001089f:	75 10                	jne    c00108b1 <Krnl::handlePowerButton()+0x1d>
c00108a1:	83 ec 0c             	sub    esp,0xc
c00108a4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108aa:	e8 93 68 ff ff       	call   c0007142 <Computer::shutdown()>
c00108af:	eb 11                	jmp    c00108c2 <Krnl::handlePowerButton()+0x2e>
c00108b1:	48                   	dec    eax
c00108b2:	75 11                	jne    c00108c5 <Krnl::handlePowerButton()+0x31>
c00108b4:	83 ec 0c             	sub    esp,0xc
c00108b7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108bd:	e8 b0 68 ff ff       	call   c0007172 <Computer::sleep()>
c00108c2:	83 c4 10             	add    esp,0x10
c00108c5:	83 c4 0c             	add    esp,0xc
c00108c8:	c3                   	ret    

c00108c9 <Krnl::handleSleepButton()>:
c00108c9:	83 ec 0c             	sub    esp,0xc
c00108cc:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00108d1:	83 f8 02             	cmp    eax,0x2
c00108d4:	75 10                	jne    c00108e6 <Krnl::handleSleepButton()+0x1d>
c00108d6:	83 ec 0c             	sub    esp,0xc
c00108d9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108df:	e8 5e 68 ff ff       	call   c0007142 <Computer::shutdown()>
c00108e4:	eb 11                	jmp    c00108f7 <Krnl::handleSleepButton()+0x2e>
c00108e6:	48                   	dec    eax
c00108e7:	75 11                	jne    c00108fa <Krnl::handleSleepButton()+0x31>
c00108e9:	83 ec 0c             	sub    esp,0xc
c00108ec:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108f2:	e8 7b 68 ff ff       	call   c0007172 <Computer::sleep()>
c00108f7:	83 c4 10             	add    esp,0x10
c00108fa:	83 c4 0c             	add    esp,0xc
c00108fd:	c3                   	ret    

c00108fe <Krnl::setupPowerManager()>:
c00108fe:	83 ec 0c             	sub    esp,0xc
c0010901:	68 f0 00 00 00       	push   0xf0
c0010906:	6a 00                	push   0x0
c0010908:	68 45 08 01 c0       	push   0xc0010845
c001090d:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010913:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c001091d:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010924:	e8 bf 44 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0010929:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010933:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c001093d:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010947:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010951:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c001095b:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010965:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c001096f:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010979:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010983:	83 c4 1c             	add    esp,0x1c
c0010986:	c3                   	ret    

c0010987 <KeRand()>:
c0010987:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010991:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c001099b:	53                   	push   ebx
c001099c:	01 c1                	add    ecx,eax
c001099e:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109a3:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c00109a9:	01 ca                	add    edx,ecx
c00109ab:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109b0:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109b5:	83 d2 00             	adc    edx,0x0
c00109b8:	0f b7 da             	movzx  ebx,dx
c00109bb:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00109c1:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00109c5:	5b                   	pop    ebx
c00109c6:	c3                   	ret    

c00109c7 <KeSeedRand(unsigned int)>:
c00109c7:	53                   	push   ebx
c00109c8:	83 ec 08             	sub    esp,0x8
c00109cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109cf:	e8 99 68 00 00       	call   c001726d <HalGetRand()>
c00109d4:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00109de:	31 d8                	xor    eax,ebx
c00109e0:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109e5:	e8 9d ff ff ff       	call   c0010987 <KeRand()>
c00109ea:	83 c4 08             	add    esp,0x8
c00109ed:	5b                   	pop    ebx
c00109ee:	eb 97                	jmp    c0010987 <KeRand()>

c00109f0 <KeInitRand()>:
c00109f0:	83 ec 0c             	sub    esp,0xc
c00109f3:	e8 6a 66 00 00       	call   c0017062 <HalQueryPerformanceCounter()>
c00109f8:	0f 20 da             	mov    edx,cr3
c00109fb:	0f 22 da             	mov    cr3,edx
c00109fe:	0f 20 da             	mov    edx,cr3
c0010a01:	0f 22 da             	mov    cr3,edx
c0010a04:	0f 20 da             	mov    edx,cr3
c0010a07:	0f 22 da             	mov    cr3,edx
c0010a0a:	0f 20 da             	mov    edx,cr3
c0010a0d:	0f 22 da             	mov    cr3,edx
c0010a10:	83 ec 0c             	sub    esp,0xc
c0010a13:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a18:	50                   	push   eax
c0010a19:	e8 a9 ff ff ff       	call   c00109c7 <KeSeedRand(unsigned int)>
c0010a1e:	83 c4 1c             	add    esp,0x1c
c0010a21:	c3                   	ret    
c0010a22:	66 90                	xchg   ax,ax

c0010a24 <KeResolveCompatibilitySymbol(char*)>:
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	83 ec 08             	sub    esp,0x8
c0010a2a:	68 3c 0c 02 c0       	push   0xc0020c3c
c0010a2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a33:	e8 48 fd fe ff       	call   c0000780 <strcmp>
c0010a38:	83 c4 10             	add    esp,0x10
c0010a3b:	85 c0                	test   eax,eax
c0010a3d:	0f 94 c0             	sete   al
c0010a40:	0f b6 c0             	movzx  eax,al
c0010a43:	85 c0                	test   eax,eax
c0010a45:	74 0d                	je     c0010a54 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a47:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a4c:	e9 8b 01 00 00       	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a51:	8d 76 00             	lea    esi,[esi+0x0]
c0010a54:	83 ec 08             	sub    esp,0x8
c0010a57:	68 45 0c 02 c0       	push   0xc0020c45
c0010a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a60:	e8 1b fd fe ff       	call   c0000780 <strcmp>
c0010a65:	83 c4 10             	add    esp,0x10
c0010a68:	85 c0                	test   eax,eax
c0010a6a:	0f 94 c0             	sete   al
c0010a6d:	0f b6 c0             	movzx  eax,al
c0010a70:	85 c0                	test   eax,eax
c0010a72:	74 0c                	je     c0010a80 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a74:	b8 00 e6 01 c0       	mov    eax,0xc001e600
c0010a79:	e9 5e 01 00 00       	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a7e:	66 90                	xchg   ax,ax
c0010a80:	83 ec 08             	sub    esp,0x8
c0010a83:	68 4f 0c 02 c0       	push   0xc0020c4f
c0010a88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a8c:	e8 ef fc fe ff       	call   c0000780 <strcmp>
c0010a91:	83 c4 10             	add    esp,0x10
c0010a94:	85 c0                	test   eax,eax
c0010a96:	0f 94 c0             	sete   al
c0010a99:	0f b6 c0             	movzx  eax,al
c0010a9c:	85 c0                	test   eax,eax
c0010a9e:	74 0c                	je     c0010aac <KeResolveCompatibilitySymbol(char*)+0x88>
c0010aa0:	b8 34 e3 01 c0       	mov    eax,0xc001e334
c0010aa5:	e9 32 01 00 00       	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aaa:	66 90                	xchg   ax,ax
c0010aac:	83 ec 08             	sub    esp,0x8
c0010aaf:	68 58 0c 02 c0       	push   0xc0020c58
c0010ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab8:	e8 c3 fc fe ff       	call   c0000780 <strcmp>
c0010abd:	83 c4 10             	add    esp,0x10
c0010ac0:	85 c0                	test   eax,eax
c0010ac2:	0f 94 c0             	sete   al
c0010ac5:	0f b6 c0             	movzx  eax,al
c0010ac8:	85 c0                	test   eax,eax
c0010aca:	74 0c                	je     c0010ad8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010acc:	b8 39 08 01 c0       	mov    eax,0xc0010839
c0010ad1:	e9 06 01 00 00       	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ad6:	66 90                	xchg   ax,ax
c0010ad8:	83 ec 08             	sub    esp,0x8
c0010adb:	68 6b 0c 02 c0       	push   0xc0020c6b
c0010ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae4:	e8 97 fc fe ff       	call   c0000780 <strcmp>
c0010ae9:	83 c4 10             	add    esp,0x10
c0010aec:	85 c0                	test   eax,eax
c0010aee:	0f 94 c0             	sete   al
c0010af1:	0f b6 c0             	movzx  eax,al
c0010af4:	85 c0                	test   eax,eax
c0010af6:	74 0c                	je     c0010b04 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010af8:	b8 bc 01 01 c0       	mov    eax,0xc00101bc
c0010afd:	e9 da 00 00 00       	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b02:	66 90                	xchg   ax,ax
c0010b04:	83 ec 08             	sub    esp,0x8
c0010b07:	68 88 0c 02 c0       	push   0xc0020c88
c0010b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b10:	e8 6b fc fe ff       	call   c0000780 <strcmp>
c0010b15:	83 c4 10             	add    esp,0x10
c0010b18:	85 c0                	test   eax,eax
c0010b1a:	0f 94 c0             	sete   al
c0010b1d:	0f b6 c0             	movzx  eax,al
c0010b20:	85 c0                	test   eax,eax
c0010b22:	74 0c                	je     c0010b30 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b24:	b8 00 e7 01 c0       	mov    eax,0xc001e700
c0010b29:	e9 ae 00 00 00       	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b2e:	66 90                	xchg   ax,ax
c0010b30:	83 ec 08             	sub    esp,0x8
c0010b33:	68 92 0c 02 c0       	push   0xc0020c92
c0010b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b3c:	e8 3f fc fe ff       	call   c0000780 <strcmp>
c0010b41:	83 c4 10             	add    esp,0x10
c0010b44:	85 c0                	test   eax,eax
c0010b46:	0f 94 c0             	sete   al
c0010b49:	0f b6 c0             	movzx  eax,al
c0010b4c:	85 c0                	test   eax,eax
c0010b4e:	74 0c                	je     c0010b5c <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b50:	b8 80 e4 01 c0       	mov    eax,0xc001e480
c0010b55:	e9 82 00 00 00       	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b5a:	66 90                	xchg   ax,ax
c0010b5c:	83 ec 08             	sub    esp,0x8
c0010b5f:	68 9b 0c 02 c0       	push   0xc0020c9b
c0010b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b68:	e8 13 fc fe ff       	call   c0000780 <strcmp>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	85 c0                	test   eax,eax
c0010b72:	0f 94 c0             	sete   al
c0010b75:	0f b6 c0             	movzx  eax,al
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	74 08                	je     c0010b84 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b7c:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b81:	eb 59                	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b83:	90                   	nop
c0010b84:	83 ec 08             	sub    esp,0x8
c0010b87:	68 b3 0c 02 c0       	push   0xc0020cb3
c0010b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b90:	e8 eb fb fe ff       	call   c0000780 <strcmp>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	85 c0                	test   eax,eax
c0010b9a:	0f 94 c0             	sete   al
c0010b9d:	0f b6 c0             	movzx  eax,al
c0010ba0:	85 c0                	test   eax,eax
c0010ba2:	74 08                	je     c0010bac <KeResolveCompatibilitySymbol(char*)+0x188>
c0010ba4:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010ba9:	eb 31                	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bab:	90                   	nop
c0010bac:	83 ec 08             	sub    esp,0x8
c0010baf:	68 c0 0c 02 c0       	push   0xc0020cc0
c0010bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb8:	e8 c3 fb fe ff       	call   c0000780 <strcmp>
c0010bbd:	83 c4 10             	add    esp,0x10
c0010bc0:	85 c0                	test   eax,eax
c0010bc2:	0f 94 c0             	sete   al
c0010bc5:	0f b6 c0             	movzx  eax,al
c0010bc8:	85 c0                	test   eax,eax
c0010bca:	74 08                	je     c0010bd4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010bcc:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010bd1:	eb 09                	jmp    c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bd3:	90                   	nop
c0010bd4:	b8 00 00 00 00       	mov    eax,0x0
c0010bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0010bdc:	83 c4 0c             	add    esp,0xc
c0010bdf:	c3                   	ret    

c0010be0 <KiSigKill(int)>:
c0010be0:	83 ec 0c             	sub    esp,0xc
c0010be3:	6a 00                	push   0x0
c0010be5:	6a 00                	push   0x0
c0010be7:	6a ff                	push   0xffffffff
c0010be9:	6a 01                	push   0x1
c0010beb:	e8 62 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bf0:	83 c4 1c             	add    esp,0x1c
c0010bf3:	c3                   	ret    

c0010bf4 <KiDefaultSignalHandlerIgnore(int)>:
c0010bf4:	c3                   	ret    

c0010bf5 <KiDefaultSignalHandlerPause(int)>:
c0010bf5:	57                   	push   edi
c0010bf6:	b9 07 00 00 00       	mov    ecx,0x7
c0010bfb:	56                   	push   esi
c0010bfc:	be 09 0d 02 c0       	mov    esi,0xc0020d09
c0010c01:	83 ec 24             	sub    esp,0x24
c0010c04:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010c08:	fc                   	cld    
c0010c09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c0b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010c0f:	50                   	push   eax
c0010c10:	6a 00                	push   0x0
c0010c12:	6a 00                	push   0x0
c0010c14:	6a 27                	push   0x27
c0010c16:	e8 37 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c1b:	83 c4 34             	add    esp,0x34
c0010c1e:	5e                   	pop    esi
c0010c1f:	5f                   	pop    edi
c0010c20:	c3                   	ret    

c0010c21 <KiDefaultSignalHandlerResume(int)>:
c0010c21:	57                   	push   edi
c0010c22:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c27:	56                   	push   esi
c0010c28:	be 25 0d 02 c0       	mov    esi,0xc0020d25
c0010c2d:	83 ec 24             	sub    esp,0x24
c0010c30:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c34:	fc                   	cld    
c0010c35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c37:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c3b:	50                   	push   eax
c0010c3c:	6a 00                	push   0x0
c0010c3e:	6a 00                	push   0x0
c0010c40:	6a 27                	push   0x27
c0010c42:	e8 0b 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c47:	83 c4 34             	add    esp,0x34
c0010c4a:	5e                   	pop    esi
c0010c4b:	5f                   	pop    edi
c0010c4c:	c3                   	ret    

c0010c4d <KeDeinitSignals(SigHandlerBlock*)>:
c0010c4d:	e9 89 6e ff ff       	jmp    c0007adb <free>

c0010c52 <KeInitSignals()>:
c0010c52:	53                   	push   ebx
c0010c53:	83 ec 14             	sub    esp,0x14
c0010c56:	68 c8 00 00 00       	push   0xc8
c0010c5b:	e8 6b 6e ff ff       	call   c0007acb <malloc>
c0010c60:	83 c4 0c             	add    esp,0xc
c0010c63:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c6d:	89 c3                	mov    ebx,eax
c0010c6f:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c79:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c7f:	6a 20                	push   0x20
c0010c81:	6a 00                	push   0x0
c0010c83:	50                   	push   eax
c0010c84:	e8 67 f8 fe ff       	call   c00004f0 <memset>
c0010c89:	83 c4 0c             	add    esp,0xc
c0010c8c:	6a 44                	push   0x44
c0010c8e:	6a 00                	push   0x0
c0010c90:	53                   	push   ebx
c0010c91:	e8 5a f8 fe ff       	call   c00004f0 <memset>
c0010c96:	83 c4 18             	add    esp,0x18
c0010c99:	89 d8                	mov    eax,ebx
c0010c9b:	5b                   	pop    ebx
c0010c9c:	c3                   	ret    

c0010c9d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010c9d:	53                   	push   ebx
c0010c9e:	b8 01 00 00 00       	mov    eax,0x1
c0010ca3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ca7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cab:	83 f9 10             	cmp    ecx,0x10
c0010cae:	7f 21                	jg     c0010cd1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010cb7:	89 03                	mov    DWORD PTR [ebx],eax
c0010cb9:	b8 01 00 00 00       	mov    eax,0x1
c0010cbe:	d3 e0                	shl    eax,cl
c0010cc0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010cc4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010cc7:	31 c0                	xor    eax,eax
c0010cc9:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010cd1:	5b                   	pop    ebx
c0010cd2:	c3                   	ret    

c0010cd3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010cd3:	55                   	push   ebp
c0010cd4:	57                   	push   edi
c0010cd5:	bf 08 00 00 00       	mov    edi,0x8
c0010cda:	56                   	push   esi
c0010cdb:	53                   	push   ebx
c0010cdc:	83 ec 18             	sub    esp,0x18
c0010cdf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ce3:	68 42 0d 02 c0       	push   0xc0020d42
c0010ce8:	e8 82 9c ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0010ced:	83 c4 10             	add    esp,0x10
c0010cf0:	31 c9                	xor    ecx,ecx
c0010cf2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010cf9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010cff:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010d03:	99                   	cdq    
c0010d04:	f7 ff                	idiv   edi
c0010d06:	8d 42 24             	lea    eax,[edx+0x24]
c0010d09:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d0d:	85 f6                	test   esi,esi
c0010d0f:	75 1a                	jne    c0010d2b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010d11:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010d15:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010d19:	50                   	push   eax
c0010d1a:	50                   	push   eax
c0010d1b:	52                   	push   edx
c0010d1c:	68 53 0d 02 c0       	push   0xc0020d53
c0010d21:	e8 49 9c ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	eb 1b                	jmp    c0010d46 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010d2b:	41                   	inc    ecx
c0010d2c:	83 f9 08             	cmp    ecx,0x8
c0010d2f:	75 ce                	jne    c0010cff <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010d31:	83 ec 0c             	sub    esp,0xc
c0010d34:	be 01 00 00 00       	mov    esi,0x1
c0010d39:	68 74 0d 02 c0       	push   0xc0020d74
c0010d3e:	e8 2c 9c ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	83 c4 0c             	add    esp,0xc
c0010d49:	89 f0                	mov    eax,esi
c0010d4b:	5b                   	pop    ebx
c0010d4c:	5e                   	pop    esi
c0010d4d:	5f                   	pop    edi
c0010d4e:	5d                   	pop    ebp
c0010d4f:	c3                   	ret    

c0010d50 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d50:	55                   	push   ebp
c0010d51:	57                   	push   edi
c0010d52:	56                   	push   esi
c0010d53:	53                   	push   ebx
c0010d54:	51                   	push   ecx
c0010d55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d59:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d60:	0f 84 af 00 00 00    	je     c0010e15 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d66:	31 c9                	xor    ecx,ecx
c0010d68:	bf 08 00 00 00       	mov    edi,0x8
c0010d6d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d73:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d76:	99                   	cdq    
c0010d77:	f7 ff                	idiv   edi
c0010d79:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d80:	85 ed                	test   ebp,ebp
c0010d82:	0f 84 9e 00 00 00    	je     c0010e26 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010d88:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d8e:	89 e9                	mov    ecx,ebp
c0010d90:	bf 01 00 00 00       	mov    edi,0x1
c0010d95:	d3 e7                	shl    edi,cl
c0010d97:	31 c9                	xor    ecx,ecx
c0010d99:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d9c:	b8 01 00 00 00       	mov    eax,0x1
c0010da1:	d3 e0                	shl    eax,cl
c0010da3:	85 04 24             	test   DWORD PTR [esp],eax
c0010da6:	74 06                	je     c0010dae <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010da8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010dac:	75 67                	jne    c0010e15 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010dae:	41                   	inc    ecx
c0010daf:	83 f9 11             	cmp    ecx,0x11
c0010db2:	75 e8                	jne    c0010d9c <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010db4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010db7:	46                   	inc    esi
c0010db8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dbe:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010dc9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010dd0:	09 f8                	or     eax,edi
c0010dd2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010dd8:	31 c0                	xor    eax,eax
c0010dda:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010de2:	74 09                	je     c0010ded <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010de4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010deb:	eb 06                	jmp    c0010df3 <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010ded:	40                   	inc    eax
c0010dee:	83 f8 08             	cmp    eax,0x8
c0010df1:	75 e7                	jne    c0010dda <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010df3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010df7:	83 fd 09             	cmp    ebp,0x9
c0010dfa:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010dfd:	89 2a                	mov    DWORD PTR [edx],ebp
c0010dff:	75 07                	jne    c0010e08 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010e01:	b8 e0 0b 01 c0       	mov    eax,0xc0010be0
c0010e06:	eb 31                	jmp    c0010e39 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e08:	83 f8 01             	cmp    eax,0x1
c0010e0b:	75 0c                	jne    c0010e19 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010e0d:	f7 d7                	not    edi
c0010e0f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e15:	31 c0                	xor    eax,eax
c0010e17:	eb 20                	jmp    c0010e39 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e19:	85 c0                	test   eax,eax
c0010e1b:	75 1c                	jne    c0010e39 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e1d:	8b 04 ad 20 21 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddee0]
c0010e24:	eb 13                	jmp    c0010e39 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e26:	41                   	inc    ecx
c0010e27:	46                   	inc    esi
c0010e28:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e2e:	83 f9 08             	cmp    ecx,0x8
c0010e31:	0f 85 36 ff ff ff    	jne    c0010d6d <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e37:	eb dc                	jmp    c0010e15 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e39:	5a                   	pop    edx
c0010e3a:	5b                   	pop    ebx
c0010e3b:	5e                   	pop    esi
c0010e3c:	5f                   	pop    edi
c0010e3d:	5d                   	pop    ebp
c0010e3e:	c3                   	ret    

c0010e3f <KiCheckSignalZ>:
c0010e3f:	83 ec 10             	sub    esp,0x10
c0010e42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e46:	50                   	push   eax
c0010e47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e4f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e55:	e8 f6 fe ff ff       	call   c0010d50 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e5a:	5a                   	pop    edx
c0010e5b:	31 d2                	xor    edx,edx
c0010e5d:	59                   	pop    ecx
c0010e5e:	85 c0                	test   eax,eax
c0010e60:	74 19                	je     c0010e7b <KiCheckSignalZ+0x3c>
c0010e62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e68:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e6b:	89 02                	mov    DWORD PTR [edx],eax
c0010e6d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e78:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e7b:	89 d0                	mov    eax,edx
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	c3                   	ret    

c0010e81 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e81:	56                   	push   esi
c0010e82:	53                   	push   ebx
c0010e83:	bb 01 00 00 00       	mov    ebx,0x1
c0010e88:	52                   	push   edx
c0010e89:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e91:	d3 e3                	shl    ebx,cl
c0010e93:	83 f9 10             	cmp    ecx,0x10
c0010e96:	7f 08                	jg     c0010ea0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010e98:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010e9e:	75 10                	jne    c0010eb0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010ea0:	83 ec 0c             	sub    esp,0xc
c0010ea3:	68 85 0d 02 c0       	push   0xc0020d85
c0010ea8:	e8 8c f9 ff ff       	call   c0010839 <KePanic(char const*)>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	f7 d3                	not    ebx
c0010eb2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010eb8:	58                   	pop    eax
c0010eb9:	5b                   	pop    ebx
c0010eba:	5e                   	pop    esi
c0010ebb:	c3                   	ret    

c0010ebc <KiFinishSignalZ>:
c0010ebc:	53                   	push   ebx
c0010ebd:	83 ec 10             	sub    esp,0x10
c0010ec0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ec4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010ec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ecc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ecf:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010ed5:	e8 a7 ff ff ff       	call   c0010e81 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010eda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ee0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010ee7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010eee:	83 c4 18             	add    esp,0x18
c0010ef1:	5b                   	pop    ebx
c0010ef2:	c3                   	ret    

c0010ef3 <SysSeekDir(regs*)>:
c0010ef3:	31 c0                	xor    eax,eax
c0010ef5:	31 d2                	xor    edx,edx
c0010ef7:	c3                   	ret    

c0010ef8 <SysTellDir(regs*)>:
c0010ef8:	31 c0                	xor    eax,eax
c0010efa:	31 d2                	xor    edx,edx
c0010efc:	c3                   	ret    

c0010efd <SysVerify(regs*)>:
c0010efd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f01:	31 d2                	xor    edx,edx
c0010f03:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f06:	c3                   	ret    

c0010f07 <SysGetArgc(regs*)>:
c0010f07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f0f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010f15:	89 c2                	mov    edx,eax
c0010f17:	c1 fa 1f             	sar    edx,0x1f
c0010f1a:	c3                   	ret    

c0010f1b <SysTTYName(regs*)>:
c0010f1b:	b8 01 00 00 00       	mov    eax,0x1
c0010f20:	31 d2                	xor    edx,edx
c0010f22:	c3                   	ret    

c0010f23 <SysFormatDisk(regs*)>:
c0010f23:	56                   	push   esi
c0010f24:	53                   	push   ebx
c0010f25:	83 ec 04             	sub    esp,0x4
c0010f28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f2c:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010f32:	eb 2a                	jmp    c0010f5e <SysFormatDisk(regs*)+0x3b>
c0010f34:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f37:	83 ec 0c             	sub    esp,0xc
c0010f3a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f3d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f3f:	51                   	push   ecx
c0010f40:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f43:	51                   	push   ecx
c0010f44:	50                   	push   eax
c0010f45:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f4c:	50                   	push   eax
c0010f4d:	53                   	push   ebx
c0010f4e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f51:	83 c4 20             	add    esp,0x20
c0010f54:	83 f8 08             	cmp    eax,0x8
c0010f57:	89 c1                	mov    ecx,eax
c0010f59:	75 14                	jne    c0010f6f <SysFormatDisk(regs*)+0x4c>
c0010f5b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f5e:	85 db                	test   ebx,ebx
c0010f60:	75 d2                	jne    c0010f34 <SysFormatDisk(regs*)+0x11>
c0010f62:	b8 03 00 00 00       	mov    eax,0x3
c0010f67:	31 d2                	xor    edx,edx
c0010f69:	83 c4 04             	add    esp,0x4
c0010f6c:	5b                   	pop    ebx
c0010f6d:	5e                   	pop    esi
c0010f6e:	c3                   	ret    
c0010f6f:	85 c0                	test   eax,eax
c0010f71:	74 13                	je     c0010f86 <SysFormatDisk(regs*)+0x63>
c0010f73:	31 d2                	xor    edx,edx
c0010f75:	83 f9 09             	cmp    ecx,0x9
c0010f78:	b8 01 00 00 00       	mov    eax,0x1
c0010f7d:	74 ea                	je     c0010f69 <SysFormatDisk(regs*)+0x46>
c0010f7f:	b8 02 00 00 00       	mov    eax,0x2
c0010f84:	eb e1                	jmp    c0010f67 <SysFormatDisk(regs*)+0x44>
c0010f86:	31 c0                	xor    eax,eax
c0010f88:	eb dd                	jmp    c0010f67 <SysFormatDisk(regs*)+0x44>

c0010f8a <SysSetDiskVolumeLabel(regs*)>:
c0010f8a:	56                   	push   esi
c0010f8b:	53                   	push   ebx
c0010f8c:	83 ec 04             	sub    esp,0x4
c0010f8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f93:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f96:	83 f8 19             	cmp    eax,0x19
c0010f99:	77 33                	ja     c0010fce <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f9b:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010fa2:	85 c9                	test   ecx,ecx
c0010fa4:	74 28                	je     c0010fce <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fa6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010fa9:	85 db                	test   ebx,ebx
c0010fab:	74 21                	je     c0010fce <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fad:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010fb3:	85 d2                	test   edx,edx
c0010fb5:	74 17                	je     c0010fce <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fb7:	8b 32                	mov    esi,DWORD PTR [edx]
c0010fb9:	53                   	push   ebx
c0010fba:	50                   	push   eax
c0010fbb:	51                   	push   ecx
c0010fbc:	52                   	push   edx
c0010fbd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010fc0:	83 c4 10             	add    esp,0x10
c0010fc3:	83 c4 04             	add    esp,0x4
c0010fc6:	5b                   	pop    ebx
c0010fc7:	5e                   	pop    esi
c0010fc8:	89 c2                	mov    edx,eax
c0010fca:	c1 fa 1f             	sar    edx,0x1f
c0010fcd:	c3                   	ret    
c0010fce:	83 c4 04             	add    esp,0x4
c0010fd1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fd6:	5b                   	pop    ebx
c0010fd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fdc:	5e                   	pop    esi
c0010fdd:	c3                   	ret    

c0010fde <SysGetDiskVolumeLabel(regs*)>:
c0010fde:	57                   	push   edi
c0010fdf:	56                   	push   esi
c0010fe0:	53                   	push   ebx
c0010fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010fe8:	83 fa 19             	cmp    edx,0x19
c0010feb:	77 3c                	ja     c0011029 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010fed:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010ff4:	85 c9                	test   ecx,ecx
c0010ff6:	74 31                	je     c0011029 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ff8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010ffb:	85 db                	test   ebx,ebx
c0010ffd:	74 2a                	je     c0011029 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010fff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011002:	85 f6                	test   esi,esi
c0011004:	74 23                	je     c0011029 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011006:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001100c:	85 c0                	test   eax,eax
c001100e:	74 19                	je     c0011029 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011010:	83 ec 0c             	sub    esp,0xc
c0011013:	8b 38                	mov    edi,DWORD PTR [eax]
c0011015:	56                   	push   esi
c0011016:	53                   	push   ebx
c0011017:	52                   	push   edx
c0011018:	51                   	push   ecx
c0011019:	50                   	push   eax
c001101a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001101d:	83 c4 20             	add    esp,0x20
c0011020:	5b                   	pop    ebx
c0011021:	5e                   	pop    esi
c0011022:	89 c2                	mov    edx,eax
c0011024:	c1 fa 1f             	sar    edx,0x1f
c0011027:	5f                   	pop    edi
c0011028:	c3                   	ret    
c0011029:	5b                   	pop    ebx
c001102a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001102f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011034:	5e                   	pop    esi
c0011035:	5f                   	pop    edi
c0011036:	c3                   	ret    

c0011037 <SysShutdown(regs*)>:
c0011037:	57                   	push   edi
c0011038:	56                   	push   esi
c0011039:	83 ec 04             	sub    esp,0x4
c001103c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011040:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011043:	85 c0                	test   eax,eax
c0011045:	74 1e                	je     c0011065 <SysShutdown(regs*)+0x2e>
c0011047:	83 f8 01             	cmp    eax,0x1
c001104a:	74 5f                	je     c00110ab <SysShutdown(regs*)+0x74>
c001104c:	83 f8 02             	cmp    eax,0x2
c001104f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011054:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011059:	74 32                	je     c001108d <SysShutdown(regs*)+0x56>
c001105b:	83 c4 04             	add    esp,0x4
c001105e:	89 f0                	mov    eax,esi
c0011060:	5e                   	pop    esi
c0011061:	89 fa                	mov    edx,edi
c0011063:	5f                   	pop    edi
c0011064:	c3                   	ret    
c0011065:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001106a:	be ff ff ff ff       	mov    esi,0xffffffff
c001106f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011074:	8b 10                	mov    edx,DWORD PTR [eax]
c0011076:	6a 00                	push   0x0
c0011078:	6a 00                	push   0x0
c001107a:	6a 00                	push   0x0
c001107c:	50                   	push   eax
c001107d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011080:	83 c4 10             	add    esp,0x10
c0011083:	89 f0                	mov    eax,esi
c0011085:	83 c4 04             	add    esp,0x4
c0011088:	89 fa                	mov    edx,edi
c001108a:	5e                   	pop    esi
c001108b:	5f                   	pop    edi
c001108c:	c3                   	ret    
c001108d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011092:	8b 10                	mov    edx,DWORD PTR [eax]
c0011094:	6a 00                	push   0x0
c0011096:	6a 00                	push   0x0
c0011098:	6a 01                	push   0x1
c001109a:	50                   	push   eax
c001109b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	89 f0                	mov    eax,esi
c00110a3:	83 c4 04             	add    esp,0x4
c00110a6:	89 fa                	mov    edx,edi
c00110a8:	5e                   	pop    esi
c00110a9:	5f                   	pop    edi
c00110aa:	c3                   	ret    
c00110ab:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110b0:	85 c0                	test   eax,eax
c00110b2:	74 02                	je     c00110b6 <SysShutdown(regs*)+0x7f>
c00110b4:	ff d0                	call   eax
c00110b6:	31 f6                	xor    esi,esi
c00110b8:	83 c4 04             	add    esp,0x4
c00110bb:	89 f0                	mov    eax,esi
c00110bd:	31 ff                	xor    edi,edi
c00110bf:	5e                   	pop    esi
c00110c0:	89 fa                	mov    edx,edi
c00110c2:	5f                   	pop    edi
c00110c3:	c3                   	ret    

c00110c4 <SysRealpath(regs*)>:
c00110c4:	53                   	push   ebx
c00110c5:	83 ec 08             	sub    esp,0x8
c00110c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110cc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110cf:	85 c9                	test   ecx,ecx
c00110d1:	74 37                	je     c001110a <SysRealpath(regs*)+0x46>
c00110d3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110d6:	31 d2                	xor    edx,edx
c00110d8:	b8 01 00 00 00       	mov    eax,0x1
c00110dd:	85 db                	test   ebx,ebx
c00110df:	75 05                	jne    c00110e6 <SysRealpath(regs*)+0x22>
c00110e1:	83 c4 08             	add    esp,0x8
c00110e4:	5b                   	pop    ebx
c00110e5:	c3                   	ret    
c00110e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110eb:	83 ec 04             	sub    esp,0x4
c00110ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110f1:	05 0c 01 00 00       	add    eax,0x10c
c00110f6:	50                   	push   eax
c00110f7:	51                   	push   ecx
c00110f8:	53                   	push   ebx
c00110f9:	e8 3e 9c ff ff       	call   c000ad3c <Fs::standardiseFiles(char*, char const*, char const*)>
c00110fe:	83 c4 10             	add    esp,0x10
c0011101:	31 c0                	xor    eax,eax
c0011103:	31 d2                	xor    edx,edx
c0011105:	83 c4 08             	add    esp,0x8
c0011108:	5b                   	pop    ebx
c0011109:	c3                   	ret    
c001110a:	b8 01 00 00 00       	mov    eax,0x1
c001110f:	31 d2                	xor    edx,edx
c0011111:	eb f2                	jmp    c0011105 <SysRealpath(regs*)+0x41>

c0011113 <SysReadDir(regs*)>:
c0011113:	53                   	push   ebx
c0011114:	83 ec 18             	sub    esp,0x18
c0011117:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001111b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001111e:	83 f8 02             	cmp    eax,0x2
c0011121:	76 4f                	jbe    c0011172 <SysReadDir(regs*)+0x5f>
c0011123:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001112a:	77 52                	ja     c001117e <SysReadDir(regs*)+0x6b>
c001112c:	83 ec 0c             	sub    esp,0xc
c001112f:	50                   	push   eax
c0011130:	e8 76 83 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011135:	83 c4 10             	add    esp,0x10
c0011138:	85 c0                	test   eax,eax
c001113a:	74 42                	je     c001117e <SysReadDir(regs*)+0x6b>
c001113c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011144:	83 ec 0c             	sub    esp,0xc
c0011147:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001114b:	8b 10                	mov    edx,DWORD PTR [eax]
c001114d:	51                   	push   ecx
c001114e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011151:	51                   	push   ecx
c0011152:	6a 00                	push   0x0
c0011154:	68 10 01 00 00       	push   0x110
c0011159:	50                   	push   eax
c001115a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001115d:	83 c4 20             	add    esp,0x20
c0011160:	85 c0                	test   eax,eax
c0011162:	89 c1                	mov    ecx,eax
c0011164:	74 27                	je     c001118d <SysReadDir(regs*)+0x7a>
c0011166:	31 d2                	xor    edx,edx
c0011168:	83 f9 07             	cmp    ecx,0x7
c001116b:	b8 02 00 00 00       	mov    eax,0x2
c0011170:	75 16                	jne    c0011188 <SysReadDir(regs*)+0x75>
c0011172:	b8 01 00 00 00       	mov    eax,0x1
c0011177:	31 d2                	xor    edx,edx
c0011179:	83 c4 18             	add    esp,0x18
c001117c:	5b                   	pop    ebx
c001117d:	c3                   	ret    
c001117e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011183:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011188:	83 c4 18             	add    esp,0x18
c001118b:	5b                   	pop    ebx
c001118c:	c3                   	ret    
c001118d:	31 c0                	xor    eax,eax
c001118f:	31 d2                	xor    edx,edx
c0011191:	eb e6                	jmp    c0011179 <SysReadDir(regs*)+0x66>

c0011193 <SysIsATTY(regs*)>:
c0011193:	83 ec 0c             	sub    esp,0xc
c0011196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001119d:	83 f8 02             	cmp    eax,0x2
c00111a0:	76 07                	jbe    c00111a9 <SysIsATTY(regs*)+0x16>
c00111a2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111a7:	75 26                	jne    c00111cf <SysIsATTY(regs*)+0x3c>
c00111a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111b7:	85 c0                	test   eax,eax
c00111b9:	74 24                	je     c00111df <SysIsATTY(regs*)+0x4c>
c00111bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00111bd:	83 ec 0c             	sub    esp,0xc
c00111c0:	50                   	push   eax
c00111c1:	ff 12                	call   DWORD PTR [edx]
c00111c3:	83 c4 10             	add    esp,0x10
c00111c6:	31 d2                	xor    edx,edx
c00111c8:	83 c4 0c             	add    esp,0xc
c00111cb:	0f b6 c0             	movzx  eax,al
c00111ce:	c3                   	ret    
c00111cf:	83 ec 0c             	sub    esp,0xc
c00111d2:	50                   	push   eax
c00111d3:	e8 d3 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00111d8:	83 c4 10             	add    esp,0x10
c00111db:	85 c0                	test   eax,eax
c00111dd:	75 dc                	jne    c00111bb <SysIsATTY(regs*)+0x28>
c00111df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111e9:	83 c4 0c             	add    esp,0xc
c00111ec:	c3                   	ret    

c00111ed <SysSeek(regs*)>:
c00111ed:	56                   	push   esi
c00111ee:	53                   	push   ebx
c00111ef:	83 ec 04             	sub    esp,0x4
c00111f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111f6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00111f9:	8d 71 fd             	lea    esi,[ecx-0x3]
c00111fc:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011202:	77 33                	ja     c0011237 <SysSeek(regs*)+0x4a>
c0011204:	83 ec 0c             	sub    esp,0xc
c0011207:	51                   	push   ecx
c0011208:	e8 9e 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c001120d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011210:	83 c4 0c             	add    esp,0xc
c0011213:	31 db                	xor    ebx,ebx
c0011215:	53                   	push   ebx
c0011216:	51                   	push   ecx
c0011217:	50                   	push   eax
c0011218:	e8 75 9e ff ff       	call   c000b092 <File::seek(unsigned long long)>
c001121d:	83 c4 10             	add    esp,0x10
c0011220:	85 c0                	test   eax,eax
c0011222:	0f 95 c0             	setne  al
c0011225:	31 d2                	xor    edx,edx
c0011227:	0f b6 c0             	movzx  eax,al
c001122a:	f7 d8                	neg    eax
c001122c:	83 d2 00             	adc    edx,0x0
c001122f:	83 c4 04             	add    esp,0x4
c0011232:	5b                   	pop    ebx
c0011233:	f7 da                	neg    edx
c0011235:	5e                   	pop    esi
c0011236:	c3                   	ret    
c0011237:	83 c4 04             	add    esp,0x4
c001123a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001123f:	5b                   	pop    ebx
c0011240:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011245:	5e                   	pop    esi
c0011246:	c3                   	ret    

c0011247 <SysTell(regs*)>:
c0011247:	53                   	push   ebx
c0011248:	83 ec 08             	sub    esp,0x8
c001124b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001124f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011252:	83 f8 02             	cmp    eax,0x2
c0011255:	76 4e                	jbe    c00112a5 <SysTell(regs*)+0x5e>
c0011257:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001125c:	76 19                	jbe    c0011277 <SysTell(regs*)+0x30>
c001125e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011261:	31 d2                	xor    edx,edx
c0011263:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011269:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011270:	83 c4 08             	add    esp,0x8
c0011273:	31 c0                	xor    eax,eax
c0011275:	5b                   	pop    ebx
c0011276:	c3                   	ret    
c0011277:	83 ec 0c             	sub    esp,0xc
c001127a:	50                   	push   eax
c001127b:	e8 2b 82 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011280:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011283:	5a                   	pop    edx
c0011284:	59                   	pop    ecx
c0011285:	53                   	push   ebx
c0011286:	50                   	push   eax
c0011287:	e8 5c 9e ff ff       	call   c000b0e8 <File::tell(unsigned long long*)>
c001128c:	83 c4 10             	add    esp,0x10
c001128f:	85 c0                	test   eax,eax
c0011291:	0f 95 c0             	setne  al
c0011294:	31 d2                	xor    edx,edx
c0011296:	0f b6 c0             	movzx  eax,al
c0011299:	f7 d8                	neg    eax
c001129b:	83 d2 00             	adc    edx,0x0
c001129e:	83 c4 08             	add    esp,0x8
c00112a1:	5b                   	pop    ebx
c00112a2:	f7 da                	neg    edx
c00112a4:	c3                   	ret    
c00112a5:	83 c4 08             	add    esp,0x8
c00112a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112ad:	5b                   	pop    ebx
c00112ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112b3:	c3                   	ret    

c00112b4 <SysSize(regs*)>:
c00112b4:	53                   	push   ebx
c00112b5:	83 ec 18             	sub    esp,0x18
c00112b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112bf:	83 f8 02             	cmp    eax,0x2
c00112c2:	76 54                	jbe    c0011318 <SysSize(regs*)+0x64>
c00112c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112c9:	76 19                	jbe    c00112e4 <SysSize(regs*)+0x30>
c00112cb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112ce:	31 d2                	xor    edx,edx
c00112d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112dd:	83 c4 18             	add    esp,0x18
c00112e0:	31 c0                	xor    eax,eax
c00112e2:	5b                   	pop    ebx
c00112e3:	c3                   	ret    
c00112e4:	83 ec 0c             	sub    esp,0xc
c00112e7:	50                   	push   eax
c00112e8:	e8 be 81 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00112ed:	83 c4 0c             	add    esp,0xc
c00112f0:	8d 54 24 13          	lea    edx,[esp+0x13]
c00112f4:	52                   	push   edx
c00112f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112f8:	52                   	push   edx
c00112f9:	50                   	push   eax
c00112fa:	e8 81 9f ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c00112ff:	83 c4 10             	add    esp,0x10
c0011302:	85 c0                	test   eax,eax
c0011304:	0f 95 c0             	setne  al
c0011307:	31 d2                	xor    edx,edx
c0011309:	0f b6 c0             	movzx  eax,al
c001130c:	f7 d8                	neg    eax
c001130e:	83 d2 00             	adc    edx,0x0
c0011311:	83 c4 18             	add    esp,0x18
c0011314:	5b                   	pop    ebx
c0011315:	f7 da                	neg    edx
c0011317:	c3                   	ret    
c0011318:	83 c4 18             	add    esp,0x18
c001131b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011320:	5b                   	pop    ebx
c0011321:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011326:	c3                   	ret    

c0011327 <SysSizeFromFilename(regs*)>:
c0011327:	57                   	push   edi
c0011328:	56                   	push   esi
c0011329:	53                   	push   ebx
c001132a:	83 ec 10             	sub    esp,0x10
c001132d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011331:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011334:	83 fb 02             	cmp    ebx,0x2
c0011337:	0f 86 83 00 00 00    	jbe    c00113c0 <SysSizeFromFilename(regs*)+0x99>
c001133d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011343:	76 1b                	jbe    c0011360 <SysSizeFromFilename(regs*)+0x39>
c0011345:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011348:	31 d2                	xor    edx,edx
c001134a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011350:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011357:	83 c4 10             	add    esp,0x10
c001135a:	31 c0                	xor    eax,eax
c001135c:	5b                   	pop    ebx
c001135d:	5e                   	pop    esi
c001135e:	5f                   	pop    edi
c001135f:	c3                   	ret    
c0011360:	83 ec 0c             	sub    esp,0xc
c0011363:	68 14 01 00 00       	push   0x114
c0011368:	e8 5e 67 ff ff       	call   c0007acb <malloc>
c001136d:	83 c4 0c             	add    esp,0xc
c0011370:	89 c7                	mov    edi,eax
c0011372:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011377:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001137a:	50                   	push   eax
c001137b:	53                   	push   ebx
c001137c:	57                   	push   edi
c001137d:	e8 96 9b ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0011382:	83 c4 0c             	add    esp,0xc
c0011385:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011389:	50                   	push   eax
c001138a:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001138d:	52                   	push   edx
c001138e:	57                   	push   edi
c001138f:	e8 ec 9e ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c0011394:	83 c4 10             	add    esp,0x10
c0011397:	85 ff                	test   edi,edi
c0011399:	89 c3                	mov    ebx,eax
c001139b:	74 0c                	je     c00113a9 <SysSizeFromFilename(regs*)+0x82>
c001139d:	8b 07                	mov    eax,DWORD PTR [edi]
c001139f:	83 ec 0c             	sub    esp,0xc
c00113a2:	57                   	push   edi
c00113a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113a6:	83 c4 10             	add    esp,0x10
c00113a9:	31 c0                	xor    eax,eax
c00113ab:	85 db                	test   ebx,ebx
c00113ad:	0f 95 c0             	setne  al
c00113b0:	31 d2                	xor    edx,edx
c00113b2:	f7 d8                	neg    eax
c00113b4:	83 d2 00             	adc    edx,0x0
c00113b7:	83 c4 10             	add    esp,0x10
c00113ba:	5b                   	pop    ebx
c00113bb:	f7 da                	neg    edx
c00113bd:	5e                   	pop    esi
c00113be:	5f                   	pop    edi
c00113bf:	c3                   	ret    
c00113c0:	83 c4 10             	add    esp,0x10
c00113c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113c8:	5b                   	pop    ebx
c00113c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113ce:	5e                   	pop    esi
c00113cf:	5f                   	pop    edi
c00113d0:	c3                   	ret    

c00113d1 <SysClose(regs*)>:
c00113d1:	53                   	push   ebx
c00113d2:	83 ec 08             	sub    esp,0x8
c00113d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113dc:	83 f8 02             	cmp    eax,0x2
c00113df:	76 41                	jbe    c0011422 <SysClose(regs*)+0x51>
c00113e1:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00113e7:	83 fa 01             	cmp    edx,0x1
c00113ea:	76 2d                	jbe    c0011419 <SysClose(regs*)+0x48>
c00113ec:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00113f1:	77 2f                	ja     c0011422 <SysClose(regs*)+0x51>
c00113f3:	83 ec 0c             	sub    esp,0xc
c00113f6:	50                   	push   eax
c00113f7:	e8 af 80 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00113fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00113ff:	89 c3                	mov    ebx,eax
c0011401:	e8 2c 9c ff ff       	call   c000b032 <File::close()>
c0011406:	83 c4 10             	add    esp,0x10
c0011409:	85 db                	test   ebx,ebx
c001140b:	74 0c                	je     c0011419 <SysClose(regs*)+0x48>
c001140d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001140f:	83 ec 0c             	sub    esp,0xc
c0011412:	53                   	push   ebx
c0011413:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011416:	83 c4 10             	add    esp,0x10
c0011419:	83 c4 08             	add    esp,0x8
c001141c:	31 c0                	xor    eax,eax
c001141e:	5b                   	pop    ebx
c001141f:	31 d2                	xor    edx,edx
c0011421:	c3                   	ret    
c0011422:	83 c4 08             	add    esp,0x8
c0011425:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001142a:	5b                   	pop    ebx
c001142b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011430:	c3                   	ret    

c0011431 <SysOpenDir(regs*)>:
c0011431:	56                   	push   esi
c0011432:	53                   	push   ebx
c0011433:	83 ec 04             	sub    esp,0x4
c0011436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001143a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001143d:	85 c9                	test   ecx,ecx
c001143f:	74 5d                	je     c001149e <SysOpenDir(regs*)+0x6d>
c0011441:	83 ec 0c             	sub    esp,0xc
c0011444:	68 14 01 00 00       	push   0x114
c0011449:	e8 7d 66 ff ff       	call   c0007acb <malloc>
c001144e:	83 c4 0c             	add    esp,0xc
c0011451:	89 c6                	mov    esi,eax
c0011453:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011458:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001145b:	50                   	push   eax
c001145c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001145f:	52                   	push   edx
c0011460:	56                   	push   esi
c0011461:	e8 d8 9f ff ff       	call   c000b43e <Directory::Directory(char const*, Process*)>
c0011466:	83 c4 10             	add    esp,0x10
c0011469:	85 f6                	test   esi,esi
c001146b:	74 31                	je     c001149e <SysOpenDir(regs*)+0x6d>
c001146d:	83 ec 0c             	sub    esp,0xc
c0011470:	56                   	push   esi
c0011471:	e8 84 a0 ff ff       	call   c000b4fa <Directory::open()>
c0011476:	83 c4 10             	add    esp,0x10
c0011479:	85 c0                	test   eax,eax
c001147b:	75 21                	jne    c001149e <SysOpenDir(regs*)+0x6d>
c001147d:	83 ec 0c             	sub    esp,0xc
c0011480:	56                   	push   esi
c0011481:	e8 28 7d ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011486:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	89 02                	mov    DWORD PTR [edx],eax
c001148e:	c1 f8 1f             	sar    eax,0x1f
c0011491:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011494:	83 c4 04             	add    esp,0x4
c0011497:	31 c0                	xor    eax,eax
c0011499:	5b                   	pop    ebx
c001149a:	31 d2                	xor    edx,edx
c001149c:	5e                   	pop    esi
c001149d:	c3                   	ret    
c001149e:	83 c4 04             	add    esp,0x4
c00114a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114a6:	5b                   	pop    ebx
c00114a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114ac:	5e                   	pop    esi
c00114ad:	c3                   	ret    

c00114ae <SysMakeDir(regs*)>:
c00114ae:	56                   	push   esi
c00114af:	53                   	push   ebx
c00114b0:	83 ec 10             	sub    esp,0x10
c00114b3:	68 14 01 00 00       	push   0x114
c00114b8:	e8 0e 66 ff ff       	call   c0007acb <malloc>
c00114bd:	83 c4 0c             	add    esp,0xc
c00114c0:	89 c3                	mov    ebx,eax
c00114c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114ca:	50                   	push   eax
c00114cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114cf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00114d2:	52                   	push   edx
c00114d3:	53                   	push   ebx
c00114d4:	e8 65 9f ff ff       	call   c000b43e <Directory::Directory(char const*, Process*)>
c00114d9:	83 c4 10             	add    esp,0x10
c00114dc:	85 db                	test   ebx,ebx
c00114de:	74 2c                	je     c001150c <SysMakeDir(regs*)+0x5e>
c00114e0:	83 ec 0c             	sub    esp,0xc
c00114e3:	53                   	push   ebx
c00114e4:	e8 f1 a1 ff ff       	call   c000b6da <Directory::create()>
c00114e9:	89 c6                	mov    esi,eax
c00114eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114f3:	83 c4 10             	add    esp,0x10
c00114f6:	31 c0                	xor    eax,eax
c00114f8:	85 f6                	test   esi,esi
c00114fa:	0f 95 c0             	setne  al
c00114fd:	31 d2                	xor    edx,edx
c00114ff:	f7 d8                	neg    eax
c0011501:	83 d2 00             	adc    edx,0x0
c0011504:	83 c4 04             	add    esp,0x4
c0011507:	5b                   	pop    ebx
c0011508:	f7 da                	neg    edx
c001150a:	5e                   	pop    esi
c001150b:	c3                   	ret    
c001150c:	83 c4 04             	add    esp,0x4
c001150f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011514:	5b                   	pop    ebx
c0011515:	ba ff ff ff ff       	mov    edx,0xffffffff
c001151a:	5e                   	pop    esi
c001151b:	c3                   	ret    

c001151c <SysCloseDir(regs*)>:
c001151c:	53                   	push   ebx
c001151d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011522:	83 ec 08             	sub    esp,0x8
c0011525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011529:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001152c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011531:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011534:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001153a:	77 2a                	ja     c0011566 <SysCloseDir(regs*)+0x4a>
c001153c:	83 ec 0c             	sub    esp,0xc
c001153f:	51                   	push   ecx
c0011540:	e8 66 7f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c0011545:	89 04 24             	mov    DWORD PTR [esp],eax
c0011548:	89 c3                	mov    ebx,eax
c001154a:	e8 07 a0 ff ff       	call   c000b556 <Directory::close()>
c001154f:	83 c4 10             	add    esp,0x10
c0011552:	85 db                	test   ebx,ebx
c0011554:	74 0c                	je     c0011562 <SysCloseDir(regs*)+0x46>
c0011556:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011558:	83 ec 0c             	sub    esp,0xc
c001155b:	53                   	push   ebx
c001155c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001155f:	83 c4 10             	add    esp,0x10
c0011562:	31 c0                	xor    eax,eax
c0011564:	31 d2                	xor    edx,edx
c0011566:	83 c4 08             	add    esp,0x8
c0011569:	5b                   	pop    ebx
c001156a:	c3                   	ret    

c001156b <SysWait(regs*)>:
c001156b:	83 ec 10             	sub    esp,0x10
c001156e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011572:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011575:	52                   	push   edx
c0011576:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011579:	51                   	push   ecx
c001157a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001157d:	50                   	push   eax
c001157e:	e8 e9 3c 00 00       	call   c001526c <waitTask(int, int*, int)>
c0011583:	83 c4 1c             	add    esp,0x1c
c0011586:	89 c2                	mov    edx,eax
c0011588:	c1 fa 1f             	sar    edx,0x1f
c001158b:	c3                   	ret    

c001158c <SysNotImpl(regs*)>:
c001158c:	83 ec 18             	sub    esp,0x18
c001158f:	68 96 0d 02 c0       	push   0xc0020d96
c0011594:	e8 a0 f2 ff ff       	call   c0010839 <KePanic(char const*)>
c0011599:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001159e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115a3:	83 c4 1c             	add    esp,0x1c
c00115a6:	c3                   	ret    

c00115a7 <SysPanic(regs*)>:
c00115a7:	83 ec 18             	sub    esp,0x18
c00115aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115ae:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115b1:	50                   	push   eax
c00115b2:	e8 82 f2 ff ff       	call   c0010839 <KePanic(char const*)>
c00115b7:	b8 01 00 00 00       	mov    eax,0x1
c00115bc:	31 d2                	xor    edx,edx
c00115be:	83 c4 1c             	add    esp,0x1c
c00115c1:	c3                   	ret    

c00115c2 <SysRmdir(regs*)>:
c00115c2:	56                   	push   esi
c00115c3:	53                   	push   ebx
c00115c4:	83 ec 10             	sub    esp,0x10
c00115c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115cb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115ce:	68 14 01 00 00       	push   0x114
c00115d3:	e8 f3 64 ff ff       	call   c0007acb <malloc>
c00115d8:	83 c4 0c             	add    esp,0xc
c00115db:	89 c3                	mov    ebx,eax
c00115dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115e5:	50                   	push   eax
c00115e6:	56                   	push   esi
c00115e7:	53                   	push   ebx
c00115e8:	e8 2b 99 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c00115ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115f0:	e8 57 9b ff ff       	call   c000b14c <File::unlink()>
c00115f5:	83 c4 10             	add    esp,0x10
c00115f8:	85 db                	test   ebx,ebx
c00115fa:	89 c6                	mov    esi,eax
c00115fc:	74 0c                	je     c001160a <SysRmdir(regs*)+0x48>
c00115fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011600:	83 ec 0c             	sub    esp,0xc
c0011603:	53                   	push   ebx
c0011604:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011607:	83 c4 10             	add    esp,0x10
c001160a:	31 c0                	xor    eax,eax
c001160c:	85 f6                	test   esi,esi
c001160e:	0f 95 c0             	setne  al
c0011611:	31 d2                	xor    edx,edx
c0011613:	f7 d8                	neg    eax
c0011615:	83 d2 00             	adc    edx,0x0
c0011618:	83 c4 04             	add    esp,0x4
c001161b:	5b                   	pop    ebx
c001161c:	f7 da                	neg    edx
c001161e:	5e                   	pop    esi
c001161f:	c3                   	ret    

c0011620 <SysUnlink(regs*)>:
c0011620:	56                   	push   esi
c0011621:	53                   	push   ebx
c0011622:	83 ec 10             	sub    esp,0x10
c0011625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011629:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001162c:	68 14 01 00 00       	push   0x114
c0011631:	e8 95 64 ff ff       	call   c0007acb <malloc>
c0011636:	83 c4 0c             	add    esp,0xc
c0011639:	89 c3                	mov    ebx,eax
c001163b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011640:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011643:	50                   	push   eax
c0011644:	56                   	push   esi
c0011645:	53                   	push   ebx
c0011646:	e8 cd 98 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c001164b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001164e:	e8 f9 9a ff ff       	call   c000b14c <File::unlink()>
c0011653:	83 c4 10             	add    esp,0x10
c0011656:	85 db                	test   ebx,ebx
c0011658:	89 c6                	mov    esi,eax
c001165a:	74 0c                	je     c0011668 <SysUnlink(regs*)+0x48>
c001165c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001165e:	83 ec 0c             	sub    esp,0xc
c0011661:	53                   	push   ebx
c0011662:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	31 c0                	xor    eax,eax
c001166a:	85 f6                	test   esi,esi
c001166c:	0f 95 c0             	setne  al
c001166f:	31 d2                	xor    edx,edx
c0011671:	f7 d8                	neg    eax
c0011673:	83 d2 00             	adc    edx,0x0
c0011676:	83 c4 04             	add    esp,0x4
c0011679:	5b                   	pop    ebx
c001167a:	f7 da                	neg    edx
c001167c:	5e                   	pop    esi
c001167d:	c3                   	ret    

c001167e <SysGetArgv(regs*)>:
c001167e:	83 ec 0c             	sub    esp,0xc
c0011681:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011685:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011688:	85 c0                	test   eax,eax
c001168a:	78 2c                	js     c00116b8 <SysGetArgv(regs*)+0x3a>
c001168c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011692:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011695:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001169b:	7d 1b                	jge    c00116b8 <SysGetArgv(regs*)+0x3a>
c001169d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00116a4:	85 c0                	test   eax,eax
c00116a6:	74 18                	je     c00116c0 <SysGetArgv(regs*)+0x42>
c00116a8:	83 ec 08             	sub    esp,0x8
c00116ab:	50                   	push   eax
c00116ac:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00116af:	50                   	push   eax
c00116b0:	e8 9b ef fe ff       	call   c0000650 <strcpy>
c00116b5:	83 c4 10             	add    esp,0x10
c00116b8:	31 c0                	xor    eax,eax
c00116ba:	31 d2                	xor    edx,edx
c00116bc:	83 c4 0c             	add    esp,0xc
c00116bf:	c3                   	ret    
c00116c0:	b8 01 00 00 00       	mov    eax,0x1
c00116c5:	31 d2                	xor    edx,edx
c00116c7:	83 c4 0c             	add    esp,0xc
c00116ca:	c3                   	ret    

c00116cb <SysUSleep(regs*)>:
c00116cb:	83 ec 1c             	sub    esp,0x1c
c00116ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00116d2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00116d5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00116d8:	6a 00                	push   0x0
c00116da:	6a 64                	push   0x64
c00116dc:	52                   	push   edx
c00116dd:	50                   	push   eax
c00116de:	e8 1d cf 00 00       	call   c001e600 <__udivdi3>
c00116e3:	83 c4 14             	add    esp,0x14
c00116e6:	50                   	push   eax
c00116e7:	e8 64 3c 00 00       	call   c0015350 <milliTenthSleep(unsigned int)>
c00116ec:	31 c0                	xor    eax,eax
c00116ee:	31 d2                	xor    edx,edx
c00116f0:	83 c4 1c             	add    esp,0x1c
c00116f3:	c3                   	ret    

c00116f4 <SysSpawn(regs*)>:
c00116f4:	56                   	push   esi
c00116f5:	53                   	push   ebx
c00116f6:	83 ec 04             	sub    esp,0x4
c00116f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116fd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011700:	85 f6                	test   esi,esi
c0011702:	75 0a                	jne    c001170e <SysSpawn(regs*)+0x1a>
c0011704:	83 c4 04             	add    esp,0x4
c0011707:	31 c0                	xor    eax,eax
c0011709:	5b                   	pop    ebx
c001170a:	31 d2                	xor    edx,edx
c001170c:	5e                   	pop    esi
c001170d:	c3                   	ret    
c001170e:	83 ec 0c             	sub    esp,0xc
c0011711:	68 24 07 00 00       	push   0x724
c0011716:	e8 b0 63 ff ff       	call   c0007acb <malloc>
c001171b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011724:	89 c6                	mov    esi,eax
c0011726:	31 c0                	xor    eax,eax
c0011728:	85 c9                	test   ecx,ecx
c001172a:	75 08                	jne    c0011734 <SysSpawn(regs*)+0x40>
c001172c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011731:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011734:	52                   	push   edx
c0011735:	50                   	push   eax
c0011736:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011739:	50                   	push   eax
c001173a:	56                   	push   esi
c001173b:	e8 78 32 00 00       	call   c00149b8 <Process::Process(char const*, Process*, char**)>
c0011740:	83 c4 10             	add    esp,0x10
c0011743:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001174a:	75 b8                	jne    c0011704 <SysSpawn(regs*)+0x10>
c001174c:	83 ec 0c             	sub    esp,0xc
c001174f:	56                   	push   esi
c0011750:	e8 9b 37 00 00       	call   c0014ef0 <Process::createUserThread()>
c0011755:	8b 06                	mov    eax,DWORD PTR [esi]
c0011757:	83 c4 10             	add    esp,0x10
c001175a:	83 c4 04             	add    esp,0x4
c001175d:	5b                   	pop    ebx
c001175e:	89 c2                	mov    edx,eax
c0011760:	c1 fa 1f             	sar    edx,0x1f
c0011763:	5e                   	pop    esi
c0011764:	c3                   	ret    

c0011765 <SysGetEnv(regs*)>:
c0011765:	57                   	push   edi
c0011766:	56                   	push   esi
c0011767:	53                   	push   ebx
c0011768:	83 ec 1c             	sub    esp,0x1c
c001176b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011770:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011774:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011777:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001177a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001177d:	51                   	push   ecx
c001177e:	e8 6e ef ff ff       	call   c00106f1 <Krnl::getProcessTotalEnvCount(Process*)>
c0011783:	83 c4 10             	add    esp,0x10
c0011786:	39 c7                	cmp    edi,eax
c0011788:	7c 12                	jl     c001179c <SysGetEnv(regs*)+0x37>
c001178a:	31 c0                	xor    eax,eax
c001178c:	31 d2                	xor    edx,edx
c001178e:	85 f6                	test   esi,esi
c0011790:	74 03                	je     c0011795 <SysGetEnv(regs*)+0x30>
c0011792:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011795:	83 c4 10             	add    esp,0x10
c0011798:	5b                   	pop    ebx
c0011799:	5e                   	pop    esi
c001179a:	5f                   	pop    edi
c001179b:	c3                   	ret    
c001179c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00117a0:	83 ec 04             	sub    esp,0x4
c00117a3:	57                   	push   edi
c00117a4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117aa:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00117ad:	57                   	push   edi
c00117ae:	50                   	push   eax
c00117af:	e8 5d ef ff ff       	call   c0010711 <Krnl::getProcessEnvPair(Process*, int)>
c00117b4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117bf:	83 c4 0c             	add    esp,0xc
c00117c2:	85 d2                	test   edx,edx
c00117c4:	75 23                	jne    c00117e9 <SysGetEnv(regs*)+0x84>
c00117c6:	83 ec 0c             	sub    esp,0xc
c00117c9:	50                   	push   eax
c00117ca:	e8 b1 ed fe ff       	call   c0000580 <strlen>
c00117cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117d2:	89 c3                	mov    ebx,eax
c00117d4:	e8 a7 ed fe ff       	call   c0000580 <strlen>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	31 d2                	xor    edx,edx
c00117de:	83 c4 10             	add    esp,0x10
c00117e1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00117e5:	5b                   	pop    ebx
c00117e6:	5e                   	pop    esi
c00117e7:	5f                   	pop    edi
c00117e8:	c3                   	ret    
c00117e9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117ec:	83 ec 08             	sub    esp,0x8
c00117ef:	50                   	push   eax
c00117f0:	56                   	push   esi
c00117f1:	e8 5a ee fe ff       	call   c0000650 <strcpy>
c00117f6:	58                   	pop    eax
c00117f7:	5a                   	pop    edx
c00117f8:	68 b0 0d 02 c0       	push   0xc0020db0
c00117fd:	56                   	push   esi
c00117fe:	e8 6d f0 fe ff       	call   c0000870 <strcat>
c0011803:	59                   	pop    ecx
c0011804:	5b                   	pop    ebx
c0011805:	57                   	push   edi
c0011806:	56                   	push   esi
c0011807:	e8 64 f0 fe ff       	call   c0000870 <strcat>
c001180c:	83 c4 10             	add    esp,0x10
c001180f:	31 c0                	xor    eax,eax
c0011811:	83 c4 10             	add    esp,0x10
c0011814:	31 d2                	xor    edx,edx
c0011816:	5b                   	pop    ebx
c0011817:	5e                   	pop    esi
c0011818:	5f                   	pop    edi
c0011819:	c3                   	ret    

c001181a <SysSetFatAttrib(regs*)>:
c001181a:	57                   	push   edi
c001181b:	56                   	push   esi
c001181c:	53                   	push   ebx
c001181d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011821:	83 ec 0c             	sub    esp,0xc
c0011824:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011827:	68 14 01 00 00       	push   0x114
c001182c:	e8 9a 62 ff ff       	call   c0007acb <malloc>
c0011831:	83 c4 0c             	add    esp,0xc
c0011834:	89 c3                	mov    ebx,eax
c0011836:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001183b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001183e:	50                   	push   eax
c001183f:	57                   	push   edi
c0011840:	53                   	push   ebx
c0011841:	e8 d2 96 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0011846:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011849:	83 c4 0c             	add    esp,0xc
c001184c:	0f b6 d4             	movzx  edx,ah
c001184f:	0f b6 c0             	movzx  eax,al
c0011852:	52                   	push   edx
c0011853:	50                   	push   eax
c0011854:	53                   	push   ebx
c0011855:	e8 8c 99 ff ff       	call   c000b1e6 <File::chfatattr(unsigned char, unsigned char)>
c001185a:	83 c4 10             	add    esp,0x10
c001185d:	85 db                	test   ebx,ebx
c001185f:	89 c6                	mov    esi,eax
c0011861:	74 0c                	je     c001186f <SysSetFatAttrib(regs*)+0x55>
c0011863:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011865:	83 ec 0c             	sub    esp,0xc
c0011868:	53                   	push   ebx
c0011869:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001186c:	83 c4 10             	add    esp,0x10
c001186f:	5b                   	pop    ebx
c0011870:	31 c0                	xor    eax,eax
c0011872:	85 f6                	test   esi,esi
c0011874:	0f 95 c0             	setne  al
c0011877:	31 d2                	xor    edx,edx
c0011879:	5e                   	pop    esi
c001187a:	f7 d8                	neg    eax
c001187c:	83 d2 00             	adc    edx,0x0
c001187f:	f7 da                	neg    edx
c0011881:	5f                   	pop    edi
c0011882:	c3                   	ret    

c0011883 <SysPipe(regs*)>:
c0011883:	57                   	push   edi
c0011884:	56                   	push   esi
c0011885:	53                   	push   ebx
c0011886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001188a:	83 ec 0c             	sub    esp,0xc
c001188d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011890:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011893:	6a 20                	push   0x20
c0011895:	e8 31 62 ff ff       	call   c0007acb <malloc>
c001189a:	89 c3                	mov    ebx,eax
c001189c:	58                   	pop    eax
c001189d:	5a                   	pop    edx
c001189e:	68 00 50 00 00       	push   0x5000
c00118a3:	53                   	push   ebx
c00118a4:	e8 7f 6b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00118a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118ac:	e8 fd 78 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00118b1:	89 07                	mov    DWORD PTR [edi],eax
c00118b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118b6:	e8 f3 78 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c00118bb:	83 c4 10             	add    esp,0x10
c00118be:	31 d2                	xor    edx,edx
c00118c0:	89 06                	mov    DWORD PTR [esi],eax
c00118c2:	31 c0                	xor    eax,eax
c00118c4:	5b                   	pop    ebx
c00118c5:	5e                   	pop    esi
c00118c6:	5f                   	pop    edi
c00118c7:	c3                   	ret    

c00118c8 <SysGetUnixTime(regs*)>:
c00118c8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118d7:	e9 42 a0 ff ff       	jmp    c000b91e <Clock::timeInSecondsLocal()>

c00118dc <string_ends_with(char const*, char const*)>:
c00118dc:	57                   	push   edi
c00118dd:	56                   	push   esi
c00118de:	53                   	push   ebx
c00118df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118e3:	83 ec 0c             	sub    esp,0xc
c00118e6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00118ea:	53                   	push   ebx
c00118eb:	e8 90 ec fe ff       	call   c0000580 <strlen>
c00118f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118f3:	89 c6                	mov    esi,eax
c00118f5:	e8 86 ec fe ff       	call   c0000580 <strlen>
c00118fa:	83 c4 10             	add    esp,0x10
c00118fd:	31 d2                	xor    edx,edx
c00118ff:	39 c6                	cmp    esi,eax
c0011901:	7d 06                	jge    c0011909 <string_ends_with(char const*, char const*)+0x2d>
c0011903:	5b                   	pop    ebx
c0011904:	89 d0                	mov    eax,edx
c0011906:	5e                   	pop    esi
c0011907:	5f                   	pop    edi
c0011908:	c3                   	ret    
c0011909:	83 ec 08             	sub    esp,0x8
c001190c:	29 c6                	sub    esi,eax
c001190e:	57                   	push   edi
c001190f:	01 f3                	add    ebx,esi
c0011911:	53                   	push   ebx
c0011912:	e8 69 ee fe ff       	call   c0000780 <strcmp>
c0011917:	83 c4 10             	add    esp,0x10
c001191a:	31 d2                	xor    edx,edx
c001191c:	5b                   	pop    ebx
c001191d:	5e                   	pop    esi
c001191e:	85 c0                	test   eax,eax
c0011920:	5f                   	pop    edi
c0011921:	0f 94 c2             	sete   dl
c0011924:	89 d0                	mov    eax,edx
c0011926:	c3                   	ret    

c0011927 <SysOpen(regs*)>:
c0011927:	56                   	push   esi
c0011928:	53                   	push   ebx
c0011929:	81 ec 04 01 00 00    	sub    esp,0x104
c001192f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011936:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011939:	85 c0                	test   eax,eax
c001193b:	0f 84 c5 01 00 00    	je     c0011b06 <SysOpen(regs*)+0x1df>
c0011941:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011944:	85 c0                	test   eax,eax
c0011946:	0f 84 ba 01 00 00    	je     c0011b06 <SysOpen(regs*)+0x1df>
c001194c:	83 ec 04             	sub    esp,0x4
c001194f:	68 b2 0d 02 c0       	push   0xc0020db2
c0011954:	50                   	push   eax
c0011955:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011959:	56                   	push   esi
c001195a:	e8 dd 93 ff ff       	call   c000ad3c <Fs::standardiseFiles(char*, char const*, char const*)>
c001195f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011962:	e8 19 ec fe ff       	call   c0000580 <strlen>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	83 e8 01             	sub    eax,0x1
c001196d:	74 29                	je     c0011998 <SysOpen(regs*)+0x71>
c001196f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011973:	83 fa 2e             	cmp    edx,0x2e
c0011976:	74 1c                	je     c0011994 <SysOpen(regs*)+0x6d>
c0011978:	83 fa 3a             	cmp    edx,0x3a
c001197b:	74 17                	je     c0011994 <SysOpen(regs*)+0x6d>
c001197d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011981:	83 e8 01             	sub    eax,0x1
c0011984:	74 12                	je     c0011998 <SysOpen(regs*)+0x71>
c0011986:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001198a:	83 fa 3a             	cmp    edx,0x3a
c001198d:	74 05                	je     c0011994 <SysOpen(regs*)+0x6d>
c001198f:	83 fa 2e             	cmp    edx,0x2e
c0011992:	75 e9                	jne    c001197d <SysOpen(regs*)+0x56>
c0011994:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011998:	83 ec 08             	sub    esp,0x8
c001199b:	68 b6 0d 02 c0       	push   0xc0020db6
c00119a0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119a3:	50                   	push   eax
c00119a4:	e8 33 ff ff ff       	call   c00118dc <string_ends_with(char const*, char const*)>
c00119a9:	83 c4 10             	add    esp,0x10
c00119ac:	85 c0                	test   eax,eax
c00119ae:	74 1d                	je     c00119cd <SysOpen(regs*)+0xa6>
c00119b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119b3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119c0:	81 c4 04 01 00 00    	add    esp,0x104
c00119c6:	31 c0                	xor    eax,eax
c00119c8:	5b                   	pop    ebx
c00119c9:	31 d2                	xor    edx,edx
c00119cb:	5e                   	pop    esi
c00119cc:	c3                   	ret    
c00119cd:	83 ec 08             	sub    esp,0x8
c00119d0:	68 bb 0d 02 c0       	push   0xc0020dbb
c00119d5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119d8:	50                   	push   eax
c00119d9:	e8 fe fe ff ff       	call   c00118dc <string_ends_with(char const*, char const*)>
c00119de:	83 c4 10             	add    esp,0x10
c00119e1:	85 c0                	test   eax,eax
c00119e3:	75 cb                	jne    c00119b0 <SysOpen(regs*)+0x89>
c00119e5:	83 ec 08             	sub    esp,0x8
c00119e8:	68 b7 0d 02 c0       	push   0xc0020db7
c00119ed:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119f0:	50                   	push   eax
c00119f1:	e8 8a ed fe ff       	call   c0000780 <strcmp>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	85 c0                	test   eax,eax
c00119fb:	74 b3                	je     c00119b0 <SysOpen(regs*)+0x89>
c00119fd:	83 ec 08             	sub    esp,0x8
c0011a00:	68 b6 0d 02 c0       	push   0xc0020db6
c0011a05:	56                   	push   esi
c0011a06:	e8 d1 fe ff ff       	call   c00118dc <string_ends_with(char const*, char const*)>
c0011a0b:	83 c4 10             	add    esp,0x10
c0011a0e:	85 c0                	test   eax,eax
c0011a10:	75 9e                	jne    c00119b0 <SysOpen(regs*)+0x89>
c0011a12:	83 ec 08             	sub    esp,0x8
c0011a15:	68 c0 0d 02 c0       	push   0xc0020dc0
c0011a1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a1d:	50                   	push   eax
c0011a1e:	e8 b9 fe ff ff       	call   c00118dc <string_ends_with(char const*, char const*)>
c0011a23:	83 c4 10             	add    esp,0x10
c0011a26:	85 c0                	test   eax,eax
c0011a28:	0f 85 eb 00 00 00    	jne    c0011b19 <SysOpen(regs*)+0x1f2>
c0011a2e:	83 ec 08             	sub    esp,0x8
c0011a31:	68 c5 0d 02 c0       	push   0xc0020dc5
c0011a36:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a39:	50                   	push   eax
c0011a3a:	e8 9d fe ff ff       	call   c00118dc <string_ends_with(char const*, char const*)>
c0011a3f:	83 c4 10             	add    esp,0x10
c0011a42:	85 c0                	test   eax,eax
c0011a44:	0f 85 cf 00 00 00    	jne    c0011b19 <SysOpen(regs*)+0x1f2>
c0011a4a:	83 ec 08             	sub    esp,0x8
c0011a4d:	68 c1 0d 02 c0       	push   0xc0020dc1
c0011a52:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a55:	51                   	push   ecx
c0011a56:	e8 25 ed fe ff       	call   c0000780 <strcmp>
c0011a5b:	83 c4 10             	add    esp,0x10
c0011a5e:	85 c0                	test   eax,eax
c0011a60:	0f 84 b3 00 00 00    	je     c0011b19 <SysOpen(regs*)+0x1f2>
c0011a66:	83 ec 08             	sub    esp,0x8
c0011a69:	68 c0 0d 02 c0       	push   0xc0020dc0
c0011a6e:	56                   	push   esi
c0011a6f:	e8 68 fe ff ff       	call   c00118dc <string_ends_with(char const*, char const*)>
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	85 c0                	test   eax,eax
c0011a79:	0f 85 9a 00 00 00    	jne    c0011b19 <SysOpen(regs*)+0x1f2>
c0011a7f:	83 ec 0c             	sub    esp,0xc
c0011a82:	68 14 01 00 00       	push   0x114
c0011a87:	e8 3f 60 ff ff       	call   c0007acb <malloc>
c0011a8c:	83 c4 0c             	add    esp,0xc
c0011a8f:	89 c6                	mov    esi,eax
c0011a91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a99:	50                   	push   eax
c0011a9a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011a9d:	52                   	push   edx
c0011a9e:	56                   	push   esi
c0011a9f:	e8 74 94 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0011aa4:	83 c4 10             	add    esp,0x10
c0011aa7:	85 f6                	test   esi,esi
c0011aa9:	74 5b                	je     c0011b06 <SysOpen(regs*)+0x1df>
c0011aab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011aae:	0f b6 c2             	movzx  eax,dl
c0011ab1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011ab4:	89 d0                	mov    eax,edx
c0011ab6:	83 e0 01             	and    eax,0x1
c0011ab9:	f6 c2 02             	test   dl,0x2
c0011abc:	74 03                	je     c0011ac1 <SysOpen(regs*)+0x19a>
c0011abe:	83 c8 02             	or     eax,0x2
c0011ac1:	f6 c2 04             	test   dl,0x4
c0011ac4:	74 03                	je     c0011ac9 <SysOpen(regs*)+0x1a2>
c0011ac6:	83 c8 04             	or     eax,0x4
c0011ac9:	f6 c2 08             	test   dl,0x8
c0011acc:	74 03                	je     c0011ad1 <SysOpen(regs*)+0x1aa>
c0011ace:	83 c8 0a             	or     eax,0xa
c0011ad1:	80 e2 10             	and    dl,0x10
c0011ad4:	74 03                	je     c0011ad9 <SysOpen(regs*)+0x1b2>
c0011ad6:	83 c8 12             	or     eax,0x12
c0011ad9:	83 ec 08             	sub    esp,0x8
c0011adc:	50                   	push   eax
c0011add:	56                   	push   esi
c0011ade:	e8 f1 94 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0011ae3:	83 c4 10             	add    esp,0x10
c0011ae6:	85 c0                	test   eax,eax
c0011ae8:	75 1c                	jne    c0011b06 <SysOpen(regs*)+0x1df>
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	56                   	push   esi
c0011aee:	e8 bb 76 ff ff       	call   c00091ae <UnixFile::getFileDescriptor()>
c0011af3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	89 02                	mov    DWORD PTR [edx],eax
c0011afb:	c1 f8 1f             	sar    eax,0x1f
c0011afe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b01:	e9 ba fe ff ff       	jmp    c00119c0 <SysOpen(regs*)+0x99>
c0011b06:	81 c4 04 01 00 00    	add    esp,0x104
c0011b0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b11:	5b                   	pop    ebx
c0011b12:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b17:	5e                   	pop    esi
c0011b18:	c3                   	ret    
c0011b19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b1c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b22:	e9 92 fe ff ff       	jmp    c00119b9 <SysOpen(regs*)+0x92>

c0011b27 <KeSystemCall(regs*, void*)>:
c0011b27:	53                   	push   ebx
c0011b28:	83 ec 08             	sub    esp,0x8
c0011b2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b32:	83 f8 3b             	cmp    eax,0x3b
c0011b35:	77 16                	ja     c0011b4d <KeSystemCall(regs*, void*)+0x26>
c0011b37:	8b 14 85 80 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdde80]
c0011b3e:	85 d2                	test   edx,edx
c0011b40:	74 0b                	je     c0011b4d <KeSystemCall(regs*, void*)+0x26>
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	53                   	push   ebx
c0011b46:	ff d2                	call   edx
c0011b48:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b4b:	eb 0d                	jmp    c0011b5a <KeSystemCall(regs*, void*)+0x33>
c0011b4d:	52                   	push   edx
c0011b4e:	52                   	push   edx
c0011b4f:	50                   	push   eax
c0011b50:	68 ca 0d 02 c0       	push   0xc0020dca
c0011b55:	e8 15 8e ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0011b5a:	83 c4 10             	add    esp,0x10
c0011b5d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b62:	83 c4 08             	add    esp,0x8
c0011b65:	31 d2                	xor    edx,edx
c0011b67:	5b                   	pop    ebx
c0011b68:	c3                   	ret    
c0011b69:	66 90                	xchg   ax,ax
c0011b6b:	90                   	nop

c0011b6c <KeSwitchEndian16(unsigned short)>:
c0011b6c:	83 ec 04             	sub    esp,0x4
c0011b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b73:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b77:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b7b:	c1 f8 08             	sar    eax,0x8
c0011b7e:	89 c2                	mov    edx,eax
c0011b80:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b84:	c1 e0 08             	shl    eax,0x8
c0011b87:	09 d0                	or     eax,edx
c0011b89:	83 c4 04             	add    esp,0x4
c0011b8c:	c3                   	ret    
c0011b8d:	8d 76 00             	lea    esi,[esi+0x0]

c0011b90 <KeSwitchEndian32(unsigned int)>:
c0011b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b94:	c1 e8 18             	shr    eax,0x18
c0011b97:	89 c2                	mov    edx,eax
c0011b99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b9d:	c1 e0 08             	shl    eax,0x8
c0011ba0:	25 00 00 ff 00       	and    eax,0xff0000
c0011ba5:	09 c2                	or     edx,eax
c0011ba7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bab:	c1 e8 08             	shr    eax,0x8
c0011bae:	25 00 ff 00 00       	and    eax,0xff00
c0011bb3:	09 c2                	or     edx,eax
c0011bb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb9:	c1 e0 18             	shl    eax,0x18
c0011bbc:	09 d0                	or     eax,edx
c0011bbe:	c3                   	ret    
c0011bbf:	90                   	nop

c0011bc0 <EthernetCRC32(unsigned char*, int)>:
c0011bc0:	83 ec 10             	sub    esp,0x10
c0011bc3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011bc8:	75 0a                	jne    c0011bd4 <EthernetCRC32(unsigned char*, int)+0x14>
c0011bca:	b8 00 00 00 00       	mov    eax,0x0
c0011bcf:	e9 8c 00 00 00       	jmp    c0011c60 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bd4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011bd9:	7f 09                	jg     c0011be4 <EthernetCRC32(unsigned char*, int)+0x24>
c0011bdb:	b8 00 00 00 00       	mov    eax,0x0
c0011be0:	eb 7e                	jmp    c0011c60 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011be2:	66 90                	xchg   ax,ax
c0011be4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011bec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011bf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011bf8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011bfc:	7d 5a                	jge    c0011c58 <EthernetCRC32(unsigned char*, int)+0x98>
c0011bfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c06:	01 d0                	add    eax,edx
c0011c08:	8a 00                	mov    al,BYTE PTR [eax]
c0011c0a:	0f b6 c0             	movzx  eax,al
c0011c0d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c19:	8d 76 00             	lea    esi,[esi+0x0]
c0011c1c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c21:	7f 2d                	jg     c0011c50 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c27:	83 e0 01             	and    eax,0x1
c0011c2a:	74 10                	je     c0011c3c <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c30:	d1 e8                	shr    eax,1
c0011c32:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c37:	eb 0b                	jmp    c0011c44 <EthernetCRC32(unsigned char*, int)+0x84>
c0011c39:	8d 76 00             	lea    esi,[esi+0x0]
c0011c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c40:	d1 e8                	shr    eax,1
c0011c42:	66 90                	xchg   ax,ax
c0011c44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c48:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011c4d:	eb cd                	jmp    c0011c1c <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c4f:	90                   	nop
c0011c50:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c55:	eb 9d                	jmp    c0011bf4 <EthernetCRC32(unsigned char*, int)+0x34>
c0011c57:	90                   	nop
c0011c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c5c:	f7 d0                	not    eax
c0011c5e:	66 90                	xchg   ax,ax
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	c3                   	ret    

c0011c64 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c64:	83 ec 2c             	sub    esp,0x2c
c0011c67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c6b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011c70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c7f:	0f b7 c0             	movzx  eax,ax
c0011c82:	3d 06 08 00 00       	cmp    eax,0x806
c0011c87:	75 13                	jne    c0011c9c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011c89:	83 ec 0c             	sub    esp,0xc
c0011c8c:	68 de 0d 02 c0       	push   0xc0020dde
c0011c91:	e8 d9 8c ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0011c96:	83 c4 10             	add    esp,0x10
c0011c99:	eb 25                	jmp    c0011cc0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011c9b:	90                   	nop
c0011c9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ca3:	0f b7 c0             	movzx  eax,ax
c0011ca6:	3d 00 08 00 00       	cmp    eax,0x800
c0011cab:	75 13                	jne    c0011cc0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cad:	83 ec 0c             	sub    esp,0xc
c0011cb0:	68 f4 0d 02 c0       	push   0xc0020df4
c0011cb5:	e8 b5 8c ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0011cba:	83 c4 10             	add    esp,0x10
c0011cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0011cc0:	90                   	nop
c0011cc1:	83 c4 2c             	add    esp,0x2c
c0011cc4:	c3                   	ret    

c0011cc5 <CmOpen(char const*)>:
c0011cc5:	57                   	push   edi
c0011cc6:	56                   	push   esi
c0011cc7:	53                   	push   ebx
c0011cc8:	83 ec 1c             	sub    esp,0x1c
c0011ccb:	6a 30                	push   0x30
c0011ccd:	e8 f9 5d ff ff       	call   c0007acb <malloc>
c0011cd2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cd9:	89 c3                	mov    ebx,eax
c0011cdb:	e8 eb 5d ff ff       	call   c0007acb <malloc>
c0011ce0:	83 c4 0c             	add    esp,0xc
c0011ce3:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011ce9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011ced:	89 c6                	mov    esi,eax
c0011cef:	50                   	push   eax
c0011cf0:	e8 23 92 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0011cf5:	83 c4 0c             	add    esp,0xc
c0011cf8:	89 33                	mov    DWORD PTR [ebx],esi
c0011cfa:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011cfe:	50                   	push   eax
c0011cff:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011d03:	50                   	push   eax
c0011d04:	56                   	push   esi
c0011d05:	e8 76 95 ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c0011d0a:	5a                   	pop    edx
c0011d0b:	59                   	pop    ecx
c0011d0c:	6a 01                	push   0x1
c0011d0e:	ff 33                	push   DWORD PTR [ebx]
c0011d10:	e8 bf 92 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0011d15:	5e                   	pop    esi
c0011d16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d1a:	e8 ac 5d ff ff       	call   c0007acb <malloc>
c0011d1f:	5a                   	pop    edx
c0011d20:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d24:	89 c7                	mov    edi,eax
c0011d26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d28:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d2a:	56                   	push   esi
c0011d2b:	57                   	push   edi
c0011d2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d34:	50                   	push   eax
c0011d35:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d38:	83 c4 14             	add    esp,0x14
c0011d3b:	ff 33                	push   DWORD PTR [ebx]
c0011d3d:	e8 f0 92 ff ff       	call   c000b032 <File::close()>
c0011d42:	59                   	pop    ecx
c0011d43:	58                   	pop    eax
c0011d44:	6a 13                	push   0x13
c0011d46:	ff 33                	push   DWORD PTR [ebx]
c0011d48:	e8 87 92 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0011d4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d51:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d54:	57                   	push   edi
c0011d55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d5d:	50                   	push   eax
c0011d5e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d61:	83 c4 14             	add    esp,0x14
c0011d64:	57                   	push   edi
c0011d65:	e8 71 5d ff ff       	call   c0007adb <free>
c0011d6a:	83 c4 10             	add    esp,0x10
c0011d6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d70:	75 10                	jne    c0011d82 <CmOpen(char const*)+0xbd>
c0011d72:	83 ec 0c             	sub    esp,0xc
c0011d75:	68 09 0e 02 c0       	push   0xc0020e09
c0011d7a:	e8 ba ea ff ff       	call   c0010839 <KePanic(char const*)>
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	50                   	push   eax
c0011d83:	6a 00                	push   0x0
c0011d85:	6a 00                	push   0x0
c0011d87:	ff 33                	push   DWORD PTR [ebx]
c0011d89:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011d8c:	e8 01 93 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d93:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d95:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d98:	57                   	push   edi
c0011d99:	6a 00                	push   0x0
c0011d9b:	6a 2b                	push   0x2b
c0011d9d:	50                   	push   eax
c0011d9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011da1:	83 c4 1c             	add    esp,0x1c
c0011da4:	6a 00                	push   0x0
c0011da6:	6a 00                	push   0x0
c0011da8:	ff 33                	push   DWORD PTR [ebx]
c0011daa:	e8 e3 92 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011daf:	83 c4 0c             	add    esp,0xc
c0011db2:	6a 08                	push   0x8
c0011db4:	68 1a 0e 02 c0       	push   0xc0020e1a
c0011db9:	57                   	push   edi
c0011dba:	e8 c1 e5 fe ff       	call   c0000380 <memcmp>
c0011dbf:	83 c4 10             	add    esp,0x10
c0011dc2:	85 c0                	test   eax,eax
c0011dc4:	74 10                	je     c0011dd6 <CmOpen(char const*)+0x111>
c0011dc6:	83 ec 0c             	sub    esp,0xc
c0011dc9:	68 23 0e 02 c0       	push   0xc0020e23
c0011dce:	e8 66 ea ff ff       	call   c0010839 <KePanic(char const*)>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011dda:	83 c4 10             	add    esp,0x10
c0011ddd:	89 d8                	mov    eax,ebx
c0011ddf:	5b                   	pop    ebx
c0011de0:	5e                   	pop    esi
c0011de1:	5f                   	pop    edi
c0011de2:	c3                   	ret    

c0011de3 <CmClose(Reghive_Tag*)>:
c0011de3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011de7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011deb:	74 0b                	je     c0011df8 <CmClose(Reghive_Tag*)+0x15>
c0011ded:	8b 00                	mov    eax,DWORD PTR [eax]
c0011def:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011df3:	e9 3a 92 ff ff       	jmp    c000b032 <File::close()>
c0011df8:	c3                   	ret    

c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011df9:	53                   	push   ebx
c0011dfa:	83 ec 18             	sub    esp,0x18
c0011dfd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e01:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e05:	74 29                	je     c0011e30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e07:	50                   	push   eax
c0011e08:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e0d:	99                   	cdq    
c0011e0e:	52                   	push   edx
c0011e0f:	50                   	push   eax
c0011e10:	ff 33                	push   DWORD PTR [ebx]
c0011e12:	e8 7b 92 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011e17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e19:	5a                   	pop    edx
c0011e1a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e20:	51                   	push   ecx
c0011e21:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e25:	6a 00                	push   0x0
c0011e27:	6a 2b                	push   0x2b
c0011e29:	50                   	push   eax
c0011e2a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e2d:	83 c4 20             	add    esp,0x20
c0011e30:	83 c4 18             	add    esp,0x18
c0011e33:	5b                   	pop    ebx
c0011e34:	c3                   	ret    

c0011e35 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e35:	55                   	push   ebp
c0011e36:	57                   	push   edi
c0011e37:	56                   	push   esi
c0011e38:	53                   	push   ebx
c0011e39:	31 db                	xor    ebx,ebx
c0011e3b:	83 ec 70             	sub    esp,0x70
c0011e3e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e42:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e49:	50                   	push   eax
c0011e4a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e51:	55                   	push   ebp
c0011e52:	e8 a2 ff ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e5f:	c1 e0 08             	shl    eax,0x8
c0011e62:	89 c2                	mov    edx,eax
c0011e64:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e69:	09 d0                	or     eax,edx
c0011e6b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e70:	c1 e0 08             	shl    eax,0x8
c0011e73:	09 d0                	or     eax,edx
c0011e75:	74 25                	je     c0011e9c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e77:	52                   	push   edx
c0011e78:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e7c:	52                   	push   edx
c0011e7d:	6b fb 0d             	imul   edi,ebx,0xd
c0011e80:	50                   	push   eax
c0011e81:	55                   	push   ebp
c0011e82:	e8 72 ff ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e87:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011e8b:	b9 27 00 00 00       	mov    ecx,0x27
c0011e90:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011e97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e99:	83 c4 10             	add    esp,0x10
c0011e9c:	83 c3 03             	add    ebx,0x3
c0011e9f:	83 fb 15             	cmp    ebx,0x15
c0011ea2:	75 b6                	jne    c0011e5a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011ea4:	83 c4 6c             	add    esp,0x6c
c0011ea7:	5b                   	pop    ebx
c0011ea8:	5e                   	pop    esi
c0011ea9:	5f                   	pop    edi
c0011eaa:	5d                   	pop    ebp
c0011eab:	c3                   	ret    

c0011eac <CmEnterDirectory(Reghive_Tag*, int)>:
c0011eac:	83 ec 40             	sub    esp,0x40
c0011eaf:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011eb3:	50                   	push   eax
c0011eb4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011eb8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ebc:	e8 38 ff ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ec1:	83 c4 10             	add    esp,0x10
c0011ec4:	83 c8 ff             	or     eax,0xffffffff
c0011ec7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011ecc:	75 19                	jne    c0011ee7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011ece:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ed3:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ed8:	c1 e0 08             	shl    eax,0x8
c0011edb:	09 c2                	or     edx,eax
c0011edd:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011ee2:	c1 e0 10             	shl    eax,0x10
c0011ee5:	09 d0                	or     eax,edx
c0011ee7:	83 c4 3c             	add    esp,0x3c
c0011eea:	c3                   	ret    

c0011eeb <CmGetNext(Reghive_Tag*, int)>:
c0011eeb:	83 ec 40             	sub    esp,0x40
c0011eee:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ef2:	50                   	push   eax
c0011ef3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ef7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011efb:	e8 f9 fe ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f00:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f05:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f0a:	c1 e0 08             	shl    eax,0x8
c0011f0d:	09 c2                	or     edx,eax
c0011f0f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f14:	83 c4 4c             	add    esp,0x4c
c0011f17:	c1 e0 10             	shl    eax,0x10
c0011f1a:	09 d0                	or     eax,edx
c0011f1c:	c3                   	ret    

c0011f1d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f1d:	53                   	push   ebx
c0011f1e:	83 ec 18             	sub    esp,0x18
c0011f21:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f25:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f29:	74 29                	je     c0011f54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f2b:	50                   	push   eax
c0011f2c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f31:	99                   	cdq    
c0011f32:	52                   	push   edx
c0011f33:	50                   	push   eax
c0011f34:	ff 33                	push   DWORD PTR [ebx]
c0011f36:	e8 57 91 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011f3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f3d:	5a                   	pop    edx
c0011f3e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f42:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f44:	51                   	push   ecx
c0011f45:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f49:	6a 00                	push   0x0
c0011f4b:	6a 2b                	push   0x2b
c0011f4d:	50                   	push   eax
c0011f4e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f51:	83 c4 20             	add    esp,0x20
c0011f54:	83 c4 18             	add    esp,0x18
c0011f57:	5b                   	pop    ebx
c0011f58:	c3                   	ret    

c0011f59 <CmFreeExtent(Reghive_Tag*, int)>:
c0011f59:	53                   	push   ebx
c0011f5a:	83 ec 3c             	sub    esp,0x3c
c0011f5d:	6a 2b                	push   0x2b
c0011f5f:	6a 00                	push   0x0
c0011f61:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f65:	53                   	push   ebx
c0011f66:	e8 85 e5 fe ff       	call   c00004f0 <memset>
c0011f6b:	83 c4 0c             	add    esp,0xc
c0011f6e:	53                   	push   ebx
c0011f6f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f73:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f77:	e8 a1 ff ff ff       	call   c0011f1d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f7c:	83 c4 48             	add    esp,0x48
c0011f7f:	5b                   	pop    ebx
c0011f80:	c3                   	ret    

c0011f81 <CmUpdateHeader(Reghive_Tag*)>:
c0011f81:	83 ec 0c             	sub    esp,0xc
c0011f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f88:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011f8c:	74 10                	je     c0011f9e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011f8e:	52                   	push   edx
c0011f8f:	8d 50 05             	lea    edx,[eax+0x5]
c0011f92:	52                   	push   edx
c0011f93:	6a 00                	push   0x0
c0011f95:	50                   	push   eax
c0011f96:	e8 82 ff ff ff       	call   c0011f1d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f9b:	83 c4 10             	add    esp,0x10
c0011f9e:	83 c4 0c             	add    esp,0xc
c0011fa1:	c3                   	ret    

c0011fa2 <CmExpand(Reghive_Tag*, int)>:
c0011fa2:	55                   	push   ebp
c0011fa3:	57                   	push   edi
c0011fa4:	83 cf ff             	or     edi,0xffffffff
c0011fa7:	56                   	push   esi
c0011fa8:	53                   	push   ebx
c0011fa9:	83 ec 3c             	sub    esp,0x3c
c0011fac:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011fb0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011fb4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fb8:	74 59                	je     c0012013 <CmExpand(Reghive_Tag*, int)+0x71>
c0011fba:	50                   	push   eax
c0011fbb:	31 d2                	xor    edx,edx
c0011fbd:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011fc1:	31 ff                	xor    edi,edi
c0011fc3:	52                   	push   edx
c0011fc4:	50                   	push   eax
c0011fc5:	ff 33                	push   DWORD PTR [ebx]
c0011fc7:	e8 c6 90 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011fcc:	83 c4 0c             	add    esp,0xc
c0011fcf:	6a 2b                	push   0x2b
c0011fd1:	6a 00                	push   0x0
c0011fd3:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0011fd7:	55                   	push   ebp
c0011fd8:	e8 13 e5 fe ff       	call   c00004f0 <memset>
c0011fdd:	83 c4 10             	add    esp,0x10
c0011fe0:	39 f7                	cmp    edi,esi
c0011fe2:	7d 1b                	jge    c0011fff <CmExpand(Reghive_Tag*, int)+0x5d>
c0011fe4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fe6:	83 ec 0c             	sub    esp,0xc
c0011fe9:	47                   	inc    edi
c0011fea:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011fee:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ff0:	51                   	push   ecx
c0011ff1:	55                   	push   ebp
c0011ff2:	6a 00                	push   0x0
c0011ff4:	6a 2b                	push   0x2b
c0011ff6:	50                   	push   eax
c0011ff7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ffa:	83 c4 20             	add    esp,0x20
c0011ffd:	eb e1                	jmp    c0011fe0 <CmExpand(Reghive_Tag*, int)+0x3e>
c0011fff:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012002:	83 ec 0c             	sub    esp,0xc
c0012005:	01 fe                	add    esi,edi
c0012007:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c001200a:	53                   	push   ebx
c001200b:	e8 71 ff ff ff       	call   c0011f81 <CmUpdateHeader(Reghive_Tag*)>
c0012010:	83 c4 10             	add    esp,0x10
c0012013:	83 c4 3c             	add    esp,0x3c
c0012016:	89 f8                	mov    eax,edi
c0012018:	5b                   	pop    ebx
c0012019:	5e                   	pop    esi
c001201a:	5f                   	pop    edi
c001201b:	5d                   	pop    ebp
c001201c:	c3                   	ret    

c001201d <CmFindUnusedExtent(Reghive_Tag*)>:
c001201d:	55                   	push   ebp
c001201e:	57                   	push   edi
c001201f:	56                   	push   esi
c0012020:	53                   	push   ebx
c0012021:	83 cb ff             	or     ebx,0xffffffff
c0012024:	83 ec 1c             	sub    esp,0x1c
c0012027:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001202b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001202f:	74 68                	je     c0012099 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012031:	51                   	push   ecx
c0012032:	be 2b 00 00 00       	mov    esi,0x2b
c0012037:	6a 00                	push   0x0
c0012039:	31 ff                	xor    edi,edi
c001203b:	6a 00                	push   0x0
c001203d:	31 db                	xor    ebx,ebx
c001203f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012042:	e8 4b 90 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0012047:	83 c4 10             	add    esp,0x10
c001204a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001204d:	76 3b                	jbe    c001208a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001204f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012052:	83 ec 0c             	sub    esp,0xc
c0012055:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012059:	8b 10                	mov    edx,DWORD PTR [eax]
c001205b:	51                   	push   ecx
c001205c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012060:	51                   	push   ecx
c0012061:	6a 00                	push   0x0
c0012063:	6a 01                	push   0x1
c0012065:	50                   	push   eax
c0012066:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012069:	83 c4 20             	add    esp,0x20
c001206c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012071:	74 26                	je     c0012099 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012073:	52                   	push   edx
c0012074:	43                   	inc    ebx
c0012075:	57                   	push   edi
c0012076:	56                   	push   esi
c0012077:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001207a:	e8 13 90 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c001207f:	83 c6 2b             	add    esi,0x2b
c0012082:	83 d7 00             	adc    edi,0x0
c0012085:	83 c4 10             	add    esp,0x10
c0012088:	eb c0                	jmp    c001204a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001208a:	50                   	push   eax
c001208b:	50                   	push   eax
c001208c:	6a 40                	push   0x40
c001208e:	55                   	push   ebp
c001208f:	e8 0e ff ff ff       	call   c0011fa2 <CmExpand(Reghive_Tag*, int)>
c0012094:	83 c4 10             	add    esp,0x10
c0012097:	89 c3                	mov    ebx,eax
c0012099:	83 c4 1c             	add    esp,0x1c
c001209c:	89 d8                	mov    eax,ebx
c001209e:	5b                   	pop    ebx
c001209f:	5e                   	pop    esi
c00120a0:	5f                   	pop    edi
c00120a1:	5d                   	pop    ebp
c00120a2:	c3                   	ret    

c00120a3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00120a3:	55                   	push   ebp
c00120a4:	57                   	push   edi
c00120a5:	56                   	push   esi
c00120a6:	53                   	push   ebx
c00120a7:	81 ec 88 00 00 00    	sub    esp,0x88
c00120ad:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120b4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120bb:	e8 5d ff ff ff       	call   c001201d <CmFindUnusedExtent(Reghive_Tag*)>
c00120c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120c4:	83 c4 0c             	add    esp,0xc
c00120c7:	6a 2b                	push   0x2b
c00120c9:	6a 00                	push   0x0
c00120cb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120cf:	55                   	push   ebp
c00120d0:	e8 1b e4 fe ff       	call   c00004f0 <memset>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	85 db                	test   ebx,ebx
c00120da:	74 12                	je     c00120ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00120dc:	51                   	push   ecx
c00120dd:	55                   	push   ebp
c00120de:	53                   	push   ebx
c00120df:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120e6:	e8 0e fd ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00120eb:	83 c4 10             	add    esp,0x10
c00120ee:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00120f2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00120f9:	b9 2b 00 00 00       	mov    ecx,0x2b
c00120fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012100:	85 db                	test   ebx,ebx
c0012102:	74 49                	je     c001214d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012104:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012109:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001210e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012112:	c1 e0 08             	shl    eax,0x8
c0012115:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001211b:	09 c8                	or     eax,ecx
c001211d:	74 11                	je     c0012130 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001211f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012123:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012127:	c1 e8 10             	shr    eax,0x10
c001212a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001212e:	eb 0f                	jmp    c001213f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012130:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012135:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001213a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001213f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012143:	c1 ea 08             	shr    edx,0x8
c0012146:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001214b:	eb 0f                	jmp    c001215c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001214d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012152:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012157:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001215c:	52                   	push   edx
c001215d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012161:	50                   	push   eax
c0012162:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012166:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001216d:	e8 ab fd ff ff       	call   c0011f1d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012172:	83 c4 10             	add    esp,0x10
c0012175:	85 db                	test   ebx,ebx
c0012177:	74 12                	je     c001218b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012179:	50                   	push   eax
c001217a:	55                   	push   ebp
c001217b:	53                   	push   ebx
c001217c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012183:	e8 95 fd ff ff       	call   c0011f1d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012188:	83 c4 10             	add    esp,0x10
c001218b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001218f:	83 c4 7c             	add    esp,0x7c
c0012192:	5b                   	pop    ebx
c0012193:	5e                   	pop    esi
c0012194:	5f                   	pop    edi
c0012195:	5d                   	pop    ebp
c0012196:	c3                   	ret    

c0012197 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012197:	55                   	push   ebp
c0012198:	57                   	push   edi
c0012199:	56                   	push   esi
c001219a:	53                   	push   ebx
c001219b:	bb 27 00 00 00       	mov    ebx,0x27
c00121a0:	81 ec 88 00 00 00    	sub    esp,0x88
c00121a6:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00121ad:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121b4:	e8 c7 e3 fe ff       	call   c0000580 <strlen>
c00121b9:	8d 48 26             	lea    ecx,[eax+0x26]
c00121bc:	89 c8                	mov    eax,ecx
c00121be:	99                   	cdq    
c00121bf:	f7 fb                	idiv   ebx
c00121c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121c5:	83 c4 10             	add    esp,0x10
c00121c8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121ce:	7e 10                	jle    c00121e0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00121d0:	83 ec 0c             	sub    esp,0xc
c00121d3:	68 34 0e 02 c0       	push   0xc0020e34
c00121d8:	e8 5c e6 ff ff       	call   c0010839 <KePanic(char const*)>
c00121dd:	83 c4 10             	add    esp,0x10
c00121e0:	53                   	push   ebx
c00121e1:	31 ed                	xor    ebp,ebp
c00121e3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00121e7:	53                   	push   ebx
c00121e8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121ef:	57                   	push   edi
c00121f0:	e8 04 fc ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121f5:	83 c4 10             	add    esp,0x10
c00121f8:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00121fc:	89 f0                	mov    eax,esi
c00121fe:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012202:	c1 e0 08             	shl    eax,0x8
c0012205:	09 c6                	or     esi,eax
c0012207:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001220b:	c1 e6 08             	shl    esi,0x8
c001220e:	09 c6                	or     esi,eax
c0012210:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012214:	7e 72                	jle    c0012288 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012216:	85 f6                	test   esi,esi
c0012218:	75 25                	jne    c001223f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001221a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001221f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012223:	50                   	push   eax
c0012224:	6a 00                	push   0x0
c0012226:	6a 00                	push   0x0
c0012228:	57                   	push   edi
c0012229:	e8 75 fe ff ff       	call   c00120a3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001222e:	83 c4 10             	add    esp,0x10
c0012231:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012234:	89 c6                	mov    esi,eax
c0012236:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012239:	c1 f8 10             	sar    eax,0x10
c001223c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001223f:	51                   	push   ecx
c0012240:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012244:	52                   	push   edx
c0012245:	56                   	push   esi
c0012246:	57                   	push   edi
c0012247:	e8 ad fb ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001224c:	83 c4 0c             	add    esp,0xc
c001224f:	6a 27                	push   0x27
c0012251:	6a 00                	push   0x0
c0012253:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012257:	51                   	push   ecx
c0012258:	e8 93 e2 fe ff       	call   c00004f0 <memset>
c001225d:	6b c5 27             	imul   eax,ebp,0x27
c0012260:	83 c4 0c             	add    esp,0xc
c0012263:	6a 27                	push   0x27
c0012265:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001226c:	50                   	push   eax
c001226d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012271:	51                   	push   ecx
c0012272:	e8 19 e4 fe ff       	call   c0000690 <strncpy>
c0012277:	83 c4 0c             	add    esp,0xc
c001227a:	8d 54 24 49          	lea    edx,[esp+0x49]
c001227e:	52                   	push   edx
c001227f:	56                   	push   esi
c0012280:	57                   	push   edi
c0012281:	e8 97 fc ff ff       	call   c0011f1d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012286:	eb 19                	jmp    c00122a1 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012288:	85 f6                	test   esi,esi
c001228a:	74 18                	je     c00122a4 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c001228c:	52                   	push   edx
c001228d:	52                   	push   edx
c001228e:	56                   	push   esi
c001228f:	57                   	push   edi
c0012290:	e8 c4 fc ff ff       	call   c0011f59 <CmFreeExtent(Reghive_Tag*, int)>
c0012295:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012299:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c001229d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00122a1:	83 c4 10             	add    esp,0x10
c00122a4:	45                   	inc    ebp
c00122a5:	83 c3 03             	add    ebx,0x3
c00122a8:	83 fd 07             	cmp    ebp,0x7
c00122ab:	0f 85 47 ff ff ff    	jne    c00121f8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122b1:	50                   	push   eax
c00122b2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122b6:	50                   	push   eax
c00122b7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122be:	57                   	push   edi
c00122bf:	e8 59 fc ff ff       	call   c0011f1d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122c4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122ca:	5b                   	pop    ebx
c00122cb:	5e                   	pop    esi
c00122cc:	5f                   	pop    edi
c00122cd:	5d                   	pop    ebp
c00122ce:	c3                   	ret    

c00122cf <CmGetMatch(char*, char*, bool, bool*)>:
c00122cf:	56                   	push   esi
c00122d0:	53                   	push   ebx
c00122d1:	50                   	push   eax
c00122d2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00122d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122db:	74 25                	je     c0012302 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00122dd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00122e0:	31 db                	xor    ebx,ebx
c00122e2:	50                   	push   eax
c00122e3:	50                   	push   eax
c00122e4:	8d 04 9d 80 22 02 c0 	lea    eax,[ebx*4-0x3ffddd80]
c00122eb:	50                   	push   eax
c00122ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122f0:	e8 8b e4 fe ff       	call   c0000780 <strcmp>
c00122f5:	83 c4 10             	add    esp,0x10
c00122f8:	85 c0                	test   eax,eax
c00122fa:	74 2e                	je     c001232a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00122fc:	43                   	inc    ebx
c00122fd:	83 fb 3f             	cmp    ebx,0x3f
c0012300:	75 e0                	jne    c00122e2 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012302:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012305:	31 db                	xor    ebx,ebx
c0012307:	51                   	push   ecx
c0012308:	51                   	push   ecx
c0012309:	8d 04 9d 80 22 02 c0 	lea    eax,[ebx*4-0x3ffddd80]
c0012310:	50                   	push   eax
c0012311:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012315:	e8 66 e4 fe ff       	call   c0000780 <strcmp>
c001231a:	83 c4 10             	add    esp,0x10
c001231d:	85 c0                	test   eax,eax
c001231f:	74 09                	je     c001232a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012321:	43                   	inc    ebx
c0012322:	83 fb 3f             	cmp    ebx,0x3f
c0012325:	75 e0                	jne    c0012307 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012327:	83 cb ff             	or     ebx,0xffffffff
c001232a:	5a                   	pop    edx
c001232b:	89 d8                	mov    eax,ebx
c001232d:	5b                   	pop    ebx
c001232e:	5e                   	pop    esi
c001232f:	c3                   	ret    

c0012330 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012330:	55                   	push   ebp
c0012331:	31 c0                	xor    eax,eax
c0012333:	57                   	push   edi
c0012334:	56                   	push   esi
c0012335:	53                   	push   ebx
c0012336:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001233a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001233e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012342:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012346:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012348:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001234b:	83 fd 1f             	cmp    ebp,0x1f
c001234e:	7f 0b                	jg     c001235b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012350:	0f b6 c2             	movzx  eax,dl
c0012353:	d3 e0                	shl    eax,cl
c0012355:	09 07                	or     DWORD PTR [edi],eax
c0012357:	b0 01                	mov    al,0x1
c0012359:	01 33                	add    DWORD PTR [ebx],esi
c001235b:	5b                   	pop    ebx
c001235c:	5e                   	pop    esi
c001235d:	5f                   	pop    edi
c001235e:	5d                   	pop    ebp
c001235f:	c3                   	ret    

c0012360 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012360:	57                   	push   edi
c0012361:	56                   	push   esi
c0012362:	53                   	push   ebx
c0012363:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012367:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001236b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001236f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012373:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012375:	7c 17                	jl     c001238e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012377:	8b 17                	mov    edx,DWORD PTR [edi]
c0012379:	b8 01 00 00 00       	mov    eax,0x1
c001237e:	d3 e0                	shl    eax,cl
c0012380:	48                   	dec    eax
c0012381:	21 d0                	and    eax,edx
c0012383:	d3 ea                	shr    edx,cl
c0012385:	89 17                	mov    DWORD PTR [edi],edx
c0012387:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012389:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001238c:	eb 05                	jmp    c0012393 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001238e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012391:	31 c0                	xor    eax,eax
c0012393:	5b                   	pop    ebx
c0012394:	5e                   	pop    esi
c0012395:	5f                   	pop    edi
c0012396:	c3                   	ret    

c0012397 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012397:	83 ec 40             	sub    esp,0x40
c001239a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001239e:	50                   	push   eax
c001239f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123a7:	e8 4d fa ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123ac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123b0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123b4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123b8:	89 10                	mov    DWORD PTR [eax],edx
c00123ba:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123bd:	83 c4 4c             	add    esp,0x4c
c00123c0:	c3                   	ret    

c00123c1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123c1:	55                   	push   ebp
c00123c2:	57                   	push   edi
c00123c3:	56                   	push   esi
c00123c4:	53                   	push   ebx
c00123c5:	83 ec 40             	sub    esp,0x40
c00123c8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123cc:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00123d0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00123d4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00123d8:	53                   	push   ebx
c00123d9:	56                   	push   esi
c00123da:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123de:	e8 16 fa ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123e3:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00123e7:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00123eb:	83 c4 0c             	add    esp,0xc
c00123ee:	53                   	push   ebx
c00123ef:	56                   	push   esi
c00123f0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123f4:	e8 24 fb ff ff       	call   c0011f1d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00123f9:	83 c4 4c             	add    esp,0x4c
c00123fc:	5b                   	pop    ebx
c00123fd:	5e                   	pop    esi
c00123fe:	5f                   	pop    edi
c00123ff:	5d                   	pop    ebp
c0012400:	c3                   	ret    

c0012401 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012401:	55                   	push   ebp
c0012402:	57                   	push   edi
c0012403:	56                   	push   esi
c0012404:	31 f6                	xor    esi,esi
c0012406:	53                   	push   ebx
c0012407:	31 db                	xor    ebx,ebx
c0012409:	83 ec 40             	sub    esp,0x40
c001240c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012414:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001241c:	6a 12                	push   0x12
c001241e:	68 ee 00 00 00       	push   0xee
c0012423:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012427:	e8 c4 e0 fe ff       	call   c00004f0 <memset>
c001242c:	83 c4 10             	add    esp,0x10
c001242f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012433:	6a 08                	push   0x8
c0012435:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012439:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c001243d:	50                   	push   eax
c001243e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012442:	55                   	push   ebp
c0012443:	57                   	push   edi
c0012444:	e8 e7 fe ff ff       	call   c0012330 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012449:	83 c4 10             	add    esp,0x10
c001244c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012450:	50                   	push   eax
c0012451:	6a 06                	push   0x6
c0012453:	55                   	push   ebp
c0012454:	57                   	push   edi
c0012455:	e8 06 ff ff ff       	call   c0012360 <CmGetShift(unsigned int*, int*, int, bool*)>
c001245a:	83 c4 10             	add    esp,0x10
c001245d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012462:	74 07                	je     c001246b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012464:	46                   	inc    esi
c0012465:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012469:	eb e1                	jmp    c001244c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001246b:	43                   	inc    ebx
c001246c:	83 fb 12             	cmp    ebx,0x12
c001246f:	75 c2                	jne    c0012433 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012471:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012475:	31 f6                	xor    esi,esi
c0012477:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001247a:	50                   	push   eax
c001247b:	50                   	push   eax
c001247c:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012481:	46                   	inc    esi
c0012482:	8d 04 85 80 22 02 c0 	lea    eax,[eax*4-0x3ffddd80]
c0012489:	50                   	push   eax
c001248a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001248e:	e8 dd e3 fe ff       	call   c0000870 <strcat>
c0012493:	83 c4 10             	add    esp,0x10
c0012496:	83 fe 18             	cmp    esi,0x18
c0012499:	75 df                	jne    c001247a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001249b:	83 c4 3c             	add    esp,0x3c
c001249e:	31 c0                	xor    eax,eax
c00124a0:	5b                   	pop    ebx
c00124a1:	5e                   	pop    esi
c00124a2:	5f                   	pop    edi
c00124a3:	5d                   	pop    ebp
c00124a4:	c3                   	ret    

c00124a5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00124a5:	83 ec 40             	sub    esp,0x40
c00124a8:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124ac:	50                   	push   eax
c00124ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124b5:	e8 3f f9 ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124ba:	58                   	pop    eax
c00124bb:	5a                   	pop    edx
c00124bc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124c0:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124c4:	50                   	push   eax
c00124c5:	e8 37 ff ff ff       	call   c0012401 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124ca:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124cf:	83 c4 4c             	add    esp,0x4c
c00124d2:	c3                   	ret    

c00124d3 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00124d3:	55                   	push   ebp
c00124d4:	57                   	push   edi
c00124d5:	56                   	push   esi
c00124d6:	53                   	push   ebx
c00124d7:	31 db                	xor    ebx,ebx
c00124d9:	83 ec 70             	sub    esp,0x70
c00124dc:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00124e3:	6a 30                	push   0x30
c00124e5:	6a 00                	push   0x0
c00124e7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00124eb:	56                   	push   esi
c00124ec:	e8 ff df fe ff       	call   c00004f0 <memset>
c00124f1:	83 c4 10             	add    esp,0x10
c00124f4:	83 ec 0c             	sub    esp,0xc
c00124f7:	57                   	push   edi
c00124f8:	e8 83 e0 fe ff       	call   c0000580 <strlen>
c00124fd:	83 c4 10             	add    esp,0x10
c0012500:	39 d8                	cmp    eax,ebx
c0012502:	76 16                	jbe    c001251a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012504:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	50                   	push   eax
c001250c:	e8 4f e4 fe ff       	call   c0000960 <toupper>
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012517:	43                   	inc    ebx
c0012518:	eb da                	jmp    c00124f4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001251a:	52                   	push   edx
c001251b:	31 db                	xor    ebx,ebx
c001251d:	6a 18                	push   0x18
c001251f:	31 ff                	xor    edi,edi
c0012521:	6a 3f                	push   0x3f
c0012523:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012527:	50                   	push   eax
c0012528:	e8 c3 df fe ff       	call   c00004f0 <memset>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012534:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012538:	84 c0                	test   al,al
c001253a:	0f 84 af 00 00 00    	je     c00125ef <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012540:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012544:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012547:	83 ec 0c             	sub    esp,0xc
c001254a:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001254f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012553:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012557:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001255c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012560:	56                   	push   esi
c0012561:	e8 1a e0 fe ff       	call   c0000580 <strlen>
c0012566:	83 c4 10             	add    esp,0x10
c0012569:	85 c0                	test   eax,eax
c001256b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001256f:	74 0b                	je     c001257c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012571:	50                   	push   eax
c0012572:	6a 01                	push   0x1
c0012574:	56                   	push   esi
c0012575:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012579:	50                   	push   eax
c001257a:	eb 0a                	jmp    c0012586 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001257c:	50                   	push   eax
c001257d:	6a 00                	push   0x0
c001257f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012583:	50                   	push   eax
c0012584:	6a 00                	push   0x0
c0012586:	e8 44 fd ff ff       	call   c00122cf <CmGetMatch(char*, char*, bool, bool*)>
c001258b:	83 c4 10             	add    esp,0x10
c001258e:	83 f8 ff             	cmp    eax,0xffffffff
c0012591:	75 1a                	jne    c00125ad <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012593:	83 ec 0c             	sub    esp,0xc
c0012596:	68 49 0e 02 c0       	push   0xc0020e49
c001259b:	e8 99 e2 ff ff       	call   c0010839 <KePanic(char const*)>
c00125a0:	83 c4 10             	add    esp,0x10
c00125a3:	b8 02 00 00 00       	mov    eax,0x2
c00125a8:	e9 bb 00 00 00       	jmp    c0012668 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125ad:	83 ff 18             	cmp    edi,0x18
c00125b0:	75 1a                	jne    c00125cc <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125b2:	83 ec 0c             	sub    esp,0xc
c00125b5:	68 5e 0e 02 c0       	push   0xc0020e5e
c00125ba:	e8 7a e2 ff ff       	call   c0010839 <KePanic(char const*)>
c00125bf:	83 c4 10             	add    esp,0x10
c00125c2:	b8 01 00 00 00       	mov    eax,0x1
c00125c7:	e9 9c 00 00 00       	jmp    c0012668 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125cc:	47                   	inc    edi
c00125cd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125d2:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00125d6:	0f 45 dd             	cmovne ebx,ebp
c00125d9:	83 ec 0c             	sub    esp,0xc
c00125dc:	56                   	push   esi
c00125dd:	e8 9e df fe ff       	call   c0000580 <strlen>
c00125e2:	83 c4 10             	add    esp,0x10
c00125e5:	85 c0                	test   eax,eax
c00125e7:	74 06                	je     c00125ef <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00125e9:	43                   	inc    ebx
c00125ea:	e9 41 ff ff ff       	jmp    c0012530 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00125ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00125f7:	31 db                	xor    ebx,ebx
c00125f9:	31 ff                	xor    edi,edi
c00125fb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012603:	50                   	push   eax
c0012604:	6a 12                	push   0x12
c0012606:	68 ee 00 00 00       	push   0xee
c001260b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012612:	e8 d9 de fe ff       	call   c00004f0 <memset>
c0012617:	83 c4 10             	add    esp,0x10
c001261a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001261e:	83 fb 17             	cmp    ebx,0x17
c0012621:	7e 26                	jle    c0012649 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012623:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012627:	50                   	push   eax
c0012628:	6a 08                	push   0x8
c001262a:	55                   	push   ebp
c001262b:	56                   	push   esi
c001262c:	e8 2f fd ff ff       	call   c0012360 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012631:	83 c4 10             	add    esp,0x10
c0012634:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012639:	74 26                	je     c0012661 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001263b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012642:	4b                   	dec    ebx
c0012643:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012646:	47                   	inc    edi
c0012647:	eb 1c                	jmp    c0012665 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012649:	6a 06                	push   0x6
c001264b:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012650:	50                   	push   eax
c0012651:	55                   	push   ebp
c0012652:	56                   	push   esi
c0012653:	e8 d8 fc ff ff       	call   c0012330 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	84 c0                	test   al,al
c001265d:	75 06                	jne    c0012665 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001265f:	eb c2                	jmp    c0012623 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012661:	31 c0                	xor    eax,eax
c0012663:	eb 03                	jmp    c0012668 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012665:	43                   	inc    ebx
c0012666:	eb b2                	jmp    c001261a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012668:	83 c4 6c             	add    esp,0x6c
c001266b:	5b                   	pop    ebx
c001266c:	5e                   	pop    esi
c001266d:	5f                   	pop    edi
c001266e:	5d                   	pop    ebp
c001266f:	c3                   	ret    

c0012670 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012670:	53                   	push   ebx
c0012671:	83 ec 3c             	sub    esp,0x3c
c0012674:	6a 2b                	push   0x2b
c0012676:	6a 00                	push   0x0
c0012678:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001267c:	53                   	push   ebx
c001267d:	e8 6e de fe ff       	call   c00004f0 <memset>
c0012682:	58                   	pop    eax
c0012683:	5a                   	pop    edx
c0012684:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012688:	50                   	push   eax
c0012689:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001268d:	e8 41 fe ff ff       	call   c00124d3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012692:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012697:	83 c4 0c             	add    esp,0xc
c001269a:	6a 15                	push   0x15
c001269c:	6a 00                	push   0x0
c001269e:	8d 44 24 27          	lea    eax,[esp+0x27]
c00126a2:	50                   	push   eax
c00126a3:	e8 48 de fe ff       	call   c00004f0 <memset>
c00126a8:	53                   	push   ebx
c00126a9:	6a 00                	push   0x0
c00126ab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126af:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126b3:	e8 eb f9 ff ff       	call   c00120a3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126b8:	83 c4 58             	add    esp,0x58
c00126bb:	5b                   	pop    ebx
c00126bc:	c3                   	ret    

c00126bd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126bd:	56                   	push   esi
c00126be:	53                   	push   ebx
c00126bf:	83 ec 48             	sub    esp,0x48
c00126c2:	6a 12                	push   0x12
c00126c4:	68 ff 00 00 00       	push   0xff
c00126c9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126cd:	56                   	push   esi
c00126ce:	e8 1d de fe ff       	call   c00004f0 <memset>
c00126d3:	5a                   	pop    edx
c00126d4:	59                   	pop    ecx
c00126d5:	56                   	push   esi
c00126d6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00126da:	e8 f4 fd ff ff       	call   c00124d3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126df:	83 c4 10             	add    esp,0x10
c00126e2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00126e6:	85 db                	test   ebx,ebx
c00126e8:	74 42                	je     c001272c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00126ea:	50                   	push   eax
c00126eb:	8d 44 24 19          	lea    eax,[esp+0x19]
c00126ef:	50                   	push   eax
c00126f0:	53                   	push   ebx
c00126f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126f5:	e8 ff f6 ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00126fa:	83 c4 0c             	add    esp,0xc
c00126fd:	6a 12                	push   0x12
c00126ff:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012703:	50                   	push   eax
c0012704:	56                   	push   esi
c0012705:	e8 76 dc fe ff       	call   c0000380 <memcmp>
c001270a:	83 c4 10             	add    esp,0x10
c001270d:	85 c0                	test   eax,eax
c001270f:	74 1e                	je     c001272f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012711:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012716:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001271b:	c1 e3 08             	shl    ebx,0x8
c001271e:	09 d8                	or     eax,ebx
c0012720:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012725:	c1 e3 10             	shl    ebx,0x10
c0012728:	09 c3                	or     ebx,eax
c001272a:	eb ba                	jmp    c00126e6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001272c:	83 cb ff             	or     ebx,0xffffffff
c001272f:	83 c4 44             	add    esp,0x44
c0012732:	89 d8                	mov    eax,ebx
c0012734:	5b                   	pop    ebx
c0012735:	5e                   	pop    esi
c0012736:	c3                   	ret    

c0012737 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012737:	57                   	push   edi
c0012738:	56                   	push   esi
c0012739:	53                   	push   ebx
c001273a:	83 ec 34             	sub    esp,0x34
c001273d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012741:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012745:	6a 2b                	push   0x2b
c0012747:	6a 00                	push   0x0
c0012749:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001274d:	53                   	push   ebx
c001274e:	e8 9d dd fe ff       	call   c00004f0 <memset>
c0012753:	58                   	pop    eax
c0012754:	5a                   	pop    edx
c0012755:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012759:	50                   	push   eax
c001275a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001275e:	e8 70 fd ff ff       	call   c00124d3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012763:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012767:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001276b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001276f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012773:	53                   	push   ebx
c0012774:	6a 00                	push   0x0
c0012776:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001277a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001277e:	e8 20 f9 ff ff       	call   c00120a3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012783:	83 c4 50             	add    esp,0x50
c0012786:	5b                   	pop    ebx
c0012787:	5e                   	pop    esi
c0012788:	5f                   	pop    edi
c0012789:	c3                   	ret    

c001278a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001278a:	55                   	push   ebp
c001278b:	57                   	push   edi
c001278c:	56                   	push   esi
c001278d:	53                   	push   ebx
c001278e:	83 ec 40             	sub    esp,0x40
c0012791:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012795:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012799:	6a 2b                	push   0x2b
c001279b:	6a 00                	push   0x0
c001279d:	8d 74 24 11          	lea    esi,[esp+0x11]
c00127a1:	56                   	push   esi
c00127a2:	e8 49 dd fe ff       	call   c00004f0 <memset>
c00127a7:	5f                   	pop    edi
c00127a8:	89 ef                	mov    edi,ebp
c00127aa:	58                   	pop    eax
c00127ab:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127af:	50                   	push   eax
c00127b0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127b4:	e8 1a fd ff ff       	call   c00124d3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127b9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127be:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127c3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127c8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127cd:	83 c4 10             	add    esp,0x10
c00127d0:	85 ed                	test   ebp,ebp
c00127d2:	74 14                	je     c00127e8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127d4:	51                   	push   ecx
c00127d5:	51                   	push   ecx
c00127d6:	57                   	push   edi
c00127d7:	53                   	push   ebx
c00127d8:	e8 0e f7 ff ff       	call   c0011eeb <CmGetNext(Reghive_Tag*, int)>
c00127dd:	83 c4 10             	add    esp,0x10
c00127e0:	85 c0                	test   eax,eax
c00127e2:	74 04                	je     c00127e8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127e4:	89 c7                	mov    edi,eax
c00127e6:	eb e8                	jmp    c00127d0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00127e8:	56                   	push   esi
c00127e9:	6a 00                	push   0x0
c00127eb:	57                   	push   edi
c00127ec:	53                   	push   ebx
c00127ed:	e8 b1 f8 ff ff       	call   c00120a3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127f2:	83 c4 0c             	add    esp,0xc
c00127f5:	56                   	push   esi
c00127f6:	50                   	push   eax
c00127f7:	89 c7                	mov    edi,eax
c00127f9:	53                   	push   ebx
c00127fa:	e8 fa f5 ff ff       	call   c0011df9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127ff:	58                   	pop    eax
c0012800:	5a                   	pop    edx
c0012801:	6a 6c                	push   0x6c
c0012803:	6a 00                	push   0x0
c0012805:	6a 00                	push   0x0
c0012807:	68 6f 0e 02 c0       	push   0xc0020e6f
c001280c:	57                   	push   edi
c001280d:	53                   	push   ebx
c001280e:	e8 24 ff ff ff       	call   c0012737 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012813:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012817:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001281b:	c1 e8 10             	shr    eax,0x10
c001281e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012822:	83 c4 1c             	add    esp,0x1c
c0012825:	56                   	push   esi
c0012826:	57                   	push   edi
c0012827:	53                   	push   ebx
c0012828:	e8 f0 f6 ff ff       	call   c0011f1d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001282d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012832:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012837:	c1 e0 08             	shl    eax,0x8
c001283a:	09 c2                	or     edx,eax
c001283c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012841:	83 c4 4c             	add    esp,0x4c
c0012844:	5b                   	pop    ebx
c0012845:	5e                   	pop    esi
c0012846:	c1 e0 10             	shl    eax,0x10
c0012849:	09 d0                	or     eax,edx
c001284b:	5f                   	pop    edi
c001284c:	5d                   	pop    ebp
c001284d:	c3                   	ret    

c001284e <zStrtok(char*, char const*)>:
c001284e:	55                   	push   ebp
c001284f:	57                   	push   edi
c0012850:	56                   	push   esi
c0012851:	53                   	push   ebx
c0012852:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012856:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001285a:	85 db                	test   ebx,ebx
c001285c:	74 2f                	je     c001288d <zStrtok(char*, char const*)+0x3f>
c001285e:	85 c0                	test   eax,eax
c0012860:	75 09                	jne    c001286b <zStrtok(char*, char const*)+0x1d>
c0012862:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012867:	85 c0                	test   eax,eax
c0012869:	74 50                	je     c00128bb <zStrtok(char*, char const*)+0x6d>
c001286b:	31 c9                	xor    ecx,ecx
c001286d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012871:	74 03                	je     c0012876 <zStrtok(char*, char const*)+0x28>
c0012873:	41                   	inc    ecx
c0012874:	eb f7                	jmp    c001286d <zStrtok(char*, char const*)+0x1f>
c0012876:	31 d2                	xor    edx,edx
c0012878:	39 ca                	cmp    edx,ecx
c001287a:	74 15                	je     c0012891 <zStrtok(char*, char const*)+0x43>
c001287c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012880:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012883:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012886:	39 ee                	cmp    esi,ebp
c0012888:	74 13                	je     c001289d <zStrtok(char*, char const*)+0x4f>
c001288a:	42                   	inc    edx
c001288b:	eb eb                	jmp    c0012878 <zStrtok(char*, char const*)+0x2a>
c001288d:	31 c0                	xor    eax,eax
c001288f:	eb 2a                	jmp    c00128bb <zStrtok(char*, char const*)+0x6d>
c0012891:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c001289b:	eb 1e                	jmp    c00128bb <zStrtok(char*, char const*)+0x6d>
c001289d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00128a0:	39 ce                	cmp    esi,ecx
c00128a2:	75 0a                	jne    c00128ae <zStrtok(char*, char const*)+0x60>
c00128a4:	40                   	inc    eax
c00128a5:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00128aa:	89 d8                	mov    eax,ebx
c00128ac:	eb 0d                	jmp    c00128bb <zStrtok(char*, char const*)+0x6d>
c00128ae:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00128b1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00128b5:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128bb:	5b                   	pop    ebx
c00128bc:	5e                   	pop    esi
c00128bd:	5f                   	pop    edi
c00128be:	5d                   	pop    ebp
c00128bf:	c3                   	ret    

c00128c0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128c0:	57                   	push   edi
c00128c1:	56                   	push   esi
c00128c2:	53                   	push   ebx
c00128c3:	81 ec 08 01 00 00    	sub    esp,0x108
c00128c9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00128d0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00128d7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00128db:	53                   	push   ebx
c00128dc:	e8 6f dd fe ff       	call   c0000650 <strcpy>
c00128e1:	59                   	pop    ecx
c00128e2:	5e                   	pop    esi
c00128e3:	68 d3 11 02 c0       	push   0xc00211d3
c00128e8:	53                   	push   ebx
c00128e9:	bb 01 00 00 00       	mov    ebx,0x1
c00128ee:	e8 5b ff ff ff       	call   c001284e <zStrtok(char*, char const*)>
c00128f3:	83 c4 10             	add    esp,0x10
c00128f6:	85 c0                	test   eax,eax
c00128f8:	74 3b                	je     c0012935 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128fa:	52                   	push   edx
c00128fb:	50                   	push   eax
c00128fc:	6a 01                	push   0x1
c00128fe:	57                   	push   edi
c00128ff:	e8 b9 fd ff ff       	call   c00126bd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012904:	59                   	pop    ecx
c0012905:	5e                   	pop    esi
c0012906:	89 c3                	mov    ebx,eax
c0012908:	68 d3 11 02 c0       	push   0xc00211d3
c001290d:	6a 00                	push   0x0
c001290f:	e8 3a ff ff ff       	call   c001284e <zStrtok(char*, char const*)>
c0012914:	83 c4 10             	add    esp,0x10
c0012917:	85 c0                	test   eax,eax
c0012919:	89 c6                	mov    esi,eax
c001291b:	74 18                	je     c0012935 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001291d:	52                   	push   edx
c001291e:	52                   	push   edx
c001291f:	53                   	push   ebx
c0012920:	57                   	push   edi
c0012921:	e8 86 f5 ff ff       	call   c0011eac <CmEnterDirectory(Reghive_Tag*, int)>
c0012926:	83 c4 10             	add    esp,0x10
c0012929:	83 f8 ff             	cmp    eax,0xffffffff
c001292c:	89 c3                	mov    ebx,eax
c001292e:	74 05                	je     c0012935 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012930:	50                   	push   eax
c0012931:	56                   	push   esi
c0012932:	53                   	push   ebx
c0012933:	eb c9                	jmp    c00128fe <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012935:	81 c4 00 01 00 00    	add    esp,0x100
c001293b:	89 d8                	mov    eax,ebx
c001293d:	5b                   	pop    ebx
c001293e:	5e                   	pop    esi
c001293f:	5f                   	pop    edi
c0012940:	c3                   	ret    

c0012941 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012941:	55                   	push   ebp
c0012942:	57                   	push   edi
c0012943:	56                   	push   esi
c0012944:	53                   	push   ebx
c0012945:	83 ec 5c             	sub    esp,0x5c
c0012948:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001294c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012950:	85 db                	test   ebx,ebx
c0012952:	0f 8e 84 00 00 00    	jle    c00129dc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012958:	57                   	push   edi
c0012959:	31 ed                	xor    ebp,ebp
c001295b:	6a 32                	push   0x32
c001295d:	6a 00                	push   0x0
c001295f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012963:	57                   	push   edi
c0012964:	e8 87 db fe ff       	call   c00004f0 <memset>
c0012969:	83 c4 0c             	add    esp,0xc
c001296c:	57                   	push   edi
c001296d:	53                   	push   ebx
c001296e:	56                   	push   esi
c001296f:	e8 31 fb ff ff       	call   c00124a5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012974:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012978:	83 c4 10             	add    esp,0x10
c001297b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001297f:	7d 13                	jge    c0012994 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012981:	83 ec 0c             	sub    esp,0xc
c0012984:	45                   	inc    ebp
c0012985:	68 44 15 02 c0       	push   0xc0021544
c001298a:	e8 e0 7f ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001298f:	83 c4 10             	add    esp,0x10
c0012992:	eb e7                	jmp    c001297b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012994:	51                   	push   ecx
c0012995:	57                   	push   edi
c0012996:	53                   	push   ebx
c0012997:	68 75 0e 02 c0       	push   0xc0020e75
c001299c:	e8 ce 7f ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00129a1:	83 c4 10             	add    esp,0x10
c00129a4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00129a9:	75 1e                	jne    c00129c9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00129ab:	52                   	push   edx
c00129ac:	52                   	push   edx
c00129ad:	53                   	push   ebx
c00129ae:	56                   	push   esi
c00129af:	e8 f8 f4 ff ff       	call   c0011eac <CmEnterDirectory(Reghive_Tag*, int)>
c00129b4:	83 c4 0c             	add    esp,0xc
c00129b7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129bb:	8d 51 04             	lea    edx,[ecx+0x4]
c00129be:	52                   	push   edx
c00129bf:	50                   	push   eax
c00129c0:	56                   	push   esi
c00129c1:	e8 7b ff ff ff       	call   c0012941 <CmDisplayTree(Reghive_Tag*, int, int)>
c00129c6:	83 c4 10             	add    esp,0x10
c00129c9:	50                   	push   eax
c00129ca:	50                   	push   eax
c00129cb:	53                   	push   ebx
c00129cc:	56                   	push   esi
c00129cd:	e8 19 f5 ff ff       	call   c0011eeb <CmGetNext(Reghive_Tag*, int)>
c00129d2:	83 c4 10             	add    esp,0x10
c00129d5:	89 c3                	mov    ebx,eax
c00129d7:	e9 74 ff ff ff       	jmp    c0012950 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00129dc:	83 c4 5c             	add    esp,0x5c
c00129df:	5b                   	pop    ebx
c00129e0:	5e                   	pop    esi
c00129e1:	5f                   	pop    edi
c00129e2:	5d                   	pop    ebp
c00129e3:	c3                   	ret    

c00129e4 <CmSplitFinalSlashInPlace(char*)>:
c00129e4:	53                   	push   ebx
c00129e5:	83 ec 14             	sub    esp,0x14
c00129e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00129ec:	53                   	push   ebx
c00129ed:	e8 8e db fe ff       	call   c0000580 <strlen>
c00129f2:	83 c4 10             	add    esp,0x10
c00129f5:	48                   	dec    eax
c00129f6:	85 c0                	test   eax,eax
c00129f8:	74 15                	je     c0012a0f <CmSplitFinalSlashInPlace(char*)+0x2b>
c00129fa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00129fe:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012a01:	75 09                	jne    c0012a0c <CmSplitFinalSlashInPlace(char*)+0x28>
c0012a03:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012a06:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a0a:	eb 05                	jmp    c0012a11 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a0c:	48                   	dec    eax
c0012a0d:	eb e7                	jmp    c00129f6 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a0f:	31 c0                	xor    eax,eax
c0012a11:	83 c4 08             	add    esp,0x8
c0012a14:	5b                   	pop    ebx
c0012a15:	c3                   	ret    

c0012a16 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a16:	55                   	push   ebp
c0012a17:	57                   	push   edi
c0012a18:	56                   	push   esi
c0012a19:	53                   	push   ebx
c0012a1a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a20:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012a27:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0012a2a:	8d 43 01             	lea    eax,[ebx+0x1]
c0012a2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a31:	89 f0                	mov    eax,esi
c0012a33:	3c 40                	cmp    al,0x40
c0012a35:	75 1b                	jne    c0012a52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0012a37:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a3a:	85 c0                	test   eax,eax
c0012a3c:	74 08                	je     c0012a46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a3e:	83 f8 3a             	cmp    eax,0x3a
c0012a41:	74 03                	je     c0012a46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012a43:	43                   	inc    ebx
c0012a44:	eb f1                	jmp    c0012a37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0012a46:	85 c0                	test   eax,eax
c0012a48:	0f 84 45 01 00 00    	je     c0012b93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a4e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a51:	43                   	inc    ebx
c0012a52:	50                   	push   eax
c0012a53:	6a 40                	push   0x40
c0012a55:	6a 00                	push   0x0
c0012a57:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a5b:	50                   	push   eax
c0012a5c:	e8 8f da fe ff       	call   c00004f0 <memset>
c0012a61:	89 f1                	mov    ecx,esi
c0012a63:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a6a:	31 c0                	xor    eax,eax
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	0f be f1             	movsx  esi,cl
c0012a72:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012a75:	85 d2                	test   edx,edx
c0012a77:	89 d1                	mov    ecx,edx
c0012a79:	0f 84 14 01 00 00    	je     c0012b93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a7f:	3d c7 00 00 00       	cmp    eax,0xc7
c0012a84:	0f 8f 09 01 00 00    	jg     c0012b93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a8a:	83 fa 0a             	cmp    edx,0xa
c0012a8d:	0f 85 f1 00 00 00    	jne    c0012b84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012a93:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012a98:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012a9d:	89 c8                	mov    eax,ecx
c0012a9f:	a8 df                	test   al,0xdf
c0012aa1:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012aa6:	83 f9 23             	cmp    ecx,0x23
c0012aa9:	0f 94 c2             	sete   dl
c0012aac:	89 d5                	mov    ebp,edx
c0012aae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ab2:	09 ea                	or     edx,ebp
c0012ab4:	80 e2 01             	and    dl,0x1
c0012ab7:	75 47                	jne    c0012b00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012ab9:	83 e8 09             	sub    eax,0x9
c0012abc:	3c 01                	cmp    al,0x1
c0012abe:	76 40                	jbe    c0012b00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012ac0:	83 f9 5b             	cmp    ecx,0x5b
c0012ac3:	75 42                	jne    c0012b07 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012ac5:	83 fe 40             	cmp    esi,0x40
c0012ac8:	75 36                	jne    c0012b00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012aca:	83 ec 0c             	sub    esp,0xc
c0012acd:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012ad1:	55                   	push   ebp
c0012ad2:	e8 a9 da fe ff       	call   c0000580 <strlen>
c0012ad7:	83 c4 10             	add    esp,0x10
c0012ada:	83 f8 3f             	cmp    eax,0x3f
c0012add:	0f 87 b0 00 00 00    	ja     c0012b93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012ae3:	50                   	push   eax
c0012ae4:	50                   	push   eax
c0012ae5:	55                   	push   ebp
c0012ae6:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012aea:	55                   	push   ebp
c0012aeb:	e8 60 db fe ff       	call   c0000650 <strcpy>
c0012af0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012af3:	e8 88 da fe ff       	call   c0000580 <strlen>
c0012af8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012afd:	83 c4 10             	add    esp,0x10
c0012b00:	31 d2                	xor    edx,edx
c0012b02:	e9 84 00 00 00       	jmp    c0012b8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012b07:	83 fe 40             	cmp    esi,0x40
c0012b0a:	74 06                	je     c0012b12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012b0c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b10:	eb 19                	jmp    c0012b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012b12:	51                   	push   ecx
c0012b13:	51                   	push   ecx
c0012b14:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012b18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b1c:	50                   	push   eax
c0012b1d:	e8 5e dc fe ff       	call   c0000780 <strcmp>
c0012b22:	83 c4 10             	add    esp,0x10
c0012b25:	85 c0                	test   eax,eax
c0012b27:	75 d7                	jne    c0012b00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b29:	eb e1                	jmp    c0012b0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012b2b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012b2e:	85 c9                	test   ecx,ecx
c0012b30:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b35:	83 f9 3d             	cmp    ecx,0x3d
c0012b38:	0f 94 c0             	sete   al
c0012b3b:	89 c5                	mov    ebp,eax
c0012b3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b41:	09 e8                	or     eax,ebp
c0012b43:	a8 01                	test   al,0x1
c0012b45:	89 c5                	mov    ebp,eax
c0012b47:	75 03                	jne    c0012b4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012b49:	42                   	inc    edx
c0012b4a:	eb df                	jmp    c0012b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012b4c:	85 c9                	test   ecx,ecx
c0012b4e:	74 43                	je     c0012b93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012b50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b54:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b57:	52                   	push   edx
c0012b58:	52                   	push   edx
c0012b59:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b5d:	50                   	push   eax
c0012b5e:	53                   	push   ebx
c0012b5f:	e8 1c dc fe ff       	call   c0000780 <strcmp>
c0012b64:	83 c4 10             	add    esp,0x10
c0012b67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b6b:	85 c0                	test   eax,eax
c0012b6d:	75 91                	jne    c0012b00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b6f:	50                   	push   eax
c0012b70:	42                   	inc    edx
c0012b71:	50                   	push   eax
c0012b72:	52                   	push   edx
c0012b73:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b7a:	e8 d1 da fe ff       	call   c0000650 <strcpy>
c0012b7f:	83 c4 10             	add    esp,0x10
c0012b82:	eb 11                	jmp    c0012b95 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b84:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012b88:	8d 50 01             	lea    edx,[eax+0x1]
c0012b8b:	47                   	inc    edi
c0012b8c:	89 d0                	mov    eax,edx
c0012b8e:	e9 df fe ff ff       	jmp    c0012a72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012b93:	31 ed                	xor    ebp,ebp
c0012b95:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b9b:	89 e8                	mov    eax,ebp
c0012b9d:	5b                   	pop    ebx
c0012b9e:	5e                   	pop    esi
c0012b9f:	5f                   	pop    edi
c0012ba0:	5d                   	pop    ebp
c0012ba1:	c3                   	ret    

c0012ba2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012ba2:	57                   	push   edi
c0012ba3:	56                   	push   esi
c0012ba4:	53                   	push   ebx
c0012ba5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012bab:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012bb2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012bb9:	53                   	push   ebx
c0012bba:	e8 c1 d9 fe ff       	call   c0000580 <strlen>
c0012bbf:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bc2:	89 c7                	mov    edi,eax
c0012bc4:	e8 b7 d9 fe ff       	call   c0000580 <strlen>
c0012bc9:	83 c4 10             	add    esp,0x10
c0012bcc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012bd0:	3d ff 00 00 00       	cmp    eax,0xff
c0012bd5:	0f 87 d3 00 00 00    	ja     c0012cae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bdb:	57                   	push   edi
c0012bdc:	57                   	push   edi
c0012bdd:	56                   	push   esi
c0012bde:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012be2:	56                   	push   esi
c0012be3:	e8 68 da fe ff       	call   c0000650 <strcpy>
c0012be8:	58                   	pop    eax
c0012be9:	5a                   	pop    edx
c0012bea:	68 d3 11 02 c0       	push   0xc00211d3
c0012bef:	56                   	push   esi
c0012bf0:	e8 7b dc fe ff       	call   c0000870 <strcat>
c0012bf5:	59                   	pop    ecx
c0012bf6:	5f                   	pop    edi
c0012bf7:	53                   	push   ebx
c0012bf8:	56                   	push   esi
c0012bf9:	e8 72 dc fe ff       	call   c0000870 <strcat>
c0012bfe:	58                   	pop    eax
c0012bff:	5a                   	pop    edx
c0012c00:	68 7f 0e 02 c0       	push   0xc0020e7f
c0012c05:	56                   	push   esi
c0012c06:	e8 65 dc fe ff       	call   c0000870 <strcat>
c0012c0b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c12:	e8 b4 4e ff ff       	call   c0007acb <malloc>
c0012c17:	83 c4 0c             	add    esp,0xc
c0012c1a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c20:	56                   	push   esi
c0012c21:	50                   	push   eax
c0012c22:	89 c3                	mov    ebx,eax
c0012c24:	e8 ef 82 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0012c29:	83 c4 10             	add    esp,0x10
c0012c2c:	85 db                	test   ebx,ebx
c0012c2e:	74 7e                	je     c0012cae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c30:	51                   	push   ecx
c0012c31:	51                   	push   ecx
c0012c32:	6a 01                	push   0x1
c0012c34:	53                   	push   ebx
c0012c35:	e8 9a 83 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	85 c0                	test   eax,eax
c0012c3f:	74 08                	je     c0012c49 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c41:	83 ec 0c             	sub    esp,0xc
c0012c44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c46:	53                   	push   ebx
c0012c47:	eb 5f                	jmp    c0012ca8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c49:	52                   	push   edx
c0012c4a:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c4e:	50                   	push   eax
c0012c4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c53:	50                   	push   eax
c0012c54:	53                   	push   ebx
c0012c55:	e8 26 86 ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c0012c5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	89 c1                	mov    ecx,eax
c0012c63:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c67:	74 31                	je     c0012c9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c69:	83 ec 0c             	sub    esp,0xc
c0012c6c:	50                   	push   eax
c0012c6d:	e8 59 4e ff ff       	call   c0007acb <malloc>
c0012c72:	89 c6                	mov    esi,eax
c0012c74:	58                   	pop    eax
c0012c75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c77:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c7b:	52                   	push   edx
c0012c7c:	56                   	push   esi
c0012c7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c85:	53                   	push   ebx
c0012c86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c89:	83 c4 20             	add    esp,0x20
c0012c8c:	85 c0                	test   eax,eax
c0012c8e:	75 0a                	jne    c0012c9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c94:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012c98:	74 18                	je     c0012cb2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012c9a:	83 ec 0c             	sub    esp,0xc
c0012c9d:	53                   	push   ebx
c0012c9e:	e8 8f 83 ff ff       	call   c000b032 <File::close()>
c0012ca3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ca5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ca8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cab:	83 c4 10             	add    esp,0x10
c0012cae:	31 c0                	xor    eax,eax
c0012cb0:	eb 3b                	jmp    c0012ced <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012cb2:	83 ec 0c             	sub    esp,0xc
c0012cb5:	53                   	push   ebx
c0012cb6:	e8 77 83 ff ff       	call   c000b032 <File::close()>
c0012cbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cc0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cc3:	83 c4 0c             	add    esp,0xc
c0012cc6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012ccd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cd4:	56                   	push   esi
c0012cd5:	e8 3c fd ff ff       	call   c0012a16 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012cda:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cdd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012ce1:	e8 f5 4d ff ff       	call   c0007adb <free>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012ced:	81 c4 20 01 00 00    	add    esp,0x120
c0012cf3:	5b                   	pop    ebx
c0012cf4:	5e                   	pop    esi
c0012cf5:	5f                   	pop    edi
c0012cf6:	c3                   	ret    

c0012cf7 <Reg::getLine(char*, char*, char*)>:
c0012cf7:	57                   	push   edi
c0012cf8:	56                   	push   esi
c0012cf9:	53                   	push   ebx
c0012cfa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012cfe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d06:	57                   	push   edi
c0012d07:	56                   	push   esi
c0012d08:	53                   	push   ebx
c0012d09:	68 84 0e 02 c0       	push   0xc0020e84
c0012d0e:	e8 8f fe ff ff       	call   c0012ba2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d13:	83 c4 10             	add    esp,0x10
c0012d16:	84 c0                	test   al,al
c0012d18:	75 10                	jne    c0012d2a <Reg::getLine(char*, char*, char*)+0x33>
c0012d1a:	57                   	push   edi
c0012d1b:	56                   	push   esi
c0012d1c:	53                   	push   ebx
c0012d1d:	68 a9 0e 02 c0       	push   0xc0020ea9
c0012d22:	e8 7b fe ff ff       	call   c0012ba2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	5b                   	pop    ebx
c0012d2b:	5e                   	pop    esi
c0012d2c:	5f                   	pop    edi
c0012d2d:	c3                   	ret    

c0012d2e <Reg::readInt(char*, char*, int*)>:
c0012d2e:	55                   	push   ebp
c0012d2f:	57                   	push   edi
c0012d30:	56                   	push   esi
c0012d31:	53                   	push   ebx
c0012d32:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012d38:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d3c:	55                   	push   ebp
c0012d3d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d44:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d4b:	e8 a7 ff ff ff       	call   c0012cf7 <Reg::getLine(char*, char*, char*)>
c0012d50:	83 c4 10             	add    esp,0x10
c0012d53:	84 c0                	test   al,al
c0012d55:	0f 84 b6 00 00 00    	je     c0012e11 <Reg::readInt(char*, char*, int*)+0xe3>
c0012d5b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d60:	83 fa 2b             	cmp    edx,0x2b
c0012d63:	74 0c                	je     c0012d71 <Reg::readInt(char*, char*, int*)+0x43>
c0012d65:	83 fa 2d             	cmp    edx,0x2d
c0012d68:	75 0e                	jne    c0012d78 <Reg::readInt(char*, char*, int*)+0x4a>
c0012d6a:	ba 01 00 00 00       	mov    edx,0x1
c0012d6f:	eb 0b                	jmp    c0012d7c <Reg::readInt(char*, char*, int*)+0x4e>
c0012d71:	ba 01 00 00 00       	mov    edx,0x1
c0012d76:	eb 02                	jmp    c0012d7a <Reg::readInt(char*, char*, int*)+0x4c>
c0012d78:	31 d2                	xor    edx,edx
c0012d7a:	31 c0                	xor    eax,eax
c0012d7c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012d81:	be 0a 00 00 00       	mov    esi,0xa
c0012d86:	75 21                	jne    c0012da9 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d88:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012d8d:	83 f9 78             	cmp    ecx,0x78
c0012d90:	75 0a                	jne    c0012d9c <Reg::readInt(char*, char*, int*)+0x6e>
c0012d92:	83 c2 02             	add    edx,0x2
c0012d95:	be 10 00 00 00       	mov    esi,0x10
c0012d9a:	eb 0d                	jmp    c0012da9 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d9c:	83 f9 62             	cmp    ecx,0x62
c0012d9f:	75 08                	jne    c0012da9 <Reg::readInt(char*, char*, int*)+0x7b>
c0012da1:	83 c2 02             	add    edx,0x2
c0012da4:	be 02 00 00 00       	mov    esi,0x2
c0012da9:	01 d5                	add    ebp,edx
c0012dab:	31 d2                	xor    edx,edx
c0012dad:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012db1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012db5:	85 c9                	test   ecx,ecx
c0012db7:	0f 94 c3             	sete   bl
c0012dba:	83 f9 0d             	cmp    ecx,0xd
c0012dbd:	89 df                	mov    edi,ebx
c0012dbf:	0f 94 c3             	sete   bl
c0012dc2:	09 df                	or     edi,ebx
c0012dc4:	89 fb                	mov    ebx,edi
c0012dc6:	83 e7 01             	and    edi,0x1
c0012dc9:	75 35                	jne    c0012e00 <Reg::readInt(char*, char*, int*)+0xd2>
c0012dcb:	0f af d6             	imul   edx,esi
c0012dce:	83 fe 10             	cmp    esi,0x10
c0012dd1:	75 26                	jne    c0012df9 <Reg::readInt(char*, char*, int*)+0xcb>
c0012dd3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012dd7:	83 ef 41             	sub    edi,0x41
c0012dda:	89 fb                	mov    ebx,edi
c0012ddc:	80 fb 05             	cmp    bl,0x5
c0012ddf:	77 06                	ja     c0012de7 <Reg::readInt(char*, char*, int*)+0xb9>
c0012de1:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012de5:	eb 16                	jmp    c0012dfd <Reg::readInt(char*, char*, int*)+0xcf>
c0012de7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012deb:	83 eb 61             	sub    ebx,0x61
c0012dee:	80 fb 05             	cmp    bl,0x5
c0012df1:	77 06                	ja     c0012df9 <Reg::readInt(char*, char*, int*)+0xcb>
c0012df3:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012df7:	eb 04                	jmp    c0012dfd <Reg::readInt(char*, char*, int*)+0xcf>
c0012df9:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012dfd:	45                   	inc    ebp
c0012dfe:	eb ad                	jmp    c0012dad <Reg::readInt(char*, char*, int*)+0x7f>
c0012e00:	84 c0                	test   al,al
c0012e02:	74 02                	je     c0012e06 <Reg::readInt(char*, char*, int*)+0xd8>
c0012e04:	f7 da                	neg    edx
c0012e06:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012e0d:	89 10                	mov    DWORD PTR [eax],edx
c0012e0f:	88 d8                	mov    al,bl
c0012e11:	81 c4 ec 00 00 00    	add    esp,0xec
c0012e17:	5b                   	pop    ebx
c0012e18:	5e                   	pop    esi
c0012e19:	5f                   	pop    edi
c0012e1a:	5d                   	pop    ebp
c0012e1b:	c3                   	ret    

c0012e1c <Reg::readString(char*, char*, char*, int)>:
c0012e1c:	57                   	push   edi
c0012e1d:	56                   	push   esi
c0012e1e:	53                   	push   ebx
c0012e1f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012e25:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012e29:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012e30:	57                   	push   edi
c0012e31:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e38:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e3f:	e8 b3 fe ff ff       	call   c0012cf7 <Reg::getLine(char*, char*, char*)>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	84 c0                	test   al,al
c0012e49:	89 c6                	mov    esi,eax
c0012e4b:	74 44                	je     c0012e91 <Reg::readString(char*, char*, char*, int)+0x75>
c0012e4d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e54:	31 c0                	xor    eax,eax
c0012e56:	4a                   	dec    edx
c0012e57:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e5a:	84 c9                	test   cl,cl
c0012e5c:	74 0f                	je     c0012e6d <Reg::readString(char*, char*, char*, int)+0x51>
c0012e5e:	39 c2                	cmp    edx,eax
c0012e60:	7e 0b                	jle    c0012e6d <Reg::readString(char*, char*, char*, int)+0x51>
c0012e62:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e65:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e6a:	40                   	inc    eax
c0012e6b:	eb ea                	jmp    c0012e57 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e6d:	83 ec 0c             	sub    esp,0xc
c0012e70:	53                   	push   ebx
c0012e71:	e8 0a d7 fe ff       	call   c0000580 <strlen>
c0012e76:	83 c4 10             	add    esp,0x10
c0012e79:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e7e:	75 11                	jne    c0012e91 <Reg::readString(char*, char*, char*, int)+0x75>
c0012e80:	83 ec 0c             	sub    esp,0xc
c0012e83:	53                   	push   ebx
c0012e84:	e8 f7 d6 fe ff       	call   c0000580 <strlen>
c0012e89:	83 c4 10             	add    esp,0x10
c0012e8c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e91:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012e97:	89 f0                	mov    eax,esi
c0012e99:	5b                   	pop    ebx
c0012e9a:	5e                   	pop    esi
c0012e9b:	5f                   	pop    edi
c0012e9c:	c3                   	ret    

c0012e9d <Reg::readBool(char*, char*, bool*)>:
c0012e9d:	83 ec 20             	sub    esp,0x20
c0012ea0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ea4:	50                   	push   eax
c0012ea5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ea9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ead:	e8 7c fe ff ff       	call   c0012d2e <Reg::readInt(char*, char*, int*)>
c0012eb2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012eb6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012ebb:	0f 95 02             	setne  BYTE PTR [edx]
c0012ebe:	83 c4 2c             	add    esp,0x2c
c0012ec1:	c3                   	ret    

c0012ec2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012ec2:	53                   	push   ebx
c0012ec3:	83 ec 1c             	sub    esp,0x1c
c0012ec6:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012eca:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012ece:	50                   	push   eax
c0012ecf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed7:	e8 c1 ff ff ff       	call   c0012e9d <Reg::readBool(char*, char*, bool*)>
c0012edc:	83 c4 10             	add    esp,0x10
c0012edf:	84 c0                	test   al,al
c0012ee1:	74 04                	je     c0012ee7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012ee3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012ee7:	83 c4 18             	add    esp,0x18
c0012eea:	88 d8                	mov    al,bl
c0012eec:	5b                   	pop    ebx
c0012eed:	c3                   	ret    

c0012eee <Reg::readIntWithDefault(char*, char*, int)>:
c0012eee:	53                   	push   ebx
c0012eef:	83 ec 1c             	sub    esp,0x1c
c0012ef2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ef6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012efa:	50                   	push   eax
c0012efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f03:	e8 26 fe ff ff       	call   c0012d2e <Reg::readInt(char*, char*, int*)>
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	84 c0                	test   al,al
c0012f0d:	74 04                	je     c0012f13 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f0f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f13:	83 c4 18             	add    esp,0x18
c0012f16:	89 d8                	mov    eax,ebx
c0012f18:	5b                   	pop    ebx
c0012f19:	c3                   	ret    

c0012f1a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012f1a:	57                   	push   edi
c0012f1b:	56                   	push   esi
c0012f1c:	53                   	push   ebx
c0012f1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f21:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f25:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f29:	56                   	push   esi
c0012f2a:	57                   	push   edi
c0012f2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f33:	e8 e4 fe ff ff       	call   c0012e1c <Reg::readString(char*, char*, char*, int)>
c0012f38:	83 c4 10             	add    esp,0x10
c0012f3b:	84 c0                	test   al,al
c0012f3d:	75 16                	jne    c0012f55 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f3f:	50                   	push   eax
c0012f40:	56                   	push   esi
c0012f41:	6a 00                	push   0x0
c0012f43:	57                   	push   edi
c0012f44:	e8 a7 d5 fe ff       	call   c00004f0 <memset>
c0012f49:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f4c:	89 de                	mov    esi,ebx
c0012f4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f50:	83 c4 10             	add    esp,0x10
c0012f53:	89 df                	mov    edi,ebx
c0012f55:	5b                   	pop    ebx
c0012f56:	89 f8                	mov    eax,edi
c0012f58:	5e                   	pop    esi
c0012f59:	5f                   	pop    edi
c0012f5a:	c3                   	ret    

c0012f5b <SysEject(regs*)>:
c0012f5b:	83 ec 0c             	sub    esp,0xc
c0012f5e:	83 ca ff             	or     edx,0xffffffff
c0012f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f65:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f68:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f6d:	83 e9 41             	sub    ecx,0x41
c0012f70:	83 f9 19             	cmp    ecx,0x19
c0012f73:	77 18                	ja     c0012f8d <SysEject(regs*)+0x32>
c0012f75:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f7c:	85 c9                	test   ecx,ecx
c0012f7e:	74 0d                	je     c0012f8d <SysEject(regs*)+0x32>
c0012f80:	83 ec 0c             	sub    esp,0xc
c0012f83:	51                   	push   ecx
c0012f84:	e8 c7 a1 ff ff       	call   c000d150 <LogicalDisk::eject()>
c0012f89:	83 c4 10             	add    esp,0x10
c0012f8c:	99                   	cdq    
c0012f8d:	83 c4 0c             	add    esp,0xc
c0012f90:	c3                   	ret    

c0012f91 <SysExit(regs*)>:
c0012f91:	83 ec 18             	sub    esp,0x18
c0012f94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f98:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f9b:	e8 14 2a 00 00       	call   c00159b4 <terminateTask(int)>
c0012fa0:	83 c8 ff             	or     eax,0xffffffff
c0012fa3:	83 c4 1c             	add    esp,0x1c
c0012fa6:	89 c2                	mov    edx,eax
c0012fa8:	c3                   	ret    

c0012fa9 <SysGetCwd(regs*)>:
c0012fa9:	83 ec 10             	sub    esp,0x10
c0012fac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fb0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012fb3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fbb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012fbe:	e8 25 7d ff ff       	call   c000ace8 <Fs::getcwd(Process*, char*, int)>
c0012fc3:	83 c4 1c             	add    esp,0x1c
c0012fc6:	99                   	cdq    
c0012fc7:	c3                   	ret    

c0012fc8 <SysGetPID(regs*)>:
c0012fc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fd2:	99                   	cdq    
c0012fd3:	c3                   	ret    

c0012fd4 <SysGetRAMData(regs*)>:
c0012fd4:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012fde:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012fe4:	99                   	cdq    
c0012fe5:	f7 f9                	idiv   ecx
c0012fe7:	c1 e0 18             	shl    eax,0x18
c0012fea:	09 c8                	or     eax,ecx
c0012fec:	99                   	cdq    
c0012fed:	c3                   	ret    

c0012fee <SysGetVGAPtr(regs*)>:
c0012fee:	55                   	push   ebp
c0012fef:	57                   	push   edi
c0012ff0:	56                   	push   esi
c0012ff1:	53                   	push   ebx
c0012ff2:	83 ec 18             	sub    esp,0x18
c0012ff5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012ff9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012ffc:	e8 7f 24 00 00       	call   c0015480 <Thr::processFromPID(int)>
c0013001:	83 c4 10             	add    esp,0x10
c0013004:	89 c1                	mov    ecx,eax
c0013006:	b8 01 00 00 00       	mov    eax,0x1
c001300b:	85 c9                	test   ecx,ecx
c001300d:	74 57                	je     c0013066 <SysGetVGAPtr(regs*)+0x78>
c001300f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013013:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013019:	74 0c                	je     c0013027 <SysGetVGAPtr(regs*)+0x39>
c001301b:	83 ec 0c             	sub    esp,0xc
c001301e:	55                   	push   ebp
c001301f:	e8 35 57 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013024:	83 c4 10             	add    esp,0x10
c0013027:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001302a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001302f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013032:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013034:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013037:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001303a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013040:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013043:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013046:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001304c:	50                   	push   eax
c001304d:	50                   	push   eax
c001304e:	68 c4 0e 02 c0       	push   0xc0020ec4
c0013053:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013056:	05 a8 0f 00 00       	add    eax,0xfa8
c001305b:	50                   	push   eax
c001305c:	e8 ef d5 fe ff       	call   c0000650 <strcpy>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	31 c0                	xor    eax,eax
c0013066:	83 c4 0c             	add    esp,0xc
c0013069:	31 d2                	xor    edx,edx
c001306b:	5b                   	pop    ebx
c001306c:	5e                   	pop    esi
c001306d:	5f                   	pop    edi
c001306e:	5d                   	pop    ebp
c001306f:	c3                   	ret    

c0013070 <SysKill(regs*)>:
c0013070:	53                   	push   ebx
c0013071:	83 ec 08             	sub    esp,0x8
c0013074:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013078:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001307c:	75 16                	jne    c0013094 <SysKill(regs*)+0x24>
c001307e:	83 ec 0c             	sub    esp,0xc
c0013081:	68 ce 0e 02 c0       	push   0xc0020ece
c0013086:	e8 ae d7 ff ff       	call   c0010839 <KePanic(char const*)>
c001308b:	83 c4 10             	add    esp,0x10
c001308e:	e9 89 00 00 00       	jmp    c001311c <SysKill(regs*)+0xac>
c0013093:	90                   	nop
c0013094:	83 ec 0c             	sub    esp,0xc
c0013097:	68 84 81 02 c0       	push   0xc0028184
c001309c:	e8 4b bb 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130a1:	8d 76 00             	lea    esi,[esi+0x0]
c00130a4:	83 c4 10             	add    esp,0x10
c00130a7:	85 c0                	test   eax,eax
c00130a9:	74 19                	je     c00130c4 <SysKill(regs*)+0x54>
c00130ab:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130ae:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130b1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130b3:	74 33                	je     c00130e8 <SysKill(regs*)+0x78>
c00130b5:	52                   	push   edx
c00130b6:	52                   	push   edx
c00130b7:	50                   	push   eax
c00130b8:	68 84 81 02 c0       	push   0xc0028184
c00130bd:	e8 4a be 00 00       	call   c001ef0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130c2:	eb e0                	jmp    c00130a4 <SysKill(regs*)+0x34>
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	68 78 81 02 c0       	push   0xc0028178
c00130cc:	e8 1b bb 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130d1:	8d 76 00             	lea    esi,[esi+0x0]
c00130d4:	83 c4 10             	add    esp,0x10
c00130d7:	85 c0                	test   eax,eax
c00130d9:	74 41                	je     c001311c <SysKill(regs*)+0xac>
c00130db:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130e1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130e3:	75 27                	jne    c001310c <SysKill(regs*)+0x9c>
c00130e5:	8d 76 00             	lea    esi,[esi+0x0]
c00130e8:	51                   	push   ecx
c00130e9:	51                   	push   ecx
c00130ea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130f5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00130fb:	e8 d3 db ff ff       	call   c0010cd3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013100:	83 c4 10             	add    esp,0x10
c0013103:	31 c0                	xor    eax,eax
c0013105:	31 d2                	xor    edx,edx
c0013107:	eb 1b                	jmp    c0013124 <SysKill(regs*)+0xb4>
c0013109:	8d 76 00             	lea    esi,[esi+0x0]
c001310c:	52                   	push   edx
c001310d:	52                   	push   edx
c001310e:	50                   	push   eax
c001310f:	68 78 81 02 c0       	push   0xc0028178
c0013114:	e8 f3 bd 00 00       	call   c001ef0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013119:	eb b9                	jmp    c00130d4 <SysKill(regs*)+0x64>
c001311b:	90                   	nop
c001311c:	83 c8 ff             	or     eax,0xffffffff
c001311f:	89 c2                	mov    edx,eax
c0013121:	8d 76 00             	lea    esi,[esi+0x0]
c0013124:	83 c4 08             	add    esp,0x8
c0013127:	5b                   	pop    ebx
c0013128:	c3                   	ret    

c0013129 <SysLoadDLL(regs*)>:
c0013129:	56                   	push   esi
c001312a:	31 d2                	xor    edx,edx
c001312c:	53                   	push   ebx
c001312d:	b8 01 00 00 00       	mov    eax,0x1
c0013132:	51                   	push   ecx
c0013133:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013137:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001313b:	0f 84 8c 00 00 00    	je     c00131cd <SysLoadDLL(regs*)+0xa4>
c0013141:	83 ec 0c             	sub    esp,0xc
c0013144:	68 14 01 00 00       	push   0x114
c0013149:	e8 7d 49 ff ff       	call   c0007acb <malloc>
c001314e:	83 c4 0c             	add    esp,0xc
c0013151:	89 c3                	mov    ebx,eax
c0013153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013158:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001315b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001315e:	53                   	push   ebx
c001315f:	e8 b4 7d ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0013164:	83 c4 10             	add    esp,0x10
c0013167:	31 d2                	xor    edx,edx
c0013169:	85 db                	test   ebx,ebx
c001316b:	b8 02 00 00 00       	mov    eax,0x2
c0013170:	74 5b                	je     c00131cd <SysLoadDLL(regs*)+0xa4>
c0013172:	83 ec 0c             	sub    esp,0xc
c0013175:	53                   	push   ebx
c0013176:	e8 c7 80 ff ff       	call   c000b242 <File::exists()>
c001317b:	83 c4 10             	add    esp,0x10
c001317e:	84 c0                	test   al,al
c0013180:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013182:	75 11                	jne    c0013195 <SysLoadDLL(regs*)+0x6c>
c0013184:	83 ec 0c             	sub    esp,0xc
c0013187:	53                   	push   ebx
c0013188:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001318b:	83 c4 10             	add    esp,0x10
c001318e:	b8 03 00 00 00       	mov    eax,0x3
c0013193:	eb 36                	jmp    c00131cb <SysLoadDLL(regs*)+0xa2>
c0013195:	83 ec 0c             	sub    esp,0xc
c0013198:	53                   	push   ebx
c0013199:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001319c:	58                   	pop    eax
c001319d:	5a                   	pop    edx
c001319e:	6a 00                	push   0x0
c00131a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00131a3:	e8 20 14 00 00       	call   c00145c8 <Thr::loadDLL(char const*, bool)>
c00131a8:	83 c4 10             	add    esp,0x10
c00131ab:	31 d2                	xor    edx,edx
c00131ad:	89 c1                	mov    ecx,eax
c00131af:	b8 04 00 00 00       	mov    eax,0x4
c00131b4:	85 c9                	test   ecx,ecx
c00131b6:	74 15                	je     c00131cd <SysLoadDLL(regs*)+0xa4>
c00131b8:	53                   	push   ebx
c00131b9:	53                   	push   ebx
c00131ba:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00131c0:	51                   	push   ecx
c00131c1:	e8 42 16 00 00       	call   c0014808 <Thr::executeDLL(unsigned long, void*)>
c00131c6:	83 c4 10             	add    esp,0x10
c00131c9:	31 c0                	xor    eax,eax
c00131cb:	31 d2                	xor    edx,edx
c00131cd:	59                   	pop    ecx
c00131ce:	5b                   	pop    ebx
c00131cf:	5e                   	pop    esi
c00131d0:	c3                   	ret    

c00131d1 <SysRead(regs*)>:
c00131d1:	57                   	push   edi
c00131d2:	56                   	push   esi
c00131d3:	53                   	push   ebx
c00131d4:	83 ec 10             	sub    esp,0x10
c00131d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00131db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131de:	83 f8 02             	cmp    eax,0x2
c00131e1:	77 10                	ja     c00131f3 <SysRead(regs*)+0x22>
c00131e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131eb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00131f1:	eb 0e                	jmp    c0013201 <SysRead(regs*)+0x30>
c00131f3:	83 ec 0c             	sub    esp,0xc
c00131f6:	50                   	push   eax
c00131f7:	e8 af 62 ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c00131fc:	83 c4 10             	add    esp,0x10
c00131ff:	89 c1                	mov    ecx,eax
c0013201:	83 c8 ff             	or     eax,0xffffffff
c0013204:	85 c9                	test   ecx,ecx
c0013206:	89 c2                	mov    edx,eax
c0013208:	74 28                	je     c0013232 <SysRead(regs*)+0x61>
c001320a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013212:	83 ec 0c             	sub    esp,0xc
c0013215:	31 ff                	xor    edi,edi
c0013217:	8d 54 24 18          	lea    edx,[esp+0x18]
c001321b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001321d:	52                   	push   edx
c001321e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013221:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013224:	57                   	push   edi
c0013225:	56                   	push   esi
c0013226:	51                   	push   ecx
c0013227:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001322a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001322e:	83 c4 20             	add    esp,0x20
c0013231:	99                   	cdq    
c0013232:	83 c4 10             	add    esp,0x10
c0013235:	5b                   	pop    ebx
c0013236:	5e                   	pop    esi
c0013237:	5f                   	pop    edi
c0013238:	c3                   	ret    

c0013239 <SysRegisterSignal(regs*)>:
c0013239:	83 ec 18             	sub    esp,0x18
c001323c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013240:	6a 00                	push   0x0
c0013242:	6a 00                	push   0x0
c0013244:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013247:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001324a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001324f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013252:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013258:	e8 40 da ff ff       	call   c0010c9d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001325d:	83 c4 2c             	add    esp,0x2c
c0013260:	99                   	cdq    
c0013261:	c3                   	ret    

c0013262 <SysRegistryGetTypeFromPath(regs*)>:
c0013262:	57                   	push   edi
c0013263:	56                   	push   esi
c0013264:	53                   	push   ebx
c0013265:	81 ec 38 01 00 00    	sub    esp,0x138
c001326b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013272:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013275:	68 ef 0e 02 c0       	push   0xc0020eef
c001327a:	e8 f0 76 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001327f:	5a                   	pop    edx
c0013280:	59                   	pop    ecx
c0013281:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013284:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013287:	e8 34 f6 ff ff       	call   c00128c0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001328c:	5f                   	pop    edi
c001328d:	5a                   	pop    edx
c001328e:	89 c6                	mov    esi,eax
c0013290:	50                   	push   eax
c0013291:	68 0f 0f 02 c0       	push   0xc0020f0f
c0013296:	e8 d4 76 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001329b:	83 c4 10             	add    esp,0x10
c001329e:	85 f6                	test   esi,esi
c00132a0:	74 28                	je     c00132ca <SysRegistryGetTypeFromPath(regs*)+0x68>
c00132a2:	50                   	push   eax
c00132a3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00132a7:	57                   	push   edi
c00132a8:	56                   	push   esi
c00132a9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132ac:	e8 f4 f1 ff ff       	call   c00124a5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132b1:	83 c4 0c             	add    esp,0xc
c00132b4:	57                   	push   edi
c00132b5:	50                   	push   eax
c00132b6:	89 c3                	mov    ebx,eax
c00132b8:	68 17 0f 02 c0       	push   0xc0020f17
c00132bd:	e8 ad 76 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00132c2:	89 d8                	mov    eax,ebx
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	99                   	cdq    
c00132c8:	eb 05                	jmp    c00132cf <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00132ca:	83 c8 ff             	or     eax,0xffffffff
c00132cd:	89 c2                	mov    edx,eax
c00132cf:	81 c4 30 01 00 00    	add    esp,0x130
c00132d5:	5b                   	pop    ebx
c00132d6:	5e                   	pop    esi
c00132d7:	5f                   	pop    edi
c00132d8:	c3                   	ret    

c00132d9 <SysRegistryReadExtent(regs*)>:
c00132d9:	83 ec 1c             	sub    esp,0x1c
c00132dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00132e0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00132e3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00132e6:	85 c0                	test   eax,eax
c00132e8:	79 1f                	jns    c0013309 <SysRegistryReadExtent(regs*)+0x30>
c00132ea:	52                   	push   edx
c00132eb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00132f0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00132f4:	52                   	push   edx
c00132f5:	50                   	push   eax
c00132f6:	51                   	push   ecx
c00132f7:	e8 9b f0 ff ff       	call   c0012397 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00132fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013300:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013304:	83 c4 10             	add    esp,0x10
c0013307:	eb 14                	jmp    c001331d <SysRegistryReadExtent(regs*)+0x44>
c0013309:	83 ec 04             	sub    esp,0x4
c001330c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001330f:	50                   	push   eax
c0013310:	51                   	push   ecx
c0013311:	e8 1f eb ff ff       	call   c0011e35 <CmGetString(Reghive_Tag*, int, char*)>
c0013316:	83 c4 10             	add    esp,0x10
c0013319:	31 c0                	xor    eax,eax
c001331b:	31 d2                	xor    edx,edx
c001331d:	83 c4 1c             	add    esp,0x1c
c0013320:	c3                   	ret    

c0013321 <SysRegistryPathToExtentLookup(regs*)>:
c0013321:	53                   	push   ebx
c0013322:	83 ec 10             	sub    esp,0x10
c0013325:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013329:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001332c:	68 2d 0f 02 c0       	push   0xc0020f2d
c0013331:	e8 39 76 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0013336:	58                   	pop    eax
c0013337:	5a                   	pop    edx
c0013338:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001333b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001333e:	e8 7d f5 ff ff       	call   c00128c0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013343:	83 c4 18             	add    esp,0x18
c0013346:	5b                   	pop    ebx
c0013347:	99                   	cdq    
c0013348:	c3                   	ret    

c0013349 <SysRegistryEnterDirectory(regs*)>:
c0013349:	53                   	push   ebx
c001334a:	83 ec 10             	sub    esp,0x10
c001334d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013351:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013354:	68 50 0f 02 c0       	push   0xc0020f50
c0013359:	e8 11 76 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001335e:	58                   	pop    eax
c001335f:	5a                   	pop    edx
c0013360:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013363:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013366:	e8 41 eb ff ff       	call   c0011eac <CmEnterDirectory(Reghive_Tag*, int)>
c001336b:	83 c4 18             	add    esp,0x18
c001336e:	5b                   	pop    ebx
c001336f:	99                   	cdq    
c0013370:	c3                   	ret    

c0013371 <SysRegistryGetNext(regs*)>:
c0013371:	53                   	push   ebx
c0013372:	83 ec 10             	sub    esp,0x10
c0013375:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013379:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001337c:	68 6e 0f 02 c0       	push   0xc0020f6e
c0013381:	e8 e9 75 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0013386:	58                   	pop    eax
c0013387:	5a                   	pop    edx
c0013388:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001338b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001338e:	e8 58 eb ff ff       	call   c0011eeb <CmGetNext(Reghive_Tag*, int)>
c0013393:	83 c4 18             	add    esp,0x18
c0013396:	5b                   	pop    ebx
c0013397:	99                   	cdq    
c0013398:	c3                   	ret    

c0013399 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013399:	57                   	push   edi
c001339a:	56                   	push   esi
c001339b:	53                   	push   ebx
c001339c:	81 ec 34 01 00 00    	sub    esp,0x134
c00133a2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00133a9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00133ad:	57                   	push   edi
c00133ae:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00133b1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133b4:	e8 ec f0 ff ff       	call   c00124a5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133b9:	89 c3                	mov    ebx,eax
c00133bb:	58                   	pop    eax
c00133bc:	5a                   	pop    edx
c00133bd:	57                   	push   edi
c00133be:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00133c1:	e8 8a d2 fe ff       	call   c0000650 <strcpy>
c00133c6:	81 c4 40 01 00 00    	add    esp,0x140
c00133cc:	89 d8                	mov    eax,ebx
c00133ce:	5b                   	pop    ebx
c00133cf:	99                   	cdq    
c00133d0:	5e                   	pop    esi
c00133d1:	5f                   	pop    edi
c00133d2:	c3                   	ret    

c00133d3 <SysRegistryOpen(regs*)>:
c00133d3:	83 ec 18             	sub    esp,0x18
c00133d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133da:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133dd:	e8 e3 e8 ff ff       	call   c0011cc5 <CmOpen(char const*)>
c00133e2:	83 c4 1c             	add    esp,0x1c
c00133e5:	99                   	cdq    
c00133e6:	c3                   	ret    

c00133e7 <SysRegistryClose(regs*)>:
c00133e7:	83 ec 18             	sub    esp,0x18
c00133ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133ee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133f1:	e8 ed e9 ff ff       	call   c0011de3 <CmClose(Reghive_Tag*)>
c00133f6:	31 c0                	xor    eax,eax
c00133f8:	31 d2                	xor    edx,edx
c00133fa:	83 c4 1c             	add    esp,0x1c
c00133fd:	c3                   	ret    

c00133fe <SysSbrk(regs*)>:
c00133fe:	56                   	push   esi
c00133ff:	53                   	push   ebx
c0013400:	50                   	push   eax
c0013401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001340a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001340d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013410:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013416:	85 db                	test   ebx,ebx
c0013418:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001341b:	74 02                	je     c001341f <SysSbrk(regs*)+0x21>
c001341d:	79 06                	jns    c0013425 <SysSbrk(regs*)+0x27>
c001341f:	89 f0                	mov    eax,esi
c0013421:	31 d2                	xor    edx,edx
c0013423:	eb 2a                	jmp    c001344f <SysSbrk(regs*)+0x51>
c0013425:	83 c8 ff             	or     eax,0xffffffff
c0013428:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001342e:	89 c2                	mov    edx,eax
c0013430:	77 1d                	ja     c001344f <SysSbrk(regs*)+0x51>
c0013432:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013438:	50                   	push   eax
c0013439:	68 07 0c 00 00       	push   0xc07
c001343e:	c1 ea 0c             	shr    edx,0xc
c0013441:	52                   	push   edx
c0013442:	51                   	push   ecx
c0013443:	e8 a8 69 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c0013448:	89 f0                	mov    eax,esi
c001344a:	31 d2                	xor    edx,edx
c001344c:	83 c4 10             	add    esp,0x10
c001344f:	59                   	pop    ecx
c0013450:	5b                   	pop    ebx
c0013451:	5e                   	pop    esi
c0013452:	c3                   	ret    

c0013453 <SysSetCwd(regs*)>:
c0013453:	83 ec 14             	sub    esp,0x14
c0013456:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001345a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001345d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013462:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013465:	e8 77 7e ff ff       	call   c000b2e1 <Fs::setcwd(Process*, char*)>
c001346a:	83 c4 1c             	add    esp,0x1c
c001346d:	99                   	cdq    
c001346e:	c3                   	ret    

c001346f <SysSetTime(regs*)>:
c001346f:	55                   	push   ebp
c0013470:	31 c9                	xor    ecx,ecx
c0013472:	57                   	push   edi
c0013473:	bd 0c 00 00 00       	mov    ebp,0xc
c0013478:	56                   	push   esi
c0013479:	53                   	push   ebx
c001347a:	31 db                	xor    ebx,ebx
c001347c:	83 ec 10             	sub    esp,0x10
c001347f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013483:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013486:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013489:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001348c:	89 c2                	mov    edx,eax
c001348e:	c1 e8 05             	shr    eax,0x5
c0013491:	83 e2 1f             	and    edx,0x1f
c0013494:	42                   	inc    edx
c0013495:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001349b:	c1 e7 10             	shl    edi,0x10
c001349e:	88 d1                	mov    cl,dl
c00134a0:	31 d2                	xor    edx,edx
c00134a2:	f7 f5                	div    ebp
c00134a4:	89 dd                	mov    ebp,ebx
c00134a6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00134ac:	88 d5                	mov    ch,dl
c00134ae:	31 d2                	xor    edx,edx
c00134b0:	0f b7 c1             	movzx  eax,cx
c00134b3:	09 f8                	or     eax,edi
c00134b5:	bf 3c 00 00 00       	mov    edi,0x3c
c00134ba:	89 c1                	mov    ecx,eax
c00134bc:	89 f0                	mov    eax,esi
c00134be:	f7 f7                	div    edi
c00134c0:	c1 e2 10             	shl    edx,0x10
c00134c3:	09 d5                	or     ebp,edx
c00134c5:	31 d2                	xor    edx,edx
c00134c7:	f7 f7                	div    edi
c00134c9:	89 eb                	mov    ebx,ebp
c00134cb:	bf 10 0e 00 00       	mov    edi,0xe10
c00134d0:	89 f0                	mov    eax,esi
c00134d2:	88 d7                	mov    bh,dl
c00134d4:	31 d2                	xor    edx,edx
c00134d6:	f7 f7                	div    edi
c00134d8:	bf 18 00 00 00       	mov    edi,0x18
c00134dd:	31 d2                	xor    edx,edx
c00134df:	f7 f7                	div    edi
c00134e1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00134e6:	88 d3                	mov    bl,dl
c00134e8:	53                   	push   ebx
c00134e9:	51                   	push   ecx
c00134ea:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00134f0:	e8 ef 85 ff ff       	call   c000bae4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00134f5:	83 c4 1c             	add    esp,0x1c
c00134f8:	31 d2                	xor    edx,edx
c00134fa:	5b                   	pop    ebx
c00134fb:	5e                   	pop    esi
c00134fc:	83 f0 01             	xor    eax,0x1
c00134ff:	5f                   	pop    edi
c0013500:	0f b6 c0             	movzx  eax,al
c0013503:	5d                   	pop    ebp
c0013504:	c3                   	ret    

c0013505 <SysTimezone(regs*)>:
c0013505:	53                   	push   ebx
c0013506:	83 ec 08             	sub    esp,0x8
c0013509:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001350d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013511:	75 17                	jne    c001352a <SysTimezone(regs*)+0x25>
c0013513:	83 ec 0c             	sub    esp,0xc
c0013516:	68 85 0f 02 c0       	push   0xc0020f85
c001351b:	e8 4f 74 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0013520:	83 c8 ff             	or     eax,0xffffffff
c0013523:	83 c4 10             	add    esp,0x10
c0013526:	89 c2                	mov    edx,eax
c0013528:	eb 20                	jmp    c001354a <SysTimezone(regs*)+0x45>
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	68 9a 0f 02 c0       	push   0xc0020f9a
c0013532:	e8 38 74 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0013537:	58                   	pop    eax
c0013538:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001353b:	e8 08 83 ff ff       	call   c000b848 <User::loadClockSettings(int)>
c0013540:	83 c4 10             	add    esp,0x10
c0013543:	b8 01 00 00 00       	mov    eax,0x1
c0013548:	31 d2                	xor    edx,edx
c001354a:	83 c4 08             	add    esp,0x8
c001354d:	5b                   	pop    ebx
c001354e:	c3                   	ret    

c001354f <SysWrite(regs*)>:
c001354f:	57                   	push   edi
c0013550:	56                   	push   esi
c0013551:	53                   	push   ebx
c0013552:	83 ec 10             	sub    esp,0x10
c0013555:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013559:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001355c:	83 f8 02             	cmp    eax,0x2
c001355f:	77 10                	ja     c0013571 <SysWrite(regs*)+0x22>
c0013561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013566:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013569:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001356f:	eb 0e                	jmp    c001357f <SysWrite(regs*)+0x30>
c0013571:	83 ec 0c             	sub    esp,0xc
c0013574:	50                   	push   eax
c0013575:	e8 31 5f ff ff       	call   c00094ab <getFromFileDescriptor(int)>
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	89 c1                	mov    ecx,eax
c001357f:	83 c8 ff             	or     eax,0xffffffff
c0013582:	85 c9                	test   ecx,ecx
c0013584:	89 c2                	mov    edx,eax
c0013586:	74 28                	je     c00135b0 <SysWrite(regs*)+0x61>
c0013588:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	31 ff                	xor    edi,edi
c0013595:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013599:	8b 01                	mov    eax,DWORD PTR [ecx]
c001359b:	52                   	push   edx
c001359c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001359f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135a2:	57                   	push   edi
c00135a3:	56                   	push   esi
c00135a4:	51                   	push   ecx
c00135a5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135ac:	83 c4 20             	add    esp,0x20
c00135af:	99                   	cdq    
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	5b                   	pop    ebx
c00135b4:	5e                   	pop    esi
c00135b5:	5f                   	pop    edi
c00135b6:	c3                   	ret    

c00135b7 <SysWsbe(regs*)>:
c00135b7:	57                   	push   edi
c00135b8:	b9 0b 00 00 00       	mov    ecx,0xb
c00135bd:	56                   	push   esi
c00135be:	be d9 0f 02 c0       	mov    esi,0xc0020fd9
c00135c3:	53                   	push   ebx
c00135c4:	83 ec 30             	sub    esp,0x30
c00135c7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135cb:	fc                   	cld    
c00135cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135ce:	83 ec 0c             	sub    esp,0xc
c00135d1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00135d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135dd:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00135e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00135e5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00135e8:	57                   	push   edi
c00135e9:	e8 92 cf fe ff       	call   c0000580 <strlen>
c00135ee:	5a                   	pop    edx
c00135ef:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00135f3:	52                   	push   edx
c00135f4:	31 d2                	xor    edx,edx
c00135f6:	57                   	push   edi
c00135f7:	52                   	push   edx
c00135f8:	50                   	push   eax
c00135f9:	56                   	push   esi
c00135fa:	ff d3                	call   ebx
c00135fc:	83 c4 14             	add    esp,0x14
c00135ff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013603:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013606:	e8 a9 23 00 00       	call   c00159b4 <terminateTask(int)>
c001360b:	83 c4 40             	add    esp,0x40
c001360e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013613:	5b                   	pop    ebx
c0013614:	31 d2                	xor    edx,edx
c0013616:	5e                   	pop    esi
c0013617:	5f                   	pop    edi
c0013618:	c3                   	ret    

c0013619 <SysYield(regs*)>:
c0013619:	83 ec 0c             	sub    esp,0xc
c001361c:	fa                   	cli    
c001361d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013623:	e8 0c 1a 00 00       	call   c0015034 <schedule()>
c0013628:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001362d:	48                   	dec    eax
c001362e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013633:	75 01                	jne    c0013636 <SysYield(regs*)+0x1d>
c0013635:	fb                   	sti    
c0013636:	31 c0                	xor    eax,eax
c0013638:	31 d2                	xor    edx,edx
c001363a:	83 c4 0c             	add    esp,0xc
c001363d:	c3                   	ret    

c001363e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001363e:	55                   	push   ebp
c001363f:	57                   	push   edi
c0013640:	56                   	push   esi
c0013641:	53                   	push   ebx
c0013642:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013648:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013653:	74 3b                	je     c0013690 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013655:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001365d:	74 31                	je     c0013690 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001365f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013667:	75 27                	jne    c0013690 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013669:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013670:	05 00 10 00 00       	add    eax,0x1000
c0013675:	89 c2                	mov    edx,eax
c0013677:	25 00 f0 ff ff       	and    eax,0xfffff000
c001367c:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013683:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013689:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013690:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013697:	83 ec 0c             	sub    esp,0xc
c001369a:	6a 01                	push   0x1
c001369c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00136a2:	e8 5e 5f ff ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00136b0:	89 c3                	mov    ebx,eax
c00136b2:	0f 86 26 01 00 00    	jbe    c00137de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00136b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136c0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136c7:	c1 ee 0c             	shr    esi,0xc
c00136ca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136ce:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00136d5:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00136dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00136e0:	29 ef                	sub    edi,ebp
c00136e2:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00136e6:	0f 83 f9 00 00 00    	jae    c00137e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00136ec:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00136f2:	b8 00 10 00 00       	mov    eax,0x1000
c00136f7:	0f 47 f8             	cmova  edi,eax
c00136fa:	83 ec 0c             	sub    esp,0xc
c00136fd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013704:	31 d2                	xor    edx,edx
c0013706:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013708:	8d 44 24 28          	lea    eax,[esp+0x28]
c001370c:	50                   	push   eax
c001370d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013711:	56                   	push   esi
c0013712:	52                   	push   edx
c0013713:	57                   	push   edi
c0013714:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001371b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001371e:	83 c4 20             	add    esp,0x20
c0013721:	85 c0                	test   eax,eax
c0013723:	75 06                	jne    c001372b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013725:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013729:	74 13                	je     c001373e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001372b:	83 ec 0c             	sub    esp,0xc
c001372e:	53                   	push   ebx
c001372f:	e8 e3 61 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c0013734:	83 c4 10             	add    esp,0x10
c0013737:	31 c0                	xor    eax,eax
c0013739:	e9 7c 01 00 00       	jmp    c00138ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001373e:	fa                   	cli    
c001373f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013745:	e8 8c 46 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c001374a:	6a 07                	push   0x7
c001374c:	53                   	push   ebx
c001374d:	50                   	push   eax
c001374e:	89 c7                	mov    edi,eax
c0013750:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013755:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013758:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001375e:	e8 81 65 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013763:	83 c4 0c             	add    esp,0xc
c0013766:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001376d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013773:	6a 00                	push   0x0
c0013775:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001377a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001377d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013783:	e8 c2 63 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c0013788:	58                   	pop    eax
c0013789:	5a                   	pop    edx
c001378a:	68 07 0c 00 00       	push   0xc07
c001378f:	55                   	push   ebp
c0013790:	57                   	push   edi
c0013791:	89 df                	mov    edi,ebx
c0013793:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001379a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137a0:	6a 00                	push   0x0
c00137a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137aa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137b0:	e8 11 69 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00137b5:	b9 00 10 00 00       	mov    ecx,0x1000
c00137ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137c1:	83 c4 20             	add    esp,0x20
c00137c4:	48                   	dec    eax
c00137c5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137ca:	85 c0                	test   eax,eax
c00137cc:	75 01                	jne    c00137cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00137ce:	fb                   	sti    
c00137cf:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00137d3:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137d9:	e9 f0 fe ff ff       	jmp    c00136ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00137de:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137e5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137ec:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00137f2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00137f8:	0f 86 ae 00 00 00    	jbe    c00138ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00137fe:	fa                   	cli    
c00137ff:	51                   	push   ecx
c0013800:	31 ff                	xor    edi,edi
c0013802:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013809:	c1 ee 0c             	shr    esi,0xc
c001380c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013812:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013818:	6a 00                	push   0x0
c001381a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001381f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013822:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013828:	e8 1d 63 ff ff       	call   c0009b4a <VAS::mapOtherVASIn(bool, VAS*)>
c001382d:	83 c4 10             	add    esp,0x10
c0013830:	e8 a1 45 ff ff       	call   c0007dd6 <Phys::allocatePage()>
c0013835:	47                   	inc    edi
c0013836:	6a 07                	push   0x7
c0013838:	53                   	push   ebx
c0013839:	50                   	push   eax
c001383a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001383e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013844:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013847:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001384d:	e8 92 64 ff ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013852:	58                   	pop    eax
c0013853:	5a                   	pop    edx
c0013854:	68 07 0c 00 00       	push   0xc07
c0013859:	55                   	push   ebp
c001385a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013860:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013864:	50                   	push   eax
c0013865:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001386c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013872:	6a 00                	push   0x0
c0013874:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013879:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001387c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013882:	e8 3f 68 ff ff       	call   c000a0c6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013887:	83 c4 1c             	add    esp,0x1c
c001388a:	68 00 10 00 00       	push   0x1000
c001388f:	6a 00                	push   0x0
c0013891:	53                   	push   ebx
c0013892:	e8 59 cc fe ff       	call   c00004f0 <memset>
c0013897:	83 c4 10             	add    esp,0x10
c001389a:	39 fe                	cmp    esi,edi
c001389c:	77 92                	ja     c0013830 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001389e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138a3:	48                   	dec    eax
c00138a4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138a9:	75 01                	jne    c00138ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00138ab:	fb                   	sti    
c00138ac:	83 ec 0c             	sub    esp,0xc
c00138af:	53                   	push   ebx
c00138b0:	e8 62 60 ff ff       	call   c0009917 <Virt::freeKernelVirtualPages(unsigned long)>
c00138b5:	83 c4 10             	add    esp,0x10
c00138b8:	b0 01                	mov    al,0x1
c00138ba:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138c0:	5b                   	pop    ebx
c00138c1:	5e                   	pop    esi
c00138c2:	5f                   	pop    edi
c00138c3:	5d                   	pop    ebp
c00138c4:	c3                   	ret    

c00138c5 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138c5:	55                   	push   ebp
c00138c6:	57                   	push   edi
c00138c7:	56                   	push   esi
c00138c8:	53                   	push   ebx
c00138c9:	83 ec 48             	sub    esp,0x48
c00138cc:	68 14 01 00 00       	push   0x114
c00138d1:	e8 f5 41 ff ff       	call   c0007acb <malloc>
c00138d6:	83 c4 0c             	add    esp,0xc
c00138d9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00138dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00138e1:	89 c7                	mov    edi,eax
c00138e3:	50                   	push   eax
c00138e4:	e8 2f 76 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c00138e9:	58                   	pop    eax
c00138ea:	5a                   	pop    edx
c00138eb:	6a 01                	push   0x1
c00138ed:	57                   	push   edi
c00138ee:	e8 e1 76 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c00138f3:	83 c4 10             	add    esp,0x10
c00138f6:	85 c0                	test   eax,eax
c00138f8:	0f 85 4c 01 00 00    	jne    c0013a4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138fe:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013906:	83 ec 0c             	sub    esp,0xc
c0013909:	6a 34                	push   0x34
c001390b:	e8 bb 41 ff ff       	call   c0007acb <malloc>
c0013910:	89 c3                	mov    ebx,eax
c0013912:	58                   	pop    eax
c0013913:	8b 07                	mov    eax,DWORD PTR [edi]
c0013915:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013919:	56                   	push   esi
c001391a:	53                   	push   ebx
c001391b:	6a 00                	push   0x0
c001391d:	6a 34                	push   0x34
c001391f:	57                   	push   edi
c0013920:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013923:	83 c4 20             	add    esp,0x20
c0013926:	85 c0                	test   eax,eax
c0013928:	0f 85 1c 01 00 00    	jne    c0013a4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001392e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013934:	0f 85 10 01 00 00    	jne    c0013a4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001393a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001393d:	85 c0                	test   eax,eax
c001393f:	0f 84 05 01 00 00    	je     c0013a4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013945:	31 d2                	xor    edx,edx
c0013947:	55                   	push   ebp
c0013948:	52                   	push   edx
c0013949:	50                   	push   eax
c001394a:	57                   	push   edi
c001394b:	e8 42 77 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013950:	83 c4 10             	add    esp,0x10
c0013953:	85 c0                	test   eax,eax
c0013955:	0f 85 ef 00 00 00    	jne    c0013a4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001395b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001395e:	83 ec 0c             	sub    esp,0xc
c0013961:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013965:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013969:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001396d:	0f af c2             	imul   eax,edx
c0013970:	50                   	push   eax
c0013971:	e8 55 41 ff ff       	call   c0007acb <malloc>
c0013976:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013978:	89 34 24             	mov    DWORD PTR [esp],esi
c001397b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001397f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013983:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013987:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001398b:	0f af c2             	imul   eax,edx
c001398e:	99                   	cdq    
c001398f:	52                   	push   edx
c0013990:	50                   	push   eax
c0013991:	57                   	push   edi
c0013992:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013995:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013998:	83 c4 20             	add    esp,0x20
c001399b:	85 c0                	test   eax,eax
c001399d:	0f 84 a7 00 00 00    	je     c0013a4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00139a3:	31 d2                	xor    edx,edx
c00139a5:	51                   	push   ecx
c00139a6:	52                   	push   edx
c00139a7:	50                   	push   eax
c00139a8:	57                   	push   edi
c00139a9:	e8 e4 76 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c00139ae:	83 c4 10             	add    esp,0x10
c00139b1:	85 c0                	test   eax,eax
c00139b3:	0f 85 91 00 00 00    	jne    c0013a4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00139b9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139bd:	83 ec 0c             	sub    esp,0xc
c00139c0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139c4:	0f af c2             	imul   eax,edx
c00139c7:	50                   	push   eax
c00139c8:	e8 fe 40 ff ff       	call   c0007acb <malloc>
c00139cd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00139cf:	89 34 24             	mov    DWORD PTR [esp],esi
c00139d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139da:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139de:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139e2:	0f af c2             	imul   eax,edx
c00139e5:	99                   	cdq    
c00139e6:	52                   	push   edx
c00139e7:	50                   	push   eax
c00139e8:	57                   	push   edi
c00139e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139ec:	83 c4 20             	add    esp,0x20
c00139ef:	31 c9                	xor    ecx,ecx
c00139f1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139f9:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00139fd:	0f b7 e9             	movzx  ebp,cx
c0013a00:	0f 83 86 00 00 00    	jae    c0013a8c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013a06:	c1 e5 05             	shl    ebp,0x5
c0013a09:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013a0d:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013a11:	75 73                	jne    c0013a86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013a13:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013a1a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013a1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a21:	52                   	push   edx
c0013a22:	31 d2                	xor    edx,edx
c0013a24:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013a27:	52                   	push   edx
c0013a28:	50                   	push   eax
c0013a29:	57                   	push   edi
c0013a2a:	e8 63 76 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013a2f:	83 c4 10             	add    esp,0x10
c0013a32:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a36:	85 c0                	test   eax,eax
c0013a38:	74 17                	je     c0013a51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013a3a:	83 ec 0c             	sub    esp,0xc
c0013a3d:	68 05 10 02 c0       	push   0xc0021005
c0013a42:	e8 28 6f ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0013a47:	83 c4 10             	add    esp,0x10
c0013a4a:	31 c0                	xor    eax,eax
c0013a4c:	e9 8b 00 00 00       	jmp    c0013adc <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013a51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a55:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013a58:	83 ec 0c             	sub    esp,0xc
c0013a5b:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013a5e:	50                   	push   eax
c0013a5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a63:	56                   	push   esi
c0013a64:	57                   	push   edi
c0013a65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a69:	e8 d0 fb ff ff       	call   c001363e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a6e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013a72:	83 c4 20             	add    esp,0x20
c0013a75:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013a79:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a7d:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013a82:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013a86:	41                   	inc    ecx
c0013a87:	e9 6d ff ff ff       	jmp    c00139f9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013a8c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013a90:	83 ec 0c             	sub    esp,0xc
c0013a93:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013a97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a9b:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013aa1:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013aa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013aac:	05 00 10 00 00       	add    eax,0x1000
c0013ab1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ab8:	e8 1e 40 ff ff       	call   c0007adb <free>
c0013abd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ac0:	e8 16 40 ff ff       	call   c0007adb <free>
c0013ac5:	58                   	pop    eax
c0013ac6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013aca:	e8 0c 40 ff ff       	call   c0007adb <free>
c0013acf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ad2:	e8 5b 75 ff ff       	call   c000b032 <File::close()>
c0013ad7:	83 c4 10             	add    esp,0x10
c0013ada:	b0 01                	mov    al,0x1
c0013adc:	83 c4 3c             	add    esp,0x3c
c0013adf:	5b                   	pop    ebx
c0013ae0:	5e                   	pop    esi
c0013ae1:	5f                   	pop    edi
c0013ae2:	5d                   	pop    ebp
c0013ae3:	c3                   	ret    

c0013ae4 <Thr::runtimeReferenceHelper()>:
c0013ae4:	83 ec 18             	sub    esp,0x18
c0013ae7:	68 0d 10 02 c0       	push   0xc002100d
c0013aec:	e8 7e 6e ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0013af1:	fa                   	cli    
c0013af2:	83 c4 10             	add    esp,0x10
c0013af5:	eb fe                	jmp    c0013af5 <Thr::runtimeReferenceHelper()+0x11>

c0013af7 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013af7:	57                   	push   edi
c0013af8:	56                   	push   esi
c0013af9:	53                   	push   ebx
c0013afa:	31 db                	xor    ebx,ebx
c0013afc:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013b02:	7e 3c                	jle    c0013b40 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013b04:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b0b:	31 ff                	xor    edi,edi
c0013b0d:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b14:	7e 27                	jle    c0013b3d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b16:	50                   	push   eax
c0013b17:	50                   	push   eax
c0013b18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b1c:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b1e:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b25:	50                   	push   eax
c0013b26:	e8 55 cc fe ff       	call   c0000780 <strcmp>
c0013b2b:	83 c4 10             	add    esp,0x10
c0013b2e:	85 c0                	test   eax,eax
c0013b30:	75 05                	jne    c0013b37 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b32:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b35:	eb 0b                	jmp    c0013b42 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b37:	83 c6 10             	add    esi,0x10
c0013b3a:	47                   	inc    edi
c0013b3b:	eb d0                	jmp    c0013b0d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b3d:	43                   	inc    ebx
c0013b3e:	eb bc                	jmp    c0013afc <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b40:	31 c0                	xor    eax,eax
c0013b42:	5b                   	pop    ebx
c0013b43:	5e                   	pop    esi
c0013b44:	5f                   	pop    edi
c0013b45:	c3                   	ret    

c0013b46 <Thr::loadKernelSymbolTable(char const*)>:
c0013b46:	55                   	push   ebp
c0013b47:	57                   	push   edi
c0013b48:	56                   	push   esi
c0013b49:	53                   	push   ebx
c0013b4a:	83 ec 68             	sub    esp,0x68
c0013b4d:	68 14 01 00 00       	push   0x114
c0013b52:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b58:	e8 6e 3f ff ff       	call   c0007acb <malloc>
c0013b5d:	83 c4 0c             	add    esp,0xc
c0013b60:	56                   	push   esi
c0013b61:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b65:	89 c3                	mov    ebx,eax
c0013b67:	50                   	push   eax
c0013b68:	e8 ab 73 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0013b6d:	5e                   	pop    esi
c0013b6e:	5f                   	pop    edi
c0013b6f:	6a 01                	push   0x1
c0013b71:	53                   	push   ebx
c0013b72:	e8 5d 74 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0013b77:	83 c4 10             	add    esp,0x10
c0013b7a:	85 c0                	test   eax,eax
c0013b7c:	74 0a                	je     c0013b88 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b7e:	83 ec 0c             	sub    esp,0xc
c0013b81:	68 2f 10 02 c0       	push   0xc002102f
c0013b86:	eb 34                	jmp    c0013bbc <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b88:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013b90:	83 ec 0c             	sub    esp,0xc
c0013b93:	6a 34                	push   0x34
c0013b95:	e8 31 3f ff ff       	call   c0007acb <malloc>
c0013b9a:	59                   	pop    ecx
c0013b9b:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013b9f:	89 c7                	mov    edi,eax
c0013ba1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba3:	56                   	push   esi
c0013ba4:	57                   	push   edi
c0013ba5:	6a 00                	push   0x0
c0013ba7:	6a 34                	push   0x34
c0013ba9:	53                   	push   ebx
c0013baa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bad:	83 c4 20             	add    esp,0x20
c0013bb0:	85 c0                	test   eax,eax
c0013bb2:	74 17                	je     c0013bcb <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013bb4:	83 ec 0c             	sub    esp,0xc
c0013bb7:	68 46 10 02 c0       	push   0xc0021046
c0013bbc:	e8 78 cc ff ff       	call   c0010839 <KePanic(char const*)>
c0013bc1:	83 c4 10             	add    esp,0x10
c0013bc4:	31 c0                	xor    eax,eax
c0013bc6:	e9 31 02 00 00       	jmp    c0013dfc <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013bcb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013bd1:	75 e1                	jne    c0013bb4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bd3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013bd6:	85 c0                	test   eax,eax
c0013bd8:	74 da                	je     c0013bb4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bda:	52                   	push   edx
c0013bdb:	31 d2                	xor    edx,edx
c0013bdd:	52                   	push   edx
c0013bde:	50                   	push   eax
c0013bdf:	53                   	push   ebx
c0013be0:	e8 ad 74 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013be5:	83 c4 10             	add    esp,0x10
c0013be8:	85 c0                	test   eax,eax
c0013bea:	75 c8                	jne    c0013bb4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bec:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	31 ed                	xor    ebp,ebp
c0013bf5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bf9:	0f af c2             	imul   eax,edx
c0013bfc:	50                   	push   eax
c0013bfd:	e8 c9 3e ff ff       	call   c0007acb <malloc>
c0013c02:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013c04:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c0f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c13:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c17:	0f af c2             	imul   eax,edx
c0013c1a:	99                   	cdq    
c0013c1b:	52                   	push   edx
c0013c1c:	50                   	push   eax
c0013c1d:	53                   	push   ebx
c0013c1e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c21:	83 c4 20             	add    esp,0x20
c0013c24:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c2c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c44:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013c48:	0f b7 f5             	movzx  esi,bp
c0013c4b:	0f 83 a7 00 00 00    	jae    c0013cf8 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c51:	6b f6 28             	imul   esi,esi,0x28
c0013c54:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013c58:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c5f:	50                   	push   eax
c0013c60:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c68:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c6a:	6b c0 28             	imul   eax,eax,0x28
c0013c6d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c71:	89 d0                	mov    eax,edx
c0013c73:	31 d2                	xor    edx,edx
c0013c75:	52                   	push   edx
c0013c76:	50                   	push   eax
c0013c77:	53                   	push   ebx
c0013c78:	e8 15 74 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013c7d:	83 c4 0c             	add    esp,0xc
c0013c80:	6a 20                	push   0x20
c0013c82:	6a 00                	push   0x0
c0013c84:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c88:	52                   	push   edx
c0013c89:	e8 62 c8 fe ff       	call   c00004f0 <memset>
c0013c8e:	58                   	pop    eax
c0013c8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c91:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013c95:	51                   	push   ecx
c0013c96:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013c9a:	52                   	push   edx
c0013c9b:	6a 00                	push   0x0
c0013c9d:	6a 1f                	push   0x1f
c0013c9f:	53                   	push   ebx
c0013ca0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ca3:	83 c4 18             	add    esp,0x18
c0013ca6:	68 5d 10 02 c0       	push   0xc002105d
c0013cab:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013caf:	52                   	push   edx
c0013cb0:	e8 cb ca fe ff       	call   c0000780 <strcmp>
c0013cb5:	83 c4 10             	add    esp,0x10
c0013cb8:	85 c0                	test   eax,eax
c0013cba:	75 0f                	jne    c0013ccb <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013cbc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ccb:	50                   	push   eax
c0013ccc:	50                   	push   eax
c0013ccd:	68 65 10 02 c0       	push   0xc0021065
c0013cd2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013cd6:	50                   	push   eax
c0013cd7:	e8 a4 ca fe ff       	call   c0000780 <strcmp>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	85 c0                	test   eax,eax
c0013ce1:	75 0f                	jne    c0013cf2 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013ce3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ce6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cf2:	45                   	inc    ebp
c0013cf3:	e9 4c ff ff ff       	jmp    c0013c44 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013cf8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013cfd:	75 10                	jne    c0013d0f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013cff:	83 ec 0c             	sub    esp,0xc
c0013d02:	68 6d 10 02 c0       	push   0xc002106d
c0013d07:	e8 2d cb ff ff       	call   c0010839 <KePanic(char const*)>
c0013d0c:	83 c4 10             	add    esp,0x10
c0013d0f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d14:	75 10                	jne    c0013d26 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013d16:	83 ec 0c             	sub    esp,0xc
c0013d19:	68 6d 10 02 c0       	push   0xc002106d
c0013d1e:	e8 16 cb ff ff       	call   c0010839 <KePanic(char const*)>
c0013d23:	83 c4 10             	add    esp,0x10
c0013d26:	50                   	push   eax
c0013d27:	31 d2                	xor    edx,edx
c0013d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2d:	52                   	push   edx
c0013d2e:	50                   	push   eax
c0013d2f:	53                   	push   ebx
c0013d30:	e8 5d 73 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013d35:	5a                   	pop    edx
c0013d36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d3a:	e8 8c 3d ff ff       	call   c0007acb <malloc>
c0013d3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d43:	31 c9                	xor    ecx,ecx
c0013d45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d4b:	5e                   	pop    esi
c0013d4c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d50:	55                   	push   ebp
c0013d51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d55:	51                   	push   ecx
c0013d56:	52                   	push   edx
c0013d57:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d5b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d5f:	53                   	push   ebx
c0013d60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d63:	83 c4 14             	add    esp,0x14
c0013d66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d6a:	e8 5c 3d ff ff       	call   c0007acb <malloc>
c0013d6f:	89 c6                	mov    esi,eax
c0013d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d76:	56                   	push   esi
c0013d77:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d7b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d7f:	51                   	push   ecx
c0013d80:	52                   	push   edx
c0013d81:	53                   	push   ebx
c0013d82:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d89:	83 c4 1c             	add    esp,0x1c
c0013d8c:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013d92:	c1 e8 04             	shr    eax,0x4
c0013d95:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013d9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013da0:	31 d2                	xor    edx,edx
c0013da2:	52                   	push   edx
c0013da3:	50                   	push   eax
c0013da4:	53                   	push   ebx
c0013da5:	e8 e8 72 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013daa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013dac:	31 d2                	xor    edx,edx
c0013dae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013db1:	56                   	push   esi
c0013db2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013db6:	52                   	push   edx
c0013db7:	50                   	push   eax
c0013db8:	53                   	push   ebx
c0013db9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013dbc:	83 c4 14             	add    esp,0x14
c0013dbf:	53                   	push   ebx
c0013dc0:	e8 6d 72 ff ff       	call   c000b032 <File::close()>
c0013dc5:	5d                   	pop    ebp
c0013dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013dca:	e8 0c 3d ff ff       	call   c0007adb <free>
c0013dcf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013dd2:	e8 04 3d ff ff       	call   c0007adb <free>
c0013dd7:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013ddc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013de0:	83 c4 10             	add    esp,0x10
c0013de3:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013dea:	8d 50 01             	lea    edx,[eax+0x1]
c0013ded:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013df4:	b0 01                	mov    al,0x1
c0013df6:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013dfc:	83 c4 5c             	add    esp,0x5c
c0013dff:	5b                   	pop    ebx
c0013e00:	5e                   	pop    esi
c0013e01:	5f                   	pop    edi
c0013e02:	5d                   	pop    ebp
c0013e03:	c3                   	ret    

c0013e04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e04:	55                   	push   ebp
c0013e05:	57                   	push   edi
c0013e06:	56                   	push   esi
c0013e07:	53                   	push   ebx
c0013e08:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e0e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e15:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013e1b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0013e1f:	68 14 01 00 00       	push   0x114
c0013e24:	e8 a2 3c ff ff       	call   c0007acb <malloc>
c0013e29:	83 c4 0c             	add    esp,0xc
c0013e2c:	56                   	push   esi
c0013e2d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e34:	50                   	push   eax
c0013e35:	89 c3                	mov    ebx,eax
c0013e37:	e8 dc 70 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0013e3c:	5f                   	pop    edi
c0013e3d:	5d                   	pop    ebp
c0013e3e:	6a 01                	push   0x1
c0013e40:	53                   	push   ebx
c0013e41:	e8 8e 71 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	85 c0                	test   eax,eax
c0013e4b:	0f 85 b3 06 00 00    	jne    c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e51:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e59:	83 ec 0c             	sub    esp,0xc
c0013e5c:	6a 34                	push   0x34
c0013e5e:	e8 68 3c ff ff       	call   c0007acb <malloc>
c0013e63:	5e                   	pop    esi
c0013e64:	8d 74 24 54          	lea    esi,[esp+0x54]
c0013e68:	89 c5                	mov    ebp,eax
c0013e6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e6c:	56                   	push   esi
c0013e6d:	55                   	push   ebp
c0013e6e:	6a 00                	push   0x0
c0013e70:	6a 34                	push   0x34
c0013e72:	53                   	push   ebx
c0013e73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e76:	83 c4 20             	add    esp,0x20
c0013e79:	85 c0                	test   eax,eax
c0013e7b:	0f 85 83 06 00 00    	jne    c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e81:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013e88:	0f 85 76 06 00 00    	jne    c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e8e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013e91:	85 c0                	test   eax,eax
c0013e93:	0f 84 6b 06 00 00    	je     c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013e99:	31 d2                	xor    edx,edx
c0013e9b:	51                   	push   ecx
c0013e9c:	52                   	push   edx
c0013e9d:	50                   	push   eax
c0013e9e:	53                   	push   ebx
c0013e9f:	e8 ee 71 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013ea4:	83 c4 10             	add    esp,0x10
c0013ea7:	85 c0                	test   eax,eax
c0013ea9:	0f 85 55 06 00 00    	jne    c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013eaf:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013eb2:	83 ec 0c             	sub    esp,0xc
c0013eb5:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013eb9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013ebd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013ec1:	0f af c2             	imul   eax,edx
c0013ec4:	50                   	push   eax
c0013ec5:	e8 01 3c ff ff       	call   c0007acb <malloc>
c0013eca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013ecc:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ecf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ed3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ed7:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013edb:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013edf:	0f af c2             	imul   eax,edx
c0013ee2:	99                   	cdq    
c0013ee3:	52                   	push   edx
c0013ee4:	50                   	push   eax
c0013ee5:	53                   	push   ebx
c0013ee6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ee9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013eec:	83 c4 20             	add    esp,0x20
c0013eef:	85 c0                	test   eax,eax
c0013ef1:	0f 84 0d 06 00 00    	je     c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013ef7:	52                   	push   edx
c0013ef8:	31 d2                	xor    edx,edx
c0013efa:	52                   	push   edx
c0013efb:	50                   	push   eax
c0013efc:	53                   	push   ebx
c0013efd:	e8 90 71 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013f02:	83 c4 10             	add    esp,0x10
c0013f05:	85 c0                	test   eax,eax
c0013f07:	0f 85 f7 05 00 00    	jne    c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f0d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f11:	83 ec 0c             	sub    esp,0xc
c0013f14:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f18:	0f af c2             	imul   eax,edx
c0013f1b:	50                   	push   eax
c0013f1c:	e8 aa 3b ff ff       	call   c0007acb <malloc>
c0013f21:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f23:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f2e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f32:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f36:	0f af c2             	imul   eax,edx
c0013f39:	99                   	cdq    
c0013f3a:	52                   	push   edx
c0013f3b:	50                   	push   eax
c0013f3c:	53                   	push   ebx
c0013f3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f40:	83 c4 20             	add    esp,0x20
c0013f43:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0013f49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013f4c:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0013f50:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0013f54:	73 78                	jae    c0013fce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0013f56:	c1 e7 05             	shl    edi,0x5
c0013f59:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0013f5d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013f60:	75 63                	jne    c0013fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0013f62:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013f65:	31 d2                	xor    edx,edx
c0013f67:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0013f6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f6e:	50                   	push   eax
c0013f6f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013f72:	52                   	push   edx
c0013f73:	50                   	push   eax
c0013f74:	53                   	push   ebx
c0013f75:	e8 18 71 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013f7a:	83 c4 10             	add    esp,0x10
c0013f7d:	85 c0                	test   eax,eax
c0013f7f:	0f 85 7f 05 00 00    	jne    c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0013f85:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	31 d2                	xor    edx,edx
c0013f91:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013f95:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f97:	01 c6                	add    esi,eax
c0013f99:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013fa0:	50                   	push   eax
c0013fa1:	56                   	push   esi
c0013fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa6:	52                   	push   edx
c0013fa7:	50                   	push   eax
c0013fa8:	53                   	push   ebx
c0013fa9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fac:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013faf:	83 c4 1c             	add    esp,0x1c
c0013fb2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013fb5:	50                   	push   eax
c0013fb6:	6a 00                	push   0x0
c0013fb8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013fbc:	56                   	push   esi
c0013fbd:	e8 2e c5 fe ff       	call   c00004f0 <memset>
c0013fc2:	83 c4 10             	add    esp,0x10
c0013fc5:	66 ff 04 24          	inc    WORD PTR [esp]
c0013fc9:	e9 7b ff ff ff       	jmp    c0013f49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0013fce:	50                   	push   eax
c0013fcf:	68 00 01 00 00       	push   0x100
c0013fd4:	6a 00                	push   0x0
c0013fd6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013fda:	50                   	push   eax
c0013fdb:	e8 10 c5 fe ff       	call   c00004f0 <memset>
c0013fe0:	83 c4 0c             	add    esp,0xc
c0013fe3:	68 00 01 00 00       	push   0x100
c0013fe8:	6a 00                	push   0x0
c0013fea:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013ff1:	50                   	push   eax
c0013ff2:	e8 f9 c4 fe ff       	call   c00004f0 <memset>
c0013ff7:	83 c4 10             	add    esp,0x10
c0013ffa:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014001:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014008:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014010:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014018:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014020:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014028:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001402c:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014030:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014035:	0f 83 16 01 00 00    	jae    c0014151 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001403b:	6b ff 28             	imul   edi,edi,0x28
c001403e:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014042:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014045:	51                   	push   ecx
c0014046:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001404a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001404e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014050:	6b d2 28             	imul   edx,edx,0x28
c0014053:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014057:	31 d2                	xor    edx,edx
c0014059:	52                   	push   edx
c001405a:	50                   	push   eax
c001405b:	53                   	push   ebx
c001405c:	e8 31 70 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0014061:	83 c4 0c             	add    esp,0xc
c0014064:	6a 20                	push   0x20
c0014066:	6a 00                	push   0x0
c0014068:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001406f:	51                   	push   ecx
c0014070:	e8 7b c4 fe ff       	call   c00004f0 <memset>
c0014075:	58                   	pop    eax
c0014076:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014078:	8d 54 24 58          	lea    edx,[esp+0x58]
c001407c:	52                   	push   edx
c001407d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014084:	51                   	push   ecx
c0014085:	6a 00                	push   0x0
c0014087:	6a 1f                	push   0x1f
c0014089:	53                   	push   ebx
c001408a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001408d:	83 c4 1c             	add    esp,0x1c
c0014090:	6a 09                	push   0x9
c0014092:	68 87 10 02 c0       	push   0xc0021087
c0014097:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001409e:	51                   	push   ecx
c001409f:	e8 dc c2 fe ff       	call   c0000380 <memcmp>
c00140a4:	83 c4 10             	add    esp,0x10
c00140a7:	85 c0                	test   eax,eax
c00140a9:	75 1a                	jne    c00140c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00140ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00140ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00140b1:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00140b5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140b8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140bf:	89 d0                	mov    eax,edx
c00140c1:	40                   	inc    eax
c00140c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00140c5:	52                   	push   edx
c00140c6:	6a 09                	push   0x9
c00140c8:	68 91 10 02 c0       	push   0xc0021091
c00140cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140d4:	50                   	push   eax
c00140d5:	e8 a6 c2 fe ff       	call   c0000380 <memcmp>
c00140da:	83 c4 10             	add    esp,0x10
c00140dd:	85 c0                	test   eax,eax
c00140df:	75 1a                	jne    c00140fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00140e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00140e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00140e7:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00140eb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140ee:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140f5:	89 d0                	mov    eax,edx
c00140f7:	40                   	inc    eax
c00140f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00140fb:	50                   	push   eax
c00140fc:	50                   	push   eax
c00140fd:	68 5d 10 02 c0       	push   0xc002105d
c0014102:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014109:	50                   	push   eax
c001410a:	e8 71 c6 fe ff       	call   c0000780 <strcmp>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	85 c0                	test   eax,eax
c0014114:	75 0b                	jne    c0014121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014116:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001411a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001411d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014121:	50                   	push   eax
c0014122:	50                   	push   eax
c0014123:	68 65 10 02 c0       	push   0xc0021065
c0014128:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001412f:	50                   	push   eax
c0014130:	e8 4b c6 fe ff       	call   c0000780 <strcmp>
c0014135:	83 c4 10             	add    esp,0x10
c0014138:	85 c0                	test   eax,eax
c001413a:	75 0b                	jne    c0014147 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c001413c:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014140:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014143:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014147:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c001414c:	e9 d7 fe ff ff       	jmp    c0014028 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014151:	50                   	push   eax
c0014152:	31 d2                	xor    edx,edx
c0014154:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014158:	52                   	push   edx
c0014159:	50                   	push   eax
c001415a:	53                   	push   ebx
c001415b:	e8 32 6f ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0014160:	58                   	pop    eax
c0014161:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014165:	e8 61 39 ff ff       	call   c0007acb <malloc>
c001416a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001416c:	31 d2                	xor    edx,edx
c001416e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014172:	58                   	pop    eax
c0014173:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014177:	56                   	push   esi
c0014178:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001417c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014180:	52                   	push   edx
c0014181:	50                   	push   eax
c0014182:	53                   	push   ebx
c0014183:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014186:	83 c4 14             	add    esp,0x14
c0014189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001418d:	e8 39 39 ff ff       	call   c0007acb <malloc>
c0014192:	31 d2                	xor    edx,edx
c0014194:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014198:	83 c4 0c             	add    esp,0xc
c001419b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001419f:	52                   	push   edx
c00141a0:	50                   	push   eax
c00141a1:	53                   	push   ebx
c00141a2:	e8 eb 6e ff ff       	call   c000b092 <File::seek(unsigned long long)>
c00141a7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141a9:	31 d2                	xor    edx,edx
c00141ab:	89 34 24             	mov    DWORD PTR [esp],esi
c00141ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00141b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141b6:	52                   	push   edx
c00141b7:	50                   	push   eax
c00141b8:	53                   	push   ebx
c00141b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141bc:	83 c4 20             	add    esp,0x20
c00141bf:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00141c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141d0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141d4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00141d7:	0f 84 2b 03 00 00    	je     c0014508 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00141dd:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00141e4:	31 d2                	xor    edx,edx
c00141e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141ea:	c1 e8 03             	shr    eax,0x3
c00141ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00141f1:	51                   	push   ecx
c00141f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00141fa:	52                   	push   edx
c00141fb:	50                   	push   eax
c00141fc:	53                   	push   ebx
c00141fd:	e8 90 6e ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0014202:	5e                   	pop    esi
c0014203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014207:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001420e:	e8 b8 38 ff ff       	call   c0007acb <malloc>
c0014213:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014215:	31 d2                	xor    edx,edx
c0014217:	89 c7                	mov    edi,eax
c0014219:	58                   	pop    eax
c001421a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001421e:	50                   	push   eax
c001421f:	57                   	push   edi
c0014220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014224:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001422b:	52                   	push   edx
c001422c:	50                   	push   eax
c001422d:	53                   	push   ebx
c001422e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014231:	83 c4 20             	add    esp,0x20
c0014234:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001423c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014240:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014244:	0f 8d a5 02 00 00    	jge    c00144ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001424a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001424f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014253:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014256:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001425a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001425e:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014262:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014266:	c1 e8 08             	shr    eax,0x8
c0014269:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001426d:	89 c2                	mov    edx,eax
c001426f:	c1 e2 04             	shl    edx,0x4
c0014272:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014276:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014279:	85 f6                	test   esi,esi
c001427b:	0f 85 cf 00 00 00    	jne    c0014350 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014281:	83 ec 0c             	sub    esp,0xc
c0014284:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001428c:	03 02                	add    eax,DWORD PTR [edx]
c001428e:	50                   	push   eax
c001428f:	e8 63 f8 ff ff       	call   c0013af7 <Thr::getAddressOfKernelSymbol(char const*)>
c0014294:	83 c4 10             	add    esp,0x10
c0014297:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001429b:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00142a0:	85 c0                	test   eax,eax
c00142a2:	89 c6                	mov    esi,eax
c00142a4:	0f 85 a6 00 00 00    	jne    c0014350 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142aa:	83 ec 0c             	sub    esp,0xc
c00142ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00142b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142b5:	03 02                	add    eax,DWORD PTR [edx]
c00142b7:	50                   	push   eax
c00142b8:	e8 67 c7 ff ff       	call   c0010a24 <KeResolveCompatibilitySymbol(char*)>
c00142bd:	83 c4 10             	add    esp,0x10
c00142c0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00142c4:	85 c0                	test   eax,eax
c00142c6:	89 c6                	mov    esi,eax
c00142c8:	0f 85 82 00 00 00    	jne    c0014350 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00142ce:	50                   	push   eax
c00142cf:	50                   	push   eax
c00142d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142d4:	03 02                	add    eax,DWORD PTR [edx]
c00142d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00142da:	50                   	push   eax
c00142db:	68 9b 10 02 c0       	push   0xc002109b
c00142e0:	e8 8a 66 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00142e5:	58                   	pop    eax
c00142e6:	5a                   	pop    edx
c00142e7:	68 b5 10 02 c0       	push   0xc00210b5
c00142ec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00142f3:	51                   	push   ecx
c00142f4:	e8 57 c3 fe ff       	call   c0000650 <strcpy>
c00142f9:	59                   	pop    ecx
c00142fa:	58                   	pop    eax
c00142fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00142ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014303:	03 02                	add    eax,DWORD PTR [edx]
c0014305:	50                   	push   eax
c0014306:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001430d:	51                   	push   ecx
c001430e:	e8 5d c5 fe ff       	call   c0000870 <strcat>
c0014313:	58                   	pop    eax
c0014314:	5a                   	pop    edx
c0014315:	68 4b 11 02 c0       	push   0xc002114b
c001431a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014321:	51                   	push   ecx
c0014322:	e8 49 c5 fe ff       	call   c0000870 <strcat>
c0014327:	83 c4 10             	add    esp,0x10
c001432a:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001432f:	0f 84 77 01 00 00    	je     c00144ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014335:	83 ec 0c             	sub    esp,0xc
c0014338:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001433f:	51                   	push   ecx
c0014340:	e8 f4 c4 ff ff       	call   c0010839 <KePanic(char const*)>
c0014345:	83 c4 10             	add    esp,0x10
c0014348:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001434c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014350:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014355:	83 f8 01             	cmp    eax,0x1
c0014358:	0f 85 9b 00 00 00    	jne    c00143f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001435e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014362:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014369:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c001436d:	01 c8                	add    eax,ecx
c001436f:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014377:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001437b:	8b 00                	mov    eax,DWORD PTR [eax]
c001437d:	0f 94 c2             	sete   dl
c0014380:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014388:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c001438d:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c0014391:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014396:	0f b6 d2             	movzx  edx,dl
c0014399:	74 41                	je     c00143dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c001439b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c001439e:	85 d2                	test   edx,edx
c00143a0:	75 15                	jne    c00143b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00143a2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143a6:	66 83 f8 0c          	cmp    ax,0xc
c00143aa:	76 05                	jbe    c00143b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00143ac:	b8 0c 00 00 00       	mov    eax,0xc
c00143b1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00143b5:	76 37                	jbe    c00143ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143b7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00143bc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00143c0:	0f 84 e6 00 00 00    	je     c00144ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00143c6:	83 ec 0c             	sub    esp,0xc
c00143c9:	68 cc 10 02 c0       	push   0xc00210cc
c00143ce:	e8 66 c4 ff ff       	call   c0010839 <KePanic(char const*)>
c00143d3:	83 c4 10             	add    esp,0x10
c00143d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143da:	eb 12                	jmp    c00143ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143dc:	01 c1                	add    ecx,eax
c00143de:	85 d2                	test   edx,edx
c00143e0:	75 0c                	jne    c00143ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143e2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143e6:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00143ea:	77 02                	ja     c00143ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00143ec:	01 f1                	add    ecx,esi
c00143ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143f2:	89 08                	mov    DWORD PTR [eax],ecx
c00143f4:	e9 ed 00 00 00       	jmp    c00144e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00143f9:	83 f8 02             	cmp    eax,0x2
c00143fc:	0f 85 81 00 00 00    	jne    c0014483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014402:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014409:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c001440d:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014411:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014419:	74 21                	je     c001443c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001441b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014423:	74 17                	je     c001443c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014425:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014429:	ba 0a 00 00 00       	mov    edx,0xa
c001442e:	83 f9 0e             	cmp    ecx,0xe
c0014431:	77 03                	ja     c0014436 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014433:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014436:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001443a:	76 1f                	jbe    c001445b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c001443c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014441:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014445:	74 65                	je     c00144ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014447:	83 ec 0c             	sub    esp,0xc
c001444a:	68 e8 10 02 c0       	push   0xc00210e8
c001444f:	e8 e5 c3 ff ff       	call   c0010839 <KePanic(char const*)>
c0014454:	83 c4 10             	add    esp,0x10
c0014457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001445b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014460:	8b 10                	mov    edx,DWORD PTR [eax]
c0014462:	74 15                	je     c0014479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014464:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014468:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001446f:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014473:	01 d1                	add    ecx,edx
c0014475:	01 ce                	add    esi,ecx
c0014477:	eb 06                	jmp    c001447f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014479:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001447d:	01 d6                	add    esi,edx
c001447f:	89 30                	mov    DWORD PTR [eax],esi
c0014481:	eb 63                	jmp    c00144e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014483:	56                   	push   esi
c0014484:	56                   	push   esi
c0014485:	50                   	push   eax
c0014486:	68 04 11 02 c0       	push   0xc0021104
c001448b:	e8 df 64 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014498:	74 12                	je     c00144ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001449a:	83 ec 0c             	sub    esp,0xc
c001449d:	68 0f 11 02 c0       	push   0xc002110f
c00144a2:	e8 92 c3 ff ff       	call   c0010839 <KePanic(char const*)>
c00144a7:	83 c4 10             	add    esp,0x10
c00144aa:	eb 3a                	jmp    c00144e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00144ac:	83 ec 0c             	sub    esp,0xc
c00144af:	53                   	push   ebx
c00144b0:	e8 7d 6b ff ff       	call   c000b032 <File::close()>
c00144b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144c0:	e8 16 36 ff ff       	call   c0007adb <free>
c00144c5:	59                   	pop    ecx
c00144c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00144ca:	e8 0c 36 ff ff       	call   c0007adb <free>
c00144cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144d2:	e8 04 36 ff ff       	call   c0007adb <free>
c00144d7:	5b                   	pop    ebx
c00144d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144dc:	e8 fa 35 ff ff       	call   c0007adb <free>
c00144e1:	83 c4 10             	add    esp,0x10
c00144e4:	eb 1e                	jmp    c0014504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00144e6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00144ea:	e9 4d fd ff ff       	jmp    c001423c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00144ef:	83 ec 0c             	sub    esp,0xc
c00144f2:	57                   	push   edi
c00144f3:	e8 e3 35 ff ff       	call   c0007adb <free>
c00144f8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	e9 cc fc ff ff       	jmp    c00141d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014504:	31 c0                	xor    eax,eax
c0014506:	eb 32                	jmp    c001453a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014508:	83 ec 0c             	sub    esp,0xc
c001450b:	53                   	push   ebx
c001450c:	e8 21 6b ff ff       	call   c000b032 <File::close()>
c0014511:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014513:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014516:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014519:	58                   	pop    eax
c001451a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001451e:	e8 b8 35 ff ff       	call   c0007adb <free>
c0014523:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014526:	e8 b0 35 ff ff       	call   c0007adb <free>
c001452b:	5a                   	pop    edx
c001452c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014530:	e8 a6 35 ff ff       	call   c0007adb <free>
c0014535:	83 c4 10             	add    esp,0x10
c0014538:	b0 01                	mov    al,0x1
c001453a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014540:	5b                   	pop    ebx
c0014541:	5e                   	pop    esi
c0014542:	5f                   	pop    edi
c0014543:	5d                   	pop    ebp
c0014544:	c3                   	ret    

c0014545 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014545:	56                   	push   esi
c0014546:	31 d2                	xor    edx,edx
c0014548:	53                   	push   ebx
c0014549:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001454f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014553:	39 d3                	cmp    ebx,edx
c0014555:	7e 1b                	jle    c0014572 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014557:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c001455e:	39 c8                	cmp    eax,ecx
c0014560:	77 0d                	ja     c001456f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014562:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c0014569:	01 c6                	add    esi,eax
c001456b:	39 ce                	cmp    esi,ecx
c001456d:	77 05                	ja     c0014574 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001456f:	42                   	inc    edx
c0014570:	eb e1                	jmp    c0014553 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014572:	31 c0                	xor    eax,eax
c0014574:	5b                   	pop    ebx
c0014575:	5e                   	pop    esi
c0014576:	c3                   	ret    

c0014577 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014577:	53                   	push   ebx
c0014578:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001457e:	31 c0                	xor    eax,eax
c0014580:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014584:	39 c3                	cmp    ebx,eax
c0014586:	7e 22                	jle    c00145aa <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014588:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c001458f:	39 ca                	cmp    edx,ecx
c0014591:	77 14                	ja     c00145a7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014593:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c001459a:	39 ca                	cmp    edx,ecx
c001459c:	76 09                	jbe    c00145a7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001459e:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00145a5:	eb 05                	jmp    c00145ac <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00145a7:	40                   	inc    eax
c00145a8:	eb da                	jmp    c0014584 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00145aa:	31 c0                	xor    eax,eax
c00145ac:	5b                   	pop    ebx
c00145ad:	c3                   	ret    

c00145ae <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00145ae:	53                   	push   ebx
c00145af:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145b3:	53                   	push   ebx
c00145b4:	e8 8c ff ff ff       	call   c0014545 <Thr::getDriverBaseFromAddress(unsigned long)>
c00145b9:	5a                   	pop    edx
c00145ba:	31 d2                	xor    edx,edx
c00145bc:	85 c0                	test   eax,eax
c00145be:	74 04                	je     c00145c4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145c0:	89 da                	mov    edx,ebx
c00145c2:	29 c2                	sub    edx,eax
c00145c4:	5b                   	pop    ebx
c00145c5:	89 d0                	mov    eax,edx
c00145c7:	c3                   	ret    

c00145c8 <Thr::loadDLL(char const*, bool)>:
c00145c8:	55                   	push   ebp
c00145c9:	57                   	push   edi
c00145ca:	56                   	push   esi
c00145cb:	53                   	push   ebx
c00145cc:	81 ec 34 01 00 00    	sub    esp,0x134
c00145d2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00145d9:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00145e0:	56                   	push   esi
c00145e1:	68 27 11 02 c0       	push   0xc0021127
c00145e6:	e8 84 63 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00145eb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145f2:	e8 d4 34 ff ff       	call   c0007acb <malloc>
c00145f7:	83 c4 0c             	add    esp,0xc
c00145fa:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014600:	56                   	push   esi
c0014601:	50                   	push   eax
c0014602:	89 c3                	mov    ebx,eax
c0014604:	e8 0f 69 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0014609:	83 c4 10             	add    esp,0x10
c001460c:	85 db                	test   ebx,ebx
c001460e:	75 3c                	jne    c001464c <Thr::loadDLL(char const*, bool)+0x84>
c0014610:	89 e8                	mov    eax,ebp
c0014612:	84 c0                	test   al,al
c0014614:	0f 84 e1 01 00 00    	je     c00147fb <Thr::loadDLL(char const*, bool)+0x233>
c001461a:	50                   	push   eax
c001461b:	50                   	push   eax
c001461c:	68 38 11 02 c0       	push   0xc0021138
c0014621:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014625:	57                   	push   edi
c0014626:	e8 25 c0 fe ff       	call   c0000650 <strcpy>
c001462b:	58                   	pop    eax
c001462c:	5a                   	pop    edx
c001462d:	56                   	push   esi
c001462e:	57                   	push   edi
c001462f:	e8 3c c2 fe ff       	call   c0000870 <strcat>
c0014634:	59                   	pop    ecx
c0014635:	58                   	pop    eax
c0014636:	68 4b 11 02 c0       	push   0xc002114b
c001463b:	57                   	push   edi
c001463c:	e8 2f c2 fe ff       	call   c0000870 <strcat>
c0014641:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014644:	e8 f0 c1 ff ff       	call   c0010839 <KePanic(char const*)>
c0014649:	83 c4 10             	add    esp,0x10
c001464c:	50                   	push   eax
c001464d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014651:	50                   	push   eax
c0014652:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014656:	50                   	push   eax
c0014657:	53                   	push   ebx
c0014658:	e8 23 6c ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c001465d:	83 c4 10             	add    esp,0x10
c0014660:	85 db                	test   ebx,ebx
c0014662:	74 0c                	je     c0014670 <Thr::loadDLL(char const*, bool)+0xa8>
c0014664:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014666:	83 ec 0c             	sub    esp,0xc
c0014669:	53                   	push   ebx
c001466a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001466d:	83 c4 10             	add    esp,0x10
c0014670:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014675:	75 0a                	jne    c0014681 <Thr::loadDLL(char const*, bool)+0xb9>
c0014677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001467b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001467f:	75 3e                	jne    c00146bf <Thr::loadDLL(char const*, bool)+0xf7>
c0014681:	89 e8                	mov    eax,ebp
c0014683:	31 db                	xor    ebx,ebx
c0014685:	84 c0                	test   al,al
c0014687:	0f 84 6e 01 00 00    	je     c00147fb <Thr::loadDLL(char const*, bool)+0x233>
c001468d:	50                   	push   eax
c001468e:	50                   	push   eax
c001468f:	68 38 11 02 c0       	push   0xc0021138
c0014694:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014698:	53                   	push   ebx
c0014699:	e8 b2 bf fe ff       	call   c0000650 <strcpy>
c001469e:	58                   	pop    eax
c001469f:	5a                   	pop    edx
c00146a0:	56                   	push   esi
c00146a1:	53                   	push   ebx
c00146a2:	e8 c9 c1 fe ff       	call   c0000870 <strcat>
c00146a7:	59                   	pop    ecx
c00146a8:	5f                   	pop    edi
c00146a9:	68 4b 11 02 c0       	push   0xc002114b
c00146ae:	53                   	push   ebx
c00146af:	e8 bc c1 fe ff       	call   c0000870 <strcat>
c00146b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146b7:	e8 7d c1 ff ff       	call   c0010839 <KePanic(char const*)>
c00146bc:	83 c4 10             	add    esp,0x10
c00146bf:	53                   	push   ebx
c00146c0:	6a 03                	push   0x3
c00146c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146ca:	05 ff 0f 00 00       	add    eax,0xfff
c00146cf:	83 d2 00             	adc    edx,0x0
c00146d2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00146d6:	50                   	push   eax
c00146d7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00146dd:	e8 0e 57 ff ff       	call   c0009df0 <VAS::allocatePages(int, int)>
c00146e2:	89 c3                	mov    ebx,eax
c00146e4:	58                   	pop    eax
c00146e5:	5a                   	pop    edx
c00146e6:	53                   	push   ebx
c00146e7:	68 92 fc 01 c0       	push   0xc001fc92
c00146ec:	e8 7e 62 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00146f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00146f4:	e8 87 be fe ff       	call   c0000580 <strlen>
c00146f9:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c00146ff:	40                   	inc    eax
c0014700:	89 04 24             	mov    DWORD PTR [esp],eax
c0014703:	e8 c3 33 ff ff       	call   c0007acb <malloc>
c0014708:	59                   	pop    ecx
c0014709:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c0014710:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014715:	5f                   	pop    edi
c0014716:	56                   	push   esi
c0014717:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c001471e:	e8 2d bf fe ff       	call   c0000650 <strcpy>
c0014723:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014728:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c001472f:	8d 50 01             	lea    edx,[eax+0x1]
c0014732:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014738:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001473c:	83 c4 0c             	add    esp,0xc
c001473f:	6a 01                	push   0x1
c0014741:	53                   	push   ebx
c0014742:	56                   	push   esi
c0014743:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c001474a:	e8 b5 f6 ff ff       	call   c0013e04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001474f:	83 c4 10             	add    esp,0x10
c0014752:	89 c7                	mov    edi,eax
c0014754:	89 f8                	mov    eax,edi
c0014756:	83 f0 01             	xor    eax,0x1
c0014759:	84 c0                	test   al,al
c001475b:	74 18                	je     c0014775 <Thr::loadDLL(char const*, bool)+0x1ad>
c001475d:	89 e8                	mov    eax,ebp
c001475f:	84 c0                	test   al,al
c0014761:	74 12                	je     c0014775 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014763:	83 ec 0c             	sub    esp,0xc
c0014766:	68 4d 11 02 c0       	push   0xc002114d
c001476b:	e8 c9 c0 ff ff       	call   c0010839 <KePanic(char const*)>
c0014770:	83 c4 10             	add    esp,0x10
c0014773:	eb 06                	jmp    c001477b <Thr::loadDLL(char const*, bool)+0x1b3>
c0014775:	89 f8                	mov    eax,edi
c0014777:	84 c0                	test   al,al
c0014779:	75 10                	jne    c001478b <Thr::loadDLL(char const*, bool)+0x1c3>
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	68 6c 11 02 c0       	push   0xc002116c
c0014783:	e8 b1 c0 ff ff       	call   c0010839 <KePanic(char const*)>
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	31 f6                	xor    esi,esi
c001478d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014791:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014795:	05 ff 0f 00 00       	add    eax,0xfff
c001479a:	83 d2 00             	adc    edx,0x0
c001479d:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147a5:	c1 ea 0c             	shr    edx,0xc
c00147a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00147ac:	ba 00 00 00 00       	mov    edx,0x0
c00147b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00147b5:	89 d0                	mov    eax,edx
c00147b7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00147bb:	73 32                	jae    c00147ef <Thr::loadDLL(char const*, bool)+0x227>
c00147bd:	50                   	push   eax
c00147be:	50                   	push   eax
c00147bf:	89 f0                	mov    eax,esi
c00147c1:	c1 e0 0c             	shl    eax,0xc
c00147c4:	01 d8                	add    eax,ebx
c00147c6:	50                   	push   eax
c00147c7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147cd:	e8 26 51 ff ff       	call   c00098f8 <VAS::getPageTableEntry(unsigned long)>
c00147d2:	83 c4 10             	add    esp,0x10
c00147d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00147d7:	a8 60                	test   al,0x60
c00147d9:	75 11                	jne    c00147ec <Thr::loadDLL(char const*, bool)+0x224>
c00147db:	83 ec 0c             	sub    esp,0xc
c00147de:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147e3:	50                   	push   eax
c00147e4:	e8 84 35 ff ff       	call   c0007d6d <Phys::freePage(unsigned long)>
c00147e9:	83 c4 10             	add    esp,0x10
c00147ec:	46                   	inc    esi
c00147ed:	eb 9e                	jmp    c001478d <Thr::loadDLL(char const*, bool)+0x1c5>
c00147ef:	89 f8                	mov    eax,edi
c00147f1:	84 c0                	test   al,al
c00147f3:	b8 00 00 00 00       	mov    eax,0x0
c00147f8:	0f 44 d8             	cmove  ebx,eax
c00147fb:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014801:	89 d8                	mov    eax,ebx
c0014803:	5b                   	pop    ebx
c0014804:	5e                   	pop    esi
c0014805:	5f                   	pop    edi
c0014806:	5d                   	pop    ebp
c0014807:	c3                   	ret    

c0014808 <Thr::executeDLL(unsigned long, void*)>:
c0014808:	56                   	push   esi
c0014809:	53                   	push   ebx
c001480a:	52                   	push   edx
c001480b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001480f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014813:	85 db                	test   ebx,ebx
c0014815:	75 10                	jne    c0014827 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014817:	83 ec 0c             	sub    esp,0xc
c001481a:	68 88 11 02 c0       	push   0xc0021188
c001481f:	e8 15 c0 ff ff       	call   c0010839 <KePanic(char const*)>
c0014824:	83 c4 10             	add    esp,0x10
c0014827:	50                   	push   eax
c0014828:	50                   	push   eax
c0014829:	53                   	push   ebx
c001482a:	68 b2 11 02 c0       	push   0xc00211b2
c001482f:	e8 3b 61 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0014834:	89 d8                	mov    eax,ebx
c0014836:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001483a:	83 c4 14             	add    esp,0x14
c001483d:	5b                   	pop    ebx
c001483e:	5e                   	pop    esi
c001483f:	ff e0                	jmp    eax
c0014841:	66 90                	xchg   ax,ax
c0014843:	90                   	nop

c0014844 <userModeEntryPoint(void*)>:
c0014844:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014849:	83 e8 01             	sub    eax,0x1
c001484c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014851:	75 01                	jne    c0014854 <userModeEntryPoint(void*)+0x10>
c0014853:	fb                   	sti    
c0014854:	fb                   	sti    
c0014855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001485a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001485d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014863:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014867:	e9 d3 b9 fe ff       	jmp    c000023f <goToUsermode>

c001486c <changeTSS>:
c001486c:	83 ec 14             	sub    esp,0x14
c001486f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014874:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014877:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001487c:	c1 e2 15             	shl    edx,0x15
c001487f:	29 d0                	sub    eax,edx
c0014881:	50                   	push   eax
c0014882:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014887:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001488d:	05 7c 11 00 00       	add    eax,0x117c
c0014892:	50                   	push   eax
c0014893:	e8 b4 46 ff ff       	call   c0008f4c <TSS::setESP(unsigned long)>
c0014898:	83 c4 1c             	add    esp,0x1c
c001489b:	c3                   	ret    

c001489c <switchToThread(ThreadControlBlock*)>:
c001489c:	57                   	push   edi
c001489d:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00148a3:	56                   	push   esi
c00148a4:	53                   	push   ebx
c00148a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148a9:	85 c9                	test   ecx,ecx
c00148ab:	0f 85 8b 00 00 00    	jne    c001493c <switchToThread(ThreadControlBlock*)+0xa0>
c00148b1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00148b5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00148bb:	74 7b                	je     c0014938 <switchToThread(ThreadControlBlock*)+0x9c>
c00148bd:	b8 00 04 00 00       	mov    eax,0x400
c00148c2:	29 d0                	sub    eax,edx
c00148c4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148c7:	d1 f8                	sar    eax,1
c00148c9:	01 d0                	add    eax,edx
c00148cb:	90                   	nop
c00148cc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148cf:	e8 8e 27 00 00       	call   c0017062 <HalQueryPerformanceCounter()>
c00148d4:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00148d9:	89 c6                	mov    esi,eax
c00148db:	89 d7                	mov    edi,edx
c00148dd:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c00148e3:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c00148e8:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c00148ee:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c00148f4:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c00148fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014900:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014906:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c001490c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001490f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014912:	01 c6                	add    esi,eax
c0014914:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014917:	11 d7                	adc    edi,edx
c0014919:	83 ec 0c             	sub    esp,0xc
c001491c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001491f:	53                   	push   ebx
c0014920:	e8 52 b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014925:	0f 20 c0             	mov    eax,cr0
c0014928:	83 c8 08             	or     eax,0x8
c001492b:	0f 22 c0             	mov    cr0,eax
c001492e:	83 c4 10             	add    esp,0x10
c0014931:	5b                   	pop    ebx
c0014932:	5e                   	pop    esi
c0014933:	5f                   	pop    edi
c0014934:	c3                   	ret    
c0014935:	8d 76 00             	lea    esi,[esi+0x0]
c0014938:	31 c0                	xor    eax,eax
c001493a:	eb 90                	jmp    c00148cc <switchToThread(ThreadControlBlock*)+0x30>
c001493c:	5b                   	pop    ebx
c001493d:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014947:	5e                   	pop    esi
c0014948:	5f                   	pop    edi
c0014949:	c3                   	ret    
c001494a:	66 90                	xchg   ax,ax

c001494c <Process::addArgs(char**)>:
c001494c:	57                   	push   edi
c001494d:	56                   	push   esi
c001494e:	53                   	push   ebx
c001494f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014953:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014957:	85 f6                	test   esi,esi
c0014959:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014963:	74 4f                	je     c00149b4 <Process::addArgs(char**)+0x68>
c0014965:	8b 06                	mov    eax,DWORD PTR [esi]
c0014967:	85 c0                	test   eax,eax
c0014969:	74 49                	je     c00149b4 <Process::addArgs(char**)+0x68>
c001496b:	31 db                	xor    ebx,ebx
c001496d:	8d 76 00             	lea    esi,[esi+0x0]
c0014970:	83 ec 0c             	sub    esp,0xc
c0014973:	50                   	push   eax
c0014974:	e8 07 bc fe ff       	call   c0000580 <strlen>
c0014979:	83 c0 01             	add    eax,0x1
c001497c:	89 04 24             	mov    DWORD PTR [esp],eax
c001497f:	e8 47 31 ff ff       	call   c0007acb <malloc>
c0014984:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c001498b:	5a                   	pop    edx
c001498c:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001498f:	83 c3 01             	add    ebx,0x1
c0014992:	59                   	pop    ecx
c0014993:	52                   	push   edx
c0014994:	50                   	push   eax
c0014995:	e8 b6 bc fe ff       	call   c0000650 <strcpy>
c001499a:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00149a0:	83 c4 10             	add    esp,0x10
c00149a3:	83 c1 01             	add    ecx,0x1
c00149a6:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00149ac:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00149af:	85 c0                	test   eax,eax
c00149b1:	75 bd                	jne    c0014970 <Process::addArgs(char**)+0x24>
c00149b3:	90                   	nop
c00149b4:	5b                   	pop    ebx
c00149b5:	5e                   	pop    esi
c00149b6:	5f                   	pop    edi
c00149b7:	c3                   	ret    

c00149b8 <Process::Process(char const*, Process*, char**)>:
c00149b8:	56                   	push   esi
c00149b9:	53                   	push   ebx
c00149ba:	83 ec 14             	sub    esp,0x14
c00149bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149c1:	05 0c 02 00 00       	add    eax,0x20c
c00149c6:	bb 07 00 00 00       	mov    ebx,0x7
c00149cb:	89 c6                	mov    esi,eax
c00149cd:	8d 76 00             	lea    esi,[esi+0x0]
c00149d0:	85 db                	test   ebx,ebx
c00149d2:	78 14                	js     c00149e8 <Process::Process(char const*, Process*, char**)+0x30>
c00149d4:	83 ec 0c             	sub    esp,0xc
c00149d7:	56                   	push   esi
c00149d8:	e8 3b a5 00 00       	call   c001ef18 <ThreadControlBlock::ThreadControlBlock()>
c00149dd:	83 c4 10             	add    esp,0x10
c00149e0:	83 c6 5f             	add    esi,0x5f
c00149e3:	83 eb 01             	sub    ebx,0x1
c00149e6:	eb e8                	jmp    c00149d0 <Process::Process(char const*, Process*, char**)+0x18>
c00149e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149ec:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00149f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149f7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00149fe:	83 ec 0c             	sub    esp,0xc
c0014a01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a05:	e8 24 bc ff ff       	call   c001062e <Krnl::newProcessEnv(Process*)>
c0014a0a:	83 c4 10             	add    esp,0x10
c0014a0d:	89 c2                	mov    edx,eax
c0014a0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a13:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a1d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a26:	a1 80 23 02 c0       	mov    eax,ds:0xc0022380
c0014a2b:	8d 50 01             	lea    edx,[eax+0x1]
c0014a2e:	89 15 80 23 02 c0    	mov    DWORD PTR ds:0xc0022380,edx
c0014a34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a38:	89 02                	mov    DWORD PTR [edx],eax
c0014a3a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014a42:	83 ec 0c             	sub    esp,0xc
c0014a45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a49:	e8 7d 30 ff ff       	call   c0007acb <malloc>
c0014a4e:	83 c4 10             	add    esp,0x10
c0014a51:	89 c3                	mov    ebx,eax
c0014a53:	83 ec 08             	sub    esp,0x8
c0014a56:	6a 00                	push   0x0
c0014a58:	53                   	push   ebx
c0014a59:	e8 58 57 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014a5e:	83 c4 10             	add    esp,0x10
c0014a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a65:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a6f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a81:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a87:	e8 c6 c1 ff ff       	call   c0010c52 <KeInitSignals()>
c0014a8c:	89 c2                	mov    edx,eax
c0014a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a92:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014a98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a9c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014aa2:	85 c0                	test   eax,eax
c0014aa4:	74 42                	je     c0014ae8 <Process::Process(char const*, Process*, char**)+0x130>
c0014aa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aaa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ab0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aba:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ac4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014aca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad4:	05 0c 01 00 00       	add    eax,0x10c
c0014ad9:	83 ec 08             	sub    esp,0x8
c0014adc:	52                   	push   edx
c0014add:	50                   	push   eax
c0014ade:	e8 6d bb fe ff       	call   c0000650 <strcpy>
c0014ae3:	83 c4 10             	add    esp,0x10
c0014ae6:	eb 64                	jmp    c0014b4c <Process::Process(char const*, Process*, char**)+0x194>
c0014ae8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014af0:	83 ec 0c             	sub    esp,0xc
c0014af3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014af7:	e8 cf 2f ff ff       	call   c0007acb <malloc>
c0014afc:	83 c4 10             	add    esp,0x10
c0014aff:	89 c3                	mov    ebx,eax
c0014b01:	83 ec 08             	sub    esp,0x8
c0014b04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b08:	53                   	push   ebx
c0014b09:	e8 48 41 ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014b0e:	83 c4 10             	add    esp,0x10
c0014b11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b15:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b25:	83 ec 0c             	sub    esp,0xc
c0014b28:	50                   	push   eax
c0014b29:	e8 d6 39 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b35:	05 0c 01 00 00       	add    eax,0x10c
c0014b3a:	83 ec 08             	sub    esp,0x8
c0014b3d:	68 d1 11 02 c0       	push   0xc00211d1
c0014b42:	50                   	push   eax
c0014b43:	e8 08 bb fe ff       	call   c0000650 <strcpy>
c0014b48:	83 c4 10             	add    esp,0x10
c0014b4b:	90                   	nop
c0014b4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b50:	83 c0 0c             	add    eax,0xc
c0014b53:	83 ec 08             	sub    esp,0x8
c0014b56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b5a:	50                   	push   eax
c0014b5b:	e8 f0 ba fe ff       	call   c0000650 <strcpy>
c0014b60:	83 c4 10             	add    esp,0x10
c0014b63:	83 ec 08             	sub    esp,0x8
c0014b66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b6e:	e8 d9 fd ff ff       	call   c001494c <Process::addArgs(char**)>
c0014b73:	83 c4 10             	add    esp,0x10
c0014b76:	83 ec 08             	sub    esp,0x8
c0014b79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b81:	e8 3f ed ff ff       	call   c00138c5 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b86:	83 c4 10             	add    esp,0x10
c0014b89:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014b8d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014b91:	83 f0 01             	xor    eax,0x1
c0014b94:	88 c2                	mov    dl,al
c0014b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b9a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014ba0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014ba5:	83 ec 04             	sub    esp,0x4
c0014ba8:	50                   	push   eax
c0014ba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bad:	68 28 12 02 c0       	push   0xc0021228
c0014bb2:	e8 b8 5d ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0014bb7:	83 c4 10             	add    esp,0x10
c0014bba:	90                   	nop
c0014bbb:	83 c4 14             	add    esp,0x14
c0014bbe:	5b                   	pop    ebx
c0014bbf:	5e                   	pop    esi
c0014bc0:	c3                   	ret    
c0014bc1:	90                   	nop
c0014bc2:	66 90                	xchg   ax,ax

c0014bc4 <Process::Process(bool, char const*, Process*, char**)>:
c0014bc4:	56                   	push   esi
c0014bc5:	53                   	push   ebx
c0014bc6:	83 ec 24             	sub    esp,0x24
c0014bc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bcd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014bd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bd5:	05 0c 02 00 00       	add    eax,0x20c
c0014bda:	bb 07 00 00 00       	mov    ebx,0x7
c0014bdf:	89 c6                	mov    esi,eax
c0014be1:	8d 76 00             	lea    esi,[esi+0x0]
c0014be4:	85 db                	test   ebx,ebx
c0014be6:	78 14                	js     c0014bfc <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014be8:	83 ec 0c             	sub    esp,0xc
c0014beb:	56                   	push   esi
c0014bec:	e8 27 a3 00 00       	call   c001ef18 <ThreadControlBlock::ThreadControlBlock()>
c0014bf1:	83 c4 10             	add    esp,0x10
c0014bf4:	83 c6 5f             	add    esi,0x5f
c0014bf7:	83 eb 01             	sub    ebx,0x1
c0014bfa:	eb e8                	jmp    c0014be4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c00:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c0b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c12:	83 ec 0c             	sub    esp,0xc
c0014c15:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014c19:	e8 10 ba ff ff       	call   c001062e <Krnl::newProcessEnv(Process*)>
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	89 c2                	mov    edx,eax
c0014c23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c27:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c31:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c3a:	a1 80 23 02 c0       	mov    eax,ds:0xc0022380
c0014c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c42:	89 15 80 23 02 c0    	mov    DWORD PTR ds:0xc0022380,edx
c0014c48:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014c4c:	89 02                	mov    DWORD PTR [edx],eax
c0014c4e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014c56:	83 ec 0c             	sub    esp,0xc
c0014c59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c5d:	e8 69 2e ff ff       	call   c0007acb <malloc>
c0014c62:	83 c4 10             	add    esp,0x10
c0014c65:	89 c3                	mov    ebx,eax
c0014c67:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c6c:	83 ec 08             	sub    esp,0x8
c0014c6f:	50                   	push   eax
c0014c70:	53                   	push   ebx
c0014c71:	e8 40 55 ff ff       	call   c000a1b6 <VAS::VAS(bool)>
c0014c76:	83 c4 10             	add    esp,0x10
c0014c79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c7d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c87:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c95:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014c99:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014c9f:	e8 ae bf ff ff       	call   c0010c52 <KeInitSignals()>
c0014ca4:	89 c2                	mov    edx,eax
c0014ca6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014caa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014cb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cb4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cba:	85 c0                	test   eax,eax
c0014cbc:	74 42                	je     c0014d00 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014cbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cc8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014cce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cdc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ce2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ce8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cec:	05 0c 01 00 00       	add    eax,0x10c
c0014cf1:	83 ec 08             	sub    esp,0x8
c0014cf4:	52                   	push   edx
c0014cf5:	50                   	push   eax
c0014cf6:	e8 55 b9 fe ff       	call   c0000650 <strcpy>
c0014cfb:	83 c4 10             	add    esp,0x10
c0014cfe:	eb 64                	jmp    c0014d64 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014d00:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014d08:	83 ec 0c             	sub    esp,0xc
c0014d0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d0f:	e8 b7 2d ff ff       	call   c0007acb <malloc>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	89 c3                	mov    ebx,eax
c0014d19:	83 ec 08             	sub    esp,0x8
c0014d1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d20:	53                   	push   ebx
c0014d21:	e8 30 3f ff ff       	call   c0008c56 <VgaText::VgaText(char const*)>
c0014d26:	83 c4 10             	add    esp,0x10
c0014d29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d2d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d3d:	83 ec 0c             	sub    esp,0xc
c0014d40:	50                   	push   eax
c0014d41:	e8 be 37 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0014d46:	83 c4 10             	add    esp,0x10
c0014d49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d4d:	05 0c 01 00 00       	add    eax,0x10c
c0014d52:	83 ec 08             	sub    esp,0x8
c0014d55:	68 d1 11 02 c0       	push   0xc00211d1
c0014d5a:	50                   	push   eax
c0014d5b:	e8 f0 b8 fe ff       	call   c0000650 <strcpy>
c0014d60:	83 c4 10             	add    esp,0x10
c0014d63:	90                   	nop
c0014d64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d68:	83 c0 0c             	add    eax,0xc
c0014d6b:	83 ec 08             	sub    esp,0x8
c0014d6e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d72:	50                   	push   eax
c0014d73:	e8 d8 b8 fe ff       	call   c0000650 <strcpy>
c0014d78:	83 c4 10             	add    esp,0x10
c0014d7b:	83 ec 08             	sub    esp,0x8
c0014d7e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d86:	e8 c1 fb ff ff       	call   c001494c <Process::addArgs(char**)>
c0014d8b:	83 c4 10             	add    esp,0x10
c0014d8e:	90                   	nop
c0014d8f:	83 c4 24             	add    esp,0x24
c0014d92:	5b                   	pop    ebx
c0014d93:	5e                   	pop    esi
c0014d94:	c3                   	ret    
c0014d95:	8d 76 00             	lea    esi,[esi+0x0]

c0014d98 <taskStartupFunction>:
c0014d98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d9d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014da0:	c3                   	ret    
c0014da1:	90                   	nop
c0014da2:	66 90                	xchg   ax,ax

c0014da4 <Semaphore::Semaphore(int)>:
c0014da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014da8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dac:	89 10                	mov    DWORD PTR [eax],edx
c0014dae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014db2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014db9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dbd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dc8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014dcf:	90                   	nop
c0014dd0:	c3                   	ret    
c0014dd1:	90                   	nop
c0014dd2:	66 90                	xchg   ax,ax

c0014dd4 <Mutex::Mutex()>:
c0014dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dd8:	6a 01                	push   0x1
c0014dda:	50                   	push   eax
c0014ddb:	e8 c4 ff ff ff       	call   c0014da4 <Semaphore::Semaphore(int)>
c0014de0:	83 c4 08             	add    esp,0x8
c0014de3:	90                   	nop
c0014de4:	c3                   	ret    
c0014de5:	90                   	nop
c0014de6:	66 90                	xchg   ax,ax

c0014de8 <Process::createThread(void (*)(void*), void*, int)>:
c0014de8:	57                   	push   edi
c0014de9:	31 c9                	xor    ecx,ecx
c0014deb:	56                   	push   esi
c0014dec:	53                   	push   ebx
c0014ded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014df1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014df8:	89 f2                	mov    edx,esi
c0014dfa:	66 90                	xchg   ax,ax
c0014dfc:	0f b7 c2             	movzx  eax,dx
c0014dff:	80 e2 01             	and    dl,0x1
c0014e02:	74 14                	je     c0014e18 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e04:	d1 f8                	sar    eax,1
c0014e06:	83 c1 01             	add    ecx,0x1
c0014e09:	83 f9 10             	cmp    ecx,0x10
c0014e0c:	89 c2                	mov    edx,eax
c0014e0e:	75 ec                	jne    c0014dfc <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014e10:	31 db                	xor    ebx,ebx
c0014e12:	89 d8                	mov    eax,ebx
c0014e14:	5b                   	pop    ebx
c0014e15:	5e                   	pop    esi
c0014e16:	5f                   	pop    edi
c0014e17:	c3                   	ret    
c0014e18:	b8 01 00 00 00       	mov    eax,0x1
c0014e1d:	d3 e0                	shl    eax,cl
c0014e1f:	09 c6                	or     esi,eax
c0014e21:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e28:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014e2b:	c1 e0 05             	shl    eax,0x5
c0014e2e:	29 c8                	sub    eax,ecx
c0014e30:	01 d8                	add    eax,ebx
c0014e32:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e39:	75 0d                	jne    c0014e48 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014e3b:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014e45:	8d 76 00             	lea    esi,[esi+0x0]
c0014e48:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e4e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014e51:	83 ec 0c             	sub    esp,0xc
c0014e54:	c1 e6 05             	shl    esi,0x5
c0014e57:	29 ce                	sub    esi,ecx
c0014e59:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e5c:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014e5f:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e65:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014e6b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e71:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014e78:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e7e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e82:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e88:	89 ca                	mov    edx,ecx
c0014e8a:	f7 da                	neg    edx
c0014e8c:	c1 e2 15             	shl    edx,0x15
c0014e8f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e95:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e9b:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0014e9f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014ea9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014eaf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014eb3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014eb9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014ec3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014ecd:	68 00 01 00 00       	push   0x100
c0014ed2:	e8 f4 2b ff ff       	call   c0007acb <malloc>
c0014ed7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014eda:	58                   	pop    eax
c0014edb:	5a                   	pop    edx
c0014edc:	53                   	push   ebx
c0014edd:	68 84 81 02 c0       	push   0xc0028184
c0014ee2:	e8 c9 9d 00 00       	call   c001ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ee7:	83 c4 10             	add    esp,0x10
c0014eea:	89 d8                	mov    eax,ebx
c0014eec:	5b                   	pop    ebx
c0014eed:	5e                   	pop    esi
c0014eee:	5f                   	pop    edi
c0014eef:	c3                   	ret    

c0014ef0 <Process::createUserThread()>:
c0014ef0:	83 ec 0c             	sub    esp,0xc
c0014ef3:	68 80 00 00 00       	push   0x80
c0014ef8:	6a 00                	push   0x0
c0014efa:	68 44 48 01 c0       	push   0xc0014844
c0014eff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f03:	50                   	push   eax
c0014f04:	e8 df fe ff ff       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0014f09:	83 c4 1c             	add    esp,0x1c
c0014f0c:	c3                   	ret    
c0014f0d:	8d 76 00             	lea    esi,[esi+0x0]

c0014f10 <setupMultitasking(void (*)())>:
c0014f10:	56                   	push   esi
c0014f11:	53                   	push   ebx
c0014f12:	83 ec 04             	sub    esp,0x4
c0014f15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f19:	eb 11                	jmp    c0014f2c <setupMultitasking(void (*)())+0x1c>
c0014f1b:	90                   	nop
c0014f1c:	83 ec 0c             	sub    esp,0xc
c0014f1f:	68 84 81 02 c0       	push   0xc0028184
c0014f24:	e8 cb 9c 00 00       	call   c001ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	83 ec 0c             	sub    esp,0xc
c0014f2f:	68 84 81 02 c0       	push   0xc0028184
c0014f34:	e8 97 9c 00 00       	call   c001ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f39:	83 c4 10             	add    esp,0x10
c0014f3c:	84 c0                	test   al,al
c0014f3e:	74 dc                	je     c0014f1c <setupMultitasking(void (*)())+0xc>
c0014f40:	83 ec 0c             	sub    esp,0xc
c0014f43:	68 24 07 00 00       	push   0x724
c0014f48:	e8 7e 2b ff ff       	call   c0007acb <malloc>
c0014f4d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f54:	6a 00                	push   0x0
c0014f56:	68 d5 11 02 c0       	push   0xc00211d5
c0014f5b:	6a 01                	push   0x1
c0014f5d:	50                   	push   eax
c0014f5e:	89 c3                	mov    ebx,eax
c0014f60:	e8 5f fc ff ff       	call   c0014bc4 <Process::Process(bool, char const*, Process*, char**)>
c0014f65:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f6b:	83 c4 14             	add    esp,0x14
c0014f6e:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f74:	50                   	push   eax
c0014f75:	e8 df 37 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0014f7a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f81:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f8b:	83 c8 01             	or     eax,0x1
c0014f8e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014f95:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014f9b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f9e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014fa8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014fae:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014fb8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014fbe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014fc8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014fd2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014fd8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014fde:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014fe8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014ff2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014ff9:	e8 cd 2a ff ff       	call   c0007acb <malloc>
c0014ffe:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015004:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001500a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015010:	5a                   	pop    edx
c0015011:	59                   	pop    ecx
c0015012:	68 d1 11 02 c0       	push   0xc00211d1
c0015017:	50                   	push   eax
c0015018:	e8 33 b6 fe ff       	call   c0000650 <strcpy>
c001501d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015024:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015028:	83 c4 14             	add    esp,0x14
c001502b:	5b                   	pop    ebx
c001502c:	5e                   	pop    esi
c001502d:	e9 37 b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015032:	66 90                	xchg   ax,ax

c0015034 <schedule()>:
c0015034:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c001503a:	85 d2                	test   edx,edx
c001503c:	74 0e                	je     c001504c <schedule()+0x18>
c001503e:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0015048:	c3                   	ret    
c0015049:	8d 76 00             	lea    esi,[esi+0x0]
c001504c:	53                   	push   ebx
c001504d:	83 ec 14             	sub    esp,0x14
c0015050:	68 84 81 02 c0       	push   0xc0028184
c0015055:	e8 76 9b 00 00       	call   c001ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001505a:	83 c4 10             	add    esp,0x10
c001505d:	84 c0                	test   al,al
c001505f:	75 3f                	jne    c00150a0 <schedule()+0x6c>
c0015061:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015066:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015069:	83 fa 01             	cmp    edx,0x1
c001506c:	74 3a                	je     c00150a8 <schedule()+0x74>
c001506e:	66 90                	xchg   ax,ax
c0015070:	83 ec 0c             	sub    esp,0xc
c0015073:	68 84 81 02 c0       	push   0xc0028184
c0015078:	e8 6f 9b 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001507d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015084:	89 c3                	mov    ebx,eax
c0015086:	e8 69 9b 00 00       	call   c001ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001508b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015092:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015095:	e8 02 f8 ff ff       	call   c001489c <switchToThread(ThreadControlBlock*)>
c001509a:	83 c4 10             	add    esp,0x10
c001509d:	8d 76 00             	lea    esi,[esi+0x0]
c00150a0:	83 c4 08             	add    esp,0x8
c00150a3:	5b                   	pop    ebx
c00150a4:	c3                   	ret    
c00150a5:	8d 76 00             	lea    esi,[esi+0x0]
c00150a8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00150af:	83 ec 08             	sub    esp,0x8
c00150b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150b7:	50                   	push   eax
c00150b8:	68 84 81 02 c0       	push   0xc0028184
c00150bd:	e8 ee 9b 00 00       	call   c001ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150c2:	83 c4 10             	add    esp,0x10
c00150c5:	eb a9                	jmp    c0015070 <schedule()+0x3c>
c00150c7:	90                   	nop

c00150c8 <Semaphore::tryAcquire()>:
c00150c8:	53                   	push   ebx
c00150c9:	83 ec 08             	sub    esp,0x8
c00150cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150d0:	fa                   	cli    
c00150d1:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00150d7:	8d 42 01             	lea    eax,[edx+0x1]
c00150da:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00150df:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00150e4:	8d 58 01             	lea    ebx,[eax+0x1]
c00150e7:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c00150ed:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00150f0:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00150f2:	7c 2c                	jl     c0015120 <Semaphore::tryAcquire()+0x58>
c00150f4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00150f9:	85 c0                	test   eax,eax
c00150fb:	75 0b                	jne    c0015108 <Semaphore::tryAcquire()+0x40>
c00150fd:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015102:	85 c0                	test   eax,eax
c0015104:	75 5a                	jne    c0015160 <Semaphore::tryAcquire()+0x98>
c0015106:	66 90                	xchg   ax,ax
c0015108:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001510e:	31 c0                	xor    eax,eax
c0015110:	85 d2                	test   edx,edx
c0015112:	75 04                	jne    c0015118 <Semaphore::tryAcquire()+0x50>
c0015114:	fb                   	sti    
c0015115:	8d 76 00             	lea    esi,[esi+0x0]
c0015118:	83 c4 08             	add    esp,0x8
c001511b:	5b                   	pop    ebx
c001511c:	c3                   	ret    
c001511d:	8d 76 00             	lea    esi,[esi+0x0]
c0015120:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015125:	83 c3 01             	add    ebx,0x1
c0015128:	85 c0                	test   eax,eax
c001512a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001512d:	75 21                	jne    c0015150 <Semaphore::tryAcquire()+0x88>
c001512f:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015135:	85 c9                	test   ecx,ecx
c0015137:	74 17                	je     c0015150 <Semaphore::tryAcquire()+0x88>
c0015139:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015143:	e8 ec fe ff ff       	call   c0015034 <schedule()>
c0015148:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001514d:	8d 50 ff             	lea    edx,[eax-0x1]
c0015150:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015156:	85 d2                	test   edx,edx
c0015158:	b0 01                	mov    al,0x1
c001515a:	75 bc                	jne    c0015118 <Semaphore::tryAcquire()+0x50>
c001515c:	eb b6                	jmp    c0015114 <Semaphore::tryAcquire()+0x4c>
c001515e:	66 90                	xchg   ax,ax
c0015160:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001516a:	e8 c5 fe ff ff       	call   c0015034 <schedule()>
c001516f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015174:	8d 50 ff             	lea    edx,[eax-0x1]
c0015177:	31 c0                	xor    eax,eax
c0015179:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001517f:	85 d2                	test   edx,edx
c0015181:	75 95                	jne    c0015118 <Semaphore::tryAcquire()+0x50>
c0015183:	eb 8f                	jmp    c0015114 <Semaphore::tryAcquire()+0x4c>
c0015185:	90                   	nop
c0015186:	66 90                	xchg   ax,ax

c0015188 <Semaphore::assertLocked(char const*)>:
c0015188:	83 ec 0c             	sub    esp,0xc
c001518b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001518f:	fa                   	cli    
c0015190:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015196:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001519b:	83 c1 01             	add    ecx,0x1
c001519e:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00151a4:	8d 48 01             	lea    ecx,[eax+0x1]
c00151a7:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00151ad:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00151af:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151b2:	7c 28                	jl     c00151dc <Semaphore::assertLocked(char const*)+0x54>
c00151b4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151b9:	85 c0                	test   eax,eax
c00151bb:	75 0b                	jne    c00151c8 <Semaphore::assertLocked(char const*)+0x40>
c00151bd:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151c2:	85 c0                	test   eax,eax
c00151c4:	75 32                	jne    c00151f8 <Semaphore::assertLocked(char const*)+0x70>
c00151c6:	66 90                	xchg   ax,ax
c00151c8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151cd:	83 e8 01             	sub    eax,0x1
c00151d0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151d5:	75 01                	jne    c00151d8 <Semaphore::assertLocked(char const*)+0x50>
c00151d7:	fb                   	sti    
c00151d8:	83 c4 0c             	add    esp,0xc
c00151db:	c3                   	ret    
c00151dc:	83 ec 0c             	sub    esp,0xc
c00151df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151e3:	52                   	push   edx
c00151e4:	e8 50 b6 ff ff       	call   c0010839 <KePanic(char const*)>
c00151e9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	83 e8 01             	sub    eax,0x1
c00151f4:	eb be                	jmp    c00151b4 <Semaphore::assertLocked(char const*)+0x2c>
c00151f6:	66 90                	xchg   ax,ax
c00151f8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015202:	e8 2d fe ff ff       	call   c0015034 <schedule()>
c0015207:	eb bf                	jmp    c00151c8 <Semaphore::assertLocked(char const*)+0x40>
c0015209:	8d 76 00             	lea    esi,[esi+0x0]

c001520c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001520c:	83 ec 0c             	sub    esp,0xc
c001520f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015218:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001521b:	e8 14 fe ff ff       	call   c0015034 <schedule()>
c0015220:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015225:	83 e8 01             	sub    eax,0x1
c0015228:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001522d:	75 01                	jne    c0015230 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001522f:	fb                   	sti    
c0015230:	83 c4 0c             	add    esp,0xc
c0015233:	c3                   	ret    

c0015234 <blockTask(TaskState)>:
c0015234:	83 ec 0c             	sub    esp,0xc
c0015237:	fa                   	cli    
c0015238:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001523d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015241:	83 c0 01             	add    eax,0x1
c0015244:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001524e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015251:	e8 de fd ff ff       	call   c0015034 <schedule()>
c0015256:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001525b:	83 e8 01             	sub    eax,0x1
c001525e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015263:	75 03                	jne    c0015268 <blockTask(TaskState)+0x34>
c0015265:	fb                   	sti    
c0015266:	66 90                	xchg   ax,ax
c0015268:	83 c4 0c             	add    esp,0xc
c001526b:	c3                   	ret    

c001526c <waitTask(int, int*, int)>:
c001526c:	83 ec 18             	sub    esp,0x18
c001526f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015274:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015278:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001527b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001527f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015284:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015287:	6a 07                	push   0x7
c0015289:	e8 a6 ff ff ff       	call   c0015234 <blockTask(TaskState)>
c001528e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015299:	85 d2                	test   edx,edx
c001529b:	74 0b                	je     c00152a8 <waitTask(int, int*, int)+0x3c>
c001529d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00152a0:	89 02                	mov    DWORD PTR [edx],eax
c00152a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a7:	90                   	nop
c00152a8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00152ab:	83 c4 0c             	add    esp,0xc
c00152ae:	c3                   	ret    
c00152af:	90                   	nop

c00152b0 <milliTenthSleepUntil(unsigned int)>:
c00152b0:	83 ec 0c             	sub    esp,0xc
c00152b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152b7:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152bd:	76 05                	jbe    c00152c4 <milliTenthSleepUntil(unsigned int)+0x14>
c00152bf:	90                   	nop
c00152c0:	83 c4 0c             	add    esp,0xc
c00152c3:	c3                   	ret    
c00152c4:	fa                   	cli    
c00152c5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00152cb:	83 ec 08             	sub    esp,0x8
c00152ce:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00152d4:	83 c2 01             	add    edx,0x1
c00152d7:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00152dd:	83 c1 01             	add    ecx,0x1
c00152e0:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00152e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00152ec:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00152ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f4:	50                   	push   eax
c00152f5:	68 78 81 02 c0       	push   0xc0028178
c00152fa:	e8 b1 99 00 00       	call   c001ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00152ff:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015306:	e8 29 ff ff ff       	call   c0015234 <blockTask(TaskState)>
c001530b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	83 e8 01             	sub    eax,0x1
c0015316:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001531b:	85 c0                	test   eax,eax
c001531d:	75 09                	jne    c0015328 <milliTenthSleepUntil(unsigned int)+0x78>
c001531f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015324:	85 c0                	test   eax,eax
c0015326:	75 14                	jne    c001533c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015328:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001532d:	83 e8 01             	sub    eax,0x1
c0015330:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015335:	75 89                	jne    c00152c0 <milliTenthSleepUntil(unsigned int)+0x10>
c0015337:	fb                   	sti    
c0015338:	83 c4 0c             	add    esp,0xc
c001533b:	c3                   	ret    
c001533c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015346:	e8 e9 fc ff ff       	call   c0015034 <schedule()>
c001534b:	eb db                	jmp    c0015328 <milliTenthSleepUntil(unsigned int)+0x78>
c001534d:	8d 76 00             	lea    esi,[esi+0x0]

c0015350 <milliTenthSleep(unsigned int)>:
c0015350:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015354:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015359:	01 c2                	add    edx,eax
c001535b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001535f:	e9 4c ff ff ff       	jmp    c00152b0 <milliTenthSleepUntil(unsigned int)>

c0015364 <sleep(unsigned int)>:
c0015364:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c001536c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015370:	eb de                	jmp    c0015350 <milliTenthSleep(unsigned int)>
c0015372:	66 90                	xchg   ax,ax

c0015374 <Semaphore::acquire()>:
c0015374:	83 ec 0c             	sub    esp,0xc
c0015377:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001537b:	fa                   	cli    
c001537c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015381:	83 c0 01             	add    eax,0x1
c0015384:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015389:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001538e:	8d 48 01             	lea    ecx,[eax+0x1]
c0015391:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015397:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001539a:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001539c:	7d 2e                	jge    c00153cc <Semaphore::acquire()+0x58>
c001539e:	83 c1 01             	add    ecx,0x1
c00153a1:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00153a4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153a9:	85 c0                	test   eax,eax
c00153ab:	75 0b                	jne    c00153b8 <Semaphore::acquire()+0x44>
c00153ad:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153b2:	85 c0                	test   eax,eax
c00153b4:	75 66                	jne    c001541c <Semaphore::acquire()+0xa8>
c00153b6:	66 90                	xchg   ax,ax
c00153b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153bd:	83 e8 01             	sub    eax,0x1
c00153c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153c5:	75 01                	jne    c00153c8 <Semaphore::acquire()+0x54>
c00153c7:	fb                   	sti    
c00153c8:	83 c4 0c             	add    esp,0xc
c00153cb:	c3                   	ret    
c00153cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00153d8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00153db:	85 c9                	test   ecx,ecx
c00153dd:	74 51                	je     c0015430 <Semaphore::acquire()+0xbc>
c00153df:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00153e2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153e8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00153eb:	90                   	nop
c00153ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153f1:	83 ec 0c             	sub    esp,0xc
c00153f4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00153f7:	68 54 12 02 c0       	push   0xc0021254
c00153fc:	e8 6e 55 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0015401:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015408:	e8 27 fe ff ff       	call   c0015234 <blockTask(TaskState)>
c001540d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015412:	83 c4 10             	add    esp,0x10
c0015415:	83 e8 01             	sub    eax,0x1
c0015418:	eb 8a                	jmp    c00153a4 <Semaphore::acquire()+0x30>
c001541a:	66 90                	xchg   ax,ax
c001541c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015426:	e8 09 fc ff ff       	call   c0015034 <schedule()>
c001542b:	eb 8b                	jmp    c00153b8 <Semaphore::acquire()+0x44>
c001542d:	8d 76 00             	lea    esi,[esi+0x0]
c0015430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015435:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015438:	eb b2                	jmp    c00153ec <Semaphore::acquire()+0x78>
c001543a:	66 90                	xchg   ax,ax

c001543c <taskReturned>:
c001543c:	83 ec 18             	sub    esp,0x18
c001543f:	68 74 12 02 c0       	push   0xc0021274
c0015444:	e8 f0 b3 ff ff       	call   c0010839 <KePanic(char const*)>
c0015449:	83 c4 10             	add    esp,0x10
c001544c:	83 ec 0c             	sub    esp,0xc
c001544f:	6a 02                	push   0x2
c0015451:	e8 de fd ff ff       	call   c0015234 <blockTask(TaskState)>
c0015456:	fa                   	cli    
c0015457:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001545c:	83 c0 01             	add    eax,0x1
c001545f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015464:	e8 cb fb ff ff       	call   c0015034 <schedule()>
c0015469:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001546e:	83 c4 10             	add    esp,0x10
c0015471:	83 e8 01             	sub    eax,0x1
c0015474:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015479:	85 c0                	test   eax,eax
c001547b:	75 cf                	jne    c001544c <taskReturned+0x10>
c001547d:	fb                   	sti    
c001547e:	eb cc                	jmp    c001544c <taskReturned+0x10>

c0015480 <Thr::processFromPID(int)>:
c0015480:	57                   	push   edi
c0015481:	56                   	push   esi
c0015482:	53                   	push   ebx
c0015483:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015487:	fa                   	cli    
c0015488:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001548e:	83 ec 0c             	sub    esp,0xc
c0015491:	68 84 81 02 c0       	push   0xc0028184
c0015496:	83 c1 01             	add    ecx,0x1
c0015499:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c001549f:	e8 48 97 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154a4:	83 c4 10             	add    esp,0x10
c00154a7:	89 c7                	mov    edi,eax
c00154a9:	eb 15                	jmp    c00154c0 <Thr::processFromPID(int)+0x40>
c00154ab:	90                   	nop
c00154ac:	83 ec 0c             	sub    esp,0xc
c00154af:	68 84 81 02 c0       	push   0xc0028184
c00154b4:	e8 33 97 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154b9:	83 c4 10             	add    esp,0x10
c00154bc:	39 f8                	cmp    eax,edi
c00154be:	74 50                	je     c0015510 <Thr::processFromPID(int)+0x90>
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	68 84 81 02 c0       	push   0xc0028184
c00154c8:	e8 1f 97 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154cd:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154d4:	89 c3                	mov    ebx,eax
c00154d6:	e8 19 97 00 00       	call   c001ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154db:	58                   	pop    eax
c00154dc:	5a                   	pop    edx
c00154dd:	53                   	push   ebx
c00154de:	68 84 81 02 c0       	push   0xc0028184
c00154e3:	e8 c8 97 00 00       	call   c001ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00154e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00154eb:	83 c4 10             	add    esp,0x10
c00154ee:	39 30                	cmp    DWORD PTR [eax],esi
c00154f0:	75 ba                	jne    c00154ac <Thr::processFromPID(int)+0x2c>
c00154f2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154f7:	83 e8 01             	sub    eax,0x1
c00154fa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154ff:	74 0b                	je     c001550c <Thr::processFromPID(int)+0x8c>
c0015501:	8d 76 00             	lea    esi,[esi+0x0]
c0015504:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015507:	90                   	nop
c0015508:	5b                   	pop    ebx
c0015509:	5e                   	pop    esi
c001550a:	5f                   	pop    edi
c001550b:	c3                   	ret    
c001550c:	fb                   	sti    
c001550d:	eb f5                	jmp    c0015504 <Thr::processFromPID(int)+0x84>
c001550f:	90                   	nop
c0015510:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015515:	8d 50 ff             	lea    edx,[eax-0x1]
c0015518:	31 c0                	xor    eax,eax
c001551a:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015520:	85 d2                	test   edx,edx
c0015522:	75 e4                	jne    c0015508 <Thr::processFromPID(int)+0x88>
c0015524:	fb                   	sti    
c0015525:	5b                   	pop    ebx
c0015526:	5e                   	pop    esi
c0015527:	5f                   	pop    edi
c0015528:	c3                   	ret    
c0015529:	8d 76 00             	lea    esi,[esi+0x0]

c001552c <unblockTask(ThreadControlBlock*)>:
c001552c:	53                   	push   ebx
c001552d:	83 ec 08             	sub    esp,0x8
c0015530:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015534:	fa                   	cli    
c0015535:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001553a:	83 c0 01             	add    eax,0x1
c001553d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015542:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015545:	85 c0                	test   eax,eax
c0015547:	74 67                	je     c00155b0 <unblockTask(ThreadControlBlock*)+0x84>
c0015549:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001554c:	83 f8 01             	cmp    eax,0x1
c001554f:	74 37                	je     c0015588 <unblockTask(ThreadControlBlock*)+0x5c>
c0015551:	83 ec 0c             	sub    esp,0xc
c0015554:	68 84 81 02 c0       	push   0xc0028184
c0015559:	e8 8e 96 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001555e:	83 c4 10             	add    esp,0x10
c0015561:	85 c0                	test   eax,eax
c0015563:	75 1b                	jne    c0015580 <unblockTask(ThreadControlBlock*)+0x54>
c0015565:	eb 5d                	jmp    c00155c4 <unblockTask(ThreadControlBlock*)+0x98>
c0015567:	90                   	nop
c0015568:	83 ec 08             	sub    esp,0x8
c001556b:	50                   	push   eax
c001556c:	68 84 81 02 c0       	push   0xc0028184
c0015571:	e8 96 99 00 00       	call   c001ef0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015576:	83 c4 10             	add    esp,0x10
c0015579:	85 c0                	test   eax,eax
c001557b:	74 47                	je     c00155c4 <unblockTask(ThreadControlBlock*)+0x98>
c001557d:	8d 76 00             	lea    esi,[esi+0x0]
c0015580:	39 c3                	cmp    ebx,eax
c0015582:	75 e4                	jne    c0015568 <unblockTask(ThreadControlBlock*)+0x3c>
c0015584:	eb 12                	jmp    c0015598 <unblockTask(ThreadControlBlock*)+0x6c>
c0015586:	66 90                	xchg   ax,ax
c0015588:	83 ec 0c             	sub    esp,0xc
c001558b:	68 f3 11 02 c0       	push   0xc00211f3
c0015590:	e8 da 53 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0015595:	83 c4 10             	add    esp,0x10
c0015598:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001559d:	83 e8 01             	sub    eax,0x1
c00155a0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155a5:	75 01                	jne    c00155a8 <unblockTask(ThreadControlBlock*)+0x7c>
c00155a7:	fb                   	sti    
c00155a8:	83 c4 08             	add    esp,0x8
c00155ab:	5b                   	pop    ebx
c00155ac:	c3                   	ret    
c00155ad:	8d 76 00             	lea    esi,[esi+0x0]
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	68 dc 11 02 c0       	push   0xc00211dc
c00155b8:	e8 b2 53 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00155bd:	83 c4 10             	add    esp,0x10
c00155c0:	eb d6                	jmp    c0015598 <unblockTask(ThreadControlBlock*)+0x6c>
c00155c2:	66 90                	xchg   ax,ax
c00155c4:	83 ec 08             	sub    esp,0x8
c00155c7:	53                   	push   ebx
c00155c8:	68 84 81 02 c0       	push   0xc0028184
c00155cd:	e8 de 96 00 00       	call   c001ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155d2:	83 c4 10             	add    esp,0x10
c00155d5:	eb c1                	jmp    c0015598 <unblockTask(ThreadControlBlock*)+0x6c>
c00155d7:	90                   	nop

c00155d8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00155d8:	55                   	push   ebp
c00155d9:	57                   	push   edi
c00155da:	56                   	push   esi
c00155db:	53                   	push   ebx
c00155dc:	83 ec 1c             	sub    esp,0x1c
c00155df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00155e3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155e6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00155ec:	85 ed                	test   ebp,ebp
c00155ee:	7e 28                	jle    c0015618 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00155f0:	31 f6                	xor    esi,esi
c00155f2:	66 90                	xchg   ax,ax
c00155f4:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00155fb:	83 ec 0c             	sub    esp,0xc
c00155fe:	83 c6 01             	add    esi,0x1
c0015601:	57                   	push   edi
c0015602:	e8 d4 24 ff ff       	call   c0007adb <free>
c0015607:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015613:	7f df                	jg     c00155f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015615:	8d 76 00             	lea    esi,[esi+0x0]
c0015618:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015622:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015627:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001562a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001562d:	d3 c0                	rol    eax,cl
c001562f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015636:	21 c8                	and    eax,ecx
c0015638:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001563f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015642:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001564a:	89 f7                	mov    edi,esi
c001564c:	0f 85 72 01 00 00    	jne    c00157c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015652:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015658:	85 ed                	test   ebp,ebp
c001565a:	74 1c                	je     c0015678 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001565c:	83 ec 0c             	sub    esp,0xc
c001565f:	55                   	push   ebp
c0015660:	e8 e5 ae ff ff       	call   c001054a <EnvVarContainer::~EnvVarContainer()>
c0015665:	59                   	pop    ecx
c0015666:	5e                   	pop    esi
c0015667:	6a 0c                	push   0xc
c0015669:	55                   	push   ebp
c001566a:	e8 02 52 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001566f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015672:	83 c4 10             	add    esp,0x10
c0015675:	89 f7                	mov    edi,esi
c0015677:	90                   	nop
c0015678:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001567e:	85 c0                	test   eax,eax
c0015680:	0f 84 b2 00 00 00    	je     c0015738 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015686:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015689:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001568d:	31 c9                	xor    ecx,ecx
c001568f:	eb 17                	jmp    c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015691:	8d 76 00             	lea    esi,[esi+0x0]
c0015694:	83 c1 01             	add    ecx,0x1
c0015697:	83 f9 10             	cmp    ecx,0x10
c001569a:	0f 84 98 00 00 00    	je     c0015738 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00156a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156a6:	66 90                	xchg   ax,ax
c00156a8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00156af:	d3 fa                	sar    edx,cl
c00156b1:	80 e2 01             	and    dl,0x1
c00156b4:	74 de                	je     c0015694 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156b6:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00156b9:	c1 e2 05             	shl    edx,0x5
c00156bc:	29 ca                	sub    edx,ecx
c00156be:	01 d0                	add    eax,edx
c00156c0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00156c6:	83 fd 07             	cmp    ebp,0x7
c00156c9:	75 c9                	jne    c0015694 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156cb:	05 40 02 00 00       	add    eax,0x240
c00156d0:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00156d3:	83 fd ff             	cmp    ebp,0xffffffff
c00156d6:	0f 8c f0 00 00 00    	jl     c00157cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00156dc:	0f 84 ae 01 00 00    	je     c0015890 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00156e2:	85 ed                	test   ebp,ebp
c00156e4:	0f 84 92 01 00 00    	je     c001587c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00156ea:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00156ec:	75 a6                	jne    c0015694 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00156f2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156f8:	01 d0                	add    eax,edx
c00156fa:	66 90                	xchg   ax,ax
c00156fc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015709:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001570c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015712:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015719:	50                   	push   eax
c001571a:	e8 0d fe ff ff       	call   c001552c <unblockTask(ThreadControlBlock*)>
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015725:	89 f7                	mov    edi,esi
c0015727:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001572b:	83 c1 01             	add    ecx,0x1
c001572e:	83 f9 10             	cmp    ecx,0x10
c0015731:	0f 85 69 ff ff ff    	jne    c00156a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015737:	90                   	nop
c0015738:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001573e:	85 c0                	test   eax,eax
c0015740:	74 62                	je     c00157a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015742:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015748:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001574e:	74 54                	je     c00157a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015750:	83 ec 0c             	sub    esp,0xc
c0015753:	68 84 81 02 c0       	push   0xc0028184
c0015758:	e8 8f 94 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001575d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015764:	89 c7                	mov    edi,eax
c0015766:	e8 65 94 00 00       	call   c001ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001576b:	83 c4 10             	add    esp,0x10
c001576e:	84 c0                	test   al,al
c0015770:	0f 84 ce 00 00 00    	je     c0015844 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015776:	66 90                	xchg   ax,ax
c0015778:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001577b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015781:	85 d2                	test   edx,edx
c0015783:	74 0f                	je     c0015794 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015785:	8b 02                	mov    eax,DWORD PTR [edx]
c0015787:	83 ec 0c             	sub    esp,0xc
c001578a:	52                   	push   edx
c001578b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001578e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001579e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00157a1:	8d 76 00             	lea    esi,[esi+0x0]
c00157a4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00157aa:	85 db                	test   ebx,ebx
c00157ac:	74 16                	je     c00157c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00157ae:	83 ec 0c             	sub    esp,0xc
c00157b1:	53                   	push   ebx
c00157b2:	e8 bf 43 ff ff       	call   c0009b76 <VAS::~VAS()>
c00157b7:	58                   	pop    eax
c00157b8:	5a                   	pop    edx
c00157b9:	6a 14                	push   0x14
c00157bb:	53                   	push   ebx
c00157bc:	e8 b0 50 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c00157c1:	83 c4 10             	add    esp,0x10
c00157c4:	83 c4 1c             	add    esp,0x1c
c00157c7:	5b                   	pop    ebx
c00157c8:	5e                   	pop    esi
c00157c9:	5f                   	pop    edi
c00157ca:	5d                   	pop    ebp
c00157cb:	c3                   	ret    
c00157cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157d0:	83 ec 0c             	sub    esp,0xc
c00157d3:	68 a8 12 02 c0       	push   0xc00212a8
c00157d8:	e8 5c b0 ff ff       	call   c0010839 <KePanic(char const*)>
c00157dd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157e0:	83 c4 10             	add    esp,0x10
c00157e3:	89 f7                	mov    edi,esi
c00157e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157e9:	e9 a6 fe ff ff       	jmp    c0015694 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00157ee:	66 90                	xchg   ax,ax
c00157f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157f6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00157fc:	75 1e                	jne    c001581c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00157fe:	83 ec 0c             	sub    esp,0xc
c0015801:	68 10 13 02 c0       	push   0xc0021310
c0015806:	e8 64 51 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001580b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015812:	e8 1d fa ff ff       	call   c0015234 <blockTask(TaskState)>
c0015817:	83 c4 10             	add    esp,0x10
c001581a:	66 90                	xchg   ax,ax
c001581c:	83 ec 08             	sub    esp,0x8
c001581f:	56                   	push   esi
c0015820:	68 84 81 02 c0       	push   0xc0028184
c0015825:	e8 86 94 00 00       	call   c001ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001582a:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015831:	e8 b6 93 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015836:	83 c4 10             	add    esp,0x10
c0015839:	39 f8                	cmp    eax,edi
c001583b:	0f 84 37 ff ff ff    	je     c0015778 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015841:	8d 76 00             	lea    esi,[esi+0x0]
c0015844:	83 ec 0c             	sub    esp,0xc
c0015847:	68 84 81 02 c0       	push   0xc0028184
c001584c:	e8 9b 93 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015851:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015858:	89 c6                	mov    esi,eax
c001585a:	e8 95 93 00 00       	call   c001ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001585f:	83 c4 10             	add    esp,0x10
c0015862:	39 f3                	cmp    ebx,esi
c0015864:	74 b6                	je     c001581c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015866:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015869:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001586c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015872:	75 a8                	jne    c001581c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015874:	e9 77 ff ff ff       	jmp    c00157f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015879:	8d 76 00             	lea    esi,[esi+0x0]
c001587c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	68 dc 12 02 c0       	push   0xc00212dc
c0015888:	e9 4b ff ff ff       	jmp    c00157d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c001588d:	8d 76 00             	lea    esi,[esi+0x0]
c0015890:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015894:	8b 36                	mov    esi,DWORD PTR [esi]
c0015896:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015899:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001589c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00158a2:	01 d7                	add    edi,edx
c00158a4:	89 f8                	mov    eax,edi
c00158a6:	e9 51 fe ff ff       	jmp    c00156fc <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00158ab:	90                   	nop

c00158ac <cleanerTaskFunction(void*)>:
c00158ac:	53                   	push   ebx
c00158ad:	83 ec 08             	sub    esp,0x8
c00158b0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158b5:	83 e8 01             	sub    eax,0x1
c00158b8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158bd:	75 01                	jne    c00158c0 <cleanerTaskFunction(void*)+0x14>
c00158bf:	fb                   	sti    
c00158c0:	fa                   	cli    
c00158c1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158c6:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c00158cd:	8d 50 01             	lea    edx,[eax+0x1]
c00158d0:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158d6:	0f 84 c4 00 00 00    	je     c00159a0 <cleanerTaskFunction(void*)+0xf4>
c00158dc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158e1:	85 c0                	test   eax,eax
c00158e3:	75 03                	jne    c00158e8 <cleanerTaskFunction(void*)+0x3c>
c00158e5:	fb                   	sti    
c00158e6:	66 90                	xchg   ax,ax
c00158e8:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c00158ef:	fa                   	cli    
c00158f0:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00158f6:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00158fc:	83 c2 01             	add    edx,0x1
c00158ff:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015905:	83 c1 01             	add    ecx,0x1
c0015908:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001590e:	fa                   	cli    
c001590f:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015915:	83 c3 01             	add    ebx,0x1
c0015918:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c001591e:	eb 28                	jmp    c0015948 <cleanerTaskFunction(void*)+0x9c>
c0015920:	83 ec 0c             	sub    esp,0xc
c0015923:	68 6c 81 02 c0       	push   0xc002816c
c0015928:	e8 bf 92 00 00       	call   c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001592d:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015934:	89 c3                	mov    ebx,eax
c0015936:	e8 b9 92 00 00       	call   c001ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001593b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001593e:	e8 95 fc ff ff       	call   c00155d8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015943:	83 c4 10             	add    esp,0x10
c0015946:	66 90                	xchg   ax,ax
c0015948:	83 ec 0c             	sub    esp,0xc
c001594b:	68 6c 81 02 c0       	push   0xc002816c
c0015950:	e8 7b 92 00 00       	call   c001ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015955:	83 c4 10             	add    esp,0x10
c0015958:	84 c0                	test   al,al
c001595a:	74 c4                	je     c0015920 <cleanerTaskFunction(void*)+0x74>
c001595c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015961:	83 e8 01             	sub    eax,0x1
c0015964:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015969:	75 01                	jne    c001596c <cleanerTaskFunction(void*)+0xc0>
c001596b:	fb                   	sti    
c001596c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015971:	83 e8 01             	sub    eax,0x1
c0015974:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015979:	0f 85 31 ff ff ff    	jne    c00158b0 <cleanerTaskFunction(void*)+0x4>
c001597f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015984:	85 c0                	test   eax,eax
c0015986:	0f 84 24 ff ff ff    	je     c00158b0 <cleanerTaskFunction(void*)+0x4>
c001598c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015996:	e8 99 f6 ff ff       	call   c0015034 <schedule()>
c001599b:	e9 10 ff ff ff       	jmp    c00158b0 <cleanerTaskFunction(void*)+0x4>
c00159a0:	83 ec 0c             	sub    esp,0xc
c00159a3:	6a 02                	push   0x2
c00159a5:	e8 62 f8 ff ff       	call   c001520c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00159aa:	83 c4 10             	add    esp,0x10
c00159ad:	e9 36 ff ff ff       	jmp    c00158e8 <cleanerTaskFunction(void*)+0x3c>
c00159b2:	66 90                	xchg   ax,ax

c00159b4 <terminateTask(int)>:
c00159b4:	83 ec 14             	sub    esp,0x14
c00159b7:	fa                   	cli    
c00159b8:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159be:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159c4:	83 c2 01             	add    edx,0x1
c00159c7:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159cd:	83 c1 01             	add    ecx,0x1
c00159d0:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159d6:	fa                   	cli    
c00159d7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00159e0:	83 c0 01             	add    eax,0x1
c00159e3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ed:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00159f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159f5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00159f8:	50                   	push   eax
c00159f9:	68 6c 81 02 c0       	push   0xc002816c
c00159fe:	e8 ad 92 00 00       	call   c001ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a08:	83 c4 10             	add    esp,0x10
c0015a0b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a12:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a17:	85 c0                	test   eax,eax
c0015a19:	74 65                	je     c0015a80 <terminateTask(int)+0xcc>
c0015a1b:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015a22:	83 ec 0c             	sub    esp,0xc
c0015a25:	50                   	push   eax
c0015a26:	e8 01 fb ff ff       	call   c001552c <unblockTask(ThreadControlBlock*)>
c0015a2b:	83 c4 10             	add    esp,0x10
c0015a2e:	66 90                	xchg   ax,ax
c0015a30:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a35:	83 e8 01             	sub    eax,0x1
c0015a38:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a3d:	75 01                	jne    c0015a40 <terminateTask(int)+0x8c>
c0015a3f:	fb                   	sti    
c0015a40:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a45:	83 e8 01             	sub    eax,0x1
c0015a48:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a4d:	75 09                	jne    c0015a58 <terminateTask(int)+0xa4>
c0015a4f:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a56:	75 3c                	jne    c0015a94 <terminateTask(int)+0xe0>
c0015a58:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a5d:	83 e8 01             	sub    eax,0x1
c0015a60:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a65:	75 01                	jne    c0015a68 <terminateTask(int)+0xb4>
c0015a67:	fb                   	sti    
c0015a68:	fa                   	cli    
c0015a69:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a6e:	83 c0 01             	add    eax,0x1
c0015a71:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a76:	66 90                	xchg   ax,ax
c0015a78:	e8 b7 f5 ff ff       	call   c0015034 <schedule()>
c0015a7d:	eb d9                	jmp    c0015a58 <terminateTask(int)+0xa4>
c0015a7f:	90                   	nop
c0015a80:	83 ec 0c             	sub    esp,0xc
c0015a83:	68 0a 12 02 c0       	push   0xc002120a
c0015a88:	e8 e2 4e ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0015a8d:	83 c4 10             	add    esp,0x10
c0015a90:	eb 9e                	jmp    c0015a30 <terminateTask(int)+0x7c>
c0015a92:	66 90                	xchg   ax,ax
c0015a94:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a9e:	eb d8                	jmp    c0015a78 <terminateTask(int)+0xc4>

c0015aa0 <Thr::terminateFromIRQ(int)>:
c0015aa0:	83 ec 18             	sub    esp,0x18
c0015aa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015aa7:	50                   	push   eax
c0015aa8:	e8 07 ff ff ff       	call   c00159b4 <terminateTask(int)>
c0015aad:	90                   	nop
c0015aae:	66 90                	xchg   ax,ax

c0015ab0 <Semaphore::release()>:
c0015ab0:	83 ec 0c             	sub    esp,0xc
c0015ab3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ab7:	fa                   	cli    
c0015ab8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015abd:	83 c0 01             	add    eax,0x1
c0015ac0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ac5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015aca:	8d 48 01             	lea    ecx,[eax+0x1]
c0015acd:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015ad3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015ad6:	85 c9                	test   ecx,ecx
c0015ad8:	74 42                	je     c0015b1c <Semaphore::release()+0x6c>
c0015ada:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015add:	83 ec 0c             	sub    esp,0xc
c0015ae0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ae3:	51                   	push   ecx
c0015ae4:	e8 43 fa ff ff       	call   c001552c <unblockTask(ThreadControlBlock*)>
c0015ae9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	83 e8 01             	sub    eax,0x1
c0015af4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015af9:	85 c0                	test   eax,eax
c0015afb:	75 0b                	jne    c0015b08 <Semaphore::release()+0x58>
c0015afd:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015b02:	85 c0                	test   eax,eax
c0015b04:	75 22                	jne    c0015b28 <Semaphore::release()+0x78>
c0015b06:	66 90                	xchg   ax,ax
c0015b08:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b0d:	83 e8 01             	sub    eax,0x1
c0015b10:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b15:	75 01                	jne    c0015b18 <Semaphore::release()+0x68>
c0015b17:	fb                   	sti    
c0015b18:	83 c4 0c             	add    esp,0xc
c0015b1b:	c3                   	ret    
c0015b1c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015b1f:	83 e9 01             	sub    ecx,0x1
c0015b22:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015b25:	eb cd                	jmp    c0015af4 <Semaphore::release()+0x44>
c0015b27:	90                   	nop
c0015b28:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b32:	e8 fd f4 ff ff       	call   c0015034 <schedule()>
c0015b37:	eb cf                	jmp    c0015b08 <Semaphore::release()+0x58>
c0015b39:	8d 76 00             	lea    esi,[esi+0x0]

c0015b3c <__static_initialization_and_destruction_0(int, int)>:
c0015b3c:	83 ec 0c             	sub    esp,0xc
c0015b3f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015b44:	0f 85 8e 00 00 00    	jne    c0015bd8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b4a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015b52:	0f 85 80 00 00 00    	jne    c0015bd8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b58:	83 ec 0c             	sub    esp,0xc
c0015b5b:	68 84 81 02 c0       	push   0xc0028184
c0015b60:	e8 ff 93 00 00       	call   c001ef64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b65:	83 c4 10             	add    esp,0x10
c0015b68:	83 ec 04             	sub    esp,0x4
c0015b6b:	68 a4 1e 02 c0       	push   0xc0021ea4
c0015b70:	68 84 81 02 c0       	push   0xc0028184
c0015b75:	68 14 ef 01 c0       	push   0xc001ef14
c0015b7a:	e8 a2 4c ff ff       	call   c000a821 <__cxa_atexit>
c0015b7f:	83 c4 10             	add    esp,0x10
c0015b82:	83 ec 0c             	sub    esp,0xc
c0015b85:	68 78 81 02 c0       	push   0xc0028178
c0015b8a:	e8 d5 93 00 00       	call   c001ef64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b8f:	83 c4 10             	add    esp,0x10
c0015b92:	83 ec 04             	sub    esp,0x4
c0015b95:	68 a4 1e 02 c0       	push   0xc0021ea4
c0015b9a:	68 78 81 02 c0       	push   0xc0028178
c0015b9f:	68 14 ef 01 c0       	push   0xc001ef14
c0015ba4:	e8 78 4c ff ff       	call   c000a821 <__cxa_atexit>
c0015ba9:	83 c4 10             	add    esp,0x10
c0015bac:	83 ec 0c             	sub    esp,0xc
c0015baf:	68 6c 81 02 c0       	push   0xc002816c
c0015bb4:	e8 ab 93 00 00       	call   c001ef64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bb9:	83 c4 10             	add    esp,0x10
c0015bbc:	83 ec 04             	sub    esp,0x4
c0015bbf:	68 a4 1e 02 c0       	push   0xc0021ea4
c0015bc4:	68 6c 81 02 c0       	push   0xc002816c
c0015bc9:	68 14 ef 01 c0       	push   0xc001ef14
c0015bce:	e8 4e 4c ff ff       	call   c000a821 <__cxa_atexit>
c0015bd3:	83 c4 10             	add    esp,0x10
c0015bd6:	66 90                	xchg   ax,ax
c0015bd8:	90                   	nop
c0015bd9:	83 c4 0c             	add    esp,0xc
c0015bdc:	c3                   	ret    
c0015bdd:	8d 76 00             	lea    esi,[esi+0x0]

c0015be0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015be0:	83 ec 0c             	sub    esp,0xc
c0015be3:	83 ec 08             	sub    esp,0x8
c0015be6:	68 ff ff 00 00       	push   0xffff
c0015beb:	6a 01                	push   0x1
c0015bed:	e8 4a ff ff ff       	call   c0015b3c <__static_initialization_and_destruction_0(int, int)>
c0015bf2:	83 c4 10             	add    esp,0x10
c0015bf5:	83 c4 0c             	add    esp,0xc
c0015bf8:	c3                   	ret    

c0015bf9 <Vm::inbv(unsigned short)>:
c0015bf9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015bfd:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c02:	75 06                	jne    c0015c0a <Vm::inbv(unsigned short)+0x11>
c0015c04:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c09:	c3                   	ret    
c0015c0a:	ec                   	in     al,dx
c0015c0b:	c3                   	ret    

c0015c0c <Vm::outbv(unsigned short, unsigned char)>:
c0015c0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c14:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c19:	75 25                	jne    c0015c40 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015c1b:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c21:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c27:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c2a:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c30:	83 fa 20             	cmp    edx,0x20
c0015c33:	75 0c                	jne    c0015c41 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015c35:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c3f:	c3                   	ret    
c0015c40:	ee                   	out    dx,al
c0015c41:	c3                   	ret    

c0015c42 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c4c:	c1 e0 04             	shl    eax,0x4
c0015c4f:	01 d0                	add    eax,edx
c0015c51:	c3                   	ret    

c0015c52 <Vm::getSegment(unsigned int)>:
c0015c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c56:	c1 e8 10             	shr    eax,0x10
c0015c59:	c3                   	ret    

c0015c5a <Vm::getOffset(unsigned int)>:
c0015c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c5e:	c3                   	ret    

c0015c5f <Vm::mainloop2()>:
c0015c5f:	83 ec 18             	sub    esp,0x18
c0015c62:	fa                   	cli    
c0015c63:	6a 02                	push   0x2
c0015c65:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c6b:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c72:	e8 95 f5 ff ff       	call   c001520c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c7c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c80:	52                   	push   edx
c0015c81:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c85:	52                   	push   edx
c0015c86:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c8a:	52                   	push   edx
c0015c8b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015c8f:	50                   	push   eax
c0015c90:	e8 7a a5 fe ff       	call   c000020f <goToVM86>
c0015c95:	83 c4 2c             	add    esp,0x2c
c0015c98:	c3                   	ret    

c0015c99 <Vm::mainVm8086Loop(void*)>:
c0015c99:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c9e:	48                   	dec    eax
c0015c9f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ca4:	75 01                	jne    c0015ca7 <Vm::mainVm8086Loop(void*)+0xe>
c0015ca6:	fb                   	sti    
c0015ca7:	eb b6                	jmp    c0015c5f <Vm::mainloop2()>

c0015ca9 <Vm::mainloop3(unsigned long)>:
c0015ca9:	83 ec 18             	sub    esp,0x18
c0015cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cb0:	fa                   	cli    
c0015cb1:	6a 02                	push   0x2
c0015cb3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015cb9:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cc0:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015cc5:	e8 42 f5 ff ff       	call   c001520c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015cca:	83 c4 1c             	add    esp,0x1c
c0015ccd:	eb 90                	jmp    c0015c5f <Vm::mainloop2()>

c0015ccf <Vm::initialise8086()>:
c0015ccf:	83 ec 0c             	sub    esp,0xc
c0015cd2:	68 80 00 00 00       	push   0x80
c0015cd7:	6a 00                	push   0x0
c0015cd9:	68 99 5c 01 c0       	push   0xc0015c99
c0015cde:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015ce4:	e8 ff f0 ff ff       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0015ce9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015cf0:	68 00 01 00 00       	push   0x100
c0015cf5:	6a 00                	push   0x0
c0015cf7:	6a 00                	push   0x0
c0015cf9:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015cfe:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d03:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d09:	e8 f0 42 ff ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d0e:	83 c4 2c             	add    esp,0x2c
c0015d11:	c3                   	ret    

c0015d12 <Vm::finish8086()>:
c0015d12:	53                   	push   ebx
c0015d13:	83 ec 08             	sub    esp,0x8
c0015d16:	fa                   	cli    
c0015d17:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d1d:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d24:	75 15                	jne    c0015d3b <Vm::finish8086()+0x29>
c0015d26:	e8 09 f3 ff ff       	call   c0015034 <schedule()>
c0015d2b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d30:	48                   	dec    eax
c0015d31:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d36:	75 de                	jne    c0015d16 <Vm::finish8086()+0x4>
c0015d38:	fb                   	sti    
c0015d39:	eb db                	jmp    c0015d16 <Vm::finish8086()+0x4>
c0015d3b:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d42:	83 ec 0c             	sub    esp,0xc
c0015d45:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d4b:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d51:	e8 d6 f7 ff ff       	call   c001552c <unblockTask(ThreadControlBlock*)>
c0015d56:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d5b:	83 c4 10             	add    esp,0x10
c0015d5e:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d61:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d67:	85 d2                	test   edx,edx
c0015d69:	75 01                	jne    c0015d6c <Vm::finish8086()+0x5a>
c0015d6b:	fb                   	sti    
c0015d6c:	83 c4 08             	add    esp,0x8
c0015d6f:	89 d8                	mov    eax,ebx
c0015d71:	5b                   	pop    ebx
c0015d72:	c3                   	ret    

c0015d73 <Vm::getOutput8086(unsigned char*)>:
c0015d73:	57                   	push   edi
c0015d74:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d7a:	56                   	push   esi
c0015d7b:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d80:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d86:	5e                   	pop    esi
c0015d87:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d8c:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d96:	5f                   	pop    edi
c0015d97:	c3                   	ret    

c0015d98 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d98:	55                   	push   ebp
c0015d99:	57                   	push   edi
c0015d9a:	56                   	push   esi
c0015d9b:	53                   	push   ebx
c0015d9c:	83 ec 0c             	sub    esp,0xc
c0015d9f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015da3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015da7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015dab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015daf:	fa                   	cli    
c0015db0:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015db6:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015dbd:	75 15                	jne    c0015dd4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015dbf:	e8 70 f2 ff ff       	call   c0015034 <schedule()>
c0015dc4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dc9:	48                   	dec    eax
c0015dca:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dcf:	75 de                	jne    c0015daf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015dd1:	fb                   	sti    
c0015dd2:	eb db                	jmp    c0015daf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015dd4:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015dde:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015de3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015de7:	0f b7 ff             	movzx  edi,di
c0015dea:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015dee:	0f b7 f6             	movzx  esi,si
c0015df1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015df5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015df9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015dfd:	50                   	push   eax
c0015dfe:	6a 20                	push   0x20
c0015e00:	6a 00                	push   0x0
c0015e02:	68 e0 81 02 c0       	push   0xc00281e0
c0015e07:	e8 e4 a6 fe ff       	call   c00004f0 <memset>
c0015e0c:	5a                   	pop    edx
c0015e0d:	59                   	pop    ecx
c0015e0e:	57                   	push   edi
c0015e0f:	56                   	push   esi
c0015e10:	e8 2d fe ff ff       	call   c0015c42 <Vm::realToLinear(unsigned short, unsigned short)>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e20:	89 c7                	mov    edi,eax
c0015e22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e24:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e2b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e30:	48                   	dec    eax
c0015e31:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e36:	75 01                	jne    c0015e39 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015e38:	fb                   	sti    
c0015e39:	83 ec 0c             	sub    esp,0xc
c0015e3c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e42:	e8 e5 f6 ff ff       	call   c001552c <unblockTask(ThreadControlBlock*)>
c0015e47:	83 c4 1c             	add    esp,0x1c
c0015e4a:	b0 01                	mov    al,0x1
c0015e4c:	5b                   	pop    ebx
c0015e4d:	5e                   	pop    esi
c0015e4e:	5f                   	pop    edi
c0015e4f:	5d                   	pop    ebp
c0015e50:	c3                   	ret    

c0015e51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e51:	55                   	push   ebp
c0015e52:	57                   	push   edi
c0015e53:	56                   	push   esi
c0015e54:	53                   	push   ebx
c0015e55:	83 ec 2c             	sub    esp,0x2c
c0015e58:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015e5c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015e60:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015e64:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015e68:	fa                   	cli    
c0015e69:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c0015e6f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e75:	84 db                	test   bl,bl
c0015e77:	75 1d                	jne    c0015e96 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x45>
c0015e79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e7d:	e8 b2 f1 ff ff       	call   c0015034 <schedule()>
c0015e82:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e8b:	48                   	dec    eax
c0015e8c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e91:	75 d5                	jne    c0015e68 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e93:	fb                   	sti    
c0015e94:	eb d2                	jmp    c0015e68 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e96:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ea0:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015ea5:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015ea9:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0015ead:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015eb1:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015eb5:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015eb9:	50                   	push   eax
c0015eba:	6a 20                	push   0x20
c0015ebc:	6a 00                	push   0x0
c0015ebe:	68 e0 81 02 c0       	push   0xc00281e0
c0015ec3:	e8 28 a6 fe ff       	call   c00004f0 <memset>
c0015ec8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015ecf:	e8 f7 1b ff ff       	call   c0007acb <malloc>
c0015ed4:	83 c4 0c             	add    esp,0xc
c0015ed7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015edd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ee1:	89 c5                	mov    ebp,eax
c0015ee3:	50                   	push   eax
c0015ee4:	e8 2f 50 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0015ee9:	83 c4 10             	add    esp,0x10
c0015eec:	85 ed                	test   ebp,ebp
c0015eee:	75 0a                	jne    c0015efa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015ef0:	83 ec 0c             	sub    esp,0xc
c0015ef3:	68 38 13 02 c0       	push   0xc0021338
c0015ef8:	eb 2b                	jmp    c0015f25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0015efa:	50                   	push   eax
c0015efb:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015eff:	50                   	push   eax
c0015f00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f04:	50                   	push   eax
c0015f05:	55                   	push   ebp
c0015f06:	e8 75 53 ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c0015f0b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015f0f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f13:	83 c4 10             	add    esp,0x10
c0015f16:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015f1b:	74 27                	je     c0015f44 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf3>
c0015f1d:	83 ec 0c             	sub    esp,0xc
c0015f20:	68 4c 13 02 c0       	push   0xc002134c
c0015f25:	e8 0f a9 ff ff       	call   c0010839 <KePanic(char const*)>
c0015f2a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f2f:	83 c4 10             	add    esp,0x10
c0015f32:	48                   	dec    eax
c0015f33:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f38:	85 c0                	test   eax,eax
c0015f3a:	75 01                	jne    c0015f3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015f3c:	fb                   	sti    
c0015f3d:	31 db                	xor    ebx,ebx
c0015f3f:	e9 90 00 00 00       	jmp    c0015fd4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015f44:	51                   	push   ecx
c0015f45:	51                   	push   ecx
c0015f46:	6a 01                	push   0x1
c0015f48:	55                   	push   ebp
c0015f49:	e8 86 50 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0015f4e:	83 c4 10             	add    esp,0x10
c0015f51:	85 c0                	test   eax,eax
c0015f53:	74 26                	je     c0015f7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12a>
c0015f55:	83 ec 0c             	sub    esp,0xc
c0015f58:	68 65 13 02 c0       	push   0xc0021365
c0015f5d:	e8 d7 a8 ff ff       	call   c0010839 <KePanic(char const*)>
c0015f62:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f67:	83 c4 10             	add    esp,0x10
c0015f6a:	48                   	dec    eax
c0015f6b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f70:	85 c0                	test   eax,eax
c0015f72:	75 c9                	jne    c0015f3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c0015f74:	fb                   	sti    
c0015f75:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0015f79:	eb 59                	jmp    c0015fd4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0015f7b:	50                   	push   eax
c0015f7c:	0f b7 ff             	movzx  edi,di
c0015f7f:	50                   	push   eax
c0015f80:	0f b7 f6             	movzx  esi,si
c0015f83:	57                   	push   edi
c0015f84:	56                   	push   esi
c0015f85:	e8 b8 fc ff ff       	call   c0015c42 <Vm::realToLinear(unsigned short, unsigned short)>
c0015f8a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f8d:	5a                   	pop    edx
c0015f8e:	8d 74 24 20          	lea    esi,[esp+0x20]
c0015f92:	56                   	push   esi
c0015f93:	50                   	push   eax
c0015f94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f98:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f9c:	55                   	push   ebp
c0015f9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fa0:	83 c4 14             	add    esp,0x14
c0015fa3:	55                   	push   ebp
c0015fa4:	e8 89 50 ff ff       	call   c000b032 <File::close()>
c0015fa9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fae:	83 c4 10             	add    esp,0x10
c0015fb1:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015fb8:	48                   	dec    eax
c0015fb9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fbe:	85 c0                	test   eax,eax
c0015fc0:	75 01                	jne    c0015fc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0015fc2:	fb                   	sti    
c0015fc3:	83 ec 0c             	sub    esp,0xc
c0015fc6:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015fcc:	e8 5b f5 ff ff       	call   c001552c <unblockTask(ThreadControlBlock*)>
c0015fd1:	83 c4 10             	add    esp,0x10
c0015fd4:	83 c4 2c             	add    esp,0x2c
c0015fd7:	88 d8                	mov    al,bl
c0015fd9:	5b                   	pop    ebx
c0015fda:	5e                   	pop    esi
c0015fdb:	5f                   	pop    edi
c0015fdc:	5d                   	pop    ebp
c0015fdd:	c3                   	ret    

c0015fde <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015fde:	57                   	push   edi
c0015fdf:	56                   	push   esi
c0015fe0:	53                   	push   ebx
c0015fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fe5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fe9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fed:	83 e8 06             	sub    eax,0x6
c0015ff0:	0f b7 c0             	movzx  eax,ax
c0015ff3:	50                   	push   eax
c0015ff4:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015ff9:	50                   	push   eax
c0015ffa:	e8 43 fc ff ff       	call   c0015c42 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fff:	5a                   	pop    edx
c0016000:	5e                   	pop    esi
c0016001:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016004:	8d 56 fa             	lea    edx,[esi-0x6]
c0016007:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c001600a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016010:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0016013:	8d 56 02             	lea    edx,[esi+0x2]
c0016016:	66 89 10             	mov    WORD PTR [eax],dx
c0016019:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001601c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016020:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016023:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016027:	89 d6                	mov    esi,edx
c0016029:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001602f:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c0016035:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016039:	74 05                	je     c0016040 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c001603b:	80 ce 02             	or     dh,0x2
c001603e:	89 d6                	mov    esi,edx
c0016040:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016049:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001604d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016055:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016058:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0016060:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016063:	5b                   	pop    ebx
c0016064:	5e                   	pop    esi
c0016065:	5f                   	pop    edi
c0016066:	c3                   	ret    

c0016067 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016067:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001606c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016071:	c1 e0 04             	shl    eax,0x4
c0016074:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016077:	c3                   	ret    

c0016078 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016078:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001607d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016082:	c1 e0 04             	shl    eax,0x4
c0016085:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016089:	c3                   	ret    

c001608a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001608a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001608f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016094:	c1 e0 04             	shl    eax,0x4
c0016097:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001609a:	c3                   	ret    

c001609b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001609b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160a5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00160a9:	c1 e0 04             	shl    eax,0x4
c00160ac:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00160af:	c3                   	ret    

c00160b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00160b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160be:	c1 e0 04             	shl    eax,0x4
c00160c1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160c5:	c3                   	ret    

c00160c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160d4:	c1 e0 04             	shl    eax,0x4
c00160d7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00160da:	c3                   	ret    

c00160db <Vm::faultHandler(regs*)>:
c00160db:	55                   	push   ebp
c00160dc:	57                   	push   edi
c00160dd:	56                   	push   esi
c00160de:	53                   	push   ebx
c00160df:	83 ec 2c             	sub    esp,0x2c
c00160e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00160e6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160e9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00160ed:	0f b7 f8             	movzx  edi,ax
c00160f0:	0f b7 c0             	movzx  eax,ax
c00160f3:	52                   	push   edx
c00160f4:	50                   	push   eax
c00160f5:	e8 48 fb ff ff       	call   c0015c42 <Vm::realToLinear(unsigned short, unsigned short)>
c00160fa:	5a                   	pop    edx
c00160fb:	59                   	pop    ecx
c00160fc:	89 c1                	mov    ecx,eax
c00160fe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016101:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016105:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001610a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001610e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016111:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016115:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001611a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001611e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016122:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016126:	e8 17 fb ff ff       	call   c0015c42 <Vm::realToLinear(unsigned short, unsigned short)>
c001612b:	5e                   	pop    esi
c001612c:	be 06 00 00 00       	mov    esi,0x6
c0016131:	5d                   	pop    ebp
c0016132:	31 ed                	xor    ebp,ebp
c0016134:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016139:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001613c:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016142:	0f 84 54 02 00 00    	je     c001639c <Vm::faultHandler(regs*)+0x2c1>
c0016148:	0f 87 94 00 00 00    	ja     c00161e2 <Vm::faultHandler(regs*)+0x107>
c001614e:	83 fa 66             	cmp    edx,0x66
c0016151:	0f 84 c2 01 00 00    	je     c0016319 <Vm::faultHandler(regs*)+0x23e>
c0016157:	77 47                	ja     c00161a0 <Vm::faultHandler(regs*)+0xc5>
c0016159:	83 fa 36             	cmp    edx,0x36
c001615c:	0f 84 aa 01 00 00    	je     c001630c <Vm::faultHandler(regs*)+0x231>
c0016162:	77 1a                	ja     c001617e <Vm::faultHandler(regs*)+0xa3>
c0016164:	83 fa 26             	cmp    edx,0x26
c0016167:	0f 84 78 01 00 00    	je     c00162e5 <Vm::faultHandler(regs*)+0x20a>
c001616d:	83 fa 2e             	cmp    edx,0x2e
c0016170:	0f 85 07 06 00 00    	jne    c001677d <Vm::faultHandler(regs*)+0x6a2>
c0016176:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016179:	31 f6                	xor    esi,esi
c001617b:	41                   	inc    ecx
c001617c:	eb bb                	jmp    c0016139 <Vm::faultHandler(regs*)+0x5e>
c001617e:	83 fa 64             	cmp    edx,0x64
c0016181:	0f 84 6b 01 00 00    	je     c00162f2 <Vm::faultHandler(regs*)+0x217>
c0016187:	0f 87 72 01 00 00    	ja     c00162ff <Vm::faultHandler(regs*)+0x224>
c001618d:	83 fa 3e             	cmp    edx,0x3e
c0016190:	0f 85 e7 05 00 00    	jne    c001677d <Vm::faultHandler(regs*)+0x6a2>
c0016196:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016199:	be 01 00 00 00       	mov    esi,0x1
c001619e:	eb db                	jmp    c001617b <Vm::faultHandler(regs*)+0xa0>
c00161a0:	83 fa 6d             	cmp    edx,0x6d
c00161a3:	0f 84 14 03 00 00    	je     c00164bd <Vm::faultHandler(regs*)+0x3e2>
c00161a9:	77 17                	ja     c00161c2 <Vm::faultHandler(regs*)+0xe7>
c00161ab:	83 fa 67             	cmp    edx,0x67
c00161ae:	0f 84 72 01 00 00    	je     c0016326 <Vm::faultHandler(regs*)+0x24b>
c00161b4:	83 fa 6c             	cmp    edx,0x6c
c00161b7:	0f 84 91 02 00 00    	je     c001644e <Vm::faultHandler(regs*)+0x373>
c00161bd:	e9 bb 05 00 00       	jmp    c001677d <Vm::faultHandler(regs*)+0x6a2>
c00161c2:	83 fa 6f             	cmp    edx,0x6f
c00161c5:	0f 84 20 04 00 00    	je     c00165eb <Vm::faultHandler(regs*)+0x510>
c00161cb:	0f 82 82 03 00 00    	jb     c0016553 <Vm::faultHandler(regs*)+0x478>
c00161d1:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00161d7:	0f 84 56 01 00 00    	je     c0016333 <Vm::faultHandler(regs*)+0x258>
c00161dd:	e9 9b 05 00 00       	jmp    c001677d <Vm::faultHandler(regs*)+0x6a2>
c00161e2:	81 fa ec 00 00 00    	cmp    edx,0xec
c00161e8:	0f 84 37 05 00 00    	je     c0016725 <Vm::faultHandler(regs*)+0x64a>
c00161ee:	0f 87 89 00 00 00    	ja     c001627d <Vm::faultHandler(regs*)+0x1a2>
c00161f4:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00161fa:	0f 84 b6 04 00 00    	je     c00166b6 <Vm::faultHandler(regs*)+0x5db>
c0016200:	77 58                	ja     c001625a <Vm::faultHandler(regs*)+0x17f>
c0016202:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016208:	0f 84 ee 01 00 00    	je     c00163fc <Vm::faultHandler(regs*)+0x321>
c001620e:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016214:	0f 85 63 05 00 00    	jne    c001677d <Vm::faultHandler(regs*)+0x6a2>
c001621a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001621d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016220:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0016224:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016227:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001622b:	81 ca 00 02 02 00    	or     edx,0x20200
c0016231:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016234:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c0016238:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001623e:	c1 e8 09             	shr    eax,0x9
c0016241:	83 e0 01             	and    eax,0x1
c0016244:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016247:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001624a:	83 c0 06             	add    eax,0x6
c001624d:	25 ff ff 00 00       	and    eax,0xffff
c0016252:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016255:	e9 1f 05 00 00       	jmp    c0016779 <Vm::faultHandler(regs*)+0x69e>
c001625a:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016260:	0f 84 95 04 00 00    	je     c00166fb <Vm::faultHandler(regs*)+0x620>
c0016266:	0f 82 66 04 00 00    	jb     c00166d2 <Vm::faultHandler(regs*)+0x5f7>
c001626c:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016272:	0f 84 9a 04 00 00    	je     c0016712 <Vm::faultHandler(regs*)+0x637>
c0016278:	e9 00 05 00 00       	jmp    c001677d <Vm::faultHandler(regs*)+0x6a2>
c001627d:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016283:	0f 84 dd 04 00 00    	je     c0016766 <Vm::faultHandler(regs*)+0x68b>
c0016289:	77 2e                	ja     c00162b9 <Vm::faultHandler(regs*)+0x1de>
c001628b:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016291:	0f 84 aa 04 00 00    	je     c0016741 <Vm::faultHandler(regs*)+0x666>
c0016297:	81 fa ee 00 00 00    	cmp    edx,0xee
c001629d:	0f 85 da 04 00 00    	jne    c001677d <Vm::faultHandler(regs*)+0x6a2>
c00162a3:	50                   	push   eax
c00162a4:	50                   	push   eax
c00162a5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00162a9:	50                   	push   eax
c00162aa:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00162ae:	50                   	push   eax
c00162af:	e8 58 f9 ff ff       	call   c0015c0c <Vm::outbv(unsigned short, unsigned char)>
c00162b4:	e9 a5 04 00 00       	jmp    c001675e <Vm::faultHandler(regs*)+0x683>
c00162b9:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00162bf:	0f 84 6d 01 00 00    	je     c0016432 <Vm::faultHandler(regs*)+0x357>
c00162c5:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00162cb:	0f 84 6f 01 00 00    	je     c0016440 <Vm::faultHandler(regs*)+0x365>
c00162d1:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00162d7:	0f 85 a0 04 00 00    	jne    c001677d <Vm::faultHandler(regs*)+0x6a2>
c00162dd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162e0:	e9 96 fe ff ff       	jmp    c001617b <Vm::faultHandler(regs*)+0xa0>
c00162e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162e8:	be 02 00 00 00       	mov    esi,0x2
c00162ed:	e9 89 fe ff ff       	jmp    c001617b <Vm::faultHandler(regs*)+0xa0>
c00162f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162f5:	be 03 00 00 00       	mov    esi,0x3
c00162fa:	e9 7c fe ff ff       	jmp    c001617b <Vm::faultHandler(regs*)+0xa0>
c00162ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016302:	be 04 00 00 00       	mov    esi,0x4
c0016307:	e9 6f fe ff ff       	jmp    c001617b <Vm::faultHandler(regs*)+0xa0>
c001630c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001630f:	be 05 00 00 00       	mov    esi,0x5
c0016314:	e9 62 fe ff ff       	jmp    c001617b <Vm::faultHandler(regs*)+0xa0>
c0016319:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001631c:	bd 01 00 00 00       	mov    ebp,0x1
c0016321:	e9 55 fe ff ff       	jmp    c001617b <Vm::faultHandler(regs*)+0xa0>
c0016326:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016329:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001632e:	e9 48 fe ff ff       	jmp    c001617b <Vm::faultHandler(regs*)+0xa0>
c0016333:	83 e5 01             	and    ebp,0x1
c0016336:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001633d:	74 30                	je     c001636f <Vm::faultHandler(regs*)+0x294>
c001633f:	83 e9 04             	sub    ecx,0x4
c0016342:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016348:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001634e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016351:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016354:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001635a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001635e:	0f 84 12 04 00 00    	je     c0016776 <Vm::faultHandler(regs*)+0x69b>
c0016364:	80 ce 02             	or     dh,0x2
c0016367:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001636a:	e9 07 04 00 00       	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c001636f:	83 e9 02             	sub    ecx,0x2
c0016372:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016378:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001637b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001637f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016385:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016389:	74 05                	je     c0016390 <Vm::faultHandler(regs*)+0x2b5>
c001638b:	80 ce 02             	or     dh,0x2
c001638e:	eb 03                	jmp    c0016393 <Vm::faultHandler(regs*)+0x2b8>
c0016390:	80 e6 fd             	and    dh,0xfd
c0016393:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016397:	e9 da 03 00 00       	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c001639c:	83 e5 01             	and    ebp,0x1
c001639f:	74 2a                	je     c00163cb <Vm::faultHandler(regs*)+0x2f0>
c00163a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00163a3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00163a9:	81 ca 00 02 02 00    	or     edx,0x20200
c00163af:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00163b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163ba:	c1 e8 09             	shr    eax,0x9
c00163bd:	83 e0 01             	and    eax,0x1
c00163c0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163c3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163c6:	83 c0 04             	add    eax,0x4
c00163c9:	eb 24                	jmp    c00163ef <Vm::faultHandler(regs*)+0x314>
c00163cb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00163ce:	81 ca 00 02 02 00    	or     edx,0x20200
c00163d4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163d7:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00163da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163e0:	c1 e8 09             	shr    eax,0x9
c00163e3:	83 e0 01             	and    eax,0x1
c00163e6:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163e9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163ec:	83 c0 02             	add    eax,0x2
c00163ef:	25 ff ff 00 00       	and    eax,0xffff
c00163f4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00163f7:	e9 7a 03 00 00       	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c00163fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016400:	3d ee 00 00 00       	cmp    eax,0xee
c0016405:	75 10                	jne    c0016417 <Vm::faultHandler(regs*)+0x33c>
c0016407:	83 ec 0c             	sub    esp,0xc
c001640a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001640d:	e8 97 f8 ff ff       	call   c0015ca9 <Vm::mainloop3(unsigned long)>
c0016412:	e9 4a 03 00 00       	jmp    c0016761 <Vm::faultHandler(regs*)+0x686>
c0016417:	83 ec 0c             	sub    esp,0xc
c001641a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001641e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016422:	51                   	push   ecx
c0016423:	50                   	push   eax
c0016424:	53                   	push   ebx
c0016425:	e8 b4 fb ff ff       	call   c0015fde <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001642a:	83 c4 20             	add    esp,0x20
c001642d:	e9 47 03 00 00       	jmp    c0016779 <Vm::faultHandler(regs*)+0x69e>
c0016432:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016437:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001643b:	e9 36 03 00 00       	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c0016440:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016445:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016449:	e9 28 03 00 00       	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c001644e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016453:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016456:	74 2b                	je     c0016483 <Vm::faultHandler(regs*)+0x3a8>
c0016458:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001645f:	76 22                	jbe    c0016483 <Vm::faultHandler(regs*)+0x3a8>
c0016461:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016465:	50                   	push   eax
c0016466:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001646a:	50                   	push   eax
c001646b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001646f:	50                   	push   eax
c0016470:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016474:	50                   	push   eax
c0016475:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016479:	50                   	push   eax
c001647a:	6a 6c                	push   0x6c
c001647c:	6a 6c                	push   0x6c
c001647e:	e9 c0 01 00 00       	jmp    c0016643 <Vm::faultHandler(regs*)+0x568>
c0016483:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016487:	83 ec 0c             	sub    esp,0xc
c001648a:	0f b7 f6             	movzx  esi,si
c001648d:	50                   	push   eax
c001648e:	e8 66 f7 ff ff       	call   c0015bf9 <Vm::inbv(unsigned short)>
c0016493:	83 c4 0c             	add    esp,0xc
c0016496:	0f b6 c0             	movzx  eax,al
c0016499:	50                   	push   eax
c001649a:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001649e:	50                   	push   eax
c001649f:	56                   	push   esi
c00164a0:	e8 f6 fb ff ff       	call   c001609b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00164a5:	83 c4 10             	add    esp,0x10
c00164a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164ab:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164af:	74 03                	je     c00164b4 <Vm::faultHandler(regs*)+0x3d9>
c00164b1:	48                   	dec    eax
c00164b2:	eb 01                	jmp    c00164b5 <Vm::faultHandler(regs*)+0x3da>
c00164b4:	40                   	inc    eax
c00164b5:	0f b7 c0             	movzx  eax,ax
c00164b8:	e9 8e 00 00 00       	jmp    c001654b <Vm::faultHandler(regs*)+0x470>
c00164bd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164c2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00164c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164c8:	74 29                	je     c00164f3 <Vm::faultHandler(regs*)+0x418>
c00164ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00164cf:	76 22                	jbe    c00164f3 <Vm::faultHandler(regs*)+0x418>
c00164d1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164d5:	50                   	push   eax
c00164d6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164da:	50                   	push   eax
c00164db:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164df:	50                   	push   eax
c00164e0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164e4:	50                   	push   eax
c00164e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164e9:	50                   	push   eax
c00164ea:	6a 6d                	push   0x6d
c00164ec:	6a 6d                	push   0x6d
c00164ee:	e9 50 01 00 00       	jmp    c0016643 <Vm::faultHandler(regs*)+0x568>
c00164f3:	83 e5 01             	and    ebp,0x1
c00164f6:	0f b7 c8             	movzx  ecx,ax
c00164f9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00164fc:	0f b7 f6             	movzx  esi,si
c00164ff:	74 1e                	je     c001651f <Vm::faultHandler(regs*)+0x444>
c0016501:	ed                   	in     eax,dx
c0016502:	55                   	push   ebp
c0016503:	50                   	push   eax
c0016504:	51                   	push   ecx
c0016505:	56                   	push   esi
c0016506:	e8 bb fb ff ff       	call   c00160c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001650b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001650e:	83 c4 10             	add    esp,0x10
c0016511:	8d 50 04             	lea    edx,[eax+0x4]
c0016514:	83 e8 04             	sub    eax,0x4
c0016517:	81 e2 ff ff 00 00    	and    edx,0xffff
c001651d:	eb 20                	jmp    c001653f <Vm::faultHandler(regs*)+0x464>
c001651f:	66 ed                	in     ax,dx
c0016521:	57                   	push   edi
c0016522:	0f b7 c0             	movzx  eax,ax
c0016525:	50                   	push   eax
c0016526:	51                   	push   ecx
c0016527:	56                   	push   esi
c0016528:	e8 83 fb ff ff       	call   c00160b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001652d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016530:	83 c4 10             	add    esp,0x10
c0016533:	8d 50 02             	lea    edx,[eax+0x2]
c0016536:	83 e8 02             	sub    eax,0x2
c0016539:	81 e2 ff ff 00 00    	and    edx,0xffff
c001653f:	25 ff ff 00 00       	and    eax,0xffff
c0016544:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016548:	0f 44 c2             	cmove  eax,edx
c001654b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001654e:	e9 23 02 00 00       	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c0016553:	8d 46 ff             	lea    eax,[esi-0x1]
c0016556:	0f b6 f0             	movzx  esi,al
c0016559:	83 fe 05             	cmp    esi,0x5
c001655c:	77 23                	ja     c0016581 <Vm::faultHandler(regs*)+0x4a6>
c001655e:	ff 24 b5 d8 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdec28]
c0016565:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001656a:	eb 15                	jmp    c0016581 <Vm::faultHandler(regs*)+0x4a6>
c001656c:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016570:	eb 0f                	jmp    c0016581 <Vm::faultHandler(regs*)+0x4a6>
c0016572:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016576:	eb 09                	jmp    c0016581 <Vm::faultHandler(regs*)+0x4a6>
c0016578:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001657c:	eb 03                	jmp    c0016581 <Vm::faultHandler(regs*)+0x4a6>
c001657e:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016581:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016586:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016589:	74 29                	je     c00165b4 <Vm::faultHandler(regs*)+0x4d9>
c001658b:	3d ff ff 00 00       	cmp    eax,0xffff
c0016590:	76 22                	jbe    c00165b4 <Vm::faultHandler(regs*)+0x4d9>
c0016592:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016596:	50                   	push   eax
c0016597:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001659b:	50                   	push   eax
c001659c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165a0:	50                   	push   eax
c00165a1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165a5:	50                   	push   eax
c00165a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165aa:	50                   	push   eax
c00165ab:	6a 6e                	push   0x6e
c00165ad:	6a 6e                	push   0x6e
c00165af:	e9 8f 00 00 00       	jmp    c0016643 <Vm::faultHandler(regs*)+0x568>
c00165b4:	52                   	push   edx
c00165b5:	0f b7 c0             	movzx  eax,ax
c00165b8:	52                   	push   edx
c00165b9:	50                   	push   eax
c00165ba:	57                   	push   edi
c00165bb:	e8 a7 fa ff ff       	call   c0016067 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00165c0:	59                   	pop    ecx
c00165c1:	5e                   	pop    esi
c00165c2:	0f b6 c0             	movzx  eax,al
c00165c5:	50                   	push   eax
c00165c6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165ca:	50                   	push   eax
c00165cb:	e8 3c f6 ff ff       	call   c0015c0c <Vm::outbv(unsigned short, unsigned char)>
c00165d0:	83 c4 10             	add    esp,0x10
c00165d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00165d6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165da:	74 03                	je     c00165df <Vm::faultHandler(regs*)+0x504>
c00165dc:	48                   	dec    eax
c00165dd:	eb 01                	jmp    c00165e0 <Vm::faultHandler(regs*)+0x505>
c00165df:	40                   	inc    eax
c00165e0:	0f b7 c0             	movzx  eax,ax
c00165e3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00165e6:	e9 8b 01 00 00       	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c00165eb:	8d 46 ff             	lea    eax,[esi-0x1]
c00165ee:	0f b6 f0             	movzx  esi,al
c00165f1:	83 fe 05             	cmp    esi,0x5
c00165f4:	77 1e                	ja     c0016614 <Vm::faultHandler(regs*)+0x539>
c00165f6:	ff 24 b5 f0 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdec10]
c00165fd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016601:	eb 11                	jmp    c0016614 <Vm::faultHandler(regs*)+0x539>
c0016603:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016606:	eb 0c                	jmp    c0016614 <Vm::faultHandler(regs*)+0x539>
c0016608:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001660b:	eb 07                	jmp    c0016614 <Vm::faultHandler(regs*)+0x539>
c001660d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016610:	eb 02                	jmp    c0016614 <Vm::faultHandler(regs*)+0x539>
c0016612:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016614:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016619:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001661c:	74 37                	je     c0016655 <Vm::faultHandler(regs*)+0x57a>
c001661e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016624:	76 2f                	jbe    c0016655 <Vm::faultHandler(regs*)+0x57a>
c0016626:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001662a:	50                   	push   eax
c001662b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001662f:	50                   	push   eax
c0016630:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016634:	50                   	push   eax
c0016635:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016639:	50                   	push   eax
c001663a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001663e:	50                   	push   eax
c001663f:	6a 6f                	push   0x6f
c0016641:	6a 6f                	push   0x6f
c0016643:	68 7e 13 02 c0       	push   0xc002137e
c0016648:	e8 22 43 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001664d:	83 c4 20             	add    esp,0x20
c0016650:	e9 86 01 00 00       	jmp    c00167db <Vm::faultHandler(regs*)+0x700>
c0016655:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016658:	0f b7 d7             	movzx  edx,di
c001665b:	0f b7 c6             	movzx  eax,si
c001665e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016661:	81 e1 00 04 00 00    	and    ecx,0x400
c0016667:	83 e5 01             	and    ebp,0x1
c001666a:	74 1c                	je     c0016688 <Vm::faultHandler(regs*)+0x5ad>
c001666c:	55                   	push   ebp
c001666d:	55                   	push   ebp
c001666e:	50                   	push   eax
c001666f:	52                   	push   edx
c0016670:	e8 15 fa ff ff       	call   c001608a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016675:	83 c4 10             	add    esp,0x10
c0016678:	89 fa                	mov    edx,edi
c001667a:	ef                   	out    dx,eax
c001667b:	8d 46 04             	lea    eax,[esi+0x4]
c001667e:	83 ee 04             	sub    esi,0x4
c0016681:	25 ff ff 00 00       	and    eax,0xffff
c0016686:	eb 1b                	jmp    c00166a3 <Vm::faultHandler(regs*)+0x5c8>
c0016688:	55                   	push   ebp
c0016689:	55                   	push   ebp
c001668a:	50                   	push   eax
c001668b:	52                   	push   edx
c001668c:	e8 e7 f9 ff ff       	call   c0016078 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016691:	83 c4 10             	add    esp,0x10
c0016694:	89 fa                	mov    edx,edi
c0016696:	66 ef                	out    dx,ax
c0016698:	8d 46 02             	lea    eax,[esi+0x2]
c001669b:	83 ee 02             	sub    esi,0x2
c001669e:	25 ff ff 00 00       	and    eax,0xffff
c00166a3:	81 e6 ff ff 00 00    	and    esi,0xffff
c00166a9:	85 c9                	test   ecx,ecx
c00166ab:	0f 44 f0             	cmove  esi,eax
c00166ae:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00166b1:	e9 c0 00 00 00       	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c00166b6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166bd:	83 ec 0c             	sub    esp,0xc
c00166c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166c4:	50                   	push   eax
c00166c5:	e8 2f f5 ff ff       	call   c0015bf9 <Vm::inbv(unsigned short)>
c00166ca:	0f b6 c0             	movzx  eax,al
c00166cd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166d0:	eb 3a                	jmp    c001670c <Vm::faultHandler(regs*)+0x631>
c00166d2:	83 e5 01             	and    ebp,0x1
c00166d5:	74 07                	je     c00166de <Vm::faultHandler(regs*)+0x603>
c00166d7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166db:	ed                   	in     eax,dx
c00166dc:	eb 14                	jmp    c00166f2 <Vm::faultHandler(regs*)+0x617>
c00166de:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00166e1:	66 31 f6             	xor    si,si
c00166e4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00166e7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166eb:	66 ed                	in     ax,dx
c00166ed:	0f b7 c0             	movzx  eax,ax
c00166f0:	09 f0                	or     eax,esi
c00166f2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166f5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00166f9:	eb 7e                	jmp    c0016779 <Vm::faultHandler(regs*)+0x69e>
c00166fb:	52                   	push   edx
c00166fc:	52                   	push   edx
c00166fd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016701:	50                   	push   eax
c0016702:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016706:	50                   	push   eax
c0016707:	e8 00 f5 ff ff       	call   c0015c0c <Vm::outbv(unsigned short, unsigned char)>
c001670c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016710:	eb 4f                	jmp    c0016761 <Vm::faultHandler(regs*)+0x686>
c0016712:	83 e5 01             	and    ebp,0x1
c0016715:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016718:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001671c:	74 03                	je     c0016721 <Vm::faultHandler(regs*)+0x646>
c001671e:	ef                   	out    dx,eax
c001671f:	eb d4                	jmp    c00166f5 <Vm::faultHandler(regs*)+0x61a>
c0016721:	66 ef                	out    dx,ax
c0016723:	eb d0                	jmp    c00166f5 <Vm::faultHandler(regs*)+0x61a>
c0016725:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016729:	83 ec 0c             	sub    esp,0xc
c001672c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016733:	50                   	push   eax
c0016734:	e8 c0 f4 ff ff       	call   c0015bf9 <Vm::inbv(unsigned short)>
c0016739:	0f b6 c0             	movzx  eax,al
c001673c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001673f:	eb 1d                	jmp    c001675e <Vm::faultHandler(regs*)+0x683>
c0016741:	83 e5 01             	and    ebp,0x1
c0016744:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016747:	74 03                	je     c001674c <Vm::faultHandler(regs*)+0x671>
c0016749:	ed                   	in     eax,dx
c001674a:	eb 0d                	jmp    c0016759 <Vm::faultHandler(regs*)+0x67e>
c001674c:	66 ed                	in     ax,dx
c001674e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016751:	0f b7 c0             	movzx  eax,ax
c0016754:	66 31 d2             	xor    dx,dx
c0016757:	09 d0                	or     eax,edx
c0016759:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001675c:	eb 18                	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c001675e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016761:	83 c4 10             	add    esp,0x10
c0016764:	eb 13                	jmp    c0016779 <Vm::faultHandler(regs*)+0x69e>
c0016766:	83 e5 01             	and    ebp,0x1
c0016769:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001676c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001676f:	74 03                	je     c0016774 <Vm::faultHandler(regs*)+0x699>
c0016771:	ef                   	out    dx,eax
c0016772:	eb 02                	jmp    c0016776 <Vm::faultHandler(regs*)+0x69b>
c0016774:	66 ef                	out    dx,ax
c0016776:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016779:	b0 01                	mov    al,0x1
c001677b:	eb 60                	jmp    c00167dd <Vm::faultHandler(regs*)+0x702>
c001677d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016781:	50                   	push   eax
c0016782:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016786:	50                   	push   eax
c0016787:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001678b:	50                   	push   eax
c001678c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016790:	50                   	push   eax
c0016791:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016795:	50                   	push   eax
c0016796:	52                   	push   edx
c0016797:	52                   	push   edx
c0016798:	68 ab 13 02 c0       	push   0xc00213ab
c001679d:	e8 cd 41 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00167a2:	83 c4 20             	add    esp,0x20
c00167a5:	83 ec 0c             	sub    esp,0xc
c00167a8:	6a 60                	push   0x60
c00167aa:	e8 4a f4 ff ff       	call   c0015bf9 <Vm::inbv(unsigned short)>
c00167af:	83 c4 10             	add    esp,0x10
c00167b2:	0f b6 d0             	movzx  edx,al
c00167b5:	83 fa 1c             	cmp    edx,0x1c
c00167b8:	74 05                	je     c00167bf <Vm::faultHandler(regs*)+0x6e4>
c00167ba:	83 fa 5a             	cmp    edx,0x5a
c00167bd:	75 e6                	jne    c00167a5 <Vm::faultHandler(regs*)+0x6ca>
c00167bf:	0f b6 c0             	movzx  eax,al
c00167c2:	83 f8 1c             	cmp    eax,0x1c
c00167c5:	74 05                	je     c00167cc <Vm::faultHandler(regs*)+0x6f1>
c00167c7:	83 f8 5a             	cmp    eax,0x5a
c00167ca:	75 0f                	jne    c00167db <Vm::faultHandler(regs*)+0x700>
c00167cc:	83 ec 0c             	sub    esp,0xc
c00167cf:	6a 60                	push   0x60
c00167d1:	e8 23 f4 ff ff       	call   c0015bf9 <Vm::inbv(unsigned short)>
c00167d6:	83 c4 10             	add    esp,0x10
c00167d9:	eb e4                	jmp    c00167bf <Vm::faultHandler(regs*)+0x6e4>
c00167db:	31 c0                	xor    eax,eax
c00167dd:	83 c4 2c             	add    esp,0x2c
c00167e0:	5b                   	pop    ebx
c00167e1:	5e                   	pop    esi
c00167e2:	5f                   	pop    edi
c00167e3:	5d                   	pop    ebp
c00167e4:	c3                   	ret    

c00167e5 <noCopro(unsigned long)>:
c00167e5:	c3                   	ret    

c00167e6 <nmiHandler(regs*, void*)>:
c00167e6:	83 ec 0c             	sub    esp,0xc
c00167e9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00167ee:	83 ec 0c             	sub    esp,0xc
c00167f1:	50                   	push   eax
c00167f2:	e8 d7 0a ff ff       	call   c00072ce <Computer::handleNMI()>
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	90                   	nop
c00167fb:	83 c4 0c             	add    esp,0xc
c00167fe:	c3                   	ret    

c00167ff <doubleFault(regs*, void*)>:
c00167ff:	55                   	push   ebp
c0016800:	89 e5                	mov    ebp,esp
c0016802:	83 ec 08             	sub    esp,0x8
c0016805:	83 ec 0c             	sub    esp,0xc
c0016808:	68 08 14 02 c0       	push   0xc0021408
c001680d:	e8 27 a0 ff ff       	call   c0010839 <KePanic(char const*)>
c0016812:	83 c4 10             	add    esp,0x10
c0016815:	90                   	nop
c0016816:	c9                   	leave  
c0016817:	c3                   	ret    

c0016818 <displayDebugInfo(regs*)>:
c0016818:	83 ec 1c             	sub    esp,0x1c
c001681b:	0f 20 c0             	mov    eax,cr0
c001681e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016822:	0f 20 d0             	mov    eax,cr2
c0016825:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016829:	0f 20 d8             	mov    eax,cr3
c001682c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016830:	0f 20 e0             	mov    eax,cr4
c0016833:	89 04 24             	mov    DWORD PTR [esp],eax
c0016836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001683d:	83 ec 08             	sub    esp,0x8
c0016840:	50                   	push   eax
c0016841:	68 24 14 02 c0       	push   0xc0021424
c0016846:	e8 24 41 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001684b:	83 c4 10             	add    esp,0x10
c001684e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016852:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016855:	83 ec 08             	sub    esp,0x8
c0016858:	50                   	push   eax
c0016859:	68 15 14 02 c0       	push   0xc0021415
c001685e:	e8 0c 41 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0016863:	83 c4 10             	add    esp,0x10
c0016866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001686d:	83 ec 08             	sub    esp,0x8
c0016870:	50                   	push   eax
c0016871:	68 20 14 02 c0       	push   0xc0021420
c0016876:	e8 f4 40 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001687b:	83 c4 10             	add    esp,0x10
c001687e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016882:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016885:	83 ec 08             	sub    esp,0x8
c0016888:	50                   	push   eax
c0016889:	68 2f 14 02 c0       	push   0xc002142f
c001688e:	e8 dc 40 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001689d:	83 ec 08             	sub    esp,0x8
c00168a0:	50                   	push   eax
c00168a1:	68 3a 14 02 c0       	push   0xc002143a
c00168a6:	e8 c4 40 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	83 ec 08             	sub    esp,0x8
c00168b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168b5:	68 45 14 02 c0       	push   0xc0021445
c00168ba:	e8 b0 40 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	83 ec 08             	sub    esp,0x8
c00168c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00168c9:	68 50 14 02 c0       	push   0xc0021450
c00168ce:	e8 9c 40 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168e1:	83 ec 0c             	sub    esp,0xc
c00168e4:	50                   	push   eax
c00168e5:	e8 6f 1e ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00168ea:	83 c4 10             	add    esp,0x10
c00168ed:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168f8:	83 ec 08             	sub    esp,0x8
c00168fb:	68 5b 14 02 c0       	push   0xc002145b
c0016900:	50                   	push   eax
c0016901:	e8 90 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016906:	83 c4 10             	add    esp,0x10
c0016909:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001690e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016914:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016918:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001691b:	83 ec 08             	sub    esp,0x8
c001691e:	52                   	push   edx
c001691f:	50                   	push   eax
c0016920:	e8 2b 21 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001692d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016933:	83 ec 08             	sub    esp,0x8
c0016936:	68 69 14 02 c0       	push   0xc0021469
c001693b:	50                   	push   eax
c001693c:	e8 55 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016941:	83 c4 10             	add    esp,0x10
c0016944:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016949:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001694f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016954:	8b 12                	mov    edx,DWORD PTR [edx]
c0016956:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016959:	83 c2 0c             	add    edx,0xc
c001695c:	83 ec 08             	sub    esp,0x8
c001695f:	52                   	push   edx
c0016960:	50                   	push   eax
c0016961:	e8 30 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016966:	83 c4 10             	add    esp,0x10
c0016969:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001696e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016974:	83 ec 08             	sub    esp,0x8
c0016977:	68 72 14 02 c0       	push   0xc0021472
c001697c:	50                   	push   eax
c001697d:	e8 14 21 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016982:	83 c4 10             	add    esp,0x10
c0016985:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001698a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016990:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016994:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016997:	83 ec 08             	sub    esp,0x8
c001699a:	52                   	push   edx
c001699b:	50                   	push   eax
c001699c:	e8 af 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169a1:	83 c4 10             	add    esp,0x10
c00169a4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169af:	83 ec 08             	sub    esp,0x8
c00169b2:	68 7a 14 02 c0       	push   0xc002147a
c00169b7:	50                   	push   eax
c00169b8:	e8 d9 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169bd:	83 c4 10             	add    esp,0x10
c00169c0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169cf:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00169d2:	83 ec 08             	sub    esp,0x8
c00169d5:	52                   	push   edx
c00169d6:	50                   	push   eax
c00169d7:	e8 74 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c00169dc:	83 c4 10             	add    esp,0x10
c00169df:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169ea:	83 ec 08             	sub    esp,0x8
c00169ed:	68 82 14 02 c0       	push   0xc0021482
c00169f2:	50                   	push   eax
c00169f3:	e8 9e 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c00169f8:	83 c4 10             	add    esp,0x10
c00169fb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a06:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a0a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016a0d:	83 ec 08             	sub    esp,0x8
c0016a10:	52                   	push   edx
c0016a11:	50                   	push   eax
c0016a12:	e8 39 20 ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a25:	83 ec 08             	sub    esp,0x8
c0016a28:	68 8a 14 02 c0       	push   0xc002148a
c0016a2d:	50                   	push   eax
c0016a2e:	e8 63 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a33:	83 c4 10             	add    esp,0x10
c0016a36:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a45:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a48:	83 ec 08             	sub    esp,0x8
c0016a4b:	52                   	push   edx
c0016a4c:	50                   	push   eax
c0016a4d:	e8 fe 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a60:	83 ec 08             	sub    esp,0x8
c0016a63:	68 92 14 02 c0       	push   0xc0021492
c0016a68:	50                   	push   eax
c0016a69:	e8 28 20 ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a80:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a83:	83 ec 08             	sub    esp,0x8
c0016a86:	52                   	push   edx
c0016a87:	50                   	push   eax
c0016a88:	e8 c3 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016a8d:	83 c4 10             	add    esp,0x10
c0016a90:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a9b:	83 ec 08             	sub    esp,0x8
c0016a9e:	68 9a 14 02 c0       	push   0xc002149a
c0016aa3:	50                   	push   eax
c0016aa4:	e8 ed 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016aa9:	83 c4 10             	add    esp,0x10
c0016aac:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ab1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ab7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016abb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016abe:	83 ec 08             	sub    esp,0x8
c0016ac1:	52                   	push   edx
c0016ac2:	50                   	push   eax
c0016ac3:	e8 88 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016ac8:	83 c4 10             	add    esp,0x10
c0016acb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ad0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ad6:	83 ec 08             	sub    esp,0x8
c0016ad9:	68 a2 14 02 c0       	push   0xc00214a2
c0016ade:	50                   	push   eax
c0016adf:	e8 b2 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016ae4:	83 c4 10             	add    esp,0x10
c0016ae7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016af2:	83 ec 08             	sub    esp,0x8
c0016af5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016af9:	50                   	push   eax
c0016afa:	e8 51 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016aff:	83 c4 10             	add    esp,0x10
c0016b02:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b0d:	83 ec 08             	sub    esp,0x8
c0016b10:	68 ab 14 02 c0       	push   0xc00214ab
c0016b15:	50                   	push   eax
c0016b16:	e8 7b 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b1b:	83 c4 10             	add    esp,0x10
c0016b1e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b29:	83 ec 08             	sub    esp,0x8
c0016b2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b30:	50                   	push   eax
c0016b31:	e8 1a 1f ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b36:	83 c4 10             	add    esp,0x10
c0016b39:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b44:	83 ec 08             	sub    esp,0x8
c0016b47:	68 b3 14 02 c0       	push   0xc00214b3
c0016b4c:	50                   	push   eax
c0016b4d:	e8 44 1f ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016b52:	83 c4 10             	add    esp,0x10
c0016b55:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b60:	83 ec 08             	sub    esp,0x8
c0016b63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b67:	50                   	push   eax
c0016b68:	e8 e3 1e ff ff       	call   c0008a50 <VgaText::putx(unsigned int)>
c0016b6d:	83 c4 10             	add    esp,0x10
c0016b70:	fa                   	cli    
c0016b71:	f4                   	hlt    
c0016b72:	eb fe                	jmp    c0016b72 <displayDebugInfo(regs*)+0x35a>

c0016b74 <HalSystemIdle()>:
c0016b74:	56                   	push   esi
c0016b75:	53                   	push   ebx
c0016b76:	83 ec 14             	sub    esp,0x14
c0016b79:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b84:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016b8a:	83 e0 04             	and    eax,0x4
c0016b8d:	0f b6 c0             	movzx  eax,al
c0016b90:	85 c0                	test   eax,eax
c0016b92:	0f 95 c0             	setne  al
c0016b95:	0f b6 c0             	movzx  eax,al
c0016b98:	85 c0                	test   eax,eax
c0016b9a:	74 4c                	je     c0016be8 <HalSystemIdle()+0x74>
c0016b9c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016ba1:	83 ec 08             	sub    esp,0x8
c0016ba4:	68 e1 00 00 00       	push   0xe1
c0016ba9:	50                   	push   eax
c0016baa:	e8 2b 05 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0016baf:	83 c4 10             	add    esp,0x10
c0016bb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bba:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bc3:	83 e2 02             	and    edx,0x2
c0016bc6:	89 d3                	mov    ebx,edx
c0016bc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bcc:	83 e2 00             	and    edx,0x0
c0016bcf:	89 d6                	mov    esi,edx
c0016bd1:	56                   	push   esi
c0016bd2:	53                   	push   ebx
c0016bd3:	68 e1 00 00 00       	push   0xe1
c0016bd8:	50                   	push   eax
c0016bd9:	e8 28 05 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016bde:	83 c4 10             	add    esp,0x10
c0016be1:	e8 ae 95 fe ff       	call   c0000194 <doTPAUSE>
c0016be6:	eb 01                	jmp    c0016be9 <HalSystemIdle()+0x75>
c0016be8:	f4                   	hlt    
c0016be9:	90                   	nop
c0016bea:	83 c4 14             	add    esp,0x14
c0016bed:	5b                   	pop    ebx
c0016bee:	5e                   	pop    esi
c0016bef:	c3                   	ret    

c0016bf0 <displayProgramFault(char const*)>:
c0016bf0:	83 ec 0c             	sub    esp,0xc
c0016bf3:	83 ec 0c             	sub    esp,0xc
c0016bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bfa:	e8 70 3d ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c12:	85 c0                	test   eax,eax
c0016c14:	74 21                	je     c0016c37 <displayProgramFault(char const*)+0x47>
c0016c16:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c26:	6a 04                	push   0x4
c0016c28:	6a 0f                	push   0xf
c0016c2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c2e:	50                   	push   eax
c0016c2f:	e8 d4 1e ff ff       	call   c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016c34:	83 c4 10             	add    esp,0x10
c0016c37:	90                   	nop
c0016c38:	83 c4 0c             	add    esp,0xc
c0016c3b:	c3                   	ret    

c0016c3c <gpFault(regs*, void*)>:
c0016c3c:	83 ec 1c             	sub    esp,0x1c
c0016c3f:	c7 05 14 82 02 c0 db 60 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc00160db
c0016c49:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c4e:	85 c0                	test   eax,eax
c0016c50:	74 1e                	je     c0016c70 <gpFault(regs*, void*)+0x34>
c0016c52:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016c57:	83 ec 0c             	sub    esp,0xc
c0016c5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c5e:	ff d0                	call   eax
c0016c60:	83 c4 10             	add    esp,0x10
c0016c63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016c67:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c6c:	85 c0                	test   eax,eax
c0016c6e:	75 2e                	jne    c0016c9e <gpFault(regs*, void*)+0x62>
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	68 bb 14 02 c0       	push   0xc00214bb
c0016c78:	e8 73 ff ff ff       	call   c0016bf0 <displayProgramFault(char const*)>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c87:	e8 8c fb ff ff       	call   c0016818 <displayDebugInfo(regs*)>
c0016c8c:	83 c4 10             	add    esp,0x10
c0016c8f:	83 ec 0c             	sub    esp,0xc
c0016c92:	6a 00                	push   0x0
c0016c94:	e8 07 ee ff ff       	call   c0015aa0 <Thr::terminateFromIRQ(int)>
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	eb 01                	jmp    c0016c9f <gpFault(regs*, void*)+0x63>
c0016c9e:	90                   	nop
c0016c9f:	83 c4 1c             	add    esp,0x1c
c0016ca2:	c3                   	ret    

c0016ca3 <pgFault(regs*, void*)>:
c0016ca3:	83 ec 1c             	sub    esp,0x1c
c0016ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016caa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016cad:	0f 20 d0             	mov    eax,cr2
c0016cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cb8:	83 ec 04             	sub    esp,0x4
c0016cbb:	52                   	push   edx
c0016cbc:	50                   	push   eax
c0016cbd:	68 98 15 02 c0       	push   0xc0021598
c0016cc2:	e8 a8 3c ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0016cc7:	83 c4 10             	add    esp,0x10
c0016cca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cd1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cd4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016cda:	0f 20 d2             	mov    edx,cr2
c0016cdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016ce1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ce5:	83 ec 08             	sub    esp,0x8
c0016ce8:	52                   	push   edx
c0016ce9:	50                   	push   eax
c0016cea:	e8 25 38 ff ff       	call   c000a514 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	0f b6 c0             	movzx  eax,al
c0016cf5:	85 c0                	test   eax,eax
c0016cf7:	75 2e                	jne    c0016d27 <pgFault(regs*, void*)+0x84>
c0016cf9:	83 ec 0c             	sub    esp,0xc
c0016cfc:	68 d4 14 02 c0       	push   0xc00214d4
c0016d01:	e8 ea fe ff ff       	call   c0016bf0 <displayProgramFault(char const*)>
c0016d06:	83 c4 10             	add    esp,0x10
c0016d09:	83 ec 0c             	sub    esp,0xc
c0016d0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d10:	e8 03 fb ff ff       	call   c0016818 <displayDebugInfo(regs*)>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	83 ec 0c             	sub    esp,0xc
c0016d1b:	6a 00                	push   0x0
c0016d1d:	e8 7e ed ff ff       	call   c0015aa0 <Thr::terminateFromIRQ(int)>
c0016d22:	83 c4 10             	add    esp,0x10
c0016d25:	eb 01                	jmp    c0016d28 <pgFault(regs*, void*)+0x85>
c0016d27:	90                   	nop
c0016d28:	83 c4 1c             	add    esp,0x1c
c0016d2b:	c3                   	ret    

c0016d2c <otherISRHandler(regs*, void*)>:
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	83 ec 0c             	sub    esp,0xc
c0016d32:	68 c0 15 02 c0       	push   0xc00215c0
c0016d37:	e8 b4 fe ff ff       	call   c0016bf0 <displayProgramFault(char const*)>
c0016d3c:	83 c4 10             	add    esp,0x10
c0016d3f:	83 ec 0c             	sub    esp,0xc
c0016d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d46:	e8 cd fa ff ff       	call   c0016818 <displayDebugInfo(regs*)>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	83 ec 0c             	sub    esp,0xc
c0016d51:	6a 00                	push   0x0
c0016d53:	e8 48 ed ff ff       	call   c0015aa0 <Thr::terminateFromIRQ(int)>
c0016d58:	83 c4 10             	add    esp,0x10
c0016d5b:	90                   	nop
c0016d5c:	83 c4 0c             	add    esp,0xc
c0016d5f:	c3                   	ret    

c0016d60 <opcodeFault(regs*, void*)>:
c0016d60:	55                   	push   ebp
c0016d61:	89 e5                	mov    ebp,esp
c0016d63:	83 ec 08             	sub    esp,0x8
c0016d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d6c:	83 ec 08             	sub    esp,0x8
c0016d6f:	50                   	push   eax
c0016d70:	68 df 14 02 c0       	push   0xc00214df
c0016d75:	e8 f5 3b ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0016d7a:	83 c4 10             	add    esp,0x10
c0016d7d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d88:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016d8e:	0f b6 c0             	movzx  eax,al
c0016d91:	85 c0                	test   eax,eax
c0016d93:	74 21                	je     c0016db6 <opcodeFault(regs*, void*)+0x56>
c0016d95:	83 ec 0c             	sub    esp,0xc
c0016d98:	68 e8 15 02 c0       	push   0xc00215e8
c0016d9d:	e8 cd 3b ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0016da2:	83 c4 10             	add    esp,0x10
c0016da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016da8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016dab:	8d 50 19             	lea    edx,[eax+0x19]
c0016dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016db1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016db4:	eb 2b                	jmp    c0016de1 <opcodeFault(regs*, void*)+0x81>
c0016db6:	83 ec 0c             	sub    esp,0xc
c0016db9:	68 ed 14 02 c0       	push   0xc00214ed
c0016dbe:	e8 2d fe ff ff       	call   c0016bf0 <displayProgramFault(char const*)>
c0016dc3:	83 c4 10             	add    esp,0x10
c0016dc6:	83 ec 0c             	sub    esp,0xc
c0016dc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016dcc:	e8 47 fa ff ff       	call   c0016818 <displayDebugInfo(regs*)>
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	83 ec 0c             	sub    esp,0xc
c0016dd7:	6a 00                	push   0x0
c0016dd9:	e8 c2 ec ff ff       	call   c0015aa0 <Thr::terminateFromIRQ(int)>
c0016dde:	83 c4 10             	add    esp,0x10
c0016de1:	c9                   	leave  
c0016de2:	c3                   	ret    

c0016de3 <i386SaveCoprocessor(void*)>:
c0016de3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016de7:	83 c0 3f             	add    eax,0x3f
c0016dea:	83 e0 c0             	and    eax,0xffffffc0
c0016ded:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016df1:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0016df7 <i386LoadCoprocessor(void*)>:
c0016df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dfb:	83 c0 3f             	add    eax,0x3f
c0016dfe:	83 e0 c0             	and    eax,0xffffffc0
c0016e01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e05:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016e0b <x87EmulHandler(regs*, void*)>:
c0016e0b:	53                   	push   ebx
c0016e0c:	83 ec 08             	sub    esp,0x8
c0016e0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e14:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016e18:	74 10                	je     c0016e2a <x87EmulHandler(regs*, void*)+0x1f>
c0016e1a:	83 ec 0c             	sub    esp,0xc
c0016e1d:	68 fa 14 02 c0       	push   0xc00214fa
c0016e22:	e8 12 9a ff ff       	call   c0010839 <KePanic(char const*)>
c0016e27:	83 c4 10             	add    esp,0x10
c0016e2a:	0f 20 c0             	mov    eax,cr0
c0016e2d:	a8 08                	test   al,0x8
c0016e2f:	74 59                	je     c0016e8a <x87EmulHandler(regs*, void*)+0x7f>
c0016e31:	0f 06                	clts   
c0016e33:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016e38:	85 c0                	test   eax,eax
c0016e3a:	74 0e                	je     c0016e4a <x87EmulHandler(regs*, void*)+0x3f>
c0016e3c:	83 ec 0c             	sub    esp,0xc
c0016e3f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e42:	e8 9c ff ff ff       	call   c0016de3 <i386SaveCoprocessor(void*)>
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016e50:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016e54:	75 12                	jne    c0016e68 <x87EmulHandler(regs*, void*)+0x5d>
c0016e56:	83 ec 0c             	sub    esp,0xc
c0016e59:	68 40 02 00 00       	push   0x240
c0016e5e:	e8 68 0c ff ff       	call   c0007acb <malloc>
c0016e63:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016e66:	eb 10                	jmp    c0016e78 <x87EmulHandler(regs*, void*)+0x6d>
c0016e68:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016e6d:	83 ec 0c             	sub    esp,0xc
c0016e70:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e73:	e8 7f ff ff ff       	call   c0016df7 <i386LoadCoprocessor(void*)>
c0016e78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e7d:	83 c4 10             	add    esp,0x10
c0016e80:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0016e85:	83 c4 08             	add    esp,0x8
c0016e88:	5b                   	pop    ebx
c0016e89:	c3                   	ret    
c0016e8a:	83 ec 0c             	sub    esp,0xc
c0016e8d:	68 0e 15 02 c0       	push   0xc002150e
c0016e92:	e8 d8 3a ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0016e97:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016e9f:	83 c4 18             	add    esp,0x18
c0016ea2:	5b                   	pop    ebx
c0016ea3:	e9 f8 eb ff ff       	jmp    c0015aa0 <Thr::terminateFromIRQ(int)>

c0016ea8 <HalInitialiseCoprocessor()>:
c0016ea8:	83 ec 10             	sub    esp,0x10
c0016eab:	6a 00                	push   0x0
c0016ead:	68 0b 6e 01 c0       	push   0xc0016e0b
c0016eb2:	6a 07                	push   0x7
c0016eb4:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0016ebe:	e8 43 54 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ec3:	e8 28 70 00 00       	call   c001def0 <avxDetect>
c0016ec8:	83 c4 10             	add    esp,0x10
c0016ecb:	85 c0                	test   eax,eax
c0016ecd:	74 1c                	je     c0016eeb <HalInitialiseCoprocessor()+0x43>
c0016ecf:	c7 05 10 82 02 c0 1a df 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001df1a
c0016ed9:	c7 05 0c 82 02 c0 2b df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df2b
c0016ee3:	83 c4 0c             	add    esp,0xc
c0016ee6:	e9 51 70 00 00       	jmp    c001df3c <avxInit>
c0016eeb:	e8 90 73 00 00       	call   c001e280 <absolutelyNoChanceInHell>
c0016ef0:	85 c0                	test   eax,eax
c0016ef2:	74 1c                	je     c0016f10 <HalInitialiseCoprocessor()+0x68>
c0016ef4:	c7 05 10 82 02 c0 98 e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e298
c0016efe:	c7 05 0c 82 02 c0 a0 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2a0
c0016f08:	83 c4 0c             	add    esp,0xc
c0016f0b:	e9 98 73 00 00       	jmp    c001e2a8 <sseInit>
c0016f10:	e8 b1 73 00 00       	call   c001e2c6 <x87Detect>
c0016f15:	85 c0                	test   eax,eax
c0016f17:	74 1c                	je     c0016f35 <HalInitialiseCoprocessor()+0x8d>
c0016f19:	c7 05 10 82 02 c0 e1 e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e2e1
c0016f23:	c7 05 0c 82 02 c0 e8 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2e8
c0016f2d:	83 c4 0c             	add    esp,0xc
c0016f30:	e9 ba 73 00 00       	jmp    c001e2ef <x87Init>
c0016f35:	c7 05 10 82 02 c0 e5 67 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00167e5
c0016f3f:	c7 05 0c 82 02 c0 e5 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc00167e5
c0016f49:	0f 20 c0             	mov    eax,cr0
c0016f4c:	83 c8 04             	or     eax,0x4
c0016f4f:	0f 22 c0             	mov    cr0,eax
c0016f52:	83 c4 0c             	add    esp,0xc
c0016f55:	c3                   	ret    

c0016f56 <HalPanic(char const*)>:
c0016f56:	53                   	push   ebx
c0016f57:	83 ec 10             	sub    esp,0x10
c0016f5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016f5e:	fa                   	cli    
c0016f5f:	53                   	push   ebx
c0016f60:	68 24 15 02 c0       	push   0xc0021524
c0016f65:	e8 05 3a ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0016f6a:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016f6f:	83 c4 10             	add    esp,0x10
c0016f72:	85 c0                	test   eax,eax
c0016f74:	74 09                	je     c0016f7f <HalPanic(char const*)+0x29>
c0016f76:	83 ec 0c             	sub    esp,0xc
c0016f79:	53                   	push   ebx
c0016f7a:	ff d0                	call   eax
c0016f7c:	83 c4 10             	add    esp,0x10
c0016f7f:	50                   	push   eax
c0016f80:	6a 01                	push   0x1
c0016f82:	6a 0f                	push   0xf
c0016f84:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f8a:	e8 25 16 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f8f:	5a                   	pop    edx
c0016f90:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f96:	e8 09 18 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0016f9b:	59                   	pop    ecx
c0016f9c:	58                   	pop    eax
c0016f9d:	68 44 fd 01 c0       	push   0xc001fd44
c0016fa2:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fa8:	e8 3f 16 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0016fad:	83 c4 0c             	add    esp,0xc
c0016fb0:	6a 01                	push   0x1
c0016fb2:	6a 0f                	push   0xf
c0016fb4:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fba:	e8 f5 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fbf:	58                   	pop    eax
c0016fc0:	5a                   	pop    edx
c0016fc1:	68 3d 15 02 c0       	push   0xc002153d
c0016fc6:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fcc:	e8 c5 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016fd1:	83 c4 0c             	add    esp,0xc
c0016fd4:	6a 0f                	push   0xf
c0016fd6:	6a 01                	push   0x1
c0016fd8:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fde:	e8 d1 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fe3:	59                   	pop    ecx
c0016fe4:	58                   	pop    eax
c0016fe5:	68 46 15 02 c0       	push   0xc0021546
c0016fea:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ff0:	e8 a1 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0016ff5:	83 c4 0c             	add    esp,0xc
c0016ff8:	6a 01                	push   0x1
c0016ffa:	6a 0f                	push   0xf
c0016ffc:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017002:	e8 ad 15 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017007:	58                   	pop    eax
c0017008:	5a                   	pop    edx
c0017009:	68 8a 15 02 c0       	push   0xc002158a
c001700e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017014:	e8 7d 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c0017019:	59                   	pop    ecx
c001701a:	58                   	pop    eax
c001701b:	68 53 15 02 c0       	push   0xc0021553
c0017020:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017026:	e8 6b 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001702b:	58                   	pop    eax
c001702c:	5a                   	pop    edx
c001702d:	68 8d 15 02 c0       	push   0xc002158d
c0017032:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017038:	e8 59 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001703d:	59                   	pop    ecx
c001703e:	58                   	pop    eax
c001703f:	53                   	push   ebx
c0017040:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017046:	e8 4b 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001704b:	58                   	pop    eax
c001704c:	5a                   	pop    edx
c001704d:	68 8a 15 02 c0       	push   0xc002158a
c0017052:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017058:	e8 39 1a ff ff       	call   c0008a96 <VgaText::puts(char const*)>
c001705d:	83 c4 10             	add    esp,0x10
c0017060:	eb fe                	jmp    c0017060 <HalPanic(char const*)+0x10a>

c0017062 <HalQueryPerformanceCounter()>:
c0017062:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017067:	31 d2                	xor    edx,edx
c0017069:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001706f:	31 c0                	xor    eax,eax
c0017071:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017078:	74 02                	je     c001707c <HalQueryPerformanceCounter()+0x1a>
c001707a:	0f 31                	rdtsc  
c001707c:	c3                   	ret    

c001707d <HalInitialise()>:
c001707d:	53                   	push   ebx
c001707e:	83 ec 08             	sub    esp,0x8
c0017081:	e8 b7 54 ff ff       	call   c000c53d <setupINTS()>
c0017086:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001708b:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017092:	75 0f                	jne    c00170a3 <HalInitialise()+0x26>
c0017094:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001709a:	83 e2 fe             	and    edx,0xfffffffe
c001709d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170a3:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c00170aa:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170b0:	83 e2 fe             	and    edx,0xfffffffe
c00170b3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170b9:	e8 9e 02 00 00       	call   c001735c <picOpen()>
c00170be:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170c5:	74 0a                	je     c00170d1 <HalInitialise()+0x54>
c00170c7:	e8 e0 01 00 00       	call   c00172ac <picDisable()>
c00170cc:	e8 97 67 00 00       	call   c001d868 <apicOpen()>
c00170d1:	50                   	push   eax
c00170d2:	bb 0f 00 00 00       	mov    ebx,0xf
c00170d7:	6a 00                	push   0x0
c00170d9:	68 2c 6d 01 c0       	push   0xc0016d2c
c00170de:	6a 00                	push   0x0
c00170e0:	e8 21 52 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170e5:	83 c4 0c             	add    esp,0xc
c00170e8:	6a 00                	push   0x0
c00170ea:	68 2c 6d 01 c0       	push   0xc0016d2c
c00170ef:	6a 01                	push   0x1
c00170f1:	e8 10 52 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170f6:	83 c4 0c             	add    esp,0xc
c00170f9:	6a 00                	push   0x0
c00170fb:	68 e6 67 01 c0       	push   0xc00167e6
c0017100:	6a 02                	push   0x2
c0017102:	e8 ff 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017107:	83 c4 0c             	add    esp,0xc
c001710a:	6a 00                	push   0x0
c001710c:	68 2c 6d 01 c0       	push   0xc0016d2c
c0017111:	6a 03                	push   0x3
c0017113:	e8 ee 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017118:	83 c4 0c             	add    esp,0xc
c001711b:	6a 00                	push   0x0
c001711d:	68 2c 6d 01 c0       	push   0xc0016d2c
c0017122:	6a 04                	push   0x4
c0017124:	e8 dd 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017129:	83 c4 0c             	add    esp,0xc
c001712c:	6a 00                	push   0x0
c001712e:	68 2c 6d 01 c0       	push   0xc0016d2c
c0017133:	6a 05                	push   0x5
c0017135:	e8 cc 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001713a:	83 c4 0c             	add    esp,0xc
c001713d:	6a 00                	push   0x0
c001713f:	68 60 6d 01 c0       	push   0xc0016d60
c0017144:	6a 06                	push   0x6
c0017146:	e8 bb 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001714b:	83 c4 0c             	add    esp,0xc
c001714e:	6a 00                	push   0x0
c0017150:	68 ff 67 01 c0       	push   0xc00167ff
c0017155:	6a 08                	push   0x8
c0017157:	e8 aa 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001715c:	83 c4 0c             	add    esp,0xc
c001715f:	6a 00                	push   0x0
c0017161:	68 2c 6d 01 c0       	push   0xc0016d2c
c0017166:	6a 09                	push   0x9
c0017168:	e8 99 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001716d:	83 c4 0c             	add    esp,0xc
c0017170:	6a 00                	push   0x0
c0017172:	68 2c 6d 01 c0       	push   0xc0016d2c
c0017177:	6a 0a                	push   0xa
c0017179:	e8 88 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001717e:	83 c4 0c             	add    esp,0xc
c0017181:	6a 00                	push   0x0
c0017183:	68 2c 6d 01 c0       	push   0xc0016d2c
c0017188:	6a 0b                	push   0xb
c001718a:	e8 77 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001718f:	83 c4 0c             	add    esp,0xc
c0017192:	6a 00                	push   0x0
c0017194:	68 3c 6c 01 c0       	push   0xc0016c3c
c0017199:	6a 0d                	push   0xd
c001719b:	e8 66 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a0:	83 c4 0c             	add    esp,0xc
c00171a3:	6a 00                	push   0x0
c00171a5:	68 a3 6c 01 c0       	push   0xc0016ca3
c00171aa:	6a 0e                	push   0xe
c00171ac:	e8 55 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	50                   	push   eax
c00171b5:	6a 00                	push   0x0
c00171b7:	68 2c 6d 01 c0       	push   0xc0016d2c
c00171bc:	53                   	push   ebx
c00171bd:	43                   	inc    ebx
c00171be:	e8 43 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	83 fb 1e             	cmp    ebx,0x1e
c00171c9:	75 e9                	jne    c00171b4 <HalInitialise()+0x137>
c00171cb:	50                   	push   eax
c00171cc:	6a 00                	push   0x0
c00171ce:	68 27 1b 01 c0       	push   0xc0011b27
c00171d3:	6a 60                	push   0x60
c00171d5:	e8 2c 51 ff ff       	call   c000c306 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171da:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00171df:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00171e9:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00171f0:	e8 d6 08 ff ff       	call   c0007acb <malloc>
c00171f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00171f8:	89 c3                	mov    ebx,eax
c00171fa:	e8 35 09 00 00       	call   c0017b34 <RTC::RTC()>
c00171ff:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017209:	5a                   	pop    edx
c001720a:	59                   	pop    ecx
c001720b:	53                   	push   ebx
c001720c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017212:	e8 b9 4b ff ff       	call   c000bdd0 <Device::addChild(Device*)>
c0017217:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017219:	6a 00                	push   0x0
c001721b:	6a 00                	push   0x0
c001721d:	6a 00                	push   0x0
c001721f:	53                   	push   ebx
c0017220:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017223:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017228:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001722e:	83 c4 28             	add    esp,0x28
c0017231:	5b                   	pop    ebx
c0017232:	c3                   	ret    

c0017233 <HalMakeBeep(int)>:
c0017233:	53                   	push   ebx
c0017234:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017238:	85 db                	test   ebx,ebx
c001723a:	75 07                	jne    c0017243 <HalMakeBeep(int)+0x10>
c001723c:	e4 61                	in     al,0x61
c001723e:	83 e0 fc             	and    eax,0xfffffffc
c0017241:	eb 26                	jmp    c0017269 <HalMakeBeep(int)+0x36>
c0017243:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017248:	99                   	cdq    
c0017249:	f7 fb                	idiv   ebx
c001724b:	89 c1                	mov    ecx,eax
c001724d:	b0 b6                	mov    al,0xb6
c001724f:	e6 43                	out    0x43,al
c0017251:	88 c8                	mov    al,cl
c0017253:	e6 42                	out    0x42,al
c0017255:	89 c8                	mov    eax,ecx
c0017257:	c1 e8 08             	shr    eax,0x8
c001725a:	e6 42                	out    0x42,al
c001725c:	e4 61                	in     al,0x61
c001725e:	89 c2                	mov    edx,eax
c0017260:	83 ca 03             	or     edx,0x3
c0017263:	38 d0                	cmp    al,dl
c0017265:	74 04                	je     c001726b <HalMakeBeep(int)+0x38>
c0017267:	88 d0                	mov    al,dl
c0017269:	e6 61                	out    0x61,al
c001726b:	5b                   	pop    ebx
c001726c:	c3                   	ret    

c001726d <HalGetRand()>:
c001726d:	31 c0                	xor    eax,eax
c001726f:	c3                   	ret    

c0017270 <HalEndOfInterrupt(int)>:
c0017270:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017277:	74 23                	je     c001729c <HalEndOfInterrupt(int)+0x2c>
c0017279:	83 ec 14             	sub    esp,0x14
c001727c:	6a 1b                	push   0x1b
c001727e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017284:	e8 51 fe fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0017289:	25 00 f0 ff ff       	and    eax,0xfffff000
c001728e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017298:	83 c4 1c             	add    esp,0x1c
c001729b:	c3                   	ret    
c001729c:	e9 3f 02 00 00       	jmp    c00174e0 <picEOI(int)>

c00172a1 <HalRestart()>:
c00172a1:	c3                   	ret    

c00172a2 <HalShutdown()>:
c00172a2:	c3                   	ret    

c00172a3 <HalSleep()>:
c00172a3:	c3                   	ret    

c00172a4 <picIoWait()>:
c00172a4:	eb 00                	jmp    c00172a6 <picIoWait()+0x2>
c00172a6:	eb 00                	jmp    c00172a8 <picIoWait()+0x4>
c00172a8:	90                   	nop
c00172a9:	c3                   	ret    
c00172aa:	66 90                	xchg   ax,ax

c00172ac <picDisable()>:
c00172ac:	83 ec 10             	sub    esp,0x10
c00172af:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00172b6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00172bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00172c4:	ee                   	out    dx,al
c00172c5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00172cc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00172d1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172d5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00172da:	ee                   	out    dx,al
c00172db:	90                   	nop
c00172dc:	83 c4 10             	add    esp,0x10
c00172df:	c3                   	ret    

c00172e0 <picGetIRQReg(int)>:
c00172e0:	83 ec 10             	sub    esp,0x10
c00172e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172e7:	0f b6 c0             	movzx  eax,al
c00172ea:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00172f1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00172f5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00172f9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00172fe:	ee                   	out    dx,al
c00172ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017303:	0f b6 c0             	movzx  eax,al
c0017306:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001730d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017311:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017315:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001731a:	ee                   	out    dx,al
c001731b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017322:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017327:	89 c2                	mov    edx,eax
c0017329:	ec                   	in     al,dx
c001732a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001732e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017332:	0f b6 c0             	movzx  eax,al
c0017335:	c1 e0 08             	shl    eax,0x8
c0017338:	89 c1                	mov    ecx,eax
c001733a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017341:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017346:	89 c2                	mov    edx,eax
c0017348:	ec                   	in     al,dx
c0017349:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001734d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017351:	0f b6 c0             	movzx  eax,al
c0017354:	09 c8                	or     eax,ecx
c0017356:	83 c4 10             	add    esp,0x10
c0017359:	c3                   	ret    
c001735a:	66 90                	xchg   ax,ax

c001735c <picOpen()>:
c001735c:	83 ec 50             	sub    esp,0x50
c001735f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017366:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001736b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001736f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017373:	ee                   	out    dx,al
c0017374:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001737b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017380:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017384:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017388:	ee                   	out    dx,al
c0017389:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017391:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017399:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00173a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173a4:	89 c2                	mov    edx,eax
c00173a6:	ec                   	in     al,dx
c00173a7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00173ab:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00173af:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00173b3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00173ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173be:	89 c2                	mov    edx,eax
c00173c0:	ec                   	in     al,dx
c00173c1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00173c5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00173c9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00173cd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00173d4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00173d9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00173dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173e1:	ee                   	out    dx,al
c00173e2:	e8 bd fe ff ff       	call   c00172a4 <picIoWait()>
c00173e7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00173ee:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00173f3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00173f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00173fb:	ee                   	out    dx,al
c00173fc:	e8 a3 fe ff ff       	call   c00172a4 <picIoWait()>
c0017401:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017405:	0f b6 c0             	movzx  eax,al
c0017408:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001740f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017413:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017417:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001741b:	ee                   	out    dx,al
c001741c:	e8 83 fe ff ff       	call   c00172a4 <picIoWait()>
c0017421:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017425:	0f b6 c0             	movzx  eax,al
c0017428:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001742f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017433:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017437:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001743b:	ee                   	out    dx,al
c001743c:	e8 63 fe ff ff       	call   c00172a4 <picIoWait()>
c0017441:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017448:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001744d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017451:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017455:	ee                   	out    dx,al
c0017456:	e8 49 fe ff ff       	call   c00172a4 <picIoWait()>
c001745b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017462:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017467:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001746b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001746f:	ee                   	out    dx,al
c0017470:	e8 2f fe ff ff       	call   c00172a4 <picIoWait()>
c0017475:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001747c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017481:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017485:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017489:	ee                   	out    dx,al
c001748a:	e8 15 fe ff ff       	call   c00172a4 <picIoWait()>
c001748f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017496:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001749b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001749f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174a3:	ee                   	out    dx,al
c00174a4:	e8 fb fd ff ff       	call   c00172a4 <picIoWait()>
c00174a9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00174ae:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00174b5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00174b9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00174bd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174c1:	ee                   	out    dx,al
c00174c2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00174c7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00174ce:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00174d2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00174d6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174da:	ee                   	out    dx,al
c00174db:	90                   	nop
c00174dc:	83 c4 50             	add    esp,0x50
c00174df:	c3                   	ret    

c00174e0 <picEOI(int)>:
c00174e0:	83 ec 10             	sub    esp,0x10
c00174e3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174e8:	75 1e                	jne    c0017508 <picEOI(int)+0x28>
c00174ea:	6a 0b                	push   0xb
c00174ec:	e8 ef fd ff ff       	call   c00172e0 <picGetIRQReg(int)>
c00174f1:	83 c4 04             	add    esp,0x4
c00174f4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00174f9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00174fe:	25 80 00 00 00       	and    eax,0x80
c0017503:	74 73                	je     c0017578 <picEOI(int)+0x98>
c0017505:	8d 76 00             	lea    esi,[esi+0x0]
c0017508:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001750d:	75 31                	jne    c0017540 <picEOI(int)+0x60>
c001750f:	6a 0b                	push   0xb
c0017511:	e8 ca fd ff ff       	call   c00172e0 <picGetIRQReg(int)>
c0017516:	83 c4 04             	add    esp,0x4
c0017519:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001751e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017522:	98                   	cwde   
c0017523:	85 c0                	test   eax,eax
c0017525:	78 19                	js     c0017540 <picEOI(int)+0x60>
c0017527:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001752e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017533:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017537:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001753c:	ee                   	out    dx,al
c001753d:	eb 3d                	jmp    c001757c <picEOI(int)+0x9c>
c001753f:	90                   	nop
c0017540:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017545:	7e 19                	jle    c0017560 <picEOI(int)+0x80>
c0017547:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001754e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017553:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017557:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001755c:	ee                   	out    dx,al
c001755d:	8d 76 00             	lea    esi,[esi+0x0]
c0017560:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017567:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001756c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017570:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017575:	ee                   	out    dx,al
c0017576:	eb 04                	jmp    c001757c <picEOI(int)+0x9c>
c0017578:	90                   	nop
c0017579:	8d 76 00             	lea    esi,[esi+0x0]
c001757c:	83 c4 10             	add    esp,0x10
c001757f:	c3                   	ret    

c0017580 <RTC::open(int, int, void*)>:
c0017580:	31 c0                	xor    eax,eax
c0017582:	c3                   	ret    
c0017583:	90                   	nop

c0017584 <RTC::close(int, int, void*)>:
c0017584:	31 c0                	xor    eax,eax
c0017586:	c3                   	ret    
c0017587:	90                   	nop

c0017588 <RTC::timeInSecondsUTC()>:
c0017588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001758c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017592:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017598:	c3                   	ret    
c0017599:	90                   	nop

c001759a <RTC::timeInDatetimeUTC()>:
c001759a:	53                   	push   ebx
c001759b:	83 ec 14             	sub    esp,0x14
c001759e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00175a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00175a8:	50                   	push   eax
c00175a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00175ac:	83 c4 0c             	add    esp,0xc
c00175af:	52                   	push   edx
c00175b0:	50                   	push   eax
c00175b1:	53                   	push   ebx
c00175b2:	e8 8d 45 ff ff       	call   c000bb44 <secondsToDatetime(unsigned long long)>
c00175b7:	89 d8                	mov    eax,ebx
c00175b9:	83 c4 14             	add    esp,0x14
c00175bc:	5b                   	pop    ebx
c00175bd:	c2 04 00             	ret    0x4

c00175c0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00175c0:	56                   	push   esi
c00175c1:	53                   	push   ebx
c00175c2:	83 ec 14             	sub    esp,0x14
c00175c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175cb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00175ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c00175d2:	52                   	push   edx
c00175d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175db:	50                   	push   eax
c00175dc:	e8 63 45 ff ff       	call   c000bb44 <secondsToDatetime(unsigned long long)>
c00175e1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00175e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175f1:	89 f0                	mov    eax,esi
c00175f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00175f7:	83 c4 20             	add    esp,0x20
c00175fa:	5b                   	pop    ebx
c00175fb:	5e                   	pop    esi
c00175fc:	ff e0                	jmp    eax

c00175fe <RTC::~RTC()>:
c00175fe:	83 ec 0c             	sub    esp,0xc
c0017601:	ba 28 16 02 c0       	mov    edx,0xc0021628
c0017606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760a:	89 10                	mov    DWORD PTR [eax],edx
c001760c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017610:	83 ec 0c             	sub    esp,0xc
c0017613:	50                   	push   eax
c0017614:	e8 b7 42 ff ff       	call   c000b8d0 <Clock::~Clock()>
c0017619:	83 c4 10             	add    esp,0x10
c001761c:	90                   	nop
c001761d:	83 c4 0c             	add    esp,0xc
c0017620:	c3                   	ret    
c0017621:	90                   	nop

c0017622 <RTC::~RTC()>:
c0017622:	83 ec 0c             	sub    esp,0xc
c0017625:	83 ec 0c             	sub    esp,0xc
c0017628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001762c:	e8 cd ff ff ff       	call   c00175fe <RTC::~RTC()>
c0017631:	83 c4 10             	add    esp,0x10
c0017634:	83 ec 08             	sub    esp,0x8
c0017637:	68 60 01 00 00       	push   0x160
c001763c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017640:	e8 2c 32 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	83 c4 0c             	add    esp,0xc
c001764b:	c3                   	ret    

c001764c <RTC::get_update_in_progress_flag()>:
c001764c:	83 ec 14             	sub    esp,0x14
c001764f:	6a 0a                	push   0xa
c0017651:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017657:	e8 36 fb fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001765c:	83 c4 1c             	add    esp,0x1c
c001765f:	0f b6 c0             	movzx  eax,al
c0017662:	c1 e8 07             	shr    eax,0x7
c0017665:	c3                   	ret    

c0017666 <RTC::completeRTCRefresh()>:
c0017666:	55                   	push   ebp
c0017667:	57                   	push   edi
c0017668:	56                   	push   esi
c0017669:	53                   	push   ebx
c001766a:	83 ec 3c             	sub    esp,0x3c
c001766d:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017673:	83 ec 0c             	sub    esp,0xc
c0017676:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001767a:	e8 cd ff ff ff       	call   c001764c <RTC::get_update_in_progress_flag()>
c001767f:	83 c4 10             	add    esp,0x10
c0017682:	84 c0                	test   al,al
c0017684:	74 0e                	je     c0017694 <RTC::completeRTCRefresh()+0x2e>
c0017686:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001768c:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017692:	73 df                	jae    c0017673 <RTC::completeRTCRefresh()+0xd>
c0017694:	50                   	push   eax
c0017695:	50                   	push   eax
c0017696:	6a 00                	push   0x0
c0017698:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001769e:	e8 ef fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176a3:	89 c7                	mov    edi,eax
c00176a5:	58                   	pop    eax
c00176a6:	5a                   	pop    edx
c00176a7:	6a 02                	push   0x2
c00176a9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176af:	e8 de fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176b4:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00176b8:	59                   	pop    ecx
c00176b9:	5b                   	pop    ebx
c00176ba:	6a 04                	push   0x4
c00176bc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176c2:	e8 cb fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176c7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00176cb:	5e                   	pop    esi
c00176cc:	5d                   	pop    ebp
c00176cd:	6a 07                	push   0x7
c00176cf:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176d5:	e8 b8 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176da:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00176de:	58                   	pop    eax
c00176df:	5a                   	pop    edx
c00176e0:	6a 08                	push   0x8
c00176e2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176e8:	e8 a5 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00176ed:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00176f1:	59                   	pop    ecx
c00176f2:	5b                   	pop    ebx
c00176f3:	6a 09                	push   0x9
c00176f5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176fb:	e8 92 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017700:	0f b6 c0             	movzx  eax,al
c0017703:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017707:	83 c4 10             	add    esp,0x10
c001770a:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017710:	83 ec 0c             	sub    esp,0xc
c0017713:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017717:	e8 30 ff ff ff       	call   c001764c <RTC::get_update_in_progress_flag()>
c001771c:	83 c4 10             	add    esp,0x10
c001771f:	84 c0                	test   al,al
c0017721:	74 0e                	je     c0017731 <RTC::completeRTCRefresh()+0xcb>
c0017723:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017729:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001772f:	73 df                	jae    c0017710 <RTC::completeRTCRefresh()+0xaa>
c0017731:	51                   	push   ecx
c0017732:	51                   	push   ecx
c0017733:	6a 00                	push   0x0
c0017735:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001773b:	e8 52 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017740:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017744:	5b                   	pop    ebx
c0017745:	5e                   	pop    esi
c0017746:	6a 02                	push   0x2
c0017748:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001774e:	e8 3f fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017753:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017757:	5d                   	pop    ebp
c0017758:	58                   	pop    eax
c0017759:	6a 04                	push   0x4
c001775b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017761:	e8 2c fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017766:	88 c3                	mov    bl,al
c0017768:	58                   	pop    eax
c0017769:	5a                   	pop    edx
c001776a:	6a 07                	push   0x7
c001776c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017772:	e8 1b fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017777:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001777b:	59                   	pop    ecx
c001777c:	5e                   	pop    esi
c001777d:	6a 08                	push   0x8
c001777f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017785:	e8 08 fa fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001778a:	5d                   	pop    ebp
c001778b:	89 c6                	mov    esi,eax
c001778d:	58                   	pop    eax
c001778e:	6a 09                	push   0x9
c0017790:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017796:	e8 f7 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001779b:	89 f9                	mov    ecx,edi
c001779d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00177a1:	83 c4 10             	add    esp,0x10
c00177a4:	0f b6 e8             	movzx  ebp,al
c00177a7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00177ac:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00177b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177b4:	74 27                	je     c00177dd <RTC::completeRTCRefresh()+0x177>
c00177b6:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00177ba:	89 f0                	mov    eax,esi
c00177bc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00177c0:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00177c4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177c8:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00177cc:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00177d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00177d4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00177d8:	e9 2d ff ff ff       	jmp    c001770a <RTC::completeRTCRefresh()+0xa4>
c00177dd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00177e2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00177e6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00177ea:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00177ee:	75 c6                	jne    c00177b6 <RTC::completeRTCRefresh()+0x150>
c00177f0:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00177f5:	89 f1                	mov    ecx,esi
c00177f7:	0f b6 fb             	movzx  edi,bl
c00177fa:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00177fe:	0f b6 c9             	movzx  ecx,cl
c0017801:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017805:	89 f1                	mov    ecx,esi
c0017807:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001780b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001780f:	0f 94 c2             	sete   dl
c0017812:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017816:	0f 94 c0             	sete   al
c0017819:	21 d0                	and    eax,edx
c001781b:	31 d2                	xor    edx,edx
c001781d:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017821:	0f 94 c2             	sete   dl
c0017824:	85 c2                	test   edx,eax
c0017826:	74 8e                	je     c00177b6 <RTC::completeRTCRefresh()+0x150>
c0017828:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001782c:	75 88                	jne    c00177b6 <RTC::completeRTCRefresh()+0x150>
c001782e:	52                   	push   edx
c001782f:	52                   	push   edx
c0017830:	6a 0b                	push   0xb
c0017832:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017838:	e8 55 f9 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c001783d:	83 c4 10             	add    esp,0x10
c0017840:	a8 04                	test   al,0x4
c0017842:	75 7a                	jne    c00178be <RTC::completeRTCRefresh()+0x258>
c0017844:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017848:	c1 ef 04             	shr    edi,0x4
c001784b:	83 e6 0f             	and    esi,0xf
c001784e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017852:	c1 ed 04             	shr    ebp,0x4
c0017855:	6b ed 0a             	imul   ebp,ebp,0xa
c0017858:	c1 ea 04             	shr    edx,0x4
c001785b:	6b d2 0a             	imul   edx,edx,0xa
c001785e:	83 e1 0f             	and    ecx,0xf
c0017861:	01 d1                	add    ecx,edx
c0017863:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017867:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001786b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001786f:	c1 ea 04             	shr    edx,0x4
c0017872:	6b d2 0a             	imul   edx,edx,0xa
c0017875:	83 e1 0f             	and    ecx,0xf
c0017878:	01 d1                	add    ecx,edx
c001787a:	89 fa                	mov    edx,edi
c001787c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017880:	83 e2 07             	and    edx,0x7
c0017883:	89 d9                	mov    ecx,ebx
c0017885:	6b d2 0a             	imul   edx,edx,0xa
c0017888:	83 e1 0f             	and    ecx,0xf
c001788b:	83 e3 80             	and    ebx,0xffffff80
c001788e:	01 d1                	add    ecx,edx
c0017890:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017894:	09 cb                	or     ebx,ecx
c0017896:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001789a:	c1 ea 04             	shr    edx,0x4
c001789d:	6b d2 0a             	imul   edx,edx,0xa
c00178a0:	83 e1 0f             	and    ecx,0xf
c00178a3:	01 d1                	add    ecx,edx
c00178a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178a9:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00178ad:	c1 ea 04             	shr    edx,0x4
c00178b0:	6b d2 0a             	imul   edx,edx,0xa
c00178b3:	01 d6                	add    esi,edx
c00178b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178b9:	83 e2 0f             	and    edx,0xf
c00178bc:	01 d5                	add    ebp,edx
c00178be:	a8 02                	test   al,0x2
c00178c0:	75 15                	jne    c00178d7 <RTC::completeRTCRefresh()+0x271>
c00178c2:	f6 c3 80             	test   bl,0x80
c00178c5:	74 10                	je     c00178d7 <RTC::completeRTCRefresh()+0x271>
c00178c7:	83 e3 7f             	and    ebx,0x7f
c00178ca:	b9 18 00 00 00       	mov    ecx,0x18
c00178cf:	8d 43 0c             	lea    eax,[ebx+0xc]
c00178d2:	99                   	cdq    
c00178d3:	f7 f9                	idiv   ecx
c00178d5:	88 d3                	mov    bl,dl
c00178d7:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00178dd:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00178e3:	77 06                	ja     c00178eb <RTC::completeRTCRefresh()+0x285>
c00178e5:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00178eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00178f0:	31 c9                	xor    ecx,ecx
c00178f2:	31 d2                	xor    edx,edx
c00178f4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00178f8:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00178fc:	89 cd                	mov    ebp,ecx
c00178fe:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0017902:	c1 e7 10             	shl    edi,0x10
c0017905:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001790b:	c1 e0 10             	shl    eax,0x10
c001790e:	09 c5                	or     ebp,eax
c0017910:	89 e9                	mov    ecx,ebp
c0017912:	0f b7 c2             	movzx  eax,dx
c0017915:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017919:	09 f8                	or     eax,edi
c001791b:	89 c2                	mov    edx,eax
c001791d:	50                   	push   eax
c001791e:	50                   	push   eax
c001791f:	88 d9                	mov    cl,bl
c0017921:	51                   	push   ecx
c0017922:	52                   	push   edx
c0017923:	e8 97 40 ff ff       	call   c000b9bf <datetimeToSeconds(datetime_t)>
c0017928:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001792c:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017932:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017938:	83 c4 4c             	add    esp,0x4c
c001793b:	5b                   	pop    ebx
c001793c:	5e                   	pop    esi
c001793d:	5f                   	pop    edi
c001793e:	5d                   	pop    ebp
c001793f:	c3                   	ret    

c0017940 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017940:	55                   	push   ebp
c0017941:	57                   	push   edi
c0017942:	56                   	push   esi
c0017943:	53                   	push   ebx
c0017944:	83 ec 30             	sub    esp,0x30
c0017947:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001794b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001794f:	6a 00                	push   0x0
c0017951:	6a 00                	push   0x0
c0017953:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017959:	e8 4c f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c001795e:	83 c4 0c             	add    esp,0xc
c0017961:	6a 00                	push   0x0
c0017963:	6a 02                	push   0x2
c0017965:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001796b:	e8 3a f9 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017970:	89 f8                	mov    eax,edi
c0017972:	89 f9                	mov    ecx,edi
c0017974:	0f b6 c4             	movzx  eax,ah
c0017977:	31 d2                	xor    edx,edx
c0017979:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001797d:	c1 e9 10             	shr    ecx,0x10
c0017980:	89 f0                	mov    eax,esi
c0017982:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017986:	89 f0                	mov    eax,esi
c0017988:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001798c:	0f b6 c4             	movzx  eax,ah
c001798f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017993:	89 f0                	mov    eax,esi
c0017995:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017999:	c1 e8 10             	shr    eax,0x10
c001799c:	b9 64 00 00 00       	mov    ecx,0x64
c00179a1:	f7 f1                	div    ecx
c00179a3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00179a7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00179ab:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00179af:	59                   	pop    ecx
c00179b0:	5b                   	pop    ebx
c00179b1:	89 fb                	mov    ebx,edi
c00179b3:	6a 0b                	push   0xb
c00179b5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179bb:	e8 d2 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	a8 04                	test   al,0x4
c00179c5:	89 c5                	mov    ebp,eax
c00179c7:	75 6e                	jne    c0017a37 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00179c9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00179cd:	31 d2                	xor    edx,edx
c00179cf:	0f b6 c1             	movzx  eax,cl
c00179d2:	b9 0a 00 00 00       	mov    ecx,0xa
c00179d7:	f7 f1                	div    ecx
c00179d9:	c1 e0 04             	shl    eax,0x4
c00179dc:	09 d0                	or     eax,edx
c00179de:	31 d2                	xor    edx,edx
c00179e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179e4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00179e9:	f7 f1                	div    ecx
c00179eb:	c1 e0 04             	shl    eax,0x4
c00179ee:	09 d0                	or     eax,edx
c00179f0:	31 d2                	xor    edx,edx
c00179f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179f6:	0f b6 c3             	movzx  eax,bl
c00179f9:	f7 f1                	div    ecx
c00179fb:	c1 e0 04             	shl    eax,0x4
c00179fe:	09 d0                	or     eax,edx
c0017a00:	31 d2                	xor    edx,edx
c0017a02:	89 c3                	mov    ebx,eax
c0017a04:	89 f0                	mov    eax,esi
c0017a06:	0f b6 c0             	movzx  eax,al
c0017a09:	f7 f1                	div    ecx
c0017a0b:	c1 e0 04             	shl    eax,0x4
c0017a0e:	09 d0                	or     eax,edx
c0017a10:	31 d2                	xor    edx,edx
c0017a12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a16:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a1b:	f7 f1                	div    ecx
c0017a1d:	c1 e0 04             	shl    eax,0x4
c0017a20:	09 d0                	or     eax,edx
c0017a22:	31 d2                	xor    edx,edx
c0017a24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a2c:	f7 f1                	div    ecx
c0017a2e:	c1 e0 04             	shl    eax,0x4
c0017a31:	09 d0                	or     eax,edx
c0017a33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a37:	83 e5 02             	and    ebp,0x2
c0017a3a:	75 1e                	jne    c0017a5a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a3c:	0f b6 c3             	movzx  eax,bl
c0017a3f:	83 f8 0b             	cmp    eax,0xb
c0017a42:	76 10                	jbe    c0017a54 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017a44:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017a47:	84 d2                	test   dl,dl
c0017a49:	88 d3                	mov    bl,dl
c0017a4b:	75 02                	jne    c0017a4f <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017a4d:	b3 0c                	mov    bl,0xc
c0017a4f:	83 cb 80             	or     ebx,0xffffff80
c0017a52:	eb 06                	jmp    c0017a5a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a54:	85 c0                	test   eax,eax
c0017a56:	75 02                	jne    c0017a5a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a58:	b3 0c                	mov    bl,0xc
c0017a5a:	50                   	push   eax
c0017a5b:	0f b6 db             	movzx  ebx,bl
c0017a5e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a63:	52                   	push   edx
c0017a64:	6a 00                	push   0x0
c0017a66:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a6c:	e8 39 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a71:	83 c4 0c             	add    esp,0xc
c0017a74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a79:	50                   	push   eax
c0017a7a:	6a 02                	push   0x2
c0017a7c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a82:	e8 23 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a87:	83 c4 0c             	add    esp,0xc
c0017a8a:	53                   	push   ebx
c0017a8b:	6a 04                	push   0x4
c0017a8d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a93:	e8 12 f8 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a98:	83 c4 0c             	add    esp,0xc
c0017a9b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017aa0:	52                   	push   edx
c0017aa1:	6a 07                	push   0x7
c0017aa3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aa9:	e8 fc f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aae:	83 c4 0c             	add    esp,0xc
c0017ab1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017ab6:	50                   	push   eax
c0017ab7:	6a 08                	push   0x8
c0017ab9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017abf:	e8 e6 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ac4:	83 c4 0c             	add    esp,0xc
c0017ac7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017acc:	55                   	push   ebp
c0017acd:	6a 09                	push   0x9
c0017acf:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ad5:	e8 d0 f7 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ada:	5a                   	pop    edx
c0017adb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017adf:	e8 82 fb ff ff       	call   c0017666 <RTC::completeRTCRefresh()>
c0017ae4:	83 c4 3c             	add    esp,0x3c
c0017ae7:	b0 01                	mov    al,0x1
c0017ae9:	5b                   	pop    ebx
c0017aea:	5e                   	pop    esi
c0017aeb:	5f                   	pop    edi
c0017aec:	5d                   	pop    ebp
c0017aed:	c3                   	ret    

c0017aee <rtcIRQHandler(regs*, void*)>:
c0017aee:	53                   	push   ebx
c0017aef:	83 ec 10             	sub    esp,0x10
c0017af2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017af6:	6a 0c                	push   0xc
c0017af8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017afe:	e8 8f f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	a8 80                	test   al,0x80
c0017b08:	74 24                	je     c0017b2e <rtcIRQHandler(regs*, void*)+0x40>
c0017b0a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017b11:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017b18:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017b1f:	75 0d                	jne    c0017b2e <rtcIRQHandler(regs*, void*)+0x40>
c0017b21:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b25:	83 c4 08             	add    esp,0x8
c0017b28:	5b                   	pop    ebx
c0017b29:	e9 38 fb ff ff       	jmp    c0017666 <RTC::completeRTCRefresh()>
c0017b2e:	83 c4 08             	add    esp,0x8
c0017b31:	5b                   	pop    ebx
c0017b32:	c3                   	ret    
c0017b33:	90                   	nop

c0017b34 <RTC::RTC()>:
c0017b34:	83 ec 1c             	sub    esp,0x1c
c0017b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b3b:	83 ec 08             	sub    esp,0x8
c0017b3e:	68 0b 16 02 c0       	push   0xc002160b
c0017b43:	50                   	push   eax
c0017b44:	e8 51 3d ff ff       	call   c000b89a <Clock::Clock(char const*)>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	ba 28 16 02 c0       	mov    edx,0xc0021628
c0017b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b55:	89 10                	mov    DWORD PTR [eax],edx
c0017b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b5b:	83 ec 0c             	sub    esp,0xc
c0017b5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b62:	6a 01                	push   0x1
c0017b64:	68 ee 7a 01 c0       	push   0xc0017aee
c0017b69:	6a 08                	push   0x8
c0017b6b:	50                   	push   eax
c0017b6c:	e8 0b 42 ff ff       	call   c000bd7c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017b71:	83 c4 20             	add    esp,0x20
c0017b74:	89 c2                	mov    edx,eax
c0017b76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b7a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b80:	fa                   	cli    
c0017b81:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b86:	83 c0 01             	add    eax,0x1
c0017b89:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b8e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b93:	83 ec 08             	sub    esp,0x8
c0017b96:	6a 0b                	push   0xb
c0017b98:	50                   	push   eax
c0017b99:	e8 f4 f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b9e:	83 c4 10             	add    esp,0x10
c0017ba1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ba5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017baa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017bae:	83 ca 10             	or     edx,0x10
c0017bb1:	0f b6 d2             	movzx  edx,dl
c0017bb4:	83 ec 04             	sub    esp,0x4
c0017bb7:	52                   	push   edx
c0017bb8:	6a 0b                	push   0xb
c0017bba:	50                   	push   eax
c0017bbb:	e8 ea f6 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bc0:	83 c4 10             	add    esp,0x10
c0017bc3:	83 ec 0c             	sub    esp,0xc
c0017bc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bca:	e8 97 fa ff ff       	call   c0017666 <RTC::completeRTCRefresh()>
c0017bcf:	83 c4 10             	add    esp,0x10
c0017bd2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bd7:	83 e8 01             	sub    eax,0x1
c0017bda:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017bdf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017be4:	85 c0                	test   eax,eax
c0017be6:	75 01                	jne    c0017be9 <RTC::RTC()+0xb5>
c0017be8:	fb                   	sti    
c0017be9:	90                   	nop
c0017bea:	83 c4 1c             	add    esp,0x1c
c0017bed:	c3                   	ret    
c0017bee:	66 90                	xchg   ax,ax

c0017bf0 <HalConsoleScroll(int, int)>:
c0017bf0:	83 ec 10             	sub    esp,0x10
c0017bf3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017bfb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017c03:	90                   	nop
c0017c04:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c09:	0f 8f e1 00 00 00    	jg     c0017cf0 <HalConsoleScroll(int, int)+0x100>
c0017c0f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017c17:	90                   	nop
c0017c18:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017c20:	0f 8f be 00 00 00    	jg     c0017ce4 <HalConsoleScroll(int, int)+0xf4>
c0017c26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c2a:	89 d0                	mov    eax,edx
c0017c2c:	c1 e0 02             	shl    eax,0x2
c0017c2f:	01 d0                	add    eax,edx
c0017c31:	c1 e0 05             	shl    eax,0x5
c0017c34:	89 c2                	mov    edx,eax
c0017c36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c3a:	01 d0                	add    eax,edx
c0017c3c:	89 c2                	mov    edx,eax
c0017c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c42:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017c45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c49:	89 d0                	mov    eax,edx
c0017c4b:	c1 e0 02             	shl    eax,0x2
c0017c4e:	01 d0                	add    eax,edx
c0017c50:	c1 e0 05             	shl    eax,0x5
c0017c53:	89 c2                	mov    edx,eax
c0017c55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c59:	01 d0                	add    eax,edx
c0017c5b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017c61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c65:	01 d0                	add    eax,edx
c0017c67:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017c69:	88 10                	mov    BYTE PTR [eax],dl
c0017c6b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c70:	75 66                	jne    c0017cd8 <HalConsoleScroll(int, int)+0xe8>
c0017c72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c76:	83 e0 01             	and    eax,0x1
c0017c79:	74 39                	je     c0017cb4 <HalConsoleScroll(int, int)+0xc4>
c0017c7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c7f:	83 e0 0f             	and    eax,0xf
c0017c82:	88 c2                	mov    dl,al
c0017c84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c88:	c1 e0 04             	shl    eax,0x4
c0017c8b:	09 d0                	or     eax,edx
c0017c8d:	88 c1                	mov    cl,al
c0017c8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c93:	89 d0                	mov    eax,edx
c0017c95:	c1 e0 02             	shl    eax,0x2
c0017c98:	01 d0                	add    eax,edx
c0017c9a:	c1 e0 05             	shl    eax,0x5
c0017c9d:	89 c2                	mov    edx,eax
c0017c9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ca3:	01 d0                	add    eax,edx
c0017ca5:	89 c2                	mov    edx,eax
c0017ca7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cab:	01 d0                	add    eax,edx
c0017cad:	88 ca                	mov    dl,cl
c0017caf:	88 10                	mov    BYTE PTR [eax],dl
c0017cb1:	eb 25                	jmp    c0017cd8 <HalConsoleScroll(int, int)+0xe8>
c0017cb3:	90                   	nop
c0017cb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cb8:	89 d0                	mov    eax,edx
c0017cba:	c1 e0 02             	shl    eax,0x2
c0017cbd:	01 d0                	add    eax,edx
c0017cbf:	c1 e0 05             	shl    eax,0x5
c0017cc2:	89 c2                	mov    edx,eax
c0017cc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cc8:	01 d0                	add    eax,edx
c0017cca:	89 c2                	mov    edx,eax
c0017ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cd0:	01 d0                	add    eax,edx
c0017cd2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cd8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017cdd:	e9 36 ff ff ff       	jmp    c0017c18 <HalConsoleScroll(int, int)+0x28>
c0017ce2:	66 90                	xchg   ax,ax
c0017ce4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017ce9:	e9 16 ff ff ff       	jmp    c0017c04 <HalConsoleScroll(int, int)+0x14>
c0017cee:	66 90                	xchg   ax,ax
c0017cf0:	90                   	nop
c0017cf1:	83 c4 10             	add    esp,0x10
c0017cf4:	c3                   	ret    
c0017cf5:	8d 76 00             	lea    esi,[esi+0x0]

c0017cf8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017cf8:	83 ec 14             	sub    esp,0x14
c0017cfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cff:	88 04 24             	mov    BYTE PTR [esp],al
c0017d02:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017d05:	0f b6 c0             	movzx  eax,al
c0017d08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d0c:	89 d1                	mov    ecx,edx
c0017d0e:	83 e1 0f             	and    ecx,0xf
c0017d11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d15:	c1 e2 04             	shl    edx,0x4
c0017d18:	0f b6 d2             	movzx  edx,dl
c0017d1b:	09 ca                	or     edx,ecx
c0017d1d:	c1 e2 08             	shl    edx,0x8
c0017d20:	09 d0                	or     eax,edx
c0017d22:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017d27:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017d2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d33:	89 d0                	mov    eax,edx
c0017d35:	c1 e0 02             	shl    eax,0x2
c0017d38:	01 d0                	add    eax,edx
c0017d3a:	c1 e0 04             	shl    eax,0x4
c0017d3d:	89 c2                	mov    edx,eax
c0017d3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d43:	01 d0                	add    eax,edx
c0017d45:	d1 e0                	shl    eax,1
c0017d47:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d4f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017d54:	66 89 10             	mov    WORD PTR [eax],dx
c0017d57:	90                   	nop
c0017d58:	83 c4 14             	add    esp,0x14
c0017d5b:	c3                   	ret    

c0017d5c <HalConsoleCursorUpdate(int, int)>:
c0017d5c:	83 ec 20             	sub    esp,0x20
c0017d5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d63:	89 c2                	mov    edx,eax
c0017d65:	c1 e2 02             	shl    edx,0x2
c0017d68:	01 d0                	add    eax,edx
c0017d6a:	c1 e0 04             	shl    eax,0x4
c0017d6d:	89 c2                	mov    edx,eax
c0017d6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d73:	01 d0                	add    eax,edx
c0017d75:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d7a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d81:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d86:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d8e:	ee                   	out    dx,al
c0017d8f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017d94:	0f b6 c0             	movzx  eax,al
c0017d97:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d9e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017da2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017da6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017daa:	ee                   	out    dx,al
c0017dab:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017db2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017db7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017dbb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dbf:	ee                   	out    dx,al
c0017dc0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017dc5:	c1 e8 08             	shr    eax,0x8
c0017dc8:	0f b6 c0             	movzx  eax,al
c0017dcb:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017dd2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017dd6:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017dda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dde:	ee                   	out    dx,al
c0017ddf:	90                   	nop
c0017de0:	83 c4 20             	add    esp,0x20
c0017de3:	c3                   	ret    

c0017de4 <FAT::getName()>:
c0017de4:	b8 5c 16 02 c0       	mov    eax,0xc002165c
c0017de9:	c3                   	ret    
c0017dea:	66 90                	xchg   ax,ax

c0017dec <FAT::tell(void*, unsigned long long*)>:
c0017dec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017df1:	75 09                	jne    c0017dfc <FAT::tell(void*, unsigned long long*)+0x10>
c0017df3:	b8 04 00 00 00       	mov    eax,0x4
c0017df8:	c3                   	ret    
c0017df9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dfc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e01:	75 09                	jne    c0017e0c <FAT::tell(void*, unsigned long long*)+0x20>
c0017e03:	b8 04 00 00 00       	mov    eax,0x4
c0017e08:	c3                   	ret    
c0017e09:	8d 76 00             	lea    esi,[esi+0x0]
c0017e0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e10:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017e13:	ba 00 00 00 00       	mov    edx,0x0
c0017e18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e1c:	89 01                	mov    DWORD PTR [ecx],eax
c0017e1e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e21:	b8 00 00 00 00       	mov    eax,0x0
c0017e26:	c3                   	ret    
c0017e27:	90                   	nop

c0017e28 <FAT::stat(void*, unsigned long long*)>:
c0017e28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e2d:	75 09                	jne    c0017e38 <FAT::stat(void*, unsigned long long*)+0x10>
c0017e2f:	b8 04 00 00 00       	mov    eax,0x4
c0017e34:	c3                   	ret    
c0017e35:	8d 76 00             	lea    esi,[esi+0x0]
c0017e38:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e3d:	75 09                	jne    c0017e48 <FAT::stat(void*, unsigned long long*)+0x20>
c0017e3f:	b8 04 00 00 00       	mov    eax,0x4
c0017e44:	c3                   	ret    
c0017e45:	8d 76 00             	lea    esi,[esi+0x0]
c0017e48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e4f:	ba 00 00 00 00       	mov    edx,0x0
c0017e54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e58:	89 01                	mov    DWORD PTR [ecx],eax
c0017e5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e5d:	b8 00 00 00 00       	mov    eax,0x0
c0017e62:	c3                   	ret    
c0017e63:	90                   	nop

c0017e64 <FAT::~FAT()>:
c0017e64:	83 ec 0c             	sub    esp,0xc
c0017e67:	ba a8 16 02 c0       	mov    edx,0xc00216a8
c0017e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e70:	89 10                	mov    DWORD PTR [eax],edx
c0017e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e76:	83 ec 0c             	sub    esp,0xc
c0017e79:	50                   	push   eax
c0017e7a:	e8 37 2e ff ff       	call   c000acb6 <Filesystem::~Filesystem()>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	90                   	nop
c0017e83:	83 c4 0c             	add    esp,0xc
c0017e86:	c3                   	ret    
c0017e87:	90                   	nop

c0017e88 <FAT::~FAT()>:
c0017e88:	83 ec 0c             	sub    esp,0xc
c0017e8b:	83 ec 0c             	sub    esp,0xc
c0017e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e92:	e8 cd ff ff ff       	call   c0017e64 <FAT::~FAT()>
c0017e97:	83 c4 10             	add    esp,0x10
c0017e9a:	83 ec 08             	sub    esp,0x8
c0017e9d:	6a 08                	push   0x8
c0017e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ea3:	e8 c9 29 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c0017ea8:	83 c4 10             	add    esp,0x10
c0017eab:	83 c4 0c             	add    esp,0xc
c0017eae:	c3                   	ret    
c0017eaf:	90                   	nop

c0017eb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017eb0:	83 ec 1c             	sub    esp,0x1c
c0017eb3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017eba:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017ebf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec3:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017eca:	83 f8 ff             	cmp    eax,0xffffffff
c0017ecd:	75 35                	jne    c0017f04 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017ecf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ed3:	88 c2                	mov    dl,al
c0017ed5:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017eda:	01 d0                	add    eax,edx
c0017edc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ee0:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017ee6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eea:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017ef1:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ef6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017efa:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f01:	eb 19                	jmp    c0017f1c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017f03:	90                   	nop
c0017f04:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f08:	88 c2                	mov    dl,al
c0017f0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f0e:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f15:	01 d0                	add    eax,edx
c0017f17:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f1b:	90                   	nop
c0017f1c:	83 ec 04             	sub    esp,0x4
c0017f1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f27:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017f2b:	50                   	push   eax
c0017f2c:	e8 c2 d0 fe ff       	call   c0004ff3 <f_getlabel>
c0017f31:	83 c4 10             	add    esp,0x10
c0017f34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f38:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f3d:	75 09                	jne    c0017f48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017f3f:	b8 00 00 00 00       	mov    eax,0x0
c0017f44:	eb 0a                	jmp    c0017f50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017f46:	66 90                	xchg   ax,ax
c0017f48:	b8 01 00 00 00       	mov    eax,0x1
c0017f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f50:	83 c4 1c             	add    esp,0x1c
c0017f53:	c3                   	ret    

c0017f54 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017f54:	53                   	push   ebx
c0017f55:	83 ec 58             	sub    esp,0x58
c0017f58:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017f60:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017f64:	b9 00 00 00 00       	mov    ecx,0x0
c0017f69:	b8 3c 00 00 00       	mov    eax,0x3c
c0017f6e:	83 e0 f8             	and    eax,0xfffffff8
c0017f71:	89 c3                	mov    ebx,eax
c0017f73:	b8 00 00 00 00       	mov    eax,0x0
c0017f78:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0017f7c:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0017f80:	83 c0 08             	add    eax,0x8
c0017f83:	39 d8                	cmp    eax,ebx
c0017f85:	72 f1                	jb     c0017f78 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017f87:	01 c2                	add    edx,eax
c0017f89:	89 0a                	mov    DWORD PTR [edx],ecx
c0017f8b:	83 c2 04             	add    edx,0x4
c0017f8e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f92:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f99:	83 f8 ff             	cmp    eax,0xffffffff
c0017f9c:	75 36                	jne    c0017fd4 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017f9e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fa2:	88 c2                	mov    dl,al
c0017fa4:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fa9:	01 d0                	add    eax,edx
c0017fab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017faf:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017fb5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fb9:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fc0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fc5:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017fc9:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fd0:	eb 1a                	jmp    c0017fec <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017fd2:	66 90                	xchg   ax,ax
c0017fd4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fd8:	88 c2                	mov    dl,al
c0017fda:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fde:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fe5:	01 d0                	add    eax,edx
c0017fe7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017feb:	90                   	nop
c0017fec:	83 ec 08             	sub    esp,0x8
c0017fef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017ff3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017ff7:	50                   	push   eax
c0017ff8:	e8 73 88 fe ff       	call   c0000870 <strcat>
c0017ffd:	83 c4 10             	add    esp,0x10
c0018000:	83 ec 0c             	sub    esp,0xc
c0018003:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018007:	50                   	push   eax
c0018008:	e8 3a d1 fe ff       	call   c0005147 <f_setlabel>
c001800d:	83 c4 10             	add    esp,0x10
c0018010:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018014:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018019:	75 09                	jne    c0018024 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001801b:	b8 00 00 00 00       	mov    eax,0x0
c0018020:	eb 0a                	jmp    c001802c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018022:	66 90                	xchg   ax,ax
c0018024:	b8 01 00 00 00       	mov    eax,0x1
c0018029:	8d 76 00             	lea    esi,[esi+0x0]
c001802c:	83 c4 58             	add    esp,0x58
c001802f:	5b                   	pop    ebx
c0018030:	c3                   	ret    
c0018031:	90                   	nop
c0018032:	66 90                	xchg   ax,ax

c0018034 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018034:	83 ec 2c             	sub    esp,0x2c
c0018037:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001803f:	83 ec 08             	sub    esp,0x8
c0018042:	68 80 16 02 c0       	push   0xc0021680
c0018047:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001804b:	e8 30 87 fe ff       	call   c0000780 <strcmp>
c0018050:	83 c4 10             	add    esp,0x10
c0018053:	85 c0                	test   eax,eax
c0018055:	0f 94 c0             	sete   al
c0018058:	0f b6 c0             	movzx  eax,al
c001805b:	85 c0                	test   eax,eax
c001805d:	74 0d                	je     c001806c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001805f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018067:	e9 c0 00 00 00       	jmp    c001812c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001806c:	83 ec 08             	sub    esp,0x8
c001806f:	68 72 16 02 c0       	push   0xc0021672
c0018074:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018078:	e8 03 87 fe ff       	call   c0000780 <strcmp>
c001807d:	83 c4 10             	add    esp,0x10
c0018080:	85 c0                	test   eax,eax
c0018082:	0f 94 c0             	sete   al
c0018085:	0f b6 c0             	movzx  eax,al
c0018088:	85 c0                	test   eax,eax
c001808a:	74 10                	je     c001809c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001808c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018094:	e9 93 00 00 00       	jmp    c001812c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018099:	8d 76 00             	lea    esi,[esi+0x0]
c001809c:	83 ec 08             	sub    esp,0x8
c001809f:	68 78 16 02 c0       	push   0xc0021678
c00180a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180a8:	e8 d3 86 fe ff       	call   c0000780 <strcmp>
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	85 c0                	test   eax,eax
c00180b2:	0f 94 c0             	sete   al
c00180b5:	0f b6 c0             	movzx  eax,al
c00180b8:	85 c0                	test   eax,eax
c00180ba:	74 0c                	je     c00180c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00180bc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180c4:	eb 66                	jmp    c001812c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180c6:	66 90                	xchg   ax,ax
c00180c8:	83 ec 08             	sub    esp,0x8
c00180cb:	68 fc f3 01 c0       	push   0xc001f3fc
c00180d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180d4:	e8 a7 86 fe ff       	call   c0000780 <strcmp>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	85 c0                	test   eax,eax
c00180de:	0f 94 c0             	sete   al
c00180e1:	0f b6 c0             	movzx  eax,al
c00180e4:	85 c0                	test   eax,eax
c00180e6:	74 0c                	je     c00180f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00180e8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00180f0:	eb 3a                	jmp    c001812c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180f2:	66 90                	xchg   ax,ax
c00180f4:	83 ec 08             	sub    esp,0x8
c00180f7:	68 7e 16 02 c0       	push   0xc002167e
c00180fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018100:	e8 7b 86 fe ff       	call   c0000780 <strcmp>
c0018105:	83 c4 10             	add    esp,0x10
c0018108:	85 c0                	test   eax,eax
c001810a:	0f 94 c0             	sete   al
c001810d:	0f b6 c0             	movzx  eax,al
c0018110:	85 c0                	test   eax,eax
c0018112:	74 0c                	je     c0018120 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018114:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001811c:	eb 0e                	jmp    c001812c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001811e:	66 90                	xchg   ax,ax
c0018120:	b8 08 00 00 00       	mov    eax,0x8
c0018125:	e9 ea 00 00 00       	jmp    c0018214 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001812a:	66 90                	xchg   ax,ax
c001812c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018133:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018138:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001813c:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018143:	83 f8 ff             	cmp    eax,0xffffffff
c0018146:	75 34                	jne    c001817c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018148:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001814c:	88 c2                	mov    dl,al
c001814e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018153:	01 d0                	add    eax,edx
c0018155:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018159:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001815f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018163:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001816a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001816f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018173:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001817a:	eb 18                	jmp    c0018194 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001817c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018180:	88 c2                	mov    dl,al
c0018182:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018186:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001818d:	01 d0                	add    eax,edx
c001818f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018193:	90                   	nop
c0018194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018198:	88 04 24             	mov    BYTE PTR [esp],al
c001819b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001819f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00181ab:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00181b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00181b8:	83 ec 0c             	sub    esp,0xc
c00181bb:	68 00 20 00 00       	push   0x2000
c00181c0:	e8 06 f9 fe ff       	call   c0007acb <malloc>
c00181c5:	83 c4 10             	add    esp,0x10
c00181c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181cc:	68 00 20 00 00       	push   0x2000
c00181d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181d9:	50                   	push   eax
c00181da:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00181de:	50                   	push   eax
c00181df:	e8 60 d2 fe ff       	call   c0005444 <f_mkfs>
c00181e4:	83 c4 10             	add    esp,0x10
c00181e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00181f0:	75 0a                	jne    c00181fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00181f2:	b8 00 00 00 00       	mov    eax,0x0
c00181f7:	eb 1b                	jmp    c0018214 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181f9:	8d 76 00             	lea    esi,[esi+0x0]
c00181fc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018201:	75 09                	jne    c001820c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018203:	b8 09 00 00 00       	mov    eax,0x9
c0018208:	eb 0a                	jmp    c0018214 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001820a:	66 90                	xchg   ax,ax
c001820c:	b8 01 00 00 00       	mov    eax,0x1
c0018211:	8d 76 00             	lea    esi,[esi+0x0]
c0018214:	83 c4 2c             	add    esp,0x2c
c0018217:	c3                   	ret    

c0018218 <FAT::tryMount(LogicalDisk*, int)>:
c0018218:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001821e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018223:	83 f8 14             	cmp    eax,0x14
c0018226:	75 18                	jne    c0018240 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018228:	83 ec 0c             	sub    esp,0xc
c001822b:	68 84 16 02 c0       	push   0xc0021684
c0018230:	e8 04 86 ff ff       	call   c0010839 <KePanic(char const*)>
c0018235:	83 c4 10             	add    esp,0x10
c0018238:	b0 00                	mov    al,0x0
c001823a:	e9 ed 01 00 00       	jmp    c001842c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001823f:	90                   	nop
c0018240:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018247:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001824d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018253:	3d 00 02 00 00       	cmp    eax,0x200
c0018258:	74 0a                	je     c0018264 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001825a:	b0 00                	mov    al,0x0
c001825c:	e9 cb 01 00 00       	jmp    c001842c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018261:	8d 76 00             	lea    esi,[esi+0x0]
c0018264:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001826c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018273:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001827a:	83 f8 ff             	cmp    eax,0xffffffff
c001827d:	74 09                	je     c0018288 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001827f:	b0 01                	mov    al,0x1
c0018281:	e9 a6 01 00 00       	jmp    c001842c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018286:	66 90                	xchg   ax,ax
c0018288:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018292:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001829a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00182a1:	88 c2                	mov    dl,al
c00182a3:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182a8:	01 d0                	add    eax,edx
c00182aa:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00182b1:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00182b7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00182be:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00182c5:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182ca:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00182d1:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00182d8:	83 ec 0c             	sub    esp,0xc
c00182db:	68 34 02 00 00       	push   0x234
c00182e0:	e8 e6 f7 fe ff       	call   c0007acb <malloc>
c00182e5:	83 c4 10             	add    esp,0x10
c00182e8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00182ef:	83 ec 04             	sub    esp,0x4
c00182f2:	6a 00                	push   0x0
c00182f4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00182fb:	50                   	push   eax
c00182fc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018303:	e8 36 b9 fe ff       	call   c0003c3e <f_mount>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018312:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001831a:	74 1c                	je     c0018338 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001831c:	83 ec 0c             	sub    esp,0xc
c001831f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018326:	e8 c0 f7 fe ff       	call   c0007aeb <rfree>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	b0 00                	mov    al,0x0
c0018330:	e9 f7 00 00 00       	jmp    c001842c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018335:	8d 76 00             	lea    esi,[esi+0x0]
c0018338:	83 ec 04             	sub    esp,0x4
c001833b:	68 00 01 00 00       	push   0x100
c0018340:	6a 00                	push   0x0
c0018342:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018349:	50                   	push   eax
c001834a:	e8 a1 81 fe ff       	call   c00004f0 <memset>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	83 ec 08             	sub    esp,0x8
c0018355:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001835c:	50                   	push   eax
c001835d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018364:	50                   	push   eax
c0018365:	e8 06 85 fe ff       	call   c0000870 <strcat>
c001836a:	83 c4 10             	add    esp,0x10
c001836d:	83 ec 08             	sub    esp,0x8
c0018370:	68 92 16 02 c0       	push   0xc0021692
c0018375:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001837c:	50                   	push   eax
c001837d:	e8 ee 84 fe ff       	call   c0000870 <strcat>
c0018382:	83 c4 10             	add    esp,0x10
c0018385:	83 ec 04             	sub    esp,0x4
c0018388:	6a 01                	push   0x1
c001838a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018391:	50                   	push   eax
c0018392:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018396:	50                   	push   eax
c0018397:	e8 04 b9 fe ff       	call   c0003ca0 <f_open>
c001839c:	83 c4 10             	add    esp,0x10
c001839f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00183a6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00183ad:	85 c0                	test   eax,eax
c00183af:	74 0b                	je     c00183bc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00183b1:	78 31                	js     c00183e4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00183b3:	83 e8 04             	sub    eax,0x4
c00183b6:	83 f8 01             	cmp    eax,0x1
c00183b9:	77 29                	ja     c00183e4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00183bb:	90                   	nop
c00183bc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00183c4:	83 ec 0c             	sub    esp,0xc
c00183c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183cb:	50                   	push   eax
c00183cc:	e8 7f c0 fe ff       	call   c0004450 <f_close>
c00183d1:	83 c4 10             	add    esp,0x10
c00183d4:	90                   	nop
c00183d5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00183dd:	85 c0                	test   eax,eax
c00183df:	74 43                	je     c0018424 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00183e1:	eb 31                	jmp    c0018414 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00183e3:	90                   	nop
c00183e4:	83 ec 0c             	sub    esp,0xc
c00183e7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183ee:	e8 f8 f6 fe ff       	call   c0007aeb <rfree>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	83 ec 04             	sub    esp,0x4
c00183f9:	6a 00                	push   0x0
c00183fb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018402:	50                   	push   eax
c0018403:	6a 00                	push   0x0
c0018405:	e8 34 b8 fe ff       	call   c0003c3e <f_mount>
c001840a:	83 c4 10             	add    esp,0x10
c001840d:	b0 00                	mov    al,0x0
c001840f:	eb 1b                	jmp    c001842c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018411:	8d 76 00             	lea    esi,[esi+0x0]
c0018414:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018419:	83 c0 01             	add    eax,0x1
c001841c:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018421:	8d 76 00             	lea    esi,[esi+0x0]
c0018424:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001842b:	90                   	nop
c001842c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018432:	c3                   	ret    
c0018433:	90                   	nop

c0018434 <FAT::allocateSwapfile(char const*, int)>:
c0018434:	55                   	push   ebp
c0018435:	57                   	push   edi
c0018436:	56                   	push   esi
c0018437:	53                   	push   ebx
c0018438:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001843e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018449:	83 ec 0c             	sub    esp,0xc
c001844c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018453:	e8 73 f6 fe ff       	call   c0007acb <malloc>
c0018458:	83 c4 10             	add    esp,0x10
c001845b:	89 c7                	mov    edi,eax
c001845d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018462:	83 ec 04             	sub    esp,0x4
c0018465:	50                   	push   eax
c0018466:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001846d:	57                   	push   edi
c001846e:	e8 a5 2a ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0018473:	83 c4 10             	add    esp,0x10
c0018476:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001847d:	83 ec 04             	sub    esp,0x4
c0018480:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018484:	50                   	push   eax
c0018485:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018489:	50                   	push   eax
c001848a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018491:	e8 ea 2d ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c0018496:	83 c4 10             	add    esp,0x10
c0018499:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184a0:	c1 e0 14             	shl    eax,0x14
c00184a3:	89 c7                	mov    edi,eax
c00184a5:	89 c5                	mov    ebp,eax
c00184a7:	c1 fd 1f             	sar    ebp,0x1f
c00184aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184b2:	89 f9                	mov    ecx,edi
c00184b4:	31 c1                	xor    ecx,eax
c00184b6:	89 cb                	mov    ebx,ecx
c00184b8:	89 e9                	mov    ecx,ebp
c00184ba:	31 d1                	xor    ecx,edx
c00184bc:	89 ce                	mov    esi,ecx
c00184be:	89 f0                	mov    eax,esi
c00184c0:	09 d8                	or     eax,ebx
c00184c2:	0f 84 9c 00 00 00    	je     c0018564 <FAT::allocateSwapfile(char const*, int)+0x130>
c00184c8:	83 ec 0c             	sub    esp,0xc
c00184cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184d2:	e8 75 2c ff ff       	call   c000b14c <File::unlink()>
c00184d7:	83 c4 10             	add    esp,0x10
c00184da:	83 ec 08             	sub    esp,0x8
c00184dd:	6a 12                	push   0x12
c00184df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184e6:	e8 e9 2a ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c00184eb:	83 c4 10             	add    esp,0x10
c00184ee:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184f5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00184fb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018502:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018509:	c1 e0 14             	shl    eax,0x14
c001850c:	83 ec 04             	sub    esp,0x4
c001850f:	6a 01                	push   0x1
c0018511:	50                   	push   eax
c0018512:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018519:	e8 b9 cd fe ff       	call   c00052d7 <f_expand>
c001851e:	83 c4 10             	add    esp,0x10
c0018521:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018528:	8b 00                	mov    eax,DWORD PTR [eax]
c001852a:	83 c0 10             	add    eax,0x10
c001852d:	8b 00                	mov    eax,DWORD PTR [eax]
c001852f:	83 ec 0c             	sub    esp,0xc
c0018532:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018536:	52                   	push   edx
c0018537:	8d 54 24 30          	lea    edx,[esp+0x30]
c001853b:	52                   	push   edx
c001853c:	6a 00                	push   0x0
c001853e:	68 00 04 00 00       	push   0x400
c0018543:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001854a:	ff d0                	call   eax
c001854c:	83 c4 20             	add    esp,0x20
c001854f:	83 ec 0c             	sub    esp,0xc
c0018552:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018559:	e8 d4 2a ff ff       	call   c000b032 <File::close()>
c001855e:	83 c4 10             	add    esp,0x10
c0018561:	8d 76 00             	lea    esi,[esi+0x0]
c0018564:	83 ec 08             	sub    esp,0x8
c0018567:	6a 01                	push   0x1
c0018569:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018570:	e8 5f 2a ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0018575:	83 c4 10             	add    esp,0x10
c0018578:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001857f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018581:	83 c0 0c             	add    eax,0xc
c0018584:	8b 00                	mov    eax,DWORD PTR [eax]
c0018586:	83 ec 0c             	sub    esp,0xc
c0018589:	8d 54 24 24          	lea    edx,[esp+0x24]
c001858d:	52                   	push   edx
c001858e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018592:	52                   	push   edx
c0018593:	6a 00                	push   0x0
c0018595:	6a 04                	push   0x4
c0018597:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001859e:	ff d0                	call   eax
c00185a0:	83 c4 20             	add    esp,0x20
c00185a3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185aa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00185b0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00185b7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00185be:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00185c1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00185c8:	83 ec 0c             	sub    esp,0xc
c00185cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185d2:	e8 5b 2a ff ff       	call   c000b032 <File::close()>
c00185d7:	83 c4 10             	add    esp,0x10
c00185da:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00185e1:	ba 00 00 00 00       	mov    edx,0x0
c00185e6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00185ec:	5b                   	pop    ebx
c00185ed:	5e                   	pop    esi
c00185ee:	5f                   	pop    edi
c00185ef:	5d                   	pop    ebp
c00185f0:	c3                   	ret    
c00185f1:	90                   	nop
c00185f2:	66 90                	xchg   ax,ax

c00185f4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00185f4:	57                   	push   edi
c00185f5:	56                   	push   esi
c00185f6:	53                   	push   ebx
c00185f7:	81 ec 50 02 00 00    	sub    esp,0x250
c00185fd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018605:	74 0d                	je     c0018614 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018607:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001860f:	75 0f                	jne    c0018620 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018611:	8d 76 00             	lea    esi,[esi+0x0]
c0018614:	b8 04 00 00 00       	mov    eax,0x4
c0018619:	e9 3a 01 00 00       	jmp    c0018758 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001861e:	66 90                	xchg   ax,ax
c0018620:	83 ec 08             	sub    esp,0x8
c0018623:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001862a:	50                   	push   eax
c001862b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018632:	e8 e5 c0 fe ff       	call   c000471c <f_readdir>
c0018637:	83 c4 10             	add    esp,0x10
c001863a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018641:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018648:	83 ec 0c             	sub    esp,0xc
c001864b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018652:	83 c0 16             	add    eax,0x16
c0018655:	50                   	push   eax
c0018656:	e8 25 7f fe ff       	call   c0000580 <strlen>
c001865b:	83 c4 10             	add    esp,0x10
c001865e:	ba 00 00 00 00       	mov    edx,0x0
c0018663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018667:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001866b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018672:	0f b6 c0             	movzx  eax,al
c0018675:	83 e0 10             	and    eax,0x10
c0018678:	74 0a                	je     c0018684 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001867a:	b8 02 00 00 00       	mov    eax,0x2
c001867f:	eb 0b                	jmp    c001868c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018681:	8d 76 00             	lea    esi,[esi+0x0]
c0018684:	b8 01 00 00 00       	mov    eax,0x1
c0018689:	8d 76 00             	lea    esi,[esi+0x0]
c001868c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018690:	83 ec 08             	sub    esp,0x8
c0018693:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001869a:	83 c0 16             	add    eax,0x16
c001869d:	50                   	push   eax
c001869e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186a2:	83 c0 10             	add    eax,0x10
c00186a5:	50                   	push   eax
c00186a6:	e8 a5 7f fe ff       	call   c0000650 <strcpy>
c00186ab:	83 c4 10             	add    esp,0x10
c00186ae:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00186b5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00186bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186c0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00186c7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00186ce:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00186d5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00186dc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00186e3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00186ea:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00186f1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00186f8:	89 c6                	mov    esi,eax
c00186fa:	89 d7                	mov    edi,edx
c00186fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00186fe:	89 c8                	mov    eax,ecx
c0018700:	89 fa                	mov    edx,edi
c0018702:	89 f3                	mov    ebx,esi
c0018704:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001870b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018712:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018719:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018720:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018726:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001872d:	0f be c0             	movsx  eax,al
c0018730:	85 c0                	test   eax,eax
c0018732:	75 08                	jne    c001873c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018734:	b8 07 00 00 00       	mov    eax,0x7
c0018739:	eb 1d                	jmp    c0018758 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001873b:	90                   	nop
c001873c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018743:	85 c0                	test   eax,eax
c0018745:	75 09                	jne    c0018750 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018747:	b8 00 00 00 00       	mov    eax,0x0
c001874c:	eb 0a                	jmp    c0018758 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001874e:	66 90                	xchg   ax,ax
c0018750:	b8 01 00 00 00       	mov    eax,0x1
c0018755:	8d 76 00             	lea    esi,[esi+0x0]
c0018758:	81 c4 50 02 00 00    	add    esp,0x250
c001875e:	5b                   	pop    ebx
c001875f:	5e                   	pop    esi
c0018760:	5f                   	pop    edi
c0018761:	c3                   	ret    
c0018762:	66 90                	xchg   ax,ax

c0018764 <FAT::read(void*, unsigned long, void*, int*)>:
c0018764:	83 ec 1c             	sub    esp,0x1c
c0018767:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001876c:	74 0a                	je     c0018778 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001876e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018773:	75 0b                	jne    c0018780 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018775:	8d 76 00             	lea    esi,[esi+0x0]
c0018778:	b8 04 00 00 00       	mov    eax,0x4
c001877d:	eb 41                	jmp    c00187c0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001877f:	90                   	nop
c0018780:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018784:	50                   	push   eax
c0018785:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001878d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018791:	e8 cd b7 fe ff       	call   c0003f63 <f_read>
c0018796:	83 c4 10             	add    esp,0x10
c0018799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001879d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187a1:	89 c2                	mov    edx,eax
c00187a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187a7:	89 10                	mov    DWORD PTR [eax],edx
c00187a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187ad:	85 c0                	test   eax,eax
c00187af:	75 07                	jne    c00187b8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00187b1:	b8 00 00 00 00       	mov    eax,0x0
c00187b6:	eb 08                	jmp    c00187c0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00187b8:	b8 01 00 00 00       	mov    eax,0x1
c00187bd:	8d 76 00             	lea    esi,[esi+0x0]
c00187c0:	83 c4 1c             	add    esp,0x1c
c00187c3:	c3                   	ret    

c00187c4 <FAT::write(void*, unsigned long, void*, int*)>:
c00187c4:	83 ec 1c             	sub    esp,0x1c
c00187c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187cc:	74 0a                	je     c00187d8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00187ce:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187d3:	75 0b                	jne    c00187e0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00187d5:	8d 76 00             	lea    esi,[esi+0x0]
c00187d8:	b8 04 00 00 00       	mov    eax,0x4
c00187dd:	eb 41                	jmp    c0018820 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187df:	90                   	nop
c00187e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187e4:	50                   	push   eax
c00187e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00187ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187f1:	e8 4e b9 fe ff       	call   c0004144 <f_write>
c00187f6:	83 c4 10             	add    esp,0x10
c00187f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018801:	89 c2                	mov    edx,eax
c0018803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018807:	89 10                	mov    DWORD PTR [eax],edx
c0018809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001880d:	85 c0                	test   eax,eax
c001880f:	75 07                	jne    c0018818 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018811:	b8 00 00 00 00       	mov    eax,0x0
c0018816:	eb 08                	jmp    c0018820 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018818:	b8 01 00 00 00       	mov    eax,0x1
c001881d:	8d 76 00             	lea    esi,[esi+0x0]
c0018820:	83 c4 1c             	add    esp,0x1c
c0018823:	c3                   	ret    

c0018824 <FAT::close(void*)>:
c0018824:	83 ec 1c             	sub    esp,0x1c
c0018827:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001882c:	75 0a                	jne    c0018838 <FAT::close(void*)+0x14>
c001882e:	b8 04 00 00 00       	mov    eax,0x4
c0018833:	eb 3f                	jmp    c0018874 <FAT::close(void*)+0x50>
c0018835:	8d 76 00             	lea    esi,[esi+0x0]
c0018838:	83 ec 0c             	sub    esp,0xc
c001883b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001883f:	e8 0c bc fe ff       	call   c0004450 <f_close>
c0018844:	83 c4 10             	add    esp,0x10
c0018847:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001884b:	83 ec 0c             	sub    esp,0xc
c001884e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018852:	e8 84 f2 fe ff       	call   c0007adb <free>
c0018857:	83 c4 10             	add    esp,0x10
c001885a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001885e:	85 c0                	test   eax,eax
c0018860:	75 0a                	jne    c001886c <FAT::close(void*)+0x48>
c0018862:	b8 00 00 00 00       	mov    eax,0x0
c0018867:	eb 0b                	jmp    c0018874 <FAT::close(void*)+0x50>
c0018869:	8d 76 00             	lea    esi,[esi+0x0]
c001886c:	b8 01 00 00 00       	mov    eax,0x1
c0018871:	8d 76 00             	lea    esi,[esi+0x0]
c0018874:	83 c4 1c             	add    esp,0x1c
c0018877:	c3                   	ret    

c0018878 <FAT::closeDir(void*)>:
c0018878:	83 ec 1c             	sub    esp,0x1c
c001887b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018880:	75 0a                	jne    c001888c <FAT::closeDir(void*)+0x14>
c0018882:	b8 04 00 00 00       	mov    eax,0x4
c0018887:	eb 3f                	jmp    c00188c8 <FAT::closeDir(void*)+0x50>
c0018889:	8d 76 00             	lea    esi,[esi+0x0]
c001888c:	83 ec 0c             	sub    esp,0xc
c001888f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018893:	e8 62 be fe ff       	call   c00046fa <f_closedir>
c0018898:	83 c4 10             	add    esp,0x10
c001889b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001889f:	83 ec 0c             	sub    esp,0xc
c00188a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188a6:	e8 30 f2 fe ff       	call   c0007adb <free>
c00188ab:	83 c4 10             	add    esp,0x10
c00188ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188b2:	85 c0                	test   eax,eax
c00188b4:	75 0a                	jne    c00188c0 <FAT::closeDir(void*)+0x48>
c00188b6:	b8 00 00 00 00       	mov    eax,0x0
c00188bb:	eb 0b                	jmp    c00188c8 <FAT::closeDir(void*)+0x50>
c00188bd:	8d 76 00             	lea    esi,[esi+0x0]
c00188c0:	b8 01 00 00 00       	mov    eax,0x1
c00188c5:	8d 76 00             	lea    esi,[esi+0x0]
c00188c8:	83 c4 1c             	add    esp,0x1c
c00188cb:	c3                   	ret    

c00188cc <FAT::seek(void*, unsigned long long)>:
c00188cc:	83 ec 2c             	sub    esp,0x2c
c00188cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00188d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188df:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00188e4:	75 0a                	jne    c00188f0 <FAT::seek(void*, unsigned long long)+0x24>
c00188e6:	b8 04 00 00 00       	mov    eax,0x4
c00188eb:	eb 33                	jmp    c0018920 <FAT::seek(void*, unsigned long long)+0x54>
c00188ed:	8d 76 00             	lea    esi,[esi+0x0]
c00188f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188f4:	83 ec 08             	sub    esp,0x8
c00188f7:	50                   	push   eax
c00188f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00188fc:	e8 7e bb fe ff       	call   c000447f <f_lseek>
c0018901:	83 c4 10             	add    esp,0x10
c0018904:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018908:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001890c:	85 c0                	test   eax,eax
c001890e:	75 08                	jne    c0018918 <FAT::seek(void*, unsigned long long)+0x4c>
c0018910:	b8 00 00 00 00       	mov    eax,0x0
c0018915:	eb 09                	jmp    c0018920 <FAT::seek(void*, unsigned long long)+0x54>
c0018917:	90                   	nop
c0018918:	b8 01 00 00 00       	mov    eax,0x1
c001891d:	8d 76 00             	lea    esi,[esi+0x0]
c0018920:	83 c4 2c             	add    esp,0x2c
c0018923:	c3                   	ret    

c0018924 <fatWrapperReadDisk>:
c0018924:	53                   	push   ebx
c0018925:	83 ec 18             	sub    esp,0x18
c0018928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001892c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018930:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018935:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001893c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018940:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018944:	ba 00 00 00 00       	mov    edx,0x0
c0018949:	83 ec 0c             	sub    esp,0xc
c001894c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018950:	53                   	push   ebx
c0018951:	52                   	push   edx
c0018952:	50                   	push   eax
c0018953:	51                   	push   ecx
c0018954:	e8 61 48 ff ff       	call   c000d1ba <LogicalDisk::read(unsigned long long, int, void*)>
c0018959:	83 c4 20             	add    esp,0x20
c001895c:	83 c4 18             	add    esp,0x18
c001895f:	5b                   	pop    ebx
c0018960:	c3                   	ret    
c0018961:	8d 76 00             	lea    esi,[esi+0x0]

c0018964 <fatWrapperWriteDisk>:
c0018964:	53                   	push   ebx
c0018965:	83 ec 18             	sub    esp,0x18
c0018968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001896c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018970:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018975:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001897c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018980:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018984:	ba 00 00 00 00       	mov    edx,0x0
c0018989:	83 ec 0c             	sub    esp,0xc
c001898c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018990:	53                   	push   ebx
c0018991:	52                   	push   edx
c0018992:	50                   	push   eax
c0018993:	51                   	push   ecx
c0018994:	e8 8d 48 ff ff       	call   c000d226 <LogicalDisk::write(unsigned long long, int, void*)>
c0018999:	83 c4 20             	add    esp,0x20
c001899c:	83 c4 18             	add    esp,0x18
c001899f:	5b                   	pop    ebx
c00189a0:	c3                   	ret    
c00189a1:	8d 76 00             	lea    esi,[esi+0x0]

c00189a4 <fatWrapperIoctl>:
c00189a4:	53                   	push   ebx
c00189a5:	83 ec 28             	sub    esp,0x28
c00189a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00189b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189b4:	88 d0                	mov    al,dl
c00189b6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189bf:	83 f8 02             	cmp    eax,0x2
c00189c2:	75 34                	jne    c00189f8 <fatWrapperIoctl+0x54>
c00189c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189d1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189d8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00189e4:	89 c2                	mov    edx,eax
c00189e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00189ea:	66 89 10             	mov    WORD PTR [eax],dx
c00189ed:	b8 00 00 00 00       	mov    eax,0x0
c00189f2:	e9 c5 00 00 00       	jmp    c0018abc <fatWrapperIoctl+0x118>
c00189f7:	90                   	nop
c00189f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189fd:	83 f8 01             	cmp    eax,0x1
c0018a00:	75 6a                	jne    c0018a6c <fatWrapperIoctl+0xc8>
c0018a02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a0a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a0f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a16:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a1c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018a22:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018a28:	89 c8                	mov    eax,ecx
c0018a2a:	89 da                	mov    edx,ebx
c0018a2c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018a30:	c1 e0 0a             	shl    eax,0xa
c0018a33:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018a38:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018a3f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018a45:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018a4b:	89 cb                	mov    ebx,ecx
c0018a4d:	c1 fb 1f             	sar    ebx,0x1f
c0018a50:	53                   	push   ebx
c0018a51:	51                   	push   ecx
c0018a52:	52                   	push   edx
c0018a53:	50                   	push   eax
c0018a54:	e8 a7 5b 00 00       	call   c001e600 <__udivdi3>
c0018a59:	83 c4 10             	add    esp,0x10
c0018a5c:	89 c2                	mov    edx,eax
c0018a5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a62:	89 10                	mov    DWORD PTR [eax],edx
c0018a64:	b8 00 00 00 00       	mov    eax,0x0
c0018a69:	eb 51                	jmp    c0018abc <fatWrapperIoctl+0x118>
c0018a6b:	90                   	nop
c0018a6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a71:	85 c0                	test   eax,eax
c0018a73:	75 07                	jne    c0018a7c <fatWrapperIoctl+0xd8>
c0018a75:	b8 00 00 00 00       	mov    eax,0x0
c0018a7a:	eb 40                	jmp    c0018abc <fatWrapperIoctl+0x118>
c0018a7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a81:	83 f8 03             	cmp    eax,0x3
c0018a84:	75 1a                	jne    c0018aa0 <fatWrapperIoctl+0xfc>
c0018a86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a92:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a98:	b8 00 00 00 00       	mov    eax,0x0
c0018a9d:	eb 1d                	jmp    c0018abc <fatWrapperIoctl+0x118>
c0018a9f:	90                   	nop
c0018aa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018aa5:	83 f8 04             	cmp    eax,0x4
c0018aa8:	75 0a                	jne    c0018ab4 <fatWrapperIoctl+0x110>
c0018aaa:	b8 00 00 00 00       	mov    eax,0x0
c0018aaf:	eb 0b                	jmp    c0018abc <fatWrapperIoctl+0x118>
c0018ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ab4:	b8 04 00 00 00       	mov    eax,0x4
c0018ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0018abc:	83 c4 28             	add    esp,0x28
c0018abf:	5b                   	pop    ebx
c0018ac0:	c3                   	ret    
c0018ac1:	90                   	nop
c0018ac2:	66 90                	xchg   ax,ax

c0018ac4 <FAT::FAT()>:
c0018ac4:	83 ec 1c             	sub    esp,0x1c
c0018ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018acb:	83 ec 0c             	sub    esp,0xc
c0018ace:	50                   	push   eax
c0018acf:	e8 be 21 ff ff       	call   c000ac92 <Filesystem::Filesystem()>
c0018ad4:	83 c4 10             	add    esp,0x10
c0018ad7:	ba a8 16 02 c0       	mov    edx,0xc00216a8
c0018adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ae0:	89 10                	mov    DWORD PTR [eax],edx
c0018ae2:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018aec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018af4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018af9:	7f 19                	jg     c0018b14 <FAT::FAT()+0x50>
c0018afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018aff:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018b0a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018b0f:	eb e3                	jmp    c0018af4 <FAT::FAT()+0x30>
c0018b11:	8d 76 00             	lea    esi,[esi+0x0]
c0018b14:	90                   	nop
c0018b15:	83 c4 1c             	add    esp,0x1c
c0018b18:	c3                   	ret    
c0018b19:	90                   	nop
c0018b1a:	66 90                	xchg   ax,ax

c0018b1c <FAT::fixFilepath(char*)>:
c0018b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b20:	8a 00                	mov    al,BYTE PTR [eax]
c0018b22:	0f be c0             	movsx  eax,al
c0018b25:	83 f8 40             	cmp    eax,0x40
c0018b28:	7e 2e                	jle    c0018b58 <FAT::fixFilepath(char*)+0x3c>
c0018b2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b2e:	8a 00                	mov    al,BYTE PTR [eax]
c0018b30:	83 e8 41             	sub    eax,0x41
c0018b33:	88 c2                	mov    dl,al
c0018b35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b39:	88 10                	mov    BYTE PTR [eax],dl
c0018b3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b3f:	8a 00                	mov    al,BYTE PTR [eax]
c0018b41:	0f be c0             	movsx  eax,al
c0018b44:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018b4b:	83 c0 30             	add    eax,0x30
c0018b4e:	88 c2                	mov    dl,al
c0018b50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b54:	88 10                	mov    BYTE PTR [eax],dl
c0018b56:	66 90                	xchg   ax,ax
c0018b58:	90                   	nop
c0018b59:	c3                   	ret    
c0018b5a:	66 90                	xchg   ax,ax

c0018b5c <FAT::open(char const*, void**, FileOpenMode)>:
c0018b5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b6a:	74 0c                	je     c0018b78 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b6c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018b74:	75 0e                	jne    c0018b84 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b76:	66 90                	xchg   ax,ax
c0018b78:	b8 04 00 00 00       	mov    eax,0x4
c0018b7d:	e9 46 01 00 00       	jmp    c0018cc8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018b82:	66 90                	xchg   ax,ax
c0018b84:	83 ec 08             	sub    esp,0x8
c0018b87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b92:	50                   	push   eax
c0018b93:	e8 b8 7a fe ff       	call   c0000650 <strcpy>
c0018b98:	83 c4 10             	add    esp,0x10
c0018b9b:	83 ec 08             	sub    esp,0x8
c0018b9e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018ba2:	50                   	push   eax
c0018ba3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018baa:	e8 6d ff ff ff       	call   c0018b1c <FAT::fixFilepath(char*)>
c0018baf:	83 c4 10             	add    esp,0x10
c0018bb2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018bba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bc1:	83 e0 01             	and    eax,0x1
c0018bc4:	74 12                	je     c0018bd8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018bc6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bcd:	83 c8 01             	or     eax,0x1
c0018bd0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bd7:	90                   	nop
c0018bd8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bdf:	83 e0 04             	and    eax,0x4
c0018be2:	74 24                	je     c0018c08 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018be4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018beb:	83 c8 30             	or     eax,0x30
c0018bee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bf5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bfc:	83 c8 02             	or     eax,0x2
c0018bff:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c06:	66 90                	xchg   ax,ax
c0018c08:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c0f:	83 e0 02             	and    eax,0x2
c0018c12:	74 14                	je     c0018c28 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018c14:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c1b:	83 c8 02             	or     eax,0x2
c0018c1e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c25:	8d 76 00             	lea    esi,[esi+0x0]
c0018c28:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c2f:	83 e0 08             	and    eax,0x8
c0018c32:	74 14                	je     c0018c48 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018c34:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c3b:	83 c8 04             	or     eax,0x4
c0018c3e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c45:	8d 76 00             	lea    esi,[esi+0x0]
c0018c48:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c4f:	83 e0 10             	and    eax,0x10
c0018c52:	74 14                	je     c0018c68 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018c54:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c5b:	83 c8 08             	or     eax,0x8
c0018c5e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c65:	8d 76 00             	lea    esi,[esi+0x0]
c0018c68:	83 ec 0c             	sub    esp,0xc
c0018c6b:	68 28 02 00 00       	push   0x228
c0018c70:	e8 56 ee fe ff       	call   c0007acb <malloc>
c0018c75:	83 c4 10             	add    esp,0x10
c0018c78:	89 c2                	mov    edx,eax
c0018c7a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c81:	89 10                	mov    DWORD PTR [eax],edx
c0018c83:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018c8b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c94:	83 ec 04             	sub    esp,0x4
c0018c97:	52                   	push   edx
c0018c98:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c9c:	52                   	push   edx
c0018c9d:	50                   	push   eax
c0018c9e:	e8 fd af fe ff       	call   c0003ca0 <f_open>
c0018ca3:	83 c4 10             	add    esp,0x10
c0018ca6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018cad:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018cb5:	74 09                	je     c0018cc0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018cb7:	b8 01 00 00 00       	mov    eax,0x1
c0018cbc:	eb 0a                	jmp    c0018cc8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018cbe:	66 90                	xchg   ax,ax
c0018cc0:	b8 00 00 00 00       	mov    eax,0x0
c0018cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018cce:	c3                   	ret    
c0018ccf:	90                   	nop

c0018cd0 <FAT::openDir(char const*, void**)>:
c0018cd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018cd6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018cde:	74 0c                	je     c0018cec <FAT::openDir(char const*, void**)+0x1c>
c0018ce0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018ce8:	75 0e                	jne    c0018cf8 <FAT::openDir(char const*, void**)+0x28>
c0018cea:	66 90                	xchg   ax,ax
c0018cec:	b8 04 00 00 00       	mov    eax,0x4
c0018cf1:	e9 82 00 00 00       	jmp    c0018d78 <FAT::openDir(char const*, void**)+0xa8>
c0018cf6:	66 90                	xchg   ax,ax
c0018cf8:	83 ec 08             	sub    esp,0x8
c0018cfb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d06:	50                   	push   eax
c0018d07:	e8 44 79 fe ff       	call   c0000650 <strcpy>
c0018d0c:	83 c4 10             	add    esp,0x10
c0018d0f:	83 ec 08             	sub    esp,0x8
c0018d12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018d16:	50                   	push   eax
c0018d17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d1e:	e8 f9 fd ff ff       	call   c0018b1c <FAT::fixFilepath(char*)>
c0018d23:	83 c4 10             	add    esp,0x10
c0018d26:	83 ec 0c             	sub    esp,0xc
c0018d29:	6a 30                	push   0x30
c0018d2b:	e8 9b ed fe ff       	call   c0007acb <malloc>
c0018d30:	83 c4 10             	add    esp,0x10
c0018d33:	89 c2                	mov    edx,eax
c0018d35:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d3c:	89 10                	mov    DWORD PTR [eax],edx
c0018d3e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d47:	83 ec 08             	sub    esp,0x8
c0018d4a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018d4e:	52                   	push   edx
c0018d4f:	50                   	push   eax
c0018d50:	e8 da b8 fe ff       	call   c000462f <f_opendir>
c0018d55:	83 c4 10             	add    esp,0x10
c0018d58:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018d5f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018d67:	74 07                	je     c0018d70 <FAT::openDir(char const*, void**)+0xa0>
c0018d69:	b8 01 00 00 00       	mov    eax,0x1
c0018d6e:	eb 08                	jmp    c0018d78 <FAT::openDir(char const*, void**)+0xa8>
c0018d70:	b8 00 00 00 00       	mov    eax,0x0
c0018d75:	8d 76 00             	lea    esi,[esi+0x0]
c0018d78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d7e:	c3                   	ret    
c0018d7f:	90                   	nop

c0018d80 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018d80:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018d86:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018d8e:	75 0c                	jne    c0018d9c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018d90:	b8 04 00 00 00       	mov    eax,0x4
c0018d95:	e9 d6 00 00 00       	jmp    c0018e70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d9a:	66 90                	xchg   ax,ax
c0018d9c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018da4:	75 0a                	jne    c0018db0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018da6:	b8 04 00 00 00       	mov    eax,0x4
c0018dab:	e9 c0 00 00 00       	jmp    c0018e70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018db0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018db8:	75 0a                	jne    c0018dc4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018dba:	b8 04 00 00 00       	mov    eax,0x4
c0018dbf:	e9 ac 00 00 00       	jmp    c0018e70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dc4:	83 ec 08             	sub    esp,0x8
c0018dc7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018dce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018dd5:	50                   	push   eax
c0018dd6:	e8 75 78 fe ff       	call   c0000650 <strcpy>
c0018ddb:	83 c4 10             	add    esp,0x10
c0018dde:	83 ec 08             	sub    esp,0x8
c0018de1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018de8:	50                   	push   eax
c0018de9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018df0:	e8 27 fd ff ff       	call   c0018b1c <FAT::fixFilepath(char*)>
c0018df5:	83 c4 10             	add    esp,0x10
c0018df8:	83 ec 08             	sub    esp,0x8
c0018dfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dff:	50                   	push   eax
c0018e00:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e07:	50                   	push   eax
c0018e08:	e8 a1 b9 fe ff       	call   c00047ae <f_stat>
c0018e0d:	83 c4 10             	add    esp,0x10
c0018e10:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018e17:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018e1e:	85 c0                	test   eax,eax
c0018e20:	74 0a                	je     c0018e2c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018e22:	83 f8 04             	cmp    eax,0x4
c0018e25:	74 39                	je     c0018e60 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018e27:	eb 3f                	jmp    c0018e68 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018e29:	8d 76 00             	lea    esi,[esi+0x0]
c0018e2c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e30:	0f b6 c0             	movzx  eax,al
c0018e33:	83 e0 10             	and    eax,0x10
c0018e36:	0f 95 c2             	setne  dl
c0018e39:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018e40:	88 10                	mov    BYTE PTR [eax],dl
c0018e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e46:	ba 00 00 00 00       	mov    edx,0x0
c0018e4b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018e52:	89 01                	mov    DWORD PTR [ecx],eax
c0018e54:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e57:	b8 00 00 00 00       	mov    eax,0x0
c0018e5c:	eb 12                	jmp    c0018e70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e5e:	66 90                	xchg   ax,ax
c0018e60:	b8 02 00 00 00       	mov    eax,0x2
c0018e65:	eb 09                	jmp    c0018e70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e67:	90                   	nop
c0018e68:	b8 01 00 00 00       	mov    eax,0x1
c0018e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e70:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018e76:	c3                   	ret    
c0018e77:	90                   	nop

c0018e78 <FAT::unlink(char const*)>:
c0018e78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018e86:	75 08                	jne    c0018e90 <FAT::unlink(char const*)+0x18>
c0018e88:	b8 04 00 00 00       	mov    eax,0x4
c0018e8d:	eb 61                	jmp    c0018ef0 <FAT::unlink(char const*)+0x78>
c0018e8f:	90                   	nop
c0018e90:	83 ec 08             	sub    esp,0x8
c0018e93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e9e:	50                   	push   eax
c0018e9f:	e8 ac 77 fe ff       	call   c0000650 <strcpy>
c0018ea4:	83 c4 10             	add    esp,0x10
c0018ea7:	83 ec 08             	sub    esp,0x8
c0018eaa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018eae:	50                   	push   eax
c0018eaf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018eb6:	e8 61 fc ff ff       	call   c0018b1c <FAT::fixFilepath(char*)>
c0018ebb:	83 c4 10             	add    esp,0x10
c0018ebe:	83 ec 0c             	sub    esp,0xc
c0018ec1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ec5:	50                   	push   eax
c0018ec6:	e8 55 bb fe ff       	call   c0004a20 <f_unlink>
c0018ecb:	83 c4 10             	add    esp,0x10
c0018ece:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018ed5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018edc:	85 c0                	test   eax,eax
c0018ede:	75 08                	jne    c0018ee8 <FAT::unlink(char const*)+0x70>
c0018ee0:	b8 00 00 00 00       	mov    eax,0x0
c0018ee5:	eb 09                	jmp    c0018ef0 <FAT::unlink(char const*)+0x78>
c0018ee7:	90                   	nop
c0018ee8:	b8 01 00 00 00       	mov    eax,0x1
c0018eed:	8d 76 00             	lea    esi,[esi+0x0]
c0018ef0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018ef6:	c3                   	ret    
c0018ef7:	90                   	nop

c0018ef8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018ef8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018efe:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018f05:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0018f0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f10:	88 d0                	mov    al,dl
c0018f12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018f16:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018f1e:	75 0c                	jne    c0018f2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018f20:	b8 04 00 00 00       	mov    eax,0x4
c0018f25:	e9 7e 01 00 00       	jmp    c00190a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0018f2a:	66 90                	xchg   ax,ax
c0018f2c:	83 ec 08             	sub    esp,0x8
c0018f2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f3a:	50                   	push   eax
c0018f3b:	e8 10 77 fe ff       	call   c0000650 <strcpy>
c0018f40:	83 c4 10             	add    esp,0x10
c0018f43:	83 ec 08             	sub    esp,0x8
c0018f46:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018f4a:	50                   	push   eax
c0018f4b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f52:	e8 c5 fb ff ff       	call   c0018b1c <FAT::fixFilepath(char*)>
c0018f57:	83 c4 10             	add    esp,0x10
c0018f5a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018f62:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018f6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f6f:	83 e0 01             	and    eax,0x1
c0018f72:	74 14                	je     c0018f88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0018f74:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f7b:	83 c8 01             	or     eax,0x1
c0018f7e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f85:	8d 76 00             	lea    esi,[esi+0x0]
c0018f88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f8d:	83 e0 02             	and    eax,0x2
c0018f90:	74 12                	je     c0018fa4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018f92:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f99:	83 c8 20             	or     eax,0x20
c0018f9c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fa3:	90                   	nop
c0018fa4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fa9:	83 e0 04             	and    eax,0x4
c0018fac:	74 12                	je     c0018fc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0018fae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fb5:	83 c8 04             	or     eax,0x4
c0018fb8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fbf:	90                   	nop
c0018fc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fc5:	83 e0 08             	and    eax,0x8
c0018fc8:	74 12                	je     c0018fdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018fca:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fd1:	83 c8 02             	or     eax,0x2
c0018fd4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fdb:	90                   	nop
c0018fdc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fe1:	83 e0 01             	and    eax,0x1
c0018fe4:	74 12                	je     c0018ff8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0018fe6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fed:	83 c8 01             	or     eax,0x1
c0018ff0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018ff7:	90                   	nop
c0018ff8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ffd:	83 e0 02             	and    eax,0x2
c0019000:	74 12                	je     c0019014 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019002:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019009:	83 c8 20             	or     eax,0x20
c001900c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019013:	90                   	nop
c0019014:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019019:	83 e0 04             	and    eax,0x4
c001901c:	74 12                	je     c0019030 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001901e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019025:	83 c8 04             	or     eax,0x4
c0019028:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001902f:	90                   	nop
c0019030:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019035:	83 e0 08             	and    eax,0x8
c0019038:	74 12                	je     c001904c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001903a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019041:	83 c8 02             	or     eax,0x2
c0019044:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001904b:	90                   	nop
c001904c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019053:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001905a:	09 d0                	or     eax,edx
c001905c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019063:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001906b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019073:	83 ec 04             	sub    esp,0x4
c0019076:	52                   	push   edx
c0019077:	50                   	push   eax
c0019078:	8d 44 24 24          	lea    eax,[esp+0x24]
c001907c:	50                   	push   eax
c001907d:	e8 11 be fe ff       	call   c0004e93 <f_chmod>
c0019082:	83 c4 10             	add    esp,0x10
c0019085:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001908c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019093:	85 c0                	test   eax,eax
c0019095:	75 09                	jne    c00190a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019097:	b8 00 00 00 00       	mov    eax,0x0
c001909c:	eb 0a                	jmp    c00190a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001909e:	66 90                	xchg   ax,ax
c00190a0:	b8 01 00 00 00       	mov    eax,0x1
c00190a5:	8d 76 00             	lea    esi,[esi+0x0]
c00190a8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00190ae:	c3                   	ret    
c00190af:	90                   	nop

c00190b0 <FAT::rename(char const*, char const*)>:
c00190b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00190b6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00190be:	74 0c                	je     c00190cc <FAT::rename(char const*, char const*)+0x1c>
c00190c0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00190c8:	75 0e                	jne    c00190d8 <FAT::rename(char const*, char const*)+0x28>
c00190ca:	66 90                	xchg   ax,ax
c00190cc:	b8 04 00 00 00       	mov    eax,0x4
c00190d1:	e9 9e 00 00 00       	jmp    c0019174 <FAT::rename(char const*, char const*)+0xc4>
c00190d6:	66 90                	xchg   ax,ax
c00190d8:	83 ec 08             	sub    esp,0x8
c00190db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190e9:	50                   	push   eax
c00190ea:	e8 61 75 fe ff       	call   c0000650 <strcpy>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	83 ec 08             	sub    esp,0x8
c00190f5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00190fc:	50                   	push   eax
c00190fd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019104:	e8 13 fa ff ff       	call   c0018b1c <FAT::fixFilepath(char*)>
c0019109:	83 c4 10             	add    esp,0x10
c001910c:	83 ec 08             	sub    esp,0x8
c001910f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019116:	8d 44 24 18          	lea    eax,[esp+0x18]
c001911a:	50                   	push   eax
c001911b:	e8 30 75 fe ff       	call   c0000650 <strcpy>
c0019120:	83 c4 10             	add    esp,0x10
c0019123:	83 ec 08             	sub    esp,0x8
c0019126:	8d 44 24 14          	lea    eax,[esp+0x14]
c001912a:	50                   	push   eax
c001912b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019132:	e8 e5 f9 ff ff       	call   c0018b1c <FAT::fixFilepath(char*)>
c0019137:	83 c4 10             	add    esp,0x10
c001913a:	83 ec 08             	sub    esp,0x8
c001913d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019141:	50                   	push   eax
c0019142:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019149:	50                   	push   eax
c001914a:	e8 8c bb fe ff       	call   c0004cdb <f_rename>
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019159:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019160:	85 c0                	test   eax,eax
c0019162:	75 08                	jne    c001916c <FAT::rename(char const*, char const*)+0xbc>
c0019164:	b8 00 00 00 00       	mov    eax,0x0
c0019169:	eb 09                	jmp    c0019174 <FAT::rename(char const*, char const*)+0xc4>
c001916b:	90                   	nop
c001916c:	b8 01 00 00 00       	mov    eax,0x1
c0019171:	8d 76 00             	lea    esi,[esi+0x0]
c0019174:	81 c4 1c 02 00 00    	add    esp,0x21c
c001917a:	c3                   	ret    
c001917b:	90                   	nop

c001917c <FAT::mkdir(char const*)>:
c001917c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019182:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001918a:	75 08                	jne    c0019194 <FAT::mkdir(char const*)+0x18>
c001918c:	b8 04 00 00 00       	mov    eax,0x4
c0019191:	eb 61                	jmp    c00191f4 <FAT::mkdir(char const*)+0x78>
c0019193:	90                   	nop
c0019194:	83 ec 08             	sub    esp,0x8
c0019197:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001919e:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191a2:	50                   	push   eax
c00191a3:	e8 a8 74 fe ff       	call   c0000650 <strcpy>
c00191a8:	83 c4 10             	add    esp,0x10
c00191ab:	83 ec 08             	sub    esp,0x8
c00191ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191b2:	50                   	push   eax
c00191b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00191ba:	e8 5d f9 ff ff       	call   c0018b1c <FAT::fixFilepath(char*)>
c00191bf:	83 c4 10             	add    esp,0x10
c00191c2:	83 ec 0c             	sub    esp,0xc
c00191c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191c9:	50                   	push   eax
c00191ca:	e8 71 b9 fe ff       	call   c0004b40 <f_mkdir>
c00191cf:	83 c4 10             	add    esp,0x10
c00191d2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00191d9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00191e0:	85 c0                	test   eax,eax
c00191e2:	75 08                	jne    c00191ec <FAT::mkdir(char const*)+0x70>
c00191e4:	b8 00 00 00 00       	mov    eax,0x0
c00191e9:	eb 09                	jmp    c00191f4 <FAT::mkdir(char const*)+0x78>
c00191eb:	90                   	nop
c00191ec:	b8 01 00 00 00       	mov    eax,0x1
c00191f1:	8d 76 00             	lea    esi,[esi+0x0]
c00191f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00191fa:	c3                   	ret    
c00191fb:	90                   	nop

c00191fc <FAT::exists(char const*)>:
c00191fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019202:	83 ec 08             	sub    esp,0x8
c0019205:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001920c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019210:	50                   	push   eax
c0019211:	e8 3a 74 fe ff       	call   c0000650 <strcpy>
c0019216:	83 c4 10             	add    esp,0x10
c0019219:	83 ec 08             	sub    esp,0x8
c001921c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019220:	50                   	push   eax
c0019221:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019228:	e8 ef f8 ff ff       	call   c0018b1c <FAT::fixFilepath(char*)>
c001922d:	83 c4 10             	add    esp,0x10
c0019230:	83 ec 08             	sub    esp,0x8
c0019233:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001923a:	50                   	push   eax
c001923b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001923f:	50                   	push   eax
c0019240:	e8 69 b5 fe ff       	call   c00047ae <f_stat>
c0019245:	83 c4 10             	add    esp,0x10
c0019248:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001924f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019256:	85 c0                	test   eax,eax
c0019258:	75 06                	jne    c0019260 <FAT::exists(char const*)+0x64>
c001925a:	b0 01                	mov    al,0x1
c001925c:	eb 06                	jmp    c0019264 <FAT::exists(char const*)+0x68>
c001925e:	66 90                	xchg   ax,ax
c0019260:	b0 00                	mov    al,0x0
c0019262:	66 90                	xchg   ax,ax
c0019264:	81 c4 2c 02 00 00    	add    esp,0x22c
c001926a:	c3                   	ret    
c001926b:	90                   	nop

c001926c <isoReadDiscSectorHelper>:
c001926c:	83 ec 2c             	sub    esp,0x2c
c001926f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019273:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019277:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001927c:	83 e8 41             	sub    eax,0x41
c001927f:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0019286:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001928a:	ba 00 00 00 00       	mov    edx,0x0
c001928f:	83 ec 0c             	sub    esp,0xc
c0019292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019296:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001929a:	52                   	push   edx
c001929b:	50                   	push   eax
c001929c:	51                   	push   ecx
c001929d:	e8 18 3f ff ff       	call   c000d1ba <LogicalDisk::read(unsigned long long, int, void*)>
c00192a2:	83 c4 20             	add    esp,0x20
c00192a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00192a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00192ae:	74 0c                	je     c00192bc <isoReadDiscSectorHelper+0x50>
c00192b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192b4:	c1 e0 0b             	shl    eax,0xb
c00192b7:	eb 0b                	jmp    c00192c4 <isoReadDiscSectorHelper+0x58>
c00192b9:	8d 76 00             	lea    esi,[esi+0x0]
c00192bc:	b8 00 00 00 00       	mov    eax,0x0
c00192c1:	8d 76 00             	lea    esi,[esi+0x0]
c00192c4:	83 c4 2c             	add    esp,0x2c
c00192c7:	c3                   	ret    

c00192c8 <iso_kprintf>:
c00192c8:	83 ec 0c             	sub    esp,0xc
c00192cb:	83 ec 08             	sub    esp,0x8
c00192ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192d2:	68 b1 10 02 c0       	push   0xc00210b1
c00192d7:	e8 93 16 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00192dc:	83 c4 10             	add    esp,0x10
c00192df:	90                   	nop
c00192e0:	83 c4 0c             	add    esp,0xc
c00192e3:	c3                   	ret    

c00192e4 <iso_kprintfd>:
c00192e4:	83 ec 0c             	sub    esp,0xc
c00192e7:	83 ec 08             	sub    esp,0x8
c00192ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192ee:	68 ad 00 02 c0       	push   0xc00200ad
c00192f3:	e8 77 16 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00192f8:	83 c4 10             	add    esp,0x10
c00192fb:	90                   	nop
c00192fc:	83 c4 0c             	add    esp,0xc
c00192ff:	c3                   	ret    

c0019300 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019300:	b8 08 00 00 00       	mov    eax,0x8
c0019305:	c3                   	ret    

c0019306 <ISO9660::getName()>:
c0019306:	b8 08 17 02 c0       	mov    eax,0xc0021708
c001930b:	c3                   	ret    

c001930c <ISO9660::closeDir(void*)>:
c001930c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019310:	8b 00                	mov    eax,DWORD PTR [eax]
c0019312:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019315:	90                   	nop

c0019316 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019316:	b8 01 00 00 00       	mov    eax,0x1
c001931b:	c3                   	ret    

c001931c <ISO9660::unlink(char const*)>:
c001931c:	b8 01 00 00 00       	mov    eax,0x1
c0019321:	c3                   	ret    

c0019322 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019322:	b8 03 00 00 00       	mov    eax,0x3
c0019327:	c3                   	ret    

c0019328 <ISO9660::rename(char const*, char const*)>:
c0019328:	b8 01 00 00 00       	mov    eax,0x1
c001932d:	c3                   	ret    

c001932e <ISO9660::mkdir(char const*)>:
c001932e:	b8 01 00 00 00       	mov    eax,0x1
c0019333:	c3                   	ret    

c0019334 <ISO9660::~ISO9660()>:
c0019334:	83 ec 0c             	sub    esp,0xc
c0019337:	ba 48 18 02 c0       	mov    edx,0xc0021848
c001933c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019340:	89 10                	mov    DWORD PTR [eax],edx
c0019342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019346:	83 ec 0c             	sub    esp,0xc
c0019349:	50                   	push   eax
c001934a:	e8 67 19 ff ff       	call   c000acb6 <Filesystem::~Filesystem()>
c001934f:	83 c4 10             	add    esp,0x10
c0019352:	90                   	nop
c0019353:	83 c4 0c             	add    esp,0xc
c0019356:	c3                   	ret    
c0019357:	90                   	nop

c0019358 <ISO9660::~ISO9660()>:
c0019358:	83 ec 0c             	sub    esp,0xc
c001935b:	83 ec 0c             	sub    esp,0xc
c001935e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019362:	e8 cd ff ff ff       	call   c0019334 <ISO9660::~ISO9660()>
c0019367:	83 c4 10             	add    esp,0x10
c001936a:	83 ec 08             	sub    esp,0x8
c001936d:	6a 08                	push   0x8
c001936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019373:	e8 f9 14 ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c0019378:	83 c4 10             	add    esp,0x10
c001937b:	83 c4 0c             	add    esp,0xc
c001937e:	c3                   	ret    
c001937f:	90                   	nop

c0019380 <ISO9660::exists(char const*)>:
c0019380:	83 ec 18             	sub    esp,0x18
c0019383:	68 23 17 02 c0       	push   0xc0021723
c0019388:	e8 ac 74 ff ff       	call   c0010839 <KePanic(char const*)>
c001938d:	31 c0                	xor    eax,eax
c001938f:	83 c4 1c             	add    esp,0x1c
c0019392:	c3                   	ret    
c0019393:	90                   	nop

c0019394 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019394:	56                   	push   esi
c0019395:	53                   	push   ebx
c0019396:	53                   	push   ebx
c0019397:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001939b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001939f:	85 db                	test   ebx,ebx
c00193a1:	0f 84 ca 00 00 00    	je     c0019471 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00193a7:	85 f6                	test   esi,esi
c00193a9:	0f 84 c2 00 00 00    	je     c0019471 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00193af:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00193b4:	b8 03 00 00 00       	mov    eax,0x3
c00193b9:	0f 85 b7 00 00 00    	jne    c0019476 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193bf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00193c1:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00193c7:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00193ce:	74 1b                	je     c00193eb <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00193d0:	85 c0                	test   eax,eax
c00193d2:	74 10                	je     c00193e4 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00193d4:	83 ec 0c             	sub    esp,0xc
c00193d7:	68 41 17 02 c0       	push   0xc0021741
c00193dc:	e8 58 74 ff ff       	call   c0010839 <KePanic(char const*)>
c00193e1:	83 c4 10             	add    esp,0x10
c00193e4:	8a 03                	mov    al,BYTE PTR [ebx]
c00193e6:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00193eb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193ee:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193f5:	85 c0                	test   eax,eax
c00193f7:	74 09                	je     c0019402 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00193f9:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019400:	74 48                	je     c001944a <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019402:	83 ec 0c             	sub    esp,0xc
c0019405:	68 51 17 02 c0       	push   0xc0021751
c001940a:	e8 60 15 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001940f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019412:	83 c4 10             	add    esp,0x10
c0019415:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001941c:	85 c0                	test   eax,eax
c001941e:	74 17                	je     c0019437 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019420:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019427:	83 ec 0c             	sub    esp,0xc
c001942a:	68 71 17 02 c0       	push   0xc0021771
c001942f:	e8 3b 15 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0019434:	83 c4 10             	add    esp,0x10
c0019437:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001943e:	83 ec 0c             	sub    esp,0xc
c0019441:	50                   	push   eax
c0019442:	e8 20 d6 fe ff       	call   c0006a67 <init_percd>
c0019447:	83 c4 10             	add    esp,0x10
c001944a:	51                   	push   ecx
c001944b:	83 c3 03             	add    ebx,0x3
c001944e:	51                   	push   ecx
c001944f:	6a 00                	push   0x0
c0019451:	53                   	push   ebx
c0019452:	e8 d3 d0 fe ff       	call   c000652a <iso_open>
c0019457:	83 c4 10             	add    esp,0x10
c001945a:	89 c2                	mov    edx,eax
c001945c:	b8 01 00 00 00       	mov    eax,0x1
c0019461:	83 fa ff             	cmp    edx,0xffffffff
c0019464:	74 10                	je     c0019476 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019466:	83 c2 32             	add    edx,0x32
c0019469:	31 c0                	xor    eax,eax
c001946b:	01 d2                	add    edx,edx
c001946d:	89 16                	mov    DWORD PTR [esi],edx
c001946f:	eb 05                	jmp    c0019476 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019471:	b8 04 00 00 00       	mov    eax,0x4
c0019476:	5a                   	pop    edx
c0019477:	5b                   	pop    ebx
c0019478:	5e                   	pop    esi
c0019479:	c3                   	ret    

c001947a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001947a:	53                   	push   ebx
c001947b:	83 ec 08             	sub    esp,0x8
c001947e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019482:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019486:	85 c0                	test   eax,eax
c0019488:	74 2d                	je     c00194b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001948a:	85 db                	test   ebx,ebx
c001948c:	74 29                	je     c00194b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001948e:	52                   	push   edx
c001948f:	b9 02 00 00 00       	mov    ecx,0x2
c0019494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019498:	99                   	cdq    
c0019499:	f7 f9                	idiv   ecx
c001949b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001949f:	83 e8 32             	sub    eax,0x32
c00194a2:	50                   	push   eax
c00194a3:	e8 2a d1 fe ff       	call   c00065d2 <iso_read>
c00194a8:	83 c4 10             	add    esp,0x10
c00194ab:	89 03                	mov    DWORD PTR [ebx],eax
c00194ad:	09 d0                	or     eax,edx
c00194af:	0f 94 c0             	sete   al
c00194b2:	0f b6 c0             	movzx  eax,al
c00194b5:	eb 05                	jmp    c00194bc <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00194b7:	b8 04 00 00 00       	mov    eax,0x4
c00194bc:	83 c4 08             	add    esp,0x8
c00194bf:	5b                   	pop    ebx
c00194c0:	c3                   	ret    
c00194c1:	90                   	nop

c00194c2 <ISO9660::seek(void*, unsigned long long)>:
c00194c2:	57                   	push   edi
c00194c3:	b8 04 00 00 00       	mov    eax,0x4
c00194c8:	56                   	push   esi
c00194c9:	51                   	push   ecx
c00194ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194ce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00194d2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00194d6:	85 d2                	test   edx,edx
c00194d8:	74 26                	je     c0019500 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00194da:	89 d0                	mov    eax,edx
c00194dc:	b9 02 00 00 00       	mov    ecx,0x2
c00194e1:	6a 00                	push   0x0
c00194e3:	99                   	cdq    
c00194e4:	f7 f9                	idiv   ecx
c00194e6:	57                   	push   edi
c00194e7:	56                   	push   esi
c00194e8:	83 e8 32             	sub    eax,0x32
c00194eb:	50                   	push   eax
c00194ec:	e8 f7 d1 fe ff       	call   c00066e8 <iso_seek>
c00194f1:	83 c4 10             	add    esp,0x10
c00194f4:	31 f0                	xor    eax,esi
c00194f6:	31 fa                	xor    edx,edi
c00194f8:	09 d0                	or     eax,edx
c00194fa:	0f 95 c0             	setne  al
c00194fd:	0f b6 c0             	movzx  eax,al
c0019500:	5a                   	pop    edx
c0019501:	5e                   	pop    esi
c0019502:	5f                   	pop    edi
c0019503:	c3                   	ret    

c0019504 <ISO9660::tell(void*, unsigned long long*)>:
c0019504:	53                   	push   ebx
c0019505:	83 ec 08             	sub    esp,0x8
c0019508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001950c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019510:	85 c0                	test   eax,eax
c0019512:	74 24                	je     c0019538 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019514:	85 db                	test   ebx,ebx
c0019516:	74 20                	je     c0019538 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019518:	b9 02 00 00 00       	mov    ecx,0x2
c001951d:	99                   	cdq    
c001951e:	f7 f9                	idiv   ecx
c0019520:	83 ec 0c             	sub    esp,0xc
c0019523:	83 e8 32             	sub    eax,0x32
c0019526:	50                   	push   eax
c0019527:	e8 40 d2 fe ff       	call   c000676c <iso_tell>
c001952c:	83 c4 10             	add    esp,0x10
c001952f:	89 03                	mov    DWORD PTR [ebx],eax
c0019531:	31 c0                	xor    eax,eax
c0019533:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019536:	eb 05                	jmp    c001953d <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019538:	b8 04 00 00 00       	mov    eax,0x4
c001953d:	83 c4 08             	add    esp,0x8
c0019540:	5b                   	pop    ebx
c0019541:	c3                   	ret    

c0019542 <ISO9660::stat(void*, unsigned long long*)>:
c0019542:	56                   	push   esi
c0019543:	53                   	push   ebx
c0019544:	83 ec 10             	sub    esp,0x10
c0019547:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001954b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001954f:	68 95 17 02 c0       	push   0xc0021795
c0019554:	e8 16 14 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0019559:	83 c4 10             	add    esp,0x10
c001955c:	85 db                	test   ebx,ebx
c001955e:	74 2a                	je     c001958a <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019560:	85 f6                	test   esi,esi
c0019562:	74 26                	je     c001958a <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019564:	89 d8                	mov    eax,ebx
c0019566:	b9 02 00 00 00       	mov    ecx,0x2
c001956b:	99                   	cdq    
c001956c:	83 ec 0c             	sub    esp,0xc
c001956f:	f7 f9                	idiv   ecx
c0019571:	83 e8 32             	sub    eax,0x32
c0019574:	50                   	push   eax
c0019575:	e8 23 d2 fe ff       	call   c000679d <iso_total>
c001957a:	83 c4 10             	add    esp,0x10
c001957d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019584:	89 06                	mov    DWORD PTR [esi],eax
c0019586:	31 c0                	xor    eax,eax
c0019588:	eb 05                	jmp    c001958f <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001958a:	b8 04 00 00 00       	mov    eax,0x4
c001958f:	5a                   	pop    edx
c0019590:	5b                   	pop    ebx
c0019591:	5e                   	pop    esi
c0019592:	c3                   	ret    
c0019593:	90                   	nop

c0019594 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019594:	55                   	push   ebp
c0019595:	57                   	push   edi
c0019596:	56                   	push   esi
c0019597:	53                   	push   ebx
c0019598:	83 ec 18             	sub    esp,0x18
c001959b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001959f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00195a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00195a7:	68 9d 17 02 c0       	push   0xc002179d
c00195ac:	e8 be 13 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c00195b1:	83 c4 10             	add    esp,0x10
c00195b4:	85 ff                	test   edi,edi
c00195b6:	0f 94 c0             	sete   al
c00195b9:	85 f6                	test   esi,esi
c00195bb:	0f 94 c2             	sete   dl
c00195be:	09 d0                	or     eax,edx
c00195c0:	a8 01                	test   al,0x1
c00195c2:	0f 85 dd 00 00 00    	jne    c00196a5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195c8:	85 db                	test   ebx,ebx
c00195ca:	0f 84 d5 00 00 00    	je     c00196a5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195d0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00195d3:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00195d9:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00195e0:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195e7:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00195e9:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00195ef:	74 1b                	je     c001960c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00195f1:	85 c0                	test   eax,eax
c00195f3:	74 10                	je     c0019605 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00195f5:	83 ec 0c             	sub    esp,0xc
c00195f8:	68 41 17 02 c0       	push   0xc0021741
c00195fd:	e8 37 72 ff ff       	call   c0010839 <KePanic(char const*)>
c0019602:	83 c4 10             	add    esp,0x10
c0019605:	8a 03                	mov    al,BYTE PTR [ebx]
c0019607:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001960c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001960f:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019616:	85 c0                	test   eax,eax
c0019618:	74 09                	je     c0019623 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001961a:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019621:	74 51                	je     c0019674 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019623:	83 ec 0c             	sub    esp,0xc
c0019626:	68 a5 17 02 c0       	push   0xc00217a5
c001962b:	e8 3f 13 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c0019630:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019633:	83 c4 10             	add    esp,0x10
c0019636:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c001963e:	74 21                	je     c0019661 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019640:	83 ec 0c             	sub    esp,0xc
c0019643:	68 c5 17 02 c0       	push   0xc00217c5
c0019648:	e8 22 13 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001964d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019650:	83 c4 10             	add    esp,0x10
c0019653:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001965a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019661:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	50                   	push   eax
c001966c:	e8 f6 d3 fe ff       	call   c0006a67 <init_percd>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	52                   	push   edx
c0019675:	83 c3 03             	add    ebx,0x3
c0019678:	52                   	push   edx
c0019679:	6a 00                	push   0x0
c001967b:	53                   	push   ebx
c001967c:	e8 a9 ce fe ff       	call   c000652a <iso_open>
c0019681:	83 c4 10             	add    esp,0x10
c0019684:	83 f8 ff             	cmp    eax,0xffffffff
c0019687:	89 c5                	mov    ebp,eax
c0019689:	75 21                	jne    c00196ac <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001968b:	50                   	push   eax
c001968c:	50                   	push   eax
c001968d:	6a 01                	push   0x1
c001968f:	53                   	push   ebx
c0019690:	e8 95 ce fe ff       	call   c000652a <iso_open>
c0019695:	83 c4 10             	add    esp,0x10
c0019698:	ba 02 00 00 00       	mov    edx,0x2
c001969d:	40                   	inc    eax
c001969e:	74 2b                	je     c00196cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00196a0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00196a3:	eb 24                	jmp    c00196c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00196a5:	ba 04 00 00 00       	mov    edx,0x4
c00196aa:	eb 1f                	jmp    c00196cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	50                   	push   eax
c00196b0:	e8 e8 d0 fe ff       	call   c000679d <iso_total>
c00196b5:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00196bc:	89 07                	mov    DWORD PTR [edi],eax
c00196be:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00196c1:	e8 ee ce fe ff       	call   c00065b4 <iso_close>
c00196c6:	83 c4 10             	add    esp,0x10
c00196c9:	31 d2                	xor    edx,edx
c00196cb:	83 c4 0c             	add    esp,0xc
c00196ce:	89 d0                	mov    eax,edx
c00196d0:	5b                   	pop    ebx
c00196d1:	5e                   	pop    esi
c00196d2:	5f                   	pop    edi
c00196d3:	5d                   	pop    ebp
c00196d4:	c3                   	ret    
c00196d5:	90                   	nop

c00196d6 <ISO9660::close(void*)>:
c00196d6:	83 ec 0c             	sub    esp,0xc
c00196d9:	b8 04 00 00 00       	mov    eax,0x4
c00196de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196e2:	85 d2                	test   edx,edx
c00196e4:	74 1b                	je     c0019701 <ISO9660::close(void*)+0x2b>
c00196e6:	89 d0                	mov    eax,edx
c00196e8:	b9 02 00 00 00       	mov    ecx,0x2
c00196ed:	99                   	cdq    
c00196ee:	83 ec 0c             	sub    esp,0xc
c00196f1:	f7 f9                	idiv   ecx
c00196f3:	83 e8 32             	sub    eax,0x32
c00196f6:	50                   	push   eax
c00196f7:	e8 b8 ce fe ff       	call   c00065b4 <iso_close>
c00196fc:	83 c4 10             	add    esp,0x10
c00196ff:	31 c0                	xor    eax,eax
c0019701:	83 c4 0c             	add    esp,0xc
c0019704:	c3                   	ret    
c0019705:	90                   	nop

c0019706 <ISO9660::openDir(char const*, void**)>:
c0019706:	56                   	push   esi
c0019707:	53                   	push   ebx
c0019708:	50                   	push   eax
c0019709:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001970d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019711:	85 db                	test   ebx,ebx
c0019713:	0f 84 bd 00 00 00    	je     c00197d6 <ISO9660::openDir(char const*, void**)+0xd0>
c0019719:	85 f6                	test   esi,esi
c001971b:	0f 84 b5 00 00 00    	je     c00197d6 <ISO9660::openDir(char const*, void**)+0xd0>
c0019721:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019723:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c0019729:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019730:	74 1b                	je     c001974d <ISO9660::openDir(char const*, void**)+0x47>
c0019732:	85 c0                	test   eax,eax
c0019734:	74 10                	je     c0019746 <ISO9660::openDir(char const*, void**)+0x40>
c0019736:	83 ec 0c             	sub    esp,0xc
c0019739:	68 41 17 02 c0       	push   0xc0021741
c001973e:	e8 f6 70 ff ff       	call   c0010839 <KePanic(char const*)>
c0019743:	83 c4 10             	add    esp,0x10
c0019746:	8a 03                	mov    al,BYTE PTR [ebx]
c0019748:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001974d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019750:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019757:	85 c0                	test   eax,eax
c0019759:	74 10                	je     c001976b <ISO9660::openDir(char const*, void**)+0x65>
c001975b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019762:	74 1a                	je     c001977e <ISO9660::openDir(char const*, void**)+0x78>
c0019764:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001976b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019772:	83 ec 0c             	sub    esp,0xc
c0019775:	50                   	push   eax
c0019776:	e8 ec d2 fe ff       	call   c0006a67 <init_percd>
c001977b:	83 c4 10             	add    esp,0x10
c001977e:	50                   	push   eax
c001977f:	83 c3 03             	add    ebx,0x3
c0019782:	50                   	push   eax
c0019783:	6a 01                	push   0x1
c0019785:	53                   	push   ebx
c0019786:	e8 9f cd fe ff       	call   c000652a <iso_open>
c001978b:	83 c4 10             	add    esp,0x10
c001978e:	83 f8 ff             	cmp    eax,0xffffffff
c0019791:	89 c3                	mov    ebx,eax
c0019793:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019798:	75 1c                	jne    c00197b6 <ISO9660::openDir(char const*, void**)+0xb0>
c001979a:	53                   	push   ebx
c001979b:	53                   	push   ebx
c001979c:	68 e9 17 02 c0       	push   0xc00217e9
c00197a1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197a7:	e8 ea f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00197ac:	83 c4 10             	add    esp,0x10
c00197af:	b8 01 00 00 00       	mov    eax,0x1
c00197b4:	eb 25                	jmp    c00197db <ISO9660::openDir(char const*, void**)+0xd5>
c00197b6:	51                   	push   ecx
c00197b7:	01 db                	add    ebx,ebx
c00197b9:	51                   	push   ecx
c00197ba:	83 c3 65             	add    ebx,0x65
c00197bd:	68 fc 17 02 c0       	push   0xc00217fc
c00197c2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197c8:	e8 c9 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00197cd:	83 c4 10             	add    esp,0x10
c00197d0:	31 c0                	xor    eax,eax
c00197d2:	89 1e                	mov    DWORD PTR [esi],ebx
c00197d4:	eb 05                	jmp    c00197db <ISO9660::openDir(char const*, void**)+0xd5>
c00197d6:	b8 04 00 00 00       	mov    eax,0x4
c00197db:	5a                   	pop    edx
c00197dc:	5b                   	pop    ebx
c00197dd:	5e                   	pop    esi
c00197de:	c3                   	ret    
c00197df:	90                   	nop

c00197e0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00197e0:	55                   	push   ebp
c00197e1:	57                   	push   edi
c00197e2:	56                   	push   esi
c00197e3:	53                   	push   ebx
c00197e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197ea:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00197f1:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00197f8:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00197ff:	85 db                	test   ebx,ebx
c0019801:	0f 84 e4 00 00 00    	je     c00198eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019807:	85 ed                	test   ebp,ebp
c0019809:	0f 84 dc 00 00 00    	je     c00198eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001980f:	83 ec 0c             	sub    esp,0xc
c0019812:	68 0f 18 02 c0       	push   0xc002180f
c0019817:	e8 53 11 ff ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001981c:	89 d8                	mov    eax,ebx
c001981e:	b9 02 00 00 00       	mov    ecx,0x2
c0019823:	99                   	cdq    
c0019824:	f7 f9                	idiv   ecx
c0019826:	83 e8 32             	sub    eax,0x32
c0019829:	89 04 24             	mov    DWORD PTR [esp],eax
c001982c:	e8 be cf fe ff       	call   c00067ef <iso_readdir>
c0019831:	83 c4 10             	add    esp,0x10
c0019834:	85 c0                	test   eax,eax
c0019836:	89 c3                	mov    ebx,eax
c0019838:	75 38                	jne    c0019872 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001983a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001983f:	53                   	push   ebx
c0019840:	53                   	push   ebx
c0019841:	68 1a 18 02 c0       	push   0xc002181a
c0019846:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001984c:	e8 45 f2 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c0019851:	83 c4 0c             	add    esp,0xc
c0019854:	68 10 01 00 00       	push   0x110
c0019859:	6a 00                	push   0x0
c001985b:	57                   	push   edi
c001985c:	e8 8f 6c fe ff       	call   c00004f0 <memset>
c0019861:	83 c4 10             	add    esp,0x10
c0019864:	b8 01 00 00 00       	mov    eax,0x1
c0019869:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019870:	eb 7e                	jmp    c00198f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019872:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019878:	8d 70 08             	lea    esi,[eax+0x8]
c001987b:	83 ec 0c             	sub    esp,0xc
c001987e:	56                   	push   esi
c001987f:	e8 fc 6c fe ff       	call   c0000580 <strlen>
c0019884:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001988c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019890:	83 c4 10             	add    esp,0x10
c0019893:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019897:	75 0a                	jne    c00198a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0019899:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001989c:	b8 02 00 00 00       	mov    eax,0x2
c00198a1:	74 05                	je     c00198a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c00198a3:	b8 01 00 00 00       	mov    eax,0x1
c00198a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198ac:	50                   	push   eax
c00198ad:	50                   	push   eax
c00198ae:	56                   	push   esi
c00198af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00198b3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00198b7:	50                   	push   eax
c00198b8:	e8 93 6d fe ff       	call   c0000650 <strcpy>
c00198bd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00198c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198c6:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c00198cd:	5a                   	pop    edx
c00198ce:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198d3:	59                   	pop    ecx
c00198d4:	68 2d 18 02 c0       	push   0xc002182d
c00198d9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198df:	e8 b2 f1 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c00198e4:	83 c4 10             	add    esp,0x10
c00198e7:	31 c0                	xor    eax,eax
c00198e9:	eb 05                	jmp    c00198f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00198eb:	b8 04 00 00 00       	mov    eax,0x4
c00198f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198f6:	5b                   	pop    ebx
c00198f7:	5e                   	pop    esi
c00198f8:	5f                   	pop    edi
c00198f9:	5d                   	pop    ebp
c00198fa:	c3                   	ret    

c00198fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00198fb:	57                   	push   edi
c00198fc:	56                   	push   esi
c00198fd:	53                   	push   ebx
c00198fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019902:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019906:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c001990c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019910:	0f be cb             	movsx  ecx,bl
c0019913:	75 0b                	jne    c0019920 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019915:	0f be 05 84 23 02 c0 	movsx  eax,BYTE PTR ds:0xc0022384
c001991c:	39 c8                	cmp    eax,ecx
c001991e:	74 47                	je     c0019967 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019920:	83 ec 0c             	sub    esp,0xc
c0019923:	31 d2                	xor    edx,edx
c0019925:	68 40 83 02 c0       	push   0xc0028340
c001992a:	6a 01                	push   0x1
c001992c:	52                   	push   edx
c001992d:	56                   	push   esi
c001992e:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019935:	e8 80 38 ff ff       	call   c000d1ba <LogicalDisk::read(unsigned long long, int, void*)>
c001993a:	83 c4 20             	add    esp,0x20
c001993d:	85 c0                	test   eax,eax
c001993f:	75 0e                	jne    c001994f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019941:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019947:	88 1d 84 23 02 c0    	mov    BYTE PTR ds:0xc0022384,bl
c001994d:	eb 18                	jmp    c0019967 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001994f:	50                   	push   eax
c0019950:	68 00 08 00 00       	push   0x800
c0019955:	6a 00                	push   0x0
c0019957:	57                   	push   edi
c0019958:	e8 93 6b fe ff       	call   c00004f0 <memset>
c001995d:	83 c4 10             	add    esp,0x10
c0019960:	b8 01 00 00 00       	mov    eax,0x1
c0019965:	eb 0e                	jmp    c0019975 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019967:	be 40 83 02 c0       	mov    esi,0xc0028340
c001996c:	b9 00 08 00 00       	mov    ecx,0x800
c0019971:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019973:	31 c0                	xor    eax,eax
c0019975:	5b                   	pop    ebx
c0019976:	5e                   	pop    esi
c0019977:	5f                   	pop    edi
c0019978:	c3                   	ret    
c0019979:	90                   	nop

c001997a <ISO9660::tryMount(LogicalDisk*, int)>:
c001997a:	53                   	push   ebx
c001997b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019981:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c001998b:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019992:	8d 58 41             	lea    ebx,[eax+0x41]
c0019995:	0f be db             	movsx  ebx,bl
c0019998:	53                   	push   ebx
c0019999:	8d 44 24 08          	lea    eax,[esp+0x8]
c001999d:	50                   	push   eax
c001999e:	6a 10                	push   0x10
c00199a0:	e8 56 ff ff ff       	call   c00198fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00199a5:	83 c4 10             	add    esp,0x10
c00199a8:	31 d2                	xor    edx,edx
c00199aa:	85 c0                	test   eax,eax
c00199ac:	75 33                	jne    c00199e1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199ae:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00199b3:	75 2c                	jne    c00199e1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199b5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00199ba:	75 25                	jne    c00199e1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199bc:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00199c1:	75 1e                	jne    c00199e1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199c3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00199c8:	75 17                	jne    c00199e1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199ca:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00199cf:	75 10                	jne    c00199e1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199d1:	83 ec 0c             	sub    esp,0xc
c00199d4:	53                   	push   ebx
c00199d5:	e8 8d d0 fe ff       	call   c0006a67 <init_percd>
c00199da:	83 c4 10             	add    esp,0x10
c00199dd:	40                   	inc    eax
c00199de:	0f 95 c2             	setne  dl
c00199e1:	81 c4 08 08 00 00    	add    esp,0x808
c00199e7:	88 d0                	mov    al,dl
c00199e9:	5b                   	pop    ebx
c00199ea:	c3                   	ret    
c00199eb:	90                   	nop

c00199ec <ISO9660::ISO9660()>:
c00199ec:	83 ec 0c             	sub    esp,0xc
c00199ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199f3:	83 ec 0c             	sub    esp,0xc
c00199f6:	50                   	push   eax
c00199f7:	e8 96 12 ff ff       	call   c000ac92 <Filesystem::Filesystem()>
c00199fc:	83 c4 10             	add    esp,0x10
c00199ff:	ba 48 18 02 c0       	mov    edx,0xc0021848
c0019a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a08:	89 10                	mov    DWORD PTR [eax],edx
c0019a0a:	e8 6a d1 fe ff       	call   c0006b79 <fs_iso9660_init>
c0019a0f:	90                   	nop
c0019a10:	83 c4 0c             	add    esp,0xc
c0019a13:	c3                   	ret    

c0019a14 <SoundCard::beginPlayback()>:
c0019a14:	c7 44 24 04 a8 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218a8
c0019a1c:	e9 18 6e ff ff       	jmp    c0010839 <KePanic(char const*)>
c0019a21:	90                   	nop

c0019a22 <SoundCard::stopPlayback()>:
c0019a22:	c7 44 24 04 a8 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218a8
c0019a2a:	e9 0a 6e ff ff       	jmp    c0010839 <KePanic(char const*)>
c0019a2f:	90                   	nop

c0019a30 <SoundCard::SoundCard(char const*)>:
c0019a30:	83 ec 1c             	sub    esp,0x1c
c0019a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a37:	83 ec 08             	sub    esp,0x8
c0019a3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a3e:	50                   	push   eax
c0019a3f:	e8 24 25 ff ff       	call   c000bf68 <Device::Device(char const*)>
c0019a44:	83 c4 10             	add    esp,0x10
c0019a47:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c0019a4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a50:	89 10                	mov    DWORD PTR [eax],edx
c0019a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a56:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a61:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019a6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a6f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a7d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019a87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a8b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019a95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a9d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019aa2:	7f 1a                	jg     c0019abe <SoundCard::SoundCard(char const*)+0x8e>
c0019aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019aac:	83 c2 54             	add    edx,0x54
c0019aaf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019ab7:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019abc:	eb df                	jmp    c0019a9d <SoundCard::SoundCard(char const*)+0x6d>
c0019abe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ac2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019ac9:	90                   	nop
c0019aca:	83 c4 1c             	add    esp,0x1c
c0019acd:	c3                   	ret    

c0019ace <SoundCard::~SoundCard()>:
c0019ace:	83 ec 0c             	sub    esp,0xc
c0019ad1:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c0019ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ada:	89 10                	mov    DWORD PTR [eax],edx
c0019adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ae0:	83 ec 0c             	sub    esp,0xc
c0019ae3:	50                   	push   eax
c0019ae4:	e8 e9 21 ff ff       	call   c000bcd2 <Device::~Device()>
c0019ae9:	83 c4 10             	add    esp,0x10
c0019aec:	90                   	nop
c0019aed:	83 c4 0c             	add    esp,0xc
c0019af0:	c3                   	ret    
c0019af1:	90                   	nop

c0019af2 <SoundCard::~SoundCard()>:
c0019af2:	83 ec 0c             	sub    esp,0xc
c0019af5:	83 ec 0c             	sub    esp,0xc
c0019af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019afc:	e8 cd ff ff ff       	call   c0019ace <SoundCard::~SoundCard()>
c0019b01:	83 c4 10             	add    esp,0x10
c0019b04:	83 ec 08             	sub    esp,0x8
c0019b07:	68 e8 01 00 00       	push   0x1e8
c0019b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b10:	e8 5c 0d ff ff       	call   c000a871 <operator delete(void*, unsigned long)>
c0019b15:	83 c4 10             	add    esp,0x10
c0019b18:	83 c4 0c             	add    esp,0xc
c0019b1b:	c3                   	ret    

c0019b1c <SoundCard::configureRates(int, int, int)>:
c0019b1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b20:	31 c0                	xor    eax,eax
c0019b22:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019b29:	75 20                	jne    c0019b4b <SoundCard::configureRates(int, int, int)+0x2f>
c0019b2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b2f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b39:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b43:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019b49:	b0 01                	mov    al,0x1
c0019b4b:	c3                   	ret    

c0019b4c <SoundCard::getSamples16(int, short*)>:
c0019b4c:	55                   	push   ebp
c0019b4d:	57                   	push   edi
c0019b4e:	31 ff                	xor    edi,edi
c0019b50:	56                   	push   esi
c0019b51:	53                   	push   ebx
c0019b52:	31 db                	xor    ebx,ebx
c0019b54:	83 ec 10             	sub    esp,0x10
c0019b57:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019b5b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b5f:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b62:	50                   	push   eax
c0019b63:	6a 00                	push   0x0
c0019b65:	55                   	push   ebp
c0019b66:	e8 85 69 fe ff       	call   c00004f0 <memset>
c0019b6b:	83 c4 10             	add    esp,0x10
c0019b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b72:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019b79:	85 c0                	test   eax,eax
c0019b7b:	74 1a                	je     c0019b97 <SoundCard::getSamples16(int, short*)+0x4b>
c0019b7d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b81:	75 14                	jne    c0019b97 <SoundCard::getSamples16(int, short*)+0x4b>
c0019b83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019b87:	55                   	push   ebp
c0019b88:	56                   	push   esi
c0019b89:	50                   	push   eax
c0019b8a:	e8 f1 02 00 00       	call   c0019e80 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019b8f:	83 c4 10             	add    esp,0x10
c0019b92:	39 c3                	cmp    ebx,eax
c0019b94:	0f 4c d8             	cmovl  ebx,eax
c0019b97:	47                   	inc    edi
c0019b98:	83 ff 20             	cmp    edi,0x20
c0019b9b:	75 d1                	jne    c0019b6e <SoundCard::getSamples16(int, short*)+0x22>
c0019b9d:	83 c4 0c             	add    esp,0xc
c0019ba0:	89 d8                	mov    eax,ebx
c0019ba2:	5b                   	pop    ebx
c0019ba3:	5e                   	pop    esi
c0019ba4:	5f                   	pop    edi
c0019ba5:	5d                   	pop    ebp
c0019ba6:	c3                   	ret    
c0019ba7:	90                   	nop

c0019ba8 <SoundCard::getSamples32(int, int*)>:
c0019ba8:	55                   	push   ebp
c0019ba9:	57                   	push   edi
c0019baa:	31 ff                	xor    edi,edi
c0019bac:	56                   	push   esi
c0019bad:	31 f6                	xor    esi,esi
c0019baf:	53                   	push   ebx
c0019bb0:	83 ec 10             	sub    esp,0x10
c0019bb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bb7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019bbb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019bbf:	c1 e0 02             	shl    eax,0x2
c0019bc2:	50                   	push   eax
c0019bc3:	6a 00                	push   0x0
c0019bc5:	55                   	push   ebp
c0019bc6:	e8 25 69 fe ff       	call   c00004f0 <memset>
c0019bcb:	83 c4 10             	add    esp,0x10
c0019bce:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019bd5:	85 c0                	test   eax,eax
c0019bd7:	74 1a                	je     c0019bf3 <SoundCard::getSamples32(int, int*)+0x4b>
c0019bd9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019bdd:	75 14                	jne    c0019bf3 <SoundCard::getSamples32(int, int*)+0x4b>
c0019bdf:	53                   	push   ebx
c0019be0:	55                   	push   ebp
c0019be1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019be5:	50                   	push   eax
c0019be6:	e8 65 03 00 00       	call   c0019f50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019beb:	83 c4 10             	add    esp,0x10
c0019bee:	39 c6                	cmp    esi,eax
c0019bf0:	0f 4c f0             	cmovl  esi,eax
c0019bf3:	47                   	inc    edi
c0019bf4:	83 ff 20             	cmp    edi,0x20
c0019bf7:	75 d5                	jne    c0019bce <SoundCard::getSamples32(int, int*)+0x26>
c0019bf9:	85 f6                	test   esi,esi
c0019bfb:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019c02:	75 0f                	jne    c0019c13 <SoundCard::getSamples32(int, int*)+0x6b>
c0019c04:	85 c0                	test   eax,eax
c0019c06:	74 1b                	je     c0019c23 <SoundCard::getSamples32(int, int*)+0x7b>
c0019c08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c0a:	83 ec 0c             	sub    esp,0xc
c0019c0d:	53                   	push   ebx
c0019c0e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019c11:	eb 0d                	jmp    c0019c20 <SoundCard::getSamples32(int, int*)+0x78>
c0019c13:	85 c0                	test   eax,eax
c0019c15:	75 0c                	jne    c0019c23 <SoundCard::getSamples32(int, int*)+0x7b>
c0019c17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c19:	83 ec 0c             	sub    esp,0xc
c0019c1c:	53                   	push   ebx
c0019c1d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019c20:	83 c4 10             	add    esp,0x10
c0019c23:	83 c4 0c             	add    esp,0xc
c0019c26:	89 f0                	mov    eax,esi
c0019c28:	5b                   	pop    ebx
c0019c29:	5e                   	pop    esi
c0019c2a:	5f                   	pop    edi
c0019c2b:	5d                   	pop    ebp
c0019c2c:	c3                   	ret    
c0019c2d:	90                   	nop

c0019c2e <SoundCard::addChannel(SoundPort*)>:
c0019c2e:	83 ec 0c             	sub    esp,0xc
c0019c31:	31 c0                	xor    eax,eax
c0019c33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c37:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019c3f:	74 1b                	je     c0019c5c <SoundCard::addChannel(SoundPort*)+0x2e>
c0019c41:	40                   	inc    eax
c0019c42:	83 f8 20             	cmp    eax,0x20
c0019c45:	75 f0                	jne    c0019c37 <SoundCard::addChannel(SoundPort*)+0x9>
c0019c47:	83 ec 0c             	sub    esp,0xc
c0019c4a:	68 cd 18 02 c0       	push   0xc00218cd
c0019c4f:	e8 e5 6b ff ff       	call   c0010839 <KePanic(char const*)>
c0019c54:	83 c4 10             	add    esp,0x10
c0019c57:	83 c8 ff             	or     eax,0xffffffff
c0019c5a:	eb 0b                	jmp    c0019c67 <SoundCard::addChannel(SoundPort*)+0x39>
c0019c5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019c60:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019c67:	83 c4 0c             	add    esp,0xc
c0019c6a:	c3                   	ret    
c0019c6b:	90                   	nop

c0019c6c <SoundCard::removeChannel(int)>:
c0019c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c74:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019c7f:	c3                   	ret    

c0019c80 <SoundPort::SoundPort(int, int, int, int)>:
c0019c80:	83 ec 0c             	sub    esp,0xc
c0019c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c87:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c92:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c9e:	89 10                	mov    DWORD PTR [eax],edx
c0019ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ca8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019caf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019cb3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019cb6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019cbb:	75 13                	jne    c0019cd0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019cc3:	05 a0 0f 00 00       	add    eax,0xfa0
c0019cc8:	d1 e0                	shl    eax,1
c0019cca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019cce:	66 90                	xchg   ax,ax
c0019cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019cd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cdf:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019ced:	c1 e0 02             	shl    eax,0x2
c0019cf0:	83 ec 0c             	sub    esp,0xc
c0019cf3:	50                   	push   eax
c0019cf4:	e8 d2 dd fe ff       	call   c0007acb <malloc>
c0019cf9:	83 c4 10             	add    esp,0x10
c0019cfc:	89 c2                	mov    edx,eax
c0019cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019d05:	90                   	nop
c0019d06:	83 c4 0c             	add    esp,0xc
c0019d09:	c3                   	ret    
c0019d0a:	66 90                	xchg   ax,ax

c0019d0c <SoundPort::~SoundPort()>:
c0019d0c:	83 ec 0c             	sub    esp,0xc
c0019d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d16:	85 c0                	test   eax,eax
c0019d18:	74 1e                	je     c0019d38 <SoundPort::~SoundPort()+0x2c>
c0019d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d21:	83 ec 0c             	sub    esp,0xc
c0019d24:	50                   	push   eax
c0019d25:	e8 b1 dd fe ff       	call   c0007adb <free>
c0019d2a:	83 c4 10             	add    esp,0x10
c0019d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d31:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d38:	90                   	nop
c0019d39:	83 c4 0c             	add    esp,0xc
c0019d3c:	c3                   	ret    
c0019d3d:	90                   	nop
c0019d3e:	66 90                	xchg   ax,ax

c0019d40 <SoundPort::unpause()>:
c0019d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d44:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019d48:	c3                   	ret    
c0019d49:	90                   	nop
c0019d4a:	66 90                	xchg   ax,ax

c0019d4c <SoundPort::pause()>:
c0019d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d50:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d54:	c3                   	ret    
c0019d55:	90                   	nop
c0019d56:	66 90                	xchg   ax,ax

c0019d58 <SoundPort::getBufferUsed()>:
c0019d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d5c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d5f:	c3                   	ret    

c0019d60 <SoundPort::getBufferSize()>:
c0019d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d64:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d67:	c3                   	ret    

c0019d68 <SoundPort::buffer16(short*, int)>:
c0019d68:	55                   	push   ebp
c0019d69:	57                   	push   edi
c0019d6a:	56                   	push   esi
c0019d6b:	53                   	push   ebx
c0019d6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d70:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019d74:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019d77:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019d7a:	74 68                	je     c0019de4 <SoundPort::buffer16(short*, int)+0x7c>
c0019d7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d80:	85 c9                	test   ecx,ecx
c0019d82:	7e 60                	jle    c0019de4 <SoundPort::buffer16(short*, int)+0x7c>
c0019d84:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019d88:	8d 70 01             	lea    esi,[eax+0x1]
c0019d8b:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019d8e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019d91:	c1 e1 0f             	shl    ecx,0xf
c0019d94:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019d97:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d9a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d9d:	74 4d                	je     c0019dec <SoundPort::buffer16(short*, int)+0x84>
c0019d9f:	31 f6                	xor    esi,esi
c0019da1:	eb 21                	jmp    c0019dc4 <SoundPort::buffer16(short*, int)+0x5c>
c0019da3:	90                   	nop
c0019da4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019da9:	8d 79 01             	lea    edi,[ecx+0x1]
c0019dac:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019daf:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019db2:	c1 e3 0f             	shl    ebx,0xf
c0019db5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019db8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dbb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019dbe:	74 1c                	je     c0019ddc <SoundPort::buffer16(short*, int)+0x74>
c0019dc0:	89 c6                	mov    esi,eax
c0019dc2:	66 90                	xchg   ax,ax
c0019dc4:	8d 46 01             	lea    eax,[esi+0x1]
c0019dc7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019dcb:	75 d7                	jne    c0019da4 <SoundPort::buffer16(short*, int)+0x3c>
c0019dcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019dd4:	5b                   	pop    ebx
c0019dd5:	5e                   	pop    esi
c0019dd6:	5f                   	pop    edi
c0019dd7:	5d                   	pop    ebp
c0019dd8:	c3                   	ret    
c0019dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ddc:	5b                   	pop    ebx
c0019ddd:	8d 46 02             	lea    eax,[esi+0x2]
c0019de0:	5e                   	pop    esi
c0019de1:	5f                   	pop    edi
c0019de2:	5d                   	pop    ebp
c0019de3:	c3                   	ret    
c0019de4:	5b                   	pop    ebx
c0019de5:	31 c0                	xor    eax,eax
c0019de7:	5e                   	pop    esi
c0019de8:	5f                   	pop    edi
c0019de9:	5d                   	pop    ebp
c0019dea:	c3                   	ret    
c0019deb:	90                   	nop
c0019dec:	b8 01 00 00 00       	mov    eax,0x1
c0019df1:	eb e1                	jmp    c0019dd4 <SoundPort::buffer16(short*, int)+0x6c>
c0019df3:	90                   	nop

c0019df4 <SoundPort::buffer32(int*, int)>:
c0019df4:	55                   	push   ebp
c0019df5:	57                   	push   edi
c0019df6:	56                   	push   esi
c0019df7:	53                   	push   ebx
c0019df8:	83 ec 04             	sub    esp,0x4
c0019dfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e07:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e0a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e10:	74 5a                	je     c0019e6c <SoundPort::buffer32(int*, int)+0x78>
c0019e12:	85 c0                	test   eax,eax
c0019e14:	7e 56                	jle    c0019e6c <SoundPort::buffer32(int*, int)+0x78>
c0019e16:	8d 71 01             	lea    esi,[ecx+0x1]
c0019e19:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e1c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e1f:	8b 37                	mov    esi,DWORD PTR [edi]
c0019e21:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019e24:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e27:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e2a:	74 4c                	je     c0019e78 <SoundPort::buffer32(int*, int)+0x84>
c0019e2c:	31 f6                	xor    esi,esi
c0019e2e:	eb 1c                	jmp    c0019e4c <SoundPort::buffer32(int*, int)+0x58>
c0019e30:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019e33:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019e36:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019e39:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019e3c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019e40:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e43:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e46:	74 18                	je     c0019e60 <SoundPort::buffer32(int*, int)+0x6c>
c0019e48:	89 de                	mov    esi,ebx
c0019e4a:	66 90                	xchg   ax,ax
c0019e4c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019e4f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019e52:	75 dc                	jne    c0019e30 <SoundPort::buffer32(int*, int)+0x3c>
c0019e54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e57:	90                   	nop
c0019e58:	83 c4 04             	add    esp,0x4
c0019e5b:	5b                   	pop    ebx
c0019e5c:	5e                   	pop    esi
c0019e5d:	5f                   	pop    edi
c0019e5e:	5d                   	pop    ebp
c0019e5f:	c3                   	ret    
c0019e60:	8d 46 02             	lea    eax,[esi+0x2]
c0019e63:	83 c4 04             	add    esp,0x4
c0019e66:	5b                   	pop    ebx
c0019e67:	5e                   	pop    esi
c0019e68:	5f                   	pop    edi
c0019e69:	5d                   	pop    ebp
c0019e6a:	c3                   	ret    
c0019e6b:	90                   	nop
c0019e6c:	83 c4 04             	add    esp,0x4
c0019e6f:	31 c0                	xor    eax,eax
c0019e71:	5b                   	pop    ebx
c0019e72:	5e                   	pop    esi
c0019e73:	5f                   	pop    edi
c0019e74:	5d                   	pop    ebp
c0019e75:	c3                   	ret    
c0019e76:	66 90                	xchg   ax,ax
c0019e78:	b8 01 00 00 00       	mov    eax,0x1
c0019e7d:	eb d9                	jmp    c0019e58 <SoundPort::buffer32(int*, int)+0x64>
c0019e7f:	90                   	nop

c0019e80 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019e80:	55                   	push   ebp
c0019e81:	57                   	push   edi
c0019e82:	56                   	push   esi
c0019e83:	53                   	push   ebx
c0019e84:	83 ec 0c             	sub    esp,0xc
c0019e87:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019e8b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019e8f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019e93:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019e97:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019e9d:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e9f:	74 13                	je     c0019eb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019ea1:	83 ec 0c             	sub    esp,0xc
c0019ea4:	68 20 19 02 c0       	push   0xc0021920
c0019ea9:	e8 8b 69 ff ff       	call   c0010839 <KePanic(char const*)>
c0019eae:	83 c4 10             	add    esp,0x10
c0019eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019eba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019ebd:	74 11                	je     c0019ed0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019ebf:	83 ec 0c             	sub    esp,0xc
c0019ec2:	68 5f 19 02 c0       	push   0xc002195f
c0019ec7:	e8 6d 69 ff ff       	call   c0010839 <KePanic(char const*)>
c0019ecc:	83 c4 10             	add    esp,0x10
c0019ecf:	90                   	nop
c0019ed0:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019ed6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019ed9:	74 11                	je     c0019eec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019edb:	83 ec 0c             	sub    esp,0xc
c0019ede:	68 5f 19 02 c0       	push   0xc002195f
c0019ee3:	e8 51 69 ff ff       	call   c0010839 <KePanic(char const*)>
c0019ee8:	83 c4 10             	add    esp,0x10
c0019eeb:	90                   	nop
c0019eec:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019eef:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019ef3:	85 f6                	test   esi,esi
c0019ef5:	7e 2d                	jle    c0019f24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019ef7:	31 c0                	xor    eax,eax
c0019ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0019efc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019eff:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019f02:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019f08:	85 c9                	test   ecx,ecx
c0019f0a:	0f 49 d1             	cmovns edx,ecx
c0019f0d:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0019f11:	c1 fa 0f             	sar    edx,0xf
c0019f14:	01 d1                	add    ecx,edx
c0019f16:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0019f1a:	83 c0 01             	add    eax,0x1
c0019f1d:	39 f0                	cmp    eax,esi
c0019f1f:	75 db                	jne    c0019efc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019f21:	8d 76 00             	lea    esi,[esi+0x0]
c0019f24:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f27:	83 ec 04             	sub    esp,0x4
c0019f2a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f2d:	29 f0                	sub    eax,esi
c0019f2f:	c1 e0 02             	shl    eax,0x2
c0019f32:	50                   	push   eax
c0019f33:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019f36:	50                   	push   eax
c0019f37:	52                   	push   edx
c0019f38:	e8 93 64 fe ff       	call   c00003d0 <memmove>
c0019f3d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f40:	29 f0                	sub    eax,esi
c0019f42:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f45:	83 c4 1c             	add    esp,0x1c
c0019f48:	89 f0                	mov    eax,esi
c0019f4a:	5b                   	pop    ebx
c0019f4b:	5e                   	pop    esi
c0019f4c:	5f                   	pop    edi
c0019f4d:	5d                   	pop    ebp
c0019f4e:	c3                   	ret    
c0019f4f:	90                   	nop

c0019f50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019f50:	55                   	push   ebp
c0019f51:	57                   	push   edi
c0019f52:	56                   	push   esi
c0019f53:	53                   	push   ebx
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f5f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0019f63:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019f67:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019f6d:	39 03                	cmp    DWORD PTR [ebx],eax
c0019f6f:	74 13                	je     c0019f84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0019f71:	83 ec 0c             	sub    esp,0xc
c0019f74:	68 40 19 02 c0       	push   0xc0021940
c0019f79:	e8 bb 68 ff ff       	call   c0010839 <KePanic(char const*)>
c0019f7e:	83 c4 10             	add    esp,0x10
c0019f81:	8d 76 00             	lea    esi,[esi+0x0]
c0019f84:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019f8a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019f8d:	74 11                	je     c0019fa0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0019f8f:	83 ec 0c             	sub    esp,0xc
c0019f92:	68 7b 19 02 c0       	push   0xc002197b
c0019f97:	e8 9d 68 ff ff       	call   c0010839 <KePanic(char const*)>
c0019f9c:	83 c4 10             	add    esp,0x10
c0019f9f:	90                   	nop
c0019fa0:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019fa6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019fa9:	74 11                	je     c0019fbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019fab:	83 ec 0c             	sub    esp,0xc
c0019fae:	68 7b 19 02 c0       	push   0xc002197b
c0019fb3:	e8 81 68 ff ff       	call   c0010839 <KePanic(char const*)>
c0019fb8:	83 c4 10             	add    esp,0x10
c0019fbb:	90                   	nop
c0019fbc:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019fbf:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019fc3:	85 ff                	test   edi,edi
c0019fc5:	7e 21                	jle    c0019fe8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0019fc7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019fce:	31 c0                	xor    eax,eax
c0019fd0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019fd3:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0019fd6:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019fd9:	01 d5                	add    ebp,edx
c0019fdb:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0019fde:	83 c0 04             	add    eax,0x4
c0019fe1:	39 c1                	cmp    ecx,eax
c0019fe3:	75 eb                	jne    c0019fd0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0019fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fe8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019feb:	83 ec 04             	sub    esp,0x4
c0019fee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019ff1:	29 f8                	sub    eax,edi
c0019ff3:	c1 e0 02             	shl    eax,0x2
c0019ff6:	50                   	push   eax
c0019ff7:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019ffa:	50                   	push   eax
c0019ffb:	52                   	push   edx
c0019ffc:	e8 cf 63 fe ff       	call   c00003d0 <memmove>
c001a001:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a004:	29 f8                	sub    eax,edi
c001a006:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a009:	83 c4 1c             	add    esp,0x1c
c001a00c:	89 f8                	mov    eax,edi
c001a00e:	5b                   	pop    ebx
c001a00f:	5e                   	pop    esi
c001a010:	5f                   	pop    edi
c001a011:	5d                   	pop    ebp
c001a012:	c3                   	ret    
c001a013:	90                   	nop

c001a014 <PCI::open(int, int, void*)>:
c001a014:	83 ec 18             	sub    esp,0x18
c001a017:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a01b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a01f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a025:	8b 10                	mov    edx,DWORD PTR [eax]
c001a027:	50                   	push   eax
c001a028:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a02b:	31 c0                	xor    eax,eax
c001a02d:	83 c4 1c             	add    esp,0x1c
c001a030:	c3                   	ret    
c001a031:	90                   	nop

c001a032 <PCI::close(int, int, void*)>:
c001a032:	31 c0                	xor    eax,eax
c001a034:	c3                   	ret    
c001a035:	90                   	nop

c001a036 <PCI::PCI()>:
c001a036:	83 ec 0c             	sub    esp,0xc
c001a039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a03d:	83 ec 08             	sub    esp,0x8
c001a040:	68 97 19 02 c0       	push   0xc0021997
c001a045:	50                   	push   eax
c001a046:	e8 e1 16 ff ff       	call   c000b72c <Bus::Bus(char const*)>
c001a04b:	83 c4 10             	add    esp,0x10
c001a04e:	ba 40 1a 02 c0       	mov    edx,0xc0021a40
c001a053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a057:	89 10                	mov    DWORD PTR [eax],edx
c001a059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a05d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06b:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a074:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a07a:	0f b6 d0             	movzx  edx,al
c001a07d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a081:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a08c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a092:	0f b6 d0             	movzx  edx,al
c001a095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a099:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a0a8:	8d 50 01             	lea    edx,[eax+0x1]
c001a0ab:	88 d1                	mov    cl,dl
c001a0ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0b1:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a0b7:	0f b6 d0             	movzx  edx,al
c001a0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0be:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a0c2:	83 c9 c0             	or     ecx,0xffffffc0
c001a0c5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a0c9:	90                   	nop
c001a0ca:	83 c4 0c             	add    esp,0xc
c001a0cd:	c3                   	ret    

c001a0ce <PCI::readBAR8(unsigned int, int)>:
c001a0ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0d6:	f6 c2 01             	test   dl,0x1
c001a0d9:	74 07                	je     c001a0e2 <PCI::readBAR8(unsigned int, int)+0x14>
c001a0db:	83 e2 fc             	and    edx,0xfffffffc
c001a0de:	01 c2                	add    edx,eax
c001a0e0:	ec                   	in     al,dx
c001a0e1:	c3                   	ret    
c001a0e2:	83 e2 f0             	and    edx,0xfffffff0
c001a0e5:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a0e8:	c3                   	ret    
c001a0e9:	90                   	nop

c001a0ea <PCI::readBAR16(unsigned int, int)>:
c001a0ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0f2:	f6 c2 01             	test   dl,0x1
c001a0f5:	74 08                	je     c001a0ff <PCI::readBAR16(unsigned int, int)+0x15>
c001a0f7:	83 e2 fc             	and    edx,0xfffffffc
c001a0fa:	01 c2                	add    edx,eax
c001a0fc:	66 ed                	in     ax,dx
c001a0fe:	c3                   	ret    
c001a0ff:	83 e2 f0             	and    edx,0xfffffff0
c001a102:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a106:	c3                   	ret    
c001a107:	90                   	nop

c001a108 <PCI::readBAR32(unsigned int, int)>:
c001a108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a10c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a110:	f6 c2 01             	test   dl,0x1
c001a113:	74 07                	je     c001a11c <PCI::readBAR32(unsigned int, int)+0x14>
c001a115:	83 e2 fc             	and    edx,0xfffffffc
c001a118:	01 c2                	add    edx,eax
c001a11a:	ed                   	in     eax,dx
c001a11b:	c3                   	ret    
c001a11c:	83 e2 f0             	and    edx,0xfffffff0
c001a11f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a122:	c3                   	ret    
c001a123:	90                   	nop

c001a124 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a128:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a12c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a130:	f6 c2 01             	test   dl,0x1
c001a133:	74 07                	je     c001a13c <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a135:	83 e2 fc             	and    edx,0xfffffffc
c001a138:	01 ca                	add    edx,ecx
c001a13a:	ee                   	out    dx,al
c001a13b:	c3                   	ret    
c001a13c:	83 e2 f0             	and    edx,0xfffffff0
c001a13f:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a142:	c3                   	ret    
c001a143:	90                   	nop

c001a144 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a144:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a148:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a14c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a150:	f6 c2 01             	test   dl,0x1
c001a153:	74 08                	je     c001a15d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a155:	83 e2 fc             	and    edx,0xfffffffc
c001a158:	01 ca                	add    edx,ecx
c001a15a:	66 ef                	out    dx,ax
c001a15c:	c3                   	ret    
c001a15d:	83 e2 f0             	and    edx,0xfffffff0
c001a160:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a164:	c3                   	ret    
c001a165:	90                   	nop

c001a166 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a166:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a16a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a16e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a172:	f6 c2 01             	test   dl,0x1
c001a175:	74 07                	je     c001a17e <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a177:	83 e2 fc             	and    edx,0xfffffffc
c001a17a:	01 ca                	add    edx,ecx
c001a17c:	ef                   	out    dx,eax
c001a17d:	c3                   	ret    
c001a17e:	83 e2 f0             	and    edx,0xfffffff0
c001a181:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a184:	c3                   	ret    
c001a185:	90                   	nop

c001a186 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a186:	55                   	push   ebp
c001a187:	57                   	push   edi
c001a188:	56                   	push   esi
c001a189:	53                   	push   ebx
c001a18a:	83 ec 0c             	sub    esp,0xc
c001a18d:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a192:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a196:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a19a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a19e:	83 fe 07             	cmp    esi,0x7
c001a1a1:	76 10                	jbe    c001a1b3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a1a3:	83 ec 0c             	sub    esp,0xc
c001a1a6:	68 9f 19 02 c0       	push   0xc002199f
c001a1ab:	e8 89 66 ff ff       	call   c0010839 <KePanic(char const*)>
c001a1b0:	83 c4 10             	add    esp,0x10
c001a1b3:	0f b6 db             	movzx  ebx,bl
c001a1b6:	83 fb 0f             	cmp    ebx,0xf
c001a1b9:	76 10                	jbe    c001a1cb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a1bb:	83 ec 0c             	sub    esp,0xc
c001a1be:	68 cf 19 02 c0       	push   0xc00219cf
c001a1c3:	e8 71 66 ff ff       	call   c0010839 <KePanic(char const*)>
c001a1c8:	83 c4 10             	add    esp,0x10
c001a1cb:	8d 04 36             	lea    eax,[esi+esi*1]
c001a1ce:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a1d3:	83 c8 f0             	or     eax,0xfffffff0
c001a1d6:	ee                   	out    dx,al
c001a1d7:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a1dc:	89 e8                	mov    eax,ebp
c001a1de:	ee                   	out    dx,al
c001a1df:	89 f9                	mov    ecx,edi
c001a1e1:	89 d8                	mov    eax,ebx
c001a1e3:	0f b6 d9             	movzx  ebx,cl
c001a1e6:	83 c4 0c             	add    esp,0xc
c001a1e9:	c1 e0 08             	shl    eax,0x8
c001a1ec:	83 e3 fc             	and    ebx,0xfffffffc
c001a1ef:	09 d8                	or     eax,ebx
c001a1f1:	5b                   	pop    ebx
c001a1f2:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a1f7:	5e                   	pop    esi
c001a1f8:	5f                   	pop    edi
c001a1f9:	5d                   	pop    ebp
c001a1fa:	c3                   	ret    
c001a1fb:	90                   	nop

c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a1fc:	57                   	push   edi
c001a1fd:	56                   	push   esi
c001a1fe:	53                   	push   ebx
c001a1ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a203:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a207:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a20b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a20f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a215:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a219:	83 ff 01             	cmp    edi,0x1
c001a21c:	75 3f                	jne    c001a25d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a21e:	89 de                	mov    esi,ebx
c001a220:	0f b6 c0             	movzx  eax,al
c001a223:	c1 e0 10             	shl    eax,0x10
c001a226:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a22c:	0f b6 c9             	movzx  ecx,cl
c001a22f:	09 f0                	or     eax,esi
c001a231:	c1 e1 08             	shl    ecx,0x8
c001a234:	0f b6 d2             	movzx  edx,dl
c001a237:	c1 e2 0b             	shl    edx,0xb
c001a23a:	09 c8                	or     eax,ecx
c001a23c:	09 d0                	or     eax,edx
c001a23e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a243:	0d 00 00 00 80       	or     eax,0x80000000
c001a248:	ef                   	out    dx,eax
c001a249:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a24e:	ed                   	in     eax,dx
c001a24f:	83 e3 02             	and    ebx,0x2
c001a252:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a259:	d3 e8                	shr    eax,cl
c001a25b:	eb 44                	jmp    c001a2a1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a25d:	83 ff 02             	cmp    edi,0x2
c001a260:	75 2d                	jne    c001a28f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a262:	83 ec 0c             	sub    esp,0xc
c001a265:	0f b6 fb             	movzx  edi,bl
c001a268:	57                   	push   edi
c001a269:	0f b6 c9             	movzx  ecx,cl
c001a26c:	51                   	push   ecx
c001a26d:	0f b6 d2             	movzx  edx,dl
c001a270:	52                   	push   edx
c001a271:	0f b6 c0             	movzx  eax,al
c001a274:	50                   	push   eax
c001a275:	56                   	push   esi
c001a276:	e8 0b ff ff ff       	call   c001a186 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a27b:	89 c2                	mov    edx,eax
c001a27d:	ed                   	in     eax,dx
c001a27e:	83 e3 02             	and    ebx,0x2
c001a281:	83 c4 20             	add    esp,0x20
c001a284:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a28b:	d3 e8                	shr    eax,cl
c001a28d:	eb 12                	jmp    c001a2a1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a28f:	83 ec 0c             	sub    esp,0xc
c001a292:	68 ff 19 02 c0       	push   0xc00219ff
c001a297:	e8 9d 65 ff ff       	call   c0010839 <KePanic(char const*)>
c001a29c:	83 c4 10             	add    esp,0x10
c001a29f:	31 c0                	xor    eax,eax
c001a2a1:	5b                   	pop    ebx
c001a2a2:	5e                   	pop    esi
c001a2a3:	5f                   	pop    edi
c001a2a4:	c3                   	ret    
c001a2a5:	90                   	nop

c001a2a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a2a6:	83 ec 18             	sub    esp,0x18
c001a2a9:	6a 00                	push   0x0
c001a2ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2b0:	50                   	push   eax
c001a2b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2b6:	50                   	push   eax
c001a2b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2bc:	50                   	push   eax
c001a2bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2c1:	e8 36 ff ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2c6:	83 c4 2c             	add    esp,0x2c
c001a2c9:	c3                   	ret    

c001a2ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a2ca:	83 ec 18             	sub    esp,0x18
c001a2cd:	6a 0e                	push   0xe
c001a2cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2d4:	50                   	push   eax
c001a2d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2da:	50                   	push   eax
c001a2db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2e0:	50                   	push   eax
c001a2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2e5:	e8 12 ff ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2ea:	83 c4 2c             	add    esp,0x2c
c001a2ed:	0f b6 c0             	movzx  eax,al
c001a2f0:	c3                   	ret    
c001a2f1:	90                   	nop

c001a2f2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a2f2:	55                   	push   ebp
c001a2f3:	57                   	push   edi
c001a2f4:	56                   	push   esi
c001a2f5:	53                   	push   ebx
c001a2f6:	83 ec 18             	sub    esp,0x18
c001a2f9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a2fe:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a303:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a308:	6a 0a                	push   0xa
c001a30a:	56                   	push   esi
c001a30b:	55                   	push   ebp
c001a30c:	57                   	push   edi
c001a30d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a311:	e8 e6 fe ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a316:	83 c4 14             	add    esp,0x14
c001a319:	6a 0a                	push   0xa
c001a31b:	56                   	push   esi
c001a31c:	55                   	push   ebp
c001a31d:	57                   	push   edi
c001a31e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a322:	89 c3                	mov    ebx,eax
c001a324:	0f b6 db             	movzx  ebx,bl
c001a327:	e8 d0 fe ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a32c:	83 c4 2c             	add    esp,0x2c
c001a32f:	25 00 ff 00 00       	and    eax,0xff00
c001a334:	09 d8                	or     eax,ebx
c001a336:	5b                   	pop    ebx
c001a337:	5e                   	pop    esi
c001a338:	5f                   	pop    edi
c001a339:	5d                   	pop    ebp
c001a33a:	c3                   	ret    
c001a33b:	90                   	nop

c001a33c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a33c:	83 ec 18             	sub    esp,0x18
c001a33f:	6a 08                	push   0x8
c001a341:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a346:	50                   	push   eax
c001a347:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a34c:	50                   	push   eax
c001a34d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a352:	50                   	push   eax
c001a353:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a357:	e8 a0 fe ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a35c:	83 c4 2c             	add    esp,0x2c
c001a35f:	0f b6 c4             	movzx  eax,ah
c001a362:	c3                   	ret    
c001a363:	90                   	nop

c001a364 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a364:	83 ec 18             	sub    esp,0x18
c001a367:	6a 08                	push   0x8
c001a369:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a36e:	50                   	push   eax
c001a36f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a374:	50                   	push   eax
c001a375:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a37a:	50                   	push   eax
c001a37b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a37f:	e8 78 fe ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a384:	83 c4 2c             	add    esp,0x2c
c001a387:	c3                   	ret    

c001a388 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a388:	83 ec 18             	sub    esp,0x18
c001a38b:	6a 3c                	push   0x3c
c001a38d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a392:	50                   	push   eax
c001a393:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a398:	50                   	push   eax
c001a399:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a39e:	50                   	push   eax
c001a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3a3:	e8 54 fe ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3a8:	83 c4 2c             	add    esp,0x2c
c001a3ab:	c3                   	ret    

c001a3ac <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a3ac:	83 ec 18             	sub    esp,0x18
c001a3af:	6a 18                	push   0x18
c001a3b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3b6:	50                   	push   eax
c001a3b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3bc:	50                   	push   eax
c001a3bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3c2:	50                   	push   eax
c001a3c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3c7:	e8 30 fe ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3cc:	83 c4 2c             	add    esp,0x2c
c001a3cf:	0f b6 c4             	movzx  eax,ah
c001a3d2:	c3                   	ret    
c001a3d3:	90                   	nop

c001a3d4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a3d4:	55                   	push   ebp
c001a3d5:	57                   	push   edi
c001a3d6:	56                   	push   esi
c001a3d7:	53                   	push   ebx
c001a3d8:	83 ec 28             	sub    esp,0x28
c001a3db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a3df:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a3e4:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a3e9:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a3ee:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a3f5:	8d 43 12             	lea    eax,[ebx+0x12]
c001a3f8:	83 c3 10             	add    ebx,0x10
c001a3fb:	0f b6 c0             	movzx  eax,al
c001a3fe:	0f b6 db             	movzx  ebx,bl
c001a401:	50                   	push   eax
c001a402:	51                   	push   ecx
c001a403:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a407:	57                   	push   edi
c001a408:	55                   	push   ebp
c001a409:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a40d:	e8 ea fd ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a412:	83 c4 14             	add    esp,0x14
c001a415:	53                   	push   ebx
c001a416:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a41a:	51                   	push   ecx
c001a41b:	89 c6                	mov    esi,eax
c001a41d:	57                   	push   edi
c001a41e:	55                   	push   ebp
c001a41f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a423:	c1 e6 10             	shl    esi,0x10
c001a426:	e8 d1 fd ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a42b:	83 c4 3c             	add    esp,0x3c
c001a42e:	5b                   	pop    ebx
c001a42f:	0f b7 c0             	movzx  eax,ax
c001a432:	09 f0                	or     eax,esi
c001a434:	5e                   	pop    esi
c001a435:	5f                   	pop    edi
c001a436:	5d                   	pop    ebp
c001a437:	c3                   	ret    

c001a438 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a438:	55                   	push   ebp
c001a439:	57                   	push   edi
c001a43a:	56                   	push   esi
c001a43b:	53                   	push   ebx
c001a43c:	83 ec 0c             	sub    esp,0xc
c001a43f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a443:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a447:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a44b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a44f:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a455:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a459:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a45d:	83 f9 01             	cmp    ecx,0x1
c001a460:	75 5d                	jne    c001a4bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a462:	0f b6 c8             	movzx  ecx,al
c001a465:	89 f0                	mov    eax,esi
c001a467:	25 fc 00 00 00       	and    eax,0xfc
c001a46c:	0f b6 d2             	movzx  edx,dl
c001a46f:	c1 e1 10             	shl    ecx,0x10
c001a472:	c1 e2 0b             	shl    edx,0xb
c001a475:	09 c1                	or     ecx,eax
c001a477:	89 f8                	mov    eax,edi
c001a479:	0f b6 f8             	movzx  edi,al
c001a47c:	c1 e7 08             	shl    edi,0x8
c001a47f:	09 f9                	or     ecx,edi
c001a481:	09 d1                	or     ecx,edx
c001a483:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a488:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a48e:	89 c8                	mov    eax,ecx
c001a490:	ef                   	out    dx,eax
c001a491:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a496:	ed                   	in     eax,dx
c001a497:	83 e6 02             	and    esi,0x2
c001a49a:	0f b7 db             	movzx  ebx,bx
c001a49d:	74 0a                	je     c001a4a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a49f:	c1 e3 10             	shl    ebx,0x10
c001a4a2:	0f b7 d0             	movzx  edx,ax
c001a4a5:	09 d3                	or     ebx,edx
c001a4a7:	eb 05                	jmp    c001a4ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a4a9:	66 31 c0             	xor    ax,ax
c001a4ac:	09 c3                	or     ebx,eax
c001a4ae:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a4b3:	89 c8                	mov    eax,ecx
c001a4b5:	ef                   	out    dx,eax
c001a4b6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a4bb:	89 d8                	mov    eax,ebx
c001a4bd:	eb 41                	jmp    c001a500 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a4bf:	83 f9 02             	cmp    ecx,0x2
c001a4c2:	75 45                	jne    c001a509 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a4c4:	89 f1                	mov    ecx,esi
c001a4c6:	83 ec 0c             	sub    esp,0xc
c001a4c9:	0f b6 f1             	movzx  esi,cl
c001a4cc:	89 f9                	mov    ecx,edi
c001a4ce:	56                   	push   esi
c001a4cf:	0f b6 f9             	movzx  edi,cl
c001a4d2:	57                   	push   edi
c001a4d3:	0f b6 d2             	movzx  edx,dl
c001a4d6:	52                   	push   edx
c001a4d7:	0f b6 c0             	movzx  eax,al
c001a4da:	50                   	push   eax
c001a4db:	55                   	push   ebp
c001a4dc:	e8 a5 fc ff ff       	call   c001a186 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4e1:	89 c2                	mov    edx,eax
c001a4e3:	ed                   	in     eax,dx
c001a4e4:	83 c4 20             	add    esp,0x20
c001a4e7:	f6 c2 02             	test   dl,0x2
c001a4ea:	0f b7 db             	movzx  ebx,bx
c001a4ed:	74 0c                	je     c001a4fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a4ef:	0f b7 c8             	movzx  ecx,ax
c001a4f2:	89 d8                	mov    eax,ebx
c001a4f4:	c1 e0 10             	shl    eax,0x10
c001a4f7:	09 c8                	or     eax,ecx
c001a4f9:	eb 05                	jmp    c001a500 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a4fb:	66 31 c0             	xor    ax,ax
c001a4fe:	09 d8                	or     eax,ebx
c001a500:	ef                   	out    dx,eax
c001a501:	83 c4 0c             	add    esp,0xc
c001a504:	5b                   	pop    ebx
c001a505:	5e                   	pop    esi
c001a506:	5f                   	pop    edi
c001a507:	5d                   	pop    ebp
c001a508:	c3                   	ret    
c001a509:	c7 44 24 20 ff 19 02 c0 	mov    DWORD PTR [esp+0x20],0xc00219ff
c001a511:	83 c4 0c             	add    esp,0xc
c001a514:	5b                   	pop    ebx
c001a515:	5e                   	pop    esi
c001a516:	5f                   	pop    edi
c001a517:	5d                   	pop    ebp
c001a518:	e9 1c 63 ff ff       	jmp    c0010839 <KePanic(char const*)>
c001a51d:	90                   	nop

c001a51e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a51e:	55                   	push   ebp
c001a51f:	57                   	push   edi
c001a520:	56                   	push   esi
c001a521:	53                   	push   ebx
c001a522:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a528:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a52f:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a536:	0f 85 bd 00 00 00    	jne    c001a5f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a53c:	83 ec 0c             	sub    esp,0xc
c001a53f:	68 14 01 00 00       	push   0x114
c001a544:	e8 82 d5 fe ff       	call   c0007acb <malloc>
c001a549:	83 c4 0c             	add    esp,0xc
c001a54c:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a552:	68 05 1a 02 c0       	push   0xc0021a05
c001a557:	50                   	push   eax
c001a558:	89 c3                	mov    ebx,eax
c001a55a:	e8 b9 09 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c001a55f:	83 c4 10             	add    esp,0x10
c001a562:	85 db                	test   ebx,ebx
c001a564:	0f 84 6b 02 00 00    	je     c001a7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a56a:	57                   	push   edi
c001a56b:	57                   	push   edi
c001a56c:	6a 01                	push   0x1
c001a56e:	53                   	push   ebx
c001a56f:	e8 60 0a ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c001a574:	83 c4 10             	add    esp,0x10
c001a577:	85 c0                	test   eax,eax
c001a579:	0f 85 56 02 00 00    	jne    c001a7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a57f:	52                   	push   edx
c001a580:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a584:	50                   	push   eax
c001a585:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a589:	50                   	push   eax
c001a58a:	53                   	push   ebx
c001a58b:	e8 f0 0c ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c001a590:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a594:	40                   	inc    eax
c001a595:	89 04 24             	mov    DWORD PTR [esp],eax
c001a598:	e8 2e d5 fe ff       	call   c0007acb <malloc>
c001a59d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a5a1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a5a5:	59                   	pop    ecx
c001a5a6:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a5ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a5ad:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a5b1:	51                   	push   ecx
c001a5b2:	50                   	push   eax
c001a5b3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a5b7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a5bb:	53                   	push   ebx
c001a5bc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a5bf:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a5c3:	83 c4 20             	add    esp,0x20
c001a5c6:	89 c8                	mov    eax,ecx
c001a5c8:	99                   	cdq    
c001a5c9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a5cd:	0f 85 02 02 00 00    	jne    c001a7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5d3:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a5d7:	0f 85 f8 01 00 00    	jne    c001a7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5dd:	83 ec 0c             	sub    esp,0xc
c001a5e0:	53                   	push   ebx
c001a5e1:	e8 4c 0a ff ff       	call   c000b032 <File::close()>
c001a5e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5ea:	83 c4 10             	add    esp,0x10
c001a5ed:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a5f4:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a5f9:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a601:	31 c9                	xor    ecx,ecx
c001a603:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a60a:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a610:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a617:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a61d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a622:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a62a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a62f:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a63b:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a643:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a647:	39 cd                	cmp    ebp,ecx
c001a649:	0f 8e 86 01 00 00    	jle    c001a7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a64f:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001a652:	d4 40                	aam    0x40
c001a654:	d5 39                	aad    0x39
c001a656:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a65a:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001a65e:	d4 40                	aam    0x40
c001a660:	d5 39                	aad    0x39
c001a662:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a666:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001a66a:	d4 40                	aam    0x40
c001a66c:	d5 39                	aad    0x39
c001a66e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a672:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001a676:	d4 40                	aam    0x40
c001a678:	d5 39                	aad    0x39
c001a67a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a67e:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001a682:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a686:	3c 56                	cmp    al,0x56
c001a688:	74 47                	je     c001a6d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001a68a:	d4 40                	aam    0x40
c001a68c:	d5 39                	aad    0x39
c001a68e:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a691:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001a695:	0f b6 db             	movzx  ebx,bl
c001a698:	c1 e3 04             	shl    ebx,0x4
c001a69b:	d4 40                	aam    0x40
c001a69d:	d5 39                	aad    0x39
c001a69f:	83 e8 30             	sub    eax,0x30
c001a6a2:	0f b6 c0             	movzx  eax,al
c001a6a5:	09 c3                	or     ebx,eax
c001a6a7:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001a6ab:	c1 e3 04             	shl    ebx,0x4
c001a6ae:	d4 40                	aam    0x40
c001a6b0:	d5 39                	aad    0x39
c001a6b2:	83 e8 30             	sub    eax,0x30
c001a6b5:	0f b6 c0             	movzx  eax,al
c001a6b8:	09 c3                	or     ebx,eax
c001a6ba:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001a6be:	c1 e3 04             	shl    ebx,0x4
c001a6c1:	d4 40                	aam    0x40
c001a6c3:	d5 39                	aad    0x39
c001a6c5:	83 e8 30             	sub    eax,0x30
c001a6c8:	0f b6 c0             	movzx  eax,al
c001a6cb:	09 c3                	or     ebx,eax
c001a6cd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a6d1:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001a6d5:	80 fb 58             	cmp    bl,0x58
c001a6d8:	74 49                	je     c001a723 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001a6da:	88 d8                	mov    al,bl
c001a6dc:	d4 40                	aam    0x40
c001a6de:	d5 39                	aad    0x39
c001a6e0:	83 e8 30             	sub    eax,0x30
c001a6e3:	0f b6 f8             	movzx  edi,al
c001a6e6:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001a6ea:	c1 e7 04             	shl    edi,0x4
c001a6ed:	d4 40                	aam    0x40
c001a6ef:	d5 39                	aad    0x39
c001a6f1:	83 e8 30             	sub    eax,0x30
c001a6f4:	0f b6 c0             	movzx  eax,al
c001a6f7:	09 c7                	or     edi,eax
c001a6f9:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001a6fd:	c1 e7 04             	shl    edi,0x4
c001a700:	d4 40                	aam    0x40
c001a702:	d5 39                	aad    0x39
c001a704:	83 e8 30             	sub    eax,0x30
c001a707:	0f b6 c0             	movzx  eax,al
c001a70a:	09 c7                	or     edi,eax
c001a70c:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001a710:	c1 e7 04             	shl    edi,0x4
c001a713:	d4 40                	aam    0x40
c001a715:	d5 39                	aad    0x39
c001a717:	83 e8 30             	sub    eax,0x30
c001a71a:	0f b6 c0             	movzx  eax,al
c001a71d:	09 c7                	or     edi,eax
c001a71f:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001a723:	8d 41 10             	lea    eax,[ecx+0x10]
c001a726:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a72a:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001a72e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a732:	83 f9 0a             	cmp    ecx,0xa
c001a735:	74 07                	je     c001a73e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001a737:	47                   	inc    edi
c001a738:	39 c5                	cmp    ebp,eax
c001a73a:	75 16                	jne    c001a752 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001a73c:	89 e8                	mov    eax,ebp
c001a73e:	83 f9 0a             	cmp    ecx,0xa
c001a741:	0f 94 c1             	sete   cl
c001a744:	0f b6 c9             	movzx  ecx,cl
c001a747:	01 c1                	add    ecx,eax
c001a749:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a74e:	75 0f                	jne    c001a75f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a750:	eb 1c                	jmp    c001a76e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001a752:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a755:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001a759:	40                   	inc    eax
c001a75a:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001a75d:	eb cb                	jmp    c001a72a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001a75f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a763:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a768:	0f 85 d9 fe ff ff    	jne    c001a647 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a76e:	80 fb 58             	cmp    bl,0x58
c001a771:	74 10                	je     c001a783 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001a773:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a778:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001a77d:	0f 85 c4 fe ff ff    	jne    c001a647 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a783:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a787:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a78b:	83 e8 30             	sub    eax,0x30
c001a78e:	c1 e0 04             	shl    eax,0x4
c001a791:	83 eb 30             	sub    ebx,0x30
c001a794:	09 d8                	or     eax,ebx
c001a796:	0f b6 c0             	movzx  eax,al
c001a799:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a79d:	0f 85 a4 fe ff ff    	jne    c001a647 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7a7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a7ab:	83 e8 30             	sub    eax,0x30
c001a7ae:	c1 e0 04             	shl    eax,0x4
c001a7b1:	83 eb 30             	sub    ebx,0x30
c001a7b4:	09 d8                	or     eax,ebx
c001a7b6:	0f b6 c0             	movzx  eax,al
c001a7b9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a7bd:	0f 85 84 fe ff ff    	jne    c001a647 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a7c3:	50                   	push   eax
c001a7c4:	50                   	push   eax
c001a7c5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a7c9:	50                   	push   eax
c001a7ca:	56                   	push   esi
c001a7cb:	e8 80 5e fe ff       	call   c0000650 <strcpy>
c001a7d0:	83 c4 10             	add    esp,0x10
c001a7d3:	eb 05                	jmp    c001a7da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001a7d5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7d8:	31 f6                	xor    esi,esi
c001a7da:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a7e0:	89 f0                	mov    eax,esi
c001a7e2:	5b                   	pop    ebx
c001a7e3:	5e                   	pop    esi
c001a7e4:	5f                   	pop    edi
c001a7e5:	5d                   	pop    ebp
c001a7e6:	c3                   	ret    
c001a7e7:	90                   	nop

c001a7e8 <PCI::checkBus(unsigned char)>:
c001a7e8:	56                   	push   esi
c001a7e9:	53                   	push   ebx
c001a7ea:	31 db                	xor    ebx,ebx
c001a7ec:	51                   	push   ecx
c001a7ed:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a7f2:	52                   	push   edx
c001a7f3:	53                   	push   ebx
c001a7f4:	43                   	inc    ebx
c001a7f5:	56                   	push   esi
c001a7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7fa:	e8 0f 03 00 00       	call   c001ab0e <PCI::checkDevice(unsigned char, unsigned char)>
c001a7ff:	83 c4 10             	add    esp,0x10
c001a802:	83 fb 20             	cmp    ebx,0x20
c001a805:	75 eb                	jne    c001a7f2 <PCI::checkBus(unsigned char)+0xa>
c001a807:	58                   	pop    eax
c001a808:	5b                   	pop    ebx
c001a809:	5e                   	pop    esi
c001a80a:	c3                   	ret    
c001a80b:	90                   	nop

c001a80c <PCI::foundDevice(PCIDeviceInfo)>:
c001a80c:	55                   	push   ebp
c001a80d:	57                   	push   edi
c001a80e:	56                   	push   esi
c001a80f:	53                   	push   ebx
c001a810:	83 ec 1c             	sub    esp,0x1c
c001a813:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a818:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a81c:	3d ff ff 00 00       	cmp    eax,0xffff
c001a821:	0f 84 63 01 00 00    	je     c001a98a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a827:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a82c:	66 3d 06 04          	cmp    ax,0x406
c001a830:	75 2c                	jne    c001a85e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a832:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a837:	50                   	push   eax
c001a838:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a83d:	50                   	push   eax
c001a83e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a843:	50                   	push   eax
c001a844:	53                   	push   ebx
c001a845:	e8 62 fb ff ff       	call   c001a3ac <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a84a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a84e:	0f b6 c0             	movzx  eax,al
c001a851:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a855:	83 c4 2c             	add    esp,0x2c
c001a858:	5b                   	pop    ebx
c001a859:	5e                   	pop    esi
c001a85a:	5f                   	pop    edi
c001a85b:	5d                   	pop    ebp
c001a85c:	eb 8a                	jmp    c001a7e8 <PCI::checkBus(unsigned char)>
c001a85e:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001a863:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a869:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a86d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a871:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a875:	85 d2                	test   edx,edx
c001a877:	74 34                	je     c001a8ad <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a879:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a87c:	85 c9                	test   ecx,ecx
c001a87e:	74 29                	je     c001a8a9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a880:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001a886:	31 f5                	xor    ebp,esi
c001a888:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001a88e:	75 19                	jne    c001a8a9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a890:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001a896:	75 11                	jne    c001a8a9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a898:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a89f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a8a3:	0f 84 e1 00 00 00    	je     c001a98a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001a8a9:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8ab:	eb c8                	jmp    c001a875 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a8ad:	3d 01 06 00 00       	cmp    eax,0x601
c001a8b2:	75 19                	jne    c001a8cd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a8b4:	83 ec 0c             	sub    esp,0xc
c001a8b7:	68 64 01 00 00       	push   0x164
c001a8bc:	e8 0a d2 fe ff       	call   c0007acb <malloc>
c001a8c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8c4:	89 c5                	mov    ebp,eax
c001a8c6:	e8 ab 0e 00 00       	call   c001b776 <SATABus::SATABus()>
c001a8cb:	eb 1e                	jmp    c001a8eb <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a8cd:	3d 01 01 00 00       	cmp    eax,0x101
c001a8d2:	75 62                	jne    c001a936 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001a8d4:	83 ec 0c             	sub    esp,0xc
c001a8d7:	68 70 02 00 00       	push   0x270
c001a8dc:	e8 ea d1 fe ff       	call   c0007acb <malloc>
c001a8e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8e4:	89 c5                	mov    ebp,eax
c001a8e6:	e8 f3 02 00 00       	call   c001abde <IDE::IDE()>
c001a8eb:	58                   	pop    eax
c001a8ec:	5a                   	pop    edx
c001a8ed:	55                   	push   ebp
c001a8ee:	53                   	push   ebx
c001a8ef:	e8 dc 14 ff ff       	call   c000bdd0 <Device::addChild(Device*)>
c001a8f4:	83 ec 1c             	sub    esp,0x1c
c001a8f7:	b9 09 00 00 00       	mov    ecx,0x9
c001a8fc:	fc                   	cld    
c001a8fd:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a901:	89 e7                	mov    edi,esp
c001a903:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a905:	55                   	push   ebp
c001a906:	e8 0b 14 ff ff       	call   c000bd16 <Device::preOpenPCI(PCIDeviceInfo)>
c001a90b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a90e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a912:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a91a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a922:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a92a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a92d:	83 c4 4c             	add    esp,0x4c
c001a930:	5b                   	pop    ebx
c001a931:	5e                   	pop    esi
c001a932:	5f                   	pop    edi
c001a933:	5d                   	pop    ebp
c001a934:	ff e0                	jmp    eax
c001a936:	83 ec 0c             	sub    esp,0xc
c001a939:	68 58 01 00 00       	push   0x158
c001a93e:	e8 88 d1 fe ff       	call   c0007acb <malloc>
c001a943:	5a                   	pop    edx
c001a944:	59                   	pop    ecx
c001a945:	68 1e 1a 02 c0       	push   0xc0021a1e
c001a94a:	50                   	push   eax
c001a94b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a94f:	e8 1a 17 ff ff       	call   c000c06e <DriverlessDevice::DriverlessDevice(char const*)>
c001a954:	5e                   	pop    esi
c001a955:	5f                   	pop    edi
c001a956:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a95a:	50                   	push   eax
c001a95b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a95f:	53                   	push   ebx
c001a960:	e8 6b 14 ff ff       	call   c000bdd0 <Device::addChild(Device*)>
c001a965:	83 c4 10             	add    esp,0x10
c001a968:	b9 09 00 00 00       	mov    ecx,0x9
c001a96d:	fc                   	cld    
c001a96e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a972:	89 fe                	mov    esi,edi
c001a974:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a97a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a97e:	83 c4 1c             	add    esp,0x1c
c001a981:	5b                   	pop    ebx
c001a982:	5e                   	pop    esi
c001a983:	5f                   	pop    edi
c001a984:	5d                   	pop    ebp
c001a985:	e9 8c 13 ff ff       	jmp    c000bd16 <Device::preOpenPCI(PCIDeviceInfo)>
c001a98a:	83 c4 1c             	add    esp,0x1c
c001a98d:	5b                   	pop    ebx
c001a98e:	5e                   	pop    esi
c001a98f:	5f                   	pop    edi
c001a990:	5d                   	pop    ebp
c001a991:	c3                   	ret    

c001a992 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a992:	55                   	push   ebp
c001a993:	57                   	push   edi
c001a994:	56                   	push   esi
c001a995:	53                   	push   ebx
c001a996:	83 ec 68             	sub    esp,0x68
c001a999:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9a0:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a9a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a9a8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9af:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a9b4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9bf:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a9c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9c8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a9cd:	6a 0c                	push   0xc
c001a9cf:	57                   	push   edi
c001a9d0:	53                   	push   ebx
c001a9d1:	56                   	push   esi
c001a9d2:	55                   	push   ebp
c001a9d3:	e8 24 f8 ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9d8:	83 c4 20             	add    esp,0x20
c001a9db:	57                   	push   edi
c001a9dc:	53                   	push   ebx
c001a9dd:	56                   	push   esi
c001a9de:	55                   	push   ebp
c001a9df:	e8 0e f9 ff ff       	call   c001a2f2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a9e4:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a9e9:	57                   	push   edi
c001a9ea:	53                   	push   ebx
c001a9eb:	56                   	push   esi
c001a9ec:	55                   	push   ebp
c001a9ed:	e8 96 f9 ff ff       	call   c001a388 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a9f2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a9f6:	83 c4 14             	add    esp,0x14
c001a9f9:	6a 3c                	push   0x3c
c001a9fb:	57                   	push   edi
c001a9fc:	53                   	push   ebx
c001a9fd:	56                   	push   esi
c001a9fe:	55                   	push   ebp
c001a9ff:	e8 f8 f7 ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa04:	0f b6 c4             	movzx  eax,ah
c001aa07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa0b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001aa0f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001aa13:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001aa18:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001aa1e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001aa24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa28:	83 c4 20             	add    esp,0x20
c001aa2b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001aa30:	74 30                	je     c001aa62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa32:	31 c0                	xor    eax,eax
c001aa34:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aa38:	7e 28                	jle    c001aa62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa3a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aa42:	39 cb                	cmp    ebx,ecx
c001aa44:	75 19                	jne    c001aa5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa46:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aa4e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aa52:	75 0b                	jne    c001aa5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa54:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aa5b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa5f:	40                   	inc    eax
c001aa60:	eb d2                	jmp    c001aa34 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aa62:	31 d2                	xor    edx,edx
c001aa64:	83 ec 0c             	sub    esp,0xc
c001aa67:	57                   	push   edi
c001aa68:	53                   	push   ebx
c001aa69:	56                   	push   esi
c001aa6a:	52                   	push   edx
c001aa6b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa6f:	55                   	push   ebp
c001aa70:	e8 5f f9 ff ff       	call   c001a3d4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa79:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aa7d:	42                   	inc    edx
c001aa7e:	83 c4 20             	add    esp,0x20
c001aa81:	83 fa 06             	cmp    edx,0x6
c001aa84:	75 de                	jne    c001aa64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aa86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa8a:	83 ec 0c             	sub    esp,0xc
c001aa8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa91:	c1 e2 08             	shl    edx,0x8
c001aa94:	0f b6 c4             	movzx  eax,ah
c001aa97:	09 d0                	or     eax,edx
c001aa99:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aa9e:	6a 02                	push   0x2
c001aaa0:	57                   	push   edi
c001aaa1:	53                   	push   ebx
c001aaa2:	56                   	push   esi
c001aaa3:	55                   	push   ebp
c001aaa4:	e8 53 f7 ff ff       	call   c001a1fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aaa9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aaae:	83 c4 20             	add    esp,0x20
c001aab1:	57                   	push   edi
c001aab2:	53                   	push   ebx
c001aab3:	56                   	push   esi
c001aab4:	55                   	push   ebp
c001aab5:	e8 82 f8 ff ff       	call   c001a33c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aaba:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aabe:	57                   	push   edi
c001aabf:	53                   	push   ebx
c001aac0:	56                   	push   esi
c001aac1:	55                   	push   ebp
c001aac2:	e8 df f7 ff ff       	call   c001a2a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aac7:	b9 09 00 00 00       	mov    ecx,0x9
c001aacc:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aad1:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aad5:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aad9:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aadd:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aae1:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aae5:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aae9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aaed:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aaf1:	83 ec 0c             	sub    esp,0xc
c001aaf4:	fc                   	cld    
c001aaf5:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aaf9:	89 e7                	mov    edi,esp
c001aafb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aafd:	55                   	push   ebp
c001aafe:	e8 09 fd ff ff       	call   c001a80c <PCI::foundDevice(PCIDeviceInfo)>
c001ab03:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ab09:	5b                   	pop    ebx
c001ab0a:	5e                   	pop    esi
c001ab0b:	5f                   	pop    edi
c001ab0c:	5d                   	pop    ebp
c001ab0d:	c3                   	ret    

c001ab0e <PCI::checkDevice(unsigned char, unsigned char)>:
c001ab0e:	55                   	push   ebp
c001ab0f:	57                   	push   edi
c001ab10:	56                   	push   esi
c001ab11:	53                   	push   ebx
c001ab12:	83 ec 0c             	sub    esp,0xc
c001ab15:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ab1a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ab1f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ab23:	6a 00                	push   0x0
c001ab25:	56                   	push   esi
c001ab26:	57                   	push   edi
c001ab27:	55                   	push   ebp
c001ab28:	e8 79 f7 ff ff       	call   c001a2a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab2d:	6a 00                	push   0x0
c001ab2f:	56                   	push   esi
c001ab30:	57                   	push   edi
c001ab31:	55                   	push   ebp
c001ab32:	e8 5b fe ff ff       	call   c001a992 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab37:	83 c4 20             	add    esp,0x20
c001ab3a:	6a 00                	push   0x0
c001ab3c:	56                   	push   esi
c001ab3d:	57                   	push   edi
c001ab3e:	55                   	push   ebp
c001ab3f:	e8 86 f7 ff ff       	call   c001a2ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab44:	83 c4 10             	add    esp,0x10
c001ab47:	a8 80                	test   al,0x80
c001ab49:	74 2d                	je     c001ab78 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ab4b:	bb 01 00 00 00       	mov    ebx,0x1
c001ab50:	53                   	push   ebx
c001ab51:	56                   	push   esi
c001ab52:	57                   	push   edi
c001ab53:	55                   	push   ebp
c001ab54:	e8 4d f7 ff ff       	call   c001a2a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab59:	83 c4 10             	add    esp,0x10
c001ab5c:	0f b7 c0             	movzx  eax,ax
c001ab5f:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab64:	74 0c                	je     c001ab72 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ab66:	53                   	push   ebx
c001ab67:	56                   	push   esi
c001ab68:	57                   	push   edi
c001ab69:	55                   	push   ebp
c001ab6a:	e8 23 fe ff ff       	call   c001a992 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab6f:	83 c4 10             	add    esp,0x10
c001ab72:	43                   	inc    ebx
c001ab73:	83 fb 08             	cmp    ebx,0x8
c001ab76:	75 d8                	jne    c001ab50 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ab78:	83 c4 0c             	add    esp,0xc
c001ab7b:	5b                   	pop    ebx
c001ab7c:	5e                   	pop    esi
c001ab7d:	5f                   	pop    edi
c001ab7e:	5d                   	pop    ebp
c001ab7f:	c3                   	ret    

c001ab80 <PCI::detect()>:
c001ab80:	56                   	push   esi
c001ab81:	53                   	push   ebx
c001ab82:	53                   	push   ebx
c001ab83:	31 db                	xor    ebx,ebx
c001ab85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab89:	6a 00                	push   0x0
c001ab8b:	6a 00                	push   0x0
c001ab8d:	6a 00                	push   0x0
c001ab8f:	56                   	push   esi
c001ab90:	e8 35 f7 ff ff       	call   c001a2ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab95:	83 c4 10             	add    esp,0x10
c001ab98:	a8 80                	test   al,0x80
c001ab9a:	75 21                	jne    c001abbd <PCI::detect()+0x3d>
c001ab9c:	51                   	push   ecx
c001ab9d:	51                   	push   ecx
c001ab9e:	6a 00                	push   0x0
c001aba0:	56                   	push   esi
c001aba1:	e8 42 fc ff ff       	call   c001a7e8 <PCI::checkBus(unsigned char)>
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	eb 2a                	jmp    c001abd5 <PCI::detect()+0x55>
c001abab:	52                   	push   edx
c001abac:	52                   	push   edx
c001abad:	53                   	push   ebx
c001abae:	43                   	inc    ebx
c001abaf:	56                   	push   esi
c001abb0:	e8 33 fc ff ff       	call   c001a7e8 <PCI::checkBus(unsigned char)>
c001abb5:	83 c4 10             	add    esp,0x10
c001abb8:	83 fb 08             	cmp    ebx,0x8
c001abbb:	74 18                	je     c001abd5 <PCI::detect()+0x55>
c001abbd:	53                   	push   ebx
c001abbe:	6a 00                	push   0x0
c001abc0:	6a 00                	push   0x0
c001abc2:	56                   	push   esi
c001abc3:	e8 de f6 ff ff       	call   c001a2a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abc8:	83 c4 10             	add    esp,0x10
c001abcb:	0f b7 c0             	movzx  eax,ax
c001abce:	3d ff ff 00 00       	cmp    eax,0xffff
c001abd3:	74 d6                	je     c001abab <PCI::detect()+0x2b>
c001abd5:	58                   	pop    eax
c001abd6:	5b                   	pop    ebx
c001abd7:	5e                   	pop    esi
c001abd8:	c3                   	ret    
c001abd9:	90                   	nop

c001abda <IDE::close(int, int, void*)>:
c001abda:	83 c8 ff             	or     eax,0xffffffff
c001abdd:	c3                   	ret    

c001abde <IDE::IDE()>:
c001abde:	83 ec 0c             	sub    esp,0xc
c001abe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe5:	83 ec 08             	sub    esp,0x8
c001abe8:	68 64 1a 02 c0       	push   0xc0021a64
c001abed:	50                   	push   eax
c001abee:	e8 21 15 ff ff       	call   c000c114 <HardDiskController::HardDiskController(char const*)>
c001abf3:	83 c4 10             	add    esp,0x10
c001abf6:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c001abfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abff:	89 10                	mov    DWORD PTR [eax],edx
c001ac01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac05:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ac0c:	90                   	nop
c001ac0d:	83 c4 0c             	add    esp,0xc
c001ac10:	c3                   	ret    
c001ac11:	90                   	nop

c001ac12 <IDE::prepareInterrupt(unsigned char)>:
c001ac12:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac17:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac1b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ac23:	c3                   	ret    

c001ac24 <selectDrive(unsigned char, unsigned char)>:
c001ac24:	c3                   	ret    
c001ac25:	90                   	nop

c001ac26 <IDE::getBase(unsigned char)>:
c001ac26:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ac2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac2f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ac37:	c3                   	ret    

c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ac38:	55                   	push   ebp
c001ac39:	57                   	push   edi
c001ac3a:	56                   	push   esi
c001ac3b:	53                   	push   ebx
c001ac3c:	83 ec 1c             	sub    esp,0x1c
c001ac3f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac43:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ac47:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ac4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac4f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ac52:	80 f9 03             	cmp    cl,0x3
c001ac55:	77 4f                	ja     c001aca6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ac57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac5b:	0f b6 f2             	movzx  esi,dl
c001ac5e:	0f b6 db             	movzx  ebx,bl
c001ac61:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ac64:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ac69:	80 ca 80             	or     dl,0x80
c001ac6c:	52                   	push   edx
c001ac6d:	6a 0c                	push   0xc
c001ac6f:	56                   	push   esi
c001ac70:	57                   	push   edi
c001ac71:	e8 c2 ff ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac76:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ac7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac7f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ac83:	ee                   	out    dx,al
c001ac84:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ac89:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ac8d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ac91:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac99:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac9d:	83 c4 2c             	add    esp,0x2c
c001aca0:	5b                   	pop    ebx
c001aca1:	5e                   	pop    esi
c001aca2:	5f                   	pop    edi
c001aca3:	5d                   	pop    ebp
c001aca4:	eb 92                	jmp    c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aca6:	0f b6 cb             	movzx  ecx,bl
c001aca9:	83 f9 07             	cmp    ecx,0x7
c001acac:	77 12                	ja     c001acc0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001acae:	0f b6 d2             	movzx  edx,dl
c001acb1:	0f b6 db             	movzx  ebx,bl
c001acb4:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001acbc:	01 da                	add    edx,ebx
c001acbe:	eb 2f                	jmp    c001acef <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001acc0:	83 f9 0d             	cmp    ecx,0xd
c001acc3:	77 13                	ja     c001acd8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001acc5:	0f b6 d2             	movzx  edx,dl
c001acc8:	0f b6 db             	movzx  ebx,bl
c001accb:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001acd2:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001acd6:	eb 17                	jmp    c001acef <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001acd8:	83 f9 15             	cmp    ecx,0x15
c001acdb:	77 13                	ja     c001acf0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001acdd:	0f b6 d2             	movzx  edx,dl
c001ace0:	0f b6 db             	movzx  ebx,bl
c001ace3:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001aceb:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001acef:	ee                   	out    dx,al
c001acf0:	83 c4 1c             	add    esp,0x1c
c001acf3:	5b                   	pop    ebx
c001acf4:	5e                   	pop    esi
c001acf5:	5f                   	pop    edi
c001acf6:	5d                   	pop    ebp
c001acf7:	c3                   	ret    

c001acf8 <IDE::read(unsigned char, unsigned char)>:
c001acf8:	57                   	push   edi
c001acf9:	56                   	push   esi
c001acfa:	53                   	push   ebx
c001acfb:	83 ec 10             	sub    esp,0x10
c001acfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad06:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ad0a:	8d 42 f8             	lea    eax,[edx-0x8]
c001ad0d:	3c 03                	cmp    al,0x3
c001ad0f:	77 48                	ja     c001ad59 <IDE::read(unsigned char, unsigned char)+0x61>
c001ad11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad15:	0f b6 f1             	movzx  esi,cl
c001ad18:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ad1b:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ad20:	0c 80                	or     al,0x80
c001ad22:	50                   	push   eax
c001ad23:	6a 0c                	push   0xc
c001ad25:	56                   	push   esi
c001ad26:	53                   	push   ebx
c001ad27:	e8 0c ff ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad30:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001ad35:	0f b6 d2             	movzx  edx,dl
c001ad38:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ad3c:	ec                   	in     al,dx
c001ad3d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ad41:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001ad46:	52                   	push   edx
c001ad47:	6a 0c                	push   0xc
c001ad49:	56                   	push   esi
c001ad4a:	53                   	push   ebx
c001ad4b:	e8 e8 fe ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad50:	83 c4 20             	add    esp,0x20
c001ad53:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad57:	eb 4c                	jmp    c001ada5 <IDE::read(unsigned char, unsigned char)+0xad>
c001ad59:	0f b6 f2             	movzx  esi,dl
c001ad5c:	83 fe 07             	cmp    esi,0x7
c001ad5f:	77 12                	ja     c001ad73 <IDE::read(unsigned char, unsigned char)+0x7b>
c001ad61:	0f b6 c9             	movzx  ecx,cl
c001ad64:	0f b6 d2             	movzx  edx,dl
c001ad67:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ad6f:	01 c2                	add    edx,eax
c001ad71:	eb 31                	jmp    c001ada4 <IDE::read(unsigned char, unsigned char)+0xac>
c001ad73:	83 fe 0d             	cmp    esi,0xd
c001ad76:	77 13                	ja     c001ad8b <IDE::read(unsigned char, unsigned char)+0x93>
c001ad78:	0f b6 c9             	movzx  ecx,cl
c001ad7b:	0f b6 d2             	movzx  edx,dl
c001ad7e:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001ad85:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ad89:	eb 19                	jmp    c001ada4 <IDE::read(unsigned char, unsigned char)+0xac>
c001ad8b:	31 c0                	xor    eax,eax
c001ad8d:	83 fe 15             	cmp    esi,0x15
c001ad90:	77 13                	ja     c001ada5 <IDE::read(unsigned char, unsigned char)+0xad>
c001ad92:	0f b6 c9             	movzx  ecx,cl
c001ad95:	0f b6 d2             	movzx  edx,dl
c001ad98:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ada0:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ada4:	ec                   	in     al,dx
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	5b                   	pop    ebx
c001ada9:	5e                   	pop    esi
c001adaa:	5f                   	pop    edi
c001adab:	c3                   	ret    

c001adac <IDE::waitInterrupt(unsigned char)>:
c001adac:	55                   	push   ebp
c001adad:	57                   	push   edi
c001adae:	56                   	push   esi
c001adaf:	53                   	push   ebx
c001adb0:	31 db                	xor    ebx,ebx
c001adb2:	83 ec 0c             	sub    esp,0xc
c001adb5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001adb9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001adbe:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001adc6:	89 e8                	mov    eax,ebp
c001adc8:	84 c0                	test   al,al
c001adca:	75 30                	jne    c001adfc <IDE::waitInterrupt(unsigned char)+0x50>
c001adcc:	50                   	push   eax
c001adcd:	6a 0c                	push   0xc
c001adcf:	56                   	push   esi
c001add0:	57                   	push   edi
c001add1:	e8 22 ff ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001add6:	83 c4 10             	add    esp,0x10
c001add9:	a8 01                	test   al,0x1
c001addb:	75 27                	jne    c001ae04 <IDE::waitInterrupt(unsigned char)+0x58>
c001addd:	f6 c3 04             	test   bl,0x4
c001ade0:	75 12                	jne    c001adf4 <IDE::waitInterrupt(unsigned char)+0x48>
c001ade2:	83 fb 32             	cmp    ebx,0x32
c001ade5:	7e 0d                	jle    c001adf4 <IDE::waitInterrupt(unsigned char)+0x48>
c001ade7:	83 ec 0c             	sub    esp,0xc
c001adea:	6a 64                	push   0x64
c001adec:	e8 5f a5 ff ff       	call   c0015350 <milliTenthSleep(unsigned int)>
c001adf1:	83 c4 10             	add    esp,0x10
c001adf4:	83 fb 3c             	cmp    ebx,0x3c
c001adf7:	74 0b                	je     c001ae04 <IDE::waitInterrupt(unsigned char)+0x58>
c001adf9:	43                   	inc    ebx
c001adfa:	eb c2                	jmp    c001adbe <IDE::waitInterrupt(unsigned char)+0x12>
c001adfc:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ae04:	83 c4 0c             	add    esp,0xc
c001ae07:	89 e8                	mov    eax,ebp
c001ae09:	5b                   	pop    ebx
c001ae0a:	5e                   	pop    esi
c001ae0b:	5f                   	pop    edi
c001ae0c:	5d                   	pop    ebp
c001ae0d:	c3                   	ret    

c001ae0e <ideChannel0IRQHandler(regs*, void*)>:
c001ae0e:	83 ec 10             	sub    esp,0x10
c001ae11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae15:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ae1c:	6a 07                	push   0x7
c001ae1e:	6a 00                	push   0x0
c001ae20:	50                   	push   eax
c001ae21:	e8 d2 fe ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001ae26:	83 c4 1c             	add    esp,0x1c
c001ae29:	c3                   	ret    

c001ae2a <ideChannel1IRQHandler(regs*, void*)>:
c001ae2a:	83 ec 10             	sub    esp,0x10
c001ae2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae31:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ae38:	6a 07                	push   0x7
c001ae3a:	6a 01                	push   0x1
c001ae3c:	50                   	push   eax
c001ae3d:	e8 b6 fe ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001ae42:	83 c4 1c             	add    esp,0x1c
c001ae45:	c3                   	ret    

c001ae46 <IDE::enableIRQs(unsigned char, bool)>:
c001ae46:	57                   	push   edi
c001ae47:	b8 02 00 00 00       	mov    eax,0x2
c001ae4c:	56                   	push   esi
c001ae4d:	53                   	push   ebx
c001ae4e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae57:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ae5b:	74 02                	je     c001ae5f <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ae5d:	31 c0                	xor    eax,eax
c001ae5f:	0f b6 db             	movzx  ebx,bl
c001ae62:	bf 04 00 00 00       	mov    edi,0x4
c001ae67:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ae6e:	50                   	push   eax
c001ae6f:	6a 0c                	push   0xc
c001ae71:	53                   	push   ebx
c001ae72:	56                   	push   esi
c001ae73:	e8 c0 fd ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae78:	83 c4 10             	add    esp,0x10
c001ae7b:	50                   	push   eax
c001ae7c:	6a 0c                	push   0xc
c001ae7e:	53                   	push   ebx
c001ae7f:	56                   	push   esi
c001ae80:	e8 73 fe ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001ae85:	83 c4 10             	add    esp,0x10
c001ae88:	4f                   	dec    edi
c001ae89:	75 f0                	jne    c001ae7b <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ae8b:	5b                   	pop    ebx
c001ae8c:	5e                   	pop    esi
c001ae8d:	5f                   	pop    edi
c001ae8e:	c3                   	ret    
c001ae8f:	90                   	nop

c001ae90 <IDE::open(int, int, void*)>:
c001ae90:	55                   	push   ebp
c001ae91:	57                   	push   edi
c001ae92:	56                   	push   esi
c001ae93:	53                   	push   ebx
c001ae94:	83 ec 1c             	sub    esp,0x1c
c001ae97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae9b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001aea2:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001aeab:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001aeb4:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001aebb:	0f 85 da 02 00 00    	jne    c001b19b <IDE::open(int, int, void*)+0x30b>
c001aec1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001aec7:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001aecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aecf:	83 e0 7f             	and    eax,0x7f
c001aed2:	83 f8 05             	cmp    eax,0x5
c001aed5:	74 05                	je     c001aedc <IDE::open(int, int, void*)+0x4c>
c001aed7:	83 f8 0f             	cmp    eax,0xf
c001aeda:	75 32                	jne    c001af0e <IDE::open(int, int, void*)+0x7e>
c001aedc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001aee2:	83 e0 fc             	and    eax,0xfffffffc
c001aee5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aeec:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001aef2:	83 e0 fc             	and    eax,0xfffffffc
c001aef5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aefc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001af02:	83 e0 fc             	and    eax,0xfffffffc
c001af05:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001af0c:	eb 14                	jmp    c001af22 <IDE::open(int, int, void*)+0x92>
c001af0e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001af18:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001af22:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001af29:	bf f8 0c 00 00       	mov    edi,0xcf8
c001af2e:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001af35:	89 fa                	mov    edx,edi
c001af37:	89 f1                	mov    ecx,esi
c001af39:	c1 e1 10             	shl    ecx,0x10
c001af3c:	89 e8                	mov    eax,ebp
c001af3e:	c1 e0 0b             	shl    eax,0xb
c001af41:	09 c1                	or     ecx,eax
c001af43:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001af4a:	c1 e0 08             	shl    eax,0x8
c001af4d:	09 c1                	or     ecx,eax
c001af4f:	89 c8                	mov    eax,ecx
c001af51:	0d 08 00 00 80       	or     eax,0x80000008
c001af56:	ef                   	out    dx,eax
c001af57:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af5c:	ed                   	in     eax,dx
c001af5d:	c1 e8 10             	shr    eax,0x10
c001af60:	3d ff ff 00 00       	cmp    eax,0xffff
c001af65:	0f 84 f9 00 00 00    	je     c001b064 <IDE::open(int, int, void*)+0x1d4>
c001af6b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001af71:	89 fa                	mov    edx,edi
c001af73:	89 c8                	mov    eax,ecx
c001af75:	ef                   	out    dx,eax
c001af76:	b0 fe                	mov    al,0xfe
c001af78:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af7d:	ee                   	out    dx,al
c001af7e:	89 c8                	mov    eax,ecx
c001af80:	89 fa                	mov    edx,edi
c001af82:	ef                   	out    dx,eax
c001af83:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af88:	ed                   	in     eax,dx
c001af89:	3c fe                	cmp    al,0xfe
c001af8b:	0f 85 a4 00 00 00    	jne    c001b035 <IDE::open(int, int, void*)+0x1a5>
c001af91:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001af97:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001af9e:	74 30                	je     c001afd0 <IDE::open(int, int, void*)+0x140>
c001afa0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001afa6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001afaa:	83 ec 0c             	sub    esp,0xc
c001afad:	40                   	inc    eax
c001afae:	0f b6 c0             	movzx  eax,al
c001afb1:	50                   	push   eax
c001afb2:	55                   	push   ebp
c001afb3:	56                   	push   esi
c001afb4:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001afba:	51                   	push   ecx
c001afbb:	e8 ac 3d ff ff       	call   c000ed6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001afc0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001afc5:	83 c4 1c             	add    esp,0x1c
c001afc8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001afce:	eb 0a                	jmp    c001afda <IDE::open(int, int, void*)+0x14a>
c001afd0:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001afda:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001afe1:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001afe6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001afed:	89 ea                	mov    edx,ebp
c001afef:	c1 e1 10             	shl    ecx,0x10
c001aff2:	c1 e0 08             	shl    eax,0x8
c001aff5:	09 c1                	or     ecx,eax
c001aff7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001affe:	c1 e0 0b             	shl    eax,0xb
c001b001:	09 c1                	or     ecx,eax
c001b003:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b009:	89 c8                	mov    eax,ecx
c001b00b:	ef                   	out    dx,eax
c001b00c:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001b012:	be fc 0c 00 00       	mov    esi,0xcfc
c001b017:	89 f2                	mov    edx,esi
c001b019:	89 f8                	mov    eax,edi
c001b01b:	ee                   	out    dx,al
c001b01c:	89 c8                	mov    eax,ecx
c001b01e:	89 ea                	mov    edx,ebp
c001b020:	ef                   	out    dx,eax
c001b021:	89 f2                	mov    edx,esi
c001b023:	ed                   	in     eax,dx
c001b024:	0f b6 c0             	movzx  eax,al
c001b027:	39 f8                	cmp    eax,edi
c001b029:	74 49                	je     c001b074 <IDE::open(int, int, void*)+0x1e4>
c001b02b:	83 ec 0c             	sub    esp,0xc
c001b02e:	68 7c 1a 02 c0       	push   0xc0021a7c
c001b033:	eb 37                	jmp    c001b06c <IDE::open(int, int, void*)+0x1dc>
c001b035:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b03e:	75 1a                	jne    c001b05a <IDE::open(int, int, void*)+0x1ca>
c001b040:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b045:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b04a:	74 05                	je     c001b051 <IDE::open(int, int, void*)+0x1c1>
c001b04c:	83 c0 80             	add    eax,0xffffff80
c001b04f:	75 09                	jne    c001b05a <IDE::open(int, int, void*)+0x1ca>
c001b051:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b058:	eb 1a                	jmp    c001b074 <IDE::open(int, int, void*)+0x1e4>
c001b05a:	83 ec 0c             	sub    esp,0xc
c001b05d:	68 84 1a 02 c0       	push   0xc0021a84
c001b062:	eb 08                	jmp    c001b06c <IDE::open(int, int, void*)+0x1dc>
c001b064:	83 ec 0c             	sub    esp,0xc
c001b067:	68 b5 1a 02 c0       	push   0xc0021ab5
c001b06c:	e8 c8 57 ff ff       	call   c0010839 <KePanic(char const*)>
c001b071:	83 c4 10             	add    esp,0x10
c001b074:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b07b:	74 1a                	je     c001b097 <IDE::open(int, int, void*)+0x207>
c001b07d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b083:	83 e0 fc             	and    eax,0xfffffffc
c001b086:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b08d:	83 c0 08             	add    eax,0x8
c001b090:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b097:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b09d:	89 c2                	mov    edx,eax
c001b09f:	83 e2 0f             	and    edx,0xf
c001b0a2:	83 fa 08             	cmp    edx,0x8
c001b0a5:	75 0a                	jne    c001b0b1 <IDE::open(int, int, void*)+0x221>
c001b0a7:	83 e8 02             	sub    eax,0x2
c001b0aa:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b0b1:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b0b7:	89 c2                	mov    edx,eax
c001b0b9:	83 e2 0f             	and    edx,0xf
c001b0bc:	83 fa 08             	cmp    edx,0x8
c001b0bf:	75 0a                	jne    c001b0cb <IDE::open(int, int, void*)+0x23b>
c001b0c1:	83 e8 02             	sub    eax,0x2
c001b0c4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b0cb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b0d2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b0d9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0dc:	89 d0                	mov    eax,edx
c001b0de:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0e2:	8d 7a 01             	lea    edi,[edx+0x1]
c001b0e5:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b0e9:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b0ed:	83 e1 3f             	and    ecx,0x3f
c001b0f0:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0f4:	89 f9                	mov    ecx,edi
c001b0f6:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b0fd:	8d 78 02             	lea    edi,[eax+0x2]
c001b100:	0f b6 c9             	movzx  ecx,cl
c001b103:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b106:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b10a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b10e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b112:	83 e2 3f             	and    edx,0x3f
c001b115:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b119:	89 f9                	mov    ecx,edi
c001b11b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b121:	8d 78 03             	lea    edi,[eax+0x3]
c001b124:	0f b6 d1             	movzx  edx,cl
c001b127:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b12a:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b12e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b132:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b136:	83 e1 3f             	and    ecx,0x3f
c001b139:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b13d:	89 f9                	mov    ecx,edi
c001b13f:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b145:	8d 78 04             	lea    edi,[eax+0x4]
c001b148:	0f b6 c9             	movzx  ecx,cl
c001b14b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b14e:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b152:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b156:	89 fa                	mov    edx,edi
c001b158:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b15e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b162:	83 e2 3f             	and    edx,0x3f
c001b165:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b169:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b170:	66 85 f6             	test   si,si
c001b173:	74 65                	je     c001b1da <IDE::open(int, int, void*)+0x34a>
c001b175:	89 f9                	mov    ecx,edi
c001b177:	83 c0 05             	add    eax,0x5
c001b17a:	0f b6 d1             	movzx  edx,cl
c001b17d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b180:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b184:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b188:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b18e:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b192:	83 e0 3f             	and    eax,0x3f
c001b195:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b199:	eb 3f                	jmp    c001b1da <IDE::open(int, int, void*)+0x34a>
c001b19b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b1a2:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b1a8:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b1af:	05 06 02 00 00       	add    eax,0x206
c001b1b4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b1bb:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b1c2:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b1c9:	05 06 02 00 00       	add    eax,0x206
c001b1ce:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b1d5:	e9 bd fe ff ff       	jmp    c001b097 <IDE::open(int, int, void*)+0x207>
c001b1da:	50                   	push   eax
c001b1db:	50                   	push   eax
c001b1dc:	6a 00                	push   0x0
c001b1de:	53                   	push   ebx
c001b1df:	e8 2e fa ff ff       	call   c001ac12 <IDE::prepareInterrupt(unsigned char)>
c001b1e4:	5a                   	pop    edx
c001b1e5:	59                   	pop    ecx
c001b1e6:	6a 01                	push   0x1
c001b1e8:	53                   	push   ebx
c001b1e9:	e8 24 fa ff ff       	call   c001ac12 <IDE::prepareInterrupt(unsigned char)>
c001b1ee:	83 c4 0c             	add    esp,0xc
c001b1f1:	6a 00                	push   0x0
c001b1f3:	6a 00                	push   0x0
c001b1f5:	53                   	push   ebx
c001b1f6:	e8 4b fc ff ff       	call   c001ae46 <IDE::enableIRQs(unsigned char, bool)>
c001b1fb:	83 c4 0c             	add    esp,0xc
c001b1fe:	6a 00                	push   0x0
c001b200:	6a 01                	push   0x1
c001b202:	53                   	push   ebx
c001b203:	e8 3e fc ff ff       	call   c001ae46 <IDE::enableIRQs(unsigned char, bool)>
c001b208:	83 c4 10             	add    esp,0x10
c001b20b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b212:	74 34                	je     c001b248 <IDE::open(int, int, void*)+0x3b8>
c001b214:	83 ec 0c             	sub    esp,0xc
c001b217:	53                   	push   ebx
c001b218:	6a 01                	push   0x1
c001b21a:	68 0e ae 01 c0       	push   0xc001ae0e
c001b21f:	6a 0e                	push   0xe
c001b221:	53                   	push   ebx
c001b222:	e8 55 0b ff ff       	call   c000bd7c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b227:	83 c4 14             	add    esp,0x14
c001b22a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b230:	53                   	push   ebx
c001b231:	6a 01                	push   0x1
c001b233:	68 2a ae 01 c0       	push   0xc001ae2a
c001b238:	6a 0f                	push   0xf
c001b23a:	53                   	push   ebx
c001b23b:	e8 3c 0b ff ff       	call   c000bd7c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b240:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b246:	eb 38                	jmp    c001b280 <IDE::open(int, int, void*)+0x3f0>
c001b248:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b252:	83 ec 0c             	sub    esp,0xc
c001b255:	53                   	push   ebx
c001b256:	6a 00                	push   0x0
c001b258:	68 0e ae 01 c0       	push   0xc001ae0e
c001b25d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b263:	53                   	push   ebx
c001b264:	e8 13 0b ff ff       	call   c000bd7c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b269:	83 c4 14             	add    esp,0x14
c001b26c:	53                   	push   ebx
c001b26d:	6a 00                	push   0x0
c001b26f:	68 2a ae 01 c0       	push   0xc001ae2a
c001b274:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b27a:	53                   	push   ebx
c001b27b:	e8 fc 0a ff ff       	call   c000bd7c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b280:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b282:	83 c4 20             	add    esp,0x20
c001b285:	83 ec 0c             	sub    esp,0xc
c001b288:	53                   	push   ebx
c001b289:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b28c:	83 c4 0c             	add    esp,0xc
c001b28f:	6a 07                	push   0x7
c001b291:	6a 00                	push   0x0
c001b293:	53                   	push   ebx
c001b294:	e8 5f fa ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b299:	83 c4 0c             	add    esp,0xc
c001b29c:	6a 07                	push   0x7
c001b29e:	6a 01                	push   0x1
c001b2a0:	53                   	push   ebx
c001b2a1:	e8 52 fa ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b2a6:	83 c4 0c             	add    esp,0xc
c001b2a9:	6a 01                	push   0x1
c001b2ab:	6a 00                	push   0x0
c001b2ad:	53                   	push   ebx
c001b2ae:	e8 93 fb ff ff       	call   c001ae46 <IDE::enableIRQs(unsigned char, bool)>
c001b2b3:	83 c4 0c             	add    esp,0xc
c001b2b6:	6a 01                	push   0x1
c001b2b8:	6a 01                	push   0x1
c001b2ba:	53                   	push   ebx
c001b2bb:	e8 86 fb ff ff       	call   c001ae46 <IDE::enableIRQs(unsigned char, bool)>
c001b2c0:	83 c4 2c             	add    esp,0x2c
c001b2c3:	31 c0                	xor    eax,eax
c001b2c5:	5b                   	pop    ebx
c001b2c6:	5e                   	pop    esi
c001b2c7:	5f                   	pop    edi
c001b2c8:	5d                   	pop    ebp
c001b2c9:	c3                   	ret    

c001b2ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b2ca:	55                   	push   ebp
c001b2cb:	57                   	push   edi
c001b2cc:	56                   	push   esi
c001b2cd:	53                   	push   ebx
c001b2ce:	83 ec 1c             	sub    esp,0x1c
c001b2d1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b2d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b2dd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b2e1:	8d 42 f8             	lea    eax,[edx-0x8]
c001b2e4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b2e8:	3c 03                	cmp    al,0x3
c001b2ea:	77 5a                	ja     c001b346 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b2ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2f0:	0f b6 db             	movzx  ebx,bl
c001b2f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2f7:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b2fa:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2ff:	0c 80                	or     al,0x80
c001b301:	50                   	push   eax
c001b302:	6a 0c                	push   0xc
c001b304:	53                   	push   ebx
c001b305:	56                   	push   esi
c001b306:	e8 2d f9 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b30b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b30f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b314:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b318:	0f b6 d2             	movzx  edx,dl
c001b31b:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b31f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b321:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b326:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b32a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b32e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b336:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b33a:	83 c4 2c             	add    esp,0x2c
c001b33d:	5b                   	pop    ebx
c001b33e:	5e                   	pop    esi
c001b33f:	5f                   	pop    edi
c001b340:	5d                   	pop    ebp
c001b341:	e9 f2 f8 ff ff       	jmp    c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b346:	0f b6 c2             	movzx  eax,dl
c001b349:	83 f8 07             	cmp    eax,0x7
c001b34c:	77 12                	ja     c001b360 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b34e:	0f b6 db             	movzx  ebx,bl
c001b351:	0f b6 c2             	movzx  eax,dl
c001b354:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b35c:	01 c2                	add    edx,eax
c001b35e:	eb 2f                	jmp    c001b38f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b360:	83 f8 0d             	cmp    eax,0xd
c001b363:	77 13                	ja     c001b378 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b365:	0f b6 db             	movzx  ebx,bl
c001b368:	0f b6 d2             	movzx  edx,dl
c001b36b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b372:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b376:	eb 17                	jmp    c001b38f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b378:	83 f8 15             	cmp    eax,0x15
c001b37b:	77 14                	ja     c001b391 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b37d:	0f b6 db             	movzx  ebx,bl
c001b380:	0f b6 d2             	movzx  edx,dl
c001b383:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b38b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b38f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b391:	83 c4 1c             	add    esp,0x1c
c001b394:	5b                   	pop    ebx
c001b395:	5e                   	pop    esi
c001b396:	5f                   	pop    edi
c001b397:	5d                   	pop    ebp
c001b398:	c3                   	ret    
c001b399:	90                   	nop

c001b39a <IDE::detect()>:
c001b39a:	55                   	push   ebp
c001b39b:	57                   	push   edi
c001b39c:	56                   	push   esi
c001b39d:	53                   	push   ebx
c001b39e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b3a4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b3ab:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b3b2:	0f 85 9e 02 00 00    	jne    c001b656 <IDE::detect()+0x2bc>
c001b3b8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b3bf:	31 f6                	xor    esi,esi
c001b3c1:	31 ff                	xor    edi,edi
c001b3c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b3cb:	89 f8                	mov    eax,edi
c001b3cd:	c1 e0 06             	shl    eax,0x6
c001b3d0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b3d8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b3dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b3e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3e4:	c1 e0 04             	shl    eax,0x4
c001b3e7:	83 c8 a0             	or     eax,0xffffffa0
c001b3ea:	0f b6 c0             	movzx  eax,al
c001b3ed:	50                   	push   eax
c001b3ee:	6a 06                	push   0x6
c001b3f0:	56                   	push   esi
c001b3f1:	53                   	push   ebx
c001b3f2:	e8 41 f8 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3f7:	83 c4 0c             	add    esp,0xc
c001b3fa:	6a 0c                	push   0xc
c001b3fc:	56                   	push   esi
c001b3fd:	53                   	push   ebx
c001b3fe:	e8 f5 f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b403:	83 c4 0c             	add    esp,0xc
c001b406:	6a 0c                	push   0xc
c001b408:	56                   	push   esi
c001b409:	53                   	push   ebx
c001b40a:	e8 e9 f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b40f:	83 c4 0c             	add    esp,0xc
c001b412:	6a 0c                	push   0xc
c001b414:	56                   	push   esi
c001b415:	53                   	push   ebx
c001b416:	e8 dd f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b41b:	83 c4 0c             	add    esp,0xc
c001b41e:	6a 0c                	push   0xc
c001b420:	56                   	push   esi
c001b421:	53                   	push   ebx
c001b422:	e8 d1 f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b427:	68 ec 00 00 00       	push   0xec
c001b42c:	6a 07                	push   0x7
c001b42e:	56                   	push   esi
c001b42f:	53                   	push   ebx
c001b430:	e8 03 f8 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b435:	83 c4 1c             	add    esp,0x1c
c001b438:	6a 0c                	push   0xc
c001b43a:	56                   	push   esi
c001b43b:	53                   	push   ebx
c001b43c:	e8 b7 f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b441:	83 c4 0c             	add    esp,0xc
c001b444:	6a 0c                	push   0xc
c001b446:	56                   	push   esi
c001b447:	53                   	push   ebx
c001b448:	e8 ab f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b44d:	83 c4 0c             	add    esp,0xc
c001b450:	6a 0c                	push   0xc
c001b452:	56                   	push   esi
c001b453:	53                   	push   ebx
c001b454:	e8 9f f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b459:	83 c4 0c             	add    esp,0xc
c001b45c:	6a 0c                	push   0xc
c001b45e:	56                   	push   esi
c001b45f:	53                   	push   ebx
c001b460:	e8 93 f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b465:	83 c4 0c             	add    esp,0xc
c001b468:	6a 0c                	push   0xc
c001b46a:	56                   	push   esi
c001b46b:	53                   	push   ebx
c001b46c:	e8 87 f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b471:	83 c4 10             	add    esp,0x10
c001b474:	84 c0                	test   al,al
c001b476:	0f 84 61 01 00 00    	je     c001b5dd <IDE::detect()+0x243>
c001b47c:	31 ed                	xor    ebp,ebp
c001b47e:	50                   	push   eax
c001b47f:	6a 0c                	push   0xc
c001b481:	56                   	push   esi
c001b482:	53                   	push   ebx
c001b483:	e8 70 f8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b488:	83 c4 10             	add    esp,0x10
c001b48b:	a8 01                	test   al,0x1
c001b48d:	0f 85 6b 01 00 00    	jne    c001b5fe <IDE::detect()+0x264>
c001b493:	a8 80                	test   al,0x80
c001b495:	75 04                	jne    c001b49b <IDE::detect()+0x101>
c001b497:	a8 08                	test   al,0x8
c001b499:	75 23                	jne    c001b4be <IDE::detect()+0x124>
c001b49b:	45                   	inc    ebp
c001b49c:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b4a2:	7e da                	jle    c001b47e <IDE::detect()+0xe4>
c001b4a4:	83 ec 0c             	sub    esp,0xc
c001b4a7:	6a 32                	push   0x32
c001b4a9:	e8 a2 9e ff ff       	call   c0015350 <milliTenthSleep(unsigned int)>
c001b4ae:	83 c4 10             	add    esp,0x10
c001b4b1:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b4b7:	75 c5                	jne    c001b47e <IDE::detect()+0xe4>
c001b4b9:	e9 40 01 00 00       	jmp    c001b5fe <IDE::detect()+0x264>
c001b4be:	31 c9                	xor    ecx,ecx
c001b4c0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b4c4:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b4c8:	83 ec 0c             	sub    esp,0xc
c001b4cb:	68 80 00 00 00       	push   0x80
c001b4d0:	55                   	push   ebp
c001b4d1:	6a 00                	push   0x0
c001b4d3:	56                   	push   esi
c001b4d4:	53                   	push   ebx
c001b4d5:	e8 f0 fd ff ff       	call   c001b2ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b4da:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b4df:	89 f8                	mov    eax,edi
c001b4e1:	c1 e0 06             	shl    eax,0x6
c001b4e4:	01 d8                	add    eax,ebx
c001b4e6:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b4ed:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b4f4:	89 d1                	mov    ecx,edx
c001b4f6:	89 f2                	mov    edx,esi
c001b4f8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b4fe:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b502:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b508:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b50c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b513:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b51b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b522:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b52a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b530:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b537:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b53d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b541:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b545:	83 c4 20             	add    esp,0x20
c001b548:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b54b:	83 c5 02             	add    ebp,0x2
c001b54e:	83 c0 02             	add    eax,0x2
c001b551:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b557:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b55a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b560:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b564:	75 e2                	jne    c001b548 <IDE::detect()+0x1ae>
c001b566:	89 f8                	mov    eax,edi
c001b568:	c1 e0 06             	shl    eax,0x6
c001b56b:	01 d8                	add    eax,ebx
c001b56d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b574:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b57b:	c1 ea 09             	shr    edx,0x9
c001b57e:	83 e2 01             	and    edx,0x1
c001b581:	80 e1 01             	and    cl,0x1
c001b584:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b58a:	75 22                	jne    c001b5ae <IDE::detect()+0x214>
c001b58c:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b593:	74 47                	je     c001b5dc <IDE::detect()+0x242>
c001b595:	83 ec 0c             	sub    esp,0xc
c001b598:	68 7c 01 00 00       	push   0x17c
c001b59d:	e8 29 c5 fe ff       	call   c0007acb <malloc>
c001b5a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5a5:	89 c5                	mov    ebp,eax
c001b5a7:	e8 16 05 00 00       	call   c001bac2 <ATA::ATA()>
c001b5ac:	eb 17                	jmp    c001b5c5 <IDE::detect()+0x22b>
c001b5ae:	83 ec 0c             	sub    esp,0xc
c001b5b1:	68 84 01 00 00       	push   0x184
c001b5b6:	e8 10 c5 fe ff       	call   c0007acb <malloc>
c001b5bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5be:	89 c5                	mov    ebp,eax
c001b5c0:	e8 6f 0e 00 00       	call   c001c434 <ATAPI::ATAPI()>
c001b5c5:	5a                   	pop    edx
c001b5c6:	59                   	pop    ecx
c001b5c7:	55                   	push   ebp
c001b5c8:	53                   	push   ebx
c001b5c9:	e8 02 08 ff ff       	call   c000bdd0 <Device::addChild(Device*)>
c001b5ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b5d1:	53                   	push   ebx
c001b5d2:	57                   	push   edi
c001b5d3:	6a 00                	push   0x0
c001b5d5:	55                   	push   ebp
c001b5d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5d9:	83 c4 20             	add    esp,0x20
c001b5dc:	47                   	inc    edi
c001b5dd:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b5e2:	74 0d                	je     c001b5f1 <IDE::detect()+0x257>
c001b5e4:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b5ec:	e9 da fd ff ff       	jmp    c001b3cb <IDE::detect()+0x31>
c001b5f1:	4e                   	dec    esi
c001b5f2:	74 62                	je     c001b656 <IDE::detect()+0x2bc>
c001b5f4:	be 01 00 00 00       	mov    esi,0x1
c001b5f9:	e9 c5 fd ff ff       	jmp    c001b3c3 <IDE::detect()+0x29>
c001b5fe:	50                   	push   eax
c001b5ff:	6a 04                	push   0x4
c001b601:	56                   	push   esi
c001b602:	53                   	push   ebx
c001b603:	e8 f0 f6 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b608:	83 c4 0c             	add    esp,0xc
c001b60b:	6a 05                	push   0x5
c001b60d:	56                   	push   esi
c001b60e:	53                   	push   ebx
c001b60f:	89 c5                	mov    ebp,eax
c001b611:	e8 e2 f6 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b616:	89 e9                	mov    ecx,ebp
c001b618:	83 c4 10             	add    esp,0x10
c001b61b:	0f b6 e9             	movzx  ebp,cl
c001b61e:	83 fd 14             	cmp    ebp,0x14
c001b621:	74 2d                	je     c001b650 <IDE::detect()+0x2b6>
c001b623:	83 fd 69             	cmp    ebp,0x69
c001b626:	75 b5                	jne    c001b5dd <IDE::detect()+0x243>
c001b628:	3c 96                	cmp    al,0x96
c001b62a:	75 b1                	jne    c001b5dd <IDE::detect()+0x243>
c001b62c:	68 a1 00 00 00       	push   0xa1
c001b631:	6a 07                	push   0x7
c001b633:	56                   	push   esi
c001b634:	53                   	push   ebx
c001b635:	e8 fe f5 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b63a:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b641:	e8 0a 9d ff ff       	call   c0015350 <milliTenthSleep(unsigned int)>
c001b646:	83 c4 10             	add    esp,0x10
c001b649:	b1 01                	mov    cl,0x1
c001b64b:	e9 70 fe ff ff       	jmp    c001b4c0 <IDE::detect()+0x126>
c001b650:	3c eb                	cmp    al,0xeb
c001b652:	75 cf                	jne    c001b623 <IDE::detect()+0x289>
c001b654:	eb d6                	jmp    c001b62c <IDE::detect()+0x292>
c001b656:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b65c:	5b                   	pop    ebx
c001b65d:	5e                   	pop    esi
c001b65e:	5f                   	pop    edi
c001b65f:	5d                   	pop    ebp
c001b660:	c3                   	ret    
c001b661:	90                   	nop

c001b662 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b662:	55                   	push   ebp
c001b663:	57                   	push   edi
c001b664:	56                   	push   esi
c001b665:	53                   	push   ebx
c001b666:	83 ec 1c             	sub    esp,0x1c
c001b669:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b66d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b671:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b679:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b67d:	88 c3                	mov    bl,al
c001b67f:	25 ff 00 00 00       	and    eax,0xff
c001b684:	0f 84 88 00 00 00    	je     c001b712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	89 c7                	mov    edi,eax
c001b68f:	68 df 1a 02 c0       	push   0xc0021adf
c001b694:	e8 d6 f2 fe ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	83 ff 01             	cmp    edi,0x1
c001b69f:	74 6b                	je     c001b70c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b6a1:	83 ff 02             	cmp    edi,0x2
c001b6a4:	75 58                	jne    c001b6fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b6a6:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b6ab:	50                   	push   eax
c001b6ac:	6a 01                	push   0x1
c001b6ae:	01 ff                	add    edi,edi
c001b6b0:	09 fe                	or     esi,edi
c001b6b2:	89 f0                	mov    eax,esi
c001b6b4:	0f b6 f0             	movzx  esi,al
c001b6b7:	c1 e6 06             	shl    esi,0x6
c001b6ba:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b6c2:	50                   	push   eax
c001b6c3:	55                   	push   ebp
c001b6c4:	e8 2f f6 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b6c9:	83 c4 10             	add    esp,0x10
c001b6cc:	a8 01                	test   al,0x1
c001b6ce:	74 02                	je     c001b6d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b6d0:	b3 07                	mov    bl,0x7
c001b6d2:	a8 02                	test   al,0x2
c001b6d4:	74 02                	je     c001b6d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b6d6:	b3 03                	mov    bl,0x3
c001b6d8:	a8 04                	test   al,0x4
c001b6da:	74 02                	je     c001b6de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b6dc:	b3 14                	mov    bl,0x14
c001b6de:	a8 08                	test   al,0x8
c001b6e0:	74 02                	je     c001b6e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b6e2:	b3 03                	mov    bl,0x3
c001b6e4:	a8 10                	test   al,0x10
c001b6e6:	74 02                	je     c001b6ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b6e8:	b3 15                	mov    bl,0x15
c001b6ea:	a8 20                	test   al,0x20
c001b6ec:	74 02                	je     c001b6f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b6ee:	b3 03                	mov    bl,0x3
c001b6f0:	a8 40                	test   al,0x40
c001b6f2:	74 02                	je     c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b6f4:	b3 16                	mov    bl,0x16
c001b6f6:	a8 80                	test   al,0x80
c001b6f8:	74 18                	je     c001b712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6fa:	b3 0d                	mov    bl,0xd
c001b6fc:	eb 14                	jmp    c001b712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6fe:	83 ff 03             	cmp    edi,0x3
c001b701:	74 0d                	je     c001b710 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b703:	83 ff 04             	cmp    edi,0x4
c001b706:	75 0a                	jne    c001b712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b708:	b3 08                	mov    bl,0x8
c001b70a:	eb 06                	jmp    c001b712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b70c:	b3 13                	mov    bl,0x13
c001b70e:	eb 02                	jmp    c001b712 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b710:	b3 17                	mov    bl,0x17
c001b712:	83 c4 1c             	add    esp,0x1c
c001b715:	88 d8                	mov    al,bl
c001b717:	5b                   	pop    ebx
c001b718:	5e                   	pop    esi
c001b719:	5f                   	pop    edi
c001b71a:	5d                   	pop    ebp
c001b71b:	c3                   	ret    

c001b71c <IDE::polling(unsigned char, unsigned int)>:
c001b71c:	57                   	push   edi
c001b71d:	56                   	push   esi
c001b71e:	53                   	push   ebx
c001b71f:	bb 04 00 00 00       	mov    ebx,0x4
c001b724:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b728:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b72d:	52                   	push   edx
c001b72e:	6a 0c                	push   0xc
c001b730:	56                   	push   esi
c001b731:	57                   	push   edi
c001b732:	e8 c1 f5 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b737:	83 c4 10             	add    esp,0x10
c001b73a:	4b                   	dec    ebx
c001b73b:	75 f0                	jne    c001b72d <IDE::polling(unsigned char, unsigned int)+0x11>
c001b73d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b742:	50                   	push   eax
c001b743:	6a 0c                	push   0xc
c001b745:	56                   	push   esi
c001b746:	57                   	push   edi
c001b747:	e8 ac f5 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001b74c:	83 c4 10             	add    esp,0x10
c001b74f:	a8 01                	test   al,0x1
c001b751:	75 17                	jne    c001b76a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b753:	a8 20                	test   al,0x20
c001b755:	75 0f                	jne    c001b766 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b757:	4b                   	dec    ebx
c001b758:	74 10                	je     c001b76a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b75a:	a8 80                	test   al,0x80
c001b75c:	75 e4                	jne    c001b742 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b75e:	a8 08                	test   al,0x8
c001b760:	74 e0                	je     c001b742 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b762:	31 c0                	xor    eax,eax
c001b764:	eb 06                	jmp    c001b76c <IDE::polling(unsigned char, unsigned int)+0x50>
c001b766:	b0 01                	mov    al,0x1
c001b768:	eb 02                	jmp    c001b76c <IDE::polling(unsigned char, unsigned int)+0x50>
c001b76a:	b0 02                	mov    al,0x2
c001b76c:	5b                   	pop    ebx
c001b76d:	5e                   	pop    esi
c001b76e:	5f                   	pop    edi
c001b76f:	c3                   	ret    

c001b770 <SATABus::close(int, int, void*)>:
c001b770:	31 c0                	xor    eax,eax
c001b772:	c3                   	ret    
c001b773:	90                   	nop

c001b774 <SATABus::detect()>:
c001b774:	c3                   	ret    
c001b775:	90                   	nop

c001b776 <SATABus::SATABus()>:
c001b776:	83 ec 0c             	sub    esp,0xc
c001b779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b77d:	83 ec 08             	sub    esp,0x8
c001b780:	68 18 1b 02 c0       	push   0xc0021b18
c001b785:	50                   	push   eax
c001b786:	e8 89 09 ff ff       	call   c000c114 <HardDiskController::HardDiskController(char const*)>
c001b78b:	83 c4 10             	add    esp,0x10
c001b78e:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c001b793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b797:	89 10                	mov    DWORD PTR [eax],edx
c001b799:	83 ec 0c             	sub    esp,0xc
c001b79c:	6a 50                	push   0x50
c001b79e:	e8 02 c7 fe ff       	call   c0007ea5 <Phys::allocateContiguousPages(int)>
c001b7a3:	83 c4 10             	add    esp,0x10
c001b7a6:	89 c2                	mov    edx,eax
c001b7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b7b2:	83 ec 0c             	sub    esp,0xc
c001b7b5:	6a 50                	push   0x50
c001b7b7:	e8 49 de fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001b7bc:	83 c4 10             	add    esp,0x10
c001b7bf:	89 c2                	mov    edx,eax
c001b7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b7cb:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b7d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7d4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b7da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7de:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b7e4:	83 ec 0c             	sub    esp,0xc
c001b7e7:	6a 03                	push   0x3
c001b7e9:	6a 50                	push   0x50
c001b7eb:	51                   	push   ecx
c001b7ec:	52                   	push   edx
c001b7ed:	50                   	push   eax
c001b7ee:	e8 0b e8 fe ff       	call   c0009ffe <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b7f3:	83 c4 20             	add    esp,0x20
c001b7f6:	90                   	nop
c001b7f7:	83 c4 0c             	add    esp,0xc
c001b7fa:	c3                   	ret    
c001b7fb:	90                   	nop

c001b7fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b7fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b800:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b803:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b806:	09 c2                	or     edx,eax
c001b808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b80c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b812:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b814:	31 c0                	xor    eax,eax
c001b816:	c1 e9 08             	shr    ecx,0x8
c001b819:	83 e1 0f             	and    ecx,0xf
c001b81c:	39 c8                	cmp    eax,ecx
c001b81e:	74 0a                	je     c001b82a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b820:	f6 c2 01             	test   dl,0x1
c001b823:	74 08                	je     c001b82d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b825:	d1 ea                	shr    edx,1
c001b827:	40                   	inc    eax
c001b828:	eb f2                	jmp    c001b81c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b82a:	83 c8 ff             	or     eax,0xffffffff
c001b82d:	c3                   	ret    

c001b82e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b82e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b832:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b835:	89 c2                	mov    edx,eax
c001b837:	c1 ea 08             	shr    edx,0x8
c001b83a:	83 e2 0f             	and    edx,0xf
c001b83d:	4a                   	dec    edx
c001b83e:	75 32                	jne    c001b872 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b840:	83 e0 0f             	and    eax,0xf
c001b843:	83 f8 03             	cmp    eax,0x3
c001b846:	75 2a                	jne    c001b872 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b848:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b84b:	b8 02 00 00 00       	mov    eax,0x2
c001b850:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b856:	74 1c                	je     c001b874 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b858:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b85e:	b8 04 00 00 00       	mov    eax,0x4
c001b863:	74 0f                	je     c001b874 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b865:	31 c0                	xor    eax,eax
c001b867:	83 fa 03             	cmp    edx,0x3
c001b86a:	0f 94 c0             	sete   al
c001b86d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b871:	c3                   	ret    
c001b872:	31 c0                	xor    eax,eax
c001b874:	c3                   	ret    
c001b875:	90                   	nop

c001b876 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b87a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b87d:	0f ba e2 0f          	bt     edx,0xf
c001b881:	72 f7                	jb     c001b87a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b883:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b886:	83 ca 10             	or     edx,0x10
c001b889:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b88c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b88f:	83 ca 01             	or     edx,0x1
c001b892:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b895:	c3                   	ret    

c001b896 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b89a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b89d:	83 e2 fe             	and    edx,0xfffffffe
c001b8a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8a6:	83 e2 ef             	and    edx,0xffffffef
c001b8a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b8ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8af:	0f ba e2 0e          	bt     edx,0xe
c001b8b3:	72 f7                	jb     c001b8ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b8b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b8b8:	0f ba e2 0f          	bt     edx,0xf
c001b8bc:	72 ee                	jb     c001b8ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b8be:	c3                   	ret    
c001b8bf:	90                   	nop

c001b8c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b8c0:	55                   	push   ebp
c001b8c1:	57                   	push   edi
c001b8c2:	56                   	push   esi
c001b8c3:	53                   	push   ebx
c001b8c4:	83 ec 1c             	sub    esp,0x1c
c001b8c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b8cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b8cf:	53                   	push   ebx
c001b8d0:	57                   	push   edi
c001b8d1:	e8 c0 ff ff ff       	call   c001b896 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b8d6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b8da:	83 ec 0c             	sub    esp,0xc
c001b8dd:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b8e3:	c1 e5 0a             	shl    ebp,0xa
c001b8e6:	01 e8                	add    eax,ebp
c001b8e8:	89 03                	mov    DWORD PTR [ebx],eax
c001b8ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8ec:	68 00 04 00 00       	push   0x400
c001b8f1:	6a 00                	push   0x0
c001b8f3:	50                   	push   eax
c001b8f4:	e8 f7 4b fe ff       	call   c00004f0 <memset>
c001b8f9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b8ff:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b903:	83 c4 1c             	add    esp,0x1c
c001b906:	01 e8                	add    eax,ebp
c001b908:	89 03                	mov    DWORD PTR [ebx],eax
c001b90a:	c1 e6 08             	shl    esi,0x8
c001b90d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b914:	81 c6 00 80 00 00    	add    esi,0x8000
c001b91a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b920:	01 f0                	add    eax,esi
c001b922:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b925:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b928:	68 00 01 00 00       	push   0x100
c001b92d:	6a 00                	push   0x0
c001b92f:	50                   	push   eax
c001b930:	e8 bb 4b fe ff       	call   c00004f0 <memset>
c001b935:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b93b:	31 d2                	xor    edx,edx
c001b93d:	01 f0                	add    eax,esi
c001b93f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b942:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b949:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b94f:	01 ee                	add    esi,ebp
c001b951:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b955:	83 c4 10             	add    esp,0x10
c001b958:	c1 e5 0d             	shl    ebp,0xd
c001b95b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b961:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b967:	83 c6 20             	add    esi,0x20
c001b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b96e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b974:	01 e8                	add    eax,ebp
c001b976:	01 d0                	add    eax,edx
c001b978:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b97b:	52                   	push   edx
c001b97c:	68 00 01 00 00       	push   0x100
c001b981:	6a 00                	push   0x0
c001b983:	50                   	push   eax
c001b984:	e8 67 4b fe ff       	call   c00004f0 <memset>
c001b989:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b98f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b996:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b99a:	83 c4 10             	add    esp,0x10
c001b99d:	01 e8                	add    eax,ebp
c001b99f:	01 d0                	add    eax,edx
c001b9a1:	81 c2 00 01 00 00    	add    edx,0x100
c001b9a7:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b9aa:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b9b0:	75 af                	jne    c001b961 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b9b2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b9b9:	50                   	push   eax
c001b9ba:	50                   	push   eax
c001b9bb:	53                   	push   ebx
c001b9bc:	57                   	push   edi
c001b9bd:	e8 b4 fe ff ff       	call   c001b876 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b9c2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b9c9:	83 c4 2c             	add    esp,0x2c
c001b9cc:	5b                   	pop    ebx
c001b9cd:	5e                   	pop    esi
c001b9ce:	5f                   	pop    edi
c001b9cf:	5d                   	pop    ebp
c001b9d0:	c3                   	ret    
c001b9d1:	90                   	nop

c001b9d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b9d2:	55                   	push   ebp
c001b9d3:	57                   	push   edi
c001b9d4:	56                   	push   esi
c001b9d5:	53                   	push   ebx
c001b9d6:	31 db                	xor    ebx,ebx
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9df:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b9e3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b9e6:	f7 c7 01 00 00 00    	test   edi,0x1
c001b9ec:	74 7a                	je     c001ba68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9ee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9f2:	89 d8                	mov    eax,ebx
c001b9f4:	c1 e0 07             	shl    eax,0x7
c001b9f7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b9fe:	55                   	push   ebp
c001b9ff:	56                   	push   esi
c001ba00:	e8 29 fe ff ff       	call   c001b82e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ba05:	5a                   	pop    edx
c001ba06:	59                   	pop    ecx
c001ba07:	83 f8 01             	cmp    eax,0x1
c001ba0a:	75 21                	jne    c001ba2d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ba0c:	50                   	push   eax
c001ba0d:	53                   	push   ebx
c001ba0e:	55                   	push   ebp
c001ba0f:	56                   	push   esi
c001ba10:	e8 ab fe ff ff       	call   c001b8c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba15:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ba1c:	e8 aa c0 fe ff       	call   c0007acb <malloc>
c001ba21:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba24:	89 c5                	mov    ebp,eax
c001ba26:	e8 c1 10 00 00       	call   c001caec <SATA::SATA()>
c001ba2b:	eb 24                	jmp    c001ba51 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ba2d:	83 f8 04             	cmp    eax,0x4
c001ba30:	75 36                	jne    c001ba68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba32:	51                   	push   ecx
c001ba33:	53                   	push   ebx
c001ba34:	55                   	push   ebp
c001ba35:	56                   	push   esi
c001ba36:	e8 85 fe ff ff       	call   c001b8c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba3b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ba42:	e8 84 c0 fe ff       	call   c0007acb <malloc>
c001ba47:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba4a:	89 c5                	mov    ebp,eax
c001ba4c:	e8 f5 17 00 00       	call   c001d246 <SATAPI::SATAPI()>
c001ba51:	58                   	pop    eax
c001ba52:	5a                   	pop    edx
c001ba53:	55                   	push   ebp
c001ba54:	56                   	push   esi
c001ba55:	e8 76 03 ff ff       	call   c000bdd0 <Device::addChild(Device*)>
c001ba5a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba5d:	56                   	push   esi
c001ba5e:	6a 00                	push   0x0
c001ba60:	53                   	push   ebx
c001ba61:	55                   	push   ebp
c001ba62:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba65:	83 c4 20             	add    esp,0x20
c001ba68:	d1 ef                	shr    edi,1
c001ba6a:	43                   	inc    ebx
c001ba6b:	83 fb 20             	cmp    ebx,0x20
c001ba6e:	0f 85 72 ff ff ff    	jne    c001b9e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ba74:	83 c4 0c             	add    esp,0xc
c001ba77:	5b                   	pop    ebx
c001ba78:	5e                   	pop    esi
c001ba79:	5f                   	pop    edi
c001ba7a:	5d                   	pop    ebp
c001ba7b:	c3                   	ret    

c001ba7c <SATABus::open(int, int, void*)>:
c001ba7c:	83 ec 14             	sub    esp,0x14
c001ba7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba83:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ba89:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ba8f:	52                   	push   edx
c001ba90:	50                   	push   eax
c001ba91:	e8 3c ff ff ff       	call   c001b9d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ba96:	31 c0                	xor    eax,eax
c001ba98:	83 c4 1c             	add    esp,0x1c
c001ba9b:	c3                   	ret    

c001ba9c <ATA::close(int, int, void*)>:
c001ba9c:	83 ec 0c             	sub    esp,0xc
c001ba9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001baa9:	85 c0                	test   eax,eax
c001baab:	74 0c                	je     c001bab9 <ATA::close(int, int, void*)+0x1d>
c001baad:	8b 10                	mov    edx,DWORD PTR [eax]
c001baaf:	83 ec 0c             	sub    esp,0xc
c001bab2:	50                   	push   eax
c001bab3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bab6:	83 c4 10             	add    esp,0x10
c001bab9:	31 c0                	xor    eax,eax
c001babb:	83 c4 0c             	add    esp,0xc
c001babe:	c3                   	ret    
c001babf:	90                   	nop

c001bac0 <ATA::powerSaving(PowerSavingLevel)>:
c001bac0:	c3                   	ret    
c001bac1:	90                   	nop

c001bac2 <ATA::ATA()>:
c001bac2:	83 ec 0c             	sub    esp,0xc
c001bac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac9:	83 ec 04             	sub    esp,0x4
c001bacc:	68 00 02 00 00       	push   0x200
c001bad1:	68 11 1c 02 c0       	push   0xc0021c11
c001bad6:	50                   	push   eax
c001bad7:	e8 c2 06 ff ff       	call   c000c19e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001badc:	83 c4 10             	add    esp,0x10
c001badf:	ba 84 1b 02 c0       	mov    edx,0xc0021b84
c001bae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae8:	89 10                	mov    DWORD PTR [eax],edx
c001baea:	90                   	nop
c001baeb:	83 c4 0c             	add    esp,0xc
c001baee:	c3                   	ret    
c001baef:	90                   	nop

c001baf0 <ATA::flush(bool)>:
c001baf0:	53                   	push   ebx
c001baf1:	83 ec 08             	sub    esp,0x8
c001baf4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001baf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bafd:	83 f8 01             	cmp    eax,0x1
c001bb00:	19 c0                	sbb    eax,eax
c001bb02:	83 e0 fd             	and    eax,0xfffffffd
c001bb05:	05 ea 00 00 00       	add    eax,0xea
c001bb0a:	50                   	push   eax
c001bb0b:	6a 07                	push   0x7
c001bb0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb14:	50                   	push   eax
c001bb15:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb1b:	e8 18 f1 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb20:	83 c4 0c             	add    esp,0xc
c001bb23:	6a 00                	push   0x0
c001bb25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb2c:	50                   	push   eax
c001bb2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb33:	e8 e4 fb ff ff       	call   c001b71c <IDE::polling(unsigned char, unsigned int)>
c001bb38:	83 c4 18             	add    esp,0x18
c001bb3b:	5b                   	pop    ebx
c001bb3c:	c3                   	ret    
c001bb3d:	90                   	nop

c001bb3e <ATA::readyForCommand()>:
c001bb3e:	56                   	push   esi
c001bb3f:	53                   	push   ebx
c001bb40:	53                   	push   ebx
c001bb41:	31 db                	xor    ebx,ebx
c001bb43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb47:	51                   	push   ecx
c001bb48:	6a 0c                	push   0xc
c001bb4a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb51:	50                   	push   eax
c001bb52:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb58:	e8 9b f1 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001bb5d:	83 c4 10             	add    esp,0x10
c001bb60:	a8 88                	test   al,0x88
c001bb62:	74 1f                	je     c001bb83 <ATA::readyForCommand()+0x45>
c001bb64:	43                   	inc    ebx
c001bb65:	83 fb 63             	cmp    ebx,0x63
c001bb68:	7e dd                	jle    c001bb47 <ATA::readyForCommand()+0x9>
c001bb6a:	83 ec 0c             	sub    esp,0xc
c001bb6d:	6a 0a                	push   0xa
c001bb6f:	e8 dc 97 ff ff       	call   c0015350 <milliTenthSleep(unsigned int)>
c001bb74:	83 c4 10             	add    esp,0x10
c001bb77:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bb7d:	75 c8                	jne    c001bb47 <ATA::readyForCommand()+0x9>
c001bb7f:	31 c0                	xor    eax,eax
c001bb81:	eb 02                	jmp    c001bb85 <ATA::readyForCommand()+0x47>
c001bb83:	b0 01                	mov    al,0x1
c001bb85:	5a                   	pop    edx
c001bb86:	5b                   	pop    ebx
c001bb87:	5e                   	pop    esi
c001bb88:	c3                   	ret    
c001bb89:	90                   	nop

c001bb8a <ATA::access(unsigned long long, int, void*, bool)>:
c001bb8a:	55                   	push   ebp
c001bb8b:	57                   	push   edi
c001bb8c:	56                   	push   esi
c001bb8d:	53                   	push   ebx
c001bb8e:	83 ec 2c             	sub    esp,0x2c
c001bb91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb95:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bb99:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bb9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bba1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bba5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bba9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bbad:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bbb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbb7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bbbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bbc1:	c1 e0 06             	shl    eax,0x6
c001bbc4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bbcc:	74 5b                	je     c001bc29 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bbce:	89 fa                	mov    edx,edi
c001bbd0:	89 f0                	mov    eax,esi
c001bbd2:	c1 ea 1c             	shr    edx,0x1c
c001bbd5:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bbd9:	89 d1                	mov    ecx,edx
c001bbdb:	09 c1                	or     ecx,eax
c001bbdd:	74 25                	je     c001bc04 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bbdf:	31 ed                	xor    ebp,ebp
c001bbe1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bbe8:	89 fa                	mov    edx,edi
c001bbea:	89 f0                	mov    eax,esi
c001bbec:	0f ad d0             	shrd   eax,edx,cl
c001bbef:	d3 ea                	shr    edx,cl
c001bbf1:	f6 c1 20             	test   cl,0x20
c001bbf4:	74 02                	je     c001bbf8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bbf6:	89 d0                	mov    eax,edx
c001bbf8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bbfc:	45                   	inc    ebp
c001bbfd:	83 fd 06             	cmp    ebp,0x6
c001bc00:	75 df                	jne    c001bbe1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bc02:	eb 71                	jmp    c001bc75 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bc04:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bc09:	89 f0                	mov    eax,esi
c001bc0b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc12:	0f ac f8 10          	shrd   eax,edi,0x10
c001bc16:	bf 01 00 00 00       	mov    edi,0x1
c001bc1b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bc1f:	c1 ee 18             	shr    esi,0x18
c001bc22:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc27:	eb 53                	jmp    c001bc7c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc29:	6a 00                	push   0x0
c001bc2b:	6a 3f                	push   0x3f
c001bc2d:	57                   	push   edi
c001bc2e:	56                   	push   esi
c001bc2f:	e8 cc 2a 00 00       	call   c001e700 <__umoddi3>
c001bc34:	83 c4 10             	add    esp,0x10
c001bc37:	40                   	inc    eax
c001bc38:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bc3c:	6a 00                	push   0x0
c001bc3e:	68 f0 03 00 00       	push   0x3f0
c001bc43:	57                   	push   edi
c001bc44:	56                   	push   esi
c001bc45:	e8 b6 29 00 00       	call   c001e600 <__udivdi3>
c001bc4a:	83 c4 10             	add    esp,0x10
c001bc4d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bc52:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc59:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc5e:	6a 00                	push   0x0
c001bc60:	6a 3f                	push   0x3f
c001bc62:	57                   	push   edi
c001bc63:	31 ff                	xor    edi,edi
c001bc65:	56                   	push   esi
c001bc66:	e8 95 29 00 00       	call   c001e600 <__udivdi3>
c001bc6b:	83 c4 10             	add    esp,0x10
c001bc6e:	83 e0 0f             	and    eax,0xf
c001bc71:	89 c6                	mov    esi,eax
c001bc73:	eb 07                	jmp    c001bc7c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc75:	31 f6                	xor    esi,esi
c001bc77:	bf 02 00 00 00       	mov    edi,0x2
c001bc7c:	50                   	push   eax
c001bc7d:	6a 00                	push   0x0
c001bc7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc86:	50                   	push   eax
c001bc87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc8b:	e8 b6 f1 ff ff       	call   c001ae46 <IDE::enableIRQs(unsigned char, bool)>
c001bc90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc93:	e8 a6 fe ff ff       	call   c001bb3e <ATA::readyForCommand()>
c001bc98:	83 c4 10             	add    esp,0x10
c001bc9b:	84 c0                	test   al,al
c001bc9d:	75 0a                	jne    c001bca9 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001bc9f:	be 01 00 00 00       	mov    esi,0x1
c001bca4:	e9 9b 02 00 00       	jmp    c001bf44 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bca9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bcaf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bcb5:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bcbc:	c1 e0 04             	shl    eax,0x4
c001bcbf:	09 c6                	or     esi,eax
c001bcc1:	f7 c7 03 00 00 00    	test   edi,0x3
c001bcc7:	75 05                	jne    c001bcce <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001bcc9:	83 ce a0             	or     esi,0xffffffa0
c001bccc:	eb 03                	jmp    c001bcd1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bcce:	83 ce e0             	or     esi,0xffffffe0
c001bcd1:	89 f0                	mov    eax,esi
c001bcd3:	0f b6 f0             	movzx  esi,al
c001bcd6:	56                   	push   esi
c001bcd7:	6a 06                	push   0x6
c001bcd9:	51                   	push   ecx
c001bcda:	52                   	push   edx
c001bcdb:	e8 58 ef ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bce0:	83 c4 10             	add    esp,0x10
c001bce3:	6a 00                	push   0x0
c001bce5:	6a 01                	push   0x1
c001bce7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcee:	50                   	push   eax
c001bcef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcf5:	e8 3e ef ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcfa:	89 f8                	mov    eax,edi
c001bcfc:	83 c4 10             	add    esp,0x10
c001bcff:	0f b6 f0             	movzx  esi,al
c001bd02:	83 fe 02             	cmp    esi,0x2
c001bd05:	75 6e                	jne    c001bd75 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001bd07:	6a 00                	push   0x0
c001bd09:	6a 08                	push   0x8
c001bd0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd12:	50                   	push   eax
c001bd13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd19:	e8 1a ef ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd1e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bd23:	50                   	push   eax
c001bd24:	6a 09                	push   0x9
c001bd26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd2d:	50                   	push   eax
c001bd2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd34:	e8 ff ee ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd39:	83 c4 20             	add    esp,0x20
c001bd3c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bd41:	50                   	push   eax
c001bd42:	6a 0a                	push   0xa
c001bd44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd4b:	50                   	push   eax
c001bd4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd52:	e8 e1 ee ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd57:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bd5c:	50                   	push   eax
c001bd5d:	6a 0b                	push   0xb
c001bd5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd66:	50                   	push   eax
c001bd67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd6d:	e8 c6 ee ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd72:	83 c4 20             	add    esp,0x20
c001bd75:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bd7a:	50                   	push   eax
c001bd7b:	6a 02                	push   0x2
c001bd7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd84:	50                   	push   eax
c001bd85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd8b:	e8 a8 ee ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd90:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bd95:	50                   	push   eax
c001bd96:	6a 03                	push   0x3
c001bd98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd9f:	50                   	push   eax
c001bda0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bda6:	e8 8d ee ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdab:	83 c4 20             	add    esp,0x20
c001bdae:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bdb3:	50                   	push   eax
c001bdb4:	6a 04                	push   0x4
c001bdb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdbd:	50                   	push   eax
c001bdbe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdc4:	e8 6f ee ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bdce:	50                   	push   eax
c001bdcf:	6a 05                	push   0x5
c001bdd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdd8:	50                   	push   eax
c001bdd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bddf:	e8 54 ee ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bde4:	83 c4 20             	add    esp,0x20
c001bde7:	83 fe 02             	cmp    esi,0x2
c001bdea:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001bdef:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001bdf4:	85 c9                	test   ecx,ecx
c001bdf6:	74 07                	je     c001bdff <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001bdf8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bdfd:	75 47                	jne    c001be46 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001bdff:	89 f8                	mov    eax,edi
c001be01:	0f b6 f8             	movzx  edi,al
c001be04:	31 c0                	xor    eax,eax
c001be06:	83 ff 02             	cmp    edi,0x2
c001be09:	0f 95 c0             	setne  al
c001be0c:	89 c6                	mov    esi,eax
c001be0e:	74 0c                	je     c001be1c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001be10:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be15:	b8 30 00 00 00       	mov    eax,0x30
c001be1a:	75 2f                	jne    c001be4b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be20:	83 f2 01             	xor    edx,0x1
c001be23:	85 c9                	test   ecx,ecx
c001be25:	74 09                	je     c001be30 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001be27:	84 d2                	test   dl,dl
c001be29:	b8 24 00 00 00       	mov    eax,0x24
c001be2e:	75 1b                	jne    c001be4b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be30:	85 f6                	test   esi,esi
c001be32:	0f 84 67 fe ff ff    	je     c001bc9f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be38:	84 d2                	test   dl,dl
c001be3a:	b8 20 00 00 00       	mov    eax,0x20
c001be3f:	75 0a                	jne    c001be4b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be41:	e9 59 fe ff ff       	jmp    c001bc9f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be46:	b8 34 00 00 00       	mov    eax,0x34
c001be4b:	50                   	push   eax
c001be4c:	6a 07                	push   0x7
c001be4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be55:	50                   	push   eax
c001be56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be5c:	e8 d7 ed ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be61:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001be65:	83 c4 10             	add    esp,0x10
c001be68:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001be6d:	85 f6                	test   esi,esi
c001be6f:	0f 84 b5 00 00 00    	je     c001bf2a <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001be75:	50                   	push   eax
c001be76:	6a 01                	push   0x1
c001be78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be7f:	50                   	push   eax
c001be80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be86:	e8 91 f8 ff ff       	call   c001b71c <IDE::polling(unsigned char, unsigned int)>
c001be8b:	83 c4 10             	add    esp,0x10
c001be8e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001be94:	0f b6 c0             	movzx  eax,al
c001be97:	85 c0                	test   eax,eax
c001be99:	74 1f                	je     c001beba <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001be9b:	50                   	push   eax
c001be9c:	89 c6                	mov    esi,eax
c001be9e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001bea5:	0f b6 d2             	movzx  edx,dl
c001bea8:	50                   	push   eax
c001bea9:	52                   	push   edx
c001beaa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001beb0:	e8 ad f7 ff ff       	call   c001b662 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001beb5:	e9 87 00 00 00       	jmp    c001bf41 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001beba:	85 ed                	test   ebp,ebp
c001bebc:	74 3b                	je     c001bef9 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001bebe:	31 ff                	xor    edi,edi
c001bec0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bec4:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001bec8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001becd:	50                   	push   eax
c001bece:	50                   	push   eax
c001becf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bed6:	50                   	push   eax
c001bed7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bedd:	e8 44 ed ff ff       	call   c001ac26 <IDE::getBase(unsigned char)>
c001bee2:	89 c2                	mov    edx,eax
c001bee4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bee9:	66 ef                	out    dx,ax
c001beeb:	47                   	inc    edi
c001beec:	83 c4 10             	add    esp,0x10
c001beef:	81 ff 00 01 00 00    	cmp    edi,0x100
c001bef5:	75 c9                	jne    c001bec0 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001bef7:	eb 23                	jmp    c001bf1c <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001bef9:	51                   	push   ecx
c001befa:	0f b6 d2             	movzx  edx,dl
c001befd:	51                   	push   ecx
c001befe:	52                   	push   edx
c001beff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf05:	e8 1c ed ff ff       	call   c001ac26 <IDE::getBase(unsigned char)>
c001bf0a:	b9 00 01 00 00       	mov    ecx,0x100
c001bf0f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bf13:	89 c2                	mov    edx,eax
c001bf15:	fc                   	cld    
c001bf16:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bf24:	4e                   	dec    esi
c001bf25:	e9 43 ff ff ff       	jmp    c001be6d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001bf2a:	31 f6                	xor    esi,esi
c001bf2c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bf31:	74 11                	je     c001bf44 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bf33:	50                   	push   eax
c001bf34:	50                   	push   eax
c001bf35:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bf3a:	50                   	push   eax
c001bf3b:	53                   	push   ebx
c001bf3c:	e8 af fb ff ff       	call   c001baf0 <ATA::flush(bool)>
c001bf41:	83 c4 10             	add    esp,0x10
c001bf44:	83 c4 2c             	add    esp,0x2c
c001bf47:	89 f0                	mov    eax,esi
c001bf49:	5b                   	pop    ebx
c001bf4a:	5e                   	pop    esi
c001bf4b:	5f                   	pop    edi
c001bf4c:	5d                   	pop    ebp
c001bf4d:	c3                   	ret    

c001bf4e <ATA::detectCHS()>:
c001bf4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf52:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bf58:	c1 e0 06             	shl    eax,0x6
c001bf5b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bf61:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bf6b:	c7 44 24 04 68 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b68
c001bf73:	e9 c1 48 ff ff       	jmp    c0010839 <KePanic(char const*)>

c001bf78 <ATA::open(int, int, void*)>:
c001bf78:	53                   	push   ebx
c001bf79:	83 ec 08             	sub    esp,0x8
c001bf7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf88:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf8e:	c1 e0 06             	shl    eax,0x6
c001bf91:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bf97:	01 d0                	add    eax,edx
c001bf99:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bfa0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bfa6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bfad:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bfb7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bfbe:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bfc4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bfcb:	75 0c                	jne    c001bfd9 <ATA::open(int, int, void*)+0x61>
c001bfcd:	83 ec 0c             	sub    esp,0xc
c001bfd0:	53                   	push   ebx
c001bfd1:	e8 78 ff ff ff       	call   c001bf4e <ATA::detectCHS()>
c001bfd6:	83 c4 10             	add    esp,0x10
c001bfd9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bfdf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bfe5:	c1 e0 06             	shl    eax,0x6
c001bfe8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bfef:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bff9:	d1 e8                	shr    eax,1
c001bffb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c001:	6a 04                	push   0x4
c001c003:	6a 0c                	push   0xc
c001c005:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c00c:	50                   	push   eax
c001c00d:	52                   	push   edx
c001c00e:	e8 25 ec ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c013:	90                   	nop
c001c014:	90                   	nop
c001c015:	6a 00                	push   0x0
c001c017:	6a 0c                	push   0xc
c001c019:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c020:	50                   	push   eax
c001c021:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c027:	e8 0c ec ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c02c:	83 c4 14             	add    esp,0x14
c001c02f:	53                   	push   ebx
c001c030:	e8 d1 01 ff ff       	call   c000c206 <PhysicalDisk::startCache()>
c001c035:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c038:	e8 15 14 ff ff       	call   c000d452 <createPartitionsForDisk(PhysicalDisk*)>
c001c03d:	83 c4 18             	add    esp,0x18
c001c040:	31 c0                	xor    eax,eax
c001c042:	5b                   	pop    ebx
c001c043:	c3                   	ret    

c001c044 <combineCharAndColour(char, unsigned char)>:
c001c044:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c049:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c04f:	c1 e0 08             	shl    eax,0x8
c001c052:	09 d0                	or     eax,edx
c001c054:	c3                   	ret    

c001c055 <combineColours(unsigned char, unsigned char)>:
c001c055:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c05a:	c1 e0 04             	shl    eax,0x4
c001c05d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c061:	c3                   	ret    

c001c062 <ATA::read(unsigned long long, int, void*)>:
c001c062:	55                   	push   ebp
c001c063:	57                   	push   edi
c001c064:	56                   	push   esi
c001c065:	be 04 00 00 00       	mov    esi,0x4
c001c06a:	53                   	push   ebx
c001c06b:	83 ec 0c             	sub    esp,0xc
c001c06e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c072:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c076:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c07a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c07e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c081:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c087:	0f 87 a1 01 00 00    	ja     c001c22e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c08d:	85 c9                	test   ecx,ecx
c001c08f:	be 06 00 00 00       	mov    esi,0x6
c001c094:	0f 84 94 01 00 00    	je     c001c22e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c09a:	55                   	push   ebp
c001c09b:	55                   	push   ebp
c001c09c:	6a 00                	push   0x0
c001c09e:	51                   	push   ecx
c001c09f:	53                   	push   ebx
c001c0a0:	52                   	push   edx
c001c0a1:	50                   	push   eax
c001c0a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0a6:	e8 df fa ff ff       	call   c001bb8a <ATA::access(unsigned long long, int, void*, bool)>
c001c0ab:	83 c4 20             	add    esp,0x20
c001c0ae:	85 c0                	test   eax,eax
c001c0b0:	89 c6                	mov    esi,eax
c001c0b2:	0f 85 71 01 00 00    	jne    c001c229 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c0b8:	50                   	push   eax
c001c0b9:	bd 10 27 00 00       	mov    ebp,0x2710
c001c0be:	50                   	push   eax
c001c0bf:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c0c5:	6a 0f                	push   0xf
c001c0c7:	6a 00                	push   0x0
c001c0c9:	89 da                	mov    edx,ebx
c001c0cb:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c0d1:	e8 7f ff ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001c0d6:	59                   	pop    ecx
c001c0d7:	b9 0a 00 00 00       	mov    ecx,0xa
c001c0dc:	5b                   	pop    ebx
c001c0dd:	0f b6 d8             	movzx  ebx,al
c001c0e0:	89 d0                	mov    eax,edx
c001c0e2:	53                   	push   ebx
c001c0e3:	99                   	cdq    
c001c0e4:	f7 fd                	idiv   ebp
c001c0e6:	99                   	cdq    
c001c0e7:	f7 f9                	idiv   ecx
c001c0e9:	83 c2 30             	add    edx,0x30
c001c0ec:	0f b6 d2             	movzx  edx,dl
c001c0ef:	52                   	push   edx
c001c0f0:	e8 4f ff ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c0f5:	5f                   	pop    edi
c001c0f6:	bf e8 03 00 00       	mov    edi,0x3e8
c001c0fb:	5a                   	pop    edx
c001c0fc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c102:	53                   	push   ebx
c001c103:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c108:	99                   	cdq    
c001c109:	f7 ff                	idiv   edi
c001c10b:	99                   	cdq    
c001c10c:	f7 f9                	idiv   ecx
c001c10e:	8d 42 30             	lea    eax,[edx+0x30]
c001c111:	0f b6 c0             	movzx  eax,al
c001c114:	50                   	push   eax
c001c115:	e8 2a ff ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c11a:	5f                   	pop    edi
c001c11b:	bf 64 00 00 00       	mov    edi,0x64
c001c120:	5a                   	pop    edx
c001c121:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c127:	53                   	push   ebx
c001c128:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c12d:	99                   	cdq    
c001c12e:	f7 ff                	idiv   edi
c001c130:	99                   	cdq    
c001c131:	f7 f9                	idiv   ecx
c001c133:	8d 42 30             	lea    eax,[edx+0x30]
c001c136:	0f b6 c0             	movzx  eax,al
c001c139:	50                   	push   eax
c001c13a:	e8 05 ff ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c13f:	5a                   	pop    edx
c001c140:	5a                   	pop    edx
c001c141:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c147:	53                   	push   ebx
c001c148:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c14d:	99                   	cdq    
c001c14e:	f7 f9                	idiv   ecx
c001c150:	99                   	cdq    
c001c151:	f7 f9                	idiv   ecx
c001c153:	8d 42 30             	lea    eax,[edx+0x30]
c001c156:	0f b6 c0             	movzx  eax,al
c001c159:	50                   	push   eax
c001c15a:	e8 e5 fe ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c15f:	5a                   	pop    edx
c001c160:	5a                   	pop    edx
c001c161:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c167:	53                   	push   ebx
c001c168:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c16d:	99                   	cdq    
c001c16e:	f7 f9                	idiv   ecx
c001c170:	83 c2 30             	add    edx,0x30
c001c173:	0f b6 d2             	movzx  edx,dl
c001c176:	52                   	push   edx
c001c177:	e8 c8 fe ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c17c:	5a                   	pop    edx
c001c17d:	5a                   	pop    edx
c001c17e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c184:	53                   	push   ebx
c001c185:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c18a:	99                   	cdq    
c001c18b:	f7 fd                	idiv   ebp
c001c18d:	99                   	cdq    
c001c18e:	f7 f9                	idiv   ecx
c001c190:	8d 42 30             	lea    eax,[edx+0x30]
c001c193:	0f b6 c0             	movzx  eax,al
c001c196:	50                   	push   eax
c001c197:	e8 a8 fe ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c19c:	5d                   	pop    ebp
c001c19d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c1a2:	5a                   	pop    edx
c001c1a3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c1a9:	53                   	push   ebx
c001c1aa:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1af:	99                   	cdq    
c001c1b0:	f7 fd                	idiv   ebp
c001c1b2:	99                   	cdq    
c001c1b3:	f7 f9                	idiv   ecx
c001c1b5:	8d 42 30             	lea    eax,[edx+0x30]
c001c1b8:	0f b6 c0             	movzx  eax,al
c001c1bb:	50                   	push   eax
c001c1bc:	e8 83 fe ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c1c1:	5d                   	pop    ebp
c001c1c2:	5a                   	pop    edx
c001c1c3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c1c9:	53                   	push   ebx
c001c1ca:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1cf:	99                   	cdq    
c001c1d0:	f7 ff                	idiv   edi
c001c1d2:	99                   	cdq    
c001c1d3:	f7 f9                	idiv   ecx
c001c1d5:	8d 42 30             	lea    eax,[edx+0x30]
c001c1d8:	0f b6 c0             	movzx  eax,al
c001c1db:	50                   	push   eax
c001c1dc:	e8 63 fe ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c1e1:	5f                   	pop    edi
c001c1e2:	5d                   	pop    ebp
c001c1e3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c1e9:	53                   	push   ebx
c001c1ea:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1ef:	99                   	cdq    
c001c1f0:	f7 f9                	idiv   ecx
c001c1f2:	99                   	cdq    
c001c1f3:	f7 f9                	idiv   ecx
c001c1f5:	8d 42 30             	lea    eax,[edx+0x30]
c001c1f8:	0f b6 c0             	movzx  eax,al
c001c1fb:	50                   	push   eax
c001c1fc:	e8 43 fe ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c201:	5a                   	pop    edx
c001c202:	5f                   	pop    edi
c001c203:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c209:	53                   	push   ebx
c001c20a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c20f:	99                   	cdq    
c001c210:	f7 f9                	idiv   ecx
c001c212:	83 c2 30             	add    edx,0x30
c001c215:	0f b6 d2             	movzx  edx,dl
c001c218:	52                   	push   edx
c001c219:	e8 26 fe ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c21e:	83 c4 10             	add    esp,0x10
c001c221:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c227:	eb 05                	jmp    c001c22e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c229:	be 01 00 00 00       	mov    esi,0x1
c001c22e:	83 c4 0c             	add    esp,0xc
c001c231:	89 f0                	mov    eax,esi
c001c233:	5b                   	pop    ebx
c001c234:	5e                   	pop    esi
c001c235:	5f                   	pop    edi
c001c236:	5d                   	pop    ebp
c001c237:	c3                   	ret    

c001c238 <ATA::write(unsigned long long, int, void*)>:
c001c238:	55                   	push   ebp
c001c239:	57                   	push   edi
c001c23a:	56                   	push   esi
c001c23b:	be 04 00 00 00       	mov    esi,0x4
c001c240:	53                   	push   ebx
c001c241:	83 ec 0c             	sub    esp,0xc
c001c244:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c248:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c24c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c250:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c254:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c257:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c25d:	0f 87 9c 01 00 00    	ja     c001c3ff <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c263:	85 c9                	test   ecx,ecx
c001c265:	be 06 00 00 00       	mov    esi,0x6
c001c26a:	0f 84 8f 01 00 00    	je     c001c3ff <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c270:	55                   	push   ebp
c001c271:	55                   	push   ebp
c001c272:	6a 01                	push   0x1
c001c274:	51                   	push   ecx
c001c275:	53                   	push   ebx
c001c276:	52                   	push   edx
c001c277:	50                   	push   eax
c001c278:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c27c:	e8 09 f9 ff ff       	call   c001bb8a <ATA::access(unsigned long long, int, void*, bool)>
c001c281:	83 c4 20             	add    esp,0x20
c001c284:	85 c0                	test   eax,eax
c001c286:	89 c6                	mov    esi,eax
c001c288:	0f 85 6c 01 00 00    	jne    c001c3fa <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c28e:	50                   	push   eax
c001c28f:	bd 10 27 00 00       	mov    ebp,0x2710
c001c294:	50                   	push   eax
c001c295:	6a 0f                	push   0xf
c001c297:	6a 00                	push   0x0
c001c299:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c29f:	e8 b1 fd ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001c2a4:	5a                   	pop    edx
c001c2a5:	59                   	pop    ecx
c001c2a6:	b9 0a 00 00 00       	mov    ecx,0xa
c001c2ab:	0f b6 d8             	movzx  ebx,al
c001c2ae:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2b3:	53                   	push   ebx
c001c2b4:	99                   	cdq    
c001c2b5:	f7 fd                	idiv   ebp
c001c2b7:	99                   	cdq    
c001c2b8:	f7 f9                	idiv   ecx
c001c2ba:	8d 42 30             	lea    eax,[edx+0x30]
c001c2bd:	0f b6 c0             	movzx  eax,al
c001c2c0:	50                   	push   eax
c001c2c1:	e8 7e fd ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c2c6:	5f                   	pop    edi
c001c2c7:	bf e8 03 00 00       	mov    edi,0x3e8
c001c2cc:	5a                   	pop    edx
c001c2cd:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c2d3:	53                   	push   ebx
c001c2d4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2d9:	99                   	cdq    
c001c2da:	f7 ff                	idiv   edi
c001c2dc:	99                   	cdq    
c001c2dd:	f7 f9                	idiv   ecx
c001c2df:	8d 42 30             	lea    eax,[edx+0x30]
c001c2e2:	0f b6 c0             	movzx  eax,al
c001c2e5:	50                   	push   eax
c001c2e6:	e8 59 fd ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c2eb:	5f                   	pop    edi
c001c2ec:	bf 64 00 00 00       	mov    edi,0x64
c001c2f1:	5a                   	pop    edx
c001c2f2:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c2f8:	53                   	push   ebx
c001c2f9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2fe:	99                   	cdq    
c001c2ff:	f7 ff                	idiv   edi
c001c301:	99                   	cdq    
c001c302:	f7 f9                	idiv   ecx
c001c304:	8d 42 30             	lea    eax,[edx+0x30]
c001c307:	0f b6 c0             	movzx  eax,al
c001c30a:	50                   	push   eax
c001c30b:	e8 34 fd ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c310:	5a                   	pop    edx
c001c311:	5a                   	pop    edx
c001c312:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c318:	53                   	push   ebx
c001c319:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c31e:	99                   	cdq    
c001c31f:	f7 f9                	idiv   ecx
c001c321:	99                   	cdq    
c001c322:	f7 f9                	idiv   ecx
c001c324:	8d 42 30             	lea    eax,[edx+0x30]
c001c327:	0f b6 c0             	movzx  eax,al
c001c32a:	50                   	push   eax
c001c32b:	e8 14 fd ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c330:	5a                   	pop    edx
c001c331:	5a                   	pop    edx
c001c332:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c338:	53                   	push   ebx
c001c339:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c33e:	99                   	cdq    
c001c33f:	f7 f9                	idiv   ecx
c001c341:	83 c2 30             	add    edx,0x30
c001c344:	0f b6 d2             	movzx  edx,dl
c001c347:	52                   	push   edx
c001c348:	e8 f7 fc ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c34d:	5a                   	pop    edx
c001c34e:	5a                   	pop    edx
c001c34f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c355:	53                   	push   ebx
c001c356:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c35b:	99                   	cdq    
c001c35c:	f7 fd                	idiv   ebp
c001c35e:	99                   	cdq    
c001c35f:	f7 f9                	idiv   ecx
c001c361:	8d 42 30             	lea    eax,[edx+0x30]
c001c364:	0f b6 c0             	movzx  eax,al
c001c367:	50                   	push   eax
c001c368:	e8 d7 fc ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c36d:	5d                   	pop    ebp
c001c36e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c373:	5a                   	pop    edx
c001c374:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c37a:	53                   	push   ebx
c001c37b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c380:	99                   	cdq    
c001c381:	f7 fd                	idiv   ebp
c001c383:	99                   	cdq    
c001c384:	f7 f9                	idiv   ecx
c001c386:	8d 42 30             	lea    eax,[edx+0x30]
c001c389:	0f b6 c0             	movzx  eax,al
c001c38c:	50                   	push   eax
c001c38d:	e8 b2 fc ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c392:	5d                   	pop    ebp
c001c393:	5a                   	pop    edx
c001c394:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c39a:	53                   	push   ebx
c001c39b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3a0:	99                   	cdq    
c001c3a1:	f7 ff                	idiv   edi
c001c3a3:	99                   	cdq    
c001c3a4:	f7 f9                	idiv   ecx
c001c3a6:	8d 42 30             	lea    eax,[edx+0x30]
c001c3a9:	0f b6 c0             	movzx  eax,al
c001c3ac:	50                   	push   eax
c001c3ad:	e8 92 fc ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c3b2:	5f                   	pop    edi
c001c3b3:	5d                   	pop    ebp
c001c3b4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c3ba:	53                   	push   ebx
c001c3bb:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3c0:	99                   	cdq    
c001c3c1:	f7 f9                	idiv   ecx
c001c3c3:	99                   	cdq    
c001c3c4:	f7 f9                	idiv   ecx
c001c3c6:	8d 42 30             	lea    eax,[edx+0x30]
c001c3c9:	0f b6 c0             	movzx  eax,al
c001c3cc:	50                   	push   eax
c001c3cd:	e8 72 fc ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c3d2:	5a                   	pop    edx
c001c3d3:	5f                   	pop    edi
c001c3d4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c3da:	53                   	push   ebx
c001c3db:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3e0:	99                   	cdq    
c001c3e1:	f7 f9                	idiv   ecx
c001c3e3:	83 c2 30             	add    edx,0x30
c001c3e6:	0f b6 d2             	movzx  edx,dl
c001c3e9:	52                   	push   edx
c001c3ea:	e8 55 fc ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001c3ef:	83 c4 10             	add    esp,0x10
c001c3f2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c3f8:	eb 05                	jmp    c001c3ff <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c3fa:	be 01 00 00 00       	mov    esi,0x1
c001c3ff:	83 c4 0c             	add    esp,0xc
c001c402:	89 f0                	mov    eax,esi
c001c404:	5b                   	pop    ebx
c001c405:	5e                   	pop    esi
c001c406:	5f                   	pop    edi
c001c407:	5d                   	pop    ebp
c001c408:	c3                   	ret    
c001c409:	90                   	nop

c001c40a <ATAPI::write(unsigned long long, int, void*)>:
c001c40a:	b8 03 00 00 00       	mov    eax,0x3
c001c40f:	c3                   	ret    

c001c410 <ATAPI::close(int, int, void*)>:
c001c410:	83 ec 0c             	sub    esp,0xc
c001c413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c417:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c41d:	85 c0                	test   eax,eax
c001c41f:	74 0c                	je     c001c42d <ATAPI::close(int, int, void*)+0x1d>
c001c421:	8b 10                	mov    edx,DWORD PTR [eax]
c001c423:	83 ec 0c             	sub    esp,0xc
c001c426:	50                   	push   eax
c001c427:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c42a:	83 c4 10             	add    esp,0x10
c001c42d:	31 c0                	xor    eax,eax
c001c42f:	83 c4 0c             	add    esp,0xc
c001c432:	c3                   	ret    
c001c433:	90                   	nop

c001c434 <ATAPI::ATAPI()>:
c001c434:	83 ec 0c             	sub    esp,0xc
c001c437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43b:	83 ec 04             	sub    esp,0x4
c001c43e:	68 00 08 00 00       	push   0x800
c001c443:	68 b1 1c 02 c0       	push   0xc0021cb1
c001c448:	50                   	push   eax
c001c449:	e8 50 fd fe ff       	call   c000c19e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c001c456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45a:	89 10                	mov    DWORD PTR [eax],edx
c001c45c:	90                   	nop
c001c45d:	83 c4 0c             	add    esp,0xc
c001c460:	c3                   	ret    
c001c461:	90                   	nop

c001c462 <ATAPI::readyForCommand()>:
c001c462:	56                   	push   esi
c001c463:	53                   	push   ebx
c001c464:	53                   	push   ebx
c001c465:	31 db                	xor    ebx,ebx
c001c467:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c46b:	51                   	push   ecx
c001c46c:	6a 0c                	push   0xc
c001c46e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c475:	50                   	push   eax
c001c476:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c47c:	e8 77 e8 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	a8 88                	test   al,0x88
c001c486:	74 25                	je     c001c4ad <ATAPI::readyForCommand()+0x4b>
c001c488:	43                   	inc    ebx
c001c489:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c48f:	7e da                	jle    c001c46b <ATAPI::readyForCommand()+0x9>
c001c491:	83 ec 0c             	sub    esp,0xc
c001c494:	68 5e 01 00 00       	push   0x15e
c001c499:	e8 b2 8e ff ff       	call   c0015350 <milliTenthSleep(unsigned int)>
c001c49e:	83 c4 10             	add    esp,0x10
c001c4a1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c4a7:	75 c2                	jne    c001c46b <ATAPI::readyForCommand()+0x9>
c001c4a9:	31 c0                	xor    eax,eax
c001c4ab:	eb 02                	jmp    c001c4af <ATAPI::readyForCommand()+0x4d>
c001c4ad:	b0 01                	mov    al,0x1
c001c4af:	5a                   	pop    edx
c001c4b0:	5b                   	pop    ebx
c001c4b1:	5e                   	pop    esi
c001c4b2:	c3                   	ret    
c001c4b3:	90                   	nop

c001c4b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c4b4:	55                   	push   ebp
c001c4b5:	57                   	push   edi
c001c4b6:	56                   	push   esi
c001c4b7:	53                   	push   ebx
c001c4b8:	83 ec 20             	sub    esp,0x20
c001c4bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c4bf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c4c3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c4c7:	6a 01                	push   0x1
c001c4c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4d0:	50                   	push   eax
c001c4d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4d7:	e8 6a e9 ff ff       	call   c001ae46 <IDE::enableIRQs(unsigned char, bool)>
c001c4dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4e3:	59                   	pop    ecx
c001c4e4:	5e                   	pop    esi
c001c4e5:	50                   	push   eax
c001c4e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4ec:	e8 21 e7 ff ff       	call   c001ac12 <IDE::prepareInterrupt(unsigned char)>
c001c4f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4f4:	e8 69 ff ff ff       	call   c001c462 <ATAPI::readyForCommand()>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	84 c0                	test   al,al
c001c4fe:	75 0a                	jne    c001c50a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c500:	bb 01 00 00 00       	mov    ebx,0x1
c001c505:	e9 5f 02 00 00       	jmp    c001c769 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c50a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c510:	c1 e0 04             	shl    eax,0x4
c001c513:	0f b6 c0             	movzx  eax,al
c001c516:	50                   	push   eax
c001c517:	6a 06                	push   0x6
c001c519:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c520:	50                   	push   eax
c001c521:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c527:	e8 0c e7 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c52c:	6a 00                	push   0x0
c001c52e:	6a 01                	push   0x1
c001c530:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c537:	50                   	push   eax
c001c538:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c53e:	e8 f5 e6 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c543:	83 c4 20             	add    esp,0x20
c001c546:	0f b6 c3             	movzx  eax,bl
c001c549:	50                   	push   eax
c001c54a:	0f b6 df             	movzx  ebx,bh
c001c54d:	6a 04                	push   0x4
c001c54f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c556:	50                   	push   eax
c001c557:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c55d:	e8 d6 e6 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c562:	53                   	push   ebx
c001c563:	6a 05                	push   0x5
c001c565:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c56c:	50                   	push   eax
c001c56d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c573:	e8 c0 e6 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c578:	83 c4 20             	add    esp,0x20
c001c57b:	68 a0 00 00 00       	push   0xa0
c001c580:	6a 07                	push   0x7
c001c582:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c589:	50                   	push   eax
c001c58a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c590:	e8 a3 e6 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c595:	83 c4 0c             	add    esp,0xc
c001c598:	6a 01                	push   0x1
c001c59a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5a1:	50                   	push   eax
c001c5a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5a8:	e8 6f f1 ff ff       	call   c001b71c <IDE::polling(unsigned char, unsigned int)>
c001c5ad:	83 c4 10             	add    esp,0x10
c001c5b0:	0f b6 d8             	movzx  ebx,al
c001c5b3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c5b9:	85 db                	test   ebx,ebx
c001c5bb:	74 20                	je     c001c5dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c5bd:	53                   	push   ebx
c001c5be:	0f b6 c0             	movzx  eax,al
c001c5c1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c5c8:	52                   	push   edx
c001c5c9:	50                   	push   eax
c001c5ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5d0:	e8 8d f0 ff ff       	call   c001b662 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c5d5:	83 c4 10             	add    esp,0x10
c001c5d8:	e9 8c 01 00 00       	jmp    c001c769 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c5dd:	52                   	push   edx
c001c5de:	0f b6 c0             	movzx  eax,al
c001c5e1:	52                   	push   edx
c001c5e2:	50                   	push   eax
c001c5e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5e9:	e8 38 e6 ff ff       	call   c001ac26 <IDE::getBase(unsigned char)>
c001c5ee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c5f2:	b9 06 00 00 00       	mov    ecx,0x6
c001c5f7:	89 c2                	mov    edx,eax
c001c5f9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c5fc:	89 e8                	mov    eax,ebp
c001c5fe:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c602:	83 c4 10             	add    esp,0x10
c001c605:	0f b6 c0             	movzx  eax,al
c001c608:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c60c:	85 db                	test   ebx,ebx
c001c60e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c614:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c61b:	0f 84 eb 00 00 00    	je     c001c70c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c621:	55                   	push   ebp
c001c622:	55                   	push   ebp
c001c623:	52                   	push   edx
c001c624:	50                   	push   eax
c001c625:	e8 82 e7 ff ff       	call   c001adac <IDE::waitInterrupt(unsigned char)>
c001c62a:	83 c4 10             	add    esp,0x10
c001c62d:	84 c0                	test   al,al
c001c62f:	0f 84 cb fe ff ff    	je     c001c500 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c635:	56                   	push   esi
c001c636:	56                   	push   esi
c001c637:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c63e:	50                   	push   eax
c001c63f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c645:	e8 c8 e5 ff ff       	call   c001ac12 <IDE::prepareInterrupt(unsigned char)>
c001c64a:	83 c4 0c             	add    esp,0xc
c001c64d:	6a 04                	push   0x4
c001c64f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c656:	50                   	push   eax
c001c657:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c65d:	e8 96 e6 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001c662:	83 c4 0c             	add    esp,0xc
c001c665:	6a 05                	push   0x5
c001c667:	89 c6                	mov    esi,eax
c001c669:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c670:	50                   	push   eax
c001c671:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c677:	e8 7c e6 ff ff       	call   c001acf8 <IDE::read(unsigned char, unsigned char)>
c001c67c:	83 c4 10             	add    esp,0x10
c001c67f:	0f b6 e8             	movzx  ebp,al
c001c682:	89 f0                	mov    eax,esi
c001c684:	c1 e5 08             	shl    ebp,0x8
c001c687:	0f b6 f0             	movzx  esi,al
c001c68a:	09 f5                	or     ebp,esi
c001c68c:	31 f6                	xor    esi,esi
c001c68e:	d1 fd                	sar    ebp,1
c001c690:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c695:	74 5c                	je     c001c6f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001c697:	39 ee                	cmp    esi,ebp
c001c699:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c69f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c6a6:	75 0d                	jne    c001c6b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001c6a8:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c6ab:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001c6af:	4b                   	dec    ebx
c001c6b0:	e9 57 ff ff ff       	jmp    c001c60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001c6b5:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c6b9:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001c6bd:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001c6c2:	51                   	push   ecx
c001c6c3:	51                   	push   ecx
c001c6c4:	52                   	push   edx
c001c6c5:	50                   	push   eax
c001c6c6:	e8 5b e5 ff ff       	call   c001ac26 <IDE::getBase(unsigned char)>
c001c6cb:	89 c2                	mov    edx,eax
c001c6cd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001c6d2:	66 ef                	out    dx,ax
c001c6d4:	46                   	inc    esi
c001c6d5:	83 c4 10             	add    esp,0x10
c001c6d8:	eb bd                	jmp    c001c697 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001c6da:	51                   	push   ecx
c001c6db:	51                   	push   ecx
c001c6dc:	52                   	push   edx
c001c6dd:	50                   	push   eax
c001c6de:	e8 43 e5 ff ff       	call   c001ac26 <IDE::getBase(unsigned char)>
c001c6e3:	89 c2                	mov    edx,eax
c001c6e5:	66 ed                	in     ax,dx
c001c6e7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c6eb:	83 c4 10             	add    esp,0x10
c001c6ee:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001c6f2:	46                   	inc    esi
c001c6f3:	39 ee                	cmp    esi,ebp
c001c6f5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c6fb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c702:	75 d6                	jne    c001c6da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c704:	01 f6                	add    esi,esi
c001c706:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001c70a:	eb a3                	jmp    c001c6af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001c70c:	51                   	push   ecx
c001c70d:	51                   	push   ecx
c001c70e:	52                   	push   edx
c001c70f:	50                   	push   eax
c001c710:	e8 97 e6 ff ff       	call   c001adac <IDE::waitInterrupt(unsigned char)>
c001c715:	83 c4 10             	add    esp,0x10
c001c718:	84 c0                	test   al,al
c001c71a:	0f 84 e0 fd ff ff    	je     c001c500 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c720:	52                   	push   edx
c001c721:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c726:	52                   	push   edx
c001c727:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c72e:	50                   	push   eax
c001c72f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c735:	e8 d8 e4 ff ff       	call   c001ac12 <IDE::prepareInterrupt(unsigned char)>
c001c73a:	83 c4 10             	add    esp,0x10
c001c73d:	50                   	push   eax
c001c73e:	50                   	push   eax
c001c73f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c746:	50                   	push   eax
c001c747:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c74d:	e8 d4 e4 ff ff       	call   c001ac26 <IDE::getBase(unsigned char)>
c001c752:	8d 50 07             	lea    edx,[eax+0x7]
c001c755:	ec                   	in     al,dx
c001c756:	83 c4 10             	add    esp,0x10
c001c759:	a8 88                	test   al,0x88
c001c75b:	74 0a                	je     c001c767 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c75d:	4b                   	dec    ebx
c001c75e:	75 dd                	jne    c001c73d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c760:	bb 02 00 00 00       	mov    ebx,0x2
c001c765:	eb 02                	jmp    c001c769 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c767:	31 db                	xor    ebx,ebx
c001c769:	83 c4 1c             	add    esp,0x1c
c001c76c:	89 d8                	mov    eax,ebx
c001c76e:	5b                   	pop    ebx
c001c76f:	5e                   	pop    esi
c001c770:	5f                   	pop    edi
c001c771:	5d                   	pop    ebp
c001c772:	c3                   	ret    
c001c773:	90                   	nop

c001c774 <ATAPI::diskRemoved()>:
c001c774:	53                   	push   ebx
c001c775:	83 ec 14             	sub    esp,0x14
c001c778:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c77c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c783:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c789:	e8 b2 09 ff ff       	call   c000d140 <LogicalDisk::unmount()>
c001c78e:	58                   	pop    eax
c001c78f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c795:	e8 8a 13 ff ff       	call   c000db24 <VCache::writeWriteBuffer()>
c001c79a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c7a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7a4:	83 c4 18             	add    esp,0x18
c001c7a7:	5b                   	pop    ebx
c001c7a8:	e9 67 13 ff ff       	jmp    c000db14 <VCache::invalidateReadBuffer()>
c001c7ad:	90                   	nop

c001c7ae <ATAPI::eject()>:
c001c7ae:	57                   	push   edi
c001c7af:	b9 03 00 00 00       	mov    ecx,0x3
c001c7b4:	53                   	push   ebx
c001c7b5:	83 ec 14             	sub    esp,0x14
c001c7b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7bc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c7c0:	fc                   	cld    
c001c7c1:	31 c0                	xor    eax,eax
c001c7c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c7c5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c7ca:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c7cf:	50                   	push   eax
c001c7d0:	50                   	push   eax
c001c7d1:	6a 00                	push   0x0
c001c7d3:	6a 00                	push   0x0
c001c7d5:	6a 00                	push   0x0
c001c7d7:	6a 02                	push   0x2
c001c7d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7dd:	50                   	push   eax
c001c7de:	53                   	push   ebx
c001c7df:	e8 d0 fc ff ff       	call   c001c4b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7e4:	83 c4 14             	add    esp,0x14
c001c7e7:	53                   	push   ebx
c001c7e8:	e8 87 ff ff ff       	call   c001c774 <ATAPI::diskRemoved()>
c001c7ed:	83 c4 24             	add    esp,0x24
c001c7f0:	31 c0                	xor    eax,eax
c001c7f2:	5b                   	pop    ebx
c001c7f3:	5f                   	pop    edi
c001c7f4:	c3                   	ret    
c001c7f5:	90                   	nop

c001c7f6 <ATAPI::diskInserted()>:
c001c7f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7fa:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c801:	c3                   	ret    

c001c802 <ATAPI::detectMedia()>:
c001c802:	56                   	push   esi
c001c803:	53                   	push   ebx
c001c804:	83 ec 28             	sub    esp,0x28
c001c807:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c80b:	6a 0c                	push   0xc
c001c80d:	6a 00                	push   0x0
c001c80f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c813:	56                   	push   esi
c001c814:	e8 d7 3c fe ff       	call   c00004f0 <memset>
c001c819:	58                   	pop    eax
c001c81a:	5a                   	pop    edx
c001c81b:	6a 00                	push   0x0
c001c81d:	6a 00                	push   0x0
c001c81f:	6a 00                	push   0x0
c001c821:	6a 00                	push   0x0
c001c823:	56                   	push   esi
c001c824:	53                   	push   ebx
c001c825:	e8 8a fc ff ff       	call   c001c4b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c82a:	83 c4 1c             	add    esp,0x1c
c001c82d:	6a 0c                	push   0xc
c001c82f:	6a 00                	push   0x0
c001c831:	56                   	push   esi
c001c832:	e8 b9 3c fe ff       	call   c00004f0 <memset>
c001c837:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c83c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c841:	59                   	pop    ecx
c001c842:	58                   	pop    eax
c001c843:	6a 01                	push   0x1
c001c845:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c849:	50                   	push   eax
c001c84a:	6a 00                	push   0x0
c001c84c:	6a 12                	push   0x12
c001c84e:	56                   	push   esi
c001c84f:	53                   	push   ebx
c001c850:	e8 5f fc ff ff       	call   c001c4b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c855:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c859:	83 c4 20             	add    esp,0x20
c001c85c:	83 e0 7f             	and    eax,0x7f
c001c85f:	83 f8 70             	cmp    eax,0x70
c001c862:	74 15                	je     c001c879 <ATAPI::detectMedia()+0x77>
c001c864:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c86b:	75 0c                	jne    c001c879 <ATAPI::detectMedia()+0x77>
c001c86d:	83 ec 0c             	sub    esp,0xc
c001c870:	53                   	push   ebx
c001c871:	e8 80 ff ff ff       	call   c001c7f6 <ATAPI::diskInserted()>
c001c876:	83 c4 10             	add    esp,0x10
c001c879:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c87d:	83 e0 0f             	and    eax,0xf
c001c880:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c885:	0f b6 c0             	movzx  eax,al
c001c888:	75 19                	jne    c001c8a3 <ATAPI::detectMedia()+0xa1>
c001c88a:	83 f8 02             	cmp    eax,0x2
c001c88d:	75 14                	jne    c001c8a3 <ATAPI::detectMedia()+0xa1>
c001c88f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c896:	74 24                	je     c001c8bc <ATAPI::detectMedia()+0xba>
c001c898:	83 ec 0c             	sub    esp,0xc
c001c89b:	53                   	push   ebx
c001c89c:	e8 d3 fe ff ff       	call   c001c774 <ATAPI::diskRemoved()>
c001c8a1:	eb 16                	jmp    c001c8b9 <ATAPI::detectMedia()+0xb7>
c001c8a3:	85 c0                	test   eax,eax
c001c8a5:	75 15                	jne    c001c8bc <ATAPI::detectMedia()+0xba>
c001c8a7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8ae:	75 0c                	jne    c001c8bc <ATAPI::detectMedia()+0xba>
c001c8b0:	83 ec 0c             	sub    esp,0xc
c001c8b3:	53                   	push   ebx
c001c8b4:	e8 3d ff ff ff       	call   c001c7f6 <ATAPI::diskInserted()>
c001c8b9:	83 c4 10             	add    esp,0x10
c001c8bc:	83 c4 24             	add    esp,0x24
c001c8bf:	5b                   	pop    ebx
c001c8c0:	5e                   	pop    esi
c001c8c1:	c3                   	ret    

c001c8c2 <ATAPI::open(int, int, void*)>:
c001c8c2:	56                   	push   esi
c001c8c3:	53                   	push   ebx
c001c8c4:	50                   	push   eax
c001c8c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8d1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c8d7:	c1 e0 06             	shl    eax,0x6
c001c8da:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c8e0:	01 d0                	add    eax,edx
c001c8e2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c8e9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c8ef:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c8f6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c900:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c907:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c90d:	6a 04                	push   0x4
c001c90f:	6a 0c                	push   0xc
c001c911:	51                   	push   ecx
c001c912:	52                   	push   edx
c001c913:	e8 20 e3 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c918:	90                   	nop
c001c919:	90                   	nop
c001c91a:	6a 00                	push   0x0
c001c91c:	6a 0c                	push   0xc
c001c91e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c925:	50                   	push   eax
c001c926:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c92c:	e8 07 e3 ff ff       	call   c001ac38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c931:	83 c4 14             	add    esp,0x14
c001c934:	68 78 01 00 00       	push   0x178
c001c939:	e8 8d b1 fe ff       	call   c0007acb <malloc>
c001c93e:	83 c4 0c             	add    esp,0xc
c001c941:	6a 00                	push   0x0
c001c943:	68 ff ff ff 7f       	push   0x7fffffff
c001c948:	6a 00                	push   0x0
c001c94a:	6a 00                	push   0x0
c001c94c:	53                   	push   ebx
c001c94d:	68 63 1d 02 c0       	push   0xc0021d63
c001c952:	89 c6                	mov    esi,eax
c001c954:	50                   	push   eax
c001c955:	e8 24 06 ff ff       	call   c000cf7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c95a:	83 c4 14             	add    esp,0x14
c001c95d:	56                   	push   esi
c001c95e:	e8 db 06 ff ff       	call   c000d03e <LogicalDisk::assignDriveLetter()>
c001c963:	5a                   	pop    edx
c001c964:	59                   	pop    ecx
c001c965:	0f be c0             	movsx  eax,al
c001c968:	50                   	push   eax
c001c969:	68 b4 1b 02 c0       	push   0xc0021bb4
c001c96e:	e8 fc df fe ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001c973:	58                   	pop    eax
c001c974:	5a                   	pop    edx
c001c975:	56                   	push   esi
c001c976:	53                   	push   ebx
c001c977:	e8 54 f4 fe ff       	call   c000bdd0 <Device::addChild(Device*)>
c001c97c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c982:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c985:	e8 7c f8 fe ff       	call   c000c206 <PhysicalDisk::startCache()>
c001c98a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c994:	e8 69 fe ff ff       	call   c001c802 <ATAPI::detectMedia()>
c001c999:	83 c4 14             	add    esp,0x14
c001c99c:	31 c0                	xor    eax,eax
c001c99e:	5b                   	pop    ebx
c001c99f:	5e                   	pop    esi
c001c9a0:	c3                   	ret    
c001c9a1:	90                   	nop

c001c9a2 <ATAPI::read(unsigned long long, int, void*)>:
c001c9a2:	55                   	push   ebp
c001c9a3:	57                   	push   edi
c001c9a4:	56                   	push   esi
c001c9a5:	53                   	push   ebx
c001c9a6:	83 ec 1c             	sub    esp,0x1c
c001c9a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c9ad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c9b1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c9b5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9bc:	74 3c                	je     c001c9fa <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c9be:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c9c2:	b9 03 00 00 00       	mov    ecx,0x3
c001c9c7:	fc                   	cld    
c001c9c8:	31 c0                	xor    eax,eax
c001c9ca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c9cc:	89 e8                	mov    eax,ebp
c001c9ce:	0f ce                	bswap  esi
c001c9d0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c9d4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c9d9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c9dd:	50                   	push   eax
c001c9de:	50                   	push   eax
c001c9df:	55                   	push   ebp
c001c9e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c9e4:	c1 e5 0b             	shl    ebp,0xb
c001c9e7:	6a 00                	push   0x0
c001c9e9:	55                   	push   ebp
c001c9ea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c9ee:	50                   	push   eax
c001c9ef:	53                   	push   ebx
c001c9f0:	e8 bf fa ff ff       	call   c001c4b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c9f5:	83 c4 20             	add    esp,0x20
c001c9f8:	eb 1a                	jmp    c001ca14 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c9fa:	83 ec 0c             	sub    esp,0xc
c001c9fd:	53                   	push   ebx
c001c9fe:	e8 ff fd ff ff       	call   c001c802 <ATAPI::detectMedia()>
c001ca03:	83 c4 10             	add    esp,0x10
c001ca06:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca0d:	75 af                	jne    c001c9be <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ca0f:	b8 02 00 00 00       	mov    eax,0x2
c001ca14:	83 c4 1c             	add    esp,0x1c
c001ca17:	5b                   	pop    ebx
c001ca18:	5e                   	pop    esi
c001ca19:	5f                   	pop    edi
c001ca1a:	5d                   	pop    ebp
c001ca1b:	c3                   	ret    

c001ca1c <SATA::close(int, int, void*)>:
c001ca1c:	83 ec 0c             	sub    esp,0xc
c001ca1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca29:	85 c0                	test   eax,eax
c001ca2b:	74 0c                	je     c001ca39 <SATA::close(int, int, void*)+0x1d>
c001ca2d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca2f:	83 ec 0c             	sub    esp,0xc
c001ca32:	50                   	push   eax
c001ca33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca36:	83 c4 10             	add    esp,0x10
c001ca39:	31 c0                	xor    eax,eax
c001ca3b:	83 c4 0c             	add    esp,0xc
c001ca3e:	c3                   	ret    
c001ca3f:	90                   	nop

c001ca40 <SATA::powerSaving(PowerSavingLevel)>:
c001ca40:	c3                   	ret    
c001ca41:	90                   	nop

c001ca42 <SATA::open(int, int, void*)>:
c001ca42:	56                   	push   esi
c001ca43:	53                   	push   ebx
c001ca44:	50                   	push   eax
c001ca45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca4d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ca57:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ca5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca61:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ca6b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca75:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ca7c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ca82:	e8 4f b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001ca87:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ca8d:	89 c6                	mov    esi,eax
c001ca8f:	e8 42 b3 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001ca94:	81 c6 00 10 00 00    	add    esi,0x1000
c001ca9a:	39 c6                	cmp    esi,eax
c001ca9c:	74 10                	je     c001caae <SATA::open(int, int, void*)+0x6c>
c001ca9e:	83 ec 0c             	sub    esp,0xc
c001caa1:	68 fc 1b 02 c0       	push   0xc0021bfc
c001caa6:	e8 8e 3d ff ff       	call   c0010839 <KePanic(char const*)>
c001caab:	83 c4 10             	add    esp,0x10
c001caae:	83 ec 0c             	sub    esp,0xc
c001cab1:	6a 02                	push   0x2
c001cab3:	e8 4d cb fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001cab8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cabe:	6a 03                	push   0x3
c001cac0:	50                   	push   eax
c001cac1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001cac7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001cacd:	e8 12 d2 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cad2:	83 c4 14             	add    esp,0x14
c001cad5:	53                   	push   ebx
c001cad6:	e8 2b f7 fe ff       	call   c000c206 <PhysicalDisk::startCache()>
c001cadb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cade:	e8 6f 09 ff ff       	call   c000d452 <createPartitionsForDisk(PhysicalDisk*)>
c001cae3:	83 c4 14             	add    esp,0x14
c001cae6:	31 c0                	xor    eax,eax
c001cae8:	5b                   	pop    ebx
c001cae9:	5e                   	pop    esi
c001caea:	c3                   	ret    
c001caeb:	90                   	nop

c001caec <SATA::SATA()>:
c001caec:	83 ec 0c             	sub    esp,0xc
c001caef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf3:	83 ec 04             	sub    esp,0x4
c001caf6:	68 00 02 00 00       	push   0x200
c001cafb:	68 10 1c 02 c0       	push   0xc0021c10
c001cb00:	50                   	push   eax
c001cb01:	e8 98 f6 fe ff       	call   c000c19e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb06:	83 c4 10             	add    esp,0x10
c001cb09:	ba 80 1c 02 c0       	mov    edx,0xc0021c80
c001cb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb12:	89 10                	mov    DWORD PTR [eax],edx
c001cb14:	90                   	nop
c001cb15:	83 c4 0c             	add    esp,0xc
c001cb18:	c3                   	ret    
c001cb19:	90                   	nop

c001cb1a <SATA::access(unsigned long long, int, void*, bool)>:
c001cb1a:	55                   	push   ebp
c001cb1b:	57                   	push   edi
c001cb1c:	56                   	push   esi
c001cb1d:	53                   	push   ebx
c001cb1e:	83 ec 2c             	sub    esp,0x2c
c001cb21:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cb25:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb2a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cb2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cb36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb3a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cb3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb42:	7e 10                	jle    c001cb54 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001cb44:	83 ec 0c             	sub    esp,0xc
c001cb47:	68 20 1c 02 c0       	push   0xc0021c20
c001cb4c:	e8 e8 3c ff ff       	call   c0010839 <KePanic(char const*)>
c001cb51:	83 c4 10             	add    esp,0x10
c001cb54:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cb5a:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cb60:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cb66:	89 e8                	mov    eax,ebp
c001cb68:	c1 e0 07             	shl    eax,0x7
c001cb6b:	01 d0                	add    eax,edx
c001cb6d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cb77:	8d 45 02             	lea    eax,[ebp+0x2]
c001cb7a:	51                   	push   ecx
c001cb7b:	c1 e0 07             	shl    eax,0x7
c001cb7e:	51                   	push   ecx
c001cb7f:	01 d0                	add    eax,edx
c001cb81:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cb85:	50                   	push   eax
c001cb86:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cb8c:	e8 6b ec ff ff       	call   c001b7fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cb91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb95:	83 c4 10             	add    esp,0x10
c001cb98:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cb9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cba1:	0f 84 5b 01 00 00    	je     c001cd02 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cba7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cbab:	c1 e0 09             	shl    eax,0x9
c001cbae:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cbb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cbb7:	74 0e                	je     c001cbc7 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cbb9:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cbbf:	89 c1                	mov    ecx,eax
c001cbc1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cbc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cbc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cbcb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cbd1:	8d 45 02             	lea    eax,[ebp+0x2]
c001cbd4:	c1 e0 07             	shl    eax,0x7
c001cbd7:	01 d0                	add    eax,edx
c001cbd9:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbdb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cbe1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cbe7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cbeb:	c1 e1 05             	shl    ecx,0x5
c001cbee:	01 c8                	add    eax,ecx
c001cbf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cbf4:	83 e1 01             	and    ecx,0x1
c001cbf7:	89 ce                	mov    esi,ecx
c001cbf9:	8a 08                	mov    cl,BYTE PTR [eax]
c001cbfb:	c1 e6 06             	shl    esi,0x6
c001cbfe:	83 e1 bf             	and    ecx,0xffffffbf
c001cc01:	09 f1                	or     ecx,esi
c001cc03:	88 08                	mov    BYTE PTR [eax],cl
c001cc05:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc07:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cc0d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cc13:	89 08                	mov    DWORD PTR [eax],ecx
c001cc15:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc1b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cc21:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cc27:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cc2a:	50                   	push   eax
c001cc2b:	68 90 00 00 00       	push   0x90
c001cc30:	6a 00                	push   0x0
c001cc32:	56                   	push   esi
c001cc33:	e8 b8 38 fe ff       	call   c00004f0 <memset>
c001cc38:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc3e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cc44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc48:	83 c4 10             	add    esp,0x10
c001cc4b:	48                   	dec    eax
c001cc4c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc51:	89 c1                	mov    ecx,eax
c001cc53:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cc59:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc5e:	09 c8                	or     eax,ecx
c001cc60:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cc66:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cc6c:	83 c8 80             	or     eax,0xffffff80
c001cc6f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cc75:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cc78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc7c:	25 00 7f 00 00       	and    eax,0x7f00
c001cc81:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cc86:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cc8b:	66 89 06             	mov    WORD PTR [esi],ax
c001cc8e:	b0 35                	mov    al,0x35
c001cc90:	75 02                	jne    c001cc94 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001cc92:	b0 25                	mov    al,0x25
c001cc94:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cc97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc9b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cc9f:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001cca3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cca7:	c1 e8 10             	shr    eax,0x10
c001ccaa:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ccad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccb1:	c1 e8 18             	shr    eax,0x18
c001ccb4:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ccb7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ccbb:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ccbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccc2:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ccc5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ccc9:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cccd:	89 ee                	mov    esi,ebp
c001cccf:	31 c0                	xor    eax,eax
c001ccd1:	c1 e6 07             	shl    esi,0x7
c001ccd4:	01 d6                	add    esi,edx
c001ccd6:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ccdc:	80 e1 88             	and    cl,0x88
c001ccdf:	74 0a                	je     c001cceb <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cce1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cce6:	74 0a                	je     c001ccf2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cce8:	40                   	inc    eax
c001cce9:	eb eb                	jmp    c001ccd6 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cceb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccf0:	75 17                	jne    c001cd09 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001ccf2:	83 ec 0c             	sub    esp,0xc
c001ccf5:	68 59 1c 02 c0       	push   0xc0021c59
c001ccfa:	e8 70 dc fe ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001ccff:	83 c4 10             	add    esp,0x10
c001cd02:	b8 01 00 00 00       	mov    eax,0x1
c001cd07:	eb 5b                	jmp    c001cd64 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cd09:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001cd0d:	c1 e5 07             	shl    ebp,0x7
c001cd10:	b8 01 00 00 00       	mov    eax,0x1
c001cd15:	01 ea                	add    edx,ebp
c001cd17:	d3 e0                	shl    eax,cl
c001cd19:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cd1f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cd25:	85 c8                	test   eax,ecx
c001cd27:	74 16                	je     c001cd3f <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001cd29:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cd2f:	0f ba e1 1e          	bt     ecx,0x1e
c001cd33:	73 ea                	jae    c001cd1f <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001cd35:	83 ec 0c             	sub    esp,0xc
c001cd38:	68 67 1c 02 c0       	push   0xc0021c67
c001cd3d:	eb bb                	jmp    c001ccfa <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cd3f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cd45:	0f ba e0 1e          	bt     eax,0x1e
c001cd49:	72 b7                	jb     c001cd02 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cd4b:	31 c0                	xor    eax,eax
c001cd4d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cd52:	75 10                	jne    c001cd64 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cd54:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cd5a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cd5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cd62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd64:	83 c4 2c             	add    esp,0x2c
c001cd67:	5b                   	pop    ebx
c001cd68:	5e                   	pop    esi
c001cd69:	5f                   	pop    edi
c001cd6a:	5d                   	pop    ebp
c001cd6b:	c3                   	ret    

c001cd6c <SATA::read(unsigned long long, int, void*)>:
c001cd6c:	55                   	push   ebp
c001cd6d:	57                   	push   edi
c001cd6e:	56                   	push   esi
c001cd6f:	be 04 00 00 00       	mov    esi,0x4
c001cd74:	53                   	push   ebx
c001cd75:	83 ec 0c             	sub    esp,0xc
c001cd78:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd84:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd88:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd8b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd91:	0f 87 1a 02 00 00    	ja     c001cfb1 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd97:	85 c9                	test   ecx,ecx
c001cd99:	be 06 00 00 00       	mov    esi,0x6
c001cd9e:	0f 84 0d 02 00 00    	je     c001cfb1 <SATA::read(unsigned long long, int, void*)+0x245>
c001cda4:	56                   	push   esi
c001cda5:	56                   	push   esi
c001cda6:	6a 00                	push   0x0
c001cda8:	51                   	push   ecx
c001cda9:	53                   	push   ebx
c001cdaa:	52                   	push   edx
c001cdab:	50                   	push   eax
c001cdac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdb0:	e8 65 fd ff ff       	call   c001cb1a <SATA::access(unsigned long long, int, void*, bool)>
c001cdb5:	83 c4 20             	add    esp,0x20
c001cdb8:	85 c0                	test   eax,eax
c001cdba:	89 c6                	mov    esi,eax
c001cdbc:	0f 85 ea 01 00 00    	jne    c001cfac <SATA::read(unsigned long long, int, void*)+0x240>
c001cdc2:	50                   	push   eax
c001cdc3:	50                   	push   eax
c001cdc4:	6a 0f                	push   0xf
c001cdc6:	6a 00                	push   0x0
c001cdc8:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cdce:	bb 0a 00 00 00       	mov    ebx,0xa
c001cdd3:	e8 7d f2 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001cdd8:	5a                   	pop    edx
c001cdd9:	59                   	pop    ecx
c001cdda:	b9 10 27 00 00       	mov    ecx,0x2710
c001cddf:	0f b6 c0             	movzx  eax,al
c001cde2:	50                   	push   eax
c001cde3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cde8:	99                   	cdq    
c001cde9:	f7 f9                	idiv   ecx
c001cdeb:	99                   	cdq    
c001cdec:	f7 fb                	idiv   ebx
c001cdee:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf1:	0f b6 c0             	movzx  eax,al
c001cdf4:	50                   	push   eax
c001cdf5:	e8 4a f2 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001cdfa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce00:	5f                   	pop    edi
c001ce01:	5d                   	pop    ebp
c001ce02:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce07:	6a 0f                	push   0xf
c001ce09:	6a 00                	push   0x0
c001ce0b:	e8 45 f2 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001ce10:	5a                   	pop    edx
c001ce11:	59                   	pop    ecx
c001ce12:	0f b6 c0             	movzx  eax,al
c001ce15:	50                   	push   eax
c001ce16:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce1b:	99                   	cdq    
c001ce1c:	f7 fd                	idiv   ebp
c001ce1e:	99                   	cdq    
c001ce1f:	f7 fb                	idiv   ebx
c001ce21:	8d 42 30             	lea    eax,[edx+0x30]
c001ce24:	0f b6 c0             	movzx  eax,al
c001ce27:	50                   	push   eax
c001ce28:	e8 17 f2 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001ce2d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce33:	5f                   	pop    edi
c001ce34:	bf 64 00 00 00       	mov    edi,0x64
c001ce39:	58                   	pop    eax
c001ce3a:	6a 0f                	push   0xf
c001ce3c:	6a 00                	push   0x0
c001ce3e:	e8 12 f2 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001ce43:	5a                   	pop    edx
c001ce44:	59                   	pop    ecx
c001ce45:	0f b6 c0             	movzx  eax,al
c001ce48:	50                   	push   eax
c001ce49:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce4e:	99                   	cdq    
c001ce4f:	f7 ff                	idiv   edi
c001ce51:	99                   	cdq    
c001ce52:	f7 fb                	idiv   ebx
c001ce54:	8d 42 30             	lea    eax,[edx+0x30]
c001ce57:	0f b6 c0             	movzx  eax,al
c001ce5a:	50                   	push   eax
c001ce5b:	e8 e4 f1 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001ce60:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce66:	58                   	pop    eax
c001ce67:	5a                   	pop    edx
c001ce68:	6a 0f                	push   0xf
c001ce6a:	6a 00                	push   0x0
c001ce6c:	e8 e4 f1 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001ce71:	59                   	pop    ecx
c001ce72:	5a                   	pop    edx
c001ce73:	0f b6 c0             	movzx  eax,al
c001ce76:	50                   	push   eax
c001ce77:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce7c:	99                   	cdq    
c001ce7d:	f7 fb                	idiv   ebx
c001ce7f:	99                   	cdq    
c001ce80:	f7 fb                	idiv   ebx
c001ce82:	8d 42 30             	lea    eax,[edx+0x30]
c001ce85:	0f b6 c0             	movzx  eax,al
c001ce88:	50                   	push   eax
c001ce89:	e8 b6 f1 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001ce8e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce94:	59                   	pop    ecx
c001ce95:	58                   	pop    eax
c001ce96:	6a 0f                	push   0xf
c001ce98:	6a 00                	push   0x0
c001ce9a:	e8 b6 f1 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001ce9f:	5a                   	pop    edx
c001cea0:	59                   	pop    ecx
c001cea1:	0f b6 c0             	movzx  eax,al
c001cea4:	50                   	push   eax
c001cea5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceaa:	99                   	cdq    
c001ceab:	f7 fb                	idiv   ebx
c001cead:	83 c2 30             	add    edx,0x30
c001ceb0:	0f b6 d2             	movzx  edx,dl
c001ceb3:	52                   	push   edx
c001ceb4:	e8 8b f1 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001ceb9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cebf:	58                   	pop    eax
c001cec0:	5a                   	pop    edx
c001cec1:	6a 0f                	push   0xf
c001cec3:	6a 00                	push   0x0
c001cec5:	e8 8b f1 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001ceca:	59                   	pop    ecx
c001cecb:	b9 10 27 00 00       	mov    ecx,0x2710
c001ced0:	5a                   	pop    edx
c001ced1:	0f b6 c0             	movzx  eax,al
c001ced4:	50                   	push   eax
c001ced5:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ceda:	99                   	cdq    
c001cedb:	f7 f9                	idiv   ecx
c001cedd:	99                   	cdq    
c001cede:	f7 fb                	idiv   ebx
c001cee0:	8d 42 30             	lea    eax,[edx+0x30]
c001cee3:	0f b6 c0             	movzx  eax,al
c001cee6:	50                   	push   eax
c001cee7:	e8 58 f1 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001ceec:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cef2:	59                   	pop    ecx
c001cef3:	58                   	pop    eax
c001cef4:	6a 0f                	push   0xf
c001cef6:	6a 00                	push   0x0
c001cef8:	e8 58 f1 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001cefd:	5a                   	pop    edx
c001cefe:	59                   	pop    ecx
c001ceff:	0f b6 c0             	movzx  eax,al
c001cf02:	50                   	push   eax
c001cf03:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf08:	99                   	cdq    
c001cf09:	f7 fd                	idiv   ebp
c001cf0b:	99                   	cdq    
c001cf0c:	f7 fb                	idiv   ebx
c001cf0e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf11:	0f b6 c0             	movzx  eax,al
c001cf14:	50                   	push   eax
c001cf15:	e8 2a f1 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001cf1a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf20:	5d                   	pop    ebp
c001cf21:	58                   	pop    eax
c001cf22:	6a 0f                	push   0xf
c001cf24:	6a 00                	push   0x0
c001cf26:	e8 2a f1 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001cf2b:	5a                   	pop    edx
c001cf2c:	59                   	pop    ecx
c001cf2d:	0f b6 c0             	movzx  eax,al
c001cf30:	50                   	push   eax
c001cf31:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf36:	99                   	cdq    
c001cf37:	f7 ff                	idiv   edi
c001cf39:	99                   	cdq    
c001cf3a:	f7 fb                	idiv   ebx
c001cf3c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf3f:	0f b6 c0             	movzx  eax,al
c001cf42:	50                   	push   eax
c001cf43:	e8 fc f0 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001cf48:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf4e:	5f                   	pop    edi
c001cf4f:	5d                   	pop    ebp
c001cf50:	6a 0f                	push   0xf
c001cf52:	6a 00                	push   0x0
c001cf54:	e8 fc f0 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001cf59:	5a                   	pop    edx
c001cf5a:	59                   	pop    ecx
c001cf5b:	0f b6 c0             	movzx  eax,al
c001cf5e:	50                   	push   eax
c001cf5f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf64:	99                   	cdq    
c001cf65:	f7 fb                	idiv   ebx
c001cf67:	99                   	cdq    
c001cf68:	f7 fb                	idiv   ebx
c001cf6a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf6d:	0f b6 c0             	movzx  eax,al
c001cf70:	50                   	push   eax
c001cf71:	e8 ce f0 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001cf76:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf7c:	5f                   	pop    edi
c001cf7d:	5d                   	pop    ebp
c001cf7e:	6a 0f                	push   0xf
c001cf80:	6a 00                	push   0x0
c001cf82:	e8 ce f0 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001cf87:	5a                   	pop    edx
c001cf88:	59                   	pop    ecx
c001cf89:	0f b6 c0             	movzx  eax,al
c001cf8c:	50                   	push   eax
c001cf8d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf92:	99                   	cdq    
c001cf93:	f7 fb                	idiv   ebx
c001cf95:	83 c2 30             	add    edx,0x30
c001cf98:	0f b6 d2             	movzx  edx,dl
c001cf9b:	52                   	push   edx
c001cf9c:	e8 a3 f0 ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001cfa1:	83 c4 10             	add    esp,0x10
c001cfa4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cfaa:	eb 05                	jmp    c001cfb1 <SATA::read(unsigned long long, int, void*)+0x245>
c001cfac:	be 01 00 00 00       	mov    esi,0x1
c001cfb1:	83 c4 0c             	add    esp,0xc
c001cfb4:	89 f0                	mov    eax,esi
c001cfb6:	5b                   	pop    ebx
c001cfb7:	5e                   	pop    esi
c001cfb8:	5f                   	pop    edi
c001cfb9:	5d                   	pop    ebp
c001cfba:	c3                   	ret    
c001cfbb:	90                   	nop

c001cfbc <SATA::write(unsigned long long, int, void*)>:
c001cfbc:	55                   	push   ebp
c001cfbd:	57                   	push   edi
c001cfbe:	56                   	push   esi
c001cfbf:	53                   	push   ebx
c001cfc0:	83 ec 0c             	sub    esp,0xc
c001cfc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cfc7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cfcb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cfcf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cfd3:	8d 70 ff             	lea    esi,[eax-0x1]
c001cfd6:	b8 04 00 00 00       	mov    eax,0x4
c001cfdb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cfe1:	0f 87 2c 02 00 00    	ja     c001d213 <SATA::write(unsigned long long, int, void*)+0x257>
c001cfe7:	85 db                	test   ebx,ebx
c001cfe9:	b8 06 00 00 00       	mov    eax,0x6
c001cfee:	0f 84 1f 02 00 00    	je     c001d213 <SATA::write(unsigned long long, int, void*)+0x257>
c001cff4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cff8:	c1 e6 09             	shl    esi,0x9
c001cffb:	01 de                	add    esi,ebx
c001cffd:	50                   	push   eax
c001cffe:	89 d7                	mov    edi,edx
c001d000:	50                   	push   eax
c001d001:	83 c7 01             	add    edi,0x1
c001d004:	6a 01                	push   0x1
c001d006:	89 cd                	mov    ebp,ecx
c001d008:	53                   	push   ebx
c001d009:	83 d5 00             	adc    ebp,0x0
c001d00c:	6a 01                	push   0x1
c001d00e:	81 c3 00 02 00 00    	add    ebx,0x200
c001d014:	51                   	push   ecx
c001d015:	52                   	push   edx
c001d016:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d01a:	e8 fb fa ff ff       	call   c001cb1a <SATA::access(unsigned long long, int, void*, bool)>
c001d01f:	83 c4 20             	add    esp,0x20
c001d022:	39 f3                	cmp    ebx,esi
c001d024:	89 fa                	mov    edx,edi
c001d026:	89 e9                	mov    ecx,ebp
c001d028:	75 d3                	jne    c001cffd <SATA::write(unsigned long long, int, void*)+0x41>
c001d02a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d02e:	bd 10 27 00 00       	mov    ebp,0x2710
c001d033:	bb 0a 00 00 00       	mov    ebx,0xa
c001d038:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001d03e:	50                   	push   eax
c001d03f:	50                   	push   eax
c001d040:	6a 0f                	push   0xf
c001d042:	6a 00                	push   0x0
c001d044:	e8 0c f0 ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d049:	5a                   	pop    edx
c001d04a:	59                   	pop    ecx
c001d04b:	0f b6 c0             	movzx  eax,al
c001d04e:	50                   	push   eax
c001d04f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d054:	99                   	cdq    
c001d055:	f7 fd                	idiv   ebp
c001d057:	99                   	cdq    
c001d058:	f7 fb                	idiv   ebx
c001d05a:	8d 42 30             	lea    eax,[edx+0x30]
c001d05d:	0f b6 c0             	movzx  eax,al
c001d060:	50                   	push   eax
c001d061:	e8 de ef ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d066:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d06c:	5e                   	pop    esi
c001d06d:	5f                   	pop    edi
c001d06e:	bf e8 03 00 00       	mov    edi,0x3e8
c001d073:	6a 0f                	push   0xf
c001d075:	6a 00                	push   0x0
c001d077:	e8 d9 ef ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d07c:	5a                   	pop    edx
c001d07d:	59                   	pop    ecx
c001d07e:	0f b6 c0             	movzx  eax,al
c001d081:	50                   	push   eax
c001d082:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d087:	99                   	cdq    
c001d088:	f7 ff                	idiv   edi
c001d08a:	99                   	cdq    
c001d08b:	f7 fb                	idiv   ebx
c001d08d:	8d 42 30             	lea    eax,[edx+0x30]
c001d090:	0f b6 c0             	movzx  eax,al
c001d093:	50                   	push   eax
c001d094:	e8 ab ef ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d099:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d09f:	5e                   	pop    esi
c001d0a0:	be 64 00 00 00       	mov    esi,0x64
c001d0a5:	58                   	pop    eax
c001d0a6:	6a 0f                	push   0xf
c001d0a8:	6a 00                	push   0x0
c001d0aa:	e8 a6 ef ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d0af:	5a                   	pop    edx
c001d0b0:	59                   	pop    ecx
c001d0b1:	0f b6 c0             	movzx  eax,al
c001d0b4:	50                   	push   eax
c001d0b5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0ba:	99                   	cdq    
c001d0bb:	f7 fe                	idiv   esi
c001d0bd:	99                   	cdq    
c001d0be:	f7 fb                	idiv   ebx
c001d0c0:	8d 42 30             	lea    eax,[edx+0x30]
c001d0c3:	0f b6 c0             	movzx  eax,al
c001d0c6:	50                   	push   eax
c001d0c7:	e8 78 ef ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d0cc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d0d2:	58                   	pop    eax
c001d0d3:	5a                   	pop    edx
c001d0d4:	6a 0f                	push   0xf
c001d0d6:	6a 00                	push   0x0
c001d0d8:	e8 78 ef ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d0dd:	59                   	pop    ecx
c001d0de:	5a                   	pop    edx
c001d0df:	0f b6 c0             	movzx  eax,al
c001d0e2:	50                   	push   eax
c001d0e3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0e8:	99                   	cdq    
c001d0e9:	f7 fb                	idiv   ebx
c001d0eb:	99                   	cdq    
c001d0ec:	f7 fb                	idiv   ebx
c001d0ee:	8d 42 30             	lea    eax,[edx+0x30]
c001d0f1:	0f b6 c0             	movzx  eax,al
c001d0f4:	50                   	push   eax
c001d0f5:	e8 4a ef ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d0fa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d100:	59                   	pop    ecx
c001d101:	58                   	pop    eax
c001d102:	6a 0f                	push   0xf
c001d104:	6a 00                	push   0x0
c001d106:	e8 4a ef ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d10b:	5a                   	pop    edx
c001d10c:	59                   	pop    ecx
c001d10d:	0f b6 c0             	movzx  eax,al
c001d110:	50                   	push   eax
c001d111:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d116:	99                   	cdq    
c001d117:	f7 fb                	idiv   ebx
c001d119:	83 c2 30             	add    edx,0x30
c001d11c:	0f b6 d2             	movzx  edx,dl
c001d11f:	52                   	push   edx
c001d120:	e8 1f ef ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d125:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d12b:	58                   	pop    eax
c001d12c:	5a                   	pop    edx
c001d12d:	6a 0f                	push   0xf
c001d12f:	6a 00                	push   0x0
c001d131:	e8 1f ef ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d136:	59                   	pop    ecx
c001d137:	5a                   	pop    edx
c001d138:	0f b6 c0             	movzx  eax,al
c001d13b:	50                   	push   eax
c001d13c:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d141:	99                   	cdq    
c001d142:	f7 fd                	idiv   ebp
c001d144:	99                   	cdq    
c001d145:	f7 fb                	idiv   ebx
c001d147:	8d 42 30             	lea    eax,[edx+0x30]
c001d14a:	0f b6 c0             	movzx  eax,al
c001d14d:	50                   	push   eax
c001d14e:	e8 f1 ee ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d153:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d159:	59                   	pop    ecx
c001d15a:	5d                   	pop    ebp
c001d15b:	6a 0f                	push   0xf
c001d15d:	6a 00                	push   0x0
c001d15f:	e8 f1 ee ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d164:	5a                   	pop    edx
c001d165:	59                   	pop    ecx
c001d166:	0f b6 c0             	movzx  eax,al
c001d169:	50                   	push   eax
c001d16a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d16f:	99                   	cdq    
c001d170:	f7 ff                	idiv   edi
c001d172:	99                   	cdq    
c001d173:	f7 fb                	idiv   ebx
c001d175:	8d 42 30             	lea    eax,[edx+0x30]
c001d178:	0f b6 c0             	movzx  eax,al
c001d17b:	50                   	push   eax
c001d17c:	e8 c3 ee ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d181:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d187:	5f                   	pop    edi
c001d188:	5d                   	pop    ebp
c001d189:	6a 0f                	push   0xf
c001d18b:	6a 00                	push   0x0
c001d18d:	e8 c3 ee ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d192:	5a                   	pop    edx
c001d193:	59                   	pop    ecx
c001d194:	0f b6 c0             	movzx  eax,al
c001d197:	50                   	push   eax
c001d198:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d19d:	99                   	cdq    
c001d19e:	f7 fe                	idiv   esi
c001d1a0:	99                   	cdq    
c001d1a1:	f7 fb                	idiv   ebx
c001d1a3:	8d 42 30             	lea    eax,[edx+0x30]
c001d1a6:	0f b6 c0             	movzx  eax,al
c001d1a9:	50                   	push   eax
c001d1aa:	e8 95 ee ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d1af:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d1b5:	5e                   	pop    esi
c001d1b6:	5f                   	pop    edi
c001d1b7:	6a 0f                	push   0xf
c001d1b9:	6a 00                	push   0x0
c001d1bb:	e8 95 ee ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d1c0:	5d                   	pop    ebp
c001d1c1:	5a                   	pop    edx
c001d1c2:	0f b6 c0             	movzx  eax,al
c001d1c5:	50                   	push   eax
c001d1c6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1cb:	99                   	cdq    
c001d1cc:	f7 fb                	idiv   ebx
c001d1ce:	99                   	cdq    
c001d1cf:	f7 fb                	idiv   ebx
c001d1d1:	8d 42 30             	lea    eax,[edx+0x30]
c001d1d4:	0f b6 c0             	movzx  eax,al
c001d1d7:	50                   	push   eax
c001d1d8:	e8 67 ee ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d1dd:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d1e3:	59                   	pop    ecx
c001d1e4:	5e                   	pop    esi
c001d1e5:	6a 0f                	push   0xf
c001d1e7:	6a 00                	push   0x0
c001d1e9:	e8 67 ee ff ff       	call   c001c055 <combineColours(unsigned char, unsigned char)>
c001d1ee:	5f                   	pop    edi
c001d1ef:	5d                   	pop    ebp
c001d1f0:	0f b6 c0             	movzx  eax,al
c001d1f3:	50                   	push   eax
c001d1f4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1f9:	99                   	cdq    
c001d1fa:	f7 fb                	idiv   ebx
c001d1fc:	83 c2 30             	add    edx,0x30
c001d1ff:	0f b6 d2             	movzx  edx,dl
c001d202:	52                   	push   edx
c001d203:	e8 3c ee ff ff       	call   c001c044 <combineCharAndColour(char, unsigned char)>
c001d208:	83 c4 10             	add    esp,0x10
c001d20b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d211:	31 c0                	xor    eax,eax
c001d213:	83 c4 0c             	add    esp,0xc
c001d216:	5b                   	pop    ebx
c001d217:	5e                   	pop    esi
c001d218:	5f                   	pop    edi
c001d219:	5d                   	pop    ebp
c001d21a:	c3                   	ret    
c001d21b:	90                   	nop

c001d21c <SATAPI::write(unsigned long long, int, void*)>:
c001d21c:	b8 03 00 00 00       	mov    eax,0x3
c001d221:	c3                   	ret    

c001d222 <SATAPI::close(int, int, void*)>:
c001d222:	83 ec 0c             	sub    esp,0xc
c001d225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d229:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d22f:	85 c0                	test   eax,eax
c001d231:	74 0c                	je     c001d23f <SATAPI::close(int, int, void*)+0x1d>
c001d233:	8b 10                	mov    edx,DWORD PTR [eax]
c001d235:	83 ec 0c             	sub    esp,0xc
c001d238:	50                   	push   eax
c001d239:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d23c:	83 c4 10             	add    esp,0x10
c001d23f:	31 c0                	xor    eax,eax
c001d241:	83 c4 0c             	add    esp,0xc
c001d244:	c3                   	ret    
c001d245:	90                   	nop

c001d246 <SATAPI::SATAPI()>:
c001d246:	83 ec 0c             	sub    esp,0xc
c001d249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d24d:	83 ec 04             	sub    esp,0x4
c001d250:	68 00 08 00 00       	push   0x800
c001d255:	68 b0 1c 02 c0       	push   0xc0021cb0
c001d25a:	50                   	push   eax
c001d25b:	e8 3e ef fe ff       	call   c000c19e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d260:	83 c4 10             	add    esp,0x10
c001d263:	ba a4 1d 02 c0       	mov    edx,0xc0021da4
c001d268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d26c:	89 10                	mov    DWORD PTR [eax],edx
c001d26e:	90                   	nop
c001d26f:	83 c4 0c             	add    esp,0xc
c001d272:	c3                   	ret    
c001d273:	90                   	nop

c001d274 <SATAPI::diskRemoved()>:
c001d274:	c3                   	ret    
c001d275:	90                   	nop

c001d276 <SATAPI::diskInserted()>:
c001d276:	83 ec 18             	sub    esp,0x18
c001d279:	68 bc 1c 02 c0       	push   0xc0021cbc
c001d27e:	e8 ec d6 fe ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001d283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d287:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d28e:	83 c4 1c             	add    esp,0x1c
c001d291:	c3                   	ret    

c001d292 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d292:	55                   	push   ebp
c001d293:	57                   	push   edi
c001d294:	56                   	push   esi
c001d295:	53                   	push   ebx
c001d296:	83 ec 34             	sub    esp,0x34
c001d299:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d29d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d2a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2a5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d2a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2ad:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d2b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d2bd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d2c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2c7:	83 c0 02             	add    eax,0x2
c001d2ca:	c1 e0 07             	shl    eax,0x7
c001d2cd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d2d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2d9:	c1 e0 07             	shl    eax,0x7
c001d2dc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d2e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2e4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d2ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d2f2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d2f8:	e8 ff e4 ff ff       	call   c001b7fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d2fd:	83 c4 10             	add    esp,0x10
c001d300:	89 c2                	mov    edx,eax
c001d302:	b8 01 00 00 00       	mov    eax,0x1
c001d307:	83 fa ff             	cmp    edx,0xffffffff
c001d30a:	0f 84 5f 02 00 00    	je     c001d56f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d310:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d318:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d31e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d320:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d326:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d32c:	89 d1                	mov    ecx,edx
c001d32e:	c1 e1 05             	shl    ecx,0x5
c001d331:	01 c8                	add    eax,ecx
c001d333:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d335:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d33b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d341:	89 08                	mov    DWORD PTR [eax],ecx
c001d343:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d349:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d34f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d355:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d358:	50                   	push   eax
c001d359:	68 90 00 00 00       	push   0x90
c001d35e:	6a 00                	push   0x0
c001d360:	53                   	push   ebx
c001d361:	e8 8a 31 fe ff       	call   c00004f0 <memset>
c001d366:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d369:	b9 0c 00 00 00       	mov    ecx,0xc
c001d36e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d372:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d374:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d37a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d37e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d382:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d388:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d38c:	48                   	dec    eax
c001d38d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d392:	89 c1                	mov    ecx,eax
c001d394:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d39a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d39f:	09 c8                	or     eax,ecx
c001d3a1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d3a7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d3ad:	83 c8 80             	or     eax,0xffffff80
c001d3b0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d3b6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d3b9:	25 00 7f 00 00       	and    eax,0x7f00
c001d3be:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d3c3:	66 89 03             	mov    WORD PTR [ebx],ax
c001d3c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ca:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d3ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d2:	c1 e8 10             	shr    eax,0x10
c001d3d5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d3d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3dc:	c1 e8 18             	shr    eax,0x18
c001d3df:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d3e2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d3e6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d3e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3ed:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d3f0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d3f4:	83 c4 10             	add    esp,0x10
c001d3f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3fb:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d3ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d403:	31 c0                	xor    eax,eax
c001d405:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d40b:	80 e1 88             	and    cl,0x88
c001d40e:	74 0a                	je     c001d41a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d410:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d415:	74 0a                	je     c001d421 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d417:	40                   	inc    eax
c001d418:	eb eb                	jmp    c001d405 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d41a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d41f:	75 43                	jne    c001d464 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d421:	83 ec 0c             	sub    esp,0xc
c001d424:	68 d4 1c 02 c0       	push   0xc0021cd4
c001d429:	e8 41 d5 fe ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001d42e:	58                   	pop    eax
c001d42f:	5a                   	pop    edx
c001d430:	68 e9 1c 02 c0       	push   0xc0021ce9
c001d435:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d43b:	e8 56 b6 fe ff       	call   c0008a96 <VgaText::puts(char const*)>
c001d440:	59                   	pop    ecx
c001d441:	5b                   	pop    ebx
c001d442:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d446:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d44c:	e8 45 e4 ff ff       	call   c001b896 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d451:	5e                   	pop    esi
c001d452:	5f                   	pop    edi
c001d453:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d457:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d45d:	e8 14 e4 ff ff       	call   c001b876 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d462:	eb 48                	jmp    c001d4ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d464:	b8 01 00 00 00       	mov    eax,0x1
c001d469:	88 d1                	mov    cl,dl
c001d46b:	d3 e0                	shl    eax,cl
c001d46d:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d472:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d478:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d47c:	89 c7                	mov    edi,eax
c001d47e:	c1 e3 07             	shl    ebx,0x7
c001d481:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d485:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d48b:	85 c7                	test   edi,eax
c001d48d:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d493:	0f 84 a3 00 00 00    	je     c001d53c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d499:	0f ba e0 1e          	bt     eax,0x1e
c001d49d:	73 1a                	jae    c001d4b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d49f:	83 ec 0c             	sub    esp,0xc
c001d4a2:	68 fb 1c 02 c0       	push   0xc0021cfb
c001d4a7:	e8 c3 d4 fe ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001d4ac:	83 c4 10             	add    esp,0x10
c001d4af:	b8 01 00 00 00       	mov    eax,0x1
c001d4b4:	e9 b6 00 00 00       	jmp    c001d56f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d4b9:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d4bf:	83 f8 0d             	cmp    eax,0xd
c001d4c2:	77 0a                	ja     c001d4ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d4c4:	83 ec 0c             	sub    esp,0xc
c001d4c7:	68 c8 00 00 00       	push   0xc8
c001d4cc:	eb 28                	jmp    c001d4f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d4ce:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001d4d4:	83 f8 0d             	cmp    eax,0xd
c001d4d7:	77 0a                	ja     c001d4e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001d4d9:	83 ec 0c             	sub    esp,0xc
c001d4dc:	68 58 02 00 00       	push   0x258
c001d4e1:	eb 13                	jmp    c001d4f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d4e3:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001d4e9:	83 f8 06             	cmp    eax,0x6
c001d4ec:	77 10                	ja     c001d4fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001d4ee:	83 ec 0c             	sub    esp,0xc
c001d4f1:	68 dc 05 00 00       	push   0x5dc
c001d4f6:	e8 55 7e ff ff       	call   c0015350 <milliTenthSleep(unsigned int)>
c001d4fb:	83 c4 10             	add    esp,0x10
c001d4fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d502:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d505:	75 06                	jne    c001d50d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001d507:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d50b:	74 15                	je     c001d522 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d50d:	83 fe 06             	cmp    esi,0x6
c001d510:	77 10                	ja     c001d522 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d512:	83 ec 0c             	sub    esp,0xc
c001d515:	68 c4 09 00 00       	push   0x9c4
c001d51a:	e8 31 7e ff ff       	call   c0015350 <milliTenthSleep(unsigned int)>
c001d51f:	83 c4 10             	add    esp,0x10
c001d522:	46                   	inc    esi
c001d523:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001d529:	0f 85 56 ff ff ff    	jne    c001d485 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001d52f:	83 ec 0c             	sub    esp,0xc
c001d532:	68 0e 1d 02 c0       	push   0xc0021d0e
c001d537:	e9 6b ff ff ff       	jmp    c001d4a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d53c:	0f ba e0 1e          	bt     eax,0x1e
c001d540:	73 0d                	jae    c001d54f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001d542:	83 ec 0c             	sub    esp,0xc
c001d545:	68 22 1d 02 c0       	push   0xc0021d22
c001d54a:	e9 58 ff ff ff       	jmp    c001d4a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d54f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d554:	74 17                	je     c001d56d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d556:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d55b:	74 10                	je     c001d56d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d55d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d563:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d567:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d56b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d56d:	31 c0                	xor    eax,eax
c001d56f:	83 c4 2c             	add    esp,0x2c
c001d572:	5b                   	pop    ebx
c001d573:	5e                   	pop    esi
c001d574:	5f                   	pop    edi
c001d575:	5d                   	pop    ebp
c001d576:	c3                   	ret    
c001d577:	90                   	nop

c001d578 <SATAPI::eject()>:
c001d578:	57                   	push   edi
c001d579:	b9 03 00 00 00       	mov    ecx,0x3
c001d57e:	83 ec 18             	sub    esp,0x18
c001d581:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d585:	fc                   	cld    
c001d586:	31 c0                	xor    eax,eax
c001d588:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d58a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d58f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d594:	50                   	push   eax
c001d595:	6a 00                	push   0x0
c001d597:	6a 00                	push   0x0
c001d599:	6a 00                	push   0x0
c001d59b:	6a 00                	push   0x0
c001d59d:	6a 02                	push   0x2
c001d59f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d5a3:	50                   	push   eax
c001d5a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5a8:	e8 e5 fc ff ff       	call   c001d292 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d5ad:	83 c4 38             	add    esp,0x38
c001d5b0:	31 c0                	xor    eax,eax
c001d5b2:	5f                   	pop    edi
c001d5b3:	c3                   	ret    

c001d5b4 <SATAPI::detectMedia()>:
c001d5b4:	53                   	push   ebx
c001d5b5:	83 ec 14             	sub    esp,0x14
c001d5b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d5bc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5c2:	e8 5d 05 ff ff       	call   c000db24 <VCache::writeWriteBuffer()>
c001d5c7:	59                   	pop    ecx
c001d5c8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5ce:	e8 41 05 ff ff       	call   c000db14 <VCache::invalidateReadBuffer()>
c001d5d3:	c7 04 24 37 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d37
c001d5da:	e8 90 d3 fe ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001d5df:	83 c4 10             	add    esp,0x10
c001d5e2:	31 c0                	xor    eax,eax
c001d5e4:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d5eb:	85 d2                	test   edx,edx
c001d5ed:	74 0f                	je     c001d5fe <SATAPI::detectMedia()+0x4a>
c001d5ef:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d5f5:	75 07                	jne    c001d5fe <SATAPI::detectMedia()+0x4a>
c001d5f7:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d5fe:	40                   	inc    eax
c001d5ff:	83 f8 1a             	cmp    eax,0x1a
c001d602:	75 e0                	jne    c001d5e4 <SATAPI::detectMedia()+0x30>
c001d604:	83 c4 08             	add    esp,0x8
c001d607:	5b                   	pop    ebx
c001d608:	c3                   	ret    
c001d609:	90                   	nop

c001d60a <SATAPI::open(int, int, void*)>:
c001d60a:	56                   	push   esi
c001d60b:	53                   	push   ebx
c001d60c:	51                   	push   ecx
c001d60d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d611:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d615:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d61f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d625:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d629:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d633:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d63d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d644:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d64a:	e8 87 a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d64f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d655:	89 c6                	mov    esi,eax
c001d657:	e8 7a a7 fe ff       	call   c0007dd6 <Phys::allocatePage()>
c001d65c:	81 c6 00 10 00 00    	add    esi,0x1000
c001d662:	39 c6                	cmp    esi,eax
c001d664:	74 10                	je     c001d676 <SATAPI::open(int, int, void*)+0x6c>
c001d666:	83 ec 0c             	sub    esp,0xc
c001d669:	68 4c 1d 02 c0       	push   0xc0021d4c
c001d66e:	e8 c6 31 ff ff       	call   c0010839 <KePanic(char const*)>
c001d673:	83 c4 10             	add    esp,0x10
c001d676:	83 ec 0c             	sub    esp,0xc
c001d679:	6a 02                	push   0x2
c001d67b:	e8 85 bf fe ff       	call   c0009605 <Virt::allocateKernelVirtualPages(int)>
c001d680:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d686:	6a 03                	push   0x3
c001d688:	50                   	push   eax
c001d689:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d68f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d695:	e8 4a c6 fe ff       	call   c0009ce4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d69a:	83 c4 14             	add    esp,0x14
c001d69d:	68 78 01 00 00       	push   0x178
c001d6a2:	e8 24 a4 fe ff       	call   c0007acb <malloc>
c001d6a7:	83 c4 0c             	add    esp,0xc
c001d6aa:	6a 00                	push   0x0
c001d6ac:	68 ff ff ff 7f       	push   0x7fffffff
c001d6b1:	6a 00                	push   0x0
c001d6b3:	6a 00                	push   0x0
c001d6b5:	53                   	push   ebx
c001d6b6:	68 62 1d 02 c0       	push   0xc0021d62
c001d6bb:	89 c6                	mov    esi,eax
c001d6bd:	50                   	push   eax
c001d6be:	e8 bb f8 fe ff       	call   c000cf7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d6c3:	83 c4 14             	add    esp,0x14
c001d6c6:	56                   	push   esi
c001d6c7:	e8 72 f9 fe ff       	call   c000d03e <LogicalDisk::assignDriveLetter()>
c001d6cc:	5a                   	pop    edx
c001d6cd:	59                   	pop    ecx
c001d6ce:	0f be c0             	movsx  eax,al
c001d6d1:	50                   	push   eax
c001d6d2:	68 b4 1b 02 c0       	push   0xc0021bb4
c001d6d7:	e8 93 d2 fe ff       	call   c000a96f <Dbg::kprintf(char const*, ...)>
c001d6dc:	58                   	pop    eax
c001d6dd:	5a                   	pop    edx
c001d6de:	56                   	push   esi
c001d6df:	53                   	push   ebx
c001d6e0:	e8 eb e6 fe ff       	call   c000bdd0 <Device::addChild(Device*)>
c001d6e5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d6eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6ee:	e8 13 eb fe ff       	call   c000c206 <PhysicalDisk::startCache()>
c001d6f3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d6fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6fd:	e8 b2 fe ff ff       	call   c001d5b4 <SATAPI::detectMedia()>
c001d702:	83 c4 14             	add    esp,0x14
c001d705:	31 c0                	xor    eax,eax
c001d707:	5b                   	pop    ebx
c001d708:	5e                   	pop    esi
c001d709:	c3                   	ret    

c001d70a <SATAPI::read(unsigned long long, int, void*)>:
c001d70a:	55                   	push   ebp
c001d70b:	57                   	push   edi
c001d70c:	56                   	push   esi
c001d70d:	53                   	push   ebx
c001d70e:	83 ec 3c             	sub    esp,0x3c
c001d711:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001d715:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d719:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d71d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d721:	83 fd 04             	cmp    ebp,0x4
c001d724:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d72c:	7e 10                	jle    c001d73e <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d72e:	83 ec 0c             	sub    esp,0xc
c001d731:	68 70 1d 02 c0       	push   0xc0021d70
c001d736:	e8 fe 30 ff ff       	call   c0010839 <KePanic(char const*)>
c001d73b:	83 c4 10             	add    esp,0x10
c001d73e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d744:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d74a:	51                   	push   ecx
c001d74b:	50                   	push   eax
c001d74c:	83 c0 02             	add    eax,0x2
c001d74f:	c1 e0 07             	shl    eax,0x7
c001d752:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d758:	50                   	push   eax
c001d759:	52                   	push   edx
c001d75a:	e8 61 e1 ff ff       	call   c001b8c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d75f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d763:	b9 03 00 00 00       	mov    ecx,0x3
c001d768:	fc                   	cld    
c001d769:	31 c0                	xor    eax,eax
c001d76b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d76d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d772:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d777:	83 c4 0c             	add    esp,0xc
c001d77a:	6a 00                	push   0x0
c001d77c:	6a 00                	push   0x0
c001d77e:	6a 00                	push   0x0
c001d780:	6a 00                	push   0x0
c001d782:	6a 02                	push   0x2
c001d784:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d788:	50                   	push   eax
c001d789:	53                   	push   ebx
c001d78a:	e8 03 fb ff ff       	call   c001d292 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d78f:	83 c4 20             	add    esp,0x20
c001d792:	85 c0                	test   eax,eax
c001d794:	89 c6                	mov    esi,eax
c001d796:	75 46                	jne    c001d7de <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001d798:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d79c:	b9 03 00 00 00       	mov    ecx,0x3
c001d7a1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7a7:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d7ac:	0f c8                	bswap  eax
c001d7ae:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d7b2:	89 e8                	mov    eax,ebp
c001d7b4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d7b8:	50                   	push   eax
c001d7b9:	55                   	push   ebp
c001d7ba:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d7be:	c1 e5 0b             	shl    ebp,0xb
c001d7c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7c9:	55                   	push   ebp
c001d7ca:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d7ce:	50                   	push   eax
c001d7cf:	53                   	push   ebx
c001d7d0:	e8 bd fa ff ff       	call   c001d292 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7d5:	83 c4 20             	add    esp,0x20
c001d7d8:	85 c0                	test   eax,eax
c001d7da:	89 c6                	mov    esi,eax
c001d7dc:	74 0c                	je     c001d7ea <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001d7de:	83 ec 0c             	sub    esp,0xc
c001d7e1:	53                   	push   ebx
c001d7e2:	e8 cd fd ff ff       	call   c001d5b4 <SATAPI::detectMedia()>
c001d7e7:	83 c4 10             	add    esp,0x10
c001d7ea:	83 c4 3c             	add    esp,0x3c
c001d7ed:	89 f0                	mov    eax,esi
c001d7ef:	5b                   	pop    ebx
c001d7f0:	5e                   	pop    esi
c001d7f1:	5f                   	pop    edi
c001d7f2:	5d                   	pop    ebp
c001d7f3:	c3                   	ret    

c001d7f4 <IOAPIC::close(int, int, void*)>:
c001d7f4:	b8 00 00 00 00       	mov    eax,0x0
c001d7f9:	c3                   	ret    

c001d7fa <apicGetBase()>:
c001d7fa:	55                   	push   ebp
c001d7fb:	89 e5                	mov    ebp,esp
c001d7fd:	83 ec 18             	sub    esp,0x18
c001d800:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d805:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d80b:	83 e0 08             	and    eax,0x8
c001d80e:	0f b6 c0             	movzx  eax,al
c001d811:	85 c0                	test   eax,eax
c001d813:	75 07                	jne    c001d81c <apicGetBase()+0x22>
c001d815:	b8 00 00 00 00       	mov    eax,0x0
c001d81a:	eb 21                	jmp    c001d83d <apicGetBase()+0x43>
c001d81c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d821:	83 ec 08             	sub    esp,0x8
c001d824:	6a 1b                	push   0x1b
c001d826:	50                   	push   eax
c001d827:	e8 ae 98 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001d82c:	83 c4 10             	add    esp,0x10
c001d82f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d832:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d835:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d838:	25 00 00 ff ff       	and    eax,0xffff0000
c001d83d:	c9                   	leave  
c001d83e:	c3                   	ret    
c001d83f:	90                   	nop

c001d840 <IOAPIC::IOAPIC()>:
c001d840:	83 ec 0c             	sub    esp,0xc
c001d843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d847:	83 ec 08             	sub    esp,0x8
c001d84a:	68 d4 1d 02 c0       	push   0xc0021dd4
c001d84f:	50                   	push   eax
c001d850:	e8 13 e7 fe ff       	call   c000bf68 <Device::Device(char const*)>
c001d855:	83 c4 10             	add    esp,0x10
c001d858:	ba e4 1d 02 c0       	mov    edx,0xc0021de4
c001d85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d861:	89 10                	mov    DWORD PTR [eax],edx
c001d863:	90                   	nop
c001d864:	83 c4 0c             	add    esp,0xc
c001d867:	c3                   	ret    

c001d868 <apicOpen()>:
c001d868:	55                   	push   ebp
c001d869:	89 e5                	mov    ebp,esp
c001d86b:	53                   	push   ebx
c001d86c:	83 ec 34             	sub    esp,0x34
c001d86f:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d874:	83 f0 01             	xor    eax,0x1
c001d877:	0f b6 c0             	movzx  eax,al
c001d87a:	85 c0                	test   eax,eax
c001d87c:	0f 84 a3 00 00 00    	je     c001d925 <apicOpen()+0xbd>
c001d882:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d886:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d88b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d88f:	0f b6 c0             	movzx  eax,al
c001d892:	39 c2                	cmp    edx,eax
c001d894:	0f 83 84 00 00 00    	jae    c001d91e <apicOpen()+0xb6>
c001d89a:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d8a1:	83 ec 0c             	sub    esp,0xc
c001d8a4:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d8a7:	e8 1f a2 fe ff       	call   c0007acb <malloc>
c001d8ac:	83 c4 10             	add    esp,0x10
c001d8af:	89 c3                	mov    ebx,eax
c001d8b1:	83 ec 0c             	sub    esp,0xc
c001d8b4:	53                   	push   ebx
c001d8b5:	e8 86 ff ff ff       	call   c001d840 <IOAPIC::IOAPIC()>
c001d8ba:	83 c4 10             	add    esp,0x10
c001d8bd:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d8c0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d8c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d8c7:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d8ce:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d8d3:	83 c0 01             	add    eax,0x1
c001d8d6:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d8db:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d8e0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d8e6:	83 ec 08             	sub    esp,0x8
c001d8e9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d8ec:	50                   	push   eax
c001d8ed:	e8 de e4 fe ff       	call   c000bdd0 <Device::addChild(Device*)>
c001d8f2:	83 c4 10             	add    esp,0x10
c001d8f5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d8f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8fa:	83 c0 08             	add    eax,0x8
c001d8fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8ff:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d903:	6a 00                	push   0x0
c001d905:	6a 00                	push   0x0
c001d907:	52                   	push   edx
c001d908:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d90b:	ff d0                	call   eax
c001d90d:	83 c4 10             	add    esp,0x10
c001d910:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d913:	83 c0 01             	add    eax,0x1
c001d916:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d919:	e9 68 ff ff ff       	jmp    c001d886 <apicOpen()+0x1e>
c001d91e:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d925:	e8 d0 fe ff ff       	call   c001d7fa <apicGetBase()>
c001d92a:	05 f0 00 00 00       	add    eax,0xf0
c001d92f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d932:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d935:	8b 00                	mov    eax,DWORD PTR [eax]
c001d937:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d93a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d941:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d948:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d94b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d94e:	89 10                	mov    DWORD PTR [eax],edx
c001d950:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d957:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d95c:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d95f:	7d 7c                	jge    c001d9dd <apicOpen()+0x175>
c001d961:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d964:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d96b:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d96e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d971:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d978:	c1 e8 08             	shr    eax,0x8
c001d97b:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d97f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d982:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d989:	c1 e8 18             	shr    eax,0x18
c001d98c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d98f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d993:	3d ff 00 00 00       	cmp    eax,0xff
c001d998:	75 3a                	jne    c001d9d4 <apicOpen()+0x16c>
c001d99a:	e8 5b fe ff ff       	call   c001d7fa <apicGetBase()>
c001d99f:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d9a3:	83 fa 01             	cmp    edx,0x1
c001d9a6:	75 07                	jne    c001d9af <apicOpen()+0x147>
c001d9a8:	ba 60 03 00 00       	mov    edx,0x360
c001d9ad:	eb 05                	jmp    c001d9b4 <apicOpen()+0x14c>
c001d9af:	ba 50 03 00 00       	mov    edx,0x350
c001d9b4:	01 d0                	add    eax,edx
c001d9b6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d9b9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9be:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d9c1:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d9c8:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d9cc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9cf:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d9d2:	89 10                	mov    DWORD PTR [eax],edx
c001d9d4:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d9d8:	e9 7a ff ff ff       	jmp    c001d957 <apicOpen()+0xef>
c001d9dd:	90                   	nop
c001d9de:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d9e1:	c9                   	leave  
c001d9e2:	c3                   	ret    
c001d9e3:	90                   	nop

c001d9e4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d9e4:	55                   	push   ebp
c001d9e5:	89 e5                	mov    ebp,esp
c001d9e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9f0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d9f3:	72 1d                	jb     c001da12 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d9f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9f8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d9fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da01:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001da07:	01 d0                	add    eax,edx
c001da09:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da0c:	73 04                	jae    c001da12 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da0e:	b0 01                	mov    al,0x1
c001da10:	eb 02                	jmp    c001da14 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001da12:	b0 00                	mov    al,0x0
c001da14:	5d                   	pop    ebp
c001da15:	c3                   	ret    

c001da16 <IOAPIC::read(int)>:
c001da16:	55                   	push   ebp
c001da17:	89 e5                	mov    ebp,esp
c001da19:	83 ec 10             	sub    esp,0x10
c001da1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da1f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da25:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da2b:	0f b6 d0             	movzx  edx,al
c001da2e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da31:	89 10                	mov    DWORD PTR [eax],edx
c001da33:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da36:	83 c0 10             	add    eax,0x10
c001da39:	8b 00                	mov    eax,DWORD PTR [eax]
c001da3b:	c9                   	leave  
c001da3c:	c3                   	ret    
c001da3d:	90                   	nop

c001da3e <IOAPIC::open(int, int, void*)>:
c001da3e:	55                   	push   ebp
c001da3f:	89 e5                	mov    ebp,esp
c001da41:	57                   	push   edi
c001da42:	56                   	push   esi
c001da43:	53                   	push   ebx
c001da44:	83 ec 04             	sub    esp,0x4
c001da47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da4a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da4d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da5c:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001da63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da66:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da6f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da75:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001da7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da7f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001da85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da88:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001da8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da91:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da97:	0f b6 f0             	movzx  esi,al
c001da9a:	89 d0                	mov    eax,edx
c001da9c:	ba 00 00 00 00       	mov    edx,0x0
c001daa1:	89 c7                	mov    edi,eax
c001daa3:	83 e7 ff             	and    edi,0xffffffff
c001daa6:	89 f9                	mov    ecx,edi
c001daa8:	0f b6 da             	movzx  ebx,dl
c001daab:	89 c8                	mov    eax,ecx
c001daad:	89 da                	mov    edx,ebx
c001daaf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dab2:	8d 5e 08             	lea    ebx,[esi+0x8]
c001dab5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dab9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dabd:	83 e0 00             	and    eax,0x0
c001dac0:	09 d0                	or     eax,edx
c001dac2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dac9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dacf:	8d 50 01             	lea    edx,[eax+0x1]
c001dad2:	88 d1                	mov    cl,dl
c001dad4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001dad7:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001dadd:	0f b6 d0             	movzx  edx,al
c001dae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dae3:	83 c2 08             	add    edx,0x8
c001dae6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001daea:	0f b6 c9             	movzx  ecx,cl
c001daed:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001daf3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001daf7:	6a 01                	push   0x1
c001daf9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dafc:	e8 15 ff ff ff       	call   c001da16 <IOAPIC::read(int)>
c001db01:	83 c4 08             	add    esp,0x8
c001db04:	c1 f8 10             	sar    eax,0x10
c001db07:	0f b6 c0             	movzx  eax,al
c001db0a:	8d 50 01             	lea    edx,[eax+0x1]
c001db0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db10:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001db16:	b8 00 00 00 00       	mov    eax,0x0
c001db1b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db1e:	5b                   	pop    ebx
c001db1f:	5e                   	pop    esi
c001db20:	5f                   	pop    edi
c001db21:	5d                   	pop    ebp
c001db22:	c3                   	ret    
c001db23:	90                   	nop

c001db24 <IOAPIC::write(int, int)>:
c001db24:	55                   	push   ebp
c001db25:	89 e5                	mov    ebp,esp
c001db27:	83 ec 10             	sub    esp,0x10
c001db2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db2d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db33:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001db36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db39:	0f b6 d0             	movzx  edx,al
c001db3c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db3f:	89 10                	mov    DWORD PTR [eax],edx
c001db41:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db44:	8d 50 10             	lea    edx,[eax+0x10]
c001db47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db4a:	89 02                	mov    DWORD PTR [edx],eax
c001db4c:	90                   	nop
c001db4d:	c9                   	leave  
c001db4e:	c3                   	ret    
c001db4f:	90                   	nop

c001db50 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001db50:	55                   	push   ebp
c001db51:	89 e5                	mov    ebp,esp
c001db53:	53                   	push   ebx
c001db54:	83 ec 2c             	sub    esp,0x2c
c001db57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db5a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001db5d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001db60:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001db63:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001db66:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db69:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001db6c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001db6f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001db72:	88 d8                	mov    al,bl
c001db74:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001db77:	88 c8                	mov    al,cl
c001db79:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001db7c:	88 d0                	mov    al,dl
c001db7e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001db81:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db85:	83 c0 08             	add    eax,0x8
c001db88:	d1 e0                	shl    eax,1
c001db8a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001db8d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db91:	83 c0 08             	add    eax,0x8
c001db94:	d1 e0                	shl    eax,1
c001db96:	83 c0 01             	add    eax,0x1
c001db99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001db9c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db9f:	50                   	push   eax
c001dba0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dba3:	e8 6e fe ff ff       	call   c001da16 <IOAPIC::read(int)>
c001dba8:	83 c4 08             	add    esp,0x8
c001dbab:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dbae:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dbb5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dbb8:	c1 e0 18             	shl    eax,0x18
c001dbbb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dbbe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dbc1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dbc4:	52                   	push   edx
c001dbc5:	50                   	push   eax
c001dbc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbc9:	e8 56 ff ff ff       	call   c001db24 <IOAPIC::write(int, int)>
c001dbce:	83 c4 0c             	add    esp,0xc
c001dbd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dbd4:	50                   	push   eax
c001dbd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbd8:	e8 39 fe ff ff       	call   c001da16 <IOAPIC::read(int)>
c001dbdd:	83 c4 08             	add    esp,0x8
c001dbe0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dbe3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dbea:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dbf1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dbf8:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dbfc:	85 c0                	test   eax,eax
c001dbfe:	74 09                	je     c001dc09 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dc00:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dc07:	eb 07                	jmp    c001dc10 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dc09:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dc10:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dc14:	85 c0                	test   eax,eax
c001dc16:	74 09                	je     c001dc21 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dc18:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dc1f:	eb 07                	jmp    c001dc28 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dc21:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dc28:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dc2f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc33:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dc36:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dc39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc3c:	52                   	push   edx
c001dc3d:	50                   	push   eax
c001dc3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc41:	e8 de fe ff ff       	call   c001db24 <IOAPIC::write(int, int)>
c001dc46:	83 c4 0c             	add    esp,0xc
c001dc49:	90                   	nop
c001dc4a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dc4d:	c9                   	leave  
c001dc4e:	c3                   	ret    
c001dc4f:	90                   	nop

c001dc50 <APICTimer::close(int, int, void*)>:
c001dc50:	b8 00 00 00 00       	mov    eax,0x0
c001dc55:	c3                   	ret    
c001dc56:	66 90                	xchg   ax,ax

c001dc58 <apicTimerHandler(regs*, void*)>:
c001dc58:	83 ec 0c             	sub    esp,0xc
c001dc5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc5f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc61:	b8 10 27 00 00       	mov    eax,0x2710
c001dc66:	ba 00 00 00 00       	mov    edx,0x0
c001dc6b:	f7 f1                	div    ecx
c001dc6d:	83 ec 0c             	sub    esp,0xc
c001dc70:	50                   	push   eax
c001dc71:	e8 c6 fb fe ff       	call   c000d83c <timerHandler(unsigned int)>
c001dc76:	83 c4 10             	add    esp,0x10
c001dc79:	90                   	nop
c001dc7a:	83 c4 0c             	add    esp,0xc
c001dc7d:	c3                   	ret    
c001dc7e:	66 90                	xchg   ax,ax

c001dc80 <APICTimer::open(int, int, void*)>:
c001dc80:	83 ec 0c             	sub    esp,0xc
c001dc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc87:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc89:	83 c0 24             	add    eax,0x24
c001dc8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc8e:	83 ec 08             	sub    esp,0x8
c001dc91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc99:	ff d0                	call   eax
c001dc9b:	83 c4 10             	add    esp,0x10
c001dc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dca6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcb4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dcba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcbe:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dcc4:	83 ec 0c             	sub    esp,0xc
c001dcc7:	51                   	push   ecx
c001dcc8:	6a 01                	push   0x1
c001dcca:	68 58 dc 01 c0       	push   0xc001dc58
c001dccf:	52                   	push   edx
c001dcd0:	50                   	push   eax
c001dcd1:	e8 a6 e0 fe ff       	call   c000bd7c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcd6:	83 c4 20             	add    esp,0x20
c001dcd9:	89 c2                	mov    edx,eax
c001dcdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcdf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dce5:	b8 00 00 00 00       	mov    eax,0x0
c001dcea:	83 c4 0c             	add    esp,0xc
c001dced:	c3                   	ret    
c001dcee:	66 90                	xchg   ax,ax

c001dcf0 <APICTimer::write(int)>:
c001dcf0:	83 ec 0c             	sub    esp,0xc
c001dcf3:	83 ec 0c             	sub    esp,0xc
c001dcf6:	68 08 1e 02 c0       	push   0xc0021e08
c001dcfb:	e8 39 2b ff ff       	call   c0010839 <KePanic(char const*)>
c001dd00:	83 c4 10             	add    esp,0x10
c001dd03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd0b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd11:	90                   	nop
c001dd12:	83 c4 0c             	add    esp,0xc
c001dd15:	c3                   	ret    
c001dd16:	66 90                	xchg   ax,ax

c001dd18 <APICTimer::APICTimer()>:
c001dd18:	83 ec 0c             	sub    esp,0xc
c001dd1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd1f:	83 ec 08             	sub    esp,0x8
c001dd22:	68 18 1e 02 c0       	push   0xc0021e18
c001dd27:	50                   	push   eax
c001dd28:	e8 43 fa fe ff       	call   c000d770 <Timer::Timer(char const*)>
c001dd2d:	83 c4 10             	add    esp,0x10
c001dd30:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c001dd35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd39:	89 10                	mov    DWORD PTR [eax],edx
c001dd3b:	90                   	nop
c001dd3c:	83 c4 0c             	add    esp,0xc
c001dd3f:	c3                   	ret    

c001dd40 <PIT::write(int)>:
c001dd40:	83 ec 10             	sub    esp,0x10
c001dd43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd4b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd55:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dd5a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dd5f:	89 c2                	mov    edx,eax
c001dd61:	c1 fa 1f             	sar    edx,0x1f
c001dd64:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dd68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd6c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dd73:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dd78:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dd7c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dd81:	ee                   	out    dx,al
c001dd82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd86:	0f b6 c0             	movzx  eax,al
c001dd89:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dd90:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dd94:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dd98:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd9d:	ee                   	out    dx,al
c001dd9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dda2:	c1 f8 08             	sar    eax,0x8
c001dda5:	0f b6 c0             	movzx  eax,al
c001dda8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ddaf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddb3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddb7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ddbc:	ee                   	out    dx,al
c001ddbd:	90                   	nop
c001ddbe:	83 c4 10             	add    esp,0x10
c001ddc1:	c3                   	ret    
c001ddc2:	66 90                	xchg   ax,ax

c001ddc4 <pitHandler(regs*, void*)>:
c001ddc4:	83 ec 0c             	sub    esp,0xc
c001ddc7:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001ddcd:	b8 10 27 00 00       	mov    eax,0x2710
c001ddd2:	89 c2                	mov    edx,eax
c001ddd4:	c1 fa 1f             	sar    edx,0x1f
c001ddd7:	f7 f9                	idiv   ecx
c001ddd9:	83 ec 0c             	sub    esp,0xc
c001dddc:	50                   	push   eax
c001dddd:	e8 5a fa fe ff       	call   c000d83c <timerHandler(unsigned int)>
c001dde2:	83 c4 10             	add    esp,0x10
c001dde5:	90                   	nop
c001dde6:	83 c4 0c             	add    esp,0xc
c001dde9:	c3                   	ret    
c001ddea:	66 90                	xchg   ax,ax

c001ddec <PIT::open(int, int, void*)>:
c001ddec:	83 ec 0c             	sub    esp,0xc
c001ddef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf3:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddf5:	83 c0 24             	add    eax,0x24
c001ddf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddfa:	83 ec 08             	sub    esp,0x8
c001ddfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de05:	ff d0                	call   eax
c001de07:	83 c4 10             	add    esp,0x10
c001de0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0e:	83 ec 0c             	sub    esp,0xc
c001de11:	6a 00                	push   0x0
c001de13:	6a 01                	push   0x1
c001de15:	68 c4 dd 01 c0       	push   0xc001ddc4
c001de1a:	6a 00                	push   0x0
c001de1c:	50                   	push   eax
c001de1d:	e8 5a df fe ff       	call   c000bd7c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de22:	83 c4 20             	add    esp,0x20
c001de25:	89 c2                	mov    edx,eax
c001de27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de2b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de31:	b8 00 00 00 00       	mov    eax,0x0
c001de36:	83 c4 0c             	add    esp,0xc
c001de39:	c3                   	ret    
c001de3a:	66 90                	xchg   ax,ax

c001de3c <PIT::close(int, int, void*)>:
c001de3c:	83 ec 0c             	sub    esp,0xc
c001de3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de43:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001de4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de51:	6a 01                	push   0x1
c001de53:	68 c4 dd 01 c0       	push   0xc001ddc4
c001de58:	6a 00                	push   0x0
c001de5a:	50                   	push   eax
c001de5b:	e8 52 df fe ff       	call   c000bdb2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001de60:	83 c4 10             	add    esp,0x10
c001de63:	b8 00 00 00 00       	mov    eax,0x0
c001de68:	83 c4 0c             	add    esp,0xc
c001de6b:	c3                   	ret    

c001de6c <PIT::PIT()>:
c001de6c:	83 ec 0c             	sub    esp,0xc
c001de6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de73:	83 ec 08             	sub    esp,0x8
c001de76:	68 54 1e 02 c0       	push   0xc0021e54
c001de7b:	50                   	push   eax
c001de7c:	e8 ef f8 fe ff       	call   c000d770 <Timer::Timer(char const*)>
c001de81:	83 c4 10             	add    esp,0x10
c001de84:	ba 7c 1e 02 c0       	mov    edx,0xc0021e7c
c001de89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de8d:	89 10                	mov    DWORD PTR [eax],edx
c001de8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de99:	0f b6 d0             	movzx  edx,al
c001de9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001deb1:	0f b6 d0             	movzx  edx,al
c001deb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001debd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dec7:	8d 50 01             	lea    edx,[eax+0x1]
c001deca:	88 d1                	mov    cl,dl
c001decc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ded0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ded6:	0f b6 d0             	movzx  edx,al
c001ded9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dee1:	83 e1 3f             	and    ecx,0x3f
c001dee4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dee8:	90                   	nop
c001dee9:	83 c4 0c             	add    esp,0xc
c001deec:	c3                   	ret    
c001deed:	66 90                	xchg   ax,ax
c001deef:	90                   	nop

c001def0 <avxDetect>:
c001def0:	b8 01 00 00 00       	mov    eax,0x1
c001def5:	0f a2                	cpuid  
c001def7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001defd:	74 15                	je     c001df14 <avxDetect.noAVX>
c001deff:	b8 01 00 00 00       	mov    eax,0x1
c001df04:	0f a2                	cpuid  
c001df06:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001df0c:	74 06                	je     c001df14 <avxDetect.noAVX>
c001df0e:	b8 01 00 00 00       	mov    eax,0x1
c001df13:	c3                   	ret    

c001df14 <avxDetect.noAVX>:
c001df14:	b8 00 00 00 00       	mov    eax,0x0
c001df19:	c3                   	ret    

c001df1a <avxSave>:
c001df1a:	53                   	push   ebx
c001df1b:	52                   	push   edx
c001df1c:	31 c0                	xor    eax,eax
c001df1e:	48                   	dec    eax
c001df1f:	89 c2                	mov    edx,eax
c001df21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df25:	0f ae 23             	xsave  [ebx]
c001df28:	5a                   	pop    edx
c001df29:	5b                   	pop    ebx
c001df2a:	c3                   	ret    

c001df2b <avxLoad>:
c001df2b:	53                   	push   ebx
c001df2c:	52                   	push   edx
c001df2d:	31 c0                	xor    eax,eax
c001df2f:	48                   	dec    eax
c001df30:	89 c2                	mov    edx,eax
c001df32:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df36:	0f ae 2b             	xrstor [ebx]
c001df39:	5a                   	pop    edx
c001df3a:	5b                   	pop    ebx
c001df3b:	c3                   	ret    

c001df3c <avxInit>:
c001df3c:	e8 67 03 00 00       	call   c001e2a8 <sseInit>
c001df41:	50                   	push   eax
c001df42:	51                   	push   ecx
c001df43:	0f 20 e0             	mov    eax,cr4
c001df46:	0d 00 00 04 00       	or     eax,0x40000
c001df4b:	0f 22 e0             	mov    cr4,eax
c001df4e:	31 c9                	xor    ecx,ecx
c001df50:	0f 01 d0             	xgetbv 
c001df53:	0d 07 00 00 00       	or     eax,0x7
c001df58:	0f 01 d1             	xsetbv 
c001df5b:	59                   	pop    ecx
c001df5c:	58                   	pop    eax
c001df5d:	c3                   	ret    

c001df5e <avxClose>:
c001df5e:	c3                   	ret    

c001df5f <wouldSheSayYes>:
c001df5f:	c3                   	ret    
c001df60:	49                   	dec    ecx
c001df61:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001df65:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001df69:	75 20                	jne    c001df8b <isr0+0xb>
c001df6b:	4e                   	dec    esi
c001df6c:	79 61                	jns    c001dfcf <isr7+0x3>
c001df6e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001df73:	66 90                	xchg   ax,ax
c001df75:	66 90                	xchg   ax,ax
c001df77:	66 90                	xchg   ax,ax
c001df79:	66 90                	xchg   ax,ax
c001df7b:	66 90                	xchg   ax,ax
c001df7d:	66 90                	xchg   ax,ax
c001df7f:	90                   	nop

c001df80 <isr0>:
c001df80:	fa                   	cli    
c001df81:	68 00 00 00 00       	push   0x0
c001df86:	68 00 00 00 00       	push   0x0
c001df8b:	e9 56 01 00 00       	jmp    c001e0e6 <int_common_stub>

c001df90 <isr1>:
c001df90:	fa                   	cli    
c001df91:	6a 00                	push   0x0
c001df93:	6a 01                	push   0x1
c001df95:	e9 4c 01 00 00       	jmp    c001e0e6 <int_common_stub>

c001df9a <isr2>:
c001df9a:	fa                   	cli    
c001df9b:	6a 00                	push   0x0
c001df9d:	6a 02                	push   0x2
c001df9f:	e9 42 01 00 00       	jmp    c001e0e6 <int_common_stub>

c001dfa4 <isr3>:
c001dfa4:	fa                   	cli    
c001dfa5:	6a 00                	push   0x0
c001dfa7:	6a 03                	push   0x3
c001dfa9:	e9 38 01 00 00       	jmp    c001e0e6 <int_common_stub>

c001dfae <isr4>:
c001dfae:	fa                   	cli    
c001dfaf:	6a 00                	push   0x0
c001dfb1:	6a 04                	push   0x4
c001dfb3:	e9 2e 01 00 00       	jmp    c001e0e6 <int_common_stub>

c001dfb8 <isr5>:
c001dfb8:	fa                   	cli    
c001dfb9:	6a 00                	push   0x0
c001dfbb:	6a 05                	push   0x5
c001dfbd:	e9 24 01 00 00       	jmp    c001e0e6 <int_common_stub>

c001dfc2 <isr6>:
c001dfc2:	fa                   	cli    
c001dfc3:	6a 00                	push   0x0
c001dfc5:	6a 06                	push   0x6
c001dfc7:	e9 1a 01 00 00       	jmp    c001e0e6 <int_common_stub>

c001dfcc <isr7>:
c001dfcc:	fa                   	cli    
c001dfcd:	6a 00                	push   0x0
c001dfcf:	6a 07                	push   0x7
c001dfd1:	e9 10 01 00 00       	jmp    c001e0e6 <int_common_stub>

c001dfd6 <isr8>:
c001dfd6:	fa                   	cli    
c001dfd7:	6a 08                	push   0x8
c001dfd9:	e9 08 01 00 00       	jmp    c001e0e6 <int_common_stub>

c001dfde <isr9>:
c001dfde:	fa                   	cli    
c001dfdf:	6a 00                	push   0x0
c001dfe1:	6a 09                	push   0x9
c001dfe3:	e9 fe 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001dfe8 <isr10>:
c001dfe8:	fa                   	cli    
c001dfe9:	6a 0a                	push   0xa
c001dfeb:	e9 f6 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001dff0 <isr11>:
c001dff0:	fa                   	cli    
c001dff1:	6a 0b                	push   0xb
c001dff3:	e9 ee 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001dff8 <isr12>:
c001dff8:	fa                   	cli    
c001dff9:	6a 0c                	push   0xc
c001dffb:	e9 e6 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e000 <isr13>:
c001e000:	fa                   	cli    
c001e001:	6a 0d                	push   0xd
c001e003:	53                   	push   ebx
c001e004:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e008:	81 fb d6 e1 01 c0    	cmp    ebx,0xc001e1d6
c001e00e:	5b                   	pop    ebx
c001e00f:	0f 84 c3 01 00 00    	je     c001e1d8 <finishSignal2>
c001e015:	e9 cc 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e01a <isr14>:
c001e01a:	fa                   	cli    
c001e01b:	6a 0e                	push   0xe
c001e01d:	e9 c4 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e022 <isr15>:
c001e022:	fa                   	cli    
c001e023:	6a 00                	push   0x0
c001e025:	6a 0f                	push   0xf
c001e027:	e9 ba 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e02c <isr16>:
c001e02c:	fa                   	cli    
c001e02d:	6a 00                	push   0x0
c001e02f:	6a 10                	push   0x10
c001e031:	e9 b0 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e036 <isr17>:
c001e036:	fa                   	cli    
c001e037:	6a 00                	push   0x0
c001e039:	6a 11                	push   0x11
c001e03b:	e9 a6 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e040 <isr18>:
c001e040:	fa                   	cli    
c001e041:	6a 00                	push   0x0
c001e043:	6a 12                	push   0x12
c001e045:	e9 9c 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e04a <irq3>:
c001e04a:	fa                   	cli    
c001e04b:	6a 00                	push   0x0
c001e04d:	6a 23                	push   0x23
c001e04f:	e9 92 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e054 <irq4>:
c001e054:	fa                   	cli    
c001e055:	6a 00                	push   0x0
c001e057:	6a 24                	push   0x24
c001e059:	e9 88 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e05e <irq5>:
c001e05e:	fa                   	cli    
c001e05f:	6a 00                	push   0x0
c001e061:	6a 25                	push   0x25
c001e063:	e9 7e 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e068 <irq6>:
c001e068:	fa                   	cli    
c001e069:	6a 00                	push   0x0
c001e06b:	6a 26                	push   0x26
c001e06d:	e9 74 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e072 <irq7>:
c001e072:	fa                   	cli    
c001e073:	6a 00                	push   0x0
c001e075:	6a 27                	push   0x27
c001e077:	e9 6a 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e07c <irq8>:
c001e07c:	fa                   	cli    
c001e07d:	6a 00                	push   0x0
c001e07f:	6a 28                	push   0x28
c001e081:	e9 60 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e086 <irq9>:
c001e086:	fa                   	cli    
c001e087:	6a 00                	push   0x0
c001e089:	6a 29                	push   0x29
c001e08b:	e9 56 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e090 <irq10>:
c001e090:	fa                   	cli    
c001e091:	6a 00                	push   0x0
c001e093:	6a 2a                	push   0x2a
c001e095:	e9 4c 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e09a <irq11>:
c001e09a:	fa                   	cli    
c001e09b:	6a 00                	push   0x0
c001e09d:	6a 2b                	push   0x2b
c001e09f:	e9 42 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e0a4 <irq12>:
c001e0a4:	fa                   	cli    
c001e0a5:	6a 00                	push   0x0
c001e0a7:	6a 2c                	push   0x2c
c001e0a9:	e9 38 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e0ae <irq13>:
c001e0ae:	fa                   	cli    
c001e0af:	6a 00                	push   0x0
c001e0b1:	6a 2d                	push   0x2d
c001e0b3:	e9 2e 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e0b8 <irq14>:
c001e0b8:	fa                   	cli    
c001e0b9:	6a 00                	push   0x0
c001e0bb:	6a 2e                	push   0x2e
c001e0bd:	e9 24 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e0c2 <irq15>:
c001e0c2:	fa                   	cli    
c001e0c3:	6a 00                	push   0x0
c001e0c5:	6a 2f                	push   0x2f
c001e0c7:	e9 1a 00 00 00       	jmp    c001e0e6 <int_common_stub>

c001e0cc <irq1>:
c001e0cc:	fa                   	cli    
c001e0cd:	6a 00                	push   0x0
c001e0cf:	6a 21                	push   0x21
c001e0d1:	eb 13                	jmp    c001e0e6 <int_common_stub>

c001e0d3 <irq2>:
c001e0d3:	fa                   	cli    
c001e0d4:	6a 00                	push   0x0
c001e0d6:	6a 22                	push   0x22
c001e0d8:	eb 0c                	jmp    c001e0e6 <int_common_stub>

c001e0da <isr96>:
c001e0da:	6a 00                	push   0x0
c001e0dc:	6a 60                	push   0x60
c001e0de:	fb                   	sti    
c001e0df:	eb 37                	jmp    c001e118 <syscall_common_stub>

c001e0e1 <irq0>:
c001e0e1:	fa                   	cli    
c001e0e2:	6a 00                	push   0x0
c001e0e4:	6a 20                	push   0x20

c001e0e6 <int_common_stub>:
c001e0e6:	60                   	pusha  
c001e0e7:	1e                   	push   ds
c001e0e8:	06                   	push   es
c001e0e9:	0f a0                	push   fs
c001e0eb:	0f a8                	push   gs
c001e0ed:	66 b8 10 00          	mov    ax,0x10
c001e0f1:	66 8e d8             	mov    ds,ax
c001e0f4:	66 8e c0             	mov    es,ax
c001e0f7:	66 8e e0             	mov    fs,ax
c001e0fa:	66 8e e8             	mov    gs,ax
c001e0fd:	54                   	push   esp
c001e0fe:	fc                   	cld    
c001e0ff:	e8 78 e1 fe ff       	call   c000c27c <int_handler>
c001e104:	81 c4 04 00 00 00    	add    esp,0x4
c001e10a:	0f a9                	pop    gs
c001e10c:	0f a1                	pop    fs
c001e10e:	07                   	pop    es
c001e10f:	1f                   	pop    ds
c001e110:	61                   	popa   
c001e111:	81 c4 08 00 00 00    	add    esp,0x8
c001e117:	cf                   	iret   

c001e118 <syscall_common_stub>:
c001e118:	60                   	pusha  
c001e119:	1e                   	push   ds
c001e11a:	06                   	push   es
c001e11b:	0f a0                	push   fs
c001e11d:	0f a8                	push   gs
c001e11f:	66 b8 10 00          	mov    ax,0x10
c001e123:	66 8e d8             	mov    ds,ax
c001e126:	66 8e c0             	mov    es,ax
c001e129:	66 8e e0             	mov    fs,ax
c001e12c:	66 8e e8             	mov    gs,ax
c001e12f:	54                   	push   esp
c001e130:	fc                   	cld    
c001e131:	e8 46 e1 fe ff       	call   c000c27c <int_handler>
c001e136:	81 c4 04 00 00 00    	add    esp,0x4
c001e13c:	0f a9                	pop    gs
c001e13e:	0f a1                	pop    fs
c001e140:	07                   	pop    es
c001e141:	1f                   	pop    ds
c001e142:	e8 f8 2c ff ff       	call   c0010e3f <KiCheckSignalZ>
c001e147:	3d 00 00 00 00       	cmp    eax,0x0
c001e14c:	0f 84 c0 00 00 00    	je     c001e212 <skipSignals>
c001e152:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e157:	61                   	popa   
c001e158:	53                   	push   ebx
c001e159:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e15f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e162:	5b                   	pop    ebx
c001e163:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e168:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e16b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e16e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e171:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e174:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e177:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e17a:	81 c4 08 00 00 00    	add    esp,0x8
c001e180:	5e                   	pop    esi
c001e181:	5b                   	pop    ebx
c001e182:	59                   	pop    ecx
c001e183:	5a                   	pop    edx
c001e184:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e187:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e18a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e18d:	52                   	push   edx
c001e18e:	51                   	push   ecx
c001e18f:	53                   	push   ebx
c001e190:	56                   	push   esi
c001e191:	81 ec 08 00 00 00    	sub    esp,0x8
c001e197:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e19a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e19d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e1a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e1a6:	60                   	pusha  
c001e1a7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e1ad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e1b0:	89 e3                	mov    ebx,esp
c001e1b2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e1b5:	52                   	push   edx
c001e1b6:	68 d6 e1 01 c0       	push   0xc001e1d6
c001e1bb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e1be:	89 dc                	mov    esp,ebx
c001e1c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e1c3:	68 23 00 00 00       	push   0x23
c001e1c8:	51                   	push   ecx
c001e1c9:	68 02 02 00 00       	push   0x202
c001e1ce:	68 1b 00 00 00       	push   0x1b
c001e1d3:	ff 36                	push   DWORD PTR [esi]
c001e1d5:	cf                   	iret   

c001e1d6 <finishSignal>:
c001e1d6:	cd 0f                	int    0xf

c001e1d8 <finishSignal2>:
c001e1d8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e1de:	e8 d9 2c ff ff       	call   c0010ebc <KiFinishSignalZ>
c001e1e3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e1e9:	68 23 00 00 00       	push   0x23
c001e1ee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e1f1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e1f4:	68 1b 00 00 00       	push   0x1b
c001e1f9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e1fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e1ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e202:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e205:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e208:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e20b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e20e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e211:	cf                   	iret   

c001e212 <skipSignals>:
c001e212:	61                   	popa   
c001e213:	81 c4 08 00 00 00    	add    esp,0x8
c001e219:	cf                   	iret   
c001e21a:	90                   	nop
c001e21b:	90                   	nop

c001e21c <irq16>:
c001e21c:	fa                   	cli    
c001e21d:	6a 00                	push   0x0
c001e21f:	6a 30                	push   0x30
c001e221:	e9 c0 fe ff ff       	jmp    c001e0e6 <int_common_stub>

c001e226 <irq17>:
c001e226:	fa                   	cli    
c001e227:	6a 00                	push   0x0
c001e229:	6a 31                	push   0x31
c001e22b:	e9 b6 fe ff ff       	jmp    c001e0e6 <int_common_stub>

c001e230 <irq18>:
c001e230:	fa                   	cli    
c001e231:	6a 00                	push   0x0
c001e233:	6a 32                	push   0x32
c001e235:	e9 ac fe ff ff       	jmp    c001e0e6 <int_common_stub>

c001e23a <irq19>:
c001e23a:	fa                   	cli    
c001e23b:	6a 00                	push   0x0
c001e23d:	6a 33                	push   0x33
c001e23f:	e9 a2 fe ff ff       	jmp    c001e0e6 <int_common_stub>

c001e244 <irq20>:
c001e244:	fa                   	cli    
c001e245:	6a 00                	push   0x0
c001e247:	6a 34                	push   0x34
c001e249:	e9 98 fe ff ff       	jmp    c001e0e6 <int_common_stub>

c001e24e <irq21>:
c001e24e:	fa                   	cli    
c001e24f:	6a 00                	push   0x0
c001e251:	6a 35                	push   0x35
c001e253:	e9 8e fe ff ff       	jmp    c001e0e6 <int_common_stub>

c001e258 <irq22>:
c001e258:	fa                   	cli    
c001e259:	6a 00                	push   0x0
c001e25b:	6a 36                	push   0x36
c001e25d:	e9 84 fe ff ff       	jmp    c001e0e6 <int_common_stub>

c001e262 <irq23>:
c001e262:	fa                   	cli    
c001e263:	6a 00                	push   0x0
c001e265:	6a 37                	push   0x37
c001e267:	e9 7a fe ff ff       	jmp    c001e0e6 <int_common_stub>
c001e26c:	66 90                	xchg   ax,ax
c001e26e:	66 90                	xchg   ax,ax

c001e270 <i386GetRDRAND>:
c001e270:	b9 64 00 00 00       	mov    ecx,0x64

c001e275 <retry>:
c001e275:	0f c7 f0             	rdrand eax
c001e278:	72 05                	jb     c001e27f <retry.done>
c001e27a:	e2 f9                	loop   c001e275 <retry>

c001e27c <retry.fail>:
c001e27c:	31 c0                	xor    eax,eax
c001e27e:	c3                   	ret    

c001e27f <retry.done>:
c001e27f:	c3                   	ret    

c001e280 <absolutelyNoChanceInHell>:
c001e280:	b8 01 00 00 00       	mov    eax,0x1
c001e285:	0f a2                	cpuid  
c001e287:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e28d:	74 06                	je     c001e295 <sseDetect.noSSE>
c001e28f:	b8 01 00 00 00       	mov    eax,0x1
c001e294:	c3                   	ret    

c001e295 <sseDetect.noSSE>:
c001e295:	31 c0                	xor    eax,eax
c001e297:	c3                   	ret    

c001e298 <sseSave>:
c001e298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e29c:	0f ae 00             	fxsave [eax]
c001e29f:	c3                   	ret    

c001e2a0 <sseLoad>:
c001e2a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2a4:	0f ae 08             	fxrstor [eax]
c001e2a7:	c3                   	ret    

c001e2a8 <sseInit>:
c001e2a8:	e8 42 00 00 00       	call   c001e2ef <x87Init>
c001e2ad:	0f 20 e0             	mov    eax,cr4
c001e2b0:	66 0d 00 06          	or     ax,0x600
c001e2b4:	0f 22 e0             	mov    cr4,eax
c001e2b7:	c3                   	ret    

c001e2b8 <sseClose>:
c001e2b8:	c3                   	ret    
c001e2b9:	66 90                	xchg   ax,ax
c001e2bb:	66 90                	xchg   ax,ax
c001e2bd:	66 90                	xchg   ax,ax
c001e2bf:	90                   	nop

c001e2c0 <value_37F>:
c001e2c0:	7f 03                	jg     c001e2c5 <value_37A+0x1>

c001e2c2 <value_37E>:
c001e2c2:	7e 03                	jle    c001e2c7 <x87Detect+0x1>

c001e2c4 <value_37A>:
c001e2c4:	7a 03                	jp     c001e2c9 <x87Detect+0x3>

c001e2c6 <x87Detect>:
c001e2c6:	b8 01 00 00 00       	mov    eax,0x1
c001e2cb:	0f a2                	cpuid  
c001e2cd:	f7 c2 01 00 00 00    	test   edx,0x1
c001e2d3:	74 06                	je     c001e2db <x87Detect.nox87>
c001e2d5:	b8 01 00 00 00       	mov    eax,0x1
c001e2da:	c3                   	ret    

c001e2db <x87Detect.nox87>:
c001e2db:	b8 00 00 00 00       	mov    eax,0x0
c001e2e0:	c3                   	ret    

c001e2e1 <x87Save>:
c001e2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2e5:	dd 30                	fnsave [eax]
c001e2e7:	c3                   	ret    

c001e2e8 <x87Load>:
c001e2e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2ec:	dd 20                	frstor [eax]
c001e2ee:	c3                   	ret    

c001e2ef <x87Init>:
c001e2ef:	0f 20 c0             	mov    eax,cr0
c001e2f2:	66 25 fb ff          	and    ax,0xfffb
c001e2f6:	66 0d 22 00          	or     ax,0x22
c001e2fa:	0f 22 c0             	mov    cr0,eax
c001e2fd:	db e3                	fninit 
c001e2ff:	0f 06                	clts   
c001e301:	d9 2d c4 e2 01 c0    	fldcw  WORD PTR ds:0xc001e2c4
c001e307:	c3                   	ret    

c001e308 <x87Close>:
c001e308:	c3                   	ret    
c001e309:	66 90                	xchg   ax,ax
c001e30b:	90                   	nop

c001e30c <__do_global_ctors_aux>:
c001e30c:	a1 c0 f2 01 c0       	mov    eax,ds:0xc001f2c0
c001e311:	83 f8 ff             	cmp    eax,0xffffffff
c001e314:	74 1a                	je     c001e330 <__do_global_ctors_aux+0x24>
c001e316:	55                   	push   ebp
c001e317:	89 e5                	mov    ebp,esp
c001e319:	53                   	push   ebx
c001e31a:	52                   	push   edx
c001e31b:	bb c0 f2 01 c0       	mov    ebx,0xc001f2c0
c001e320:	ff d0                	call   eax
c001e322:	83 eb 04             	sub    ebx,0x4
c001e325:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e327:	83 f8 ff             	cmp    eax,0xffffffff
c001e32a:	75 f4                	jne    c001e320 <__do_global_ctors_aux+0x14>
c001e32c:	58                   	pop    eax
c001e32d:	5b                   	pop    ebx
c001e32e:	5d                   	pop    ebp
c001e32f:	c3                   	ret    
c001e330:	c3                   	ret    
c001e331:	66 90                	xchg   ax,ax
c001e333:	90                   	nop

c001e334 <__divdi3>:
c001e334:	55                   	push   ebp
c001e335:	57                   	push   edi
c001e336:	56                   	push   esi
c001e337:	53                   	push   ebx
c001e338:	83 ec 1c             	sub    esp,0x1c
c001e33b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e33f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e343:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e346:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e34a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e34e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e352:	85 db                	test   ebx,ebx
c001e354:	0f 88 8e 00 00 00    	js     c001e3e8 <__divdi3+0xb4>
c001e35a:	89 dd                	mov    ebp,ebx
c001e35c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e364:	89 d3                	mov    ebx,edx
c001e366:	85 d2                	test   edx,edx
c001e368:	79 0d                	jns    c001e377 <__divdi3+0x43>
c001e36a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e36e:	f7 d8                	neg    eax
c001e370:	83 d2 00             	adc    edx,0x0
c001e373:	f7 da                	neg    edx
c001e375:	89 d3                	mov    ebx,edx
c001e377:	89 c7                	mov    edi,eax
c001e379:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e37c:	85 db                	test   ebx,ebx
c001e37e:	75 48                	jne    c001e3c8 <__divdi3+0x94>
c001e380:	39 ef                	cmp    edi,ebp
c001e382:	76 24                	jbe    c001e3a8 <__divdi3+0x74>
c001e384:	89 ea                	mov    edx,ebp
c001e386:	f7 f7                	div    edi
c001e388:	89 c1                	mov    ecx,eax
c001e38a:	31 f6                	xor    esi,esi
c001e38c:	89 c8                	mov    eax,ecx
c001e38e:	89 f2                	mov    edx,esi
c001e390:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e394:	85 c9                	test   ecx,ecx
c001e396:	74 07                	je     c001e39f <__divdi3+0x6b>
c001e398:	f7 d8                	neg    eax
c001e39a:	83 d2 00             	adc    edx,0x0
c001e39d:	f7 da                	neg    edx
c001e39f:	83 c4 1c             	add    esp,0x1c
c001e3a2:	5b                   	pop    ebx
c001e3a3:	5e                   	pop    esi
c001e3a4:	5f                   	pop    edi
c001e3a5:	5d                   	pop    ebp
c001e3a6:	c3                   	ret    
c001e3a7:	90                   	nop
c001e3a8:	85 ff                	test   edi,edi
c001e3aa:	75 0b                	jne    c001e3b7 <__divdi3+0x83>
c001e3ac:	b8 01 00 00 00       	mov    eax,0x1
c001e3b1:	31 d2                	xor    edx,edx
c001e3b3:	f7 f3                	div    ebx
c001e3b5:	89 c7                	mov    edi,eax
c001e3b7:	31 d2                	xor    edx,edx
c001e3b9:	89 e8                	mov    eax,ebp
c001e3bb:	f7 f7                	div    edi
c001e3bd:	89 c6                	mov    esi,eax
c001e3bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3c2:	f7 f7                	div    edi
c001e3c4:	89 c1                	mov    ecx,eax
c001e3c6:	eb c4                	jmp    c001e38c <__divdi3+0x58>
c001e3c8:	39 eb                	cmp    ebx,ebp
c001e3ca:	77 3c                	ja     c001e408 <__divdi3+0xd4>
c001e3cc:	0f bd f3             	bsr    esi,ebx
c001e3cf:	83 f6 1f             	xor    esi,0x1f
c001e3d2:	75 40                	jne    c001e414 <__divdi3+0xe0>
c001e3d4:	39 eb                	cmp    ebx,ebp
c001e3d6:	72 09                	jb     c001e3e1 <__divdi3+0xad>
c001e3d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e3db:	0f 87 97 00 00 00    	ja     c001e478 <__divdi3+0x144>
c001e3e1:	b9 01 00 00 00       	mov    ecx,0x1
c001e3e6:	eb a4                	jmp    c001e38c <__divdi3+0x58>
c001e3e8:	f7 d9                	neg    ecx
c001e3ea:	83 d3 00             	adc    ebx,0x0
c001e3ed:	f7 db                	neg    ebx
c001e3ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3f6:	89 dd                	mov    ebp,ebx
c001e3f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e400:	e9 5f ff ff ff       	jmp    c001e364 <__divdi3+0x30>
c001e405:	8d 76 00             	lea    esi,[esi+0x0]
c001e408:	31 f6                	xor    esi,esi
c001e40a:	31 c9                	xor    ecx,ecx
c001e40c:	e9 7b ff ff ff       	jmp    c001e38c <__divdi3+0x58>
c001e411:	8d 76 00             	lea    esi,[esi+0x0]
c001e414:	b8 20 00 00 00       	mov    eax,0x20
c001e419:	29 f0                	sub    eax,esi
c001e41b:	89 f1                	mov    ecx,esi
c001e41d:	d3 e3                	shl    ebx,cl
c001e41f:	89 fa                	mov    edx,edi
c001e421:	88 c1                	mov    cl,al
c001e423:	d3 ea                	shr    edx,cl
c001e425:	09 da                	or     edx,ebx
c001e427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e42b:	89 f1                	mov    ecx,esi
c001e42d:	d3 e7                	shl    edi,cl
c001e42f:	89 eb                	mov    ebx,ebp
c001e431:	88 c1                	mov    cl,al
c001e433:	d3 eb                	shr    ebx,cl
c001e435:	89 f1                	mov    ecx,esi
c001e437:	d3 e5                	shl    ebp,cl
c001e439:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e43c:	88 c1                	mov    cl,al
c001e43e:	d3 ea                	shr    edx,cl
c001e440:	09 d5                	or     ebp,edx
c001e442:	89 e8                	mov    eax,ebp
c001e444:	89 da                	mov    edx,ebx
c001e446:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e44a:	89 d3                	mov    ebx,edx
c001e44c:	89 c5                	mov    ebp,eax
c001e44e:	f7 e7                	mul    edi
c001e450:	39 d3                	cmp    ebx,edx
c001e452:	72 18                	jb     c001e46c <__divdi3+0x138>
c001e454:	74 0a                	je     c001e460 <__divdi3+0x12c>
c001e456:	89 e9                	mov    ecx,ebp
c001e458:	31 f6                	xor    esi,esi
c001e45a:	e9 2d ff ff ff       	jmp    c001e38c <__divdi3+0x58>
c001e45f:	90                   	nop
c001e460:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e463:	89 f1                	mov    ecx,esi
c001e465:	d3 e7                	shl    edi,cl
c001e467:	39 c7                	cmp    edi,eax
c001e469:	73 eb                	jae    c001e456 <__divdi3+0x122>
c001e46b:	90                   	nop
c001e46c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e46f:	31 f6                	xor    esi,esi
c001e471:	e9 16 ff ff ff       	jmp    c001e38c <__divdi3+0x58>
c001e476:	66 90                	xchg   ax,ax
c001e478:	31 c9                	xor    ecx,ecx
c001e47a:	e9 0d ff ff ff       	jmp    c001e38c <__divdi3+0x58>
c001e47f:	90                   	nop

c001e480 <__moddi3>:
c001e480:	55                   	push   ebp
c001e481:	57                   	push   edi
c001e482:	56                   	push   esi
c001e483:	53                   	push   ebx
c001e484:	83 ec 2c             	sub    esp,0x2c
c001e487:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e48b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e48f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e493:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e497:	85 db                	test   ebx,ebx
c001e499:	0f 88 85 00 00 00    	js     c001e524 <__moddi3+0xa4>
c001e49f:	89 de                	mov    esi,ebx
c001e4a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e4a9:	89 d7                	mov    edi,edx
c001e4ab:	85 d2                	test   edx,edx
c001e4ad:	79 09                	jns    c001e4b8 <__moddi3+0x38>
c001e4af:	f7 d8                	neg    eax
c001e4b1:	83 d2 00             	adc    edx,0x0
c001e4b4:	f7 da                	neg    edx
c001e4b6:	89 d7                	mov    edi,edx
c001e4b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4bc:	89 cd                	mov    ebp,ecx
c001e4be:	85 ff                	test   edi,edi
c001e4c0:	75 52                	jne    c001e514 <__moddi3+0x94>
c001e4c2:	89 c3                	mov    ebx,eax
c001e4c4:	39 f0                	cmp    eax,esi
c001e4c6:	76 24                	jbe    c001e4ec <__moddi3+0x6c>
c001e4c8:	89 c8                	mov    eax,ecx
c001e4ca:	89 f2                	mov    edx,esi
c001e4cc:	f7 f3                	div    ebx
c001e4ce:	89 d6                	mov    esi,edx
c001e4d0:	89 f0                	mov    eax,esi
c001e4d2:	31 d2                	xor    edx,edx
c001e4d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4d8:	85 c9                	test   ecx,ecx
c001e4da:	74 07                	je     c001e4e3 <__moddi3+0x63>
c001e4dc:	f7 d8                	neg    eax
c001e4de:	83 d2 00             	adc    edx,0x0
c001e4e1:	f7 da                	neg    edx
c001e4e3:	83 c4 2c             	add    esp,0x2c
c001e4e6:	5b                   	pop    ebx
c001e4e7:	5e                   	pop    esi
c001e4e8:	5f                   	pop    edi
c001e4e9:	5d                   	pop    ebp
c001e4ea:	c3                   	ret    
c001e4eb:	90                   	nop
c001e4ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e4f0:	85 db                	test   ebx,ebx
c001e4f2:	75 0d                	jne    c001e501 <__moddi3+0x81>
c001e4f4:	b8 01 00 00 00       	mov    eax,0x1
c001e4f9:	31 d2                	xor    edx,edx
c001e4fb:	f7 f7                	div    edi
c001e4fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e501:	89 f0                	mov    eax,esi
c001e503:	31 d2                	xor    edx,edx
c001e505:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e509:	f7 f7                	div    edi
c001e50b:	89 e8                	mov    eax,ebp
c001e50d:	f7 f7                	div    edi
c001e50f:	89 d6                	mov    esi,edx
c001e511:	eb bd                	jmp    c001e4d0 <__moddi3+0x50>
c001e513:	90                   	nop
c001e514:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e518:	39 f7                	cmp    edi,esi
c001e51a:	76 20                	jbe    c001e53c <__moddi3+0xbc>
c001e51c:	89 c8                	mov    eax,ecx
c001e51e:	89 f2                	mov    edx,esi
c001e520:	eb b2                	jmp    c001e4d4 <__moddi3+0x54>
c001e522:	66 90                	xchg   ax,ax
c001e524:	f7 d9                	neg    ecx
c001e526:	83 d3 00             	adc    ebx,0x0
c001e529:	f7 db                	neg    ebx
c001e52b:	89 de                	mov    esi,ebx
c001e52d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e535:	e9 6f ff ff ff       	jmp    c001e4a9 <__moddi3+0x29>
c001e53a:	66 90                	xchg   ax,ax
c001e53c:	0f bd c7             	bsr    eax,edi
c001e53f:	83 f0 1f             	xor    eax,0x1f
c001e542:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e546:	75 24                	jne    c001e56c <__moddi3+0xec>
c001e548:	39 f7                	cmp    edi,esi
c001e54a:	72 06                	jb     c001e552 <__moddi3+0xd2>
c001e54c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e550:	77 0c                	ja     c001e55e <__moddi3+0xde>
c001e552:	89 e9                	mov    ecx,ebp
c001e554:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e558:	19 fe                	sbb    esi,edi
c001e55a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e55e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e562:	89 f2                	mov    edx,esi
c001e564:	e9 6b ff ff ff       	jmp    c001e4d4 <__moddi3+0x54>
c001e569:	8d 76 00             	lea    esi,[esi+0x0]
c001e56c:	b8 20 00 00 00       	mov    eax,0x20
c001e571:	89 c2                	mov    edx,eax
c001e573:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e577:	29 da                	sub    edx,ebx
c001e579:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e57d:	88 d9                	mov    cl,bl
c001e57f:	d3 e7                	shl    edi,cl
c001e581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e585:	88 d1                	mov    cl,dl
c001e587:	d3 e8                	shr    eax,cl
c001e589:	09 c7                	or     edi,eax
c001e58b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e58f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e593:	89 d8                	mov    eax,ebx
c001e595:	88 d9                	mov    cl,bl
c001e597:	d3 e7                	shl    edi,cl
c001e599:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e59d:	89 f3                	mov    ebx,esi
c001e59f:	88 d1                	mov    cl,dl
c001e5a1:	d3 eb                	shr    ebx,cl
c001e5a3:	89 c7                	mov    edi,eax
c001e5a5:	88 c1                	mov    cl,al
c001e5a7:	d3 e6                	shl    esi,cl
c001e5a9:	89 e8                	mov    eax,ebp
c001e5ab:	88 d1                	mov    cl,dl
c001e5ad:	d3 e8                	shr    eax,cl
c001e5af:	09 f0                	or     eax,esi
c001e5b1:	89 f9                	mov    ecx,edi
c001e5b3:	d3 e5                	shl    ebp,cl
c001e5b5:	89 da                	mov    edx,ebx
c001e5b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e5bb:	89 d3                	mov    ebx,edx
c001e5bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e5c1:	89 c6                	mov    esi,eax
c001e5c3:	89 d1                	mov    ecx,edx
c001e5c5:	39 d3                	cmp    ebx,edx
c001e5c7:	72 27                	jb     c001e5f0 <__moddi3+0x170>
c001e5c9:	74 21                	je     c001e5ec <__moddi3+0x16c>
c001e5cb:	29 f5                	sub    ebp,esi
c001e5cd:	19 cb                	sbb    ebx,ecx
c001e5cf:	89 de                	mov    esi,ebx
c001e5d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e5d5:	d3 e6                	shl    esi,cl
c001e5d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e5db:	89 f9                	mov    ecx,edi
c001e5dd:	d3 ed                	shr    ebp,cl
c001e5df:	09 ee                	or     esi,ebp
c001e5e1:	89 f0                	mov    eax,esi
c001e5e3:	d3 eb                	shr    ebx,cl
c001e5e5:	89 da                	mov    edx,ebx
c001e5e7:	e9 e8 fe ff ff       	jmp    c001e4d4 <__moddi3+0x54>
c001e5ec:	39 c5                	cmp    ebp,eax
c001e5ee:	73 db                	jae    c001e5cb <__moddi3+0x14b>
c001e5f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e5f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e5f8:	89 d1                	mov    ecx,edx
c001e5fa:	89 c6                	mov    esi,eax
c001e5fc:	eb cd                	jmp    c001e5cb <__moddi3+0x14b>
c001e5fe:	66 90                	xchg   ax,ax

c001e600 <__udivdi3>:
c001e600:	55                   	push   ebp
c001e601:	57                   	push   edi
c001e602:	56                   	push   esi
c001e603:	53                   	push   ebx
c001e604:	83 ec 1c             	sub    esp,0x1c
c001e607:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e60b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e60f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e613:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e617:	85 d2                	test   edx,edx
c001e619:	75 41                	jne    c001e65c <__udivdi3+0x5c>
c001e61b:	39 f7                	cmp    edi,esi
c001e61d:	76 15                	jbe    c001e634 <__udivdi3+0x34>
c001e61f:	89 e8                	mov    eax,ebp
c001e621:	89 f2                	mov    edx,esi
c001e623:	f7 f7                	div    edi
c001e625:	31 db                	xor    ebx,ebx
c001e627:	89 da                	mov    edx,ebx
c001e629:	83 c4 1c             	add    esp,0x1c
c001e62c:	5b                   	pop    ebx
c001e62d:	5e                   	pop    esi
c001e62e:	5f                   	pop    edi
c001e62f:	5d                   	pop    ebp
c001e630:	c3                   	ret    
c001e631:	8d 76 00             	lea    esi,[esi+0x0]
c001e634:	89 f9                	mov    ecx,edi
c001e636:	85 ff                	test   edi,edi
c001e638:	75 0b                	jne    c001e645 <__udivdi3+0x45>
c001e63a:	b8 01 00 00 00       	mov    eax,0x1
c001e63f:	31 d2                	xor    edx,edx
c001e641:	f7 f7                	div    edi
c001e643:	89 c1                	mov    ecx,eax
c001e645:	31 d2                	xor    edx,edx
c001e647:	89 f0                	mov    eax,esi
c001e649:	f7 f1                	div    ecx
c001e64b:	89 c3                	mov    ebx,eax
c001e64d:	89 e8                	mov    eax,ebp
c001e64f:	f7 f1                	div    ecx
c001e651:	89 da                	mov    edx,ebx
c001e653:	83 c4 1c             	add    esp,0x1c
c001e656:	5b                   	pop    ebx
c001e657:	5e                   	pop    esi
c001e658:	5f                   	pop    edi
c001e659:	5d                   	pop    ebp
c001e65a:	c3                   	ret    
c001e65b:	90                   	nop
c001e65c:	39 f2                	cmp    edx,esi
c001e65e:	77 1c                	ja     c001e67c <__udivdi3+0x7c>
c001e660:	0f bd da             	bsr    ebx,edx
c001e663:	83 f3 1f             	xor    ebx,0x1f
c001e666:	75 24                	jne    c001e68c <__udivdi3+0x8c>
c001e668:	39 f2                	cmp    edx,esi
c001e66a:	72 08                	jb     c001e674 <__udivdi3+0x74>
c001e66c:	39 ef                	cmp    edi,ebp
c001e66e:	0f 87 84 00 00 00    	ja     c001e6f8 <__udivdi3+0xf8>
c001e674:	b8 01 00 00 00       	mov    eax,0x1
c001e679:	eb ac                	jmp    c001e627 <__udivdi3+0x27>
c001e67b:	90                   	nop
c001e67c:	31 db                	xor    ebx,ebx
c001e67e:	31 c0                	xor    eax,eax
c001e680:	89 da                	mov    edx,ebx
c001e682:	83 c4 1c             	add    esp,0x1c
c001e685:	5b                   	pop    ebx
c001e686:	5e                   	pop    esi
c001e687:	5f                   	pop    edi
c001e688:	5d                   	pop    ebp
c001e689:	c3                   	ret    
c001e68a:	66 90                	xchg   ax,ax
c001e68c:	b8 20 00 00 00       	mov    eax,0x20
c001e691:	29 d8                	sub    eax,ebx
c001e693:	88 d9                	mov    cl,bl
c001e695:	d3 e2                	shl    edx,cl
c001e697:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e69b:	89 fa                	mov    edx,edi
c001e69d:	88 c1                	mov    cl,al
c001e69f:	d3 ea                	shr    edx,cl
c001e6a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6a5:	09 d1                	or     ecx,edx
c001e6a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6ab:	88 d9                	mov    cl,bl
c001e6ad:	d3 e7                	shl    edi,cl
c001e6af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6b3:	89 f7                	mov    edi,esi
c001e6b5:	88 c1                	mov    cl,al
c001e6b7:	d3 ef                	shr    edi,cl
c001e6b9:	88 d9                	mov    cl,bl
c001e6bb:	d3 e6                	shl    esi,cl
c001e6bd:	89 ea                	mov    edx,ebp
c001e6bf:	88 c1                	mov    cl,al
c001e6c1:	d3 ea                	shr    edx,cl
c001e6c3:	09 d6                	or     esi,edx
c001e6c5:	89 f0                	mov    eax,esi
c001e6c7:	89 fa                	mov    edx,edi
c001e6c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e6cd:	89 d7                	mov    edi,edx
c001e6cf:	89 c6                	mov    esi,eax
c001e6d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6d5:	39 d7                	cmp    edi,edx
c001e6d7:	72 13                	jb     c001e6ec <__udivdi3+0xec>
c001e6d9:	74 09                	je     c001e6e4 <__udivdi3+0xe4>
c001e6db:	89 f0                	mov    eax,esi
c001e6dd:	31 db                	xor    ebx,ebx
c001e6df:	e9 43 ff ff ff       	jmp    c001e627 <__udivdi3+0x27>
c001e6e4:	88 d9                	mov    cl,bl
c001e6e6:	d3 e5                	shl    ebp,cl
c001e6e8:	39 c5                	cmp    ebp,eax
c001e6ea:	73 ef                	jae    c001e6db <__udivdi3+0xdb>
c001e6ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001e6ef:	31 db                	xor    ebx,ebx
c001e6f1:	e9 31 ff ff ff       	jmp    c001e627 <__udivdi3+0x27>
c001e6f6:	66 90                	xchg   ax,ax
c001e6f8:	31 c0                	xor    eax,eax
c001e6fa:	e9 28 ff ff ff       	jmp    c001e627 <__udivdi3+0x27>
c001e6ff:	90                   	nop

c001e700 <__umoddi3>:
c001e700:	55                   	push   ebp
c001e701:	57                   	push   edi
c001e702:	56                   	push   esi
c001e703:	53                   	push   ebx
c001e704:	83 ec 1c             	sub    esp,0x1c
c001e707:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e70b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e70f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e713:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e717:	89 da                	mov    edx,ebx
c001e719:	85 c0                	test   eax,eax
c001e71b:	75 37                	jne    c001e754 <__umoddi3+0x54>
c001e71d:	39 df                	cmp    edi,ebx
c001e71f:	76 13                	jbe    c001e734 <__umoddi3+0x34>
c001e721:	89 f0                	mov    eax,esi
c001e723:	f7 f7                	div    edi
c001e725:	89 d0                	mov    eax,edx
c001e727:	31 d2                	xor    edx,edx
c001e729:	83 c4 1c             	add    esp,0x1c
c001e72c:	5b                   	pop    ebx
c001e72d:	5e                   	pop    esi
c001e72e:	5f                   	pop    edi
c001e72f:	5d                   	pop    ebp
c001e730:	c3                   	ret    
c001e731:	8d 76 00             	lea    esi,[esi+0x0]
c001e734:	89 fd                	mov    ebp,edi
c001e736:	85 ff                	test   edi,edi
c001e738:	75 0b                	jne    c001e745 <__umoddi3+0x45>
c001e73a:	b8 01 00 00 00       	mov    eax,0x1
c001e73f:	31 d2                	xor    edx,edx
c001e741:	f7 f7                	div    edi
c001e743:	89 c5                	mov    ebp,eax
c001e745:	89 d8                	mov    eax,ebx
c001e747:	31 d2                	xor    edx,edx
c001e749:	f7 f5                	div    ebp
c001e74b:	89 f0                	mov    eax,esi
c001e74d:	f7 f5                	div    ebp
c001e74f:	89 d0                	mov    eax,edx
c001e751:	eb d4                	jmp    c001e727 <__umoddi3+0x27>
c001e753:	90                   	nop
c001e754:	89 f1                	mov    ecx,esi
c001e756:	39 d8                	cmp    eax,ebx
c001e758:	76 0a                	jbe    c001e764 <__umoddi3+0x64>
c001e75a:	89 f0                	mov    eax,esi
c001e75c:	83 c4 1c             	add    esp,0x1c
c001e75f:	5b                   	pop    ebx
c001e760:	5e                   	pop    esi
c001e761:	5f                   	pop    edi
c001e762:	5d                   	pop    ebp
c001e763:	c3                   	ret    
c001e764:	0f bd e8             	bsr    ebp,eax
c001e767:	83 f5 1f             	xor    ebp,0x1f
c001e76a:	75 1c                	jne    c001e788 <__umoddi3+0x88>
c001e76c:	39 d8                	cmp    eax,ebx
c001e76e:	72 04                	jb     c001e774 <__umoddi3+0x74>
c001e770:	39 f7                	cmp    edi,esi
c001e772:	77 08                	ja     c001e77c <__umoddi3+0x7c>
c001e774:	89 da                	mov    edx,ebx
c001e776:	29 fe                	sub    esi,edi
c001e778:	19 c2                	sbb    edx,eax
c001e77a:	89 f1                	mov    ecx,esi
c001e77c:	89 c8                	mov    eax,ecx
c001e77e:	83 c4 1c             	add    esp,0x1c
c001e781:	5b                   	pop    ebx
c001e782:	5e                   	pop    esi
c001e783:	5f                   	pop    edi
c001e784:	5d                   	pop    ebp
c001e785:	c3                   	ret    
c001e786:	66 90                	xchg   ax,ax
c001e788:	ba 20 00 00 00       	mov    edx,0x20
c001e78d:	29 ea                	sub    edx,ebp
c001e78f:	89 e9                	mov    ecx,ebp
c001e791:	d3 e0                	shl    eax,cl
c001e793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e797:	89 f8                	mov    eax,edi
c001e799:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e79d:	88 d1                	mov    cl,dl
c001e79f:	d3 e8                	shr    eax,cl
c001e7a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7a5:	09 c1                	or     ecx,eax
c001e7a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7ab:	89 e9                	mov    ecx,ebp
c001e7ad:	d3 e7                	shl    edi,cl
c001e7af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7b3:	89 d8                	mov    eax,ebx
c001e7b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7b9:	88 d1                	mov    cl,dl
c001e7bb:	d3 e8                	shr    eax,cl
c001e7bd:	89 c7                	mov    edi,eax
c001e7bf:	89 e9                	mov    ecx,ebp
c001e7c1:	d3 e3                	shl    ebx,cl
c001e7c3:	89 f0                	mov    eax,esi
c001e7c5:	88 d1                	mov    cl,dl
c001e7c7:	d3 e8                	shr    eax,cl
c001e7c9:	09 d8                	or     eax,ebx
c001e7cb:	89 e9                	mov    ecx,ebp
c001e7cd:	d3 e6                	shl    esi,cl
c001e7cf:	89 f3                	mov    ebx,esi
c001e7d1:	89 fa                	mov    edx,edi
c001e7d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e7d7:	89 d1                	mov    ecx,edx
c001e7d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e7dd:	89 c6                	mov    esi,eax
c001e7df:	89 d7                	mov    edi,edx
c001e7e1:	39 d1                	cmp    ecx,edx
c001e7e3:	72 27                	jb     c001e80c <__umoddi3+0x10c>
c001e7e5:	74 21                	je     c001e808 <__umoddi3+0x108>
c001e7e7:	89 ca                	mov    edx,ecx
c001e7e9:	29 f3                	sub    ebx,esi
c001e7eb:	19 fa                	sbb    edx,edi
c001e7ed:	89 d0                	mov    eax,edx
c001e7ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e7f3:	d3 e0                	shl    eax,cl
c001e7f5:	89 e9                	mov    ecx,ebp
c001e7f7:	d3 eb                	shr    ebx,cl
c001e7f9:	09 d8                	or     eax,ebx
c001e7fb:	d3 ea                	shr    edx,cl
c001e7fd:	83 c4 1c             	add    esp,0x1c
c001e800:	5b                   	pop    ebx
c001e801:	5e                   	pop    esi
c001e802:	5f                   	pop    edi
c001e803:	5d                   	pop    ebp
c001e804:	c3                   	ret    
c001e805:	8d 76 00             	lea    esi,[esi+0x0]
c001e808:	39 c3                	cmp    ebx,eax
c001e80a:	73 db                	jae    c001e7e7 <__umoddi3+0xe7>
c001e80c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e810:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e814:	89 d7                	mov    edi,edx
c001e816:	89 c6                	mov    esi,eax
c001e818:	eb cd                	jmp    c001e7e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e81a <_init>:
c001e81a:	55                   	push   ebp
c001e81b:	89 e5                	mov    ebp,esp
c001e81d:	e8 d2 18 fe ff       	call   c00000f4 <frame_dummy>
c001e822:	e8 e5 fa ff ff       	call   c001e30c <__do_global_ctors_aux>
c001e827:	5d                   	pop    ebp
c001e828:	c3                   	ret    

Disassembly of section .fini:

c001e829 <_fini>:
c001e829:	55                   	push   ebp
c001e82a:	89 e5                	mov    ebp,esp
c001e82c:	e8 53 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e831:	5d                   	pop    ebp
c001e832:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e834 <Computer::~Computer()>:
c001e834:	83 ec 0c             	sub    esp,0xc
c001e837:	ba 54 fb 01 c0       	mov    edx,0xc001fb54
c001e83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e840:	89 10                	mov    DWORD PTR [eax],edx
c001e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e846:	83 ec 0c             	sub    esp,0xc
c001e849:	50                   	push   eax
c001e84a:	e8 83 d4 fe ff       	call   c000bcd2 <Device::~Device()>
c001e84f:	83 c4 10             	add    esp,0x10
c001e852:	90                   	nop
c001e853:	83 c4 0c             	add    esp,0xc
c001e856:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e858 <Computer::~Computer()>:
c001e858:	83 ec 0c             	sub    esp,0xc
c001e85b:	83 ec 0c             	sub    esp,0xc
c001e85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e862:	e8 cd ff ff ff       	call   c001e834 <Computer::~Computer()>
c001e867:	83 c4 10             	add    esp,0x10
c001e86a:	83 ec 08             	sub    esp,0x8
c001e86d:	68 70 01 00 00       	push   0x170
c001e872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e876:	e8 f6 bf fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001e87b:	83 c4 10             	add    esp,0x10
c001e87e:	83 c4 0c             	add    esp,0xc
c001e881:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e882 <idleCommon()>:
c001e882:	83 ec 0c             	sub    esp,0xc
c001e885:	fa                   	cli    
c001e886:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e88c:	e8 a3 67 ff ff       	call   c0015034 <schedule()>
c001e891:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e896:	48                   	dec    eax
c001e897:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e89c:	75 01                	jne    c001e89f <idleCommon()+0x1d>
c001e89e:	fb                   	sti    
c001e89f:	83 c4 0c             	add    esp,0xc
c001e8a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e8a4 <LinkedList<UnixFile>::~LinkedList()>:
c001e8a4:	90                   	nop
c001e8a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e8a6 <LinkedList<UnixFile>::LinkedList()>:
c001e8a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8e6:	90                   	nop
c001e8e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e8e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e8e8:	83 ec 0c             	sub    esp,0xc
c001e8eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e8f0:	75 10                	jne    c001e902 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e8f2:	83 ec 0c             	sub    esp,0xc
c001e8f5:	68 68 fd 01 c0       	push   0xc001fd68
c001e8fa:	e8 3a 1f ff ff       	call   c0010839 <KePanic(char const*)>
c001e8ff:	83 c4 10             	add    esp,0x10
c001e902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e906:	8b 00                	mov    eax,DWORD PTR [eax]
c001e908:	85 c0                	test   eax,eax
c001e90a:	74 34                	je     c001e940 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e910:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e913:	85 c0                	test   eax,eax
c001e915:	74 29                	je     c001e940 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e91e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e922:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e929:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e92d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e934:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e937:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e93e:	eb 65                	jmp    c001e9a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e944:	8b 00                	mov    eax,DWORD PTR [eax]
c001e946:	85 c0                	test   eax,eax
c001e948:	75 4b                	jne    c001e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e951:	85 c0                	test   eax,eax
c001e953:	75 40                	jne    c001e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e959:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e95d:	89 10                	mov    DWORD PTR [eax],edx
c001e95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e963:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e967:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e971:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e97f:	85 c0                	test   eax,eax
c001e981:	74 22                	je     c001e9a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e983:	83 ec 0c             	sub    esp,0xc
c001e986:	68 8a fd 01 c0       	push   0xc001fd8a
c001e98b:	e8 a9 1e ff ff       	call   c0010839 <KePanic(char const*)>
c001e990:	83 c4 10             	add    esp,0x10
c001e993:	eb 10                	jmp    c001e9a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e995:	83 ec 0c             	sub    esp,0xc
c001e998:	68 94 fd 01 c0       	push   0xc001fd94
c001e99d:	e8 97 1e ff ff       	call   c0010839 <KePanic(char const*)>
c001e9a2:	83 c4 10             	add    esp,0x10
c001e9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ac:	8d 50 01             	lea    edx,[eax+0x1]
c001e9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9b6:	90                   	nop
c001e9b7:	83 c4 0c             	add    esp,0xc
c001e9ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e9bc <LinkedList<UnixFile>::getFirstElement()>:
c001e9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e9c4 <LinkedList<UnixFile>::removeFirst()>:
c001e9c4:	83 ec 0c             	sub    esp,0xc
c001e9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9cd:	85 c0                	test   eax,eax
c001e9cf:	75 12                	jne    c001e9e3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e9d1:	83 ec 0c             	sub    esp,0xc
c001e9d4:	68 a0 fd 01 c0       	push   0xc001fda0
c001e9d9:	e8 5b 1e ff ff       	call   c0010839 <KePanic(char const*)>
c001e9de:	83 c4 10             	add    esp,0x10
c001e9e1:	eb 7e                	jmp    c001ea61 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ed:	85 c0                	test   eax,eax
c001e9ef:	74 10                	je     c001ea01 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e9f1:	83 ec 0c             	sub    esp,0xc
c001e9f4:	68 eb fd 01 c0       	push   0xc001fdeb
c001e9f9:	e8 3b 1e ff ff       	call   c0010839 <KePanic(char const*)>
c001e9fe:	83 c4 10             	add    esp,0x10
c001ea01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea05:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea0a:	85 c0                	test   eax,eax
c001ea0c:	75 33                	jne    c001ea41 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea2a:	83 f8 01             	cmp    eax,0x1
c001ea2d:	74 21                	je     c001ea50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea2f:	83 ec 0c             	sub    esp,0xc
c001ea32:	68 c4 fd 01 c0       	push   0xc001fdc4
c001ea37:	e8 fd 1d ff ff       	call   c0010839 <KePanic(char const*)>
c001ea3c:	83 c4 10             	add    esp,0x10
c001ea3f:	eb 0f                	jmp    c001ea50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea45:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea47:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4e:	89 10                	mov    DWORD PTR [eax],edx
c001ea50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea57:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea61:	83 c4 0c             	add    esp,0xc
c001ea64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ea66 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ea66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea6d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ea6e <DriverlessDevice::~DriverlessDevice()>:
c001ea6e:	ba 3c 04 02 c0       	mov    edx,0xc002043c
c001ea73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea77:	89 10                	mov    DWORD PTR [eax],edx
c001ea79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea7d:	50                   	push   eax
c001ea7e:	e8 4f d2 fe ff       	call   c000bcd2 <Device::~Device()>
c001ea83:	83 c4 04             	add    esp,0x4
c001ea86:	90                   	nop
c001ea87:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ea88 <DriverlessDevice::~DriverlessDevice()>:
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	83 ec 0c             	sub    esp,0xc
c001ea8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea92:	e8 d7 ff ff ff       	call   c001ea6e <DriverlessDevice::~DriverlessDevice()>
c001ea97:	83 c4 10             	add    esp,0x10
c001ea9a:	83 ec 08             	sub    esp,0x8
c001ea9d:	68 58 01 00 00       	push   0x158
c001eaa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaa6:	e8 c6 bd fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001eaab:	83 c4 10             	add    esp,0x10
c001eaae:	83 c4 0c             	add    esp,0xc
c001eab1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eab2 <LinkedList<Device>::addElement(Device*)>:
c001eab2:	83 ec 0c             	sub    esp,0xc
c001eab5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eaba:	75 10                	jne    c001eacc <LinkedList<Device>::addElement(Device*)+0x1a>
c001eabc:	83 ec 0c             	sub    esp,0xc
c001eabf:	68 68 fd 01 c0       	push   0xc001fd68
c001eac4:	e8 70 1d ff ff       	call   c0010839 <KePanic(char const*)>
c001eac9:	83 c4 10             	add    esp,0x10
c001eacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ead2:	85 c0                	test   eax,eax
c001ead4:	74 3a                	je     c001eb10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ead6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eadd:	85 c0                	test   eax,eax
c001eadf:	74 2f                	je     c001eb10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eae8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eafa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb04:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb0e:	eb 68                	jmp    c001eb78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb14:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb16:	85 c0                	test   eax,eax
c001eb18:	75 4e                	jne    c001eb68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb21:	85 c0                	test   eax,eax
c001eb23:	75 43                	jne    c001eb68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb2d:	89 10                	mov    DWORD PTR [eax],edx
c001eb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb41:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb52:	85 c0                	test   eax,eax
c001eb54:	74 22                	je     c001eb78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb56:	83 ec 0c             	sub    esp,0xc
c001eb59:	68 8a fd 01 c0       	push   0xc001fd8a
c001eb5e:	e8 d6 1c ff ff       	call   c0010839 <KePanic(char const*)>
c001eb63:	83 c4 10             	add    esp,0x10
c001eb66:	eb 10                	jmp    c001eb78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb68:	83 ec 0c             	sub    esp,0xc
c001eb6b:	68 94 fd 01 c0       	push   0xc001fd94
c001eb70:	e8 c4 1c ff ff       	call   c0010839 <KePanic(char const*)>
c001eb75:	83 c4 10             	add    esp,0x10
c001eb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb7f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb89:	90                   	nop
c001eb8a:	83 c4 0c             	add    esp,0xc
c001eb8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eb8e <LinkedList<Device>::LinkedList()>:
c001eb8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eba7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebce:	90                   	nop
c001ebcf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ebd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd6:	85 c0                	test   eax,eax
c001ebd8:	75 0e                	jne    c001ebe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebe1:	85 c0                	test   eax,eax
c001ebe3:	75 03                	jne    c001ebe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebe5:	b0 01                	mov    al,0x1
c001ebe7:	c3                   	ret    
c001ebe8:	b0 00                	mov    al,0x0
c001ebea:	90                   	nop
c001ebeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ebec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ebf4:	83 ec 0c             	sub    esp,0xc
c001ebf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebfd:	85 c0                	test   eax,eax
c001ebff:	75 17                	jne    c001ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ec01:	83 ec 0c             	sub    esp,0xc
c001ec04:	68 a0 fd 01 c0       	push   0xc001fda0
c001ec09:	e8 2b 1c ff ff       	call   c0010839 <KePanic(char const*)>
c001ec0e:	83 c4 10             	add    esp,0x10
c001ec11:	e9 96 00 00 00       	jmp    c001ecac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ec16:	66 90                	xchg   ax,ax
c001ec18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec22:	85 c0                	test   eax,eax
c001ec24:	0f 95 c0             	setne  al
c001ec27:	0f b6 c0             	movzx  eax,al
c001ec2a:	85 c0                	test   eax,eax
c001ec2c:	74 12                	je     c001ec40 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ec2e:	83 ec 0c             	sub    esp,0xc
c001ec31:	68 eb fd 01 c0       	push   0xc001fdeb
c001ec36:	e8 fe 1b ff ff       	call   c0010839 <KePanic(char const*)>
c001ec3b:	83 c4 10             	add    esp,0x10
c001ec3e:	66 90                	xchg   ax,ax
c001ec40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec49:	85 c0                	test   eax,eax
c001ec4b:	0f 94 c0             	sete   al
c001ec4e:	0f b6 c0             	movzx  eax,al
c001ec51:	85 c0                	test   eax,eax
c001ec53:	74 33                	je     c001ec88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ec55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec71:	83 f8 01             	cmp    eax,0x1
c001ec74:	74 22                	je     c001ec98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec76:	83 ec 0c             	sub    esp,0xc
c001ec79:	68 c4 fd 01 c0       	push   0xc001fdc4
c001ec7e:	e8 b6 1b ff ff       	call   c0010839 <KePanic(char const*)>
c001ec83:	83 c4 10             	add    esp,0x10
c001ec86:	eb 10                	jmp    c001ec98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec95:	89 10                	mov    DWORD PTR [eax],edx
c001ec97:	90                   	nop
c001ec98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec9f:	8d 50 ff             	lea    edx,[eax-0x1]
c001eca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eca9:	8d 76 00             	lea    esi,[esi+0x0]
c001ecac:	83 c4 0c             	add    esp,0xc
c001ecaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ecb0:	83 ec 0c             	sub    esp,0xc
c001ecb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ecb8:	75 12                	jne    c001eccc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ecba:	83 ec 0c             	sub    esp,0xc
c001ecbd:	68 68 fd 01 c0       	push   0xc001fd68
c001ecc2:	e8 72 1b ff ff       	call   c0010839 <KePanic(char const*)>
c001ecc7:	83 c4 10             	add    esp,0x10
c001ecca:	66 90                	xchg   ax,ax
c001eccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecd2:	85 c0                	test   eax,eax
c001ecd4:	74 36                	je     c001ed0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ecd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecdd:	85 c0                	test   eax,eax
c001ecdf:	74 2b                	je     c001ed0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ece1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ece8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ecef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed08:	eb 6a                	jmp    c001ed74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed0a:	66 90                	xchg   ax,ax
c001ed0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed12:	85 c0                	test   eax,eax
c001ed14:	75 4e                	jne    c001ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed1d:	85 c0                	test   eax,eax
c001ed1f:	75 43                	jne    c001ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed29:	89 10                	mov    DWORD PTR [eax],edx
c001ed2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed4b:	85 c0                	test   eax,eax
c001ed4d:	74 25                	je     c001ed74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed4f:	83 ec 0c             	sub    esp,0xc
c001ed52:	68 8a fd 01 c0       	push   0xc001fd8a
c001ed57:	e8 dd 1a ff ff       	call   c0010839 <KePanic(char const*)>
c001ed5c:	83 c4 10             	add    esp,0x10
c001ed5f:	eb 13                	jmp    c001ed74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed61:	8d 76 00             	lea    esi,[esi+0x0]
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	68 94 fd 01 c0       	push   0xc001fd94
c001ed6c:	e8 c8 1a ff ff       	call   c0010839 <KePanic(char const*)>
c001ed71:	83 c4 10             	add    esp,0x10
c001ed74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed7b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed85:	90                   	nop
c001ed86:	83 c4 0c             	add    esp,0xc
c001ed89:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ed8c <ACPI::~ACPI()>:
c001ed8c:	83 ec 0c             	sub    esp,0xc
c001ed8f:	ba 40 0a 02 c0       	mov    edx,0xc0020a40
c001ed94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed98:	89 10                	mov    DWORD PTR [eax],edx
c001ed9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9e:	83 ec 0c             	sub    esp,0xc
c001eda1:	50                   	push   eax
c001eda2:	e8 2b cf fe ff       	call   c000bcd2 <Device::~Device()>
c001eda7:	83 c4 10             	add    esp,0x10
c001edaa:	90                   	nop
c001edab:	83 c4 0c             	add    esp,0xc
c001edae:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001edb0 <ACPI::~ACPI()>:
c001edb0:	83 ec 0c             	sub    esp,0xc
c001edb3:	83 ec 0c             	sub    esp,0xc
c001edb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edba:	e8 cd ff ff ff       	call   c001ed8c <ACPI::~ACPI()>
c001edbf:	83 c4 10             	add    esp,0x10
c001edc2:	83 ec 08             	sub    esp,0x8
c001edc5:	68 64 12 00 00       	push   0x1264
c001edca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edce:	e8 9e ba fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001edd3:	83 c4 10             	add    esp,0x10
c001edd6:	83 c4 0c             	add    esp,0xc
c001edd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001eddc <LinkedList<Device>::~LinkedList()>:
c001eddc:	90                   	nop
c001eddd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ede0 <LinkedList<Device>::isEmpty()>:
c001ede0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ede4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ede6:	85 c0                	test   eax,eax
c001ede8:	75 0e                	jne    c001edf8 <LinkedList<Device>::isEmpty()+0x18>
c001edea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edf1:	85 c0                	test   eax,eax
c001edf3:	75 03                	jne    c001edf8 <LinkedList<Device>::isEmpty()+0x18>
c001edf5:	b0 01                	mov    al,0x1
c001edf7:	c3                   	ret    
c001edf8:	b0 00                	mov    al,0x0
c001edfa:	90                   	nop
c001edfb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001edfc <LinkedList<Device>::getFirstElement()>:
c001edfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ee04 <LinkedList<Device>::removeFirst()>:
c001ee04:	83 ec 0c             	sub    esp,0xc
c001ee07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee0d:	85 c0                	test   eax,eax
c001ee0f:	75 17                	jne    c001ee28 <LinkedList<Device>::removeFirst()+0x24>
c001ee11:	83 ec 0c             	sub    esp,0xc
c001ee14:	68 a0 fd 01 c0       	push   0xc001fda0
c001ee19:	e8 1b 1a ff ff       	call   c0010839 <KePanic(char const*)>
c001ee1e:	83 c4 10             	add    esp,0x10
c001ee21:	e9 92 00 00 00       	jmp    c001eeb8 <LinkedList<Device>::removeFirst()+0xb4>
c001ee26:	66 90                	xchg   ax,ax
c001ee28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee2f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee35:	85 c0                	test   eax,eax
c001ee37:	74 13                	je     c001ee4c <LinkedList<Device>::removeFirst()+0x48>
c001ee39:	83 ec 0c             	sub    esp,0xc
c001ee3c:	68 eb fd 01 c0       	push   0xc001fdeb
c001ee41:	e8 f3 19 ff ff       	call   c0010839 <KePanic(char const*)>
c001ee46:	83 c4 10             	add    esp,0x10
c001ee49:	8d 76 00             	lea    esi,[esi+0x0]
c001ee4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee52:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee58:	85 c0                	test   eax,eax
c001ee5a:	75 34                	jne    c001ee90 <LinkedList<Device>::removeFirst()+0x8c>
c001ee5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee78:	83 f8 01             	cmp    eax,0x1
c001ee7b:	74 27                	je     c001eea4 <LinkedList<Device>::removeFirst()+0xa0>
c001ee7d:	83 ec 0c             	sub    esp,0xc
c001ee80:	68 c4 fd 01 c0       	push   0xc001fdc4
c001ee85:	e8 af 19 ff ff       	call   c0010839 <KePanic(char const*)>
c001ee8a:	83 c4 10             	add    esp,0x10
c001ee8d:	eb 15                	jmp    c001eea4 <LinkedList<Device>::removeFirst()+0xa0>
c001ee8f:	90                   	nop
c001ee90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee96:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ee9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea0:	89 10                	mov    DWORD PTR [eax],edx
c001eea2:	66 90                	xchg   ax,ax
c001eea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeab:	8d 50 ff             	lea    edx,[eax-0x1]
c001eeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eeb5:	8d 76 00             	lea    esi,[esi+0x0]
c001eeb8:	83 c4 0c             	add    esp,0xc
c001eebb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eebc <CPU::~CPU()>:
c001eebc:	83 ec 0c             	sub    esp,0xc
c001eebf:	ba dc 0b 02 c0       	mov    edx,0xc0020bdc
c001eec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec8:	89 10                	mov    DWORD PTR [eax],edx
c001eeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eece:	83 ec 0c             	sub    esp,0xc
c001eed1:	50                   	push   eax
c001eed2:	e8 fb cd fe ff       	call   c000bcd2 <Device::~Device()>
c001eed7:	83 c4 10             	add    esp,0x10
c001eeda:	90                   	nop
c001eedb:	83 c4 0c             	add    esp,0xc
c001eede:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eee0 <CPU::~CPU()>:
c001eee0:	83 ec 0c             	sub    esp,0xc
c001eee3:	83 ec 0c             	sub    esp,0xc
c001eee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeea:	e8 cd ff ff ff       	call   c001eebc <CPU::~CPU()>
c001eeef:	83 c4 10             	add    esp,0x10
c001eef2:	83 ec 08             	sub    esp,0x8
c001eef5:	68 94 11 00 00       	push   0x1194
c001eefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eefe:	e8 6e b9 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001ef03:	83 c4 10             	add    esp,0x10
c001ef06:	83 c4 0c             	add    esp,0xc
c001ef09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ef0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ef0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef10:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef14 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef14:	90                   	nop
c001ef15:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef18 <ThreadControlBlock::ThreadControlBlock()>:
c001ef18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef1c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef27:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef32:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef3d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ef44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef48:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ef4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef53:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ef57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef5b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ef5f:	90                   	nop
c001ef60:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ef64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ef64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef7d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef9d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efa4:	90                   	nop
c001efa5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001efa6 <PCI::~PCI()>:
c001efa6:	83 ec 0c             	sub    esp,0xc
c001efa9:	ba 40 1a 02 c0       	mov    edx,0xc0021a40
c001efae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb2:	89 10                	mov    DWORD PTR [eax],edx
c001efb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	50                   	push   eax
c001efbc:	e8 a3 c7 fe ff       	call   c000b764 <Bus::~Bus()>
c001efc1:	83 c4 10             	add    esp,0x10
c001efc4:	90                   	nop
c001efc5:	83 c4 0c             	add    esp,0xc
c001efc8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001efca <PCI::~PCI()>:
c001efca:	83 ec 0c             	sub    esp,0xc
c001efcd:	83 ec 0c             	sub    esp,0xc
c001efd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efd4:	e8 cd ff ff ff       	call   c001efa6 <PCI::~PCI()>
c001efd9:	83 c4 10             	add    esp,0x10
c001efdc:	83 ec 08             	sub    esp,0x8
c001efdf:	68 5c 01 00 00       	push   0x15c
c001efe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe8:	e8 84 b8 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001efed:	83 c4 10             	add    esp,0x10
c001eff0:	83 c4 0c             	add    esp,0xc
c001eff3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001eff4 <IDE::~IDE()>:
c001eff4:	83 ec 0c             	sub    esp,0xc
c001eff7:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c001effc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f000:	89 10                	mov    DWORD PTR [eax],edx
c001f002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f006:	83 ec 0c             	sub    esp,0xc
c001f009:	50                   	push   eax
c001f00a:	e8 3d d1 fe ff       	call   c000c14c <HardDiskController::~HardDiskController()>
c001f00f:	83 c4 10             	add    esp,0x10
c001f012:	90                   	nop
c001f013:	83 c4 0c             	add    esp,0xc
c001f016:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f018 <IDE::~IDE()>:
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	83 ec 0c             	sub    esp,0xc
c001f01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f022:	e8 cd ff ff ff       	call   c001eff4 <IDE::~IDE()>
c001f027:	83 c4 10             	add    esp,0x10
c001f02a:	83 ec 08             	sub    esp,0x8
c001f02d:	68 70 02 00 00       	push   0x270
c001f032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f036:	e8 36 b8 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001f03b:	83 c4 10             	add    esp,0x10
c001f03e:	83 c4 0c             	add    esp,0xc
c001f041:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f042 <SATABus::~SATABus()>:
c001f042:	83 ec 0c             	sub    esp,0xc
c001f045:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c001f04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04e:	89 10                	mov    DWORD PTR [eax],edx
c001f050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	50                   	push   eax
c001f058:	e8 ef d0 fe ff       	call   c000c14c <HardDiskController::~HardDiskController()>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	90                   	nop
c001f061:	83 c4 0c             	add    esp,0xc
c001f064:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f066 <SATABus::~SATABus()>:
c001f066:	83 ec 0c             	sub    esp,0xc
c001f069:	83 ec 0c             	sub    esp,0xc
c001f06c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f070:	e8 cd ff ff ff       	call   c001f042 <SATABus::~SATABus()>
c001f075:	83 c4 10             	add    esp,0x10
c001f078:	83 ec 08             	sub    esp,0x8
c001f07b:	68 64 01 00 00       	push   0x164
c001f080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f084:	e8 e8 b7 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001f089:	83 c4 10             	add    esp,0x10
c001f08c:	83 c4 0c             	add    esp,0xc
c001f08f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f090 <ATA::~ATA()>:
c001f090:	83 ec 0c             	sub    esp,0xc
c001f093:	ba 84 1b 02 c0       	mov    edx,0xc0021b84
c001f098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09c:	89 10                	mov    DWORD PTR [eax],edx
c001f09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a2:	83 ec 0c             	sub    esp,0xc
c001f0a5:	50                   	push   eax
c001f0a6:	e8 83 d1 fe ff       	call   c000c22e <PhysicalDisk::~PhysicalDisk()>
c001f0ab:	83 c4 10             	add    esp,0x10
c001f0ae:	90                   	nop
c001f0af:	83 c4 0c             	add    esp,0xc
c001f0b2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f0b4 <ATA::~ATA()>:
c001f0b4:	83 ec 0c             	sub    esp,0xc
c001f0b7:	83 ec 0c             	sub    esp,0xc
c001f0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0be:	e8 cd ff ff ff       	call   c001f090 <ATA::~ATA()>
c001f0c3:	83 c4 10             	add    esp,0x10
c001f0c6:	83 ec 08             	sub    esp,0x8
c001f0c9:	68 7c 01 00 00       	push   0x17c
c001f0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0d2:	e8 9a b7 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001f0d7:	83 c4 10             	add    esp,0x10
c001f0da:	83 c4 0c             	add    esp,0xc
c001f0dd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f0de <ATAPI::~ATAPI()>:
c001f0de:	83 ec 0c             	sub    esp,0xc
c001f0e1:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c001f0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ea:	89 10                	mov    DWORD PTR [eax],edx
c001f0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f0:	83 ec 0c             	sub    esp,0xc
c001f0f3:	50                   	push   eax
c001f0f4:	e8 35 d1 fe ff       	call   c000c22e <PhysicalDisk::~PhysicalDisk()>
c001f0f9:	83 c4 10             	add    esp,0x10
c001f0fc:	90                   	nop
c001f0fd:	83 c4 0c             	add    esp,0xc
c001f100:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f102 <ATAPI::~ATAPI()>:
c001f102:	83 ec 0c             	sub    esp,0xc
c001f105:	83 ec 0c             	sub    esp,0xc
c001f108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f10c:	e8 cd ff ff ff       	call   c001f0de <ATAPI::~ATAPI()>
c001f111:	83 c4 10             	add    esp,0x10
c001f114:	83 ec 08             	sub    esp,0x8
c001f117:	68 84 01 00 00       	push   0x184
c001f11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f120:	e8 4c b7 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001f125:	83 c4 10             	add    esp,0x10
c001f128:	83 c4 0c             	add    esp,0xc
c001f12b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f12c <SATA::~SATA()>:
c001f12c:	83 ec 0c             	sub    esp,0xc
c001f12f:	ba 80 1c 02 c0       	mov    edx,0xc0021c80
c001f134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f138:	89 10                	mov    DWORD PTR [eax],edx
c001f13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13e:	83 ec 0c             	sub    esp,0xc
c001f141:	50                   	push   eax
c001f142:	e8 e7 d0 fe ff       	call   c000c22e <PhysicalDisk::~PhysicalDisk()>
c001f147:	83 c4 10             	add    esp,0x10
c001f14a:	90                   	nop
c001f14b:	83 c4 0c             	add    esp,0xc
c001f14e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f150 <SATA::~SATA()>:
c001f150:	83 ec 0c             	sub    esp,0xc
c001f153:	83 ec 0c             	sub    esp,0xc
c001f156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f15a:	e8 cd ff ff ff       	call   c001f12c <SATA::~SATA()>
c001f15f:	83 c4 10             	add    esp,0x10
c001f162:	83 ec 08             	sub    esp,0x8
c001f165:	68 7c 01 00 00       	push   0x17c
c001f16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f16e:	e8 fe b6 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001f173:	83 c4 10             	add    esp,0x10
c001f176:	83 c4 0c             	add    esp,0xc
c001f179:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f17a <SATAPI::~SATAPI()>:
c001f17a:	83 ec 0c             	sub    esp,0xc
c001f17d:	ba a4 1d 02 c0       	mov    edx,0xc0021da4
c001f182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f186:	89 10                	mov    DWORD PTR [eax],edx
c001f188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f18c:	83 ec 0c             	sub    esp,0xc
c001f18f:	50                   	push   eax
c001f190:	e8 99 d0 fe ff       	call   c000c22e <PhysicalDisk::~PhysicalDisk()>
c001f195:	83 c4 10             	add    esp,0x10
c001f198:	90                   	nop
c001f199:	83 c4 0c             	add    esp,0xc
c001f19c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f19e <SATAPI::~SATAPI()>:
c001f19e:	83 ec 0c             	sub    esp,0xc
c001f1a1:	83 ec 0c             	sub    esp,0xc
c001f1a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1a8:	e8 cd ff ff ff       	call   c001f17a <SATAPI::~SATAPI()>
c001f1ad:	83 c4 10             	add    esp,0x10
c001f1b0:	83 ec 08             	sub    esp,0x8
c001f1b3:	68 84 01 00 00       	push   0x184
c001f1b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1bc:	e8 b0 b6 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001f1c1:	83 c4 10             	add    esp,0x10
c001f1c4:	83 c4 0c             	add    esp,0xc
c001f1c7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f1c8 <IOAPIC::~IOAPIC()>:
c001f1c8:	83 ec 0c             	sub    esp,0xc
c001f1cb:	ba e4 1d 02 c0       	mov    edx,0xc0021de4
c001f1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d4:	89 10                	mov    DWORD PTR [eax],edx
c001f1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1da:	83 ec 0c             	sub    esp,0xc
c001f1dd:	50                   	push   eax
c001f1de:	e8 ef ca fe ff       	call   c000bcd2 <Device::~Device()>
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	90                   	nop
c001f1e7:	83 c4 0c             	add    esp,0xc
c001f1ea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f1ec <IOAPIC::~IOAPIC()>:
c001f1ec:	83 ec 0c             	sub    esp,0xc
c001f1ef:	83 ec 0c             	sub    esp,0xc
c001f1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f6:	e8 cd ff ff ff       	call   c001f1c8 <IOAPIC::~IOAPIC()>
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	83 ec 08             	sub    esp,0x8
c001f201:	68 68 01 00 00       	push   0x168
c001f206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f20a:	e8 62 b6 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001f20f:	83 c4 10             	add    esp,0x10
c001f212:	83 c4 0c             	add    esp,0xc
c001f215:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f218 <APICTimer::~APICTimer()>:
c001f218:	83 ec 0c             	sub    esp,0xc
c001f21b:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c001f220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f224:	89 10                	mov    DWORD PTR [eax],edx
c001f226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22a:	83 ec 0c             	sub    esp,0xc
c001f22d:	50                   	push   eax
c001f22e:	e8 75 e5 fe ff       	call   c000d7a8 <Timer::~Timer()>
c001f233:	83 c4 10             	add    esp,0x10
c001f236:	90                   	nop
c001f237:	83 c4 0c             	add    esp,0xc
c001f23a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f23c <APICTimer::~APICTimer()>:
c001f23c:	83 ec 0c             	sub    esp,0xc
c001f23f:	83 ec 0c             	sub    esp,0xc
c001f242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f246:	e8 cd ff ff ff       	call   c001f218 <APICTimer::~APICTimer()>
c001f24b:	83 c4 10             	add    esp,0x10
c001f24e:	83 ec 08             	sub    esp,0x8
c001f251:	68 60 01 00 00       	push   0x160
c001f256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f25a:	e8 12 b6 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	83 c4 0c             	add    esp,0xc
c001f265:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f268 <PIT::~PIT()>:
c001f268:	83 ec 0c             	sub    esp,0xc
c001f26b:	ba 7c 1e 02 c0       	mov    edx,0xc0021e7c
c001f270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f274:	89 10                	mov    DWORD PTR [eax],edx
c001f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27a:	83 ec 0c             	sub    esp,0xc
c001f27d:	50                   	push   eax
c001f27e:	e8 25 e5 fe ff       	call   c000d7a8 <Timer::~Timer()>
c001f283:	83 c4 10             	add    esp,0x10
c001f286:	90                   	nop
c001f287:	83 c4 0c             	add    esp,0xc
c001f28a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f28c <PIT::~PIT()>:
c001f28c:	83 ec 0c             	sub    esp,0xc
c001f28f:	83 ec 0c             	sub    esp,0xc
c001f292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f296:	e8 cd ff ff ff       	call   c001f268 <PIT::~PIT()>
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	83 ec 08             	sub    esp,0x8
c001f2a1:	68 5c 01 00 00       	push   0x15c
c001f2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2aa:	e8 c2 b5 fe ff       	call   c000a871 <operator delete(void*, unsigned long)>
c001f2af:	83 c4 10             	add    esp,0x10
c001f2b2:	83 c4 0c             	add    esp,0xc
c001f2b5:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be cd 0c 02 c0       	mov    esi,0xc0020ccd
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be e9 0c 02 c0       	mov    esi,0xc0020ce9
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
